// Generated by Haxe 4.3.4
#ifndef INCLUDED_states_stages_PhillyBlazin
#define INCLUDED_states_stages_PhillyBlazin

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_backend_BaseStage
#include <backend/BaseStage.h>
#endif
HX_DECLARE_CLASS1(backend,BaseStage)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxStrip)
HX_DECLARE_CLASS3(flixel,addons,display,FlxTiledSprite)
HX_DECLARE_CLASS3(flixel,graphics,tile,FlxGraphicsShader)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(objects,BGSprite)
HX_DECLARE_CLASS1(objects,Note)
HX_DECLARE_CLASS2(openfl,display,GraphicsShader)
HX_DECLARE_CLASS2(openfl,display,Shader)
HX_DECLARE_CLASS1(shaders,RainShader)
HX_DECLARE_CLASS2(states,stages,PhillyBlazin)
HX_DECLARE_CLASS3(states,stages,objects,ABotSpeaker)
HX_DECLARE_CLASS3(states,stages,objects,DarnellBlazinHandler)
HX_DECLARE_CLASS3(states,stages,objects,PicoBlazinHandler)

namespace states{
namespace stages{


class HXCPP_CLASS_ATTRIBUTES PhillyBlazin_obj : public  ::backend::BaseStage_obj
{
	public:
		typedef  ::backend::BaseStage_obj super;
		typedef PhillyBlazin_obj OBJ_;
		PhillyBlazin_obj();

	public:
		enum { _hx_ClassId = 0x1bebca6b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.stages.PhillyBlazin")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.stages.PhillyBlazin"); }
		static ::hx::ObjectPtr< PhillyBlazin_obj > __new();
		static ::hx::ObjectPtr< PhillyBlazin_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PhillyBlazin_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PhillyBlazin",50,a9,cd,5e); }

		 ::shaders::RainShader rainShader;
		Float rainTimeScale;
		 ::flixel::addons::display::FlxTiledSprite scrollingSky;
		 ::objects::BGSprite skyAdditive;
		 ::objects::BGSprite lightning;
		 ::objects::BGSprite foregroundMultiply;
		 ::flixel::FlxSprite additionalLighten;
		Float lightningTimer;
		 ::states::stages::objects::ABotSpeaker abot;
		void create();

		void createPost();

		void beatHit();

		void startSong();

		void setupRainShader();
		::Dynamic setupRainShader_dyn();

		void precache();
		::Dynamic precache_dyn();

		void update(Float elapsed);

		void applyLightning();
		::Dynamic applyLightning_dyn();

		 ::states::stages::objects::PicoBlazinHandler picoFight;
		 ::states::stages::objects::DarnellBlazinHandler darnellFight;
		void goodNoteHit( ::objects::Note note);

		void noteMiss( ::objects::Note note);

		void noteMissPress(int direction);

		void opponentNoteHit( ::objects::Note note);

};

} // end namespace states
} // end namespace stages

#endif /* INCLUDED_states_stages_PhillyBlazin */ 
