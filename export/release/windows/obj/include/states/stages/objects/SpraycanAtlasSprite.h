// Generated by Haxe 4.3.4
#ifndef INCLUDED_states_stages_objects_SpraycanAtlasSprite
#define INCLUDED_states_stages_objects_SpraycanAtlasSprite

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(flxanimate,FlxAnimate)
HX_DECLARE_CLASS1(flxanimate,PsychFlxAnimate)
HX_DECLARE_CLASS3(states,stages,objects,SpraycanAtlasSprite)
HX_DECLARE_CLASS3(states,stages,objects,SpraycanState)

namespace states{
namespace stages{
namespace objects{


class HXCPP_CLASS_ATTRIBUTES SpraycanAtlasSprite_obj : public  ::flixel::group::FlxTypedSpriteGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedSpriteGroup_obj super;
		typedef SpraycanAtlasSprite_obj OBJ_;
		SpraycanAtlasSprite_obj();

	public:
		enum { _hx_ClassId = 0x7749b4c0 };

		void __construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.stages.objects.SpraycanAtlasSprite")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.stages.objects.SpraycanAtlasSprite"); }
		static ::hx::ObjectPtr< SpraycanAtlasSprite_obj > __new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y);
		static ::hx::ObjectPtr< SpraycanAtlasSprite_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~SpraycanAtlasSprite_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SpraycanAtlasSprite",8d,53,6b,05); }

		 ::states::stages::objects::SpraycanState currentState;
		 ::flxanimate::PsychFlxAnimate canAtlas;
		 ::flixel::FlxSprite explosion;
		bool cutscene;
		void finishCanAnimation();
		::Dynamic finishCanAnimation_dyn();

		void playHitExplosion();
		::Dynamic playHitExplosion_dyn();

		void playCanStart();
		::Dynamic playCanStart_dyn();

		void playCanShot();
		::Dynamic playCanShot_dyn();

		void playHitPico();
		::Dynamic playHitPico_dyn();

		::String playingAnim;
		void playAnimation(::String name);
		::Dynamic playAnimation_dyn();

};

} // end namespace states
} // end namespace stages
} // end namespace objects

#endif /* INCLUDED_states_stages_objects_SpraycanAtlasSprite */ 
