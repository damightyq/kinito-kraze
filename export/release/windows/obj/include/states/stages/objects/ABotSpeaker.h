// Generated by Haxe 4.3.4
#ifndef INCLUDED_states_stages_objects_ABotSpeaker
#define INCLUDED_states_stages_objects_ABotSpeaker

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,sound,FlxSound)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(flxanimate,FlxAnimate)
HX_DECLARE_CLASS1(flxanimate,PsychFlxAnimate)
HX_DECLARE_CLASS3(states,stages,objects,ABotSpeaker)

namespace states{
namespace stages{
namespace objects{


class HXCPP_CLASS_ATTRIBUTES ABotSpeaker_obj : public  ::flixel::group::FlxTypedSpriteGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedSpriteGroup_obj super;
		typedef ABotSpeaker_obj OBJ_;
		ABotSpeaker_obj();

	public:
		enum { _hx_ClassId = 0x5e80c5fc };

		void __construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.stages.objects.ABotSpeaker")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.stages.objects.ABotSpeaker"); }
		static ::hx::ObjectPtr< ABotSpeaker_obj > __new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y);
		static ::hx::ObjectPtr< ABotSpeaker_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ABotSpeaker_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ABotSpeaker",59,1d,8a,58); }

		int VIZ_MAX;
		::Array< Float > VIZ_POS_X;
		::Array< Float > VIZ_POS_Y;
		 ::flixel::FlxSprite bg;
		::Array< ::Dynamic> vizSprites;
		 ::flixel::FlxSprite eyeBg;
		 ::flxanimate::PsychFlxAnimate eyes;
		 ::flxanimate::PsychFlxAnimate speaker;
		::Array< Float > volumes;
		 ::flixel::sound::FlxSound snd;
		 ::flixel::sound::FlxSound set_snd( ::flixel::sound::FlxSound changed);
		::Dynamic set_snd_dyn();

		void beatHit();
		::Dynamic beatHit_dyn();

		bool lookingAtRight;
		void lookLeft();
		::Dynamic lookLeft_dyn();

		void lookRight();
		::Dynamic lookRight_dyn();

};

} // end namespace states
} // end namespace stages
} // end namespace objects

#endif /* INCLUDED_states_stages_objects_ABotSpeaker */ 
