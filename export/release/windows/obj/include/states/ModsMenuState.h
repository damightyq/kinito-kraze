// Generated by Haxe 4.3.4
#ifndef INCLUDED_states_ModsMenuState
#define INCLUDED_states_ModsMenuState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
HX_DECLARE_CLASS1(backend,MusicBeatState)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,math,FlxBasePoint)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS1(objects,Alphabet)
HX_DECLARE_CLASS1(states,MenuButton)
HX_DECLARE_CLASS1(states,ModsMenuState)

namespace states{


class HXCPP_CLASS_ATTRIBUTES ModsMenuState_obj : public  ::backend::MusicBeatState_obj
{
	public:
		typedef  ::backend::MusicBeatState_obj super;
		typedef ModsMenuState_obj OBJ_;
		ModsMenuState_obj();

	public:
		enum { _hx_ClassId = 0x7123119f };

		void __construct(::String startMod);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.ModsMenuState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.ModsMenuState"); }
		static ::hx::ObjectPtr< ModsMenuState_obj > __new(::String startMod);
		static ::hx::ObjectPtr< ModsMenuState_obj > __alloc(::hx::Ctx *_hx_ctx,::String startMod);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ModsMenuState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ModsMenuState",21,c6,f2,f5); }

		 ::flixel::FlxSprite bg;
		 ::flixel::FlxSprite icon;
		 ::objects::Alphabet modName;
		 ::flixel::text::FlxText modDesc;
		 ::flixel::text::FlxText modRestartText;
		 ::Dynamic modsList;
		 ::flixel::FlxSprite bgList;
		 ::states::MenuButton buttonReload;
		 ::states::MenuButton buttonEnableAll;
		 ::states::MenuButton buttonDisableAll;
		::Array< ::Dynamic> buttons;
		 ::states::MenuButton settingsButton;
		 ::flixel::FlxSprite bgTitle;
		 ::flixel::FlxSprite bgDescription;
		 ::flixel::FlxSprite bgButtons;
		 ::flixel::group::FlxTypedGroup modsGroup;
		int curSelectedMod;
		bool hoveringOnMods;
		int curSelectedButton;
		Float modNameInitialY;
		Float noModsSine;
		 ::flixel::text::FlxText noModsTxt;
		bool _lastControllerMode;
		::String startMod;
		void create();

		Float nextAttempt;
		bool holdingMod;
		 ::flixel::math::FlxBasePoint mouseOffsets;
		Float holdingElapsed;
		bool gottaClickAgain;
		Float holdTime;
		void update(Float elapsed);

		void changeSelectedButton(::hx::Null< int >  add);
		::Dynamic changeSelectedButton_dyn();

		 ::states::MenuButton getButton();
		::Dynamic getButton_dyn();

		void changeSelectedMod(::hx::Null< int >  add,::hx::Null< bool >  isMouseWheel);
		::Dynamic changeSelectedMod_dyn();

		void updateModDisplayData();
		::Dynamic updateModDisplayData_dyn();

		int centerMod;
		void updateItemPositions();
		::Dynamic updateItemPositions_dyn();

		bool waitingToRestart;
		void moveModToPosition(::String mod,::hx::Null< int >  position);
		::Dynamic moveModToPosition_dyn();

		void checkToggleButtons();
		::Dynamic checkToggleButtons_dyn();

		void reload();
		::Dynamic reload_dyn();

		void saveTxt();
		::Dynamic saveTxt_dyn();

};

} // end namespace states

#endif /* INCLUDED_states_ModsMenuState */ 
