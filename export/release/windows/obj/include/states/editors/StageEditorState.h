// Generated by Haxe 4.3.4
#ifndef INCLUDED_states_editors_StageEditorState
#define INCLUDED_states_editors_StageEditorState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIEvent
#include <backend/ui/PsychUIEvent.h>
#endif
HX_DECLARE_CLASS1(backend,MusicBeatState)
HX_DECLARE_CLASS1(backend,MusicBeatSubstate)
HX_DECLARE_CLASS2(backend,ui,PsychUIBox)
HX_DECLARE_CLASS2(backend,ui,PsychUICheckBox)
HX_DECLARE_CLASS2(backend,ui,PsychUIDropDownMenu)
HX_DECLARE_CLASS2(backend,ui,PsychUIEvent)
HX_DECLARE_CLASS2(backend,ui,PsychUIInputText)
HX_DECLARE_CLASS2(backend,ui,PsychUINumericStepper)
HX_DECLARE_CLASS2(backend,ui,PsychUIRadioGroup)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxCamera)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS1(flixel,FlxSubState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,math,FlxBasePoint)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS1(objects,Character)
HX_DECLARE_CLASS2(openfl,events,ErrorEvent)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IOErrorEvent)
HX_DECLARE_CLASS2(openfl,events,TextEvent)
HX_DECLARE_CLASS2(openfl,net,FileReference)
HX_DECLARE_CLASS2(states,editors,StageEditorAnimationSubstate)
HX_DECLARE_CLASS2(states,editors,StageEditorMetaSprite)
HX_DECLARE_CLASS2(states,editors,StageEditorState)

namespace states{
namespace editors{


class HXCPP_CLASS_ATTRIBUTES StageEditorState_obj : public  ::backend::MusicBeatState_obj
{
	public:
		typedef  ::backend::MusicBeatState_obj super;
		typedef StageEditorState_obj OBJ_;
		StageEditorState_obj();

	public:
		enum { _hx_ClassId = 0x295c9e42 };

		void __construct(::String __o_stageToLoad, ::Dynamic cachedJson);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.editors.StageEditorState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.editors.StageEditorState"); }
		static ::hx::ObjectPtr< StageEditorState_obj > __new(::String __o_stageToLoad, ::Dynamic cachedJson);
		static ::hx::ObjectPtr< StageEditorState_obj > __alloc(::hx::Ctx *_hx_ctx,::String __o_stageToLoad, ::Dynamic cachedJson);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~StageEditorState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("StageEditorState",26,17,e7,d7); }

		Float minZoom;
		int maxZoom;
		 ::objects::Character gf;
		 ::objects::Character dad;
		 ::objects::Character boyfriend;
		 ::Dynamic stageJson;
		 ::flixel::FlxCamera camGame;
		 ::flixel::FlxCamera camHUD;
		 ::backend::ui::PsychUIBox UI_stagebox;
		 ::backend::ui::PsychUIBox UI_box;
		 ::backend::ui::PsychUIBox spriteList_box;
		::Array< ::Dynamic> stageSprites;
		::String lastLoadedStage;
		 ::flixel::FlxObject camFollow;
		 ::flixel::FlxSprite helpBg;
		 ::flixel::group::FlxTypedSpriteGroup helpTexts;
		 ::flixel::text::FlxText posTxt;
		 ::flixel::text::FlxText outputTxt;
		 ::states::editors::StageEditorAnimationSubstate animationEditor;
		bool unsavedProgress;
		 ::flixel::group::FlxTypedSpriteGroup selectionSprites;
		void create();

		void loadJsonAssetDirectory();
		::Dynamic loadJsonAssetDirectory_dyn();

		bool showSelectionQuad;
		void addHelpScreen();
		::Dynamic addHelpScreen_dyn();

		void updateSpriteList();
		::Dynamic updateSpriteList_dyn();

		 ::backend::ui::PsychUIRadioGroup spriteListRadioGroup;
		 ::backend::ui::PsychUIRadioGroup focusRadioGroup;
		void screenUI();
		::Dynamic screenUI_dyn();

		void addSpriteListBox();
		::Dynamic addSpriteListBox_dyn();

		void showOutput(::String txt,::hx::Null< bool >  isError);
		::Dynamic showOutput_dyn();

		 ::flixel::group::FlxTypedSpriteGroup createPopup;
		::String findUnoccupiedName(::String prefix);
		::Dynamic findUnoccupiedName_dyn();

		void insertMeta( ::states::editors::StageEditorMetaSprite meta,::hx::Null< int >  insertOffset);
		::Dynamic insertMeta_dyn();

		void spriteCreatePopup();
		::Dynamic spriteCreatePopup_dyn();

		void updateSpriteListRadio();
		::Dynamic updateSpriteListRadio_dyn();

		void editorUI();
		::Dynamic editorUI_dyn();

		 ::backend::ui::PsychUIDropDownMenu directoryDropDown;
		 ::backend::ui::PsychUIInputText uiInputText;
		 ::backend::ui::PsychUICheckBox hideGirlfriendCheckbox;
		 ::backend::ui::PsychUINumericStepper zoomStepper;
		 ::backend::ui::PsychUINumericStepper cameraSpeedStepper;
		 ::backend::ui::PsychUINumericStepper camDadStepperX;
		 ::backend::ui::PsychUINumericStepper camDadStepperY;
		 ::backend::ui::PsychUINumericStepper camGfStepperX;
		 ::backend::ui::PsychUINumericStepper camGfStepperY;
		 ::backend::ui::PsychUINumericStepper camBfStepperX;
		 ::backend::ui::PsychUINumericStepper camBfStepperY;
		void addDataTab();
		::Dynamic addDataTab_dyn();

		void _updateCamera();
		::Dynamic _updateCamera_dyn();

		 ::backend::ui::PsychUIInputText colorInputText;
		 ::backend::ui::PsychUIInputText nameInputText;
		 ::flixel::text::FlxText imgTxt;
		 ::backend::ui::PsychUINumericStepper scaleStepperX;
		 ::backend::ui::PsychUINumericStepper scaleStepperY;
		 ::backend::ui::PsychUINumericStepper scrollStepperX;
		 ::backend::ui::PsychUINumericStepper scrollStepperY;
		 ::backend::ui::PsychUINumericStepper angleStepper;
		 ::backend::ui::PsychUINumericStepper alphaStepper;
		 ::backend::ui::PsychUICheckBox antialiasingCheckbox;
		 ::backend::ui::PsychUICheckBox flipXCheckBox;
		 ::backend::ui::PsychUICheckBox flipYCheckBox;
		 ::backend::ui::PsychUICheckBox lowQualityCheckbox;
		 ::backend::ui::PsychUICheckBox highQualityCheckbox;
		 ::states::editors::StageEditorMetaSprite getSelected(::hx::Null< bool >  blockReserved);
		::Dynamic getSelected_dyn();

		void addObjectTab();
		::Dynamic addObjectTab_dyn();

		 ::backend::ui::PsychUIDropDownMenu oppDropdown;
		 ::backend::ui::PsychUIDropDownMenu gfDropdown;
		 ::backend::ui::PsychUIDropDownMenu plDropdown;
		void addMetaTab();
		::Dynamic addMetaTab_dyn();

		 ::backend::ui::PsychUIDropDownMenu stageDropDown;
		void addStageTab();
		::Dynamic addStageTab_dyn();

		void updateStageDataUI();
		::Dynamic updateStageDataUI_dyn();

		void updateSelectedUI();
		::Dynamic updateSelectedUI_dyn();

		void reloadCharacters();
		::Dynamic reloadCharacters_dyn();

		void reloadStageDropDown();
		::Dynamic reloadStageDropDown_dyn();

		void checkUIOnObject();
		::Dynamic checkUIOnObject_dyn();

		void UIEvent(::String id, ::Dynamic sender);
		::Dynamic UIEvent_dyn();

		Float outputTime;
		void update(Float elapsed);

		int curFilters;
		void draw();

		 ::flixel::math::FlxBasePoint focusOnTarget(::String target);
		::Dynamic focusOnTarget_dyn();

		void repositionGirlfriend();
		::Dynamic repositionGirlfriend_dyn();

		void repositionDad();
		::Dynamic repositionDad_dyn();

		void repositionBoyfriend();
		::Dynamic repositionBoyfriend_dyn();

		void drawDebugOnCamera( ::flixel::FlxSprite spr);
		::Dynamic drawDebugOnCamera_dyn();

		void saveObjectsToJson();
		::Dynamic saveObjectsToJson_dyn();

		void saveData();
		::Dynamic saveData_dyn();

		 ::openfl::net::FileReference _file;
		void onSaveComplete( ::openfl::events::Event _);
		::Dynamic onSaveComplete_dyn();

		void onSaveCancel( ::openfl::events::Event _);
		::Dynamic onSaveCancel_dyn();

		void onSaveError( ::openfl::events::IOErrorEvent _);
		::Dynamic onSaveError_dyn();

		::String _makeNewSprite;
		void loadImage(::String onNewSprite);
		::Dynamic loadImage_dyn();

		void onLoadComplete( ::openfl::events::Event _);
		::Dynamic onLoadComplete_dyn();

		void tryLoadImage( ::states::editors::StageEditorMetaSprite spr,::String imgPath);
		::Dynamic tryLoadImage_dyn();

		void onLoadCancel( ::openfl::events::Event _);
		::Dynamic onLoadCancel_dyn();

		void onLoadError( ::openfl::events::IOErrorEvent _);
		::Dynamic onLoadError_dyn();

		void destroy();

};

} // end namespace states
} // end namespace editors

#endif /* INCLUDED_states_editors_StageEditorState */ 
