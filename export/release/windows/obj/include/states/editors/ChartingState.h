// Generated by Haxe 4.3.4
#ifndef INCLUDED_states_editors_ChartingState
#define INCLUDED_states_editors_ChartingState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIEvent
#include <backend/ui/PsychUIEvent.h>
#endif
HX_DECLARE_CLASS1(backend,MusicBeatState)
HX_DECLARE_CLASS2(backend,ui,PsychUIBox)
HX_DECLARE_CLASS2(backend,ui,PsychUIButton)
HX_DECLARE_CLASS2(backend,ui,PsychUICheckBox)
HX_DECLARE_CLASS2(backend,ui,PsychUIDropDownMenu)
HX_DECLARE_CLASS2(backend,ui,PsychUIEvent)
HX_DECLARE_CLASS2(backend,ui,PsychUIInputText)
HX_DECLARE_CLASS2(backend,ui,PsychUINumericStepper)
HX_DECLARE_CLASS2(backend,ui,PsychUISlider)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxCamera)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS1(flixel,FlxSubState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,math,FlxBasePoint)
HX_DECLARE_CLASS2(flixel,sound,FlxSound)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,FlxSave)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(lime,media,AudioBuffer)
HX_DECLARE_CLASS1(objects,HealthIcon)
HX_DECLARE_CLASS1(objects,Note)
HX_DECLARE_CLASS2(states,editors,ChartingState)
HX_DECLARE_CLASS3(states,editors,content,ChartingGridSprite)
HX_DECLARE_CLASS3(states,editors,content,EventMetaNote)
HX_DECLARE_CLASS3(states,editors,content,FileDialogHandler)
HX_DECLARE_CLASS3(states,editors,content,MetaNote)

namespace states{
namespace editors{


class HXCPP_CLASS_ATTRIBUTES ChartingState_obj : public  ::backend::MusicBeatState_obj
{
	public:
		typedef  ::backend::MusicBeatState_obj super;
		typedef ChartingState_obj OBJ_;
		ChartingState_obj();

	public:
		enum { _hx_ClassId = 0x4f752055 };

		void __construct( ::Dynamic __o_shouldReset);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.editors.ChartingState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.editors.ChartingState"); }
		static ::hx::ObjectPtr< ChartingState_obj > __new( ::Dynamic __o_shouldReset);
		static ::hx::ObjectPtr< ChartingState_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic __o_shouldReset);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ChartingState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("ChartingState",8d,e0,dd,9b); }

		static void __boot();
		static ::Array< ::Dynamic> defaultEvents;
		static ::Array< int > keysArray;
		static bool SHOW_EVENT_COLUMN;
		static int GRID_COLUMNS_PER_PLAYER;
		static int GRID_PLAYERS;
		static int GRID_SIZE;
		::String BACKUP_EXT;
		::Array< int > quantizations;
		::Array< int > quantColors;
		int curQuant;
		int set_curQuant(int v);
		::Dynamic set_curQuant_dyn();

		void updateVortexColor();
		::Dynamic updateVortexColor_dyn();

		int sectionFirstNoteID;
		int sectionFirstEventID;
		int curSec;
		 ::flixel::util::FlxSave chartEditorSave;
		 ::backend::ui::PsychUIBox mainBox;
		 ::flixel::math::FlxBasePoint mainBoxPosition;
		 ::backend::ui::PsychUIBox infoBox;
		 ::flixel::math::FlxBasePoint infoBoxPosition;
		 ::backend::ui::PsychUIBox upperBox;
		 ::flixel::FlxCamera camUI;
		 ::states::editors::content::ChartingGridSprite prevGridBg;
		 ::states::editors::content::ChartingGridSprite gridBg;
		 ::states::editors::content::ChartingGridSprite nextGridBg;
		 ::flixel::FlxSprite waveformSprite;
		Float scrollY;
		::Array< Float > zoomList;
		Float curZoom;
		 ::flixel::FlxSprite mustHitIndicator;
		 ::flixel::FlxSprite eventIcon;
		::Array< ::Dynamic> icons;
		::Array< ::Dynamic> events;
		::Array< ::Dynamic> notes;
		 ::flixel::group::FlxTypedGroup behindRenderedNotes;
		 ::flixel::group::FlxTypedGroup curRenderedNotes;
		 ::flixel::group::FlxTypedGroup movingNotes;
		 ::flixel::FlxSprite eventLockOverlay;
		 ::flixel::FlxSprite vortexIndicator;
		 ::flixel::group::FlxTypedGroup strumLineNotes;
		 ::flixel::FlxSprite dummyArrow;
		bool isMovingNotes;
		int movingNotesLastData;
		Float movingNotesLastY;
		 ::flixel::sound::FlxSound vocals;
		 ::flixel::sound::FlxSound opponentVocals;
		 ::flixel::FlxSprite timeLine;
		 ::flixel::text::FlxText infoText;
		 ::flixel::FlxSprite autoSaveIcon;
		 ::flixel::text::FlxText outputTxt;
		 ::flixel::math::FlxBasePoint selectionStart;
		 ::flixel::FlxSprite selectionBox;
		bool _shouldReset;
		 ::flixel::FlxSprite bg;
		::String theme;
		::cpp::VirtualArray copiedNotes;
		::cpp::VirtualArray copiedEvents;
		::Array< bool > _keysPressedBuffer;
		 ::flixel::FlxSprite tipBg;
		 ::flixel::text::FlxText fullTipText;
		bool vortexEnabled;
		bool waveformEnabled;
		::String waveformTarget;
		void create();

		::Array< int > gridColors;
		::Array< int > gridColorsOther;
		void changeTheme(::String changeTo, ::Dynamic doSave);
		::Dynamic changeTheme_dyn();

		void openNewChart();
		::Dynamic openNewChart_dyn();

		void prepareReload();
		::Dynamic prepareReload_dyn();

		void onChartLoaded();
		::Dynamic onChartLoaded_dyn();

		Float noteSelectionSine;
		::Array< ::Dynamic> selectedNotes;
		bool ignoreClickForThisFrame;
		Float outputAlpha;
		bool songFinished;
		 ::states::editors::content::FileDialogHandler fileDialog;
		 ::backend::ui::PsychUIInputText lastFocus;
		Float autoSaveTime;
		int autoSaveCap;
		int backupLimit;
		int lastBeatHit;
		void update(Float elapsed);

		void moveSelectedNotes(::hx::Null< int >  noteData,Float lastY);
		::Dynamic moveSelectedNotes_dyn();

		void stopMovingNotes();
		::Dynamic stopMovingNotes_dyn();

		::cpp::VirtualArray makeNoteDataCopy(::cpp::VirtualArray originalData,bool isEvent);
		::Dynamic makeNoteDataCopy_dyn();

		void updateScrollY();
		::Dynamic updateScrollY_dyn();

		void updateSelectionBox();
		::Dynamic updateSelectionBox_dyn();

		void showOutput(::String message,::hx::Null< bool >  isError);
		::Dynamic showOutput_dyn();

		void resetSelectedNotes();
		::Dynamic resetSelectedNotes_dyn();

		void onSelectNote();
		::Dynamic onSelectNote_dyn();

		void updateSelectedEventText();
		::Dynamic updateSelectedEventText_dyn();

		void createGrids();
		::Dynamic createGrids_dyn();

		::Array< int > cachedSectionRow;
		::Array< Float > cachedSectionTimes;
		::Array< Float > cachedSectionCrochets;
		::Array< Float > cachedSectionBPMs;
		void loadChart( ::Dynamic song);
		::Dynamic loadChart_dyn();

		void loadMusic( ::Dynamic killAudio);
		::Dynamic loadMusic_dyn();

		void onSongComplete();
		::Dynamic onSongComplete_dyn();

		void updateAudioVolume();
		::Dynamic updateAudioVolume_dyn();

		Float playbackRate;
		void setPitch( ::Dynamic value);
		::Dynamic setPitch_dyn();

		void setSongPlaying(bool doPlay);
		::Dynamic setSongPlaying_dyn();

		void reloadNotes();
		::Dynamic reloadNotes_dyn();

		 ::states::editors::content::MetaNote createNote( ::Dynamic note, ::Dynamic secNum);
		::Dynamic createNote_dyn();

		 ::states::editors::content::EventMetaNote createEvent( ::Dynamic event);
		::Dynamic createEvent_dyn();

		void _cacheSections();
		::Dynamic _cacheSections_dyn();

		bool showPreviousSection;
		bool showNextSection;
		bool showNoteTypeLabels;
		bool forceDataUpdate;
		void loadSection( ::Dynamic sec);
		::Dynamic loadSection_dyn();

		void softReloadNotes(::hx::Null< bool >  onlyCurrent);
		::Dynamic softReloadNotes_dyn();

		Float getMinNoteTime(int sec);
		::Dynamic getMinNoteTime_dyn();

		Float getMaxNoteTime(int sec);
		::Dynamic getMaxNoteTime_dyn();

		void positionNoteXByData( ::states::editors::content::MetaNote note, ::Dynamic data);
		::Dynamic positionNoteXByData_dyn();

		void positionNoteYOnTime( ::states::editors::content::MetaNote note,int section);
		::Dynamic positionNoteYOnTime_dyn();

		 ::Dynamic characterData;
		void updateJsonData();
		::Dynamic updateJsonData_dyn();

		int _lastSec;
		 ::Dynamic _lastGfSection;
		void updateHeads(::hx::Null< bool >  ignoreCheck);
		::Dynamic updateHeads_dyn();

		 ::backend::ui::PsychUISlider playbackSlider;
		 ::backend::ui::PsychUICheckBox mouseSnapCheckBox;
		 ::backend::ui::PsychUICheckBox ignoreProgressCheckBox;
		 ::backend::ui::PsychUINumericStepper hitsoundPlayerStepper;
		 ::backend::ui::PsychUINumericStepper hitsoundOpponentStepper;
		 ::backend::ui::PsychUINumericStepper metronomeStepper;
		 ::backend::ui::PsychUINumericStepper instVolumeStepper;
		 ::backend::ui::PsychUICheckBox instMuteCheckBox;
		 ::backend::ui::PsychUINumericStepper playerVolumeStepper;
		 ::backend::ui::PsychUICheckBox playerMuteCheckBox;
		 ::backend::ui::PsychUINumericStepper opponentVolumeStepper;
		 ::backend::ui::PsychUICheckBox opponentMuteCheckBox;
		void addChartingTab();
		::Dynamic addChartingTab_dyn();

		 ::backend::ui::PsychUIDropDownMenu gameOverCharDropDown;
		 ::backend::ui::PsychUIInputText gameOverSndInputText;
		 ::backend::ui::PsychUIInputText gameOverLoopInputText;
		 ::backend::ui::PsychUIInputText gameOverRetryInputText;
		 ::backend::ui::PsychUICheckBox noRGBCheckBox;
		 ::backend::ui::PsychUIInputText noteTextureInputText;
		 ::backend::ui::PsychUIInputText noteSplashesInputText;
		void addDataTab();
		::Dynamic addDataTab_dyn();

		 ::backend::ui::PsychUIDropDownMenu eventDropDown;
		 ::backend::ui::PsychUIInputText value1InputText;
		 ::backend::ui::PsychUIInputText value2InputText;
		 ::flixel::text::FlxText selectedEventText;
		 ::flixel::text::FlxText eventDescriptionText;
		::Array< ::Dynamic> eventsList;
		int curEventSelected;
		void addEventsTab();
		::Dynamic addEventsTab_dyn();

		Float susLengthLastVal;
		 ::backend::ui::PsychUINumericStepper susLengthStepper;
		 ::backend::ui::PsychUINumericStepper strumTimeStepper;
		 ::backend::ui::PsychUIDropDownMenu noteTypeDropDown;
		::Array< ::String > noteTypes;
		void addNoteTab();
		::Dynamic addNoteTab_dyn();

		 ::backend::ui::PsychUICheckBox mustHitCheckBox;
		 ::backend::ui::PsychUICheckBox gfSectionCheckBox;
		 ::backend::ui::PsychUICheckBox altAnimSectionCheckBox;
		 ::backend::ui::PsychUICheckBox changeBpmCheckBox;
		 ::backend::ui::PsychUINumericStepper changeBpmStepper;
		 ::backend::ui::PsychUINumericStepper beatsPerSecStepper;
		void addSectionTab();
		::Dynamic addSectionTab_dyn();

		void reloadNotesDropdowns();
		::Dynamic reloadNotesDropdowns_dyn();

		::Array< ::Dynamic> pasteCopiedNotesToSection( ::Dynamic canCopyNotes, ::Dynamic canCopyEvents, ::Dynamic showMessage);
		::Dynamic pasteCopiedNotesToSection_dyn();

		 ::backend::ui::PsychUIInputText songNameInputText;
		 ::backend::ui::PsychUICheckBox allowVocalsCheckBox;
		 ::backend::ui::PsychUINumericStepper bpmStepper;
		 ::backend::ui::PsychUINumericStepper scrollSpeedStepper;
		 ::backend::ui::PsychUINumericStepper audioOffsetStepper;
		 ::backend::ui::PsychUIDropDownMenu stageDropDown;
		 ::backend::ui::PsychUIDropDownMenu playerDropDown;
		 ::backend::ui::PsychUIDropDownMenu opponentDropDown;
		 ::backend::ui::PsychUIDropDownMenu girlfriendDropDown;
		void addSongTab();
		::Dynamic addSongTab_dyn();

		void addFileTab();
		::Dynamic addFileTab_dyn();

		bool lockedEvents;
		void addEditTab();
		::Dynamic addEditTab_dyn();

		 ::backend::ui::PsychUIButton showLastGridButton;
		 ::backend::ui::PsychUIButton showNextGridButton;
		 ::backend::ui::PsychUIButton noteTypeLabelsButton;
		 ::backend::ui::PsychUIButton vortexEditorButton;
		void addViewTab();
		::Dynamic addViewTab_dyn();

		void updateChartData();
		::Dynamic updateChartData_dyn();

		void saveChart(::hx::Null< bool >  canQuickSave);
		::Dynamic saveChart_dyn();

		 ::Dynamic getCurChartSection();
		::Dynamic getCurChartSection_dyn();

		void updateNotesRGB();
		::Dynamic updateNotesRGB_dyn();

		void updateGridVisibility();
		::Dynamic updateGridVisibility_dyn();

		void adaptNotesToNewTimes(::Array< Float > oldTimes);
		::Dynamic adaptNotesToNewTimes_dyn();

		void UIEvent(::String id, ::Dynamic sender);
		::Dynamic UIEvent_dyn();

		void updateUpperBoxBg();
		::Dynamic updateUpperBoxBg_dyn();

		void openEditorPlayState();
		::Dynamic openEditorPlayState_dyn();

		void goToPlayState();
		::Dynamic goToPlayState_dyn();

		void openSubState( ::flixel::FlxSubState SubState);

		void closeSubState();

		void destroy();

		::Array< ::String > loadFileList(::String mainFolder,::String optionalList,::Array< ::String > fileTypes);
		::Dynamic loadFileList_dyn();

		 ::Dynamic loadCharacterFile(::String _hx_char);
		::Dynamic loadCharacterFile_dyn();

		bool overwriteSavedSomething;
		void overwriteCheck(::String savePath,::String overwriteName,::String saveData, ::Dynamic continueFunc, ::Dynamic continueOnCancel);
		::Dynamic overwriteCheck_dyn();

		::Array< ::Dynamic> undoActions;
		int currentUndo;
		void addUndoAction(::String action, ::Dynamic data);
		::Dynamic addUndoAction_dyn();

		void undo();
		::Dynamic undo_dyn();

		void redo();
		::Dynamic redo_dyn();

		void actionPushNotes(::Array< ::Dynamic> dataNotes,::Array< ::Dynamic> dataEvents);
		::Dynamic actionPushNotes_dyn();

		void actionRemoveNotes(::Array< ::Dynamic> dataNotes,::Array< ::Dynamic> dataEvents);
		::Dynamic actionRemoveNotes_dyn();

		void actionReplaceNotes( ::states::editors::content::MetaNote oldNote, ::states::editors::content::MetaNote newNote);
		::Dynamic actionReplaceNotes_dyn();

		::Array< ::Dynamic> wavData;
		void updateWaveform();
		::Dynamic updateWaveform_dyn();

		::Array< ::Dynamic> waveformData( ::lime::media::AudioBuffer buffer, ::haxe::io::Bytes bytes,Float time,Float endTime,::hx::Null< Float >  multiply,::Array< ::Dynamic> array, ::Dynamic steps);
		::Dynamic waveformData_dyn();

};

} // end namespace states
} // end namespace editors

#endif /* INCLUDED_states_editors_ChartingState */ 
