// Generated by Haxe 4.3.4
#ifndef INCLUDED_states_editors_content_PreloadListSubState
#define INCLUDED_states_editors_content_PreloadListSubState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIEvent
#include <backend/ui/PsychUIEvent.h>
#endif
HX_DECLARE_CLASS1(backend,MusicBeatSubstate)
HX_DECLARE_CLASS2(backend,ui,PsychUIButton)
HX_DECLARE_CLASS2(backend,ui,PsychUICheckBox)
HX_DECLARE_CLASS2(backend,ui,PsychUIEvent)
HX_DECLARE_CLASS2(backend,ui,PsychUIRadioGroup)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS1(flixel,FlxSubState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS3(states,editors,content,FileDialogHandler)
HX_DECLARE_CLASS3(states,editors,content,PreloadListSubState)

namespace states{
namespace editors{
namespace content{


class HXCPP_CLASS_ATTRIBUTES PreloadListSubState_obj : public  ::backend::MusicBeatSubstate_obj
{
	public:
		typedef  ::backend::MusicBeatSubstate_obj super;
		typedef PreloadListSubState_obj OBJ_;
		PreloadListSubState_obj();

	public:
		enum { _hx_ClassId = 0x028a7083 };

		void __construct( ::Dynamic saveCallback,::Array< ::String > locked, ::haxe::ds::StringMap list);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.editors.content.PreloadListSubState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.editors.content.PreloadListSubState"); }
		static ::hx::ObjectPtr< PreloadListSubState_obj > __new( ::Dynamic saveCallback,::Array< ::String > locked, ::haxe::ds::StringMap list);
		static ::hx::ObjectPtr< PreloadListSubState_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic saveCallback,::Array< ::String > locked, ::haxe::ds::StringMap list);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PreloadListSubState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("PreloadListSubState",38,48,d4,3c); }

		::Array< ::String > lockedList;
		 ::haxe::ds::StringMap preloadList;
		::Array< ::String > preloadListKeys;
		 ::Dynamic saveCallback;
		Dynamic saveCallback_dyn() { return saveCallback;}
		 ::flixel::text::FlxText outputTxt;
		 ::states::editors::content::FileDialogHandler fileDialog;
		 ::backend::ui::PsychUIRadioGroup radioGrp;
		 ::backend::ui::PsychUIButton removeButton;
		 ::backend::ui::PsychUICheckBox lqCheckBox;
		 ::backend::ui::PsychUICheckBox hqCheckBox;
		 ::backend::ui::PsychUICheckBox smCheckBox;
		void create();

		void update(Float elapsed);

		void UIEvent(::String id, ::Dynamic sender);
		::Dynamic UIEvent_dyn();

		void updateButtons();
		::Dynamic updateButtons_dyn();

		int getCurLoadFilters();
		::Dynamic getCurLoadFilters_dyn();

		::String getCurCheckedName();
		::Dynamic getCurCheckedName_dyn();

		Float outputTime;
		void showOutput(::String txt,::hx::Null< bool >  isError);
		::Dynamic showOutput_dyn();

		void destroy();

};

} // end namespace states
} // end namespace editors
} // end namespace content

#endif /* INCLUDED_states_editors_content_PreloadListSubState */ 
