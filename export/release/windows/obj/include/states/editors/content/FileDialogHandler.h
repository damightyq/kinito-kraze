// Generated by Haxe 4.3.4
#ifndef INCLUDED_states_editors_content_FileDialogHandler
#define INCLUDED_states_editors_content_FileDialogHandler

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(lime,ui,FileDialogType)
HX_DECLARE_CLASS2(openfl,events,ErrorEvent)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IOErrorEvent)
HX_DECLARE_CLASS2(openfl,events,TextEvent)
HX_DECLARE_CLASS2(openfl,net,FileFilter)
HX_DECLARE_CLASS2(openfl,net,FileReference)
HX_DECLARE_CLASS3(states,editors,content,FileDialogHandler)
HX_DECLARE_CLASS3(states,editors,content,FileReferenceCustom)

namespace states{
namespace editors{
namespace content{


class HXCPP_CLASS_ATTRIBUTES FileDialogHandler_obj : public  ::flixel::FlxBasic_obj
{
	public:
		typedef  ::flixel::FlxBasic_obj super;
		typedef FileDialogHandler_obj OBJ_;
		FileDialogHandler_obj();

	public:
		enum { _hx_ClassId = 0x593cd04d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.editors.content.FileDialogHandler")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.editors.content.FileDialogHandler"); }
		static ::hx::ObjectPtr< FileDialogHandler_obj > __new();
		static ::hx::ObjectPtr< FileDialogHandler_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FileDialogHandler_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FileDialogHandler",a6,5f,6b,29); }

		 ::states::editors::content::FileReferenceCustom _fileRef;
		 ::lime::ui::FileDialogType _dialogMode;
		 ::Dynamic onComplete;
		Dynamic onComplete_dyn() { return onComplete;}
		 ::Dynamic onCancel;
		Dynamic onCancel_dyn() { return onCancel;}
		 ::Dynamic onError;
		Dynamic onError_dyn() { return onError;}
		 ::Dynamic _currentEvent;
		Dynamic _currentEvent_dyn() { return _currentEvent;}
		void save(::String fileName,::String dataToSave, ::Dynamic onComplete, ::Dynamic onCancel, ::Dynamic onError);
		::Dynamic save_dyn();

		void open(::String defaultName,::String title,::Array< ::Dynamic> filter, ::Dynamic onComplete, ::Dynamic onCancel, ::Dynamic onError);
		::Dynamic open_dyn();

		void openDirectory(::String title, ::Dynamic onComplete, ::Dynamic onCancel, ::Dynamic onError);
		::Dynamic openDirectory_dyn();

		::String data;
		::String path;
		bool completed;
		void onSaveComplete( ::openfl::events::Event _);
		::Dynamic onSaveComplete_dyn();

		void onLoadComplete( ::openfl::events::Event _);
		::Dynamic onLoadComplete_dyn();

		void onLoadDirectoryComplete( ::openfl::events::Event _);
		::Dynamic onLoadDirectoryComplete_dyn();

		void onCancelFn( ::openfl::events::Event _);
		::Dynamic onCancelFn_dyn();

		void onErrorFn( ::openfl::events::IOErrorEvent _);
		::Dynamic onErrorFn_dyn();

		void _startUp( ::Dynamic onComplete, ::Dynamic onCancel, ::Dynamic onError);
		::Dynamic _startUp_dyn();

		void removeEvents();
		::Dynamic removeEvents_dyn();

		void destroy();

};

} // end namespace states
} // end namespace editors
} // end namespace content

#endif /* INCLUDED_states_editors_content_FileDialogHandler */ 
