// Generated by Haxe 4.3.4
#ifndef INCLUDED_states_editors_content_MetaNote
#define INCLUDED_states_editors_content_MetaNote

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_objects_Note
#include <objects/Note.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS1(objects,Note)
HX_DECLARE_CLASS3(states,editors,content,MetaNote)

namespace states{
namespace editors{
namespace content{


class HXCPP_CLASS_ATTRIBUTES MetaNote_obj : public  ::objects::Note_obj
{
	public:
		typedef  ::objects::Note_obj super;
		typedef MetaNote_obj OBJ_;
		MetaNote_obj();

	public:
		enum { _hx_ClassId = 0x4a40bf4c };

		void __construct(Float time,int data,::cpp::VirtualArray songData);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.editors.content.MetaNote")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.editors.content.MetaNote"); }
		static ::hx::ObjectPtr< MetaNote_obj > __new(Float time,int data,::cpp::VirtualArray songData);
		static ::hx::ObjectPtr< MetaNote_obj > __alloc(::hx::Ctx *_hx_ctx,Float time,int data,::cpp::VirtualArray songData);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MetaNote_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MetaNote",77,91,4b,0b); }

		static void __boot();
		static  ::haxe::ds::IntMap noteTypeTexts;
		bool isEvent;
		::cpp::VirtualArray songData;
		 ::flixel::FlxSprite sustainSprite;
		Float chartY;
		int chartNoteData;
		void changeNoteData(int v);
		::Dynamic changeNoteData_dyn();

		void setStrumTime(Float v);
		::Dynamic setStrumTime_dyn();

		Float _lastZoom;
		virtual void setSustainLength(Float v,Float stepCrochet,::hx::Null< Float >  zoom);
		::Dynamic setSustainLength_dyn();

		bool get_hasSustain();
		::Dynamic get_hasSustain_dyn();

		void updateSustainToZoom(Float stepCrochet,::hx::Null< Float >  zoom);
		::Dynamic updateSustainToZoom_dyn();

		void updateSustainToStepCrochet(Float stepCrochet);
		::Dynamic updateSustainToStepCrochet_dyn();

		 ::flixel::text::FlxText _noteTypeText;
		 ::flixel::text::FlxText findNoteTypeText(int num);
		::Dynamic findNoteTypeText_dyn();

		virtual void draw();

		virtual void destroy();

};

} // end namespace states
} // end namespace editors
} // end namespace content

#endif /* INCLUDED_states_editors_content_MetaNote */ 
