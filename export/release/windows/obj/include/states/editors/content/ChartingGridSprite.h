// Generated by Haxe 4.3.4
#ifndef INCLUDED_states_editors_content_ChartingGridSprite
#define INCLUDED_states_editors_content_ChartingGridSprite

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS3(states,editors,content,ChartingGridSprite)

namespace states{
namespace editors{
namespace content{


class HXCPP_CLASS_ATTRIBUTES ChartingGridSprite_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef ChartingGridSprite_obj OBJ_;
		ChartingGridSprite_obj();

	public:
		enum { _hx_ClassId = 0x66413d84 };

		void __construct(int columns, ::Dynamic __o_color1, ::Dynamic __o_color2);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.editors.content.ChartingGridSprite")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.editors.content.ChartingGridSprite"); }
		static ::hx::ObjectPtr< ChartingGridSprite_obj > __new(int columns, ::Dynamic __o_color1, ::Dynamic __o_color2);
		static ::hx::ObjectPtr< ChartingGridSprite_obj > __alloc(::hx::Ctx *_hx_ctx,int columns, ::Dynamic __o_color1, ::Dynamic __o_color2);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ChartingGridSprite_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ChartingGridSprite",6f,93,22,b1); }

		Float rows;
		int columns;
		int spacing;
		 ::flixel::FlxSprite stripe;
		::Array< int > stripes;
		 ::flixel::FlxSprite vortexLine;
		bool vortexLineEnabled;
		Float vortexLineSpace;
		void loadGrid(int color1,int color2);
		::Dynamic loadGrid_dyn();

		void draw();

		void _drawStripes();
		::Dynamic _drawStripes_dyn();

		void updateStripes();
		::Dynamic updateStripes_dyn();

		Float set_rows(Float v);
		::Dynamic set_rows_dyn();

		int set_spacing(int v);
		::Dynamic set_spacing_dyn();

		void recalcHeight();
		::Dynamic recalcHeight_dyn();

};

} // end namespace states
} // end namespace editors
} // end namespace content

#endif /* INCLUDED_states_editors_content_ChartingGridSprite */ 
