// Generated by Haxe 4.3.4
#ifndef INCLUDED_states_editors_content_FileReferenceCustom
#define INCLUDED_states_editors_content_FileReferenceCustom

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_net_FileReference
#include <openfl/net/FileReference.h>
#endif
HX_DECLARE_CLASS2(lime,ui,FileDialogType)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,net,FileFilter)
HX_DECLARE_CLASS2(openfl,net,FileReference)
HX_DECLARE_CLASS3(states,editors,content,FileReferenceCustom)

namespace states{
namespace editors{
namespace content{


class HXCPP_CLASS_ATTRIBUTES FileReferenceCustom_obj : public  ::openfl::net::FileReference_obj
{
	public:
		typedef  ::openfl::net::FileReference_obj super;
		typedef FileReferenceCustom_obj OBJ_;
		FileReferenceCustom_obj();

	public:
		enum { _hx_ClassId = 0x154df377 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.editors.content.FileReferenceCustom")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.editors.content.FileReferenceCustom"); }
		static ::hx::ObjectPtr< FileReferenceCustom_obj > __new();
		static ::hx::ObjectPtr< FileReferenceCustom_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FileReferenceCustom_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FileReferenceCustom",a0,ca,69,e2); }

		::String _trackSavedPath;
		void saveFileDialog_onSelect(::String path);

		bool browseEx( ::lime::ui::FileDialogType browseType,::String defaultName,::String title,::Array< ::Dynamic> typeFilter);
		::Dynamic browseEx_dyn();

};

} // end namespace states
} // end namespace editors
} // end namespace content

#endif /* INCLUDED_states_editors_content_FileReferenceCustom */ 
