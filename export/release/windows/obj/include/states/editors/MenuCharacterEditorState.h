// Generated by Haxe 4.3.4
#ifndef INCLUDED_states_editors_MenuCharacterEditorState
#define INCLUDED_states_editors_MenuCharacterEditorState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIEvent
#include <backend/ui/PsychUIEvent.h>
#endif
HX_DECLARE_CLASS1(backend,MusicBeatState)
HX_DECLARE_CLASS2(backend,ui,PsychUIBox)
HX_DECLARE_CLASS2(backend,ui,PsychUICheckBox)
HX_DECLARE_CLASS2(backend,ui,PsychUIEvent)
HX_DECLARE_CLASS2(backend,ui,PsychUIInputText)
HX_DECLARE_CLASS2(backend,ui,PsychUINumericStepper)
HX_DECLARE_CLASS2(backend,ui,PsychUIRadioGroup)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(openfl,events,ErrorEvent)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IOErrorEvent)
HX_DECLARE_CLASS2(openfl,events,TextEvent)
HX_DECLARE_CLASS2(openfl,net,FileReference)
HX_DECLARE_CLASS2(states,editors,MenuCharacterEditorState)

namespace states{
namespace editors{


class HXCPP_CLASS_ATTRIBUTES MenuCharacterEditorState_obj : public  ::backend::MusicBeatState_obj
{
	public:
		typedef  ::backend::MusicBeatState_obj super;
		typedef MenuCharacterEditorState_obj OBJ_;
		MenuCharacterEditorState_obj();

	public:
		enum { _hx_ClassId = 0x1665c23e };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.editors.MenuCharacterEditorState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.editors.MenuCharacterEditorState"); }
		static ::hx::ObjectPtr< MenuCharacterEditorState_obj > __new();
		static ::hx::ObjectPtr< MenuCharacterEditorState_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MenuCharacterEditorState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("MenuCharacterEditorState",5a,43,53,a7); }

		 ::flixel::group::FlxTypedGroup grpWeekCharacters;
		 ::Dynamic characterFile;
		 ::flixel::text::FlxText txtOffsets;
		::Array< ::String > defaultCharacters;
		bool unsavedProgress;
		void create();

		 ::backend::ui::PsychUIBox UI_typebox;
		 ::backend::ui::PsychUIBox UI_mainbox;
		void addEditorBox();
		::Dynamic addEditorBox_dyn();

		 ::backend::ui::PsychUIRadioGroup characterTypeRadio;
		void addTypeUI();
		::Dynamic addTypeUI_dyn();

		 ::backend::ui::PsychUIInputText imageInputText;
		 ::backend::ui::PsychUIInputText idleInputText;
		 ::backend::ui::PsychUIInputText confirmInputText;
		 ::backend::ui::PsychUINumericStepper scaleStepper;
		 ::backend::ui::PsychUICheckBox flipXCheckbox;
		 ::backend::ui::PsychUICheckBox antialiasingCheckbox;
		void addCharacterUI();
		::Dynamic addCharacterUI_dyn();

		void updateCharacters();
		::Dynamic updateCharacters_dyn();

		void reloadSelectedCharacter();
		::Dynamic reloadSelectedCharacter_dyn();

		void UIEvent(::String id, ::Dynamic sender);
		::Dynamic UIEvent_dyn();

		void update(Float elapsed);

		void updateOffset();
		::Dynamic updateOffset_dyn();

		 ::openfl::net::FileReference _file;
		void loadCharacter();
		::Dynamic loadCharacter_dyn();

		void onLoadComplete( ::openfl::events::Event _);
		::Dynamic onLoadComplete_dyn();

		void onLoadCancel( ::openfl::events::Event _);
		::Dynamic onLoadCancel_dyn();

		void onLoadError( ::openfl::events::IOErrorEvent _);
		::Dynamic onLoadError_dyn();

		void saveCharacter();
		::Dynamic saveCharacter_dyn();

		void onSaveComplete( ::openfl::events::Event _);
		::Dynamic onSaveComplete_dyn();

		void onSaveCancel( ::openfl::events::Event _);
		::Dynamic onSaveCancel_dyn();

		void onSaveError( ::openfl::events::IOErrorEvent _);
		::Dynamic onSaveError_dyn();

};

} // end namespace states
} // end namespace editors

#endif /* INCLUDED_states_editors_MenuCharacterEditorState */ 
