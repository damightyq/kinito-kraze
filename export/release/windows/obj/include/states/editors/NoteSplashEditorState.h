// Generated by Haxe 4.3.4
#ifndef INCLUDED_states_editors_NoteSplashEditorState
#define INCLUDED_states_editors_NoteSplashEditorState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
HX_DECLARE_CLASS1(backend,MusicBeatState)
HX_DECLARE_CLASS2(backend,ui,PsychUIBox)
HX_DECLARE_CLASS2(backend,ui,PsychUIButton)
HX_DECLARE_CLASS2(backend,ui,PsychUICheckBox)
HX_DECLARE_CLASS2(backend,ui,PsychUIDropDownMenu)
HX_DECLARE_CLASS2(backend,ui,PsychUIInputText)
HX_DECLARE_CLASS2(backend,ui,PsychUINumericStepper)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(objects,NoteSplash)
HX_DECLARE_CLASS2(openfl,events,ErrorEvent)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IOErrorEvent)
HX_DECLARE_CLASS2(openfl,events,TextEvent)
HX_DECLARE_CLASS2(openfl,net,FileReference)
HX_DECLARE_CLASS2(states,editors,NoteSplashEditorState)

namespace states{
namespace editors{


class HXCPP_CLASS_ATTRIBUTES NoteSplashEditorState_obj : public  ::backend::MusicBeatState_obj
{
	public:
		typedef  ::backend::MusicBeatState_obj super;
		typedef NoteSplashEditorState_obj OBJ_;
		NoteSplashEditorState_obj();

	public:
		enum { _hx_ClassId = 0x2b0f5253 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.editors.NoteSplashEditorState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.editors.NoteSplashEditorState"); }
		static ::hx::ObjectPtr< NoteSplashEditorState_obj > __new();
		static ::hx::ObjectPtr< NoteSplashEditorState_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		static void __alloc_dynamic_functions(::hx::Ctx *_hx_alloc,NoteSplashEditorState_obj *_hx_obj);
		//~NoteSplashEditorState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("NoteSplashEditorState",8b,0a,07,53); }

		static void __boot();
		static ::String imageSkin;
		static  ::Dynamic parseTxt(::String content);
		static ::Dynamic parseTxt_dyn();

		 ::flixel::group::FlxTypedSpriteGroup strums;
		 ::flixel::group::FlxTypedSpriteGroup splashes;
		 ::Dynamic config;
		 ::flixel::text::FlxText tipText;
		 ::flixel::text::FlxText errorText;
		 ::flixel::text::FlxText curText;
		 ::objects::NoteSplash splash;
		 ::backend::ui::PsychUIBox UI;
		 ::backend::ui::PsychUIBox properUI;
		 ::backend::ui::PsychUIBox shaderUI;
		void create();

		 ::backend::ui::PsychUIDropDownMenu animDropDown;
		::String curAnim;
		 ::backend::ui::PsychUIButton addButton;
		 ::backend::ui::PsychUIInputText curAnimText;
		 ::backend::ui::PsychUINumericStepper numericStepperData;
		 ::backend::ui::PsychUIButton templateButton;
		void addAnimTab();
		::Dynamic addAnimTab_dyn();

		 ::backend::ui::PsychUIInputText imageInputText;
		 ::backend::ui::PsychUINumericStepper scaleNumericStepper;
		void addPropertiesTab();
		::Dynamic addPropertiesTab_dyn();

		bool redEnabled;
		bool blueEnabled;
		bool greenEnabled;
		::Array< int > redShader;
		::Array< int > greenShader;
		::Array< int > blueShader;
		 ::backend::ui::PsychUIDropDownMenu changeShader;
		 ::backend::ui::PsychUICheckBox defaultButton;
		void addShadersTab();
		::Dynamic addShadersTab_dyn();

		::Dynamic reloadImage;
		inline ::Dynamic &reloadImage_dyn() {return reloadImage; }

		Float holdingArrowsTime;
		Float holdingArrowsElapsed;
		::Array< Float > copiedOffset;
		void update(Float elapsed);

		void playStrumAnim(::String name,int noteData);
		::Dynamic playStrumAnim_dyn();

		void resetRGB();
		::Dynamic resetRGB_dyn();

		void parseRGB();
		::Dynamic parseRGB_dyn();

		void setConfigRGB();
		::Dynamic setConfigRGB_dyn();

		 ::openfl::net::FileReference _file;
		void onSaveComplete( ::openfl::events::Event _);
		::Dynamic onSaveComplete_dyn();

		void onSaveCancel( ::openfl::events::Event _);
		::Dynamic onSaveCancel_dyn();

		void onSaveError( ::openfl::events::IOErrorEvent _);
		::Dynamic onSaveError_dyn();

		void saveSplash();
		::Dynamic saveSplash_dyn();

		void loadTxt();
		::Dynamic loadTxt_dyn();

		void onLoadComplete( ::openfl::events::Event _);
		::Dynamic onLoadComplete_dyn();

		void onLoadCancel( ::openfl::events::Event _);
		::Dynamic onLoadCancel_dyn();

		void onLoadError( ::openfl::events::IOErrorEvent _);
		::Dynamic onLoadError_dyn();

		void destroy();

};

} // end namespace states
} // end namespace editors

#endif /* INCLUDED_states_editors_NoteSplashEditorState */ 
