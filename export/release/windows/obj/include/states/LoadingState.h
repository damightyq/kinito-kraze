// Generated by Haxe 4.3.4
#ifndef INCLUDED_states_LoadingState
#define INCLUDED_states_LoadingState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
HX_DECLARE_CLASS1(backend,MusicBeatState)
HX_DECLARE_CLASS2(crowplexus,iris,Iris)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,media,Sound)
HX_DECLARE_CLASS1(psychlua,HScript)
HX_DECLARE_CLASS1(states,LoadingState)
HX_DECLARE_CLASS2(sys,thread,FixedThreadPool)
HX_DECLARE_CLASS2(sys,thread,IThreadPool)
HX_DECLARE_CLASS2(sys,thread,Mutex)


#include <iostream>
#include <thread>

namespace states{


class HXCPP_CLASS_ATTRIBUTES LoadingState_obj : public  ::backend::MusicBeatState_obj
{
	public:
		typedef  ::backend::MusicBeatState_obj super;
		typedef LoadingState_obj OBJ_;
		LoadingState_obj();

	public:
		enum { _hx_ClassId = 0x137cfbbb };

		void __construct( ::flixel::FlxState target,bool stopMusic);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.LoadingState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.LoadingState"); }
		static ::hx::ObjectPtr< LoadingState_obj > __new( ::flixel::FlxState target,bool stopMusic);
		static ::hx::ObjectPtr< LoadingState_obj > __alloc(::hx::Ctx *_hx_ctx, ::flixel::FlxState target,bool stopMusic);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~LoadingState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("LoadingState",15,62,ae,41); }

		static void __boot();
		static int loaded;
		static int loadMax;
		static  ::haxe::ds::StringMap originalBitmapKeys;
		static  ::haxe::ds::StringMap requestedBitmaps;
		static  ::sys::thread::Mutex mutex;
		static  ::sys::thread::FixedThreadPool threadPool;
		static void loadAndSwitchState( ::flixel::FlxState target,::hx::Null< bool >  stopMusic,::hx::Null< bool >  intrusive);
		static ::Dynamic loadAndSwitchState_dyn();

		static void _loaded();
		static ::Dynamic _loaded_dyn();

		static bool checkLoaded();
		static ::Dynamic checkLoaded_dyn();

		static void loadNextDirectory();
		static ::Dynamic loadNextDirectory_dyn();

		static bool isIntrusive;
		static  ::flixel::FlxState getNextState( ::flixel::FlxState target,::hx::Null< bool >  stopMusic,::hx::Null< bool >  intrusive);
		static ::Dynamic getNextState_dyn();

		static ::Array< ::String > imagesToPrepare;
		static ::Array< ::String > soundsToPrepare;
		static ::Array< ::String > musicToPrepare;
		static ::Array< ::String > songsToPrepare;
		static void prepare(::Array< ::String > images,::Array< ::String > sounds,::Array< ::String > music);
		static ::Dynamic prepare_dyn();

		static bool initialThreadCompleted;
		static bool dontPreloadDefaultVoices;
		static void _startPool();
		static ::Dynamic _startPool_dyn();

		static void prepareToSong();
		static ::Dynamic prepareToSong_dyn();

		static void clearInvalids();
		static ::Dynamic clearInvalids_dyn();

		static void clearInvalidFrom(::Array< ::String > arr,::String prefix,::String ext,::String type,::String parentFolder);
		static ::Dynamic clearInvalidFrom_dyn();

		static void startThreads();
		static ::Dynamic startThreads_dyn();

		static void _threadFunc();
		static ::Dynamic _threadFunc_dyn();

		static void initThread( ::Dynamic func,::String traceData);
		static ::Dynamic initThread_dyn();

		static void preloadCharacter(::String _hx_char,::String prefixVocals);
		static ::Dynamic preloadCharacter_dyn();

		static  ::openfl::media::Sound preloadSound(::String key,::String path, ::Dynamic modsAllowed, ::Dynamic beepOnNull);
		static ::Dynamic preloadSound_dyn();

		static  ::openfl::display::BitmapData preloadGraphic(::String key);
		static ::Dynamic preloadGraphic_dyn();

		static int getCPUThreadsCount();
		static ::Dynamic getCPUThreadsCount_dyn();

		 ::flixel::FlxState target;
		bool stopMusic;
		bool dontUpdate;
		 ::flixel::group::FlxTypedSpriteGroup barGroup;
		 ::flixel::FlxSprite bar;
		int barWidth;
		Float intendedPercent;
		Float curPercent;
		Float stateChangeDelay;
		 ::flixel::FlxSprite logo;
		 ::flixel::FlxSprite pessy;
		 ::flixel::text::FlxText loadingText;
		Float timePassed;
		Float shakeFl;
		Float shakeMult;
		bool isSpinning;
		bool spawnedPessy;
		int pressedTimes;
		 ::psychlua::HScript hscript;
		void create();

		void addBehindBar( ::flixel::FlxBasic obj);
		::Dynamic addBehindBar_dyn();

		bool transitioning;
		void update(Float elapsed);

		void destroy();

		bool finishedLoading;
		void onLoad();
		::Dynamic onLoad_dyn();

};

} // end namespace states

#endif /* INCLUDED_states_LoadingState */ 
