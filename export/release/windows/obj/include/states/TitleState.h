// Generated by Haxe 4.3.4
#ifndef INCLUDED_states_TitleState
#define INCLUDED_states_TitleState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
HX_DECLARE_CLASS1(backend,MusicBeatState)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,math,FlxBasePoint)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS1(objects,Alphabet)
HX_DECLARE_CLASS1(shaders,ColorSwap)
HX_DECLARE_CLASS1(states,TitleState)

namespace states{


class HXCPP_CLASS_ATTRIBUTES TitleState_obj : public  ::backend::MusicBeatState_obj
{
	public:
		typedef  ::backend::MusicBeatState_obj super;
		typedef TitleState_obj OBJ_;
		TitleState_obj();

	public:
		enum { _hx_ClassId = 0x1b9a519f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.TitleState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.TitleState"); }
		static ::hx::ObjectPtr< TitleState_obj > __new();
		static ::hx::ObjectPtr< TitleState_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TitleState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TitleState",79,8d,a1,8c); }

		static void __boot();
		static ::Array< int > muteKeys;
		static ::Array< int > volumeDownKeys;
		static ::Array< int > volumeUpKeys;
		static bool initialized;
		static bool playJingle;
		static bool closedState;
		 ::flixel::group::FlxTypedGroup credGroup;
		 ::flixel::group::FlxTypedGroup textGroup;
		 ::flixel::FlxSprite blackScreen;
		 ::objects::Alphabet credTextShit;
		 ::flixel::FlxSprite ngSpr;
		::Array< int > titleTextColors;
		::Array< Float > titleTextAlphas;
		::Array< ::String > curWacky;
		 ::flixel::FlxSprite wackyImage;
		void create();

		 ::flixel::FlxSprite logoBl;
		 ::flixel::FlxSprite gfDance;
		bool danceLeft;
		 ::flixel::FlxSprite titleText;
		 ::shaders::ColorSwap swagShader;
		void startIntro();
		::Dynamic startIntro_dyn();

		::String characterImage;
		::String animationName;
		 ::flixel::math::FlxBasePoint gfPosition;
		 ::flixel::math::FlxBasePoint logoPosition;
		 ::flixel::math::FlxBasePoint enterPosition;
		bool useIdle;
		Float musicBPM;
		::Array< int > danceLeftFrames;
		::Array< int > danceRightFrames;
		void loadJsonData();
		::Dynamic loadJsonData_dyn();

		void easterEggData();
		::Dynamic easterEggData_dyn();

		::Array< ::Dynamic> getIntroTextShit();
		::Dynamic getIntroTextShit_dyn();

		bool transitioning;
		bool newTitle;
		Float titleTimer;
		void update(Float elapsed);

		void createCoolText(::Array< ::String > textArray, ::Dynamic offset);
		::Dynamic createCoolText_dyn();

		void addMoreText(::String text, ::Dynamic offset);
		::Dynamic addMoreText_dyn();

		void deleteCoolText();
		::Dynamic deleteCoolText_dyn();

		int sickBeats;
		void beatHit();

		bool skippedIntro;
		bool increaseVolume;
		void skipIntro();
		::Dynamic skipIntro_dyn();

};

} // end namespace states

#endif /* INCLUDED_states_TitleState */ 
