// Generated by Haxe 4.3.4
#ifndef INCLUDED_debug_FPSCounter
#define INCLUDED_debug_FPSCounter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
HX_DECLARE_CLASS1(debug,FPSCounter)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,text,TextField)

namespace debug{


class HXCPP_CLASS_ATTRIBUTES FPSCounter_obj : public  ::openfl::text::TextField_obj
{
	public:
		typedef  ::openfl::text::TextField_obj super;
		typedef FPSCounter_obj OBJ_;
		FPSCounter_obj();

	public:
		enum { _hx_ClassId = 0x2c6c4906 };

		void __construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_color);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="debug.FPSCounter")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"debug.FPSCounter"); }
		static ::hx::ObjectPtr< FPSCounter_obj > __new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_color);
		static ::hx::ObjectPtr< FPSCounter_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_color);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		static void __alloc_dynamic_functions(::hx::Ctx *_hx_alloc,FPSCounter_obj *_hx_obj);
		//~FPSCounter_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FPSCounter",33,6e,d3,f5); }

		int currentFPS;
		::Array< Float > times;
		Float deltaTimeout;
		void _hx___enterFrame(int _tmp_deltaTime);

		::Dynamic updateText;
		inline ::Dynamic &updateText_dyn() {return updateText; }

		Float get_memoryMegas();
		::Dynamic get_memoryMegas_dyn();

};

} // end namespace debug

#endif /* INCLUDED_debug_FPSCounter */ 
