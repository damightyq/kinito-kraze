// Generated by Haxe 4.3.4
#ifndef INCLUDED_options_LanguageSubState
#define INCLUDED_options_LanguageSubState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
HX_DECLARE_CLASS1(backend,MusicBeatSubstate)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS1(flixel,FlxSubState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(options,LanguageSubState)

namespace options{


class HXCPP_CLASS_ATTRIBUTES LanguageSubState_obj : public  ::backend::MusicBeatSubstate_obj
{
	public:
		typedef  ::backend::MusicBeatSubstate_obj super;
		typedef LanguageSubState_obj OBJ_;
		LanguageSubState_obj();

	public:
		enum { _hx_ClassId = 0x7fcd07e7 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="options.LanguageSubState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"options.LanguageSubState"); }
		static ::hx::ObjectPtr< LanguageSubState_obj > __new();
		static ::hx::ObjectPtr< LanguageSubState_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~LanguageSubState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("LanguageSubState",09,fd,64,97); }

		 ::flixel::group::FlxTypedGroup grpLanguages;
		::Array< ::String > languages;
		 ::haxe::ds::StringMap displayLanguages;
		int curSelected;
		bool changedLanguage;
		void update(Float elapsed);

		void changeSelected(::hx::Null< int >  change);
		::Dynamic changeSelected_dyn();

};

} // end namespace options

#endif /* INCLUDED_options_LanguageSubState */ 
