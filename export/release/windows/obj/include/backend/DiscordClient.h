// Generated by Haxe 4.3.4
#ifndef INCLUDED_backend_DiscordClient
#define INCLUDED_backend_DiscordClient

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_966ecec371c23c3e
#define INCLUDED_966ecec371c23c3e
#include "discord_rpc.hpp"
#endif
#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
HX_DECLARE_CLASS1(backend,DiscordClient)
HX_DECLARE_CLASS2(backend,_Discord,DiscordPresence)
HX_DECLARE_CLASS3(sys,thread,_Thread,HaxeThread)

namespace backend{


class HXCPP_CLASS_ATTRIBUTES DiscordClient_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef DiscordClient_obj OBJ_;
		DiscordClient_obj();

	public:
		enum { _hx_ClassId = 0x1ba82363 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="backend.DiscordClient")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"backend.DiscordClient"); }

		inline static ::hx::ObjectPtr< DiscordClient_obj > __new() {
			::hx::ObjectPtr< DiscordClient_obj > __this = new DiscordClient_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< DiscordClient_obj > __alloc(::hx::Ctx *_hx_ctx) {
			DiscordClient_obj *__this = (DiscordClient_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DiscordClient_obj), false, "backend.DiscordClient"));
			*(void **)__this = DiscordClient_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~DiscordClient_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("DiscordClient",f7,d0,c5,2b); }

		static void __boot();
		static bool isInitialized;
		static ::String _defaultID;
		static ::String clientID;
		static  ::backend::_Discord::DiscordPresence presence;
		static  ::sys::thread::_Thread::HaxeThread _hx___thread;
		static void check();
		static ::Dynamic check_dyn();

		static void prepare();
		static ::Dynamic prepare_dyn();

		static ::Dynamic shutdown;
		static inline ::Dynamic &shutdown_dyn() {return shutdown; }

		static void onReady(const  DiscordUser* request);

		static void onError(int errorCode,const char* message);

		static void onDisconnected(int errorCode,const char* message);

		static void initialize();
		static ::Dynamic initialize_dyn();

		static void changePresence(::String details,::String state,::String smallImageKey, ::Dynamic hasStartTimestamp, ::Dynamic endTimestamp,::String largeImageKey);
		static ::Dynamic changePresence_dyn();

		static void updatePresence();
		static ::Dynamic updatePresence_dyn();

		static void resetClientID();
		static ::Dynamic resetClientID_dyn();

		static ::String set_clientID(::String newID);
		static ::Dynamic set_clientID_dyn();

		static void loadModRPC();
		static ::Dynamic loadModRPC_dyn();

		static void addLuaCallbacks( cpp::Reference<lua_State> lua);
		static ::Dynamic addLuaCallbacks_dyn();

};

} // end namespace backend

#endif /* INCLUDED_backend_DiscordClient */ 
