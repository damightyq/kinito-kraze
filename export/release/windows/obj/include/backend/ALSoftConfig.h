// Generated by Haxe 4.3.4
#ifndef INCLUDED_backend_ALSoftConfig
#define INCLUDED_backend_ALSoftConfig

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Sys)
HX_DECLARE_CLASS1(backend,ALSoftConfig)
HX_DECLARE_CLASS2(haxe,io,Path)

namespace backend{


class HXCPP_CLASS_ATTRIBUTES ALSoftConfig_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ALSoftConfig_obj OBJ_;
		ALSoftConfig_obj();

	public:
		enum { _hx_ClassId = 0x451e1b63 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="backend.ALSoftConfig")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"backend.ALSoftConfig"); }

		inline static ::hx::ObjectPtr< ALSoftConfig_obj > __new() {
			::hx::ObjectPtr< ALSoftConfig_obj > __this = new ALSoftConfig_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< ALSoftConfig_obj > __alloc(::hx::Ctx *_hx_ctx) {
			ALSoftConfig_obj *__this = (ALSoftConfig_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ALSoftConfig_obj), false, "backend.ALSoftConfig"));
			*(void **)__this = ALSoftConfig_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ALSoftConfig_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		static void __init__();

		::String __ToString() const { return HX_("ALSoftConfig",17,24,ae,60); }

		static void __boot();
};

} // end namespace backend

#endif /* INCLUDED_backend_ALSoftConfig */ 
