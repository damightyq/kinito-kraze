// Generated by Haxe 4.3.4
#ifndef INCLUDED_backend_Paths
#define INCLUDED_backend_Paths

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(backend,Paths)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,graphics,FlxGraphic)
HX_DECLARE_CLASS3(flixel,graphics,frames,FlxAtlasFrames)
HX_DECLARE_CLASS3(flixel,graphics,frames,FlxFramesCollection)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(flxanimate,FlxAnimate)
HX_DECLARE_CLASS1(flxanimate,PsychFlxAnimate)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,media,Sound)

namespace backend{


class HXCPP_CLASS_ATTRIBUTES Paths_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Paths_obj OBJ_;
		Paths_obj();

	public:
		enum { _hx_ClassId = 0x0d5689de };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="backend.Paths")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"backend.Paths"); }

		inline static ::hx::ObjectPtr< Paths_obj > __new() {
			::hx::ObjectPtr< Paths_obj > __this = new Paths_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Paths_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Paths_obj *__this = (Paths_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Paths_obj), false, "backend.Paths"));
			*(void **)__this = Paths_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Paths_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Paths",0e,7b,84,50); }

		static void __boot();
		static ::String SOUND_EXT;
		static ::String VIDEO_EXT;
		static void excludeAsset(::String key);
		static ::Dynamic excludeAsset_dyn();

		static ::Array< ::String > dumpExclusions;
		static void clearUnusedMemory();
		static ::Dynamic clearUnusedMemory_dyn();

		static ::Array< ::String > localTrackedAssets;
		static void clearStoredMemory();
		static ::Dynamic clearStoredMemory_dyn();

		static void freeGraphicsFromMemory();
		static ::Dynamic freeGraphicsFromMemory_dyn();

		static void destroyGraphic( ::flixel::graphics::FlxGraphic graphic);
		static ::Dynamic destroyGraphic_dyn();

		static ::String currentLevel;
		static void setCurrentLevel(::String name);
		static ::Dynamic setCurrentLevel_dyn();

		static ::String getPath(::String file,::String type,::String parentfolder, ::Dynamic modsAllowed);
		static ::Dynamic getPath_dyn();

		static ::String getFolderPath(::String file,::String folder);
		static ::Dynamic getFolderPath_dyn();

		static ::String getSharedPath(::String file);
		static ::Dynamic getSharedPath_dyn();

		static ::String txt(::String key,::String folder);
		static ::Dynamic txt_dyn();

		static ::String xml(::String key,::String folder);
		static ::Dynamic xml_dyn();

		static ::String json(::String key,::String folder);
		static ::Dynamic json_dyn();

		static ::String shaderFragment(::String key,::String folder);
		static ::Dynamic shaderFragment_dyn();

		static ::String shaderVertex(::String key,::String folder);
		static ::Dynamic shaderVertex_dyn();

		static ::String lua(::String key,::String folder);
		static ::Dynamic lua_dyn();

		static ::String video(::String key);
		static ::Dynamic video_dyn();

		static  ::openfl::media::Sound sound(::String key, ::Dynamic modsAllowed);
		static ::Dynamic sound_dyn();

		static  ::openfl::media::Sound music(::String key, ::Dynamic modsAllowed);
		static ::Dynamic music_dyn();

		static  ::openfl::media::Sound inst(::String song, ::Dynamic modsAllowed);
		static ::Dynamic inst_dyn();

		static  ::openfl::media::Sound voices(::String song,::String postfix, ::Dynamic modsAllowed);
		static ::Dynamic voices_dyn();

		static  ::openfl::media::Sound soundRandom(::String key,int min,int max, ::Dynamic modsAllowed);
		static ::Dynamic soundRandom_dyn();

		static  ::haxe::ds::StringMap currentTrackedAssets;
		static  ::flixel::graphics::FlxGraphic image(::String key,::String parentFolder, ::Dynamic allowGPU);
		static ::Dynamic image_dyn();

		static  ::flixel::graphics::FlxGraphic cacheBitmap(::String key,::String parentFolder, ::openfl::display::BitmapData bitmap, ::Dynamic allowGPU);
		static ::Dynamic cacheBitmap_dyn();

		static ::String getTextFromFile(::String key, ::Dynamic ignoreMods);
		static ::Dynamic getTextFromFile_dyn();

		static ::String font(::String key);
		static ::Dynamic font_dyn();

		static bool fileExists(::String key,::String type, ::Dynamic ignoreMods,::String parentFolder);
		static ::Dynamic fileExists_dyn();

		static  ::flixel::graphics::frames::FlxAtlasFrames getAtlas(::String key,::String parentFolder, ::Dynamic allowGPU);
		static ::Dynamic getAtlas_dyn();

		static  ::flixel::graphics::frames::FlxAtlasFrames getMultiAtlas(::Array< ::String > keys,::String parentFolder, ::Dynamic allowGPU);
		static ::Dynamic getMultiAtlas_dyn();

		static  ::flixel::graphics::frames::FlxAtlasFrames getSparrowAtlas(::String key,::String parentFolder, ::Dynamic allowGPU);
		static ::Dynamic getSparrowAtlas_dyn();

		static  ::flixel::graphics::frames::FlxAtlasFrames getPackerAtlas(::String key,::String parentFolder, ::Dynamic allowGPU);
		static ::Dynamic getPackerAtlas_dyn();

		static  ::flixel::graphics::frames::FlxAtlasFrames getAsepriteAtlas(::String key,::String parentFolder, ::Dynamic allowGPU);
		static ::Dynamic getAsepriteAtlas_dyn();

		static ::String formatToSongPath(::String path);
		static ::Dynamic formatToSongPath_dyn();

		static  ::haxe::ds::StringMap currentTrackedSounds;
		static  ::openfl::media::Sound returnSound(::String key,::String path, ::Dynamic modsAllowed, ::Dynamic beepOnNull);
		static ::Dynamic returnSound_dyn();

		static ::String mods(::String key);
		static ::Dynamic mods_dyn();

		static ::String modsJson(::String key);
		static ::Dynamic modsJson_dyn();

		static ::String modsVideo(::String key);
		static ::Dynamic modsVideo_dyn();

		static ::String modsSounds(::String path,::String key);
		static ::Dynamic modsSounds_dyn();

		static ::String modsImages(::String key);
		static ::Dynamic modsImages_dyn();

		static ::String modsXml(::String key);
		static ::Dynamic modsXml_dyn();

		static ::String modsTxt(::String key);
		static ::Dynamic modsTxt_dyn();

		static ::String modsImagesJson(::String key);
		static ::Dynamic modsImagesJson_dyn();

		static ::String modFolders(::String key);
		static ::Dynamic modFolders_dyn();

		static void loadAnimateAtlas( ::flxanimate::PsychFlxAnimate spr, ::Dynamic folderOrImg, ::Dynamic spriteJson, ::Dynamic animationJson);
		static ::Dynamic loadAnimateAtlas_dyn();

};

} // end namespace backend

#endif /* INCLUDED_backend_Paths */ 
