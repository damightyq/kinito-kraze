// Generated by Haxe 4.3.4
#ifndef INCLUDED_backend_WeekData
#define INCLUDED_backend_WeekData

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(backend,WeekData)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)

namespace backend{


class HXCPP_CLASS_ATTRIBUTES WeekData_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef WeekData_obj OBJ_;
		WeekData_obj();

	public:
		enum { _hx_ClassId = 0x60db6d72 };

		void __construct( ::Dynamic weekFile,::String fileName);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="backend.WeekData")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"backend.WeekData"); }
		static ::hx::ObjectPtr< WeekData_obj > __new( ::Dynamic weekFile,::String fileName);
		static ::hx::ObjectPtr< WeekData_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic weekFile,::String fileName);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~WeekData_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("WeekData",5e,a8,44,03); }

		static void __boot();
		static  ::haxe::ds::StringMap weeksLoaded;
		static ::Array< ::String > weeksList;
		static  ::Dynamic createWeekFile();
		static ::Dynamic createWeekFile_dyn();

		static void reloadWeekFiles( ::Dynamic isStoryMode);
		static ::Dynamic reloadWeekFiles_dyn();

		static void addWeek(::String weekToCheck,::String path,::String directory,int i,int originalLength);
		static ::Dynamic addWeek_dyn();

		static  ::Dynamic getWeekFile(::String path);
		static ::Dynamic getWeekFile_dyn();

		static ::String getWeekFileName();
		static ::Dynamic getWeekFileName_dyn();

		static  ::backend::WeekData getCurrentWeek();
		static ::Dynamic getCurrentWeek_dyn();

		static void setDirectoryFromWeek( ::backend::WeekData data);
		static ::Dynamic setDirectoryFromWeek_dyn();

		::String folder;
		::cpp::VirtualArray songs;
		::Array< ::String > weekCharacters;
		::String weekBackground;
		::String weekBefore;
		::String storyName;
		::String weekName;
		bool startUnlocked;
		bool hiddenUntilUnlocked;
		bool hideStoryMode;
		bool hideFreeplay;
		::String difficulties;
		::String fileName;
};

} // end namespace backend

#endif /* INCLUDED_backend_WeekData */ 
