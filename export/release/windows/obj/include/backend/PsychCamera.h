// Generated by Haxe 4.3.4
#ifndef INCLUDED_backend_PsychCamera
#define INCLUDED_backend_PsychCamera

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
HX_DECLARE_CLASS1(backend,PsychCamera)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxCamera)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace backend{


class HXCPP_CLASS_ATTRIBUTES PsychCamera_obj : public  ::flixel::FlxCamera_obj
{
	public:
		typedef  ::flixel::FlxCamera_obj super;
		typedef PsychCamera_obj OBJ_;
		PsychCamera_obj();

	public:
		enum { _hx_ClassId = 0x52d5b98c };

		void __construct( ::Dynamic X, ::Dynamic Y, ::Dynamic Width, ::Dynamic Height, ::Dynamic Zoom);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="backend.PsychCamera")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"backend.PsychCamera"); }
		static ::hx::ObjectPtr< PsychCamera_obj > __new( ::Dynamic X, ::Dynamic Y, ::Dynamic Width, ::Dynamic Height, ::Dynamic Zoom);
		static ::hx::ObjectPtr< PsychCamera_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic X, ::Dynamic Y, ::Dynamic Width, ::Dynamic Height, ::Dynamic Zoom);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PsychCamera_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PsychCamera",20,1a,6b,4a); }

		void update(Float elapsed);

		void updateFollowDelta( ::Dynamic elapsed);
		::Dynamic updateFollowDelta_dyn();

		Float set_followLerp(Float value);

};

} // end namespace backend

#endif /* INCLUDED_backend_PsychCamera */ 
