// Generated by Haxe 4.3.4
#ifndef INCLUDED_backend_ui_PsychUIBox
#define INCLUDED_backend_ui_PsychUIBox

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
HX_DECLARE_CLASS2(backend,ui,PsychUIBox)
HX_DECLARE_CLASS2(backend,ui,PsychUITab)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxCamera)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,math,FlxBasePoint)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)

namespace backend{
namespace ui{


class HXCPP_CLASS_ATTRIBUTES PsychUIBox_obj : public  ::flixel::group::FlxTypedSpriteGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedSpriteGroup_obj super;
		typedef PsychUIBox_obj OBJ_;
		PsychUIBox_obj();

	public:
		enum { _hx_ClassId = 0x510fe044 };

		void __construct(Float x,Float y,int width,int height,::Array< ::String > tabs);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="backend.ui.PsychUIBox")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"backend.ui.PsychUIBox"); }
		static ::hx::ObjectPtr< PsychUIBox_obj > __new(Float x,Float y,int width,int height,::Array< ::String > tabs);
		static ::hx::ObjectPtr< PsychUIBox_obj > __alloc(::hx::Ctx *_hx_ctx,Float x,Float y,int width,int height,::Array< ::String > tabs);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PsychUIBox_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PsychUIBox",1c,5d,fc,ad); }

		static void __boot();
		static ::String CLICK_EVENT;
		static ::String MINIMIZE_EVENT;
		static ::String DRAG_EVENT;
		static ::String DROP_EVENT;
		::Array< ::Dynamic> tabs;
		 ::backend::ui::PsychUITab selectedTab;
		int selectedIndex;
		::String selectedName;
		 ::flixel::FlxSprite bg;
		 ::Dynamic selectedStyle;
		 ::Dynamic hoverStyle;
		 ::Dynamic unselectedStyle;
		bool canMove;
		bool canMinimize;
		bool isMinimized;
		bool minimizeOnFocusLost;
		 ::flixel::math::FlxBasePoint _draggingPos;
		 ::flixel::math::FlxBasePoint _draggingPoint;
		bool _pressedBox;
		bool _draggingBox;
		 ::backend::ui::PsychUITab _lastTab;
		Float _lastClick;
		bool forceCheckNext;
		bool broadcastBoxEvents;
		void update(Float elapsed);

		::Array< ::Dynamic> set_cameras(::Array< ::Dynamic> v);

		 ::flixel::FlxCamera set_camera( ::flixel::FlxCamera v);

		void draw();

		void destroy();

		void addTab(::String name);
		::Dynamic addTab_dyn();

		int tabHeight;
		void updateTabs();
		::Dynamic updateTabs_dyn();

		int _originalHeight;
		void resize(int width,int height);
		::Dynamic resize_dyn();

		 ::backend::ui::PsychUITab set_selectedTab( ::backend::ui::PsychUITab v);
		::Dynamic set_selectedTab_dyn();

		::String set_selectedName(::String v);
		::Dynamic set_selectedName_dyn();

		int set_selectedIndex(int v);
		::Dynamic set_selectedIndex_dyn();

		 ::backend::ui::PsychUITab getTab(::String name);
		::Dynamic getTab_dyn();

		bool set_canMinimize(bool v);
		::Dynamic set_canMinimize_dyn();

		bool set_isMinimized(bool v);
		::Dynamic set_isMinimized_dyn();

};

} // end namespace backend
} // end namespace ui

#endif /* INCLUDED_backend_ui_PsychUIBox */ 
