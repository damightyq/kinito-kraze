// Generated by Haxe 4.3.4
#ifndef INCLUDED_backend_ui_PsychUINumericStepper
#define INCLUDED_backend_ui_PsychUINumericStepper

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_backend_ui_PsychUIInputText
#include <backend/ui/PsychUIInputText.h>
#endif
HX_DECLARE_CLASS2(backend,ui,PsychUIInputText)
HX_DECLARE_CLASS2(backend,ui,PsychUINumericStepper)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace backend{
namespace ui{


class HXCPP_CLASS_ATTRIBUTES PsychUINumericStepper_obj : public  ::backend::ui::PsychUIInputText_obj
{
	public:
		typedef  ::backend::ui::PsychUIInputText_obj super;
		typedef PsychUINumericStepper_obj OBJ_;
		PsychUINumericStepper_obj();

	public:
		enum { _hx_ClassId = 0x0c9f742b };

		void __construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_step,::hx::Null< Float >  __o_defValue,::hx::Null< Float >  __o_min,::hx::Null< Float >  __o_max,::hx::Null< int >  __o_decimals, ::Dynamic __o_wid, ::Dynamic __o_isPercent);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="backend.ui.PsychUINumericStepper")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"backend.ui.PsychUINumericStepper"); }
		static ::hx::ObjectPtr< PsychUINumericStepper_obj > __new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_step,::hx::Null< Float >  __o_defValue,::hx::Null< Float >  __o_min,::hx::Null< Float >  __o_max,::hx::Null< int >  __o_decimals, ::Dynamic __o_wid, ::Dynamic __o_isPercent);
		static ::hx::ObjectPtr< PsychUINumericStepper_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_step,::hx::Null< Float >  __o_defValue,::hx::Null< Float >  __o_min,::hx::Null< Float >  __o_max,::hx::Null< int >  __o_decimals, ::Dynamic __o_wid, ::Dynamic __o_isPercent);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PsychUINumericStepper_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PsychUINumericStepper",53,f6,d0,71); }

		static void __boot();
		static ::String CHANGE_EVENT;
		Float step;
		Float min;
		Float max;
		int decimals;
		bool isPercent;
		 ::flixel::FlxSprite buttonPlus;
		 ::flixel::FlxSprite buttonMinus;
		 ::Dynamic onValueChange;
		Dynamic onValueChange_dyn() { return onValueChange;}
		Float value;
		void update(Float elapsed);

		Float set_value(Float v);
		::Dynamic set_value_dyn();

		Float set_min(Float v);
		::Dynamic set_min_dyn();

		Float set_max(Float v);
		::Dynamic set_max_dyn();

		int set_decimals(int v);
		::Dynamic set_decimals_dyn();

		bool set_isPercent(bool v);
		::Dynamic set_isPercent_dyn();

		void _updateValue();
		::Dynamic _updateValue_dyn();

		void _updateFilter();
		::Dynamic _updateFilter_dyn();

		bool broadcastStepperEvent;
		void _internalOnChange();
		::Dynamic _internalOnChange_dyn();

		void setGraphicSize(::hx::Null< Float >  width,::hx::Null< Float >  height);

};

} // end namespace backend
} // end namespace ui

#endif /* INCLUDED_backend_ui_PsychUINumericStepper */ 
