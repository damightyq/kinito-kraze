// Generated by Haxe 4.3.4
#ifndef INCLUDED_backend_ui_PsychUIRadioGroup
#define INCLUDED_backend_ui_PsychUIRadioGroup

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
HX_DECLARE_CLASS2(backend,ui,PsychUICheckBox)
HX_DECLARE_CLASS2(backend,ui,PsychUIRadioGroup)
HX_DECLARE_CLASS2(backend,ui,PsychUIRadioItem)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxCamera)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace backend{
namespace ui{


class HXCPP_CLASS_ATTRIBUTES PsychUIRadioGroup_obj : public  ::flixel::group::FlxTypedSpriteGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedSpriteGroup_obj super;
		typedef PsychUIRadioGroup_obj OBJ_;
		PsychUIRadioGroup_obj();

	public:
		enum { _hx_ClassId = 0x74a22b2b };

		void __construct(Float x,Float y,::Array< ::String > labels,::hx::Null< Float >  __o_space,::hx::Null< int >  __o_maxItems, ::Dynamic __o_isHorizontal, ::Dynamic __o_textWidth);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="backend.ui.PsychUIRadioGroup")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"backend.ui.PsychUIRadioGroup"); }
		static ::hx::ObjectPtr< PsychUIRadioGroup_obj > __new(Float x,Float y,::Array< ::String > labels,::hx::Null< Float >  __o_space,::hx::Null< int >  __o_maxItems, ::Dynamic __o_isHorizontal, ::Dynamic __o_textWidth);
		static ::hx::ObjectPtr< PsychUIRadioGroup_obj > __alloc(::hx::Ctx *_hx_ctx,Float x,Float y,::Array< ::String > labels,::hx::Null< Float >  __o_space,::hx::Null< int >  __o_maxItems, ::Dynamic __o_isHorizontal, ::Dynamic __o_textWidth);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PsychUIRadioGroup_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PsychUIRadioGroup",53,79,0d,7f); }

		static void __boot();
		static ::String CLICK_EVENT;
		::Array< ::String > labels;
		::Array< ::Dynamic> radios;
		Float space;
		int textWidth;
		int maxItems;
		bool stackHorizontal;
		int checked;
		 ::backend::ui::PsychUIRadioItem checkedRadio;
		 ::flixel::FlxSprite arrowUp;
		 ::flixel::FlxSprite arrowDown;
		 ::Dynamic onClick;
		Dynamic onClick_dyn() { return onClick;}
		 ::flixel::FlxObject _hitbox;
		void update(Float elapsed);

		void draw();

		void destroy();

		int curScroll;
		int set_curScroll(int v);
		::Dynamic set_curScroll_dyn();

		bool set_stackHorizontal(bool v);
		::Dynamic set_stackHorizontal_dyn();

		int set_checked(int v);
		::Dynamic set_checked_dyn();

		::Array< ::String > set_labels(::Array< ::String > v);
		::Dynamic set_labels_dyn();

		 ::backend::ui::PsychUIRadioItem set_checkedRadio( ::backend::ui::PsychUIRadioItem v);
		::Dynamic set_checkedRadio_dyn();

		Float set_space(Float v);
		::Dynamic set_space_dyn();

		int set_textWidth(int v);
		::Dynamic set_textWidth_dyn();

		int set_maxItems(int v);
		::Dynamic set_maxItems_dyn();

		void updateRadioItems();
		::Dynamic updateRadioItems_dyn();

		::Array< ::Dynamic> set_cameras(::Array< ::Dynamic> v);

		 ::flixel::FlxCamera set_camera( ::flixel::FlxCamera v);

		bool broadcastRadioGroupEvent;
		 ::flixel::FlxSprite _addNewRadio();
		::Dynamic _addNewRadio_dyn();

};

} // end namespace backend
} // end namespace ui

#endif /* INCLUDED_backend_ui_PsychUIRadioGroup */ 
