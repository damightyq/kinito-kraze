// Generated by Haxe 4.3.4
#ifndef INCLUDED_backend_ui_PsychUIRadioItem
#define INCLUDED_backend_ui_PsychUIRadioItem

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_backend_ui_PsychUICheckBox
#include <backend/ui/PsychUICheckBox.h>
#endif
HX_DECLARE_CLASS2(backend,ui,PsychUICheckBox)
HX_DECLARE_CLASS2(backend,ui,PsychUIRadioItem)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace backend{
namespace ui{


class HXCPP_CLASS_ATTRIBUTES PsychUIRadioItem_obj : public  ::backend::ui::PsychUICheckBox_obj
{
	public:
		typedef  ::backend::ui::PsychUICheckBox_obj super;
		typedef PsychUIRadioItem_obj OBJ_;
		PsychUIRadioItem_obj();

	public:
		enum { _hx_ClassId = 0x7f5f1b93 };

		void __construct(Float x,Float y,::String label,::hx::Null< int >  __o_textWid);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="backend.ui.PsychUIRadioItem")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"backend.ui.PsychUIRadioItem"); }
		static ::hx::ObjectPtr< PsychUIRadioItem_obj > __new(Float x,Float y,::String label,::hx::Null< int >  __o_textWid);
		static ::hx::ObjectPtr< PsychUIRadioItem_obj > __alloc(::hx::Ctx *_hx_ctx,Float x,Float y,::String label,::hx::Null< int >  __o_textWid);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PsychUIRadioItem_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PsychUIRadioItem",7f,5d,ac,0f); }

		void boxGraphic();

};

} // end namespace backend
} // end namespace ui

#endif /* INCLUDED_backend_ui_PsychUIRadioItem */ 
