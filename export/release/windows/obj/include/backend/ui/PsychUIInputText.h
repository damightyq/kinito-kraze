// Generated by Haxe 4.3.4
#ifndef INCLUDED_backend_ui_PsychUIInputText
#define INCLUDED_backend_ui_PsychUIInputText

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
HX_DECLARE_CLASS0(EReg)
HX_DECLARE_CLASS2(backend,ui,PsychUIInputText)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,text,FlxTextFormat)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,KeyboardEvent)

namespace backend{
namespace ui{


class HXCPP_CLASS_ATTRIBUTES PsychUIInputText_obj : public  ::flixel::group::FlxTypedSpriteGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedSpriteGroup_obj super;
		typedef PsychUIInputText_obj OBJ_;
		PsychUIInputText_obj();

	public:
		enum { _hx_ClassId = 0x7fb5dc94 };

		void __construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_wid,::String __o_text,::hx::Null< int >  __o_size);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="backend.ui.PsychUIInputText")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"backend.ui.PsychUIInputText"); }
		static ::hx::ObjectPtr< PsychUIInputText_obj > __new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_wid,::String __o_text,::hx::Null< int >  __o_size);
		static ::hx::ObjectPtr< PsychUIInputText_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_wid,::String __o_text,::hx::Null< int >  __o_size);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		static void __alloc_dynamic_functions(::hx::Ctx *_hx_alloc,PsychUIInputText_obj *_hx_obj);
		//~PsychUIInputText_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PsychUIInputText",a8,4b,44,34); }

		static void __boot();
		static ::Array< int > onKeyDown_ignored;
		static ::String CHANGE_EVENT;
		static int KEY_TILDE;
		static int KEY_ACUTE;
		static  ::backend::ui::PsychUIInputText focusOn;
		static  ::backend::ui::PsychUIInputText set_focusOn( ::backend::ui::PsychUIInputText v);
		static ::Dynamic set_focusOn_dyn();

		static int getAccentCharCode(int accent);
		static ::Dynamic getAccentCharCode_dyn();

		::String name;
		 ::flixel::FlxSprite bg;
		 ::flixel::FlxSprite behindText;
		 ::flixel::FlxSprite selection;
		 ::flixel::text::FlxText textObj;
		 ::flixel::FlxSprite caret;
		 ::Dynamic onChange;
		Dynamic onChange_dyn() { return onChange;}
		int fieldWidth;
		int maxLength;
		bool passwordMask;
		::String text;
		int forceCase;
		int filterMode;
		 ::EReg customFilterPattern;
		 ::flixel::text::FlxTextFormat selectedFormat;
		int selectIndex;
		int caretIndex;
		Float _caretTime;
		int _nextAccent;
		bool inInsertMode;
		void onKeyDown( ::openfl::events::KeyboardEvent e);
		::Dynamic onKeyDown_dyn();

		::Dynamic onPressEnter;
		inline ::Dynamic &onPressEnter_dyn() {return onPressEnter; }

		 ::Dynamic unfocus;
		Dynamic unfocus_dyn() { return unfocus;}
		virtual void update(Float elapsed);

		void resetCaret();
		::Dynamic resetCaret_dyn();

		void updateCaret();
		::Dynamic updateCaret_dyn();

		void deleteSelection();
		::Dynamic deleteSelection_dyn();

		void destroy();

		int set_caretIndex(int v);
		::Dynamic set_caretIndex_dyn();

		virtual void setGraphicSize(::hx::Null< Float >  width,::hx::Null< Float >  height);

		void updateHitbox();

		int set_fieldWidth(int v);
		::Dynamic set_fieldWidth_dyn();

		int set_maxLength(int v);
		::Dynamic set_maxLength_dyn();

		bool set_passwordMask(bool v);
		::Dynamic set_passwordMask_dyn();

		::Array< Float > _boundaries;
		::String set_text(::String v);
		::Dynamic set_text_dyn();

		bool broadcastInputTextEvent;
		void _typeLetter(int charCode);
		::Dynamic _typeLetter_dyn();

		int set_forceCase(int v);
		::Dynamic set_forceCase_dyn();

		int set_filterMode(int v);
		::Dynamic set_filterMode_dyn();

		 ::EReg set_customFilterPattern( ::EReg cfp);
		::Dynamic set_customFilterPattern_dyn();

		::String filter(::String text);
		::Dynamic filter_dyn();

};

} // end namespace backend
} // end namespace ui

#endif /* INCLUDED_backend_ui_PsychUIInputText */ 
