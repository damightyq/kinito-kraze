// Generated by Haxe 4.3.4
#ifndef INCLUDED_backend_ui_PsychUICheckBox
#define INCLUDED_backend_ui_PsychUICheckBox

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
HX_DECLARE_CLASS2(backend,ui,PsychUICheckBox)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace backend{
namespace ui{


class HXCPP_CLASS_ATTRIBUTES PsychUICheckBox_obj : public  ::flixel::group::FlxTypedSpriteGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedSpriteGroup_obj super;
		typedef PsychUICheckBox_obj OBJ_;
		PsychUICheckBox_obj();

	public:
		enum { _hx_ClassId = 0x5e94b94a };

		void __construct(Float x,Float y,::String label, ::Dynamic __o_textWid, ::Dynamic callback);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="backend.ui.PsychUICheckBox")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"backend.ui.PsychUICheckBox"); }
		static ::hx::ObjectPtr< PsychUICheckBox_obj > __new(Float x,Float y,::String label, ::Dynamic __o_textWid, ::Dynamic callback);
		static ::hx::ObjectPtr< PsychUICheckBox_obj > __alloc(::hx::Ctx *_hx_ctx,Float x,Float y,::String label, ::Dynamic __o_textWid, ::Dynamic callback);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PsychUICheckBox_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PsychUICheckBox",72,ad,fc,47); }

		static void __boot();
		static ::String CLICK_EVENT;
		::String name;
		 ::flixel::FlxSprite box;
		 ::flixel::text::FlxText text;
		bool checked;
		 ::Dynamic onClick;
		Dynamic onClick_dyn() { return onClick;}
		virtual void boxGraphic();
		::Dynamic boxGraphic_dyn();

		bool broadcastCheckBoxEvent;
		void update(Float elapsed);

		bool set_checked( ::Dynamic v);
		::Dynamic set_checked_dyn();

		::String get_label();
		::Dynamic get_label_dyn();

		::String set_label(::String v);
		::Dynamic set_label_dyn();

};

} // end namespace backend
} // end namespace ui

#endif /* INCLUDED_backend_ui_PsychUICheckBox */ 
