// Generated by Haxe 4.3.4
#ifndef INCLUDED_backend_Achievements
#define INCLUDED_backend_Achievements

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
HX_DECLARE_CLASS1(backend,Achievements)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(objects,AchievementPopup)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace backend{


class HXCPP_CLASS_ATTRIBUTES Achievements_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Achievements_obj OBJ_;
		Achievements_obj();

	public:
		enum { _hx_ClassId = 0x32ede490 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="backend.Achievements")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"backend.Achievements"); }

		inline static ::hx::ObjectPtr< Achievements_obj > __new() {
			::hx::ObjectPtr< Achievements_obj > __this = new Achievements_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Achievements_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Achievements_obj *__this = (Achievements_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Achievements_obj), false, "backend.Achievements"));
			*(void **)__this = Achievements_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Achievements_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Achievements",44,ed,7d,4e); }

		static void __boot();
		static void init();
		static ::Dynamic init_dyn();

		static  ::haxe::ds::StringMap achievements;
		static  ::haxe::ds::StringMap variables;
		static ::Array< ::String > achievementsUnlocked;
		static bool _firstLoad;
		static  ::Dynamic get(::String name);
		static ::Dynamic get_dyn();

		static bool exists(::String name);
		static ::Dynamic exists_dyn();

		static void load();
		static ::Dynamic load_dyn();

		static void save();
		static ::Dynamic save_dyn();

		static Float getScore(::String name);
		static ::Dynamic getScore_dyn();

		static Float setScore(::String name,Float value,::hx::Null< bool >  saveIfNotUnlocked);
		static ::Dynamic setScore_dyn();

		static Float addScore(::String name,::hx::Null< Float >  value,::hx::Null< bool >  saveIfNotUnlocked);
		static ::Dynamic addScore_dyn();

		static Float _scoreFunc(::String name,::String mode,::hx::Null< Float >  addOrSet,::hx::Null< bool >  saveIfNotUnlocked);
		static ::Dynamic _scoreFunc_dyn();

		static int _lastUnlock;
		static ::String unlock(::String name,::hx::Null< bool >  autoStartPopup);
		static ::Dynamic unlock_dyn();

		static bool isUnlocked(::String name);
		static ::Dynamic isUnlocked_dyn();

		static ::Array< ::Dynamic> _popups;
		static bool get_showingPopups();
		static ::Dynamic get_showingPopups_dyn();

		static void startPopup(::String achieve, ::Dynamic endFunc);
		static ::Dynamic startPopup_dyn();

		static int _sortID;
		static int _originalLength;
		static void createAchievement(::String name, ::Dynamic data,::String mod);
		static ::Dynamic createAchievement_dyn();

		static void reloadList();
		static ::Dynamic reloadList_dyn();

		static ::cpp::VirtualArray loadAchievementJson(::String path,::hx::Null< bool >  addMods);
		static ::Dynamic loadAchievementJson_dyn();

		static void addLuaCallbacks( cpp::Reference<lua_State> lua);
		static ::Dynamic addLuaCallbacks_dyn();

};

} // end namespace backend

#endif /* INCLUDED_backend_Achievements */ 
