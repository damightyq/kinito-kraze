// Generated by Haxe 4.3.4
#ifndef INCLUDED_flixel_addons_display_FlxPieDial
#define INCLUDED_flixel_addons_display_FlxPieDial

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,addons,display,FlxPieDial)
HX_DECLARE_CLASS3(flixel,addons,display,FlxPieDialShape)
HX_DECLARE_CLASS2(flixel,math,FlxBasePoint)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)

namespace flixel{
namespace addons{
namespace display{


class HXCPP_CLASS_ATTRIBUTES FlxPieDial_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef FlxPieDial_obj OBJ_;
		FlxPieDial_obj();

	public:
		enum { _hx_ClassId = 0x3b1105fd };

		void __construct(Float X,Float Y,int Radius,::hx::Null< int >  __o_Color,::hx::Null< int >  __o_Frames, ::flixel::addons::display::FlxPieDialShape Shape,::hx::Null< bool >  __o_Clockwise,::hx::Null< int >  __o_InnerRadius);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.addons.display.FlxPieDial")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.addons.display.FlxPieDial"); }
		static ::hx::ObjectPtr< FlxPieDial_obj > __new(Float X,Float Y,int Radius,::hx::Null< int >  __o_Color,::hx::Null< int >  __o_Frames, ::flixel::addons::display::FlxPieDialShape Shape,::hx::Null< bool >  __o_Clockwise,::hx::Null< int >  __o_InnerRadius);
		static ::hx::ObjectPtr< FlxPieDial_obj > __alloc(::hx::Ctx *_hx_ctx,Float X,Float Y,int Radius,::hx::Null< int >  __o_Color,::hx::Null< int >  __o_Frames, ::flixel::addons::display::FlxPieDialShape Shape,::hx::Null< bool >  __o_Clockwise,::hx::Null< int >  __o_InnerRadius);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxPieDial_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxPieDial",ea,ab,c3,b0); }

		Float amount;
		int pieFrames;
		void draw();

		void makePieDialGraphic(int Radius,int Color,int Frames, ::flixel::addons::display::FlxPieDialShape Shape,bool Clockwise,int InnerRadius);
		::Dynamic makePieDialGraphic_dyn();

		 ::openfl::display::BitmapData makePieDialGraphicSub(int Radius,int Color,int Frames, ::flixel::addons::display::FlxPieDialShape Shape,bool Clockwise,int InnerRadius);
		::Dynamic makePieDialGraphicSub_dyn();

		 ::flixel::FlxSprite makeFullFrame(int Radius,int Color,int Frames, ::flixel::addons::display::FlxPieDialShape Shape,bool Clockwise,int InnerRadius);
		::Dynamic makeFullFrame_dyn();

		void drawSweep(Float sweep, ::flixel::math::FlxBasePoint p, ::flixel::FlxSprite nextFrame,::Array< ::Dynamic> polygon,int W,int H,int back,int fore);
		::Dynamic drawSweep_dyn();

		Float set_amount(Float f);
		::Dynamic set_amount_dyn();

};

} // end namespace flixel
} // end namespace addons
} // end namespace display

#endif /* INCLUDED_flixel_addons_display_FlxPieDial */ 
