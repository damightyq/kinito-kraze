// Generated by Haxe 4.3.4
#ifndef INCLUDED_shaders_ErrorHandledRuntimeShader
#define INCLUDED_shaders_ErrorHandledRuntimeShader

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_addons_display_FlxRuntimeShader
#include <flixel/addons/display/FlxRuntimeShader.h>
#endif
#ifndef INCLUDED_shaders_IErrorHandler
#include <shaders/IErrorHandler.h>
#endif
HX_DECLARE_CLASS3(flixel,addons,display,FlxRuntimeShader)
HX_DECLARE_CLASS3(flixel,graphics,tile,FlxGraphicsShader)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)
HX_DECLARE_CLASS2(openfl,display,GraphicsShader)
HX_DECLARE_CLASS2(openfl,display,Shader)
HX_DECLARE_CLASS1(shaders,ErrorHandledRuntimeShader)
HX_DECLARE_CLASS1(shaders,IErrorHandler)

namespace shaders{


class HXCPP_CLASS_ATTRIBUTES ErrorHandledRuntimeShader_obj : public  ::flixel::addons::display::FlxRuntimeShader_obj
{
	public:
		typedef  ::flixel::addons::display::FlxRuntimeShader_obj super;
		typedef ErrorHandledRuntimeShader_obj OBJ_;
		ErrorHandledRuntimeShader_obj();

	public:
		enum { _hx_ClassId = 0x6752bd9b };

		void __construct(::String shaderName,::String fragmentSource,::String vertexSource);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="shaders.ErrorHandledRuntimeShader")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"shaders.ErrorHandledRuntimeShader"); }
		static ::hx::ObjectPtr< ErrorHandledRuntimeShader_obj > __new(::String shaderName,::String fragmentSource,::String vertexSource);
		static ::hx::ObjectPtr< ErrorHandledRuntimeShader_obj > __alloc(::hx::Ctx *_hx_ctx,::String shaderName,::String fragmentSource,::String vertexSource);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		static void __alloc_dynamic_functions(::hx::Ctx *_hx_alloc,ErrorHandledRuntimeShader_obj *_hx_obj);
		//~ErrorHandledRuntimeShader_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("ErrorHandledRuntimeShader",89,00,51,13); }

		::String shaderName;
		::Dynamic onError;
		inline ::Dynamic &onError_dyn() {return onError; }

		 ::lime::graphics::opengl::GLObject _hx___createGLProgram(::String vertexSource,::String fragmentSource);

};

} // end namespace shaders

#endif /* INCLUDED_shaders_ErrorHandledRuntimeShader */ 
