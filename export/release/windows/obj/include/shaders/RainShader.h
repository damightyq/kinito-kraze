// Generated by Haxe 4.3.4
#ifndef INCLUDED_shaders_RainShader
#define INCLUDED_shaders_RainShader

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxCamera)
HX_DECLARE_CLASS3(flixel,graphics,tile,FlxGraphicsShader)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,GraphicsShader)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,Shader)
HX_DECLARE_CLASS2(openfl,display,ShaderInput_openfl_display_BitmapData)
HX_DECLARE_CLASS2(openfl,display,ShaderParameter_Float)
HX_DECLARE_CLASS2(openfl,display,ShaderParameter_Int)
HX_DECLARE_CLASS1(shaders,RainShader)

namespace shaders{


class HXCPP_CLASS_ATTRIBUTES RainShader_obj : public  ::flixel::graphics::tile::FlxGraphicsShader_obj
{
	public:
		typedef  ::flixel::graphics::tile::FlxGraphicsShader_obj super;
		typedef RainShader_obj OBJ_;
		RainShader_obj();

	public:
		enum { _hx_ClassId = 0x5d863b83 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="shaders.RainShader")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"shaders.RainShader"); }
		static ::hx::ObjectPtr< RainShader_obj > __new();
		static ::hx::ObjectPtr< RainShader_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~RainShader_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("RainShader",b9,37,f2,2a); }

		static void __boot();
		static int MAX_LIGHTS;
		::Array< ::Dynamic> lights;
		Float time;
		Float set_time(Float value);
		::Dynamic set_time_dyn();

		Float scale;
		Float set_scale(Float value);
		::Dynamic set_scale_dyn();

		Float intensity;
		Float set_intensity(Float value);
		::Dynamic set_intensity_dyn();

		Float puddleY;
		Float set_puddleY(Float value);
		::Dynamic set_puddleY_dyn();

		Float puddleScaleY;
		Float set_puddleScaleY(Float value);
		::Dynamic set_puddleScaleY_dyn();

		 ::openfl::display::BitmapData blurredScreen;
		 ::openfl::display::BitmapData set_blurredScreen( ::openfl::display::BitmapData value);
		::Dynamic set_blurredScreen_dyn();

		 ::openfl::display::BitmapData mask;
		 ::openfl::display::BitmapData set_mask( ::openfl::display::BitmapData value);
		::Dynamic set_mask_dyn();

		 ::openfl::display::BitmapData lightMap;
		 ::openfl::display::BitmapData set_lightMap( ::openfl::display::BitmapData value);
		::Dynamic set_lightMap_dyn();

		int numLightsSwag;
		int set_numLightsSwag(int value);
		::Dynamic set_numLightsSwag_dyn();

		void update(Float elapsed);
		::Dynamic update_dyn();

		void updateViewInfo(Float screenWidth,Float screenHeight, ::flixel::FlxCamera camera);
		::Dynamic updateViewInfo_dyn();

		 ::openfl::display::ShaderParameter_Float addFloatUniform(::String name,int length);
		::Dynamic addFloatUniform_dyn();

		 ::openfl::display::ShaderParameter_Float uScreenResolution;
		 ::openfl::display::ShaderParameter_Float uCameraBounds;
		 ::openfl::display::ShaderParameter_Float uScale;
		 ::openfl::display::ShaderParameter_Float uIntensity;
		 ::openfl::display::ShaderParameter_Float uTime;
		 ::openfl::display::ShaderParameter_Float uPuddleY;
		 ::openfl::display::ShaderParameter_Float uPuddleScaleY;
		 ::openfl::display::ShaderInput_openfl_display_BitmapData uBlurredScreen;
		 ::openfl::display::ShaderInput_openfl_display_BitmapData uMask;
		 ::openfl::display::ShaderInput_openfl_display_BitmapData uLightMap;
		 ::openfl::display::ShaderParameter_Int numLights;
};

} // end namespace shaders

#endif /* INCLUDED_shaders_RainShader */ 
