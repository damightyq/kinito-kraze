// Generated by Haxe 4.3.4
#ifndef INCLUDED_psychlua_ModchartAnimateSprite
#define INCLUDED_psychlua_ModchartAnimateSprite

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flxanimate_PsychFlxAnimate
#include <flxanimate/PsychFlxAnimate.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(flxanimate,FlxAnimate)
HX_DECLARE_CLASS1(flxanimate,PsychFlxAnimate)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(psychlua,ModchartAnimateSprite)

namespace psychlua{


class HXCPP_CLASS_ATTRIBUTES ModchartAnimateSprite_obj : public  ::flxanimate::PsychFlxAnimate_obj
{
	public:
		typedef  ::flxanimate::PsychFlxAnimate_obj super;
		typedef ModchartAnimateSprite_obj OBJ_;
		ModchartAnimateSprite_obj();

	public:
		enum { _hx_ClassId = 0x6eca17ad };

		void __construct( ::Dynamic __o_x, ::Dynamic __o_y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="psychlua.ModchartAnimateSprite")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"psychlua.ModchartAnimateSprite"); }
		static ::hx::ObjectPtr< ModchartAnimateSprite_obj > __new( ::Dynamic __o_x, ::Dynamic __o_y);
		static ::hx::ObjectPtr< ModchartAnimateSprite_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic __o_x, ::Dynamic __o_y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ModchartAnimateSprite_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ModchartAnimateSprite",ea,f8,5c,90); }

		 ::haxe::ds::StringMap animOffsets;
		void playAnim(::String name,::hx::Null< bool >  forced, ::Dynamic reverse, ::Dynamic startFrame);
		::Dynamic playAnim_dyn();

		void addOffset(::String name,Float x,Float y);
		::Dynamic addOffset_dyn();

};

} // end namespace psychlua

#endif /* INCLUDED_psychlua_ModchartAnimateSprite */ 
