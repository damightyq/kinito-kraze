// Generated by Haxe 4.3.4
#ifndef INCLUDED_crowplexus_iris_IrisCall
#define INCLUDED_crowplexus_iris_IrisCall

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_a12cec1f7f1a6feb_14_new)
HX_DECLARE_CLASS2(crowplexus,iris,IrisCall)

namespace crowplexus{
namespace iris{


class HXCPP_CLASS_ATTRIBUTES IrisCall_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef IrisCall_obj OBJ_;
		IrisCall_obj();

	public:
		enum { _hx_ClassId = 0x2f649fb0 };

		void __construct(::String funName, ::Dynamic signature, ::Dynamic returnValue);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="crowplexus.iris.IrisCall")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"crowplexus.iris.IrisCall"); }

		inline static ::hx::ObjectPtr< IrisCall_obj > __new(::String funName, ::Dynamic signature, ::Dynamic returnValue) {
			::hx::ObjectPtr< IrisCall_obj > __this = new IrisCall_obj();
			__this->__construct(funName,signature,returnValue);
			return __this;
		}

		inline static ::hx::ObjectPtr< IrisCall_obj > __alloc(::hx::Ctx *_hx_ctx,::String funName, ::Dynamic signature, ::Dynamic returnValue) {
			IrisCall_obj *__this = (IrisCall_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(IrisCall_obj), true, "crowplexus.iris.IrisCall"));
			*(void **)__this = IrisCall_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_a12cec1f7f1a6feb_14_new)
HXDLIN(  14)		( ( ::crowplexus::iris::IrisCall)(__this) )->funName = funName;
HXDLIN(  14)		( ( ::crowplexus::iris::IrisCall)(__this) )->signature = signature;
HXDLIN(  14)		( ( ::crowplexus::iris::IrisCall)(__this) )->returnValue = returnValue;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~IrisCall_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("IrisCall",71,4a,12,33); }

		::String funName;
		 ::Dynamic signature;
		 ::Dynamic returnValue;
};

} // end namespace crowplexus
} // end namespace iris

#endif /* INCLUDED_crowplexus_iris_IrisCall */ 
