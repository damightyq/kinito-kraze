// Generated by Haxe 4.3.4
#ifndef INCLUDED_crowplexus_iris_Iris
#define INCLUDED_crowplexus_iris_Iris

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(crowplexus,hscript,Expr)
HX_DECLARE_CLASS2(crowplexus,hscript,Interp)
HX_DECLARE_CLASS2(crowplexus,hscript,Parser)
HX_DECLARE_CLASS2(crowplexus,iris,ErrorSeverity)
HX_DECLARE_CLASS2(crowplexus,iris,Iris)
HX_DECLARE_CLASS2(crowplexus,iris,IrisCall)
HX_DECLARE_CLASS2(crowplexus,iris,IrisConfig)
HX_DECLARE_CLASS3(crowplexus,iris,utils,UsingEntry)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)

namespace crowplexus{
namespace iris{


class HXCPP_CLASS_ATTRIBUTES Iris_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Iris_obj OBJ_;
		Iris_obj();

	public:
		enum { _hx_ClassId = 0x2e02612a };

		void __construct(::String scriptCode, ::Dynamic config);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="crowplexus.iris.Iris")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"crowplexus.iris.Iris"); }
		static ::hx::ObjectPtr< Iris_obj > __new(::String scriptCode, ::Dynamic config);
		static ::hx::ObjectPtr< Iris_obj > __alloc(::hx::Ctx *_hx_ctx,::String scriptCode, ::Dynamic config);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Iris_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Iris",33,70,97,30); }

		static void __boot();
		static  ::haxe::ds::StringMap instances;
		static ::Array< ::Dynamic> registeredUsingEntries;
		static ::Array< ::String > blocklistImports;
		static  ::haxe::ds::StringMap proxyImports;
		static void addBlocklistImport(::String name);
		static ::Dynamic addBlocklistImport_dyn();

		static void addProxyImport(::String name, ::Dynamic value);
		static ::Dynamic addProxyImport_dyn();

		static  ::Dynamic getProxiedImport(::String name);
		static ::Dynamic getProxiedImport_dyn();

		static  ::Dynamic getDefaultPos(::String name);
		static ::Dynamic getDefaultPos_dyn();

		static ::Dynamic logLevel;
		static inline ::Dynamic &logLevel_dyn() {return logLevel; }

		static ::Dynamic print;
		static inline ::Dynamic &print_dyn() {return print; }

		static ::Dynamic error;
		static inline ::Dynamic &error_dyn() {return error; }

		static ::Dynamic warn;
		static inline ::Dynamic &warn_dyn() {return warn; }

		static ::Dynamic fatal;
		static inline ::Dynamic &fatal_dyn() {return fatal; }

		static ::String fixScriptName(::String toFix);
		static ::Dynamic fixScriptName_dyn();

		static void destroyAll();
		static ::Dynamic destroyAll_dyn();

		static  ::crowplexus::iris::utils::UsingEntry registerUsingGlobal(::String name, ::Dynamic call);
		static ::Dynamic registerUsingGlobal_dyn();

		 ::crowplexus::iris::IrisConfig config;
		::String get_name();
		::Dynamic get_name_dyn();

		::String scriptCode;
		 ::crowplexus::hscript::Interp interp;
		 ::crowplexus::hscript::Parser parser;
		 ::crowplexus::hscript::Expr expr;
		::String interpErrStr;
		 ::Dynamic execute();
		::Dynamic execute_dyn();

		 ::crowplexus::hscript::Expr parse(::hx::Null< bool >  force);
		::Dynamic parse_dyn();

		virtual void preset();
		::Dynamic preset_dyn();

		 ::Dynamic get(::String field);
		::Dynamic get_dyn();

		void set(::String name, ::Dynamic value,::hx::Null< bool >  allowOverride);
		::Dynamic set_dyn();

		virtual  ::crowplexus::iris::IrisCall call(::String fun,::cpp::VirtualArray args);
		::Dynamic call_dyn();

		bool exists(::String field);
		::Dynamic exists_dyn();

		virtual void destroy();
		::Dynamic destroy_dyn();

};

} // end namespace crowplexus
} // end namespace iris

#endif /* INCLUDED_crowplexus_iris_Iris */ 
