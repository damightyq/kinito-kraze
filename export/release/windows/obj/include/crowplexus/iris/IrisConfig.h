// Generated by Haxe 4.3.4
#ifndef INCLUDED_crowplexus_iris_IrisConfig
#define INCLUDED_crowplexus_iris_IrisConfig

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_9bb9668e44f4c333_14_new)
HX_DECLARE_CLASS2(crowplexus,iris,IrisConfig)

namespace crowplexus{
namespace iris{


class HXCPP_CLASS_ATTRIBUTES IrisConfig_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef IrisConfig_obj OBJ_;
		IrisConfig_obj();

	public:
		enum { _hx_ClassId = 0x0c6d678c };

		void __construct(::String name,::hx::Null< bool >  __o_autoRun,::hx::Null< bool >  __o_autoPreset,::Array< ::String > localBlocklist);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="crowplexus.iris.IrisConfig")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"crowplexus.iris.IrisConfig"); }

		inline static ::hx::ObjectPtr< IrisConfig_obj > __new(::String name,::hx::Null< bool >  __o_autoRun,::hx::Null< bool >  __o_autoPreset,::Array< ::String > localBlocklist) {
			::hx::ObjectPtr< IrisConfig_obj > __this = new IrisConfig_obj();
			__this->__construct(name,__o_autoRun,__o_autoPreset,localBlocklist);
			return __this;
		}

		inline static ::hx::ObjectPtr< IrisConfig_obj > __alloc(::hx::Ctx *_hx_ctx,::String name,::hx::Null< bool >  __o_autoRun,::hx::Null< bool >  __o_autoPreset,::Array< ::String > localBlocklist) {
			IrisConfig_obj *__this = (IrisConfig_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(IrisConfig_obj), true, "crowplexus.iris.IrisConfig"));
			*(void **)__this = IrisConfig_obj::_hx_vtable;
{
            		bool autoRun = __o_autoRun.Default(true);
            		bool autoPreset = __o_autoPreset.Default(true);
            	HX_STACKFRAME(&_hx_pos_9bb9668e44f4c333_14_new)
HXLINE(  20)		( ( ::crowplexus::iris::IrisConfig)(__this) )->localBlocklist = ::Array_obj< ::String >::__new(0);
HXLINE(  18)		( ( ::crowplexus::iris::IrisConfig)(__this) )->packageName = null();
HXLINE(  17)		( ( ::crowplexus::iris::IrisConfig)(__this) )->autoPreset = true;
HXLINE(  16)		( ( ::crowplexus::iris::IrisConfig)(__this) )->autoRun = true;
HXLINE(  15)		( ( ::crowplexus::iris::IrisConfig)(__this) )->name = null();
HXLINE(  31)		( ( ::crowplexus::iris::IrisConfig)(__this) )->name = name;
HXLINE(  32)		( ( ::crowplexus::iris::IrisConfig)(__this) )->autoRun = autoRun;
HXLINE(  33)		( ( ::crowplexus::iris::IrisConfig)(__this) )->autoPreset = autoPreset;
HXLINE(  34)		if (::hx::IsNotNull( localBlocklist )) {
HXLINE(  35)			( ( ::crowplexus::iris::IrisConfig)(__this) )->localBlocklist = localBlocklist;
            		}
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~IrisConfig_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("IrisConfig",55,e3,f8,e4); }

		static  ::crowplexus::iris::IrisConfig from( ::Dynamic d);
		static ::Dynamic from_dyn();

		::String name;
		bool autoRun;
		bool autoPreset;
		::String packageName;
		::Array< ::String > localBlocklist;
};

} // end namespace crowplexus
} // end namespace iris

#endif /* INCLUDED_crowplexus_iris_IrisConfig */ 
