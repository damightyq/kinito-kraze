// Generated by Haxe 4.3.4
#ifndef INCLUDED_crowplexus_iris_utils_Ansi
#define INCLUDED_crowplexus_iris_utils_Ansi

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_crowplexus_iris_IrisUsingClass
#include <crowplexus/iris/IrisUsingClass.h>
#endif
HX_DECLARE_CLASS2(crowplexus,iris,IrisUsingClass)
HX_DECLARE_CLASS3(crowplexus,iris,utils,Ansi)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)

namespace crowplexus{
namespace iris{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES Ansi_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Ansi_obj OBJ_;
		Ansi_obj();

	public:
		enum { _hx_ClassId = 0x7b905e7d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="crowplexus.iris.utils.Ansi")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"crowplexus.iris.utils.Ansi"); }

		inline static ::hx::ObjectPtr< Ansi_obj > __new() {
			::hx::ObjectPtr< Ansi_obj > __this = new Ansi_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Ansi_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Ansi_obj *__this = (Ansi_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Ansi_obj), false, "crowplexus.iris.utils.Ansi"));
			*(void **)__this = Ansi_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Ansi_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("Ansi",e3,ba,4a,2b); }

		static void __boot();
		static ::String ESC;
		static ::String reset(::String str);
		static ::Dynamic reset_dyn();

		static ::String attr(::String str,int attr);
		static ::Dynamic attr_dyn();

		static ::String bg(::String str,int color);
		static ::Dynamic bg_dyn();

		static ::String clearScreen();
		static ::Dynamic clearScreen_dyn();

		static ::String clearLine();
		static ::Dynamic clearLine_dyn();

		static ::String fg(::String str,int color);
		static ::Dynamic fg_dyn();

		static  ::Dynamic colorSupported;
		static ::String stripColor(::String output);
		static ::Dynamic stripColor_dyn();

		static  ::haxe::ds::StringMap _hx___irisUsing_crowplexus_iris_utils_Ansi;
};

} // end namespace crowplexus
} // end namespace iris
} // end namespace utils

#endif /* INCLUDED_crowplexus_iris_utils_Ansi */ 
