// Generated by Haxe 4.3.4
#ifndef INCLUDED_crowplexus_iris_utils_UsingEntry
#define INCLUDED_crowplexus_iris_utils_UsingEntry

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_6f165bf9b5e668f2_11_new)
HX_DECLARE_CLASS3(crowplexus,iris,utils,UsingEntry)

namespace crowplexus{
namespace iris{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES UsingEntry_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef UsingEntry_obj OBJ_;
		UsingEntry_obj();

	public:
		enum { _hx_ClassId = 0x3f0138e4 };

		void __construct(::String name, ::Dynamic call);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="crowplexus.iris.utils.UsingEntry")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"crowplexus.iris.utils.UsingEntry"); }

		inline static ::hx::ObjectPtr< UsingEntry_obj > __new(::String name, ::Dynamic call) {
			::hx::ObjectPtr< UsingEntry_obj > __this = new UsingEntry_obj();
			__this->__construct(name,call);
			return __this;
		}

		inline static ::hx::ObjectPtr< UsingEntry_obj > __alloc(::hx::Ctx *_hx_ctx,::String name, ::Dynamic call) {
			UsingEntry_obj *__this = (UsingEntry_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(UsingEntry_obj), true, "crowplexus.iris.utils.UsingEntry"));
			*(void **)__this = UsingEntry_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_6f165bf9b5e668f2_11_new)
HXLINE(  12)		( ( ::crowplexus::iris::utils::UsingEntry)(__this) )->name = name;
HXLINE(  13)		( ( ::crowplexus::iris::utils::UsingEntry)(__this) )->call = call;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~UsingEntry_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("UsingEntry",ae,e0,8b,21); }

		::String name;
		 ::Dynamic call;
		Dynamic call_dyn() { return call;}
};

} // end namespace crowplexus
} // end namespace iris
} // end namespace utils

#endif /* INCLUDED_crowplexus_iris_utils_UsingEntry */ 
