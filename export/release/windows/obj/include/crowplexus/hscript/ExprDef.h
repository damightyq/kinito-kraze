// Generated by Haxe 4.3.4
#ifndef INCLUDED_crowplexus_hscript_ExprDef
#define INCLUDED_crowplexus_hscript_ExprDef

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(crowplexus,hscript,CType)
HX_DECLARE_CLASS2(crowplexus,hscript,Const)
HX_DECLARE_CLASS2(crowplexus,hscript,EnumType)
HX_DECLARE_CLASS2(crowplexus,hscript,Expr)
HX_DECLARE_CLASS2(crowplexus,hscript,ExprDef)
HX_DECLARE_CLASS2(crowplexus,hscript,ObjectDecl)
HX_DECLARE_CLASS2(crowplexus,hscript,SwitchCase)
namespace crowplexus{
namespace hscript{


class ExprDef_obj : public ::hx::EnumBase_obj
{
	typedef ::hx::EnumBase_obj super;
		typedef ExprDef_obj OBJ_;

	public:
		ExprDef_obj() {};
		HX_DO_ENUM_RTTI;
		static void __boot();
		static void __register();
		static bool __GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::String GetEnumName( ) const { return HX_("crowplexus.hscript.ExprDef",6b,0e,98,8b); }
		::String __ToString() const { return HX_("ExprDef.",be,76,8e,81) + _hx_tag; }

		static ::crowplexus::hscript::ExprDef EArray( ::crowplexus::hscript::Expr e, ::crowplexus::hscript::Expr index);
		static ::Dynamic EArray_dyn();
		static ::crowplexus::hscript::ExprDef EArrayDecl(::Array< ::Dynamic> e);
		static ::Dynamic EArrayDecl_dyn();
		static ::crowplexus::hscript::ExprDef EBinop(::String op, ::crowplexus::hscript::Expr e1, ::crowplexus::hscript::Expr e2);
		static ::Dynamic EBinop_dyn();
		static ::crowplexus::hscript::ExprDef EBlock(::Array< ::Dynamic> e);
		static ::Dynamic EBlock_dyn();
		static ::crowplexus::hscript::ExprDef EBreak;
		static inline ::crowplexus::hscript::ExprDef EBreak_dyn() { return EBreak; }
		static ::crowplexus::hscript::ExprDef ECall( ::crowplexus::hscript::Expr e,::Array< ::Dynamic> params);
		static ::Dynamic ECall_dyn();
		static ::crowplexus::hscript::ExprDef ECheckType( ::crowplexus::hscript::Expr e, ::crowplexus::hscript::CType t);
		static ::Dynamic ECheckType_dyn();
		static ::crowplexus::hscript::ExprDef EConst( ::crowplexus::hscript::Const c);
		static ::Dynamic EConst_dyn();
		static ::crowplexus::hscript::ExprDef EContinue;
		static inline ::crowplexus::hscript::ExprDef EContinue_dyn() { return EContinue; }
		static ::crowplexus::hscript::ExprDef EDirectValue( ::Dynamic value);
		static ::Dynamic EDirectValue_dyn();
		static ::crowplexus::hscript::ExprDef EDoWhile( ::crowplexus::hscript::Expr cond, ::crowplexus::hscript::Expr e);
		static ::Dynamic EDoWhile_dyn();
		static ::crowplexus::hscript::ExprDef EEnum(::String name,::Array< ::Dynamic> fields);
		static ::Dynamic EEnum_dyn();
		static ::crowplexus::hscript::ExprDef EField( ::crowplexus::hscript::Expr e,::String f,bool s);
		static ::Dynamic EField_dyn();
		static ::crowplexus::hscript::ExprDef EFor(::String v, ::crowplexus::hscript::Expr it, ::crowplexus::hscript::Expr e);
		static ::Dynamic EFor_dyn();
		static ::crowplexus::hscript::ExprDef EFunction(::Array< ::Dynamic> args, ::crowplexus::hscript::Expr e,::String name, ::crowplexus::hscript::CType ret);
		static ::Dynamic EFunction_dyn();
		static ::crowplexus::hscript::ExprDef EIdent(::String v);
		static ::Dynamic EIdent_dyn();
		static ::crowplexus::hscript::ExprDef EIf( ::crowplexus::hscript::Expr cond, ::crowplexus::hscript::Expr e1, ::crowplexus::hscript::Expr e2);
		static ::Dynamic EIf_dyn();
		static ::crowplexus::hscript::ExprDef EIgnore(bool skipSemicolon);
		static ::Dynamic EIgnore_dyn();
		static ::crowplexus::hscript::ExprDef EImport(::String v,::String as);
		static ::Dynamic EImport_dyn();
		static ::crowplexus::hscript::ExprDef EMeta(::String name,::Array< ::Dynamic> args, ::crowplexus::hscript::Expr e);
		static ::Dynamic EMeta_dyn();
		static ::crowplexus::hscript::ExprDef ENew(::String cl,::Array< ::Dynamic> params);
		static ::Dynamic ENew_dyn();
		static ::crowplexus::hscript::ExprDef EObject(::Array< ::Dynamic> fl);
		static ::Dynamic EObject_dyn();
		static ::crowplexus::hscript::ExprDef EParent( ::crowplexus::hscript::Expr e);
		static ::Dynamic EParent_dyn();
		static ::crowplexus::hscript::ExprDef EReturn( ::crowplexus::hscript::Expr e);
		static ::Dynamic EReturn_dyn();
		static ::crowplexus::hscript::ExprDef ESwitch( ::crowplexus::hscript::Expr e,::Array< ::Dynamic> cases, ::crowplexus::hscript::Expr defaultExpr);
		static ::Dynamic ESwitch_dyn();
		static ::crowplexus::hscript::ExprDef ETernary( ::crowplexus::hscript::Expr cond, ::crowplexus::hscript::Expr e1, ::crowplexus::hscript::Expr e2);
		static ::Dynamic ETernary_dyn();
		static ::crowplexus::hscript::ExprDef EThrow( ::crowplexus::hscript::Expr e);
		static ::Dynamic EThrow_dyn();
		static ::crowplexus::hscript::ExprDef ETry( ::crowplexus::hscript::Expr e,::String v, ::crowplexus::hscript::CType t, ::crowplexus::hscript::Expr ecatch);
		static ::Dynamic ETry_dyn();
		static ::crowplexus::hscript::ExprDef EUnop(::String op,bool prefix, ::crowplexus::hscript::Expr e);
		static ::Dynamic EUnop_dyn();
		static ::crowplexus::hscript::ExprDef EUsing(::String name);
		static ::Dynamic EUsing_dyn();
		static ::crowplexus::hscript::ExprDef EVar(::String n, ::crowplexus::hscript::CType t, ::crowplexus::hscript::Expr e, ::Dynamic isConst);
		static ::Dynamic EVar_dyn();
		static ::crowplexus::hscript::ExprDef EWhile( ::crowplexus::hscript::Expr cond, ::crowplexus::hscript::Expr e);
		static ::Dynamic EWhile_dyn();
};

} // end namespace crowplexus
} // end namespace hscript

#endif /* INCLUDED_crowplexus_hscript_ExprDef */ 
