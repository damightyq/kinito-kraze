// Generated by Haxe 4.3.4
#ifndef INCLUDED_crowplexus_hscript_Interp
#define INCLUDED_crowplexus_hscript_Interp

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(crowplexus,hscript,DeclaredVar)
HX_DECLARE_CLASS2(crowplexus,hscript,ErrorDef)
HX_DECLARE_CLASS2(crowplexus,hscript,Expr)
HX_DECLARE_CLASS2(crowplexus,hscript,Interp)
HX_DECLARE_CLASS3(crowplexus,iris,utils,UsingEntry)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)

namespace crowplexus{
namespace hscript{


class HXCPP_CLASS_ATTRIBUTES Interp_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Interp_obj OBJ_;
		Interp_obj();

	public:
		enum { _hx_ClassId = 0x177bd5fb };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="crowplexus.hscript.Interp")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"crowplexus.hscript.Interp"); }
		static ::hx::ObjectPtr< Interp_obj > __new();
		static ::hx::ObjectPtr< Interp_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Interp_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Interp",f4,ed,1a,d3); }

		 ::haxe::ds::StringMap variables;
		 ::haxe::ds::StringMap imports;
		 ::haxe::ds::StringMap locals;
		 ::haxe::ds::StringMap binops;
		int depth;
		bool inTry;
		::Array< ::Dynamic> declared;
		 ::Dynamic returnValue;
		 ::crowplexus::hscript::Expr curExpr;
		bool showPosOnLog;
		void resetVariables();
		::Dynamic resetVariables_dyn();

		 ::Dynamic posInfos();
		::Dynamic posInfos_dyn();

		void initOps();
		::Dynamic initOps_dyn();

		void setVar(::String name, ::Dynamic v);
		::Dynamic setVar_dyn();

		 ::Dynamic assign( ::crowplexus::hscript::Expr e1, ::crowplexus::hscript::Expr e2);
		::Dynamic assign_dyn();

		void assignOp(::String op, ::Dynamic fop);
		::Dynamic assignOp_dyn();

		 ::Dynamic evalAssignOp(::String op, ::Dynamic fop, ::crowplexus::hscript::Expr e1, ::crowplexus::hscript::Expr e2);
		::Dynamic evalAssignOp_dyn();

		 ::Dynamic increment( ::crowplexus::hscript::Expr e,bool prefix,int delta);
		::Dynamic increment_dyn();

		 ::Dynamic execute( ::crowplexus::hscript::Expr expr);
		::Dynamic execute_dyn();

		 ::Dynamic exprReturn( ::crowplexus::hscript::Expr e);
		::Dynamic exprReturn_dyn();

		 ::haxe::ds::StringMap duplicate( ::haxe::ds::StringMap h);
		::Dynamic duplicate_dyn();

		void restore(int old);
		::Dynamic restore_dyn();

		 ::Dynamic error( ::crowplexus::hscript::ErrorDef e,::hx::Null< bool >  rethrow);
		::Dynamic error_dyn();

		 ::Dynamic warn( ::crowplexus::hscript::ErrorDef e);
		::Dynamic warn_dyn();

		void rethrow( ::Dynamic e);
		::Dynamic rethrow_dyn();

		virtual  ::Dynamic resolve(::String id);
		::Dynamic resolve_dyn();

		 ::Dynamic getOrImportClass(::String name);
		::Dynamic getOrImportClass_dyn();

		 ::Dynamic expr( ::crowplexus::hscript::Expr e);
		::Dynamic expr_dyn();

		void doWhileLoop( ::crowplexus::hscript::Expr econd, ::crowplexus::hscript::Expr e);
		::Dynamic doWhileLoop_dyn();

		void whileLoop( ::crowplexus::hscript::Expr econd, ::crowplexus::hscript::Expr e);
		::Dynamic whileLoop_dyn();

		 ::Dynamic makeIterator( ::Dynamic v);
		::Dynamic makeIterator_dyn();

		void forLoop(::String n, ::crowplexus::hscript::Expr it, ::crowplexus::hscript::Expr e);
		::Dynamic forLoop_dyn();

		bool isMap( ::Dynamic o);
		::Dynamic isMap_dyn();

		 ::Dynamic getMapValue( ::Dynamic map, ::Dynamic key);
		::Dynamic getMapValue_dyn();

		void setMapValue( ::Dynamic map, ::Dynamic key, ::Dynamic value);
		::Dynamic setMapValue_dyn();

		 ::Dynamic get( ::Dynamic o,::String f);
		::Dynamic get_dyn();

		 ::Dynamic set( ::Dynamic o,::String f, ::Dynamic v);
		::Dynamic set_dyn();

		 ::crowplexus::iris::utils::UsingEntry registerUsingLocal(::String name, ::Dynamic call);
		::Dynamic registerUsingLocal_dyn();

		void useUsing(::String name);
		::Dynamic useUsing_dyn();

		::Array< ::Dynamic> usings;
		virtual  ::Dynamic fcall( ::Dynamic o,::String f,::cpp::VirtualArray args);
		::Dynamic fcall_dyn();

		 ::Dynamic call( ::Dynamic o, ::Dynamic f,::cpp::VirtualArray args);
		::Dynamic call_dyn();

		 ::Dynamic cnew(::String cl,::cpp::VirtualArray args);
		::Dynamic cnew_dyn();

};

} // end namespace crowplexus
} // end namespace hscript

#endif /* INCLUDED_crowplexus_hscript_Interp */ 
