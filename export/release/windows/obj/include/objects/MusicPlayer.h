// Generated by Haxe 4.3.4
#ifndef INCLUDED_objects_MusicPlayer
#define INCLUDED_objects_MusicPlayer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
HX_DECLARE_CLASS1(backend,Controls)
HX_DECLARE_CLASS1(backend,MusicBeatState)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,ui,FlxBar)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(objects,MusicPlayer)
HX_DECLARE_CLASS1(states,FreeplayState)

namespace objects{


class HXCPP_CLASS_ATTRIBUTES MusicPlayer_obj : public  ::flixel::group::FlxTypedGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedGroup_obj super;
		typedef MusicPlayer_obj OBJ_;
		MusicPlayer_obj();

	public:
		enum { _hx_ClassId = 0x65724c72 };

		void __construct( ::states::FreeplayState instance);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="objects.MusicPlayer")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"objects.MusicPlayer"); }
		static ::hx::ObjectPtr< MusicPlayer_obj > __new( ::states::FreeplayState instance);
		static ::hx::ObjectPtr< MusicPlayer_obj > __alloc(::hx::Ctx *_hx_ctx, ::states::FreeplayState instance);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MusicPlayer_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MusicPlayer",c6,51,2c,5e); }

		 ::states::FreeplayState instance;
		 ::backend::Controls controls;
		bool playingMusic;
		Float curTime;
		 ::flixel::FlxSprite songBG;
		 ::flixel::text::FlxText songTxt;
		 ::flixel::text::FlxText timeTxt;
		 ::flixel::ui::FlxBar progressBar;
		 ::flixel::FlxSprite playbackBG;
		::Array< ::Dynamic> playbackSymbols;
		 ::flixel::text::FlxText playbackTxt;
		bool wasPlaying;
		Float holdPitchTime;
		Float playbackRate;
		void update(Float elapsed);

		void setVocalsTime(Float time);
		::Dynamic setVocalsTime_dyn();

		void pauseOrResume(::hx::Null< bool >  resume);
		::Dynamic pauseOrResume_dyn();

		void switchPlayMusic();
		::Dynamic switchPlayMusic_dyn();

		void updatePlaybackTxt();
		::Dynamic updatePlaybackTxt_dyn();

		void positionSong();
		::Dynamic positionSong_dyn();

		void updateTimeTxt();
		::Dynamic updateTimeTxt_dyn();

		void setPlaybackRate();
		::Dynamic setPlaybackRate_dyn();

		bool get_playing();
		::Dynamic get_playing_dyn();

		Float set_playbackRate(Float value);
		::Dynamic set_playbackRate_dyn();

};

} // end namespace objects

#endif /* INCLUDED_objects_MusicPlayer */ 
