// Generated by Haxe 4.3.4
#ifndef INCLUDED_objects_NoteSplash
#define INCLUDED_objects_NoteSplash

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(objects,Note)
HX_DECLARE_CLASS1(objects,NoteSplash)
HX_DECLARE_CLASS1(objects,PixelSplashShaderRef)
HX_DECLARE_CLASS1(objects,StrumNote)

namespace objects{


class HXCPP_CLASS_ATTRIBUTES NoteSplash_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef NoteSplash_obj OBJ_;
		NoteSplash_obj();

	public:
		enum { _hx_ClassId = 0x12f691ed };

		void __construct( ::Dynamic __o_x, ::Dynamic __o_y,::String splash);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="objects.NoteSplash")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"objects.NoteSplash"); }
		static ::hx::ObjectPtr< NoteSplash_obj > __new( ::Dynamic __o_x, ::Dynamic __o_y,::String splash);
		static ::hx::ObjectPtr< NoteSplash_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic __o_x, ::Dynamic __o_y,::String splash);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~NoteSplash_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("NoteSplash",19,93,5d,54); }

		static void __boot();
		static ::String defaultNoteSplash;
		static  ::haxe::ds::StringMap configs;
		static Float buggedKillTime;
		static ::String getSplashSkinPostfix();
		static ::Dynamic getSplashSkinPostfix_dyn();

		static  ::Dynamic createConfig();
		static ::Dynamic createConfig_dyn();

		static  ::Dynamic addAnimationToConfig( ::Dynamic config,Float scale,::String name,::String prefix,::Array< int > fps,::Array< Float > offsets,::Array< int > indices,int noteData);
		static ::Dynamic addAnimationToConfig_dyn();

		 ::objects::PixelSplashShaderRef rgbShader;
		::String texture;
		 ::Dynamic config;
		 ::objects::StrumNote babyArrow;
		int noteData;
		bool copyX;
		bool copyY;
		bool inEditor;
		bool spawned;
		 ::haxe::ds::IntMap noteDataMap;
		int maxAnims;
		void loadSplash(::String splash);
		::Dynamic loadSplash_dyn();

		void spawnSplashNote( ::Dynamic x, ::Dynamic y, ::Dynamic noteData, ::objects::Note note, ::Dynamic randomize);
		::Dynamic spawnSplashNote_dyn();

		::String playDefaultAnim();
		::Dynamic playDefaultAnim_dyn();

		bool checkForAnim(::String anim);
		::Dynamic checkForAnim_dyn();

		Float aliveTime;
		void update(Float elapsed);

		 ::Dynamic set_config( ::Dynamic value);
		::Dynamic set_config_dyn();

		int set_maxAnims(int value);
		::Dynamic set_maxAnims_dyn();

};

} // end namespace objects

#endif /* INCLUDED_objects_NoteSplash */ 
