// Generated by Haxe 4.3.4
#ifndef INCLUDED_flxanimate_animate_FlxTimeline
#define INCLUDED_flxanimate_animate_FlxTimeline

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flxanimate,animate,FlxLayer)
HX_DECLARE_CLASS2(flxanimate,animate,FlxSymbol)
HX_DECLARE_CLASS2(flxanimate,animate,FlxTimeline)
HX_DECLARE_CLASS2(flxanimate,interfaces,IFilterable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)

namespace flxanimate{
namespace animate{


class HXCPP_CLASS_ATTRIBUTES FlxTimeline_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FlxTimeline_obj OBJ_;
		FlxTimeline_obj();

	public:
		enum { _hx_ClassId = 0x1c609c21 };

		void __construct(::Array< ::Dynamic> layers);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flxanimate.animate.FlxTimeline")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flxanimate.animate.FlxTimeline"); }
		static ::hx::ObjectPtr< FlxTimeline_obj > __new(::Array< ::Dynamic> layers);
		static ::hx::ObjectPtr< FlxTimeline_obj > __alloc(::hx::Ctx *_hx_ctx,::Array< ::Dynamic> layers);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxTimeline_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("FlxTimeline",f3,48,52,14); }

		static  ::flxanimate::animate::FlxTimeline fromJSON( ::Dynamic timeline);
		static ::Dynamic fromJSON_dyn();

		 ::flxanimate::animate::FlxSymbol _parent;
		::Array< ::Dynamic> _layers;
		int length;
		int totalFrames;
		::Array< ::String > getListNames();
		::Dynamic getListNames_dyn();

		::Array< ::Dynamic> getList();
		::Dynamic getList_dyn();

		 ::flxanimate::animate::FlxLayer get( ::Dynamic name);
		::Dynamic get_dyn();

		void hide( ::Dynamic name);
		::Dynamic hide_dyn();

		void show( ::Dynamic name);
		::Dynamic show_dyn();

		 ::flxanimate::animate::FlxLayer add( ::Dynamic position, ::Dynamic name);
		::Dynamic add_dyn();

		 ::flxanimate::animate::FlxLayer remove( ::Dynamic name);
		::Dynamic remove_dyn();

		void updateRender(Float elapsed,int curFrame, ::haxe::ds::StringMap dictionary, ::Dynamic swfRender);
		::Dynamic updateRender_dyn();

		int get_length();
		::Dynamic get_length_dyn();

		int get_totalFrames();
		::Dynamic get_totalFrames_dyn();

		void destroy();
		::Dynamic destroy_dyn();

};

} // end namespace flxanimate
} // end namespace animate

#endif /* INCLUDED_flxanimate_animate_FlxTimeline */ 
