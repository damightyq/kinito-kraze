// Generated by Haxe 4.3.4
#ifndef INCLUDED_flxanimate_animate_FlxElement
#define INCLUDED_flxanimate_animate_FlxElement

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS2(flixel,math,FlxBasePoint)
HX_DECLARE_CLASS2(flixel,math,FlxMatrix)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS2(flxanimate,animate,FlxElement)
HX_DECLARE_CLASS2(flxanimate,animate,FlxKeyFrame)
HX_DECLARE_CLASS2(flxanimate,animate,SymbolParameters)
HX_DECLARE_CLASS2(flxanimate,interfaces,IFilterable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(openfl,geom,ColorTransform)
HX_DECLARE_CLASS2(openfl,geom,Matrix)

namespace flxanimate{
namespace animate{


class HXCPP_CLASS_ATTRIBUTES FlxElement_obj : public  ::flixel::FlxObject_obj
{
	public:
		typedef  ::flixel::FlxObject_obj super;
		typedef FlxElement_obj OBJ_;
		FlxElement_obj();

	public:
		enum { _hx_ClassId = 0x080da354 };

		void __construct(::String bitmap, ::flxanimate::animate::SymbolParameters symbol, ::flixel::math::FlxMatrix matrix);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flxanimate.animate.FlxElement")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flxanimate.animate.FlxElement"); }
		static ::hx::ObjectPtr< FlxElement_obj > __new(::String bitmap, ::flxanimate::animate::SymbolParameters symbol, ::flixel::math::FlxMatrix matrix);
		static ::hx::ObjectPtr< FlxElement_obj > __alloc(::hx::Ctx *_hx_ctx,::String bitmap, ::flxanimate::animate::SymbolParameters symbol, ::flixel::math::FlxMatrix matrix);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxElement_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("FlxElement",8a,68,80,35); }

		static  ::flxanimate::animate::FlxElement fromJSON( ::Dynamic element);
		static ::Dynamic fromJSON_dyn();

		 ::flxanimate::animate::FlxKeyFrame _parent;
		 ::flxanimate::animate::SymbolParameters symbol;
		::String bitmap;
		 ::flixel::math::FlxMatrix matrix;
		 ::flixel::math::FlxMatrix _matrix;
		 ::openfl::geom::ColorTransform _color;
		 ::flixel::math::FlxBasePoint _scrollF;
		virtual ::String toString();

		void destroy();

		::String set_bitmap(::String value);
		::Dynamic set_bitmap_dyn();

		 ::flixel::math::FlxMatrix set_matrix( ::flixel::math::FlxMatrix value);
		::Dynamic set_matrix_dyn();

		void updateRender(Float elapsed,int curFrame, ::haxe::ds::StringMap dictionary, ::Dynamic swfRender);
		::Dynamic updateRender_dyn();

};

} // end namespace flxanimate
} // end namespace animate

#endif /* INCLUDED_flxanimate_animate_FlxElement */ 
