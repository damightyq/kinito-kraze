// Generated by Haxe 4.3.4
#ifndef INCLUDED_flxanimate_animate_FlxAnim
#define INCLUDED_flxanimate_animate_FlxAnim

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxSignal)
HX_DECLARE_CLASS3(flixel,util,_FlxSignal,FlxBaseSignal)
HX_DECLARE_CLASS3(flixel,util,_FlxSignal,FlxSignal0)
HX_DECLARE_CLASS3(flixel,util,_FlxSignal,FlxSignal1)
HX_DECLARE_CLASS1(flxanimate,FlxAnimate)
HX_DECLARE_CLASS2(flxanimate,animate,FlxAnim)
HX_DECLARE_CLASS2(flxanimate,animate,FlxElement)
HX_DECLARE_CLASS2(flxanimate,animate,FlxKeyFrame)
HX_DECLARE_CLASS2(flxanimate,animate,FlxMetaData)
HX_DECLARE_CLASS2(flxanimate,animate,FlxSymbol)
HX_DECLARE_CLASS2(flxanimate,animate,FlxTimeline)
HX_DECLARE_CLASS2(flxanimate,data,Loop)
HX_DECLARE_CLASS2(flxanimate,data,SymbolT)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)

namespace flxanimate{
namespace animate{


class HXCPP_CLASS_ATTRIBUTES FlxAnim_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FlxAnim_obj OBJ_;
		FlxAnim_obj();

	public:
		enum { _hx_ClassId = 0x62c763b1 };

		void __construct( ::flxanimate::FlxAnimate parent, ::Dynamic coolParsed);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flxanimate.animate.FlxAnim")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flxanimate.animate.FlxAnim"); }
		static ::hx::ObjectPtr< FlxAnim_obj > __new( ::flxanimate::FlxAnimate parent, ::Dynamic coolParsed);
		static ::hx::ObjectPtr< FlxAnim_obj > __alloc(::hx::Ctx *_hx_ctx, ::flxanimate::FlxAnimate parent, ::Dynamic coolParsed);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxAnim_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("FlxAnim",83,bf,c9,d0); }

		 ::flxanimate::animate::FlxElement stageInstance;
		 ::flxanimate::animate::FlxElement curInstance;
		 ::flxanimate::animate::FlxMetaData metadata;
		 ::flxanimate::animate::FlxSymbol curSymbol;
		bool finished;
		 ::haxe::ds::StringMap symbolDictionary;
		bool swfRender;
		 ::haxe::ds::StringMap buttonMap;
		bool isPlaying;
		 ::flixel::util::_FlxSignal::FlxSignal0 onComplete;
		 ::flixel::util::_FlxSignal::FlxSignal1 onFrame;
		Float framerate;
		Float frameDelay;
		 ::haxe::ds::StringMap animsMap;
		Float timeScale;
		 ::flxanimate::FlxAnimate _parent;
		Float _tick;
		void _loadAtlas( ::Dynamic animationFile);
		::Dynamic _loadAtlas_dyn();

		void play(::String Name, ::Dynamic Force, ::Dynamic Reverse, ::Dynamic Frame);
		::Dynamic play_dyn();

		void playElement( ::flxanimate::animate::FlxElement element, ::Dynamic Force, ::Dynamic Reverse, ::Dynamic Frame);
		::Dynamic playElement_dyn();

		void pause();
		::Dynamic pause_dyn();

		void stop();
		::Dynamic stop_dyn();

		void finish();
		::Dynamic finish_dyn();

		void resume();
		::Dynamic resume_dyn();

		void setSymbols( ::Dynamic Anim);
		::Dynamic setSymbols_dyn();

		void update(Float elapsed);
		::Dynamic update_dyn();

		bool get_finished();
		::Dynamic get_finished_dyn();

		int get_curFrame();
		::Dynamic get_curFrame_dyn();

		int set_curFrame(int Value);
		::Dynamic set_curFrame_dyn();

		void addBySymbol(::String Name,::String SymbolName,::hx::Null< Float >  FrameRate,::hx::Null< bool >  Looped,::hx::Null< Float >  X,::hx::Null< Float >  Y);
		::Dynamic addBySymbol_dyn();

		bool startsWith(::String reference,::String string);
		::Dynamic startsWith_dyn();

		void addByAnimIndices(::String Name,::Array< int > Indices,::hx::Null< Float >  FrameRate);
		::Dynamic addByAnimIndices_dyn();

		void addByFrameLabel(::String Name,::String FrameLabel,::hx::Null< Float >  FrameRate,::hx::Null< bool >  Looped,::hx::Null< Float >  X,::hx::Null< Float >  Y);
		::Dynamic addByFrameLabel_dyn();

		void addBySymbolIndices(::String Name,::String SymbolName,::Array< int > Indices,::hx::Null< Float >  FrameRate,::hx::Null< bool >  Looped,::hx::Null< Float >  X,::hx::Null< Float >  Y);
		::Dynamic addBySymbolIndices_dyn();

		Float set_framerate(Float value);
		::Dynamic set_framerate_dyn();

		void addByCustomTimeline(::String Name, ::flxanimate::animate::FlxTimeline Timeline,::hx::Null< Float >  FrameRate,::hx::Null< bool >  Looped);
		::Dynamic addByCustomTimeline_dyn();

		int get_length();
		::Dynamic get_length_dyn();

		 ::flxanimate::animate::FlxKeyFrame getFrameLabel(::String name, ::Dynamic layer);
		::Dynamic getFrameLabel_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		void goToFrameLabel(::String name, ::Dynamic layer);
		::Dynamic goToFrameLabel_dyn();

		::String getNextToFrameLabel(::String name);
		::Dynamic getNextToFrameLabel_dyn();

		bool addCallbackTo(::String label, ::Dynamic callback);
		::Dynamic addCallbackTo_dyn();

		bool removeCallbackFrom(::String label, ::Dynamic callback);
		::Dynamic removeCallbackFrom_dyn();

		bool removeAllCallbacksFrom(::String label);
		::Dynamic removeAllCallbacksFrom_dyn();

		::Array< ::Dynamic> getFrameLabels( ::Dynamic layer);
		::Dynamic getFrameLabels_dyn();

		 ::flxanimate::data::Loop get_loopType();
		::Dynamic get_loopType_dyn();

		 ::flxanimate::data::Loop set_loopType( ::flxanimate::data::Loop type);
		::Dynamic set_loopType_dyn();

		 ::flxanimate::data::SymbolT get_symbolType();
		::Dynamic get_symbolType_dyn();

		 ::flxanimate::data::SymbolT set_symbolType( ::flxanimate::data::SymbolT type);
		::Dynamic set_symbolType_dyn();

		bool get_reversed();
		::Dynamic get_reversed_dyn();

		bool set_reversed(bool value);
		::Dynamic set_reversed_dyn();

		 ::Dynamic getByName(::String name);
		::Dynamic getByName_dyn();

		 ::flxanimate::animate::FlxSymbol getByInstance(::String instance, ::Dynamic frame, ::Dynamic layer);
		::Dynamic getByInstance_dyn();

		 ::flxanimate::animate::FlxSymbol get_curSymbol();
		::Dynamic get_curSymbol_dyn();

		void destroy();
		::Dynamic destroy_dyn();

};

} // end namespace flxanimate
} // end namespace animate

#endif /* INCLUDED_flxanimate_animate_FlxAnim */ 
