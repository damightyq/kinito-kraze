// Generated by Haxe 4.3.4
#ifndef INCLUDED_flxanimate_animate_FlxSymbol
#define INCLUDED_flxanimate_animate_FlxSymbol

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flxanimate,animate,FlxElement)
HX_DECLARE_CLASS2(flxanimate,animate,FlxKeyFrame)
HX_DECLARE_CLASS2(flxanimate,animate,FlxSymbol)
HX_DECLARE_CLASS2(flxanimate,animate,FlxTimeline)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace flxanimate{
namespace animate{


class HXCPP_CLASS_ATTRIBUTES FlxSymbol_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FlxSymbol_obj OBJ_;
		FlxSymbol_obj();

	public:
		enum { _hx_ClassId = 0x4ab655c0 };

		void __construct(::String name, ::flxanimate::animate::FlxTimeline timeline);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flxanimate.animate.FlxSymbol")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flxanimate.animate.FlxSymbol"); }
		static ::hx::ObjectPtr< FlxSymbol_obj > __new(::String name, ::flxanimate::animate::FlxTimeline timeline);
		static ::hx::ObjectPtr< FlxSymbol_obj > __alloc(::hx::Ctx *_hx_ctx,::String name, ::flxanimate::animate::FlxTimeline timeline);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxSymbol_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("FlxSymbol",4a,a9,cc,70); }

		 ::haxe::ds::ObjectMap filterPool;
		 ::openfl::display::Sprite _sprite;
		bool _checking;
		int activeCount;
		::Array< ::Dynamic> _sprites;
		 ::flxanimate::animate::FlxTimeline timeline;
		int length;
		::String name;
		 ::haxe::ds::StringMap labels;
		 ::Dynamic onCallback;
		Dynamic onCallback_dyn() { return onCallback;}
		::Array< ::String > layers;
		int _curFrame;
		Float _tick;
		void hideLayer(::String layer);
		::Dynamic hideLayer_dyn();

		void showLayer(::String layer);
		::Dynamic showLayer_dyn();

		bool addCallbackTo(::String label, ::Dynamic callback, ::Dynamic layer);
		::Dynamic addCallbackTo_dyn();

		 ::Dynamic getCallbackFrom(::String label, ::Dynamic callback, ::Dynamic layer);
		::Dynamic getCallbackFrom_dyn();

		bool removeCallbackFrom(::String label, ::Dynamic callback, ::Dynamic layer);
		::Dynamic removeCallbackFrom_dyn();

		bool removeAllCallbacksFrom(::String label, ::Dynamic layer);
		::Dynamic removeAllCallbacksFrom_dyn();

		void destroy();
		::Dynamic destroy_dyn();

		 ::flxanimate::animate::FlxKeyFrame getNextToFrameLabel(::String label, ::Dynamic layer);
		::Dynamic getNextToFrameLabel_dyn();

		 ::flxanimate::animate::FlxKeyFrame getFrameLabel(::String name, ::Dynamic layer);
		::Dynamic getFrameLabel_dyn();

		void updateRender(Float elapsed,int curFrame, ::haxe::ds::StringMap dictionary, ::Dynamic swfRender);
		::Dynamic updateRender_dyn();

		 ::flxanimate::animate::FlxElement getElement(int index, ::Dynamic frame);
		::Dynamic getElement_dyn();

		::Array< ::Dynamic> getFrameLabels( ::Dynamic layer);
		::Dynamic getFrameLabels_dyn();

		::Array< ::String > getFrameLabelNames( ::Dynamic layer);
		::Dynamic getFrameLabelNames_dyn();

		 ::flxanimate::animate::FlxElement getElementByName(::String name, ::Dynamic frame, ::Dynamic layer);
		::Dynamic getElementByName_dyn();

		int getElementIndex( ::flxanimate::animate::FlxElement element, ::Dynamic frame);
		::Dynamic getElementIndex_dyn();

		void swapElements( ::flxanimate::animate::FlxElement oldElement, ::flxanimate::animate::FlxElement newElement, ::Dynamic frame);
		::Dynamic swapElements_dyn();

		void fireCallbacks( ::Dynamic frame);
		::Dynamic fireCallbacks_dyn();

		int get_length();
		::Dynamic get_length_dyn();

		::Array< ::String > get_layers();
		::Dynamic get_layers_dyn();

		int get_curFrame();
		::Dynamic get_curFrame_dyn();

		int set_curFrame(int value);
		::Dynamic set_curFrame_dyn();

};

} // end namespace flxanimate
} // end namespace animate

#endif /* INCLUDED_flxanimate_animate_FlxSymbol */ 
