// Generated by Haxe 4.3.4
#ifndef INCLUDED_flxanimate_filters_BevelFilter
#define INCLUDED_flxanimate_filters_BevelFilter

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
HX_DECLARE_CLASS2(flxanimate,filters,BevelFilter)
HX_DECLARE_CLASS3(flxanimate,filters,_BevelFilter,BevelShader)
HX_DECLARE_CLASS3(flxanimate,filters,_BevelFilter,CombineShader)
HX_DECLARE_CLASS3(flxanimate,filters,_BevelFilter,FullCombineShader)
HX_DECLARE_CLASS3(flxanimate,filters,_BevelFilter,InnerCombineShader)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectRenderer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,Shader)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,filters,BitmapFilter)
HX_DECLARE_CLASS2(openfl,filters,BitmapFilterShader)

namespace flxanimate{
namespace filters{


class HXCPP_CLASS_ATTRIBUTES BevelFilter_obj : public  ::openfl::filters::BitmapFilter_obj
{
	public:
		typedef  ::openfl::filters::BitmapFilter_obj super;
		typedef BevelFilter_obj OBJ_;
		BevelFilter_obj();

	public:
		enum { _hx_ClassId = 0x7a9caf86 };

		void __construct(::hx::Null< Float >  __o_distance,::hx::Null< Float >  __o_angle,::hx::Null< int >  __o_highlightColor,::hx::Null< Float >  __o_highlightAlpha,::hx::Null< int >  __o_shadowColor,::hx::Null< Float >  __o_shadowAlpha,::hx::Null< Float >  __o_blurX,::hx::Null< Float >  __o_blurY,::hx::Null< Float >  __o_strength,::hx::Null< int >  __o_quality,::String __o_type,::hx::Null< bool >  __o_knockout);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flxanimate.filters.BevelFilter")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flxanimate.filters.BevelFilter"); }
		static ::hx::ObjectPtr< BevelFilter_obj > __new(::hx::Null< Float >  __o_distance,::hx::Null< Float >  __o_angle,::hx::Null< int >  __o_highlightColor,::hx::Null< Float >  __o_highlightAlpha,::hx::Null< int >  __o_shadowColor,::hx::Null< Float >  __o_shadowAlpha,::hx::Null< Float >  __o_blurX,::hx::Null< Float >  __o_blurY,::hx::Null< Float >  __o_strength,::hx::Null< int >  __o_quality,::String __o_type,::hx::Null< bool >  __o_knockout);
		static ::hx::ObjectPtr< BevelFilter_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_distance,::hx::Null< Float >  __o_angle,::hx::Null< int >  __o_highlightColor,::hx::Null< Float >  __o_highlightAlpha,::hx::Null< int >  __o_shadowColor,::hx::Null< Float >  __o_shadowAlpha,::hx::Null< Float >  __o_blurX,::hx::Null< Float >  __o_blurY,::hx::Null< Float >  __o_strength,::hx::Null< int >  __o_quality,::String __o_type,::hx::Null< bool >  __o_knockout);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BevelFilter_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BevelFilter",b2,0b,be,27); }

		static void __boot();
		static  ::flxanimate::filters::_BevelFilter::FullCombineShader _hx___fullCombineShader;
		static  ::flxanimate::filters::_BevelFilter::InnerCombineShader _hx___innerCombineShader;
		static  ::flxanimate::filters::_BevelFilter::CombineShader _hx___combineShader;
		Float _hx___angle;
		Float _hx___blurX;
		Float _hx___blurY;
		Float _hx___distance;
		Float _hx___highlightAlpha;
		int _hx___highlightColor;
		bool _hx___knockout;
		int _hx___quality;
		Float _hx___shadowAlpha;
		int _hx___shadowColor;
		Float _hx___strength;
		::String _hx___type;
		int _hx___horizontalPasses;
		Float _hx___offsetX;
		Float _hx___offsetY;
		int _hx___verticalPasses;
		 ::openfl::filters::BitmapFilter clone();

		 ::openfl::display::Shader _hx___initShader( ::openfl::display::DisplayObjectRenderer renderer,int pass, ::openfl::display::BitmapData sourceBitmapData);

		void _hx___updateSize();
		::Dynamic _hx___updateSize_dyn();

		void _hx___calculateNumShaderPasses();
		::Dynamic _hx___calculateNumShaderPasses_dyn();

		Float get_angle();
		::Dynamic get_angle_dyn();

		Float set_angle(Float value);
		::Dynamic set_angle_dyn();

		Float get_blurX();
		::Dynamic get_blurX_dyn();

		Float set_blurX(Float value);
		::Dynamic set_blurX_dyn();

		Float get_blurY();
		::Dynamic get_blurY_dyn();

		Float set_blurY(Float value);
		::Dynamic set_blurY_dyn();

		Float get_distance();
		::Dynamic get_distance_dyn();

		Float set_distance(Float value);
		::Dynamic set_distance_dyn();

		Float get_highlightAlpha();
		::Dynamic get_highlightAlpha_dyn();

		Float set_highlightAlpha(Float value);
		::Dynamic set_highlightAlpha_dyn();

		int get_highlightColor();
		::Dynamic get_highlightColor_dyn();

		int set_highlightColor(int value);
		::Dynamic set_highlightColor_dyn();

		bool get_knockout();
		::Dynamic get_knockout_dyn();

		bool set_knockout(bool value);
		::Dynamic set_knockout_dyn();

		int get_quality();
		::Dynamic get_quality_dyn();

		int set_quality(int value);
		::Dynamic set_quality_dyn();

		Float get_shadowAlpha();
		::Dynamic get_shadowAlpha_dyn();

		Float set_shadowAlpha(Float value);
		::Dynamic set_shadowAlpha_dyn();

		int get_shadowColor();
		::Dynamic get_shadowColor_dyn();

		int set_shadowColor(int value);
		::Dynamic set_shadowColor_dyn();

		Float get_strength();
		::Dynamic get_strength_dyn();

		Float set_strength(Float value);
		::Dynamic set_strength_dyn();

		::String get_type();
		::Dynamic get_type_dyn();

		::String set_type(::String value);
		::Dynamic set_type_dyn();

};

} // end namespace flxanimate
} // end namespace filters

#endif /* INCLUDED_flxanimate_filters_BevelFilter */ 
