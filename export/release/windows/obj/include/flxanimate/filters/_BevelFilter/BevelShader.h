// Generated by Haxe 4.3.4
#ifndef INCLUDED_flxanimate_filters__BevelFilter_BevelShader
#define INCLUDED_flxanimate_filters__BevelFilter_BevelShader

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_filters_BitmapFilterShader
#include <openfl/filters/BitmapFilterShader.h>
#endif
HX_DECLARE_CLASS3(flxanimate,filters,_BevelFilter,BevelShader)
HX_DECLARE_CLASS2(openfl,display,Shader)
HX_DECLARE_CLASS2(openfl,display,ShaderInput_openfl_display_BitmapData)
HX_DECLARE_CLASS2(openfl,display,ShaderParameter_Float)
HX_DECLARE_CLASS2(openfl,display,ShaderParameter_Int)
HX_DECLARE_CLASS2(openfl,filters,BitmapFilterShader)

namespace flxanimate{
namespace filters{
namespace _BevelFilter{


class HXCPP_CLASS_ATTRIBUTES BevelShader_obj : public  ::openfl::filters::BitmapFilterShader_obj
{
	public:
		typedef  ::openfl::filters::BitmapFilterShader_obj super;
		typedef BevelShader_obj OBJ_;
		BevelShader_obj();

	public:
		enum { _hx_ClassId = 0x02778b94 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flxanimate.filters._BevelFilter.BevelShader")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flxanimate.filters._BevelFilter.BevelShader"); }
		static ::hx::ObjectPtr< BevelShader_obj > __new();
		static ::hx::ObjectPtr< BevelShader_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BevelShader_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BevelShader",1f,ab,a9,bf); }

		 ::openfl::display::ShaderParameter_Float offset;
		 ::openfl::display::ShaderParameter_Float uColorH;
		 ::openfl::display::ShaderParameter_Float uColorS;
		 ::openfl::display::ShaderParameter_Float uStrength;
		 ::openfl::display::ShaderParameter_Int knockout;
		 ::openfl::display::ShaderInput_openfl_display_BitmapData sourceBitmap;
};

} // end namespace flxanimate
} // end namespace filters
} // end namespace _BevelFilter

#endif /* INCLUDED_flxanimate_filters__BevelFilter_BevelShader */ 
