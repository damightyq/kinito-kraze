// Generated by Haxe 4.3.4
#ifndef INCLUDED_flxanimate_FlxAnimate
#define INCLUDED_flxanimate_FlxAnimate

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxCamera)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,graphics,frames,FlxFrame)
HX_DECLARE_CLASS3(flixel,graphics,frames,FlxFramesCollection)
HX_DECLARE_CLASS2(flixel,math,FlxBasePoint)
HX_DECLARE_CLASS2(flixel,math,FlxMatrix)
HX_DECLARE_CLASS2(flixel,sound,FlxSound)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS1(flxanimate,FlxAnimate)
HX_DECLARE_CLASS2(flxanimate,animate,FlxAnim)
HX_DECLARE_CLASS2(flxanimate,animate,FlxElement)
HX_DECLARE_CLASS2(flxanimate,animate,FlxKeyFrame)
HX_DECLARE_CLASS2(flxanimate,animate,FlxSymbol)
HX_DECLARE_CLASS2(flxanimate,display,FlxAnimateFilterRenderer)
HX_DECLARE_CLASS2(flxanimate,interfaces,IFilterable)
HX_DECLARE_CLASS2(openfl,filters,BitmapFilter)
HX_DECLARE_CLASS2(openfl,geom,ColorTransform)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace flxanimate{


class HXCPP_CLASS_ATTRIBUTES FlxAnimate_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef FlxAnimate_obj OBJ_;
		FlxAnimate_obj();

	public:
		enum { _hx_ClassId = 0x0943d942 };

		void __construct(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::String Path, ::Dynamic Settings);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flxanimate.FlxAnimate")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flxanimate.FlxAnimate"); }
		static ::hx::ObjectPtr< FlxAnimate_obj > __new(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::String Path, ::Dynamic Settings);
		static ::hx::ObjectPtr< FlxAnimate_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::String Path, ::Dynamic Settings);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxAnimate_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxAnimate",6f,94,78,a9); }

		static void fromSettings();
		static ::Dynamic fromSettings_dyn();

		 ::flxanimate::animate::FlxAnim anim;
		 ::openfl::geom::Rectangle rect;
		::Array< ::Dynamic> _symbols;
		::Array< ::Dynamic> filters;
		bool showPivot;
		 ::flixel::graphics::frames::FlxFrame _pivot;
		 ::flixel::graphics::frames::FlxFrame _indicator;
		 ::flxanimate::display::FlxAnimateFilterRenderer renderer;
		 ::flixel::FlxCamera filterCamera;
		Float relativeX;
		Float relativeY;
		void loadAtlas(::String Path);
		::Dynamic loadAtlas_dyn();

		void loadSeparateAtlas(::String animation, ::flixel::graphics::frames::FlxFramesCollection frames);
		::Dynamic loadSeparateAtlas_dyn();

		virtual void draw();

		int st;
		void parseElement( ::flxanimate::animate::FlxElement instance, ::flixel::math::FlxMatrix m, ::openfl::geom::ColorTransform colorFilter, ::Dynamic filterInstance,::Array< ::Dynamic> cameras, ::flixel::math::FlxBasePoint scrollFactor);
		::Dynamic parseElement_dyn();

		void renderLayer( ::flxanimate::animate::FlxKeyFrame frame, ::flixel::math::FlxMatrix matrix, ::openfl::geom::ColorTransform colorEffect, ::Dynamic instance,::Array< ::Dynamic> cameras);
		::Dynamic renderLayer_dyn();

		void renderFilter(::Dynamic filterInstance,::Array< ::Dynamic> filters, ::flxanimate::display::FlxAnimateFilterRenderer renderer, ::flixel::FlxCamera mask);
		::Dynamic renderFilter_dyn();

		bool pressed;
		int setButtonFrames(int frame);
		::Dynamic setButtonFrames_dyn();

		 ::flixel::math::FlxMatrix _mat;
		void drawLimb( ::flixel::graphics::frames::FlxFrame limb, ::flixel::math::FlxMatrix _matrix, ::openfl::geom::ColorTransform colorTransform,::hx::Null< bool >  filterin, ::Dynamic blendMode, ::flixel::math::FlxBasePoint scrollFactor,::Array< ::Dynamic> cameras);
		::Dynamic drawLimb_dyn();

		bool limbOnScreen( ::flixel::graphics::frames::FlxFrame limb, ::flixel::math::FlxMatrix m, ::flixel::FlxCamera Camera);
		::Dynamic limbOnScreen_dyn();

		virtual void destroy();

		void updateAnimation(Float elapsed);

		void setButtonPack(::String button, ::Dynamic callbacks, ::flixel::sound::FlxSound sound);
		::Dynamic setButtonPack_dyn();

		bool set_showPivot(bool value);
		::Dynamic set_showPivot_dyn();

		void setTheSettings( ::Dynamic Settings);
		::Dynamic setTheSettings_dyn();

		::String atlasSetting(::String Path);
		::Dynamic atlasSetting_dyn();

};

} // end namespace flxanimate

#endif /* INCLUDED_flxanimate_FlxAnimate */ 
