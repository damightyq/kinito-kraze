// Generated by Haxe 4.3.4
#ifndef INCLUDED_flxanimate_data_AnimationData
#define INCLUDED_flxanimate_data_AnimationData

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(flxanimate,data,AnimationData)
HX_DECLARE_CLASS2(flxanimate,data,ColorEffect)
HX_DECLARE_CLASS2(flxanimate,effects,FlxColorEffect)
HX_DECLARE_CLASS2(openfl,filters,BitmapFilter)

namespace flxanimate{
namespace data{


class HXCPP_CLASS_ATTRIBUTES AnimationData_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef AnimationData_obj OBJ_;
		AnimationData_obj();

	public:
		enum { _hx_ClassId = 0x0c259335 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="flxanimate.data.AnimationData")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"flxanimate.data.AnimationData"); }

		inline static ::hx::ObjectPtr< AnimationData_obj > __new() {
			::hx::ObjectPtr< AnimationData_obj > __this = new AnimationData_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< AnimationData_obj > __alloc(::hx::Ctx *_hx_ctx) {
			AnimationData_obj *__this = (AnimationData_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AnimationData_obj), false, "flxanimate.data.AnimationData"));
			*(void **)__this = AnimationData_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~AnimationData_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("AnimationData",2e,93,9f,7c); }

		static  ::Dynamic setFieldBool( ::Dynamic abstracto,::Array< ::String > things, ::Dynamic set);
		static ::Dynamic setFieldBool_dyn();

		static  ::flxanimate::data::ColorEffect fromColorJson( ::Dynamic effect);
		static ::Dynamic fromColorJson_dyn();

		static  ::Dynamic colorFromString(::String color);
		static ::Dynamic colorFromString_dyn();

		static ::Array< ::Dynamic> fromFilterJson( ::Dynamic filters);
		static ::Dynamic fromFilterJson_dyn();

		static  ::flxanimate::effects::FlxColorEffect parseColorEffect( ::flxanimate::data::ColorEffect colorEffect);
		static ::Dynamic parseColorEffect_dyn();

};

} // end namespace flxanimate
} // end namespace data

#endif /* INCLUDED_flxanimate_data_AnimationData */ 
