// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_objects_VideoSprite
#include <objects/VideoSprite.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_935a2b3141f963dd_9_new,"objects.VideoSprite","new",0x6018c018,"objects.VideoSprite.new","objects/VideoSprite.hx",9,0x2e186a19)
namespace objects{

void VideoSprite_obj::__construct( ::Dynamic X, ::Dynamic Y, ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_935a2b3141f963dd_9_new)
HXDLIN(   9)		super::__construct(X,Y,MaxSize);
            	}

Dynamic VideoSprite_obj::__CreateEmpty() { return new VideoSprite_obj; }

void *VideoSprite_obj::_hx_vtable = 0;

Dynamic VideoSprite_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VideoSprite_obj > _hx_result = new VideoSprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool VideoSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x288ce903) {
			if (inClassId<=(int)0x27b6056c) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x27b6056c;
			} else {
				return inClassId==(int)0x288ce903;
			}
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}


::hx::ObjectPtr< VideoSprite_obj > VideoSprite_obj::__new( ::Dynamic X, ::Dynamic Y, ::Dynamic MaxSize) {
	::hx::ObjectPtr< VideoSprite_obj > __this = new VideoSprite_obj();
	__this->__construct(X,Y,MaxSize);
	return __this;
}

::hx::ObjectPtr< VideoSprite_obj > VideoSprite_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic X, ::Dynamic Y, ::Dynamic MaxSize) {
	VideoSprite_obj *__this = (VideoSprite_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VideoSprite_obj), true, "objects.VideoSprite"));
	*(void **)__this = VideoSprite_obj::_hx_vtable;
	__this->__construct(X,Y,MaxSize);
	return __this;
}

VideoSprite_obj::VideoSprite_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *VideoSprite_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *VideoSprite_obj_sStaticStorageInfo = 0;
#endif

::hx::Class VideoSprite_obj::__mClass;

void VideoSprite_obj::__register()
{
	VideoSprite_obj _hx_dummy;
	VideoSprite_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.VideoSprite",26,14,09,24);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< VideoSprite_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VideoSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VideoSprite_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace objects
