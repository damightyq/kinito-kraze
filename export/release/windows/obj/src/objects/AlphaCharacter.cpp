// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_objects_AlphaCharacter
#include <objects/AlphaCharacter.h>
#endif
#ifndef INCLUDED_objects_Alphabet
#include <objects/Alphabet.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0ebe4a949189dc15_272_new,"objects.AlphaCharacter","new",0xef969e57,"objects.AlphaCharacter.new","objects/Alphabet.hx",272,0x083c86d0)
static const Float _hx_array_data_718d26e5_1[] = {
	(Float)0,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_0ebe4a949189dc15_350_setupAlphaCharacter,"objects.AlphaCharacter","setupAlphaCharacter",0x78bc67bf,"objects.AlphaCharacter.setupAlphaCharacter","objects/Alphabet.hx",350,0x083c86d0)
HX_LOCAL_STACK_FRAME(_hx_pos_0ebe4a949189dc15_412_set_image,"objects.AlphaCharacter","set_image",0x807388f5,"objects.AlphaCharacter.set_image","objects/Alphabet.hx",412,0x083c86d0)
HX_LOCAL_STACK_FRAME(_hx_pos_0ebe4a949189dc15_442_updateLetterOffset,"objects.AlphaCharacter","updateLetterOffset",0xb95f24ab,"objects.AlphaCharacter.updateLetterOffset","objects/Alphabet.hx",442,0x083c86d0)
HX_LOCAL_STACK_FRAME(_hx_pos_0ebe4a949189dc15_473_updateHitbox,"objects.AlphaCharacter","updateHitbox",0x9940cfaa,"objects.AlphaCharacter.updateHitbox","objects/Alphabet.hx",473,0x083c86d0)
HX_LOCAL_STACK_FRAME(_hx_pos_0ebe4a949189dc15_283_loadAlphabetData,"objects.AlphaCharacter","loadAlphabetData",0x47f4df6c,"objects.AlphaCharacter.loadAlphabetData","objects/Alphabet.hx",283,0x083c86d0)
HX_LOCAL_STACK_FRAME(_hx_pos_0ebe4a949189dc15_402_isTypeAlphabet,"objects.AlphaCharacter","isTypeAlphabet",0x6db66c00,"objects.AlphaCharacter.isTypeAlphabet","objects/Alphabet.hx",402,0x083c86d0)
namespace objects{

void AlphaCharacter_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_0ebe4a949189dc15_272_new)
HXLINE( 348)		this->curLetter = null();
HXLINE( 340)		this->character = HX_("?",3f,00,00,00);
HXLINE( 339)		this->rowWidth = ((Float)0);
HXLINE( 338)		this->row = 0;
HXLINE( 336)		this->letterOffset = ::Array_obj< Float >::fromData( _hx_array_data_718d26e5_1,2);
HXLINE( 335)		this->alignOffset = ((Float)0);
HXLINE( 343)		super::__construct(this->x,this->y,null());
HXLINE( 344)		this->set_image(HX_("alphabet",b3,7c,38,21));
HXLINE( 345)		this->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
            	}

Dynamic AlphaCharacter_obj::__CreateEmpty() { return new AlphaCharacter_obj; }

void *AlphaCharacter_obj::_hx_vtable = 0;

Dynamic AlphaCharacter_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AlphaCharacter_obj > _hx_result = new AlphaCharacter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AlphaCharacter_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7c11c55f) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x7c11c55f;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void AlphaCharacter_obj::setupAlphaCharacter(Float x,Float y,::String character, ::Dynamic bold){
            	HX_STACKFRAME(&_hx_pos_0ebe4a949189dc15_350_setupAlphaCharacter)
HXLINE( 351)		this->set_x(x);
HXLINE( 352)		this->set_y(y);
HXLINE( 354)		if (::hx::IsNotNull( this->parent )) {
HXLINE( 356)			if (::hx::IsNull( bold )) {
HXLINE( 357)				bold = this->parent->bold;
            			}
HXLINE( 358)			this->scale->set_x(this->parent->scaleX);
HXLINE( 359)			this->scale->set_y(this->parent->scaleY);
            		}
HXLINE( 362)		if (::hx::IsNotNull( character )) {
HXLINE( 364)			this->character = character;
HXLINE( 365)			this->curLetter = null();
HXLINE( 366)			::String lowercase = this->character.toLowerCase();
HXLINE( 367)			if (::objects::AlphaCharacter_obj::allLetters->exists(lowercase)) {
HXLINE( 367)				this->curLetter = ::objects::AlphaCharacter_obj::allLetters->get(lowercase);
            			}
            			else {
HXLINE( 368)				this->curLetter = ::objects::AlphaCharacter_obj::allLetters->get(HX_("?",3f,00,00,00));
            			}
HXLINE( 370)			::String postfix = HX_("",00,00,00,00);
HXLINE( 371)			if (!(( (bool)(bold) ))) {
HXLINE( 373)				if (::objects::AlphaCharacter_obj::isTypeAlphabet(lowercase)) {
HXLINE( 375)					if ((lowercase != this->character)) {
HXLINE( 376)						postfix = HX_(" uppercase",f2,8c,8d,f0);
            					}
            					else {
HXLINE( 378)						postfix = HX_(" lowercase",11,a9,f4,6f);
            					}
            				}
            				else {
HXLINE( 380)					postfix = HX_(" normal",47,4a,18,63);
            				}
            			}
            			else {
HXLINE( 382)				postfix = HX_(" bold",a5,11,ee,ad);
            			}
HXLINE( 384)			::String alphaAnim = lowercase;
HXLINE( 385)			bool _hx_tmp;
HXDLIN( 385)			if (::hx::IsNotNull( this->curLetter )) {
HXLINE( 385)				_hx_tmp = ::hx::IsNotNull( this->curLetter->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic) );
            			}
            			else {
HXLINE( 385)				_hx_tmp = false;
            			}
HXDLIN( 385)			if (_hx_tmp) {
HXLINE( 385)				alphaAnim = ( (::String)(this->curLetter->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) );
            			}
HXLINE( 387)			::String anim = (alphaAnim + postfix);
HXLINE( 388)			this->animation->addByPrefix(anim,anim,24,null(),null(),null());
HXLINE( 389)			this->animation->play(anim,true,null(),null());
HXLINE( 390)			if (::hx::IsNull( this->animation->_curAnim )) {
HXLINE( 392)				if ((postfix != HX_(" bold",a5,11,ee,ad))) {
HXLINE( 392)					postfix = HX_(" normal",47,4a,18,63);
            				}
HXLINE( 393)				anim = (HX_("question",26,9b,b0,26) + postfix);
HXLINE( 394)				this->animation->addByPrefix(anim,anim,24,null(),null(),null());
HXLINE( 395)				this->animation->play(anim,true,null(),null());
            			}
            		}
HXLINE( 398)		this->updateHitbox();
            	}


HX_DEFINE_DYNAMIC_FUNC4(AlphaCharacter_obj,setupAlphaCharacter,(void))

::String AlphaCharacter_obj::set_image(::String name){
            	HX_STACKFRAME(&_hx_pos_0ebe4a949189dc15_412_set_image)
HXLINE( 413)		if (::hx::IsNull( this->frames )) {
HXLINE( 415)			this->image = name;
HXLINE( 416)			::String parentFolder = null();
HXDLIN( 416)			if ((name.indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE( 416)				::haxe::Log_obj::trace(name, ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            					->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder)->init(1,true))
            					->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            					->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            					->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            			}
HXDLIN( 416)			 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(name,parentFolder,true);
HXDLIN( 416)			bool xmlExists = false;
HXDLIN( 416)			::String xml = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + name) + HX_(".xml",69,3e,c3,1e)));
HXDLIN( 416)			if (::sys::FileSystem_obj::exists(xml)) {
HXLINE( 416)				xmlExists = true;
            			}
HXDLIN( 416)			 ::Dynamic _hx_tmp;
HXDLIN( 416)			if (xmlExists) {
HXLINE( 416)				_hx_tmp = ::sys::io::File_obj::getContent(xml);
            			}
            			else {
HXLINE( 416)				::String key = (HX_("images/",77,50,74,c1) + name);
HXDLIN( 416)				::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 416)				::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXDLIN( 416)				if (::hx::IsNotNull( str )) {
HXLINE( 416)					key = str;
            				}
HXDLIN( 416)				_hx_tmp = ::backend::Paths_obj::getPath((key + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder,null());
            			}
HXDLIN( 416)			this->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded,_hx_tmp));
HXLINE( 417)			return name;
            		}
HXLINE( 420)		::String lastAnim = null();
HXLINE( 421)		if (::hx::IsNotNull( this->animation )) {
HXLINE( 423)			lastAnim = this->animation->get_name();
            		}
HXLINE( 425)		this->image = name;
HXLINE( 426)		::String parentFolder1 = null();
HXDLIN( 426)		if ((name.indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE( 426)			::haxe::Log_obj::trace(name, ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder1)->init(1,true))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            		}
HXDLIN( 426)		 ::flixel::graphics::FlxGraphic imageLoaded1 = ::backend::Paths_obj::image(name,parentFolder1,true);
HXDLIN( 426)		bool xmlExists1 = false;
HXDLIN( 426)		::String xml1 = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + name) + HX_(".xml",69,3e,c3,1e)));
HXDLIN( 426)		if (::sys::FileSystem_obj::exists(xml1)) {
HXLINE( 426)			xmlExists1 = true;
            		}
HXDLIN( 426)		 ::Dynamic _hx_tmp1;
HXDLIN( 426)		if (xmlExists1) {
HXLINE( 426)			_hx_tmp1 = ::sys::io::File_obj::getContent(xml1);
            		}
            		else {
HXLINE( 426)			::String key1 = (HX_("images/",77,50,74,c1) + name);
HXDLIN( 426)			::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN( 426)			::String str1 = ( ( ::haxe::ds::StringMap)(this2) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN( 426)			if (::hx::IsNotNull( str1 )) {
HXLINE( 426)				key1 = str1;
            			}
HXDLIN( 426)			_hx_tmp1 = ::backend::Paths_obj::getPath((key1 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder1,null());
            		}
HXDLIN( 426)		this->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded1,_hx_tmp1));
HXLINE( 427)		this->scale->set_x(this->parent->scaleX);
HXLINE( 428)		this->scale->set_y(this->parent->scaleY);
HXLINE( 429)		this->alignOffset = ( (Float)(0) );
HXLINE( 431)		if (::hx::IsNotNull( lastAnim )) {
HXLINE( 433)			this->animation->addByPrefix(lastAnim,lastAnim,24,null(),null(),null());
HXLINE( 434)			this->animation->play(lastAnim,true,null(),null());
HXLINE( 436)			this->updateHitbox();
            		}
HXLINE( 438)		return name;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AlphaCharacter_obj,set_image,return )

void AlphaCharacter_obj::updateLetterOffset(){
            	HX_STACKFRAME(&_hx_pos_0ebe4a949189dc15_442_updateLetterOffset)
HXLINE( 443)		if (::hx::IsNull( this->animation->_curAnim )) {
HXLINE( 445)			::haxe::Log_obj::trace(this->character,::hx::SourceInfo(HX_("source/objects/Alphabet.hx",5c,20,81,f9),445,HX_("objects.AlphaCharacter",e5,26,8d,71),HX_("updateLetterOffset",c2,a4,fb,6d)));
HXLINE( 446)			return;
            		}
HXLINE( 449)		Float add = ( (Float)(110) );
HXLINE( 450)		if (::StringTools_obj::endsWith(this->animation->_curAnim->name,HX_("bold",85,81,1b,41))) {
HXLINE( 452)			bool _hx_tmp;
HXDLIN( 452)			if (::hx::IsNotNull( this->curLetter )) {
HXLINE( 452)				_hx_tmp = ::hx::IsNotNull( this->curLetter->__Field(HX_("offsetsBold",25,77,5c,68),::hx::paccDynamic) );
            			}
            			else {
HXLINE( 452)				_hx_tmp = false;
            			}
HXDLIN( 452)			if (_hx_tmp) {
HXLINE( 454)				this->letterOffset[0] = ( (Float)( ::Dynamic(this->curLetter->__Field(HX_("offsetsBold",25,77,5c,68),::hx::paccDynamic))->__GetItem(0)) );
HXLINE( 455)				this->letterOffset[1] = ( (Float)( ::Dynamic(this->curLetter->__Field(HX_("offsetsBold",25,77,5c,68),::hx::paccDynamic))->__GetItem(1)) );
            			}
HXLINE( 457)			add = ( (Float)(70) );
            		}
            		else {
HXLINE( 461)			bool _hx_tmp1;
HXDLIN( 461)			if (::hx::IsNotNull( this->curLetter )) {
HXLINE( 461)				_hx_tmp1 = ::hx::IsNotNull( this->curLetter->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic) );
            			}
            			else {
HXLINE( 461)				_hx_tmp1 = false;
            			}
HXDLIN( 461)			if (_hx_tmp1) {
HXLINE( 463)				this->letterOffset[0] = ( (Float)( ::Dynamic(this->curLetter->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic))->__GetItem(0)) );
HXLINE( 464)				this->letterOffset[1] = ( (Float)( ::Dynamic(this->curLetter->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic))->__GetItem(1)) );
            			}
            		}
HXLINE( 467)		add = (add * this->scale->y);
HXLINE( 468)		this->offset->set_x((this->offset->x + (this->letterOffset->__get(0) * this->scale->x)));
HXLINE( 469)		{
HXLINE( 469)			 ::flixel::math::FlxBasePoint this1 = this->offset;
HXDLIN( 469)			Float y = this->offset->y;
HXDLIN( 469)			Float y1 = (this->letterOffset->__get(1) * this->scale->y);
HXDLIN( 469)			this1->set_y((y + (y1 - (add - this->get_height()))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(AlphaCharacter_obj,updateLetterOffset,(void))

void AlphaCharacter_obj::updateHitbox(){
            	HX_STACKFRAME(&_hx_pos_0ebe4a949189dc15_473_updateHitbox)
HXLINE( 474)		this->super::updateHitbox();
HXLINE( 475)		this->updateLetterOffset();
            	}


 ::haxe::ds::StringMap AlphaCharacter_obj::allLetters;

void AlphaCharacter_obj::loadAlphabetData(::String __o_request){
            		::String request = __o_request;
            		if (::hx::IsNull(__o_request)) request = HX_("alphabet",b3,7c,38,21);
            	HX_GC_STACKFRAME(&_hx_pos_0ebe4a949189dc15_283_loadAlphabetData)
HXLINE( 284)		::String path = ::backend::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + request) + HX_(".json",56,f1,d6,c2)),null(),null(),null());
HXLINE( 286)		if (!(::sys::FileSystem_obj::exists(path))) {
HXLINE( 290)			path = ::backend::Paths_obj::getPath(HX_("images/alphabet.json",ec,fc,e9,17),null(),null(),null());
            		}
HXLINE( 292)		::objects::AlphaCharacter_obj::allLetters =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 293)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 296)			 ::Dynamic data =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,::sys::io::File_obj::getContent(path))->doParse();
HXLINE( 301)			bool _hx_tmp;
HXDLIN( 301)			if (::hx::IsNotNull( data->__Field(HX_("allowed",28,f1,2c,69),::hx::paccDynamic) )) {
HXLINE( 301)				_hx_tmp = ::hx::IsGreater(  ::Dynamic(data->__Field(HX_("allowed",28,f1,2c,69),::hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),0 );
            			}
            			else {
HXLINE( 301)				_hx_tmp = false;
            			}
HXDLIN( 301)			if (_hx_tmp) {
HXLINE( 303)				int _g = 0;
HXDLIN( 303)				int _g1 = ( (int)( ::Dynamic(data->__Field(HX_("allowed",28,f1,2c,69),::hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN( 303)				while((_g < _g1)){
HXLINE( 303)					_g = (_g + 1);
HXDLIN( 303)					int i = (_g - 1);
HXLINE( 305)					::String _hx_char = ( (::String)( ::Dynamic(data->__Field(HX_("allowed",28,f1,2c,69),::hx::paccDynamic))->__Field(HX_("charAt",69,79,75,b7),::hx::paccDynamic)(i)) );
HXLINE( 306)					if ((_hx_char == HX_(" ",20,00,00,00))) {
HXLINE( 306)						continue;
            					}
HXLINE( 308)					{
HXLINE( 308)						::Dynamic this1 = ::objects::AlphaCharacter_obj::allLetters;
HXDLIN( 308)						 ::Dynamic value = null();
HXDLIN( 308)						( ( ::haxe::ds::StringMap)(this1) )->set(_hx_char.toLowerCase(),value);
            					}
            				}
            			}
HXLINE( 312)			if (::hx::IsNotNull( data->__Field(HX_("characters",aa,58,ce,55),::hx::paccDynamic) )) {
HXLINE( 314)				int _g2 = 0;
HXDLIN( 314)				::Array< ::String > _g3 = ::Reflect_obj::fields( ::Dynamic(data->__Field(HX_("characters",aa,58,ce,55),::hx::paccDynamic)));
HXDLIN( 314)				while((_g2 < _g3->length)){
HXLINE( 314)					::String char1 = _g3->__get(_g2);
HXDLIN( 314)					_g2 = (_g2 + 1);
HXLINE( 316)					 ::Dynamic letterData = ::Reflect_obj::field( ::Dynamic(data->__Field(HX_("characters",aa,58,ce,55),::hx::paccDynamic)),char1);
HXLINE( 317)					::String character = char1.toLowerCase().substr(0,1);
HXLINE( 318)					bool _hx_tmp1;
HXDLIN( 318)					bool _hx_tmp2;
HXDLIN( 318)					bool _hx_tmp3;
HXDLIN( 318)					if (::hx::IsNull( letterData->__Field(HX_("animation",04,ef,34,4b),::hx::paccDynamic) )) {
HXLINE( 318)						_hx_tmp3 = ::hx::IsNotNull( letterData->__Field(HX_("normal",27,72,69,30),::hx::paccDynamic) );
            					}
            					else {
HXLINE( 318)						_hx_tmp3 = true;
            					}
HXDLIN( 318)					if (!(_hx_tmp3)) {
HXLINE( 318)						_hx_tmp2 = ::hx::IsNotNull( letterData->__Field(HX_("bold",85,81,1b,41),::hx::paccDynamic) );
            					}
            					else {
HXLINE( 318)						_hx_tmp2 = true;
            					}
HXDLIN( 318)					if (_hx_tmp2) {
HXLINE( 318)						_hx_tmp1 = ::objects::AlphaCharacter_obj::allLetters->exists(character);
            					}
            					else {
HXLINE( 318)						_hx_tmp1 = false;
            					}
HXDLIN( 318)					if (_hx_tmp1) {
HXLINE( 319)						::objects::AlphaCharacter_obj::allLetters->set(character, ::Dynamic(::hx::Anon_obj::Create(3)
            							->setFixed(0,HX_("offsets",80,09,65,d7), ::Dynamic(letterData->__Field(HX_("normal",27,72,69,30),::hx::paccDynamic)))
            							->setFixed(1,HX_("anim",11,86,71,40), ::Dynamic(letterData->__Field(HX_("animation",04,ef,34,4b),::hx::paccDynamic)))
            							->setFixed(2,HX_("offsetsBold",25,77,5c,68), ::Dynamic(letterData->__Field(HX_("bold",85,81,1b,41),::hx::paccDynamic)))));
            					}
            				}
            			}
HXLINE( 322)			::haxe::Log_obj::trace(((HX_("Reloaded letters successfully (",2a,c4,6b,e4) + path) + HX_(")!",d8,23,00,00)),::hx::SourceInfo(HX_("source/objects/Alphabet.hx",5c,20,81,f9),322,HX_("objects.AlphaCharacter",e5,26,8d,71),HX_("loadAlphabetData",c3,5b,78,77)));
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g4 = _hx_e;
HXLINE( 324)				{
HXLINE( 324)					null();
            				}
HXDLIN( 324)				 ::Dynamic e = _g4;
HXLINE( 325)				{
HXLINE( 326)					{
HXLINE( 326)						 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
HXDLIN( 326)						 ::Dynamic data1 = (HX_("Error on loading alphabet data: ",f0,30,fc,9e) + ::Std_obj::string(e));
HXDLIN( 326)						_this->advanced(data1,::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            					}
HXLINE( 327)					 ::Dynamic _hx_tmp4 = ::haxe::Log_obj::trace;
HXDLIN( 327)					::String _hx_tmp5 = (HX_("Error on loading alphabet data: ",f0,30,fc,9e) + ::Std_obj::string(e));
HXDLIN( 327)					_hx_tmp4(_hx_tmp5,::hx::SourceInfo(HX_("source/objects/Alphabet.hx",5c,20,81,f9),327,HX_("objects.AlphaCharacter",e5,26,8d,71),HX_("loadAlphabetData",c3,5b,78,77)));
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 330)		if (!(::objects::AlphaCharacter_obj::allLetters->exists(HX_("?",3f,00,00,00)))) {
HXLINE( 331)			::objects::AlphaCharacter_obj::allLetters->set(HX_("?",3f,00,00,00), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("anim",11,86,71,40),HX_("question",26,9b,b0,26))));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AlphaCharacter_obj,loadAlphabetData,(void))

bool AlphaCharacter_obj::isTypeAlphabet(::String c){
            	HX_STACKFRAME(&_hx_pos_0ebe4a949189dc15_402_isTypeAlphabet)
HXLINE( 403)		int ascii = c.cca(0);
HXLINE( 404)		bool _hx_tmp;
HXDLIN( 404)		bool _hx_tmp1;
HXDLIN( 404)		bool _hx_tmp2;
HXDLIN( 404)		bool _hx_tmp3;
HXDLIN( 404)		if ((ascii >= 65)) {
HXLINE( 404)			_hx_tmp3 = (ascii <= 90);
            		}
            		else {
HXLINE( 404)			_hx_tmp3 = false;
            		}
HXDLIN( 404)		if (!(_hx_tmp3)) {
HXLINE( 405)			if ((ascii >= 97)) {
HXLINE( 404)				_hx_tmp2 = (ascii <= 122);
            			}
            			else {
HXLINE( 404)				_hx_tmp2 = false;
            			}
            		}
            		else {
HXLINE( 404)			_hx_tmp2 = true;
            		}
HXDLIN( 404)		if (!(_hx_tmp2)) {
HXLINE( 406)			if ((ascii >= 192)) {
HXLINE( 404)				_hx_tmp1 = (ascii <= 214);
            			}
            			else {
HXLINE( 404)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE( 404)			_hx_tmp1 = true;
            		}
HXDLIN( 404)		if (!(_hx_tmp1)) {
HXLINE( 407)			if ((ascii >= 216)) {
HXLINE( 404)				_hx_tmp = (ascii <= 246);
            			}
            			else {
HXLINE( 404)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 404)			_hx_tmp = true;
            		}
HXDLIN( 404)		if (!(_hx_tmp)) {
HXLINE( 408)			if ((ascii >= 248)) {
HXLINE( 408)				return (ascii <= 255);
            			}
            			else {
HXLINE( 408)				return false;
            			}
            		}
            		else {
HXLINE( 404)			return true;
            		}
HXDLIN( 404)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AlphaCharacter_obj,isTypeAlphabet,return )


::hx::ObjectPtr< AlphaCharacter_obj > AlphaCharacter_obj::__new() {
	::hx::ObjectPtr< AlphaCharacter_obj > __this = new AlphaCharacter_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< AlphaCharacter_obj > AlphaCharacter_obj::__alloc(::hx::Ctx *_hx_ctx) {
	AlphaCharacter_obj *__this = (AlphaCharacter_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AlphaCharacter_obj), true, "objects.AlphaCharacter"));
	*(void **)__this = AlphaCharacter_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

AlphaCharacter_obj::AlphaCharacter_obj()
{
}

void AlphaCharacter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AlphaCharacter);
	HX_MARK_MEMBER_NAME(image,"image");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(alignOffset,"alignOffset");
	HX_MARK_MEMBER_NAME(letterOffset,"letterOffset");
	HX_MARK_MEMBER_NAME(row,"row");
	HX_MARK_MEMBER_NAME(rowWidth,"rowWidth");
	HX_MARK_MEMBER_NAME(character,"character");
	HX_MARK_MEMBER_NAME(curLetter,"curLetter");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AlphaCharacter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(image,"image");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(alignOffset,"alignOffset");
	HX_VISIT_MEMBER_NAME(letterOffset,"letterOffset");
	HX_VISIT_MEMBER_NAME(row,"row");
	HX_VISIT_MEMBER_NAME(rowWidth,"rowWidth");
	HX_VISIT_MEMBER_NAME(character,"character");
	HX_VISIT_MEMBER_NAME(curLetter,"curLetter");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val AlphaCharacter_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"row") ) { return ::hx::Val( row ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { return ::hx::Val( image ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return ::hx::Val( parent ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rowWidth") ) { return ::hx::Val( rowWidth ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"character") ) { return ::hx::Val( character ); }
		if (HX_FIELD_EQ(inName,"curLetter") ) { return ::hx::Val( curLetter ); }
		if (HX_FIELD_EQ(inName,"set_image") ) { return ::hx::Val( set_image_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"alignOffset") ) { return ::hx::Val( alignOffset ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"letterOffset") ) { return ::hx::Val( letterOffset ); }
		if (HX_FIELD_EQ(inName,"updateHitbox") ) { return ::hx::Val( updateHitbox_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"updateLetterOffset") ) { return ::hx::Val( updateLetterOffset_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"setupAlphaCharacter") ) { return ::hx::Val( setupAlphaCharacter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool AlphaCharacter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"allLetters") ) { outValue = ( allLetters ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"isTypeAlphabet") ) { outValue = isTypeAlphabet_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"loadAlphabetData") ) { outValue = loadAlphabetData_dyn(); return true; }
	}
	return false;
}

::hx::Val AlphaCharacter_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"row") ) { row=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_image(inValue.Cast< ::String >()) );image=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::objects::Alphabet >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rowWidth") ) { rowWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"character") ) { character=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curLetter") ) { curLetter=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"alignOffset") ) { alignOffset=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"letterOffset") ) { letterOffset=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool AlphaCharacter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"allLetters") ) { allLetters=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void AlphaCharacter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("image",5b,1f,69,bd));
	outFields->push(HX_("parent",2a,05,7e,ed));
	outFields->push(HX_("alignOffset",38,44,0e,ef));
	outFields->push(HX_("letterOffset",19,69,ee,f5));
	outFields->push(HX_("row",1a,e2,56,00));
	outFields->push(HX_("rowWidth",8c,65,4d,72));
	outFields->push(HX_("character",a9,db,d1,41));
	outFields->push(HX_("curLetter",86,c6,95,13));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AlphaCharacter_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(AlphaCharacter_obj,image),HX_("image",5b,1f,69,bd)},
	{::hx::fsObject /*  ::objects::Alphabet */ ,(int)offsetof(AlphaCharacter_obj,parent),HX_("parent",2a,05,7e,ed)},
	{::hx::fsFloat,(int)offsetof(AlphaCharacter_obj,alignOffset),HX_("alignOffset",38,44,0e,ef)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(AlphaCharacter_obj,letterOffset),HX_("letterOffset",19,69,ee,f5)},
	{::hx::fsInt,(int)offsetof(AlphaCharacter_obj,row),HX_("row",1a,e2,56,00)},
	{::hx::fsFloat,(int)offsetof(AlphaCharacter_obj,rowWidth),HX_("rowWidth",8c,65,4d,72)},
	{::hx::fsString,(int)offsetof(AlphaCharacter_obj,character),HX_("character",a9,db,d1,41)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AlphaCharacter_obj,curLetter),HX_("curLetter",86,c6,95,13)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo AlphaCharacter_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &AlphaCharacter_obj::allLetters,HX_("allLetters",ac,a1,37,cd)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String AlphaCharacter_obj_sMemberFields[] = {
	HX_("image",5b,1f,69,bd),
	HX_("parent",2a,05,7e,ed),
	HX_("alignOffset",38,44,0e,ef),
	HX_("letterOffset",19,69,ee,f5),
	HX_("row",1a,e2,56,00),
	HX_("rowWidth",8c,65,4d,72),
	HX_("character",a9,db,d1,41),
	HX_("curLetter",86,c6,95,13),
	HX_("setupAlphaCharacter",c8,fb,0f,cd),
	HX_("set_image",be,67,63,e4),
	HX_("updateLetterOffset",c2,a4,fb,6d),
	HX_("updateHitbox",81,94,eb,56),
	::String(null()) };

static void AlphaCharacter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AlphaCharacter_obj::allLetters,"allLetters");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AlphaCharacter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AlphaCharacter_obj::allLetters,"allLetters");
};

#endif

::hx::Class AlphaCharacter_obj::__mClass;

static ::String AlphaCharacter_obj_sStaticFields[] = {
	HX_("allLetters",ac,a1,37,cd),
	HX_("loadAlphabetData",c3,5b,78,77),
	HX_("isTypeAlphabet",97,54,3d,ff),
	::String(null())
};

void AlphaCharacter_obj::__register()
{
	AlphaCharacter_obj _hx_dummy;
	AlphaCharacter_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.AlphaCharacter",e5,26,8d,71);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AlphaCharacter_obj::__GetStatic;
	__mClass->mSetStaticField = &AlphaCharacter_obj::__SetStatic;
	__mClass->mMarkFunc = AlphaCharacter_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(AlphaCharacter_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AlphaCharacter_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AlphaCharacter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AlphaCharacter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AlphaCharacter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AlphaCharacter_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace objects
