// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_objects_Bar
#include <objects/Bar.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e9c4662983707ffb_5_new,"objects.Bar","new",0x36833e8b,"objects.Bar.new","objects/Bar.hx",5,0xfd0e9206)
HX_LOCAL_STACK_FRAME(_hx_pos_e9c4662983707ffb_48_update,"objects.Bar","update",0xea1b04be,"objects.Bar.update","objects/Bar.hx",48,0xfd0e9206)
HX_LOCAL_STACK_FRAME(_hx_pos_e9c4662983707ffb_65_setBounds,"objects.Bar","setBounds",0x7e55dc22,"objects.Bar.setBounds","objects/Bar.hx",65,0xfd0e9206)
HX_LOCAL_STACK_FRAME(_hx_pos_e9c4662983707ffb_71_setColors,"objects.Bar","setColors",0xdebf1b5d,"objects.Bar.setColors","objects/Bar.hx",71,0xfd0e9206)
HX_LOCAL_STACK_FRAME(_hx_pos_e9c4662983707ffb_79_updateBar,"objects.Bar","updateBar",0x3b686fb5,"objects.Bar.updateBar","objects/Bar.hx",79,0xfd0e9206)
HX_LOCAL_STACK_FRAME(_hx_pos_e9c4662983707ffb_107_regenerateClips,"objects.Bar","regenerateClips",0xc33be346,"objects.Bar.regenerateClips","objects/Bar.hx",107,0xfd0e9206)
HX_LOCAL_STACK_FRAME(_hx_pos_e9c4662983707ffb_124_set_percent,"objects.Bar","set_percent",0xb01c2313,"objects.Bar.set_percent","objects/Bar.hx",124,0xfd0e9206)
HX_LOCAL_STACK_FRAME(_hx_pos_e9c4662983707ffb_134_set_leftToRight,"objects.Bar","set_leftToRight",0x201a4e68,"objects.Bar.set_leftToRight","objects/Bar.hx",134,0xfd0e9206)
HX_LOCAL_STACK_FRAME(_hx_pos_e9c4662983707ffb_141_set_barWidth,"objects.Bar","set_barWidth",0xbb38c325,"objects.Bar.set_barWidth","objects/Bar.hx",141,0xfd0e9206)
HX_LOCAL_STACK_FRAME(_hx_pos_e9c4662983707ffb_148_set_barHeight,"objects.Bar","set_barHeight",0xccc175e8,"objects.Bar.set_barHeight","objects/Bar.hx",148,0xfd0e9206)
namespace objects{

void Bar_obj::__construct(Float x,Float y,::String __o_image, ::Dynamic valueFunction,::hx::Null< Float >  __o_boundX,::hx::Null< Float >  __o_boundY){
            		::String image = __o_image;
            		if (::hx::IsNull(__o_image)) image = HX_("healthBar",97,8a,92,42);
            		Float boundX = __o_boundX.Default(0);
            		Float boundY = __o_boundY.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_e9c4662983707ffb_5_new)
HXLINE(  47)		this->enabled = true;
HXLINE(  19)		this->barOffset =  ::flixel::math::FlxBasePoint_obj::__alloc( HX_CTX ,3,3);
HXLINE(  18)		this->barHeight = 1;
HXLINE(  17)		this->barWidth = 1;
HXLINE(  14)		this->barCenter = ((Float)0);
HXLINE(  13)		this->leftToRight = true;
HXLINE(  12)		this->bounds =  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("max",a4,0a,53,00),1)
            			->setFixed(1,HX_("min",92,11,53,00),0));
HXLINE(  11)		this->percent = ((Float)0);
HXLINE(  10)		this->valueFunction = null();
HXLINE(  23)		super::__construct(x,y,null());
HXLINE(  25)		this->valueFunction = valueFunction;
HXLINE(  26)		this->setBounds(boundX,boundY);
HXLINE(  28)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  28)		this->bg = _hx_tmp->loadGraphic(::backend::Paths_obj::image(image,null(),null()),null(),null(),null(),null(),null());
HXLINE(  29)		this->bg->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  30)		this->set_barWidth(::Std_obj::_hx_int((this->bg->get_width() - ( (Float)(6) ))));
HXLINE(  31)		this->set_barHeight(::Std_obj::_hx_int((this->bg->get_height() - ( (Float)(6) ))));
HXLINE(  33)		 ::flixel::FlxSprite _hx_tmp1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  33)		int _hx_tmp2 = ::Std_obj::_hx_int(this->bg->get_width());
HXDLIN(  33)		this->leftBar = _hx_tmp1->makeGraphic(_hx_tmp2,::Std_obj::_hx_int(this->bg->get_height()),-1,null(),null());
HXLINE(  35)		 ::flixel::FlxSprite _hx_tmp3 = this->leftBar;
HXDLIN(  35)		_hx_tmp3->set_antialiasing(this->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing));
HXLINE(  37)		 ::flixel::FlxSprite _hx_tmp4 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  37)		int _hx_tmp5 = ::Std_obj::_hx_int(this->bg->get_width());
HXDLIN(  37)		this->rightBar = _hx_tmp4->makeGraphic(_hx_tmp5,::Std_obj::_hx_int(this->bg->get_height()),-1,null(),null());
HXLINE(  38)		this->rightBar->set_color(-16777216);
HXLINE(  39)		this->rightBar->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  41)		this->add(this->leftBar);
HXLINE(  42)		this->add(this->rightBar);
HXLINE(  43)		this->add(this->bg);
HXLINE(  44)		this->regenerateClips();
            	}

Dynamic Bar_obj::__CreateEmpty() { return new Bar_obj; }

void *Bar_obj::_hx_vtable = 0;

Dynamic Bar_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Bar_obj > _hx_result = new Bar_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool Bar_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x288ce903) {
			if (inClassId<=(int)0x1527d85f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x1527d85f;
			} else {
				return inClassId==(int)0x288ce903;
			}
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void Bar_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_e9c4662983707ffb_48_update)
HXLINE(  49)		if (!(this->enabled)) {
HXLINE(  51)			this->super::update(elapsed);
HXLINE(  52)			return;
            		}
HXLINE(  55)		if (::hx::IsNotNull( this->valueFunction )) {
HXLINE(  57)			Float Value = ( (Float)(this->valueFunction()) );
HXDLIN(  57)			 ::Dynamic Min = this->bounds->__Field(HX_("min",92,11,53,00),::hx::paccDynamic);
HXDLIN(  57)			 ::Dynamic Max = this->bounds->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic);
HXDLIN(  57)			Float lowerBound;
HXDLIN(  57)			bool lowerBound1;
HXDLIN(  57)			if (::hx::IsNotNull( Min )) {
HXLINE(  57)				lowerBound1 = ::hx::IsLess( Value,Min );
            			}
            			else {
HXLINE(  57)				lowerBound1 = false;
            			}
HXDLIN(  57)			if (lowerBound1) {
HXLINE(  57)				lowerBound = ( (Float)(Min) );
            			}
            			else {
HXLINE(  57)				lowerBound = Value;
            			}
HXDLIN(  57)			Float value;
HXDLIN(  57)			bool value1;
HXDLIN(  57)			if (::hx::IsNotNull( Max )) {
HXLINE(  57)				value1 = ::hx::IsGreater( lowerBound,Max );
            			}
            			else {
HXLINE(  57)				value1 = false;
            			}
HXDLIN(  57)			if (value1) {
HXLINE(  57)				value = ( (Float)(Max) );
            			}
            			else {
HXLINE(  57)				value = lowerBound;
            			}
HXDLIN(  57)			 ::Dynamic value2 = ::flixel::math::FlxMath_obj::remapToRange(value,( (Float)(this->bounds->__Field(HX_("min",92,11,53,00),::hx::paccDynamic)) ),( (Float)(this->bounds->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic)) ),( (Float)(0) ),( (Float)(100) ));
HXLINE(  58)			Float _hx_tmp;
HXDLIN(  58)			if (::hx::IsNotNull( value2 )) {
HXLINE(  58)				_hx_tmp = ( (Float)(value2) );
            			}
            			else {
HXLINE(  58)				_hx_tmp = ( (Float)(0) );
            			}
HXDLIN(  58)			this->set_percent(_hx_tmp);
            		}
            		else {
HXLINE(  60)			this->set_percent(( (Float)(0) ));
            		}
HXLINE(  61)		this->super::update(elapsed);
            	}


void Bar_obj::setBounds(Float min,Float max){
            	HX_STACKFRAME(&_hx_pos_e9c4662983707ffb_65_setBounds)
HXLINE(  66)		this->bounds->__SetField(HX_("min",92,11,53,00),min,::hx::paccDynamic);
HXLINE(  67)		this->bounds->__SetField(HX_("max",a4,0a,53,00),max,::hx::paccDynamic);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Bar_obj,setBounds,(void))

void Bar_obj::setColors( ::Dynamic left, ::Dynamic right){
            	HX_STACKFRAME(&_hx_pos_e9c4662983707ffb_71_setColors)
HXLINE(  72)		if (::hx::IsNotNull( left )) {
HXLINE(  73)			this->leftBar->set_color(( (int)(left) ));
            		}
HXLINE(  74)		if (::hx::IsNotNull( right )) {
HXLINE(  75)			this->rightBar->set_color(( (int)(right) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Bar_obj,setColors,(void))

void Bar_obj::updateBar(){
            	HX_STACKFRAME(&_hx_pos_e9c4662983707ffb_79_updateBar)
HXLINE(  80)		bool _hx_tmp;
HXDLIN(  80)		if (::hx::IsNotNull( this->leftBar )) {
HXLINE(  80)			_hx_tmp = ::hx::IsNull( this->rightBar );
            		}
            		else {
HXLINE(  80)			_hx_tmp = true;
            		}
HXDLIN(  80)		if (_hx_tmp) {
HXLINE(  80)			return;
            		}
HXLINE(  82)		this->leftBar->setPosition(this->bg->x,this->bg->y);
HXLINE(  83)		this->rightBar->setPosition(this->bg->x,this->bg->y);
HXLINE(  85)		Float leftSize = ( (Float)(0) );
HXLINE(  86)		if (this->leftToRight) {
HXLINE(  86)			leftSize = ((this->percent / ( (Float)(100) )) * ( (Float)(this->barWidth) ));
            		}
            		else {
HXLINE(  87)			leftSize = ((( (Float)(1) ) - (this->percent / ( (Float)(100) ))) * ( (Float)(this->barWidth) ));
            		}
HXLINE(  89)		this->leftBar->clipRect->width = leftSize;
HXLINE(  90)		this->leftBar->clipRect->height = ( (Float)(this->barHeight) );
HXLINE(  91)		this->leftBar->clipRect->x = this->barOffset->x;
HXLINE(  92)		this->leftBar->clipRect->y = this->barOffset->y;
HXLINE(  94)		this->rightBar->clipRect->width = (( (Float)(this->barWidth) ) - leftSize);
HXLINE(  95)		this->rightBar->clipRect->height = ( (Float)(this->barHeight) );
HXLINE(  96)		this->rightBar->clipRect->x = (this->barOffset->x + leftSize);
HXLINE(  97)		this->rightBar->clipRect->y = this->barOffset->y;
HXLINE(  99)		this->barCenter = ((this->leftBar->x + leftSize) + this->barOffset->x);
HXLINE( 102)		this->leftBar->set_clipRect(this->leftBar->clipRect);
HXLINE( 103)		this->rightBar->set_clipRect(this->rightBar->clipRect);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bar_obj,updateBar,(void))

void Bar_obj::regenerateClips(){
            	HX_GC_STACKFRAME(&_hx_pos_e9c4662983707ffb_107_regenerateClips)
HXLINE( 108)		if (::hx::IsNotNull( this->leftBar )) {
HXLINE( 110)			 ::flixel::FlxSprite _hx_tmp = this->leftBar;
HXDLIN( 110)			int _hx_tmp1 = ::Std_obj::_hx_int(this->bg->get_width());
HXDLIN( 110)			_hx_tmp->setGraphicSize(_hx_tmp1,::Std_obj::_hx_int(this->bg->get_height()));
HXLINE( 111)			this->leftBar->updateHitbox();
HXLINE( 112)			 ::flixel::FlxSprite _hx_tmp2 = this->leftBar;
HXDLIN( 112)			int _hx_tmp3 = ::Std_obj::_hx_int(this->bg->get_width());
HXDLIN( 112)			_hx_tmp2->set_clipRect( ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,_hx_tmp3,::Std_obj::_hx_int(this->bg->get_height())));
            		}
HXLINE( 114)		if (::hx::IsNotNull( this->rightBar )) {
HXLINE( 116)			 ::flixel::FlxSprite _hx_tmp4 = this->rightBar;
HXDLIN( 116)			int _hx_tmp5 = ::Std_obj::_hx_int(this->bg->get_width());
HXDLIN( 116)			_hx_tmp4->setGraphicSize(_hx_tmp5,::Std_obj::_hx_int(this->bg->get_height()));
HXLINE( 117)			this->rightBar->updateHitbox();
HXLINE( 118)			 ::flixel::FlxSprite _hx_tmp6 = this->rightBar;
HXDLIN( 118)			int _hx_tmp7 = ::Std_obj::_hx_int(this->bg->get_width());
HXDLIN( 118)			_hx_tmp6->set_clipRect( ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,_hx_tmp7,::Std_obj::_hx_int(this->bg->get_height())));
            		}
HXLINE( 120)		this->updateBar();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bar_obj,regenerateClips,(void))

Float Bar_obj::set_percent(Float value){
            	HX_STACKFRAME(&_hx_pos_e9c4662983707ffb_124_set_percent)
HXLINE( 125)		bool doUpdate = false;
HXLINE( 126)		if ((value != this->percent)) {
HXLINE( 126)			doUpdate = true;
            		}
HXLINE( 127)		this->percent = value;
HXLINE( 129)		if (doUpdate) {
HXLINE( 129)			this->updateBar();
            		}
HXLINE( 130)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bar_obj,set_percent,return )

bool Bar_obj::set_leftToRight(bool value){
            	HX_STACKFRAME(&_hx_pos_e9c4662983707ffb_134_set_leftToRight)
HXLINE( 135)		this->leftToRight = value;
HXLINE( 136)		this->updateBar();
HXLINE( 137)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bar_obj,set_leftToRight,return )

int Bar_obj::set_barWidth(int value){
            	HX_STACKFRAME(&_hx_pos_e9c4662983707ffb_141_set_barWidth)
HXLINE( 142)		this->barWidth = value;
HXLINE( 143)		this->regenerateClips();
HXLINE( 144)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bar_obj,set_barWidth,return )

int Bar_obj::set_barHeight(int value){
            	HX_STACKFRAME(&_hx_pos_e9c4662983707ffb_148_set_barHeight)
HXLINE( 149)		this->barHeight = value;
HXLINE( 150)		this->regenerateClips();
HXLINE( 151)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bar_obj,set_barHeight,return )


::hx::ObjectPtr< Bar_obj > Bar_obj::__new(Float x,Float y,::String __o_image, ::Dynamic valueFunction,::hx::Null< Float >  __o_boundX,::hx::Null< Float >  __o_boundY) {
	::hx::ObjectPtr< Bar_obj > __this = new Bar_obj();
	__this->__construct(x,y,__o_image,valueFunction,__o_boundX,__o_boundY);
	return __this;
}

::hx::ObjectPtr< Bar_obj > Bar_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y,::String __o_image, ::Dynamic valueFunction,::hx::Null< Float >  __o_boundX,::hx::Null< Float >  __o_boundY) {
	Bar_obj *__this = (Bar_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Bar_obj), true, "objects.Bar"));
	*(void **)__this = Bar_obj::_hx_vtable;
	__this->__construct(x,y,__o_image,valueFunction,__o_boundX,__o_boundY);
	return __this;
}

Bar_obj::Bar_obj()
{
}

void Bar_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Bar);
	HX_MARK_MEMBER_NAME(leftBar,"leftBar");
	HX_MARK_MEMBER_NAME(rightBar,"rightBar");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(valueFunction,"valueFunction");
	HX_MARK_MEMBER_NAME(percent,"percent");
	HX_MARK_MEMBER_NAME(bounds,"bounds");
	HX_MARK_MEMBER_NAME(leftToRight,"leftToRight");
	HX_MARK_MEMBER_NAME(barCenter,"barCenter");
	HX_MARK_MEMBER_NAME(barWidth,"barWidth");
	HX_MARK_MEMBER_NAME(barHeight,"barHeight");
	HX_MARK_MEMBER_NAME(barOffset,"barOffset");
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Bar_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(leftBar,"leftBar");
	HX_VISIT_MEMBER_NAME(rightBar,"rightBar");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(valueFunction,"valueFunction");
	HX_VISIT_MEMBER_NAME(percent,"percent");
	HX_VISIT_MEMBER_NAME(bounds,"bounds");
	HX_VISIT_MEMBER_NAME(leftToRight,"leftToRight");
	HX_VISIT_MEMBER_NAME(barCenter,"barCenter");
	HX_VISIT_MEMBER_NAME(barWidth,"barWidth");
	HX_VISIT_MEMBER_NAME(barHeight,"barHeight");
	HX_VISIT_MEMBER_NAME(barOffset,"barOffset");
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Bar_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { return ::hx::Val( bounds ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"leftBar") ) { return ::hx::Val( leftBar ); }
		if (HX_FIELD_EQ(inName,"percent") ) { return ::hx::Val( percent ); }
		if (HX_FIELD_EQ(inName,"enabled") ) { return ::hx::Val( enabled ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rightBar") ) { return ::hx::Val( rightBar ); }
		if (HX_FIELD_EQ(inName,"barWidth") ) { return ::hx::Val( barWidth ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"barCenter") ) { return ::hx::Val( barCenter ); }
		if (HX_FIELD_EQ(inName,"barHeight") ) { return ::hx::Val( barHeight ); }
		if (HX_FIELD_EQ(inName,"barOffset") ) { return ::hx::Val( barOffset ); }
		if (HX_FIELD_EQ(inName,"setBounds") ) { return ::hx::Val( setBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"setColors") ) { return ::hx::Val( setColors_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateBar") ) { return ::hx::Val( updateBar_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"leftToRight") ) { return ::hx::Val( leftToRight ); }
		if (HX_FIELD_EQ(inName,"set_percent") ) { return ::hx::Val( set_percent_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_barWidth") ) { return ::hx::Val( set_barWidth_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"valueFunction") ) { return ::hx::Val( valueFunction ); }
		if (HX_FIELD_EQ(inName,"set_barHeight") ) { return ::hx::Val( set_barHeight_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"regenerateClips") ) { return ::hx::Val( regenerateClips_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_leftToRight") ) { return ::hx::Val( set_leftToRight_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Bar_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"leftBar") ) { leftBar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"percent") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_percent(inValue.Cast< Float >()) );percent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"enabled") ) { enabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rightBar") ) { rightBar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"barWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_barWidth(inValue.Cast< int >()) );barWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"barCenter") ) { barCenter=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"barHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_barHeight(inValue.Cast< int >()) );barHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"barOffset") ) { barOffset=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"leftToRight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_leftToRight(inValue.Cast< bool >()) );leftToRight=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"valueFunction") ) { valueFunction=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Bar_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("leftBar",0c,e0,d7,f4));
	outFields->push(HX_("rightBar",57,2f,12,e4));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("percent",c5,aa,da,78));
	outFields->push(HX_("bounds",75,86,1d,66));
	outFields->push(HX_("leftToRight",1a,97,7b,b5));
	outFields->push(HX_("barCenter",08,ec,85,2b));
	outFields->push(HX_("barWidth",33,f7,30,99));
	outFields->push(HX_("barHeight",1a,ce,f6,27));
	outFields->push(HX_("barOffset",c6,5d,ea,85));
	outFields->push(HX_("enabled",81,04,31,7e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Bar_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Bar_obj,leftBar),HX_("leftBar",0c,e0,d7,f4)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Bar_obj,rightBar),HX_("rightBar",57,2f,12,e4)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Bar_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Bar_obj,valueFunction),HX_("valueFunction",a9,3f,63,77)},
	{::hx::fsFloat,(int)offsetof(Bar_obj,percent),HX_("percent",c5,aa,da,78)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Bar_obj,bounds),HX_("bounds",75,86,1d,66)},
	{::hx::fsBool,(int)offsetof(Bar_obj,leftToRight),HX_("leftToRight",1a,97,7b,b5)},
	{::hx::fsFloat,(int)offsetof(Bar_obj,barCenter),HX_("barCenter",08,ec,85,2b)},
	{::hx::fsInt,(int)offsetof(Bar_obj,barWidth),HX_("barWidth",33,f7,30,99)},
	{::hx::fsInt,(int)offsetof(Bar_obj,barHeight),HX_("barHeight",1a,ce,f6,27)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(Bar_obj,barOffset),HX_("barOffset",c6,5d,ea,85)},
	{::hx::fsBool,(int)offsetof(Bar_obj,enabled),HX_("enabled",81,04,31,7e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Bar_obj_sStaticStorageInfo = 0;
#endif

static ::String Bar_obj_sMemberFields[] = {
	HX_("leftBar",0c,e0,d7,f4),
	HX_("rightBar",57,2f,12,e4),
	HX_("bg",c5,55,00,00),
	HX_("valueFunction",a9,3f,63,77),
	HX_("percent",c5,aa,da,78),
	HX_("bounds",75,86,1d,66),
	HX_("leftToRight",1a,97,7b,b5),
	HX_("barCenter",08,ec,85,2b),
	HX_("barWidth",33,f7,30,99),
	HX_("barHeight",1a,ce,f6,27),
	HX_("barOffset",c6,5d,ea,85),
	HX_("enabled",81,04,31,7e),
	HX_("update",09,86,05,87),
	HX_("setBounds",b7,fb,c4,c5),
	HX_("setColors",f2,3a,2e,26),
	HX_("updateBar",4a,8f,d7,82),
	HX_("regenerateClips",9b,60,4a,15),
	HX_("set_percent",e8,11,42,09),
	HX_("set_leftToRight",bd,cb,28,72),
	HX_("set_barWidth",b0,ce,43,63),
	HX_("set_barHeight",fd,83,60,2e),
	::String(null()) };

::hx::Class Bar_obj::__mClass;

void Bar_obj::__register()
{
	Bar_obj _hx_dummy;
	Bar_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.Bar",19,9d,b0,31);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Bar_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Bar_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Bar_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Bar_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace objects
