// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_objects_CDSprite
#include <objects/CDSprite.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_211f73d1ecdaa16e_20_new,"objects.CDSprite","new",0x629ec552,"objects.CDSprite.new","objects/CDSprite.hx",20,0x0b1637fd)
HX_LOCAL_STACK_FRAME(_hx_pos_211f73d1ecdaa16e_74_setX,"objects.CDSprite","setX",0xeb9bf144,"objects.CDSprite.setX","objects/CDSprite.hx",74,0x0b1637fd)
HX_LOCAL_STACK_FRAME(_hx_pos_211f73d1ecdaa16e_81_setY,"objects.CDSprite","setY",0xeb9bf145,"objects.CDSprite.setY","objects/CDSprite.hx",81,0x0b1637fd)
HX_LOCAL_STACK_FRAME(_hx_pos_211f73d1ecdaa16e_88_tweenScale,"objects.CDSprite","tweenScale",0x317e5d6d,"objects.CDSprite.tweenScale","objects/CDSprite.hx",88,0x0b1637fd)
HX_LOCAL_STACK_FRAME(_hx_pos_211f73d1ecdaa16e_98_tweenScale,"objects.CDSprite","tweenScale",0x317e5d6d,"objects.CDSprite.tweenScale","objects/CDSprite.hx",98,0x0b1637fd)
HX_LOCAL_STACK_FRAME(_hx_pos_211f73d1ecdaa16e_113_spinCD,"objects.CDSprite","spinCD",0x4da1bf31,"objects.CDSprite.spinCD","objects/CDSprite.hx",113,0x0b1637fd)
HX_LOCAL_STACK_FRAME(_hx_pos_211f73d1ecdaa16e_107_spinCD,"objects.CDSprite","spinCD",0x4da1bf31,"objects.CDSprite.spinCD","objects/CDSprite.hx",107,0x0b1637fd)
HX_LOCAL_STACK_FRAME(_hx_pos_211f73d1ecdaa16e_125_stopSpinCD,"objects.CDSprite","stopSpinCD",0xe8c14fd3,"objects.CDSprite.stopSpinCD","objects/CDSprite.hx",125,0x0b1637fd)
HX_LOCAL_STACK_FRAME(_hx_pos_211f73d1ecdaa16e_117_stopSpinCD,"objects.CDSprite","stopSpinCD",0xe8c14fd3,"objects.CDSprite.stopSpinCD","objects/CDSprite.hx",117,0x0b1637fd)
HX_LOCAL_STACK_FRAME(_hx_pos_211f73d1ecdaa16e_129_getName,"objects.CDSprite","getName",0x874f77f3,"objects.CDSprite.getName","objects/CDSprite.hx",129,0x0b1637fd)
HX_LOCAL_STACK_FRAME(_hx_pos_211f73d1ecdaa16e_140_getTrueName,"objects.CDSprite","getTrueName",0xf504fe61,"objects.CDSprite.getTrueName","objects/CDSprite.hx",140,0x0b1637fd)
HX_LOCAL_STACK_FRAME(_hx_pos_211f73d1ecdaa16e_144_updateCover,"objects.CDSprite","updateCover",0x6c909f60,"objects.CDSprite.updateCover","objects/CDSprite.hx",144,0x0b1637fd)
namespace objects{

void CDSprite_obj::__construct(Float x,Float y,::String coverart){
            	HX_GC_STACKFRAME(&_hx_pos_211f73d1ecdaa16e_20_new)
HXLINE(  21)		super::__construct(x,y,null());
HXLINE(  23)		this->formatedCoverArt = ::StringTools_obj::replace(coverart,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE(  24)		this->name = this->formatedCoverArt;
HXLINE(  25)		this->songName = this->formatedCoverArt;
HXLINE(  26)		this->songTrueName = this->formatedCoverArt;
HXLINE(  31)		if (!(::backend::Paths_obj::fileExists((((HX_("images/freeplay/cd/",36,85,ae,83) + this->formatedCoverArt) + HX_("CD",a1,3a,00,00)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),null(),null()))) {
HXLINE(  33)			this->formatedCoverArt = HX_("default",c1,d8,c3,9b);
            		}
HXLINE(  38)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(  38)		this->coverArt = _hx_tmp->loadGraphic(::backend::Paths_obj::image(((HX_("freeplay/cd/",3f,de,87,d0) + this->formatedCoverArt) + HX_("CD",a1,3a,00,00)),null(),null()),null(),null(),null(),null(),null());
HXLINE(  39)		 ::flixel::FlxSprite _hx_tmp1 = this->coverArt;
HXDLIN(  39)		_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((this->coverArt->get_width() * ((Float)0.5))),null());
HXLINE(  40)		this->coverArt->updateHitbox();
HXLINE(  41)		{
HXLINE(  41)			 ::flixel::math::FlxBasePoint this1 = this->coverArt->scrollFactor;
HXDLIN(  41)			this1->set_x(( (Float)(0) ));
HXDLIN(  41)			this1->set_y(( (Float)(0) ));
            		}
HXLINE(  42)		this->add(this->coverArt);
HXLINE(  45)		 ::flixel::FlxSprite _hx_tmp2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(  45)		this->cdShine1 = _hx_tmp2->loadGraphic(::backend::Paths_obj::image(HX_("freeplay/cd/cdShine",ab,5c,87,50),null(),null()),null(),null(),null(),null(),null());
HXLINE(  46)		this->cdShine1->set_alpha(( (Float)(1) ));
HXLINE(  47)		this->cdShine1->set_blend(0);
HXLINE(  48)		 ::flixel::FlxSprite _hx_tmp3 = this->cdShine1;
HXDLIN(  48)		_hx_tmp3->setGraphicSize(::Std_obj::_hx_int((this->cdShine1->get_width() * ((Float)0.5))),null());
HXLINE(  49)		this->cdShine1->updateHitbox();
HXLINE(  50)		{
HXLINE(  50)			 ::flixel::math::FlxBasePoint this2 = this->cdShine1->scrollFactor;
HXDLIN(  50)			this2->set_x(( (Float)(0) ));
HXDLIN(  50)			this2->set_y(( (Float)(0) ));
            		}
HXLINE(  51)		this->add(this->cdShine1);
HXLINE(  54)		 ::flixel::FlxSprite _hx_tmp4 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(  54)		this->cdShine2 = _hx_tmp4->loadGraphic(::backend::Paths_obj::image(HX_("freeplay/cd/cdShine2",27,b9,e9,25),null(),null()),null(),null(),null(),null(),null());
HXLINE(  55)		this->cdShine2->set_alpha(( (Float)(1) ));
HXLINE(  56)		this->cdShine2->set_blend(0);
HXLINE(  57)		 ::flixel::FlxSprite _hx_tmp5 = this->cdShine2;
HXDLIN(  57)		_hx_tmp5->setGraphicSize(::Std_obj::_hx_int((this->cdShine2->get_width() * ((Float)0.5))),null());
HXLINE(  58)		this->cdShine2->updateHitbox();
HXLINE(  59)		{
HXLINE(  59)			 ::flixel::math::FlxBasePoint this3 = this->cdShine2->scrollFactor;
HXDLIN(  59)			this3->set_x(( (Float)(0) ));
HXDLIN(  59)			this3->set_y(( (Float)(0) ));
            		}
HXLINE(  60)		this->add(this->cdShine2);
HXLINE(  68)		this->originalSize = ::Std_obj::_hx_int(this->coverArt->get_width());
HXLINE(  70)		this->setX(x);
HXLINE(  71)		this->setY(y);
            	}

Dynamic CDSprite_obj::__CreateEmpty() { return new CDSprite_obj; }

void *CDSprite_obj::_hx_vtable = 0;

Dynamic CDSprite_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CDSprite_obj > _hx_result = new CDSprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool CDSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7ccf8994) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x288ce903) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x288ce903;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	} else {
		return inClassId==(int)0x7dab0655 || inClassId==(int)0x7f960d22;
	}
}

void CDSprite_obj::setX(Float newX){
            	HX_STACKFRAME(&_hx_pos_211f73d1ecdaa16e_74_setX)
HXLINE(  75)		this->set_x(newX);
HXLINE(  76)		this->coverArt->set_x(this->x);
HXLINE(  77)		this->cdShine1->set_x(this->x);
HXLINE(  78)		this->cdShine2->set_x(this->x);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CDSprite_obj,setX,(void))

void CDSprite_obj::setY(Float newY){
            	HX_STACKFRAME(&_hx_pos_211f73d1ecdaa16e_81_setY)
HXLINE(  82)		this->set_y(newY);
HXLINE(  83)		this->coverArt->set_y(this->y);
HXLINE(  84)		this->cdShine1->set_y(this->y);
HXLINE(  85)		this->cdShine2->set_y(this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CDSprite_obj,setY,(void))

void CDSprite_obj::tweenScale( ::Dynamic __o_shrink){
            		 ::Dynamic shrink = __o_shrink;
            		if (::hx::IsNull(__o_shrink)) shrink = false;
            	HX_STACKFRAME(&_hx_pos_211f73d1ecdaa16e_88_tweenScale)
HXLINE(  89)		Float targetScale;
HXDLIN(  89)		if (( (bool)(shrink) )) {
HXLINE(  89)			targetScale = ((Float)0.66);
            		}
            		else {
HXLINE(  89)			targetScale = ((Float)1.0);
            		}
HXLINE(  92)		bool _hx_tmp;
HXDLIN(  92)		if (!(( (bool)(shrink) ))) {
HXLINE(  92)			Float _hx_tmp1 = this->coverArt->get_width();
HXDLIN(  92)			_hx_tmp = (_hx_tmp1 >= this->originalSize);
            		}
            		else {
HXLINE(  92)			_hx_tmp = false;
            		}
HXDLIN(  92)		if (_hx_tmp) {
HXLINE(  93)			return;
            		}
HXLINE(  95)		int newSize = ::Std_obj::_hx_int((( (Float)(this->originalSize) ) * targetScale));
HXLINE(  97)		{
HXLINE(  97)			{
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,sprite) HXARGC(1)
            				void _hx_run(Float val){
            					HX_STACKFRAME(&_hx_pos_211f73d1ecdaa16e_98_tweenScale)
HXLINE(  99)					int intVal = ::Std_obj::_hx_int(val);
HXLINE( 100)					sprite->setGraphicSize(intVal,null());
HXLINE( 101)					sprite->updateHitbox();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(  97)				 ::flixel::FlxSprite sprite = this->coverArt;
HXLINE(  98)				Float _hx_tmp2 = sprite->get_width();
HXDLIN(  98)				::flixel::tweens::FlxTween_obj::num(_hx_tmp2,( (Float)(newSize) ),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::sineInOut_dyn())), ::Dynamic(new _hx_Closure_0(sprite)));
            			}
HXLINE(  97)			{
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,sprite1) HXARGC(1)
            				void _hx_run(Float val){
            					HX_STACKFRAME(&_hx_pos_211f73d1ecdaa16e_98_tweenScale)
HXLINE(  99)					int intVal = ::Std_obj::_hx_int(val);
HXLINE( 100)					sprite1->setGraphicSize(intVal,null());
HXLINE( 101)					sprite1->updateHitbox();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(  97)				 ::flixel::FlxSprite sprite1 = this->cdShine1;
HXLINE(  98)				Float _hx_tmp3 = sprite1->get_width();
HXDLIN(  98)				::flixel::tweens::FlxTween_obj::num(_hx_tmp3,( (Float)(newSize) ),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::sineInOut_dyn())), ::Dynamic(new _hx_Closure_1(sprite1)));
            			}
HXLINE(  97)			{
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::flixel::FlxSprite,sprite2) HXARGC(1)
            				void _hx_run(Float val){
            					HX_STACKFRAME(&_hx_pos_211f73d1ecdaa16e_98_tweenScale)
HXLINE(  99)					int intVal = ::Std_obj::_hx_int(val);
HXLINE( 100)					sprite2->setGraphicSize(intVal,null());
HXLINE( 101)					sprite2->updateHitbox();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(  97)				 ::flixel::FlxSprite sprite2 = this->cdShine2;
HXLINE(  98)				Float _hx_tmp4 = sprite2->get_width();
HXDLIN(  98)				::flixel::tweens::FlxTween_obj::num(_hx_tmp4,( (Float)(newSize) ),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::sineInOut_dyn())), ::Dynamic(new _hx_Closure_2(sprite2)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CDSprite_obj,tweenScale,(void))

void CDSprite_obj::spinCD(Float duration){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::objects::CDSprite,_gthis) HXARGC(1)
            		void _hx_run(Float val){
            			HX_STACKFRAME(&_hx_pos_211f73d1ecdaa16e_113_spinCD)
HXLINE( 113)			_gthis->coverArt->set_angle(val);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_211f73d1ecdaa16e_107_spinCD)
HXDLIN( 107)		 ::objects::CDSprite _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 108)		if (::hx::IsNotNull( this->spinTween )) {
HXLINE( 109)			this->spinTween->cancel();
            		}
HXLINE( 112)		this->spinTween = ::flixel::tweens::FlxTween_obj::num(( (Float)(0) ),( (Float)(360) ),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::linear_dyn())
            			->setFixed(1,HX_("type",ba,f2,08,4d),2)), ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(CDSprite_obj,spinCD,(void))

void CDSprite_obj::stopSpinCD(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::objects::CDSprite,_gthis) HXARGC(1)
            		void _hx_run(Float val){
            			HX_STACKFRAME(&_hx_pos_211f73d1ecdaa16e_125_stopSpinCD)
HXLINE( 125)			_gthis->coverArt->set_angle(val);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_211f73d1ecdaa16e_117_stopSpinCD)
HXDLIN( 117)		 ::objects::CDSprite _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 118)		if (::hx::IsNotNull( this->spinTween )) {
HXLINE( 119)			this->spinTween->cancel();
HXLINE( 120)			this->spinTween = null();
HXLINE( 121)			this->tweenScale(true);
            		}
HXLINE( 124)		::flixel::tweens::FlxTween_obj::num(this->coverArt->angle,( (Float)(0) ),((Float)0.66), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())), ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CDSprite_obj,stopSpinCD,(void))

::String CDSprite_obj::getName(){
            	HX_GC_STACKFRAME(&_hx_pos_211f73d1ecdaa16e_129_getName)
HXLINE( 130)		if (::StringTools_obj::endsWith(this->songName,HX_("-dox",80,dc,0a,1e))) {
HXLINE( 131)			this->songName = this->songName.substr(0,(this->songName.length - 4));
            		}
HXLINE( 133)		this->songName =  ::EReg_obj::__alloc( HX_CTX ,HX_("[-]",ab,34,45,00),HX_("g",67,00,00,00))->replace(this->songName,HX_(" ",20,00,00,00));
HXLINE( 134)		this->name = this->songName.toUpperCase();
HXLINE( 136)		return this->name;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CDSprite_obj,getName,return )

::String CDSprite_obj::getTrueName(){
            	HX_STACKFRAME(&_hx_pos_211f73d1ecdaa16e_140_getTrueName)
HXDLIN( 140)		return this->songTrueName;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CDSprite_obj,getTrueName,return )

void CDSprite_obj::updateCover(){
            	HX_STACKFRAME(&_hx_pos_211f73d1ecdaa16e_144_updateCover)
HXDLIN( 144)		 ::flixel::FlxSprite _hx_tmp = this->coverArt;
HXDLIN( 144)		_hx_tmp->loadGraphic(::backend::Paths_obj::image(((HX_("freeplay/cd/",3f,de,87,d0) + this->formatedCoverArt) + HX_("CD",a1,3a,00,00)),null(),null()),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CDSprite_obj,updateCover,(void))


::hx::ObjectPtr< CDSprite_obj > CDSprite_obj::__new(Float x,Float y,::String coverart) {
	::hx::ObjectPtr< CDSprite_obj > __this = new CDSprite_obj();
	__this->__construct(x,y,coverart);
	return __this;
}

::hx::ObjectPtr< CDSprite_obj > CDSprite_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y,::String coverart) {
	CDSprite_obj *__this = (CDSprite_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CDSprite_obj), true, "objects.CDSprite"));
	*(void **)__this = CDSprite_obj::_hx_vtable;
	__this->__construct(x,y,coverart);
	return __this;
}

CDSprite_obj::CDSprite_obj()
{
}

void CDSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CDSprite);
	HX_MARK_MEMBER_NAME(coverArt,"coverArt");
	HX_MARK_MEMBER_NAME(cdShine1,"cdShine1");
	HX_MARK_MEMBER_NAME(cdShine2,"cdShine2");
	HX_MARK_MEMBER_NAME(spinTween,"spinTween");
	HX_MARK_MEMBER_NAME(formatedCoverArt,"formatedCoverArt");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(songName,"songName");
	HX_MARK_MEMBER_NAME(songTrueName,"songTrueName");
	HX_MARK_MEMBER_NAME(originalSize,"originalSize");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CDSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(coverArt,"coverArt");
	HX_VISIT_MEMBER_NAME(cdShine1,"cdShine1");
	HX_VISIT_MEMBER_NAME(cdShine2,"cdShine2");
	HX_VISIT_MEMBER_NAME(spinTween,"spinTween");
	HX_VISIT_MEMBER_NAME(formatedCoverArt,"formatedCoverArt");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(songName,"songName");
	HX_VISIT_MEMBER_NAME(songTrueName,"songTrueName");
	HX_VISIT_MEMBER_NAME(originalSize,"originalSize");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CDSprite_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"setX") ) { return ::hx::Val( setX_dyn() ); }
		if (HX_FIELD_EQ(inName,"setY") ) { return ::hx::Val( setY_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"spinCD") ) { return ::hx::Val( spinCD_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return ::hx::Val( getName_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"coverArt") ) { return ::hx::Val( coverArt ); }
		if (HX_FIELD_EQ(inName,"cdShine1") ) { return ::hx::Val( cdShine1 ); }
		if (HX_FIELD_EQ(inName,"cdShine2") ) { return ::hx::Val( cdShine2 ); }
		if (HX_FIELD_EQ(inName,"songName") ) { return ::hx::Val( songName ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"spinTween") ) { return ::hx::Val( spinTween ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tweenScale") ) { return ::hx::Val( tweenScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"stopSpinCD") ) { return ::hx::Val( stopSpinCD_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getTrueName") ) { return ::hx::Val( getTrueName_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateCover") ) { return ::hx::Val( updateCover_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"songTrueName") ) { return ::hx::Val( songTrueName ); }
		if (HX_FIELD_EQ(inName,"originalSize") ) { return ::hx::Val( originalSize ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"formatedCoverArt") ) { return ::hx::Val( formatedCoverArt ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CDSprite_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"coverArt") ) { coverArt=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cdShine1") ) { cdShine1=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cdShine2") ) { cdShine2=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songName") ) { songName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"spinTween") ) { spinTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"songTrueName") ) { songTrueName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"originalSize") ) { originalSize=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"formatedCoverArt") ) { formatedCoverArt=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CDSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("coverArt",6c,d3,71,c7));
	outFields->push(HX_("cdShine1",e7,03,eb,b3));
	outFields->push(HX_("cdShine2",e8,03,eb,b3));
	outFields->push(HX_("spinTween",49,99,b1,7e));
	outFields->push(HX_("formatedCoverArt",e2,38,92,8d));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("songName",c0,d0,d7,36));
	outFields->push(HX_("songTrueName",ae,41,be,54));
	outFields->push(HX_("originalSize",b2,fd,b3,25));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CDSprite_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CDSprite_obj,coverArt),HX_("coverArt",6c,d3,71,c7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CDSprite_obj,cdShine1),HX_("cdShine1",e7,03,eb,b3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CDSprite_obj,cdShine2),HX_("cdShine2",e8,03,eb,b3)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(CDSprite_obj,spinTween),HX_("spinTween",49,99,b1,7e)},
	{::hx::fsString,(int)offsetof(CDSprite_obj,formatedCoverArt),HX_("formatedCoverArt",e2,38,92,8d)},
	{::hx::fsString,(int)offsetof(CDSprite_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsString,(int)offsetof(CDSprite_obj,songName),HX_("songName",c0,d0,d7,36)},
	{::hx::fsString,(int)offsetof(CDSprite_obj,songTrueName),HX_("songTrueName",ae,41,be,54)},
	{::hx::fsInt,(int)offsetof(CDSprite_obj,originalSize),HX_("originalSize",b2,fd,b3,25)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CDSprite_obj_sStaticStorageInfo = 0;
#endif

static ::String CDSprite_obj_sMemberFields[] = {
	HX_("coverArt",6c,d3,71,c7),
	HX_("cdShine1",e7,03,eb,b3),
	HX_("cdShine2",e8,03,eb,b3),
	HX_("spinTween",49,99,b1,7e),
	HX_("formatedCoverArt",e2,38,92,8d),
	HX_("name",4b,72,ff,48),
	HX_("songName",c0,d0,d7,36),
	HX_("songTrueName",ae,41,be,54),
	HX_("originalSize",b2,fd,b3,25),
	HX_("setX",76,92,50,4c),
	HX_("setY",77,92,50,4c),
	HX_("tweenScale",1f,f0,12,30),
	HX_("spinCD",e3,90,a6,bd),
	HX_("stopSpinCD",85,e2,55,e7),
	HX_("getName",01,22,82,1b),
	HX_("getTrueName",6f,c7,70,b8),
	HX_("updateCover",6e,68,fc,2f),
	::String(null()) };

::hx::Class CDSprite_obj::__mClass;

void CDSprite_obj::__register()
{
	CDSprite_obj _hx_dummy;
	CDSprite_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.CDSprite",60,74,a1,9d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CDSprite_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CDSprite_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CDSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CDSprite_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace objects
