// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_objects_MusicPlayer
#include <objects/MusicPlayer.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_states_FreeplayState
#include <states/FreeplayState.h>
#endif
#ifndef INCLUDED_states_SongMetadata
#include <states/SongMetadata.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c56a0156c6377e6f_13_new,"objects.MusicPlayer","new",0x136c021e,"objects.MusicPlayer.new","objects/MusicPlayer.hx",13,0x1ff9cad3)
HX_LOCAL_STACK_FRAME(_hx_pos_c56a0156c6377e6f_85_update,"objects.MusicPlayer","update",0x53f87f0b,"objects.MusicPlayer.update","objects/MusicPlayer.hx",85,0x1ff9cad3)
HX_LOCAL_STACK_FRAME(_hx_pos_c56a0156c6377e6f_214_setVocalsTime,"objects.MusicPlayer","setVocalsTime",0x50c4d90b,"objects.MusicPlayer.setVocalsTime","objects/MusicPlayer.hx",214,0x1ff9cad3)
HX_LOCAL_STACK_FRAME(_hx_pos_c56a0156c6377e6f_223_pauseOrResume,"objects.MusicPlayer","pauseOrResume",0x6f04bf84,"objects.MusicPlayer.pauseOrResume","objects/MusicPlayer.hx",223,0x1ff9cad3)
HX_LOCAL_STACK_FRAME(_hx_pos_c56a0156c6377e6f_245_switchPlayMusic,"objects.MusicPlayer","switchPlayMusic",0x8d9c8c3b,"objects.MusicPlayer.switchPlayMusic","objects/MusicPlayer.hx",245,0x1ff9cad3)
HX_LOCAL_STACK_FRAME(_hx_pos_c56a0156c6377e6f_284_updatePlaybackTxt,"objects.MusicPlayer","updatePlaybackTxt",0xe05b45ca,"objects.MusicPlayer.updatePlaybackTxt","objects/MusicPlayer.hx",284,0x1ff9cad3)
HX_LOCAL_STACK_FRAME(_hx_pos_c56a0156c6377e6f_300_positionSong,"objects.MusicPlayer","positionSong",0x34d29fa0,"objects.MusicPlayer.positionSong","objects/MusicPlayer.hx",300,0x1ff9cad3)
HX_LOCAL_STACK_FRAME(_hx_pos_c56a0156c6377e6f_345_updateTimeTxt,"objects.MusicPlayer","updateTimeTxt",0xbd041098,"objects.MusicPlayer.updateTimeTxt","objects/MusicPlayer.hx",345,0x1ff9cad3)
HX_LOCAL_STACK_FRAME(_hx_pos_c56a0156c6377e6f_351_setPlaybackRate,"objects.MusicPlayer","setPlaybackRate",0xd33be41b,"objects.MusicPlayer.setPlaybackRate","objects/MusicPlayer.hx",351,0x1ff9cad3)
HX_LOCAL_STACK_FRAME(_hx_pos_c56a0156c6377e6f_361_get_playing,"objects.MusicPlayer","get_playing",0xbf6f8f43,"objects.MusicPlayer.get_playing","objects/MusicPlayer.hx",361,0x1ff9cad3)
HX_LOCAL_STACK_FRAME(_hx_pos_c56a0156c6377e6f_365_set_playbackRate,"objects.MusicPlayer","set_playbackRate",0xa2ed241a,"objects.MusicPlayer.set_playbackRate","objects/MusicPlayer.hx",365,0x1ff9cad3)
namespace objects{

void MusicPlayer_obj::__construct( ::states::FreeplayState instance){
            	HX_GC_STACKFRAME(&_hx_pos_c56a0156c6377e6f_13_new)
HXLINE(  34)		this->playbackRate = ((Float)1);
HXLINE(  33)		this->holdPitchTime = ((Float)0);
HXLINE(  28)		this->playbackSymbols = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  20)		this->playingMusic = false;
HXLINE(  38)		super::__construct(null());
HXLINE(  40)		this->instance = instance;
HXLINE(  41)		this->controls = instance->get_controls();
HXLINE(  43)		Float xPos = (( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7));
HXLINE(  45)		this->songBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(xPos - ( (Float)(6) )),0,null())->makeGraphic(1,100,-16777216,null(),null());
HXLINE(  46)		this->songBG->set_alpha(((Float)0.6));
HXLINE(  47)		this->add(this->songBG);
HXLINE(  49)		this->playbackBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(xPos - ( (Float)(6) )),0,null())->makeGraphic(1,100,-16777216,null(),null());
HXLINE(  50)		this->playbackBG->set_alpha(((Float)0.6));
HXLINE(  51)		this->add(this->playbackBG);
HXLINE(  53)		this->songTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7)),5,0,HX_("",00,00,00,00),32,null());
HXLINE(  54)		 ::flixel::text::FlxText _hx_tmp = this->songTxt;
HXDLIN(  54)		::String key = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN(  54)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(  54)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXDLIN(  54)		if (::hx::IsNotNull( str )) {
HXLINE(  54)			key = str;
            		}
HXDLIN(  54)		::String folderKey = key;
HXDLIN(  54)		::String file = ::backend::Paths_obj::modFolders(folderKey);
HXDLIN(  54)		::String _hx_tmp1;
HXDLIN(  54)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE(  54)			_hx_tmp1 = file;
            		}
            		else {
HXLINE(  54)			_hx_tmp1 = (HX_("assets/",4c,2a,dc,36) + folderKey);
            		}
HXDLIN(  54)		_hx_tmp->setFormat(_hx_tmp1,32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE(  55)		this->add(this->songTxt);
HXLINE(  57)		this->timeTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,xPos,(this->songTxt->y + 60),0,HX_("",00,00,00,00),32,null());
HXLINE(  58)		 ::flixel::text::FlxText _hx_tmp2 = this->timeTxt;
HXDLIN(  58)		::String key1 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN(  58)		::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN(  58)		::String str1 = ( ( ::haxe::ds::StringMap)(this2) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN(  58)		if (::hx::IsNotNull( str1 )) {
HXLINE(  58)			key1 = str1;
            		}
HXDLIN(  58)		::String folderKey1 = key1;
HXDLIN(  58)		::String file1 = ::backend::Paths_obj::modFolders(folderKey1);
HXDLIN(  58)		::String _hx_tmp3;
HXDLIN(  58)		if (::sys::FileSystem_obj::exists(file1)) {
HXLINE(  58)			_hx_tmp3 = file1;
            		}
            		else {
HXLINE(  58)			_hx_tmp3 = (HX_("assets/",4c,2a,dc,36) + folderKey1);
            		}
HXDLIN(  58)		_hx_tmp2->setFormat(_hx_tmp3,32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE(  59)		this->add(this->timeTxt);
HXLINE(  61)		{
HXLINE(  62)			{
HXLINE(  63)				 ::flixel::text::FlxText text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  64)				::String key2 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN(  64)				::Dynamic this3 = ::backend::Language_obj::phrases;
HXDLIN(  64)				::String str2 = ( ( ::haxe::ds::StringMap)(this3) )->get_string(::StringTools_obj::trim(key2).toLowerCase());
HXDLIN(  64)				if (::hx::IsNotNull( str2 )) {
HXLINE(  64)					key2 = str2;
            				}
HXDLIN(  64)				::String folderKey2 = key2;
HXDLIN(  64)				::String file2 = ::backend::Paths_obj::modFolders(folderKey2);
HXDLIN(  64)				::String _hx_tmp4;
HXDLIN(  64)				if (::sys::FileSystem_obj::exists(file2)) {
HXLINE(  64)					_hx_tmp4 = file2;
            				}
            				else {
HXLINE(  64)					_hx_tmp4 = (HX_("assets/",4c,2a,dc,36) + folderKey2);
            				}
HXDLIN(  64)				text->setFormat(_hx_tmp4,32,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  65)				text->set_text(HX_("^",5e,00,00,00));
HXLINE(  68)				text->set_visible(false);
HXLINE(  69)				this->playbackSymbols->push(text);
HXLINE(  70)				this->add(text);
            			}
HXLINE(  62)			{
HXLINE(  63)				 ::flixel::text::FlxText text1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  64)				::String key3 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN(  64)				::Dynamic this4 = ::backend::Language_obj::phrases;
HXDLIN(  64)				::String str3 = ( ( ::haxe::ds::StringMap)(this4) )->get_string(::StringTools_obj::trim(key3).toLowerCase());
HXDLIN(  64)				if (::hx::IsNotNull( str3 )) {
HXLINE(  64)					key3 = str3;
            				}
HXDLIN(  64)				::String folderKey3 = key3;
HXDLIN(  64)				::String file3 = ::backend::Paths_obj::modFolders(folderKey3);
HXDLIN(  64)				::String _hx_tmp5;
HXDLIN(  64)				if (::sys::FileSystem_obj::exists(file3)) {
HXLINE(  64)					_hx_tmp5 = file3;
            				}
            				else {
HXLINE(  64)					_hx_tmp5 = (HX_("assets/",4c,2a,dc,36) + folderKey3);
            				}
HXDLIN(  64)				text1->setFormat(_hx_tmp5,32,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  65)				text1->set_text(HX_("^",5e,00,00,00));
HXLINE(  67)				text1->set_flipY(true);
HXLINE(  68)				text1->set_visible(false);
HXLINE(  69)				this->playbackSymbols->push(text1);
HXLINE(  70)				this->add(text1);
            			}
            		}
HXLINE(  73)		Float _hx_tmp6 = this->timeTxt->x;
HXDLIN(  73)		Float _hx_tmp7 = this->timeTxt->y;
HXDLIN(  73)		Float _hx_tmp8 = (_hx_tmp7 + this->timeTxt->get_height());
HXDLIN(  73)		int _hx_tmp9 = ::Std_obj::_hx_int(this->timeTxt->get_width());
HXDLIN(  73)		this->progressBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp6,_hx_tmp8,::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn(),_hx_tmp9,8,null(),HX_("",00,00,00,00),0,::Math_obj::POSITIVE_INFINITY,null());
HXLINE(  74)		this->progressBar->createFilledBar(-1,-16777216,null(),null());
HXLINE(  75)		this->add(this->progressBar);
HXLINE(  77)		this->playbackTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.6)),20,0,HX_("",00,00,00,00),32,null());
HXLINE(  78)		 ::flixel::text::FlxText _hx_tmp10 = this->playbackTxt;
HXDLIN(  78)		::String key4 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN(  78)		::Dynamic this5 = ::backend::Language_obj::phrases;
HXDLIN(  78)		::String str4 = ( ( ::haxe::ds::StringMap)(this5) )->get_string(::StringTools_obj::trim(key4).toLowerCase());
HXDLIN(  78)		if (::hx::IsNotNull( str4 )) {
HXLINE(  78)			key4 = str4;
            		}
HXDLIN(  78)		::String folderKey4 = key4;
HXDLIN(  78)		::String file4 = ::backend::Paths_obj::modFolders(folderKey4);
HXDLIN(  78)		::String _hx_tmp11;
HXDLIN(  78)		if (::sys::FileSystem_obj::exists(file4)) {
HXLINE(  78)			_hx_tmp11 = file4;
            		}
            		else {
HXLINE(  78)			_hx_tmp11 = (HX_("assets/",4c,2a,dc,36) + folderKey4);
            		}
HXDLIN(  78)		_hx_tmp10->setFormat(_hx_tmp11,32,-1,null(),null(),null(),null());
HXLINE(  79)		this->add(this->playbackTxt);
HXLINE(  81)		this->switchPlayMusic();
            	}

Dynamic MusicPlayer_obj::__CreateEmpty() { return new MusicPlayer_obj; }

void *MusicPlayer_obj::_hx_vtable = 0;

Dynamic MusicPlayer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MusicPlayer_obj > _hx_result = new MusicPlayer_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MusicPlayer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x65724c72) {
		if (inClassId<=(int)0x62817b24) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x62817b24;
		} else {
			return inClassId==(int)0x65724c72;
		}
	} else {
		return inClassId==(int)0x7ccf8994;
	}
}

void MusicPlayer_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_c56a0156c6377e6f_85_update)
HXLINE(  86)		this->super::update(elapsed);
HXLINE(  88)		if (!(this->playingMusic)) {
HXLINE(  90)			return;
            		}
HXLINE(  93)		::String songName = this->instance->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->songName;
HXLINE(  94)		bool _hx_tmp;
HXDLIN(  94)		if (this->get_playing()) {
HXLINE(  94)			_hx_tmp = !(this->wasPlaying);
            		}
            		else {
HXLINE(  94)			_hx_tmp = false;
            		}
HXDLIN(  94)		if (_hx_tmp) {
HXLINE(  95)			 ::flixel::text::FlxText _hx_tmp1 = this->songTxt;
HXDLIN(  95)			::cpp::VirtualArray values = ::cpp::VirtualArray_obj::__new(1)->init(0,songName);
HXDLIN(  95)			::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(  95)			 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN(  95)			::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(HX_("musicplayer_playing",b5,e4,39,ae),HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN(  95)			if (::hx::IsNull( str )) {
HXLINE(  62)				str = HX_("PLAYING: {1}",73,5b,b5,cf);
            			}
HXLINE(  95)			if (::hx::IsNull( str )) {
HXLINE(  68)				str = HX_("musicplayer_playing",b5,e4,39,ae);
            			}
HXLINE(  95)			if (::hx::IsNotNull( values )) {
HXLINE(  95)				int _g_current = 0;
HXDLIN(  95)				::cpp::VirtualArray _g_array = values;
HXDLIN(  95)				while((_g_current < _g_array->get_length())){
HXLINE(  95)					 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN(  95)					_g_current = (_g_current + 1);
HXDLIN(  95)					int _g_key = (_g_current - 1);
HXDLIN(  95)					int num = _g_key;
HXDLIN(  95)					 ::Dynamic value = _g_value;
HXLINE(  72)					str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            				}
            			}
HXLINE(  95)			_hx_tmp1->set_text(str);
            		}
            		else {
HXLINE(  97)			 ::flixel::text::FlxText _hx_tmp2 = this->songTxt;
HXDLIN(  97)			::cpp::VirtualArray values1 = ::cpp::VirtualArray_obj::__new(1)->init(0,songName);
HXDLIN(  97)			::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN(  97)			 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN(  97)			::String str1 = ( ( ::haxe::ds::StringMap)(this2) )->get_string(::StringTools_obj::trim(hideChars1->replace(::StringTools_obj::replace(HX_("musicplayer_paused",47,f1,fc,94),HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN(  97)			if (::hx::IsNull( str1 )) {
HXLINE(  62)				str1 = HX_("PLAYING: {1} (PAUSED)",e0,3e,d2,5d);
            			}
HXLINE(  97)			if (::hx::IsNull( str1 )) {
HXLINE(  68)				str1 = HX_("musicplayer_paused",47,f1,fc,94);
            			}
HXLINE(  97)			if (::hx::IsNotNull( values1 )) {
HXLINE(  97)				int _g_current1 = 0;
HXDLIN(  97)				::cpp::VirtualArray _g_array1 = values1;
HXDLIN(  97)				while((_g_current1 < _g_array1->get_length())){
HXLINE(  97)					 ::Dynamic _g_value1 = _g_array1->__get(_g_current1);
HXDLIN(  97)					_g_current1 = (_g_current1 + 1);
HXDLIN(  97)					int _g_key1 = (_g_current1 - 1);
HXDLIN(  97)					int num1 = _g_key1;
HXDLIN(  97)					 ::Dynamic value1 = _g_value1;
HXLINE(  72)					str1 = ::StringTools_obj::replace(str1,((HX_("{",7b,00,00,00) + (num1 + 1)) + HX_("}",7d,00,00,00)),( (::String)(value1) ));
            				}
            			}
HXLINE(  97)			_hx_tmp2->set_text(str1);
            		}
HXLINE( 101)		if (this->controls->get_UI_LEFT_P()) {
HXLINE( 103)			if (this->get_playing()) {
HXLINE( 104)				this->wasPlaying = true;
            			}
HXLINE( 106)			this->pauseOrResume(null());
HXLINE( 108)			this->curTime = (::flixel::FlxG_obj::sound->music->_time - ( (Float)(1000) ));
HXLINE( 109)			this->instance->holdTime = ( (Float)(0) );
HXLINE( 111)			if ((this->curTime < 0)) {
HXLINE( 112)				this->curTime = ( (Float)(0) );
            			}
HXLINE( 114)			::flixel::FlxG_obj::sound->music->set_time(this->curTime);
HXLINE( 115)			this->setVocalsTime(this->curTime);
            		}
HXLINE( 117)		if (this->controls->get_UI_RIGHT_P()) {
HXLINE( 119)			if (this->get_playing()) {
HXLINE( 120)				this->wasPlaying = true;
            			}
HXLINE( 122)			this->pauseOrResume(null());
HXLINE( 124)			this->curTime = (::flixel::FlxG_obj::sound->music->_time + 1000);
HXLINE( 125)			this->instance->holdTime = ( (Float)(0) );
HXLINE( 127)			if ((this->curTime > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE( 128)				this->curTime = ::flixel::FlxG_obj::sound->music->_length;
            			}
HXLINE( 130)			::flixel::FlxG_obj::sound->music->set_time(this->curTime);
HXLINE( 131)			this->setVocalsTime(this->curTime);
            		}
HXLINE( 134)		bool _hx_tmp3;
HXDLIN( 134)		if (!(this->controls->get_UI_LEFT())) {
HXLINE( 134)			_hx_tmp3 = this->controls->get_UI_RIGHT();
            		}
            		else {
HXLINE( 134)			_hx_tmp3 = true;
            		}
HXDLIN( 134)		if (_hx_tmp3) {
HXLINE( 136)			 ::states::FreeplayState fh = this->instance;
HXDLIN( 136)			fh->holdTime = (fh->holdTime + elapsed);
HXLINE( 137)			if ((this->instance->holdTime > ((Float)0.5))) {
HXLINE( 139)				 ::objects::MusicPlayer _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 139)				Float _hx_tmp5 = _hx_tmp4->curTime;
HXDLIN( 139)				int _hx_tmp6;
HXDLIN( 139)				if (this->controls->get_UI_LEFT()) {
HXLINE( 139)					_hx_tmp6 = -1;
            				}
            				else {
HXLINE( 139)					_hx_tmp6 = 1;
            				}
HXDLIN( 139)				_hx_tmp4->curTime = (_hx_tmp5 + ((( (Float)(40000) ) * elapsed) * ( (Float)(_hx_tmp6) )));
            			}
HXLINE( 142)			Float difference = ::Math_obj::abs((this->curTime - ::flixel::FlxG_obj::sound->music->_time));
HXLINE( 143)			if (((this->curTime + difference) > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE( 143)				this->curTime = ::flixel::FlxG_obj::sound->music->_length;
            			}
            			else {
HXLINE( 144)				if (((this->curTime - difference) < 0)) {
HXLINE( 144)					this->curTime = ( (Float)(0) );
            				}
            			}
HXLINE( 146)			::flixel::FlxG_obj::sound->music->set_time(this->curTime);
HXLINE( 147)			this->setVocalsTime(this->curTime);
            		}
HXLINE( 150)		bool _hx_tmp7;
HXDLIN( 150)		if (!(this->controls->get_UI_LEFT_R())) {
HXLINE( 150)			_hx_tmp7 = this->controls->get_UI_RIGHT_R();
            		}
            		else {
HXLINE( 150)			_hx_tmp7 = true;
            		}
HXDLIN( 150)		if (_hx_tmp7) {
HXLINE( 152)			::flixel::FlxG_obj::sound->music->set_time(this->curTime);
HXLINE( 153)			this->setVocalsTime(this->curTime);
HXLINE( 155)			if (this->wasPlaying) {
HXLINE( 157)				this->pauseOrResume(true);
HXLINE( 158)				this->wasPlaying = false;
            			}
            		}
HXLINE( 161)		if (this->controls->get_UI_UP_P()) {
HXLINE( 163)			this->holdPitchTime = ( (Float)(0) );
HXLINE( 164)			this->set_playbackRate((this->playbackRate + ((Float)0.05)));
HXLINE( 165)			this->setPlaybackRate();
            		}
            		else {
HXLINE( 167)			if (this->controls->get_UI_DOWN_P()) {
HXLINE( 169)				this->holdPitchTime = ( (Float)(0) );
HXLINE( 170)				this->set_playbackRate((this->playbackRate - ((Float)0.05)));
HXLINE( 171)				this->setPlaybackRate();
            			}
            		}
HXLINE( 173)		bool _hx_tmp8;
HXDLIN( 173)		if (!(this->controls->get_UI_DOWN())) {
HXLINE( 173)			_hx_tmp8 = this->controls->get_UI_UP();
            		}
            		else {
HXLINE( 173)			_hx_tmp8 = true;
            		}
HXDLIN( 173)		if (_hx_tmp8) {
HXLINE( 175)			 ::objects::MusicPlayer _hx_tmp9 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 175)			_hx_tmp9->holdPitchTime = (_hx_tmp9->holdPitchTime + elapsed);
HXLINE( 176)			if ((this->holdPitchTime > ((Float)0.6))) {
HXLINE( 178)				Float _hx_tmp10 = this->playbackRate;
HXDLIN( 178)				int _hx_tmp11;
HXDLIN( 178)				if (this->controls->get_UI_UP()) {
HXLINE( 178)					_hx_tmp11 = 1;
            				}
            				else {
HXLINE( 178)					_hx_tmp11 = -1;
            				}
HXDLIN( 178)				this->set_playbackRate((_hx_tmp10 + (((Float)0.05) * ( (Float)(_hx_tmp11) ))));
HXLINE( 179)				this->setPlaybackRate();
            			}
            		}
HXLINE( 183)		if (this->controls->get_RESET()) {
HXLINE( 185)			this->set_playbackRate(( (Float)(1) ));
HXLINE( 186)			this->setPlaybackRate();
HXLINE( 188)			::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
HXLINE( 189)			this->setVocalsTime(( (Float)(0) ));
            		}
HXLINE( 192)		if (this->get_playing()) {
HXLINE( 194)			if (::hx::IsNotNull( ::states::FreeplayState_obj::vocals )) {
HXLINE( 195)				Float _hx_tmp12;
HXDLIN( 195)				if ((::states::FreeplayState_obj::vocals->_length > ::flixel::FlxG_obj::sound->music->_time)) {
HXLINE( 195)					_hx_tmp12 = ((Float)0.8);
            				}
            				else {
HXLINE( 195)					_hx_tmp12 = ( (Float)(0) );
            				}
HXDLIN( 195)				::states::FreeplayState_obj::vocals->set_volume(_hx_tmp12);
            			}
HXLINE( 196)			if (::hx::IsNotNull( ::states::FreeplayState_obj::opponentVocals )) {
HXLINE( 197)				Float _hx_tmp13;
HXDLIN( 197)				if ((::states::FreeplayState_obj::opponentVocals->_length > ::flixel::FlxG_obj::sound->music->_time)) {
HXLINE( 197)					_hx_tmp13 = ((Float)0.8);
            				}
            				else {
HXLINE( 197)					_hx_tmp13 = ( (Float)(0) );
            				}
HXDLIN( 197)				::states::FreeplayState_obj::opponentVocals->set_volume(_hx_tmp13);
            			}
HXLINE( 199)			bool _hx_tmp14;
HXDLIN( 199)			bool _hx_tmp15;
HXDLIN( 199)			bool _hx_tmp16;
HXDLIN( 199)			if (::hx::IsNotNull( ::states::FreeplayState_obj::vocals )) {
HXLINE( 199)				_hx_tmp16 = (::states::FreeplayState_obj::vocals->_length > ::flixel::FlxG_obj::sound->music->_time);
            			}
            			else {
HXLINE( 199)				_hx_tmp16 = false;
            			}
HXDLIN( 199)			if (_hx_tmp16) {
HXLINE( 199)				_hx_tmp15 = (::Math_obj::abs((::flixel::FlxG_obj::sound->music->_time - ::states::FreeplayState_obj::vocals->_time)) >= 25);
            			}
            			else {
HXLINE( 199)				_hx_tmp15 = false;
            			}
HXDLIN( 199)			if (!(_hx_tmp15)) {
HXLINE( 200)				bool _hx_tmp17;
HXDLIN( 200)				if (::hx::IsNotNull( ::states::FreeplayState_obj::opponentVocals )) {
HXLINE( 200)					_hx_tmp17 = (::states::FreeplayState_obj::opponentVocals->_length > ::flixel::FlxG_obj::sound->music->_time);
            				}
            				else {
HXLINE( 200)					_hx_tmp17 = false;
            				}
HXDLIN( 200)				if (_hx_tmp17) {
HXLINE( 199)					_hx_tmp14 = (::Math_obj::abs((::flixel::FlxG_obj::sound->music->_time - ::states::FreeplayState_obj::opponentVocals->_time)) >= 25);
            				}
            				else {
HXLINE( 199)					_hx_tmp14 = false;
            				}
            			}
            			else {
HXLINE( 199)				_hx_tmp14 = true;
            			}
HXDLIN( 199)			if (_hx_tmp14) {
HXLINE( 202)				this->pauseOrResume(null());
HXLINE( 203)				this->setVocalsTime(::flixel::FlxG_obj::sound->music->_time);
HXLINE( 204)				this->pauseOrResume(true);
            			}
            		}
HXLINE( 208)		this->positionSong();
HXLINE( 209)		this->updateTimeTxt();
HXLINE( 210)		this->updatePlaybackTxt();
            	}


void MusicPlayer_obj::setVocalsTime(Float time){
            	HX_STACKFRAME(&_hx_pos_c56a0156c6377e6f_214_setVocalsTime)
HXLINE( 215)		bool _hx_tmp;
HXDLIN( 215)		if (::hx::IsNotNull( ::states::FreeplayState_obj::vocals )) {
HXLINE( 215)			_hx_tmp = (::states::FreeplayState_obj::vocals->_length > time);
            		}
            		else {
HXLINE( 215)			_hx_tmp = false;
            		}
HXDLIN( 215)		if (_hx_tmp) {
HXLINE( 216)			::states::FreeplayState_obj::vocals->set_time(time);
            		}
HXLINE( 217)		bool _hx_tmp1;
HXDLIN( 217)		if (::hx::IsNotNull( ::states::FreeplayState_obj::opponentVocals )) {
HXLINE( 217)			_hx_tmp1 = (::states::FreeplayState_obj::opponentVocals->_length > time);
            		}
            		else {
HXLINE( 217)			_hx_tmp1 = false;
            		}
HXDLIN( 217)		if (_hx_tmp1) {
HXLINE( 218)			::states::FreeplayState_obj::opponentVocals->set_time(time);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MusicPlayer_obj,setVocalsTime,(void))

void MusicPlayer_obj::pauseOrResume(::hx::Null< bool >  __o_resume){
            		bool resume = __o_resume.Default(false);
            	HX_STACKFRAME(&_hx_pos_c56a0156c6377e6f_223_pauseOrResume)
HXDLIN( 223)		if (resume) {
HXLINE( 225)			if (::hx::IsNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE( 226)				::flixel::FlxG_obj::sound->music->resume();
            			}
HXLINE( 228)			bool _hx_tmp;
HXDLIN( 228)			bool _hx_tmp1;
HXDLIN( 228)			if (::hx::IsNotNull( ::states::FreeplayState_obj::vocals )) {
HXLINE( 228)				_hx_tmp1 = (::states::FreeplayState_obj::vocals->_length > ::flixel::FlxG_obj::sound->music->_time);
            			}
            			else {
HXLINE( 228)				_hx_tmp1 = false;
            			}
HXDLIN( 228)			if (_hx_tmp1) {
HXLINE( 228)				_hx_tmp = ::hx::IsNull( ::states::FreeplayState_obj::vocals->_channel );
            			}
            			else {
HXLINE( 228)				_hx_tmp = false;
            			}
HXDLIN( 228)			if (_hx_tmp) {
HXLINE( 229)				::states::FreeplayState_obj::vocals->resume();
            			}
HXLINE( 230)			bool _hx_tmp2;
HXDLIN( 230)			bool _hx_tmp3;
HXDLIN( 230)			if (::hx::IsNotNull( ::states::FreeplayState_obj::opponentVocals )) {
HXLINE( 230)				_hx_tmp3 = (::states::FreeplayState_obj::opponentVocals->_length > ::flixel::FlxG_obj::sound->music->_time);
            			}
            			else {
HXLINE( 230)				_hx_tmp3 = false;
            			}
HXDLIN( 230)			if (_hx_tmp3) {
HXLINE( 230)				_hx_tmp2 = ::hx::IsNull( ::states::FreeplayState_obj::opponentVocals->_channel );
            			}
            			else {
HXLINE( 230)				_hx_tmp2 = false;
            			}
HXDLIN( 230)			if (_hx_tmp2) {
HXLINE( 231)				::states::FreeplayState_obj::opponentVocals->resume();
            			}
            		}
            		else {
HXLINE( 235)			::flixel::FlxG_obj::sound->music->pause();
HXLINE( 237)			if (::hx::IsNotNull( ::states::FreeplayState_obj::vocals )) {
HXLINE( 238)				::states::FreeplayState_obj::vocals->pause();
            			}
HXLINE( 239)			if (::hx::IsNotNull( ::states::FreeplayState_obj::opponentVocals )) {
HXLINE( 240)				::states::FreeplayState_obj::opponentVocals->pause();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MusicPlayer_obj,pauseOrResume,(void))

void MusicPlayer_obj::switchPlayMusic(){
            	HX_GC_STACKFRAME(&_hx_pos_c56a0156c6377e6f_245_switchPlayMusic)
HXLINE( 246)		bool _hx_tmp;
HXDLIN( 246)		if (!(this->playingMusic)) {
HXLINE( 246)			_hx_tmp = ::backend::ClientPrefs_obj::data->autoPause;
            		}
            		else {
HXLINE( 246)			_hx_tmp = false;
            		}
HXDLIN( 246)		::flixel::FlxG_obj::autoPause = _hx_tmp;
HXLINE( 247)		this->set_active(this->set_visible(this->playingMusic));
HXLINE( 249)		 ::flixel::FlxSprite _hx_tmp1 = this->instance->scoreBG;
HXDLIN( 249)		 ::flixel::text::FlxText _hx_tmp2 = this->instance->diffText;
HXDLIN( 249)		_hx_tmp1->set_visible(_hx_tmp2->set_visible(this->instance->scoreText->set_visible(!(this->playingMusic))));
HXLINE( 250)		 ::flixel::text::FlxText _hx_tmp3 = this->songTxt;
HXDLIN( 250)		 ::flixel::text::FlxText _hx_tmp4 = this->timeTxt;
HXDLIN( 250)		 ::flixel::FlxSprite _hx_tmp5 = this->songBG;
HXDLIN( 250)		 ::flixel::text::FlxText _hx_tmp6 = this->playbackTxt;
HXDLIN( 250)		 ::flixel::FlxSprite _hx_tmp7 = this->playbackBG;
HXDLIN( 250)		_hx_tmp3->set_visible(_hx_tmp4->set_visible(_hx_tmp5->set_visible(_hx_tmp6->set_visible(_hx_tmp7->set_visible(this->progressBar->set_visible(this->playingMusic))))));
HXLINE( 252)		{
HXLINE( 252)			int _g = 0;
HXDLIN( 252)			::Array< ::Dynamic> _g1 = this->playbackSymbols;
HXDLIN( 252)			while((_g < _g1->length)){
HXLINE( 252)				 ::flixel::text::FlxText i = _g1->__get(_g).StaticCast<  ::flixel::text::FlxText >();
HXDLIN( 252)				_g = (_g + 1);
HXLINE( 253)				i->set_visible(this->playingMusic);
            			}
            		}
HXLINE( 255)		this->holdPitchTime = ( (Float)(0) );
HXLINE( 256)		this->instance->holdTime = ( (Float)(0) );
HXLINE( 257)		this->set_playbackRate(( (Float)(1) ));
HXLINE( 258)		this->updatePlaybackTxt();
HXLINE( 260)		if (this->playingMusic) {
HXLINE( 262)			 ::flixel::text::FlxText _hx_tmp8 = this->instance->bottomText;
HXDLIN( 262)			::cpp::VirtualArray values = null();
HXDLIN( 262)			::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 262)			 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN( 262)			::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(HX_("musicplayer_tip",22,47,66,42),HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN( 262)			if (::hx::IsNull( str )) {
HXLINE(  62)				str = HX_("Press SPACE to Pause / Press ESCAPE to Exit / Press R to Reset the Song",a8,28,7f,5e);
            			}
HXLINE( 262)			if (::hx::IsNull( str )) {
HXLINE(  68)				str = HX_("musicplayer_tip",22,47,66,42);
            			}
HXLINE( 262)			if (::hx::IsNotNull( values )) {
HXLINE( 262)				int _g_current = 0;
HXDLIN( 262)				::cpp::VirtualArray _g_array = values;
HXDLIN( 262)				while((_g_current < _g_array->get_length())){
HXLINE( 262)					 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN( 262)					_g_current = (_g_current + 1);
HXDLIN( 262)					int _g_key = (_g_current - 1);
HXDLIN( 262)					int num = _g_key;
HXDLIN( 262)					 ::Dynamic value = _g_value;
HXLINE(  72)					str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            				}
            			}
HXLINE( 262)			_hx_tmp8->set_text(str);
HXLINE( 263)			this->positionSong();
HXLINE( 265)			this->progressBar->setRange(( (Float)(0) ),::flixel::FlxG_obj::sound->music->_length);
HXLINE( 266)			this->progressBar->setParent(::flixel::FlxG_obj::sound->music,HX_("time",0d,cc,fc,4c),null(),null(),null());
HXLINE( 267)			this->progressBar->set_numDivisions(1600);
HXLINE( 269)			this->updateTimeTxt();
            		}
            		else {
HXLINE( 273)			this->progressBar->setRange(( (Float)(0) ),::Math_obj::POSITIVE_INFINITY);
HXLINE( 274)			this->progressBar->setParent(null(),HX_("",00,00,00,00),null(),null(),null());
HXLINE( 275)			this->progressBar->set_numDivisions(0);
HXLINE( 277)			this->instance->bottomText->set_text(this->instance->bottomString);
HXLINE( 278)			this->instance->positionHighscore();
            		}
HXLINE( 280)		this->progressBar->updateBar();
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicPlayer_obj,switchPlayMusic,(void))

void MusicPlayer_obj::updatePlaybackTxt(){
            	HX_STACKFRAME(&_hx_pos_c56a0156c6377e6f_284_updatePlaybackTxt)
HXLINE( 285)		::String text = HX_("",00,00,00,00);
HXLINE( 286)		if (::Std_obj::isOfType(this->playbackRate,::hx::ClassOf< int >())) {
HXLINE( 287)			text = (this->playbackRate + HX_(".00",ae,11,23,00));
            		}
            		else {
HXLINE( 290)			::String playbackRate = ::Std_obj::string(this->playbackRate);
HXLINE( 291)			if ((playbackRate.split(HX_(".",2e,00,00,00))->__get(1).length < 2)) {
HXLINE( 292)				playbackRate = (playbackRate + HX_("0",30,00,00,00));
            			}
HXLINE( 294)			text = playbackRate;
            		}
HXLINE( 296)		this->playbackTxt->set_text((text + HX_("x",78,00,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicPlayer_obj,updatePlaybackTxt,(void))

void MusicPlayer_obj::positionSong(){
            	HX_STACKFRAME(&_hx_pos_c56a0156c6377e6f_300_positionSong)
HXLINE( 301)		int length = this->instance->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->songName.length;
HXLINE( 302)		bool shortName = (length < 5);
HXLINE( 303)		 ::flixel::text::FlxText _hx_tmp = this->songTxt;
HXDLIN( 303)		int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 303)		_hx_tmp->set_x(((( (Float)(_hx_tmp1) ) - this->songTxt->get_width()) - ( (Float)(6) )));
HXLINE( 304)		if (shortName) {
HXLINE( 305)			 ::flixel::text::FlxText fh = this->songTxt;
HXDLIN( 305)			fh->set_x((fh->x - ( (Float)(((10 * length) - length)) )));
            		}
HXLINE( 306)		this->songBG->scale->set_x(((( (Float)(::flixel::FlxG_obj::width) ) - this->songTxt->x) + 12));
HXLINE( 307)		if (shortName) {
HXLINE( 308)			 ::flixel::FlxSprite fh1 = this->songBG;
HXDLIN( 308)			fh1->scale->set_x((fh1->scale->x + (6 * length)));
            		}
HXLINE( 309)		this->songBG->set_x((( (Float)(::flixel::FlxG_obj::width) ) - (this->songBG->scale->x / ( (Float)(2) ))));
HXLINE( 310)		 ::flixel::text::FlxText _hx_tmp2 = this->timeTxt;
HXDLIN( 310)		Float _hx_tmp3 = this->songBG->x;
HXDLIN( 310)		_hx_tmp2->set_x(( (Float)(::Std_obj::_hx_int((_hx_tmp3 + (this->songBG->get_width() / ( (Float)(2) ))))) ));
HXLINE( 311)		 ::flixel::text::FlxText fh2 = this->timeTxt;
HXDLIN( 311)		Float fh3 = fh2->x;
HXDLIN( 311)		fh2->set_x((fh3 - (this->timeTxt->get_width() / ( (Float)(2) ))));
HXLINE( 312)		if (shortName) {
HXLINE( 313)			 ::flixel::text::FlxText fh4 = this->timeTxt;
HXDLIN( 313)			fh4->set_x((fh4->x - ( (Float)((length - 5)) )));
            		}
HXLINE( 315)		{
HXLINE( 315)			 ::flixel::math::FlxBasePoint this1 = this->playbackBG->scale;
HXDLIN( 315)			this1->set_x((this->playbackTxt->get_width() + 30));
            		}
HXLINE( 316)		this->playbackBG->set_x((this->songBG->x - (this->songBG->scale->x / ( (Float)(2) ))));
HXLINE( 317)		 ::flixel::FlxSprite fh5 = this->playbackBG;
HXDLIN( 317)		fh5->set_x((fh5->x - this->playbackBG->scale->x));
HXLINE( 319)		 ::flixel::text::FlxText _hx_tmp4 = this->playbackTxt;
HXDLIN( 319)		Float _hx_tmp5 = this->playbackBG->x;
HXDLIN( 319)		_hx_tmp4->set_x((_hx_tmp5 - (this->playbackTxt->get_width() / ( (Float)(2) ))));
HXLINE( 320)		 ::flixel::text::FlxText _hx_tmp6 = this->playbackTxt;
HXDLIN( 320)		_hx_tmp6->set_y(this->playbackTxt->get_height());
HXLINE( 322)		 ::flixel::ui::FlxBar _hx_tmp7 = this->progressBar;
HXDLIN( 322)		_hx_tmp7->setGraphicSize(::Std_obj::_hx_int(this->songTxt->get_width()),5);
HXLINE( 323)		 ::flixel::ui::FlxBar _hx_tmp8 = this->progressBar;
HXDLIN( 323)		Float _hx_tmp9 = this->songTxt->y;
HXDLIN( 323)		_hx_tmp8->set_y(((_hx_tmp9 + this->songTxt->get_height()) + 10));
HXLINE( 324)		 ::flixel::ui::FlxBar _hx_tmp10 = this->progressBar;
HXDLIN( 324)		Float _hx_tmp11 = this->songTxt->x;
HXDLIN( 324)		_hx_tmp10->set_x(((_hx_tmp11 + (this->songTxt->get_width() / ( (Float)(2) ))) - ( (Float)(15) )));
HXLINE( 325)		if (shortName) {
HXLINE( 327)			 ::flixel::ui::FlxBar fh6 = this->progressBar;
HXDLIN( 327)			fh6->scale->set_x((fh6->scale->x + (( (Float)(length) ) / ( (Float)(2) ))));
HXLINE( 328)			 ::flixel::ui::FlxBar fh7 = this->progressBar;
HXDLIN( 328)			fh7->set_x((fh7->x - ( (Float)((length - 10)) )));
            		}
HXLINE( 331)		{
HXLINE( 332)			{
HXLINE( 333)				 ::flixel::text::FlxText text = this->playbackSymbols->__get(0).StaticCast<  ::flixel::text::FlxText >();
HXLINE( 334)				Float _hx_tmp12 = this->playbackTxt->x;
HXDLIN( 334)				text->set_x(((_hx_tmp12 + (this->playbackTxt->get_width() / ( (Float)(2) ))) - ( (Float)(10) )));
HXLINE( 335)				text->set_y(this->playbackTxt->y);
HXLINE( 338)				Float text1 = text->y;
HXDLIN( 338)				text->set_y((text1 - this->playbackTxt->get_height()));
            			}
HXLINE( 332)			{
HXLINE( 333)				 ::flixel::text::FlxText text2 = this->playbackSymbols->__get(1).StaticCast<  ::flixel::text::FlxText >();
HXLINE( 334)				Float _hx_tmp13 = this->playbackTxt->x;
HXDLIN( 334)				text2->set_x(((_hx_tmp13 + (this->playbackTxt->get_width() / ( (Float)(2) ))) - ( (Float)(10) )));
HXLINE( 335)				text2->set_y(this->playbackTxt->y);
HXLINE( 340)				Float text3 = text2->y;
HXDLIN( 340)				text2->set_y((text3 + this->playbackTxt->get_height()));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicPlayer_obj,positionSong,(void))

void MusicPlayer_obj::updateTimeTxt(){
            	HX_STACKFRAME(&_hx_pos_c56a0156c6377e6f_345_updateTimeTxt)
HXLINE( 346)		::String text = (::flixel::util::FlxStringUtil_obj::formatTime((::flixel::FlxG_obj::sound->music->_time / ( (Float)(1000) )),false) + HX_(" / ",31,71,18,00));
HXDLIN( 346)		::String text1 = (text + ::flixel::util::FlxStringUtil_obj::formatTime((::flixel::FlxG_obj::sound->music->_length / ( (Float)(1000) )),false));
HXLINE( 347)		this->timeTxt->set_text(((HX_("< ",64,34,00,00) + text1) + HX_(" >",1e,1c,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicPlayer_obj,updateTimeTxt,(void))

void MusicPlayer_obj::setPlaybackRate(){
            	HX_STACKFRAME(&_hx_pos_c56a0156c6377e6f_351_setPlaybackRate)
HXLINE( 352)		::flixel::FlxG_obj::sound->music->set_pitch(this->playbackRate);
HXLINE( 353)		if (::hx::IsNotNull( ::states::FreeplayState_obj::vocals )) {
HXLINE( 354)			::states::FreeplayState_obj::vocals->set_pitch(this->playbackRate);
            		}
HXLINE( 355)		if (::hx::IsNotNull( ::states::FreeplayState_obj::opponentVocals )) {
HXLINE( 356)			::states::FreeplayState_obj::opponentVocals->set_pitch(this->playbackRate);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicPlayer_obj,setPlaybackRate,(void))

bool MusicPlayer_obj::get_playing(){
            	HX_STACKFRAME(&_hx_pos_c56a0156c6377e6f_361_get_playing)
HXDLIN( 361)		return ::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel );
            	}


HX_DEFINE_DYNAMIC_FUNC0(MusicPlayer_obj,get_playing,return )

Float MusicPlayer_obj::set_playbackRate(Float value){
            	HX_STACKFRAME(&_hx_pos_c56a0156c6377e6f_365_set_playbackRate)
HXLINE( 366)		Float value1 = ::flixel::math::FlxMath_obj::roundDecimal(value,2);
HXLINE( 367)		if ((value1 > 3)) {
HXLINE( 367)			value1 = ( (Float)(3) );
            		}
            		else {
HXLINE( 368)			if ((value1 <= ((Float)0.25))) {
HXLINE( 368)				value1 = ((Float)0.25);
            			}
            		}
HXLINE( 369)		return (this->playbackRate = value1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MusicPlayer_obj,set_playbackRate,return )


::hx::ObjectPtr< MusicPlayer_obj > MusicPlayer_obj::__new( ::states::FreeplayState instance) {
	::hx::ObjectPtr< MusicPlayer_obj > __this = new MusicPlayer_obj();
	__this->__construct(instance);
	return __this;
}

::hx::ObjectPtr< MusicPlayer_obj > MusicPlayer_obj::__alloc(::hx::Ctx *_hx_ctx, ::states::FreeplayState instance) {
	MusicPlayer_obj *__this = (MusicPlayer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MusicPlayer_obj), true, "objects.MusicPlayer"));
	*(void **)__this = MusicPlayer_obj::_hx_vtable;
	__this->__construct(instance);
	return __this;
}

MusicPlayer_obj::MusicPlayer_obj()
{
}

void MusicPlayer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MusicPlayer);
	HX_MARK_MEMBER_NAME(instance,"instance");
	HX_MARK_MEMBER_NAME(controls,"controls");
	HX_MARK_MEMBER_NAME(playingMusic,"playingMusic");
	HX_MARK_MEMBER_NAME(curTime,"curTime");
	HX_MARK_MEMBER_NAME(songBG,"songBG");
	HX_MARK_MEMBER_NAME(songTxt,"songTxt");
	HX_MARK_MEMBER_NAME(timeTxt,"timeTxt");
	HX_MARK_MEMBER_NAME(progressBar,"progressBar");
	HX_MARK_MEMBER_NAME(playbackBG,"playbackBG");
	HX_MARK_MEMBER_NAME(playbackSymbols,"playbackSymbols");
	HX_MARK_MEMBER_NAME(playbackTxt,"playbackTxt");
	HX_MARK_MEMBER_NAME(wasPlaying,"wasPlaying");
	HX_MARK_MEMBER_NAME(holdPitchTime,"holdPitchTime");
	HX_MARK_MEMBER_NAME(playbackRate,"playbackRate");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MusicPlayer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(instance,"instance");
	HX_VISIT_MEMBER_NAME(controls,"controls");
	HX_VISIT_MEMBER_NAME(playingMusic,"playingMusic");
	HX_VISIT_MEMBER_NAME(curTime,"curTime");
	HX_VISIT_MEMBER_NAME(songBG,"songBG");
	HX_VISIT_MEMBER_NAME(songTxt,"songTxt");
	HX_VISIT_MEMBER_NAME(timeTxt,"timeTxt");
	HX_VISIT_MEMBER_NAME(progressBar,"progressBar");
	HX_VISIT_MEMBER_NAME(playbackBG,"playbackBG");
	HX_VISIT_MEMBER_NAME(playbackSymbols,"playbackSymbols");
	HX_VISIT_MEMBER_NAME(playbackTxt,"playbackTxt");
	HX_VISIT_MEMBER_NAME(wasPlaying,"wasPlaying");
	HX_VISIT_MEMBER_NAME(holdPitchTime,"holdPitchTime");
	HX_VISIT_MEMBER_NAME(playbackRate,"playbackRate");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MusicPlayer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"songBG") ) { return ::hx::Val( songBG ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"playing") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_playing() ); }
		if (HX_FIELD_EQ(inName,"curTime") ) { return ::hx::Val( curTime ); }
		if (HX_FIELD_EQ(inName,"songTxt") ) { return ::hx::Val( songTxt ); }
		if (HX_FIELD_EQ(inName,"timeTxt") ) { return ::hx::Val( timeTxt ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { return ::hx::Val( instance ); }
		if (HX_FIELD_EQ(inName,"controls") ) { return ::hx::Val( controls ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"playbackBG") ) { return ::hx::Val( playbackBG ); }
		if (HX_FIELD_EQ(inName,"wasPlaying") ) { return ::hx::Val( wasPlaying ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"progressBar") ) { return ::hx::Val( progressBar ); }
		if (HX_FIELD_EQ(inName,"playbackTxt") ) { return ::hx::Val( playbackTxt ); }
		if (HX_FIELD_EQ(inName,"get_playing") ) { return ::hx::Val( get_playing_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playingMusic") ) { return ::hx::Val( playingMusic ); }
		if (HX_FIELD_EQ(inName,"playbackRate") ) { return ::hx::Val( playbackRate ); }
		if (HX_FIELD_EQ(inName,"positionSong") ) { return ::hx::Val( positionSong_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"holdPitchTime") ) { return ::hx::Val( holdPitchTime ); }
		if (HX_FIELD_EQ(inName,"setVocalsTime") ) { return ::hx::Val( setVocalsTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"pauseOrResume") ) { return ::hx::Val( pauseOrResume_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateTimeTxt") ) { return ::hx::Val( updateTimeTxt_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"playbackSymbols") ) { return ::hx::Val( playbackSymbols ); }
		if (HX_FIELD_EQ(inName,"switchPlayMusic") ) { return ::hx::Val( switchPlayMusic_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPlaybackRate") ) { return ::hx::Val( setPlaybackRate_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"set_playbackRate") ) { return ::hx::Val( set_playbackRate_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"updatePlaybackTxt") ) { return ::hx::Val( updatePlaybackTxt_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MusicPlayer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"songBG") ) { songBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curTime") ) { curTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songTxt") ) { songTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeTxt") ) { timeTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=inValue.Cast<  ::states::FreeplayState >(); return inValue; }
		if (HX_FIELD_EQ(inName,"controls") ) { controls=inValue.Cast<  ::backend::Controls >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"playbackBG") ) { playbackBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wasPlaying") ) { wasPlaying=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"progressBar") ) { progressBar=inValue.Cast<  ::flixel::ui::FlxBar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playbackTxt") ) { playbackTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playingMusic") ) { playingMusic=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playbackRate") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_playbackRate(inValue.Cast< Float >()) );playbackRate=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"holdPitchTime") ) { holdPitchTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"playbackSymbols") ) { playbackSymbols=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MusicPlayer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("instance",95,1f,e1,59));
	outFields->push(HX_("controls",76,86,bc,37));
	outFields->push(HX_("playing",6e,0f,18,8a));
	outFields->push(HX_("playingMusic",57,82,1b,d8));
	outFields->push(HX_("curTime",ad,3d,12,b8));
	outFields->push(HX_("songBG",da,bc,88,2d));
	outFields->push(HX_("songTxt",9b,55,2a,aa));
	outFields->push(HX_("timeTxt",63,a0,e2,d8));
	outFields->push(HX_("progressBar",26,bc,55,e6));
	outFields->push(HX_("playbackBG",a0,48,c8,bc));
	outFields->push(HX_("playbackSymbols",40,1d,da,5d));
	outFields->push(HX_("playbackTxt",15,17,85,72));
	outFields->push(HX_("wasPlaying",45,fd,28,59));
	outFields->push(HX_("holdPitchTime",ae,0a,d2,3a));
	outFields->push(HX_("playbackRate",9b,3a,8b,c0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MusicPlayer_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::states::FreeplayState */ ,(int)offsetof(MusicPlayer_obj,instance),HX_("instance",95,1f,e1,59)},
	{::hx::fsObject /*  ::backend::Controls */ ,(int)offsetof(MusicPlayer_obj,controls),HX_("controls",76,86,bc,37)},
	{::hx::fsBool,(int)offsetof(MusicPlayer_obj,playingMusic),HX_("playingMusic",57,82,1b,d8)},
	{::hx::fsFloat,(int)offsetof(MusicPlayer_obj,curTime),HX_("curTime",ad,3d,12,b8)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MusicPlayer_obj,songBG),HX_("songBG",da,bc,88,2d)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MusicPlayer_obj,songTxt),HX_("songTxt",9b,55,2a,aa)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MusicPlayer_obj,timeTxt),HX_("timeTxt",63,a0,e2,d8)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(int)offsetof(MusicPlayer_obj,progressBar),HX_("progressBar",26,bc,55,e6)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MusicPlayer_obj,playbackBG),HX_("playbackBG",a0,48,c8,bc)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MusicPlayer_obj,playbackSymbols),HX_("playbackSymbols",40,1d,da,5d)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MusicPlayer_obj,playbackTxt),HX_("playbackTxt",15,17,85,72)},
	{::hx::fsBool,(int)offsetof(MusicPlayer_obj,wasPlaying),HX_("wasPlaying",45,fd,28,59)},
	{::hx::fsFloat,(int)offsetof(MusicPlayer_obj,holdPitchTime),HX_("holdPitchTime",ae,0a,d2,3a)},
	{::hx::fsFloat,(int)offsetof(MusicPlayer_obj,playbackRate),HX_("playbackRate",9b,3a,8b,c0)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MusicPlayer_obj_sStaticStorageInfo = 0;
#endif

static ::String MusicPlayer_obj_sMemberFields[] = {
	HX_("instance",95,1f,e1,59),
	HX_("controls",76,86,bc,37),
	HX_("playingMusic",57,82,1b,d8),
	HX_("curTime",ad,3d,12,b8),
	HX_("songBG",da,bc,88,2d),
	HX_("songTxt",9b,55,2a,aa),
	HX_("timeTxt",63,a0,e2,d8),
	HX_("progressBar",26,bc,55,e6),
	HX_("playbackBG",a0,48,c8,bc),
	HX_("playbackSymbols",40,1d,da,5d),
	HX_("playbackTxt",15,17,85,72),
	HX_("wasPlaying",45,fd,28,59),
	HX_("holdPitchTime",ae,0a,d2,3a),
	HX_("playbackRate",9b,3a,8b,c0),
	HX_("update",09,86,05,87),
	HX_("setVocalsTime",cd,cd,11,38),
	HX_("pauseOrResume",46,b4,51,56),
	HX_("switchPlayMusic",7d,b5,a1,99),
	HX_("updatePlaybackTxt",8c,c3,ee,d6),
	HX_("positionSong",1e,f9,b3,72),
	HX_("updateTimeTxt",5a,05,51,a4),
	HX_("setPlaybackRate",5d,0d,41,df),
	HX_("get_playing",85,6f,12,10),
	HX_("set_playbackRate",98,14,6c,1b),
	::String(null()) };

::hx::Class MusicPlayer_obj::__mClass;

void MusicPlayer_obj::__register()
{
	MusicPlayer_obj _hx_dummy;
	MusicPlayer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.MusicPlayer",2c,5b,c5,61);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MusicPlayer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MusicPlayer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MusicPlayer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MusicPlayer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace objects
