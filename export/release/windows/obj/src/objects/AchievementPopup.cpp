// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_Achievements
#include <backend/Achievements.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_objects_AchievementPopup
#include <objects/AchievementPopup.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_85ffab17b7da0122_9_new,"objects.AchievementPopup","new",0x219c50a9,"objects.AchievementPopup.new","objects/AchievementPopup.hx",9,0x69fcdb86)
HX_LOCAL_STACK_FRAME(_hx_pos_85ffab17b7da0122_95_drawTextAt,"objects.AchievementPopup","drawTextAt",0xba75d0fb,"objects.AchievementPopup.drawTextAt","objects/AchievementPopup.hx",95,0x69fcdb86)
HX_LOCAL_STACK_FRAME(_hx_pos_85ffab17b7da0122_111_update,"objects.AchievementPopup","update",0x2e4d9960,"objects.AchievementPopup.update","objects/AchievementPopup.hx",111,0x69fcdb86)
HX_LOCAL_STACK_FRAME(_hx_pos_85ffab17b7da0122_140_onResize,"objects.AchievementPopup","onResize",0x001d278a,"objects.AchievementPopup.onResize","objects/AchievementPopup.hx",140,0x69fcdb86)
HX_LOCAL_STACK_FRAME(_hx_pos_85ffab17b7da0122_151_destroy,"objects.AchievementPopup","destroy",0xdc4f05c3,"objects.AchievementPopup.destroy","objects/AchievementPopup.hx",151,0x69fcdb86)
HX_LOCAL_STACK_FRAME(_hx_pos_85ffab17b7da0122_165_deleteClonedBitmaps,"objects.AchievementPopup","deleteClonedBitmaps",0xa7f4c91b,"objects.AchievementPopup.deleteClonedBitmaps","objects/AchievementPopup.hx",165,0x69fcdb86)
namespace objects{

void AchievementPopup_obj::__construct(::String achieve, ::Dynamic onFinish){
            	HX_GC_STACKFRAME(&_hx_pos_85ffab17b7da0122_9_new)
HXLINE( 108)		this->intendedY = ((Float)0);
HXLINE( 107)		this->timePassed = ((Float)-1);
HXLINE( 106)		this->countedTime = ((Float)0);
HXLINE( 105)		this->lerpTime = ((Float)0);
HXLINE(  93)		this->bitmaps = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  12)		this->lastScale = ((Float)1);
HXLINE(  10)		this->onFinish = null();
HXLINE(  15)		super::__construct();
HXLINE(  18)		this->get_graphics()->beginFill(-16777216,null());
HXLINE(  19)		this->get_graphics()->drawRoundRect(( (Float)(0) ),( (Float)(0) ),( (Float)(420) ),( (Float)(130) ),( (Float)(16) ),16);
HXLINE(  22)		 ::flixel::graphics::FlxGraphic graphic = null();
HXLINE(  23)		bool hasAntialias = ::backend::ClientPrefs_obj::data->antialiasing;
HXLINE(  24)		::String image = (HX_("achievements/",8b,5e,c1,17) + achieve);
HXLINE(  26)		 ::Dynamic achievement = null();
HXLINE(  27)		if (::backend::Achievements_obj::exists(achieve)) {
HXLINE(  27)			achievement = ::backend::Achievements_obj::get(achieve);
            		}
HXLINE(  30)		::String lastMod = ::backend::Mods_obj::currentModDirectory;
HXLINE(  31)		if (::hx::IsNotNull( achievement )) {
HXLINE(  31)			::String _hx_tmp;
HXDLIN(  31)			if (::hx::IsNotNull( achievement->__Field(HX_("mod",c2,16,53,00),::hx::paccDynamic) )) {
HXLINE(  31)				_hx_tmp = ( (::String)(achievement->__Field(HX_("mod",c2,16,53,00),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(  31)				_hx_tmp = HX_("",00,00,00,00);
            			}
HXDLIN(  31)			::backend::Mods_obj::currentModDirectory = _hx_tmp;
            		}
HXLINE(  34)		if (::backend::Paths_obj::fileExists(((HX_("images/",77,50,74,c1) + image) + HX_("-pixel.png",f4,c0,84,ba)),HX_("IMAGE",3b,57,57,3b),null(),null())) {
HXLINE(  36)			graphic = ::backend::Paths_obj::image(((HX_("",00,00,00,00) + image) + HX_("-pixel",39,03,b3,c0)),null(),false);
HXLINE(  37)			hasAntialias = false;
            		}
            		else {
HXLINE(  39)			graphic = ::backend::Paths_obj::image(image,null(),false);
            		}
HXLINE(  42)		::backend::Mods_obj::currentModDirectory = lastMod;
HXLINE(  45)		if (::hx::IsNull( graphic )) {
HXLINE(  45)			graphic = ::backend::Paths_obj::image(HX_("unknownMod",58,fd,4e,7b),null(),false);
            		}
HXLINE(  47)		int sizeX = 100;
HXLINE(  48)		int sizeY = 100;
HXLINE(  50)		int imgX = 15;
HXLINE(  51)		int imgY = 15;
HXLINE(  52)		 ::openfl::display::BitmapData image1 = graphic->bitmap;
HXLINE(  53)		 ::openfl::display::Graphics _hx_tmp1 = this->get_graphics();
HXDLIN(  53)		_hx_tmp1->beginBitmapFill(image1, ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,(( (Float)(sizeX) ) / ( (Float)(image1->width) )),0,0,(( (Float)(sizeY) ) / ( (Float)(image1->height) )),imgX,imgY),false,hasAntialias);
HXLINE(  54)		this->get_graphics()->drawRect(( (Float)(imgX) ),( (Float)(imgY) ),( (Float)((sizeX + 10)) ),( (Float)((sizeY + 10)) ));
HXLINE(  57)		::String name = HX_("Unknown",6a,4b,cc,ae);
HXLINE(  58)		::String desc = HX_("Description not found",31,bf,e1,ff);
HXLINE(  59)		if (::hx::IsNotNull( achievement )) {
HXLINE(  61)			if (::hx::IsNotNull( achievement->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic) )) {
HXLINE(  61)				::String key = (HX_("achievement_",10,a1,6b,86) + achieve);
HXDLIN(  61)				::String defaultPhrase = ( (::String)(achievement->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
HXDLIN(  61)				::cpp::VirtualArray values = null();
HXDLIN(  61)				::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(  61)				 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN(  61)				::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(key,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN(  61)				if (::hx::IsNull( str )) {
HXLINE(  62)					str = defaultPhrase;
            				}
HXLINE(  61)				if (::hx::IsNull( str )) {
HXLINE(  68)					str = key;
            				}
HXLINE(  61)				if (::hx::IsNotNull( values )) {
HXLINE(  61)					int _g_current = 0;
HXDLIN(  61)					::cpp::VirtualArray _g_array = values;
HXDLIN(  61)					while((_g_current < _g_array->get_length())){
HXLINE(  61)						 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN(  61)						_g_current = (_g_current + 1);
HXDLIN(  61)						int _g_key = (_g_current - 1);
HXDLIN(  61)						int num = _g_key;
HXDLIN(  61)						 ::Dynamic value = _g_value;
HXLINE(  72)						str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            					}
            				}
HXLINE(  61)				name = str;
            			}
HXLINE(  62)			if (::hx::IsNotNull( achievement->__Field(HX_("description",fc,08,1d,5f),::hx::paccDynamic) )) {
HXLINE(  62)				::String key1 = (HX_("description_",e3,d3,4a,da) + achieve);
HXDLIN(  62)				::String defaultPhrase1 = ( (::String)(achievement->__Field(HX_("description",fc,08,1d,5f),::hx::paccDynamic)) );
HXDLIN(  62)				::cpp::VirtualArray values1 = null();
HXDLIN(  62)				::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN(  62)				 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN(  62)				::String str1 = ( ( ::haxe::ds::StringMap)(this2) )->get_string(::StringTools_obj::trim(hideChars1->replace(::StringTools_obj::replace(key1,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN(  62)				if (::hx::IsNull( str1 )) {
HXLINE(  62)					str1 = defaultPhrase1;
            				}
HXDLIN(  62)				if (::hx::IsNull( str1 )) {
HXLINE(  68)					str1 = key1;
            				}
HXLINE(  62)				if (::hx::IsNotNull( values1 )) {
HXLINE(  62)					int _g_current1 = 0;
HXDLIN(  62)					::cpp::VirtualArray _g_array1 = values1;
HXDLIN(  62)					while((_g_current1 < _g_array1->get_length())){
HXLINE(  62)						 ::Dynamic _g_value1 = _g_array1->__get(_g_current1);
HXDLIN(  62)						_g_current1 = (_g_current1 + 1);
HXDLIN(  62)						int _g_key1 = (_g_current1 - 1);
HXDLIN(  62)						int num1 = _g_key1;
HXDLIN(  62)						 ::Dynamic value1 = _g_value1;
HXLINE(  72)						str1 = ::StringTools_obj::replace(str1,((HX_("{",7b,00,00,00) + (num1 + 1)) + HX_("}",7d,00,00,00)),( (::String)(value1) ));
            					}
            				}
HXLINE(  62)				desc = str1;
            			}
            		}
HXLINE(  65)		int textX = ((sizeX + imgX) + 15);
HXLINE(  66)		int textY = (imgY + 20);
HXLINE(  68)		 ::flixel::text::FlxText text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,270,HX_("TEST!!!",2f,16,8c,3d),16,null());
HXLINE(  69)		::String key2 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN(  69)		::Dynamic this3 = ::backend::Language_obj::phrases;
HXDLIN(  69)		::String str2 = ( ( ::haxe::ds::StringMap)(this3) )->get_string(::StringTools_obj::trim(key2).toLowerCase());
HXDLIN(  69)		if (::hx::IsNotNull( str2 )) {
HXLINE(  82)			key2 = str2;
            		}
HXLINE(  69)		::String folderKey = key2;
HXDLIN(  69)		::String file = ::backend::Paths_obj::modFolders(folderKey);
HXDLIN(  69)		::String _hx_tmp2;
HXDLIN(  69)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE(  69)			_hx_tmp2 = file;
            		}
            		else {
HXLINE(  69)			_hx_tmp2 = (HX_("assets/",4c,2a,dc,36) + folderKey);
            		}
HXDLIN(  69)		text->setFormat(_hx_tmp2,16,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE(  70)		this->drawTextAt(text,name,( (Float)(textX) ),( (Float)(textY) ));
HXLINE(  71)		this->drawTextAt(text,desc,( (Float)(textX) ),( (Float)((textY + 30)) ));
HXLINE(  72)		this->get_graphics()->endFill();
HXLINE(  74)		text->graphic->bitmap->dispose();
HXLINE(  75)		text->graphic->bitmap->disposeImage();
HXLINE(  76)		text->destroy();
HXLINE(  79)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("resize",f4,59,7b,08),this->onResize_dyn(),null(),null(),null());
HXLINE(  80)		this->addEventListener(HX_("enterFrame",f5,03,50,02),this->update_dyn(),null(),null(),null());
HXLINE(  82)		::flixel::FlxG_obj::game->addChild(::hx::ObjectPtr<OBJ_>(this));
HXLINE(  85)		this->lastScale = (( (Float)(::openfl::Lib_obj::get_current()->stage->stageHeight) ) / ( (Float)(::flixel::FlxG_obj::height) ));
HXLINE(  86)		this->set_x((( (Float)(20) ) * this->lastScale));
HXLINE(  87)		this->set_y((( (Float)(-130) ) * this->lastScale));
HXLINE(  88)		this->set_scaleX(this->lastScale);
HXLINE(  89)		this->set_scaleY(this->lastScale);
HXLINE(  90)		this->intendedY = ( (Float)(20) );
            	}

Dynamic AchievementPopup_obj::__CreateEmpty() { return new AchievementPopup_obj; }

void *AchievementPopup_obj::_hx_vtable = 0;

Dynamic AchievementPopup_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AchievementPopup_obj > _hx_result = new AchievementPopup_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool AchievementPopup_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x6b353933) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x6b353933;
		} else {
			return inClassId==(int)0x6e030d69;
		}
	}
}

void AchievementPopup_obj::drawTextAt( ::flixel::text::FlxText text,::String str,Float textX,Float textY){
            	HX_GC_STACKFRAME(&_hx_pos_85ffab17b7da0122_95_drawTextAt)
HXLINE(  96)		text->set_text(str);
HXLINE(  97)		text->updateHitbox();
HXLINE(  99)		 ::openfl::display::BitmapData clonedBitmap = text->graphic->bitmap->clone();
HXLINE( 100)		this->bitmaps->push(clonedBitmap);
HXLINE( 101)		 ::openfl::display::Graphics _hx_tmp = this->get_graphics();
HXDLIN( 101)		_hx_tmp->beginBitmapFill(clonedBitmap, ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,1,0,0,1,textX,textY),false,false);
HXLINE( 102)		 ::openfl::display::Graphics _hx_tmp1 = this->get_graphics();
HXDLIN( 102)		Float _hx_tmp2 = (text->get_width() + textX);
HXDLIN( 102)		_hx_tmp1->drawRect(textX,textY,_hx_tmp2,(text->get_height() + textY));
            	}


HX_DEFINE_DYNAMIC_FUNC4(AchievementPopup_obj,drawTextAt,(void))

void AchievementPopup_obj::update( ::openfl::events::Event e){
            	HX_STACKFRAME(&_hx_pos_85ffab17b7da0122_111_update)
HXLINE( 112)		if ((this->timePassed < 0)) {
HXLINE( 114)			this->timePassed = ( (Float)(::openfl::Lib_obj::getTimer()) );
HXLINE( 115)			return;
            		}
HXLINE( 118)		int time = ::openfl::Lib_obj::getTimer();
HXLINE( 119)		Float elapsed = ((( (Float)(time) ) - this->timePassed) / ( (Float)(1000) ));
HXLINE( 120)		this->timePassed = ( (Float)(time) );
HXLINE( 123)		if ((elapsed >= ((Float)0.5))) {
HXLINE( 123)			return;
            		}
HXLINE( 125)		 ::objects::AchievementPopup _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 125)		_hx_tmp->countedTime = (_hx_tmp->countedTime + elapsed);
HXLINE( 126)		if ((this->countedTime < 3)) {
HXLINE( 128)			this->lerpTime = ::Math_obj::min(( (Float)(1) ),(this->lerpTime + elapsed));
HXLINE( 129)			Float t = this->lerpTime;
HXDLIN( 129)			this->set_y(((((((::flixel::tweens::FlxEase_obj::ELASTIC_AMPLITUDE * ::Math_obj::pow(( (Float)(2) ),(( (Float)(-10) ) * t))) * ::Math_obj::sin((((t - ((::flixel::tweens::FlxEase_obj::ELASTIC_PERIOD / (( (Float)(2) ) * ::Math_obj::PI)) * ::Math_obj::asin((( (Float)(1) ) / ::flixel::tweens::FlxEase_obj::ELASTIC_AMPLITUDE)))) * (( (Float)(2) ) * ::Math_obj::PI)) / ::flixel::tweens::FlxEase_obj::ELASTIC_PERIOD))) + 1) * (this->intendedY + 130)) - ( (Float)(130) )) * this->lastScale));
            		}
            		else {
HXLINE( 133)			Float _hx_tmp1 = this->get_y();
HXDLIN( 133)			this->set_y((_hx_tmp1 - ((( (Float)((::flixel::FlxG_obj::height * 2)) ) * elapsed) * this->lastScale)));
HXLINE( 134)			Float _hx_tmp2 = this->get_y();
HXDLIN( 134)			if ((_hx_tmp2 <= (( (Float)(-130) ) * this->lastScale))) {
HXLINE( 135)				this->destroy();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AchievementPopup_obj,update,(void))

void AchievementPopup_obj::onResize( ::openfl::events::Event e){
            	HX_STACKFRAME(&_hx_pos_85ffab17b7da0122_140_onResize)
HXLINE( 141)		Float mult = (( (Float)(::openfl::Lib_obj::get_current()->stage->stageHeight) ) / ( (Float)(::flixel::FlxG_obj::height) ));
HXLINE( 142)		this->set_scaleX(mult);
HXLINE( 143)		this->set_scaleY(mult);
HXLINE( 145)		Float _hx_tmp = (mult / this->lastScale);
HXDLIN( 145)		this->set_x((_hx_tmp * this->get_x()));
HXLINE( 146)		Float _hx_tmp1 = (mult / this->lastScale);
HXDLIN( 146)		this->set_y((_hx_tmp1 * this->get_y()));
HXLINE( 147)		this->lastScale = mult;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AchievementPopup_obj,onResize,(void))

void AchievementPopup_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_85ffab17b7da0122_151_destroy)
HXLINE( 152)		::backend::Achievements_obj::_popups->remove(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 155)		if (::flixel::FlxG_obj::game->contains(::hx::ObjectPtr<OBJ_>(this))) {
HXLINE( 157)			::flixel::FlxG_obj::game->removeChild(::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 159)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("resize",f4,59,7b,08),this->onResize_dyn(),null());
HXLINE( 160)		this->removeEventListener(HX_("enterFrame",f5,03,50,02),this->update_dyn(),null());
HXLINE( 161)		this->deleteClonedBitmaps();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AchievementPopup_obj,destroy,(void))

void AchievementPopup_obj::deleteClonedBitmaps(){
            	HX_STACKFRAME(&_hx_pos_85ffab17b7da0122_165_deleteClonedBitmaps)
HXLINE( 166)		{
HXLINE( 166)			int _g = 0;
HXDLIN( 166)			::Array< ::Dynamic> _g1 = this->bitmaps;
HXDLIN( 166)			while((_g < _g1->length)){
HXLINE( 166)				 ::openfl::display::BitmapData clonedBitmap = _g1->__get(_g).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN( 166)				_g = (_g + 1);
HXLINE( 168)				if (::hx::IsNotNull( clonedBitmap )) {
HXLINE( 170)					clonedBitmap->dispose();
HXLINE( 171)					clonedBitmap->disposeImage();
            				}
            			}
            		}
HXLINE( 174)		this->bitmaps = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AchievementPopup_obj,deleteClonedBitmaps,(void))


::hx::ObjectPtr< AchievementPopup_obj > AchievementPopup_obj::__new(::String achieve, ::Dynamic onFinish) {
	::hx::ObjectPtr< AchievementPopup_obj > __this = new AchievementPopup_obj();
	__this->__construct(achieve,onFinish);
	return __this;
}

::hx::ObjectPtr< AchievementPopup_obj > AchievementPopup_obj::__alloc(::hx::Ctx *_hx_ctx,::String achieve, ::Dynamic onFinish) {
	AchievementPopup_obj *__this = (AchievementPopup_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AchievementPopup_obj), true, "objects.AchievementPopup"));
	*(void **)__this = AchievementPopup_obj::_hx_vtable;
	__this->__construct(achieve,onFinish);
	return __this;
}

AchievementPopup_obj::AchievementPopup_obj()
{
}

void AchievementPopup_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AchievementPopup);
	HX_MARK_MEMBER_NAME(onFinish,"onFinish");
	HX_MARK_MEMBER_NAME(alphaTween,"alphaTween");
	HX_MARK_MEMBER_NAME(lastScale,"lastScale");
	HX_MARK_MEMBER_NAME(bitmaps,"bitmaps");
	HX_MARK_MEMBER_NAME(lerpTime,"lerpTime");
	HX_MARK_MEMBER_NAME(countedTime,"countedTime");
	HX_MARK_MEMBER_NAME(timePassed,"timePassed");
	HX_MARK_MEMBER_NAME(intendedY,"intendedY");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AchievementPopup_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(onFinish,"onFinish");
	HX_VISIT_MEMBER_NAME(alphaTween,"alphaTween");
	HX_VISIT_MEMBER_NAME(lastScale,"lastScale");
	HX_VISIT_MEMBER_NAME(bitmaps,"bitmaps");
	HX_VISIT_MEMBER_NAME(lerpTime,"lerpTime");
	HX_VISIT_MEMBER_NAME(countedTime,"countedTime");
	HX_VISIT_MEMBER_NAME(timePassed,"timePassed");
	HX_VISIT_MEMBER_NAME(intendedY,"intendedY");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val AchievementPopup_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bitmaps") ) { return ::hx::Val( bitmaps ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onFinish") ) { return ::hx::Val( onFinish ); }
		if (HX_FIELD_EQ(inName,"lerpTime") ) { return ::hx::Val( lerpTime ); }
		if (HX_FIELD_EQ(inName,"onResize") ) { return ::hx::Val( onResize_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lastScale") ) { return ::hx::Val( lastScale ); }
		if (HX_FIELD_EQ(inName,"intendedY") ) { return ::hx::Val( intendedY ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"alphaTween") ) { return ::hx::Val( alphaTween ); }
		if (HX_FIELD_EQ(inName,"drawTextAt") ) { return ::hx::Val( drawTextAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"timePassed") ) { return ::hx::Val( timePassed ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"countedTime") ) { return ::hx::Val( countedTime ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"deleteClonedBitmaps") ) { return ::hx::Val( deleteClonedBitmaps_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AchievementPopup_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"bitmaps") ) { bitmaps=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onFinish") ) { onFinish=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lerpTime") ) { lerpTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lastScale") ) { lastScale=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"intendedY") ) { intendedY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"alphaTween") ) { alphaTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timePassed") ) { timePassed=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"countedTime") ) { countedTime=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AchievementPopup_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("alphaTween",2d,fe,15,3a));
	outFields->push(HX_("lastScale",54,fc,7b,c5));
	outFields->push(HX_("bitmaps",a4,e1,81,f9));
	outFields->push(HX_("lerpTime",24,12,a6,d2));
	outFields->push(HX_("countedTime",1b,b6,fc,37));
	outFields->push(HX_("timePassed",5d,1b,fb,8b));
	outFields->push(HX_("intendedY",4e,7c,f0,ea));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AchievementPopup_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AchievementPopup_obj,onFinish),HX_("onFinish",d2,36,2c,66)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(AchievementPopup_obj,alphaTween),HX_("alphaTween",2d,fe,15,3a)},
	{::hx::fsFloat,(int)offsetof(AchievementPopup_obj,lastScale),HX_("lastScale",54,fc,7b,c5)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(AchievementPopup_obj,bitmaps),HX_("bitmaps",a4,e1,81,f9)},
	{::hx::fsFloat,(int)offsetof(AchievementPopup_obj,lerpTime),HX_("lerpTime",24,12,a6,d2)},
	{::hx::fsFloat,(int)offsetof(AchievementPopup_obj,countedTime),HX_("countedTime",1b,b6,fc,37)},
	{::hx::fsFloat,(int)offsetof(AchievementPopup_obj,timePassed),HX_("timePassed",5d,1b,fb,8b)},
	{::hx::fsFloat,(int)offsetof(AchievementPopup_obj,intendedY),HX_("intendedY",4e,7c,f0,ea)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AchievementPopup_obj_sStaticStorageInfo = 0;
#endif

static ::String AchievementPopup_obj_sMemberFields[] = {
	HX_("onFinish",d2,36,2c,66),
	HX_("alphaTween",2d,fe,15,3a),
	HX_("lastScale",54,fc,7b,c5),
	HX_("bitmaps",a4,e1,81,f9),
	HX_("drawTextAt",24,c6,4b,1a),
	HX_("lerpTime",24,12,a6,d2),
	HX_("countedTime",1b,b6,fc,37),
	HX_("timePassed",5d,1b,fb,8b),
	HX_("intendedY",4e,7c,f0,ea),
	HX_("update",09,86,05,87),
	HX_("onResize",73,50,28,e8),
	HX_("destroy",fa,2c,86,24),
	HX_("deleteClonedBitmaps",d2,66,25,36),
	::String(null()) };

::hx::Class AchievementPopup_obj::__mClass;

void AchievementPopup_obj::__register()
{
	AchievementPopup_obj _hx_dummy;
	AchievementPopup_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.AchievementPopup",37,c8,d2,62);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AchievementPopup_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AchievementPopup_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AchievementPopup_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AchievementPopup_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace objects
