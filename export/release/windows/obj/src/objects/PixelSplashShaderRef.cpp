// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_objects_PixelSplashShader
#include <objects/PixelSplashShader.h>
#endif
#ifndef INCLUDED_objects_PixelSplashShaderRef
#include <objects/PixelSplashShaderRef.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_shaders_RGBPalette
#include <shaders/RGBPalette.h>
#endif
#ifndef INCLUDED_shaders_RGBPaletteShader
#include <shaders/RGBPaletteShader.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_637e812d5650d12a_427_new,"objects.PixelSplashShaderRef","new",0xbfb1c94d,"objects.PixelSplashShaderRef.new","objects/NoteSplash.hx",427,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_637e812d5650d12a_435_copyValues,"objects.PixelSplashShaderRef","copyValues",0x6e00182a,"objects.PixelSplashShaderRef.copyValues","objects/NoteSplash.hx",435,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_637e812d5650d12a_449_set_enabled,"objects.PixelSplashShaderRef","set_enabled",0x1a2c9991,"objects.PixelSplashShaderRef.set_enabled","objects/NoteSplash.hx",449,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_637e812d5650d12a_456_set_pixelAmount,"objects.PixelSplashShaderRef","set_pixelAmount",0xe6e3520e,"objects.PixelSplashShaderRef.set_pixelAmount","objects/NoteSplash.hx",456,0xe471e78a)
HX_LOCAL_STACK_FRAME(_hx_pos_637e812d5650d12a_463_reset,"objects.PixelSplashShaderRef","reset",0xb44817fc,"objects.PixelSplashShaderRef.reset","objects/NoteSplash.hx",463,0xe471e78a)
static const Float _hx_array_data_83ce1edb_5[] = {
	(Float)0,(Float)0,(Float)0,
};
static const Float _hx_array_data_83ce1edb_6[] = {
	(Float)0,(Float)0,(Float)0,
};
static const Float _hx_array_data_83ce1edb_7[] = {
	(Float)0,(Float)0,(Float)0,
};
namespace objects{

void PixelSplashShaderRef_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_637e812d5650d12a_427_new)
HXLINE( 431)		this->pixelAmount = ((Float)1);
HXLINE( 430)		this->enabled = true;
HXLINE( 429)		this->shader =  ::objects::PixelSplashShader_obj::__alloc( HX_CTX );
HXLINE( 471)		this->reset();
HXLINE( 472)		this->set_enabled(true);
HXLINE( 474)		if (!(::states::PlayState_obj::get_isPixelStage())) {
HXLINE( 474)			this->set_pixelAmount(( (Float)(1) ));
            		}
            		else {
HXLINE( 475)			this->set_pixelAmount(::states::PlayState_obj::daPixelZoom);
            		}
            	}

Dynamic PixelSplashShaderRef_obj::__CreateEmpty() { return new PixelSplashShaderRef_obj; }

void *PixelSplashShaderRef_obj::_hx_vtable = 0;

Dynamic PixelSplashShaderRef_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PixelSplashShaderRef_obj > _hx_result = new PixelSplashShaderRef_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PixelSplashShaderRef_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x59d7d4d5;
}

void PixelSplashShaderRef_obj::copyValues( ::shaders::RGBPalette tempShader){
            	HX_STACKFRAME(&_hx_pos_637e812d5650d12a_435_copyValues)
HXDLIN( 435)		if (::hx::IsNotNull( tempShader )) {
HXLINE( 437)			{
HXLINE( 438)				{
HXLINE( 439)					this->shader->r->value[0] = tempShader->shader->r->value->__get(0);
HXLINE( 440)					this->shader->g->value[0] = tempShader->shader->g->value->__get(0);
HXLINE( 441)					this->shader->b->value[0] = tempShader->shader->b->value->__get(0);
            				}
HXLINE( 438)				{
HXLINE( 439)					this->shader->r->value[1] = tempShader->shader->r->value->__get(1);
HXLINE( 440)					this->shader->g->value[1] = tempShader->shader->g->value->__get(1);
HXLINE( 441)					this->shader->b->value[1] = tempShader->shader->b->value->__get(1);
            				}
HXLINE( 438)				{
HXLINE( 439)					this->shader->r->value[2] = tempShader->shader->r->value->__get(2);
HXLINE( 440)					this->shader->g->value[2] = tempShader->shader->g->value->__get(2);
HXLINE( 441)					this->shader->b->value[2] = tempShader->shader->b->value->__get(2);
            				}
            			}
HXLINE( 443)			this->shader->mult->value[0] = tempShader->shader->mult->value->__get(0);
            		}
            		else {
HXLINE( 445)			this->set_enabled(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PixelSplashShaderRef_obj,copyValues,(void))

bool PixelSplashShaderRef_obj::set_enabled(bool value){
            	HX_STACKFRAME(&_hx_pos_637e812d5650d12a_449_set_enabled)
HXLINE( 450)		this->enabled = value;
HXLINE( 451)		Float _hx_tmp;
HXDLIN( 451)		if (value) {
HXLINE( 451)			_hx_tmp = ( (Float)(1) );
            		}
            		else {
HXLINE( 451)			_hx_tmp = ( (Float)(0) );
            		}
HXDLIN( 451)		this->shader->mult->value = ::Array_obj< Float >::__new(1)->init(0,_hx_tmp);
HXLINE( 452)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PixelSplashShaderRef_obj,set_enabled,return )

Float PixelSplashShaderRef_obj::set_pixelAmount(Float value){
            	HX_STACKFRAME(&_hx_pos_637e812d5650d12a_456_set_pixelAmount)
HXLINE( 457)		this->pixelAmount = value;
HXLINE( 458)		this->shader->uBlocksize->value = ::Array_obj< Float >::__new(2)->init(0,value)->init(1,value);
HXLINE( 459)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PixelSplashShaderRef_obj,set_pixelAmount,return )

void PixelSplashShaderRef_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_637e812d5650d12a_463_reset)
HXLINE( 464)		this->shader->r->value = ::Array_obj< Float >::fromData( _hx_array_data_83ce1edb_5,3);
HXLINE( 465)		this->shader->g->value = ::Array_obj< Float >::fromData( _hx_array_data_83ce1edb_6,3);
HXLINE( 466)		this->shader->b->value = ::Array_obj< Float >::fromData( _hx_array_data_83ce1edb_7,3);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PixelSplashShaderRef_obj,reset,(void))


::hx::ObjectPtr< PixelSplashShaderRef_obj > PixelSplashShaderRef_obj::__new() {
	::hx::ObjectPtr< PixelSplashShaderRef_obj > __this = new PixelSplashShaderRef_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< PixelSplashShaderRef_obj > PixelSplashShaderRef_obj::__alloc(::hx::Ctx *_hx_ctx) {
	PixelSplashShaderRef_obj *__this = (PixelSplashShaderRef_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PixelSplashShaderRef_obj), true, "objects.PixelSplashShaderRef"));
	*(void **)__this = PixelSplashShaderRef_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

PixelSplashShaderRef_obj::PixelSplashShaderRef_obj()
{
}

void PixelSplashShaderRef_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PixelSplashShaderRef);
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_MEMBER_NAME(pixelAmount,"pixelAmount");
	HX_MARK_END_CLASS();
}

void PixelSplashShaderRef_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(shader,"shader");
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
	HX_VISIT_MEMBER_NAME(pixelAmount,"pixelAmount");
}

::hx::Val PixelSplashShaderRef_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { return ::hx::Val( shader ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { return ::hx::Val( enabled ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyValues") ) { return ::hx::Val( copyValues_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pixelAmount") ) { return ::hx::Val( pixelAmount ); }
		if (HX_FIELD_EQ(inName,"set_enabled") ) { return ::hx::Val( set_enabled_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"set_pixelAmount") ) { return ::hx::Val( set_pixelAmount_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PixelSplashShaderRef_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { shader=inValue.Cast<  ::objects::PixelSplashShader >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_enabled(inValue.Cast< bool >()) );enabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pixelAmount") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_pixelAmount(inValue.Cast< Float >()) );pixelAmount=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PixelSplashShaderRef_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("shader",25,bf,20,1d));
	outFields->push(HX_("enabled",81,04,31,7e));
	outFields->push(HX_("pixelAmount",fe,f4,8f,46));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PixelSplashShaderRef_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::objects::PixelSplashShader */ ,(int)offsetof(PixelSplashShaderRef_obj,shader),HX_("shader",25,bf,20,1d)},
	{::hx::fsBool,(int)offsetof(PixelSplashShaderRef_obj,enabled),HX_("enabled",81,04,31,7e)},
	{::hx::fsFloat,(int)offsetof(PixelSplashShaderRef_obj,pixelAmount),HX_("pixelAmount",fe,f4,8f,46)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PixelSplashShaderRef_obj_sStaticStorageInfo = 0;
#endif

static ::String PixelSplashShaderRef_obj_sMemberFields[] = {
	HX_("shader",25,bf,20,1d),
	HX_("enabled",81,04,31,7e),
	HX_("pixelAmount",fe,f4,8f,46),
	HX_("copyValues",77,69,7b,05),
	HX_("set_enabled",a4,6b,98,0e),
	HX_("set_pixelAmount",a1,29,3d,03),
	HX_("reset",cf,49,c8,e6),
	::String(null()) };

::hx::Class PixelSplashShaderRef_obj::__mClass;

void PixelSplashShaderRef_obj::__register()
{
	PixelSplashShaderRef_obj _hx_dummy;
	PixelSplashShaderRef_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.PixelSplashShaderRef",db,1e,ce,83);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PixelSplashShaderRef_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PixelSplashShaderRef_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PixelSplashShaderRef_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PixelSplashShaderRef_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace objects
