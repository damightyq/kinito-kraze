// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_backend_Achievements
#include <backend/Achievements.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Conductor
#include <backend/Conductor.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_Countdown
#include <backend/Countdown.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_PsychCamera
#include <backend/PsychCamera.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_Error
#include <crowplexus/hscript/Error.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_Expr
#include <crowplexus/hscript/Expr.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_Interp
#include <crowplexus/hscript/Interp.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_Printer
#include <crowplexus/hscript/Printer.h>
#endif
#ifndef INCLUDED_crowplexus_iris_Iris
#include <crowplexus/iris/Iris.h>
#endif
#ifndef INCLUDED_crowplexus_iris_IrisCall
#include <crowplexus/iris/IrisCall.h>
#endif
#ifndef INCLUDED_crowplexus_iris_IrisConfig
#include <crowplexus/iris/IrisConfig.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxRuntimeShader
#include <flixel/addons/display/FlxRuntimeShader.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAnalogStick
#include <flixel/input/gamepad/FlxGamepadAnalogStick.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad__FlxGamepadInputID_FlxGamepadInputID_Impl_
#include <flixel/input/gamepad/_FlxGamepadInputID/FlxGamepadInputID_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flxanimate_FlxAnimate
#include <flxanimate/FlxAnimate.h>
#endif
#ifndef INCLUDED_flxanimate_PsychFlxAnimate
#include <flxanimate/PsychFlxAnimate.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_llua_Lua_helper
#include <llua/Lua_helper.h>
#endif
#ifndef INCLUDED_objects_Alphabet
#include <objects/Alphabet.h>
#endif
#ifndef INCLUDED_objects_Character
#include <objects/Character.h>
#endif
#ifndef INCLUDED_objects_Note
#include <objects/Note.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ShaderFilter
#include <openfl/filters/ShaderFilter.h>
#endif
#ifndef INCLUDED_psychlua_CustomFlxColor
#include <psychlua/CustomFlxColor.h>
#endif
#ifndef INCLUDED_psychlua_CustomInterp
#include <psychlua/CustomInterp.h>
#endif
#ifndef INCLUDED_psychlua_CustomSubstate
#include <psychlua/CustomSubstate.h>
#endif
#ifndef INCLUDED_psychlua_FunkinLua
#include <psychlua/FunkinLua.h>
#endif
#ifndef INCLUDED_psychlua_HScript
#include <psychlua/HScript.h>
#endif
#ifndef INCLUDED_psychlua_LuaUtils
#include <psychlua/LuaUtils.h>
#endif
#ifndef INCLUDED_shaders_ErrorHandledRuntimeShader
#include <shaders/ErrorHandledRuntimeShader.h>
#endif
#ifndef INCLUDED_shaders_IErrorHandler
#include <shaders/IErrorHandler.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_22ae5a7ed167d885_29_new,"psychlua.HScript","new",0xc5b53054,"psychlua.HScript.new","psychlua/HScript.hx",29,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_184_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",184,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_188_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",188,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_194_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",194,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_202_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",202,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_206_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",206,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_220_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",220,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_221_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",221,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_222_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",222,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_224_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",224,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_225_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",225,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_226_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",226,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_229_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",229,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_236_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",236,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_243_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",243,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_250_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",250,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_257_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",257,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_264_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",264,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_275_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",275,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_286_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",286,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_302_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",302,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_312_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",312,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_321_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",321,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_142_preset,"psychlua.HScript","preset",0x288cc3eb,"psychlua.HScript.preset","psychlua/HScript.hx",142,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_422_call,"psychlua.HScript","call",0x318cae2a,"psychlua.HScript.call","psychlua/HScript.hx",422,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_463_destroy,"psychlua.HScript","destroy",0x3d4896ee,"psychlua.HScript.destroy","psychlua/HScript.hx",463,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_469_set_varsToBring,"psychlua.HScript","set_varsToBring",0xb04441e2,"psychlua.HScript.set_varsToBring","psychlua/HScript.hx",469,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_39_initHaxeModule,"psychlua.HScript","initHaxeModule",0xf5eaad2e,"psychlua.HScript.initHaxeModule","psychlua/HScript.hx",39,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_47_initHaxeModuleCode,"psychlua.HScript","initHaxeModuleCode",0x2e51b97b,"psychlua.HScript.initHaxeModuleCode","psychlua/HScript.hx",47,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_354_implement,"psychlua.HScript","implement",0x4ce74097,"psychlua.HScript.implement","psychlua/HScript.hx",354,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_371_implement,"psychlua.HScript","implement",0x4ce74097,"psychlua.HScript.implement","psychlua/HScript.hx",371,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_389_implement,"psychlua.HScript","implement",0x4ce74097,"psychlua.HScript.implement","psychlua/HScript.hx",389,0x619ca0dd)
HX_LOCAL_STACK_FRAME(_hx_pos_22ae5a7ed167d885_353_implement,"psychlua.HScript","implement",0x4ce74097,"psychlua.HScript.implement","psychlua/HScript.hx",353,0x619ca0dd)
namespace psychlua{

void HScript_obj::__construct( ::Dynamic parent,::String file, ::Dynamic varsToBring, ::Dynamic __o_manualRun){
            		 ::Dynamic manualRun = __o_manualRun;
            		if (::hx::IsNull(__o_manualRun)) manualRun = false;
            	HX_GC_STACKFRAME(&_hx_pos_22ae5a7ed167d885_29_new)
HXLINE( 141)		this->varsToBring = null();
HXLINE(  87)		if (::hx::IsNull( file )) {
HXLINE(  88)			file = HX_("",00,00,00,00);
            		}
HXLINE(  90)		this->filePath = file;
HXLINE(  91)		bool _hx_tmp;
HXDLIN(  91)		if (::hx::IsNotNull( this->filePath )) {
HXLINE(  91)			_hx_tmp = (this->filePath.length > 0);
            		}
            		else {
HXLINE(  91)			_hx_tmp = false;
            		}
HXDLIN(  91)		if (_hx_tmp) {
HXLINE(  93)			this->origin = this->filePath;
HXLINE(  95)			::Array< ::String > myFolder = this->filePath.split(HX_("/",2f,00,00,00));
HXLINE(  96)			bool _hx_tmp1;
HXDLIN(  96)			if (((myFolder->__get(0) + HX_("/",2f,00,00,00)) == HX_("mods/",9e,2f,58,0c))) {
HXLINE(  96)				if ((::backend::Mods_obj::currentModDirectory != myFolder->__get(1))) {
HXLINE(  96)					_hx_tmp1 = ::backend::Mods_obj::globalMods->contains(myFolder->__get(1));
            				}
            				else {
HXLINE(  96)					_hx_tmp1 = true;
            				}
            			}
            			else {
HXLINE(  96)				_hx_tmp1 = false;
            			}
HXDLIN(  96)			if (_hx_tmp1) {
HXLINE(  97)				this->modFolder = myFolder->__get(1);
            			}
            		}
HXLINE( 100)		::String scriptThing = file;
HXLINE( 101)		::String scriptName = null();
HXLINE( 102)		bool _hx_tmp2;
HXDLIN( 102)		if (::hx::IsNull( parent )) {
HXLINE( 102)			_hx_tmp2 = ::hx::IsNotNull( file );
            		}
            		else {
HXLINE( 102)			_hx_tmp2 = false;
            		}
HXDLIN( 102)		if (_hx_tmp2) {
HXLINE( 104)			::String f = ::StringTools_obj::replace(file,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE( 105)			bool _hx_tmp3;
HXDLIN( 105)			if ((f.indexOf(HX_("/",2f,00,00,00),null()) != -1)) {
HXLINE( 105)				_hx_tmp3 = (f.indexOf(HX_("\n",0a,00,00,00),null()) == -1);
            			}
            			else {
HXLINE( 105)				_hx_tmp3 = false;
            			}
HXDLIN( 105)			if (_hx_tmp3) {
HXLINE( 106)				scriptThing = ::sys::io::File_obj::getContent(f);
HXLINE( 107)				scriptName = f;
            			}
            		}
HXLINE( 111)		bool _hx_tmp4;
HXDLIN( 111)		if (::hx::IsNull( scriptName )) {
HXLINE( 111)			_hx_tmp4 = ::hx::IsNotNull( parent );
            		}
            		else {
HXLINE( 111)			_hx_tmp4 = false;
            		}
HXDLIN( 111)		if (_hx_tmp4) {
HXLINE( 112)			scriptName = ( (::String)(parent->__Field(HX_("scriptName",f6,4d,e0,41),::hx::paccDynamic)) );
            		}
HXLINE( 114)		super::__construct(scriptThing, ::crowplexus::iris::IrisConfig_obj::__alloc( HX_CTX ,scriptName,false,false,null()));
HXLINE( 115)		 ::psychlua::CustomInterp customInterp =  ::psychlua::CustomInterp_obj::__alloc( HX_CTX );
HXLINE( 116)		customInterp->set_parentInstance(::flixel::FlxG_obj::game->_state);
HXLINE( 117)		customInterp->showPosOnLog = false;
HXLINE( 118)		this->interp = customInterp;
HXLINE( 120)		this->parentLua = ( ( ::psychlua::FunkinLua)(parent) );
HXLINE( 121)		if (::hx::IsNotNull( parent )) {
HXLINE( 123)			this->origin = ( (::String)(parent->__Field(HX_("scriptName",f6,4d,e0,41),::hx::paccDynamic)) );
HXLINE( 124)			this->modFolder = ( (::String)(parent->__Field(HX_("modFolder",10,7f,30,0a),::hx::paccDynamic)) );
            		}
HXLINE( 127)		this->preset();
HXLINE( 128)		this->set_varsToBring(varsToBring);
HXLINE( 129)		if (!(( (bool)(manualRun) ))) {
HXLINE( 130)			try {
            				HX_STACK_CATCHABLE( ::crowplexus::hscript::Error, 0);
            				HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE( 131)				 ::Dynamic ret = this->execute();
HXLINE( 132)				this->returnValue = ret;
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::crowplexus::hscript::Error >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::crowplexus::hscript::Error e11 = _hx_e;
HXLINE( 134)					this->returnValue = null();
HXLINE( 135)					this->destroy();
HXLINE( 136)					HX_STACK_DO_THROW(e11);
            				}
            				else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::ValueException _g = _hx_e;
HXLINE( 130)					if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::crowplexus::hscript::Error >())) {
HXLINE( 133)						 ::crowplexus::hscript::Error e11 = ( ( ::crowplexus::hscript::Error)(_g->value) );
HXLINE( 134)						this->returnValue = null();
HXLINE( 135)						this->destroy();
HXLINE( 136)						HX_STACK_DO_THROW(e11);
            					}
            					else {
HXLINE( 130)						HX_STACK_DO_THROW(_g);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            	}

Dynamic HScript_obj::__CreateEmpty() { return new HScript_obj; }

void *HScript_obj::_hx_vtable = 0;

Dynamic HScript_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< HScript_obj > _hx_result = new HScript_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool HScript_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e02612a) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2e02612a;
	} else {
		return inClassId==(int)0x7f75c5ee;
	}
}

void HScript_obj::preset(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		 ::Dynamic _hx_run(::String name, ::Dynamic value){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_184_preset)
HXLINE( 185)			::backend::MusicBeatState_obj::getVariables()->set(name,value);
HXLINE( 186)			return value;
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		 ::Dynamic _hx_run(::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_188_preset)
HXLINE( 189)			 ::Dynamic result = null();
HXLINE( 190)			if (::backend::MusicBeatState_obj::getVariables()->exists(name)) {
HXLINE( 190)				result = ::backend::MusicBeatState_obj::getVariables()->get(name);
            			}
HXLINE( 191)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            		bool _hx_run(::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_194_preset)
HXLINE( 195)			if (::backend::MusicBeatState_obj::getVariables()->exists(name)) {
HXLINE( 197)				::backend::MusicBeatState_obj::getVariables()->remove(name);
HXLINE( 198)				return true;
            			}
HXLINE( 200)			return false;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(2)
            		void _hx_run(::String text, ::Dynamic color){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_202_preset)
HXLINE( 203)			if (::hx::IsNull( color )) {
HXLINE( 203)				color = -1;
            			}
HXLINE( 204)			::states::PlayState_obj::instance->addTextToDebug(text,( (int)(color) ));
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::psychlua::HScript,_gthis) HXARGC(2)
            		 ::Dynamic _hx_run(::String saveTag,::String modName){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_206_preset)
HXLINE( 207)			if (::hx::IsNull( modName )) {
HXLINE( 209)				if (::hx::IsNull( _gthis->modFolder )) {
HXLINE( 211)					 ::Dynamic _hx_tmp = ::crowplexus::iris::Iris_obj::error;
HXDLIN( 211)					_hx_tmp(HX_("getModSetting: Argument #2 is null and script is not inside a packed Mod folder!",fe,0e,a5,12),_gthis->interp->posInfos());
HXLINE( 212)					return null();
            				}
HXLINE( 214)				modName = _gthis->modFolder;
            			}
HXLINE( 216)			return ::psychlua::LuaUtils_obj::getModSetting(saveTag,modName);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_5) HXARGC(1)
            		 ::Dynamic _hx_run(::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_220_preset)
HXLINE( 220)			return ::Reflect_obj::getProperty(::flixel::FlxG_obj::keys->justPressed,name);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_6) HXARGC(1)
            		 ::Dynamic _hx_run(::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_221_preset)
HXLINE( 221)			return ::Reflect_obj::getProperty(::flixel::FlxG_obj::keys->pressed,name);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_7) HXARGC(1)
            		 ::Dynamic _hx_run(::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_222_preset)
HXLINE( 222)			return ::Reflect_obj::getProperty(::flixel::FlxG_obj::keys->justReleased,name);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_8) HXARGC(1)
            		bool _hx_run(::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_224_preset)
HXLINE( 224)			 ::flixel::input::gamepad::FlxGamepadManager _this = ::flixel::FlxG_obj::gamepads;
HXDLIN( 224)			int buttonID;
HXDLIN( 224)			::String s = name;
HXDLIN( 224)			s = s.toUpperCase();
HXDLIN( 224)			if (::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->exists(s)) {
HXLINE( 224)				buttonID = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->get_int(s);
            			}
            			else {
HXLINE( 224)				buttonID = -1;
            			}
HXDLIN( 224)			return _this->anyHasState(buttonID,2);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_9) HXARGC(1)
            		void _hx_run(::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_225_preset)
HXLINE( 225)			 ::flixel::input::gamepad::FlxGamepadManager _this = ::flixel::FlxG_obj::gamepads;
HXDLIN( 225)			int buttonID;
HXDLIN( 225)			::String s = name;
HXDLIN( 225)			s = s.toUpperCase();
HXDLIN( 225)			if (::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->exists(s)) {
HXLINE( 225)				buttonID = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->get_int(s);
            			}
            			else {
HXLINE( 225)				buttonID = -1;
            			}
HXDLIN( 225)			_this->anyHasState(buttonID,1);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_10) HXARGC(1)
            		bool _hx_run(::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_226_preset)
HXLINE( 226)			 ::flixel::input::gamepad::FlxGamepadManager _this = ::flixel::FlxG_obj::gamepads;
HXDLIN( 226)			int buttonID;
HXDLIN( 226)			::String s = name;
HXDLIN( 226)			s = s.toUpperCase();
HXDLIN( 226)			if (::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->exists(s)) {
HXLINE( 226)				buttonID = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->get_int(s);
            			}
            			else {
HXLINE( 226)				buttonID = -1;
            			}
HXDLIN( 226)			return _this->anyHasState(buttonID,-1);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_11) HXARGC(2)
            		Float _hx_run(int id, ::Dynamic __o_leftStick){
            		 ::Dynamic leftStick = __o_leftStick;
            		if (::hx::IsNull(__o_leftStick)) leftStick = true;
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_229_preset)
HXLINE( 230)			 ::flixel::input::gamepad::FlxGamepad controller = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(id).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE( 231)			if (::hx::IsNull( controller )) {
HXLINE( 231)				return ((Float)0.0);
            			}
HXLINE( 233)			int _hx_tmp;
HXDLIN( 233)			if (( (bool)(leftStick) )) {
HXLINE( 233)				_hx_tmp = 19;
            			}
            			else {
HXLINE( 233)				_hx_tmp = 20;
            			}
HXDLIN( 233)			return controller->getAnalogXAxisValue(controller->mapping->getAnalogStick(_hx_tmp));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_12) HXARGC(2)
            		Float _hx_run(int id, ::Dynamic __o_leftStick){
            		 ::Dynamic leftStick = __o_leftStick;
            		if (::hx::IsNull(__o_leftStick)) leftStick = true;
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_236_preset)
HXLINE( 237)			 ::flixel::input::gamepad::FlxGamepad controller = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(id).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE( 238)			if (::hx::IsNull( controller )) {
HXLINE( 238)				return ((Float)0.0);
            			}
HXLINE( 240)			int _hx_tmp;
HXDLIN( 240)			if (( (bool)(leftStick) )) {
HXLINE( 240)				_hx_tmp = 19;
            			}
            			else {
HXLINE( 240)				_hx_tmp = 20;
            			}
HXDLIN( 240)			return controller->getYAxisRaw(controller->mapping->getAnalogStick(_hx_tmp));
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_13) HXARGC(2)
            		bool _hx_run(int id,::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_243_preset)
HXLINE( 244)			 ::flixel::input::gamepad::FlxGamepad controller = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(id).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE( 245)			if (::hx::IsNull( controller )) {
HXLINE( 245)				return false;
            			}
HXLINE( 247)			return ::hx::IsEq( ::Reflect_obj::getProperty(controller->justPressed,name),true );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_14) HXARGC(2)
            		bool _hx_run(int id,::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_250_preset)
HXLINE( 251)			 ::flixel::input::gamepad::FlxGamepad controller = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(id).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE( 252)			if (::hx::IsNull( controller )) {
HXLINE( 252)				return false;
            			}
HXLINE( 254)			return ::hx::IsEq( ::Reflect_obj::getProperty(controller->pressed,name),true );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_15) HXARGC(2)
            		bool _hx_run(int id,::String name){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_257_preset)
HXLINE( 258)			 ::flixel::input::gamepad::FlxGamepad controller = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(id).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE( 259)			if (::hx::IsNull( controller )) {
HXLINE( 259)				return false;
            			}
HXLINE( 261)			return ::hx::IsEq( ::Reflect_obj::getProperty(controller->justReleased,name),true );
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_16) HXARGC(1)
            		bool _hx_run(::String __o_name){
            		::String name = __o_name;
            		if (::hx::IsNull(__o_name)) name = HX_("",00,00,00,00);
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_264_preset)
HXLINE( 265)			name = name.toLowerCase();
HXLINE( 266)			::String _hx_switch_0 = name;
            			if (  (_hx_switch_0==HX_("down",62,f8,6d,42)) ){
HXLINE( 268)				return ::backend::Controls_obj::instance->get_NOTE_DOWN_P();
HXDLIN( 268)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE( 267)				return ::backend::Controls_obj::instance->get_NOTE_LEFT_P();
HXDLIN( 267)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE( 270)				return ::backend::Controls_obj::instance->get_NOTE_RIGHT_P();
HXDLIN( 270)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("up",5b,66,00,00)) ){
HXLINE( 269)				return ::backend::Controls_obj::instance->get_NOTE_UP_P();
HXDLIN( 269)				goto _hx_goto_1;
            			}
            			/* default */{
HXLINE( 271)				return ::backend::Controls_obj::instance->justPressed(name);
            			}
            			_hx_goto_1:;
HXLINE( 266)			return false;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_17) HXARGC(1)
            		bool _hx_run(::String __o_name){
            		::String name = __o_name;
            		if (::hx::IsNull(__o_name)) name = HX_("",00,00,00,00);
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_275_preset)
HXLINE( 276)			name = name.toLowerCase();
HXLINE( 277)			::String _hx_switch_1 = name;
            			if (  (_hx_switch_1==HX_("down",62,f8,6d,42)) ){
HXLINE( 279)				return ::backend::Controls_obj::instance->get_NOTE_DOWN();
HXDLIN( 279)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_1==HX_("left",07,08,b0,47)) ){
HXLINE( 278)				return ::backend::Controls_obj::instance->get_NOTE_LEFT();
HXDLIN( 278)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_1==HX_("right",dc,0b,64,e9)) ){
HXLINE( 281)				return ::backend::Controls_obj::instance->get_NOTE_RIGHT();
HXDLIN( 281)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_1==HX_("up",5b,66,00,00)) ){
HXLINE( 280)				return ::backend::Controls_obj::instance->get_NOTE_UP();
HXDLIN( 280)				goto _hx_goto_2;
            			}
            			/* default */{
HXLINE( 282)				return ::backend::Controls_obj::instance->pressed(name);
            			}
            			_hx_goto_2:;
HXLINE( 277)			return false;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_18) HXARGC(1)
            		bool _hx_run(::String __o_name){
            		::String name = __o_name;
            		if (::hx::IsNull(__o_name)) name = HX_("",00,00,00,00);
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_286_preset)
HXLINE( 287)			name = name.toLowerCase();
HXLINE( 288)			::String _hx_switch_2 = name;
            			if (  (_hx_switch_2==HX_("down",62,f8,6d,42)) ){
HXLINE( 290)				return ::backend::Controls_obj::instance->get_NOTE_DOWN_R();
HXDLIN( 290)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_2==HX_("left",07,08,b0,47)) ){
HXLINE( 289)				return ::backend::Controls_obj::instance->get_NOTE_LEFT_R();
HXDLIN( 289)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_2==HX_("right",dc,0b,64,e9)) ){
HXLINE( 292)				return ::backend::Controls_obj::instance->get_NOTE_RIGHT_R();
HXDLIN( 292)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_2==HX_("up",5b,66,00,00)) ){
HXLINE( 291)				return ::backend::Controls_obj::instance->get_NOTE_UP_R();
HXDLIN( 291)				goto _hx_goto_3;
            			}
            			/* default */{
HXLINE( 293)				return ::backend::Controls_obj::instance->justReleased(name);
            			}
            			_hx_goto_3:;
HXLINE( 288)			return false;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_19) HXARGC(2)
            		void _hx_run(::String name, ::Dynamic func){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_302_preset)
HXLINE( 303)			{
HXLINE( 303)				int _g = 0;
HXDLIN( 303)				::Array< ::Dynamic> _g1 = ::states::PlayState_obj::instance->luaArray;
HXDLIN( 303)				while((_g < _g1->length)){
HXLINE( 303)					 ::psychlua::FunkinLua script = _g1->__get(_g).StaticCast<  ::psychlua::FunkinLua >();
HXDLIN( 303)					_g = (_g + 1);
HXLINE( 304)					bool _hx_tmp;
HXDLIN( 304)					bool _hx_tmp1;
HXDLIN( 304)					if (::hx::IsNotNull( script )) {
HXLINE( 304)						_hx_tmp1 = ::hx::IsNotNull( script->lua );
            					}
            					else {
HXLINE( 304)						_hx_tmp1 = false;
            					}
HXDLIN( 304)					if (_hx_tmp1) {
HXLINE( 304)						_hx_tmp = !(script->closed);
            					}
            					else {
HXLINE( 304)						_hx_tmp = false;
            					}
HXDLIN( 304)					if (_hx_tmp) {
HXLINE( 305)						 cpp::Reference<lua_State> l = script->lua;
HXDLIN( 305)						::llua::Lua_helper_obj::callbacks->set(name,func);
HXDLIN( 305)						linc::callbacks::add_callback_function(l,name);
            					}
            				}
            			}
HXLINE( 307)			::psychlua::FunkinLua_obj::customFunctions->set(name,func);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_20, ::psychlua::HScript,_gthis) HXARGC(3)
            		void _hx_run(::String name, ::Dynamic func, ::psychlua::FunkinLua funk){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_312_preset)
HXLINE( 313)			if (::hx::IsNull( funk )) {
HXLINE( 313)				funk = _gthis->parentLua;
            			}
HXLINE( 315)			if (::hx::IsNotNull( funk )) {
HXLINE( 315)				funk->addLocalCallback(name,func);
            			}
            			else {
HXLINE( 316)				 ::Dynamic _hx_tmp = ::crowplexus::iris::Iris_obj::error;
HXDLIN( 316)				_hx_tmp(((HX_("createCallback (",29,ef,61,76) + name) + HX_("): 3rd argument is null",44,8a,de,61)),_gthis->interp->posInfos());
            			}
            		}
            		HX_END_LOCAL_FUNC3((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_21, ::psychlua::HScript,_gthis) HXARGC(2)
            		void _hx_run(::String libName,::String __o_libPackage){
            		::String libPackage = __o_libPackage;
            		if (::hx::IsNull(__o_libPackage)) libPackage = HX_("",00,00,00,00);
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_321_preset)
HXLINE( 321)			try {
            				HX_STACK_CATCHABLE( ::crowplexus::hscript::Error, 0);
            				HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE( 322)				::String str = HX_("",00,00,00,00);
HXLINE( 323)				if ((libPackage.length > 0)) {
HXLINE( 324)					str = (libPackage + HX_(".",2e,00,00,00));
            				}
HXLINE( 326)				 ::psychlua::HScript _gthis1 = _gthis;
HXDLIN( 326)				_gthis1->set(libName,::Type_obj::resolveClass((str + libName)),null());
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::crowplexus::hscript::Error >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::crowplexus::hscript::Error e1 = _hx_e;
HXLINE( 329)					 ::Dynamic _hx_tmp = ::crowplexus::iris::Iris_obj::error;
HXDLIN( 329)					::String _hx_tmp1 = ::crowplexus::hscript::Printer_obj::errorToString(e1,false);
HXDLIN( 329)					_hx_tmp(_hx_tmp1,_gthis->interp->posInfos());
            				}
            				else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::ValueException _g = _hx_e;
HXLINE( 328)					{
HXLINE( 328)						null();
            					}
HXLINE( 321)					if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::crowplexus::hscript::Error >())) {
HXLINE( 328)						 ::crowplexus::hscript::Error e1 = ( ( ::crowplexus::hscript::Error)(_g->value) );
HXLINE( 329)						{
HXLINE( 329)							 ::Dynamic _hx_tmp2 = ::crowplexus::iris::Iris_obj::error;
HXDLIN( 329)							::String _hx_tmp3 = ::crowplexus::hscript::Printer_obj::errorToString(e1,false);
HXDLIN( 329)							_hx_tmp2(_hx_tmp3,_gthis->interp->posInfos());
            						}
            					}
            					else {
HXLINE( 321)						HX_STACK_DO_THROW(_g);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_142_preset)
HXDLIN( 142)		 ::psychlua::HScript _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 143)		this->super::preset();
HXLINE( 146)		this->set(HX_("Type",da,1e,e2,37),::hx::ClassOf< ::Type >(),null());
HXLINE( 148)		this->set(HX_("File",9c,fa,94,2e),::hx::ClassOf< ::sys::io::File >(),null());
HXLINE( 149)		this->set(HX_("FileSystem",ab,e2,17,ca),::hx::ClassOf< ::sys::FileSystem >(),null());
HXLINE( 151)		this->set(HX_("FlxG",b5,4b,97,2e),::hx::ClassOf< ::flixel::FlxG >(),null());
HXLINE( 152)		this->set(HX_("FlxMath",3a,7b,ae,d8),::hx::ClassOf< ::flixel::math::FlxMath >(),null());
HXLINE( 153)		this->set(HX_("FlxSprite",f7,d5,84,45),::hx::ClassOf< ::flixel::FlxSprite >(),null());
HXLINE( 154)		this->set(HX_("FlxText",1f,06,52,dd),::hx::ClassOf< ::flixel::text::FlxText >(),null());
HXLINE( 155)		this->set(HX_("FlxCamera",97,40,7b,39),::hx::ClassOf< ::flixel::FlxCamera >(),null());
HXLINE( 156)		this->set(HX_("PsychCamera",20,1a,6b,4a),::hx::ClassOf< ::backend::PsychCamera >(),null());
HXLINE( 157)		this->set(HX_("FlxTimer",13,ca,0f,cd),::hx::ClassOf< ::flixel::util::FlxTimer >(),null());
HXLINE( 158)		this->set(HX_("FlxTween",b9,b4,4a,d6),::hx::ClassOf< ::flixel::tweens::FlxTween >(),null());
HXLINE( 159)		this->set(HX_("FlxEase",60,c5,64,d3),::hx::ClassOf< ::flixel::tweens::FlxEase >(),null());
HXLINE( 160)		this->set(HX_("FlxColor",b1,7b,36,07),::hx::ClassOf< ::psychlua::CustomFlxColor >(),null());
HXLINE( 161)		this->set(HX_("Countdown",91,30,88,0b),::hx::ClassOf< ::backend::Countdown >(),null());
HXLINE( 162)		this->set(HX_("PlayState",5d,83,c2,46),::hx::ClassOf< ::states::PlayState >(),null());
HXLINE( 163)		this->set(HX_("Paths",0e,7b,84,50),::hx::ClassOf< ::backend::Paths >(),null());
HXLINE( 164)		this->set(HX_("Conductor",c7,77,a1,7b),::hx::ClassOf< ::backend::Conductor >(),null());
HXLINE( 165)		this->set(HX_("ClientPrefs",c5,55,e0,8a),::hx::ClassOf< ::backend::ClientPrefs >(),null());
HXLINE( 167)		this->set(HX_("Achievements",44,ed,7d,4e),::hx::ClassOf< ::backend::Achievements >(),null());
HXLINE( 169)		this->set(HX_("Character",89,bb,a4,e3),::hx::ClassOf< ::objects::Character >(),null());
HXLINE( 170)		this->set(HX_("Alphabet",d3,38,ea,fa),::hx::ClassOf< ::objects::Alphabet >(),null());
HXLINE( 171)		this->set(HX_("Note",12,44,e3,33),::hx::ClassOf< ::objects::Note >(),null());
HXLINE( 172)		this->set(HX_("CustomSubstate",82,cd,df,32),::hx::ClassOf< ::psychlua::CustomSubstate >(),null());
HXLINE( 174)		this->set(HX_("FlxRuntimeShader",6b,22,33,11),::hx::ClassOf< ::flixel::addons::display::FlxRuntimeShader >(),null());
HXLINE( 175)		this->set(HX_("ErrorHandledRuntimeShader",89,00,51,13),::hx::ClassOf< ::shaders::ErrorHandledRuntimeShader >(),null());
HXLINE( 177)		this->set(HX_("ShaderFilter",dd,08,30,bd),::hx::ClassOf< ::openfl::filters::ShaderFilter >(),null());
HXLINE( 178)		this->set(HX_("StringTools",6a,db,63,03),::hx::ClassOf< ::StringTools >(),null());
HXLINE( 180)		this->set(HX_("FlxAnimate",6f,94,78,a9),::hx::ClassOf< ::flxanimate::PsychFlxAnimate >(),null());
HXLINE( 184)		this->set(HX_("setVar",65,6c,71,6f), ::Dynamic(new _hx_Closure_0()),null());
HXLINE( 188)		this->set(HX_("getVar",f1,17,29,a3), ::Dynamic(new _hx_Closure_1()),null());
HXLINE( 193)		this->set(HX_("removeVar",03,fd,f4,ca), ::Dynamic(new _hx_Closure_2()),null());
HXLINE( 202)		this->set(HX_("debugPrint",da,28,6f,c7), ::Dynamic(new _hx_Closure_3()),null());
HXLINE( 206)		this->set(HX_("getModSetting",24,8b,81,ff), ::Dynamic(new _hx_Closure_4(_gthis)),null());
HXLINE( 220)		this->set(HX_("keyboardJustPressed",6f,ec,b1,75), ::Dynamic(new _hx_Closure_5()),null());
HXLINE( 221)		this->set(HX_("keyboardPressed",bb,30,e6,41), ::Dynamic(new _hx_Closure_6()),null());
HXLINE( 222)		this->set(HX_("keyboardReleased",84,80,5a,6e), ::Dynamic(new _hx_Closure_7()),null());
HXLINE( 224)		this->set(HX_("anyGamepadJustPressed",c1,00,a5,a2), ::Dynamic(new _hx_Closure_8()),null());
HXLINE( 225)		this->set(HX_("anyGamepadPressed",0d,34,40,4f), ::Dynamic(new _hx_Closure_9()),null());
HXLINE( 226)		this->set(HX_("anyGamepadReleased",f2,64,c3,0f), ::Dynamic(new _hx_Closure_10()),null());
HXLINE( 228)		this->set(HX_("gamepadAnalogX",87,a1,7a,a9), ::Dynamic(new _hx_Closure_11()),null());
HXLINE( 235)		this->set(HX_("gamepadAnalogY",88,a1,7a,a9), ::Dynamic(new _hx_Closure_12()),null());
HXLINE( 242)		this->set(HX_("gamepadJustPressed",b5,b6,c3,ba), ::Dynamic(new _hx_Closure_13()),null());
HXLINE( 249)		this->set(HX_("gamepadPressed",01,e0,e7,04), ::Dynamic(new _hx_Closure_14()),null());
HXLINE( 256)		this->set(HX_("gamepadReleased",7e,2e,d2,4c), ::Dynamic(new _hx_Closure_15()),null());
HXLINE( 264)		this->set(HX_("keyJustPressed",77,d2,b7,cd), ::Dynamic(new _hx_Closure_16()),null());
HXLINE( 275)		this->set(HX_("keyPressed",c3,72,6e,a8), ::Dynamic(new _hx_Closure_17()),null());
HXLINE( 286)		this->set(HX_("keyReleased",7c,05,0c,bf), ::Dynamic(new _hx_Closure_18()),null());
HXLINE( 301)		this->set(HX_("createGlobalCallback",64,de,db,36), ::Dynamic(new _hx_Closure_19()),null());
HXLINE( 311)		this->set(HX_("createCallback",e1,18,41,d1), ::Dynamic(new _hx_Closure_20(_gthis)),null());
HXLINE( 320)		this->set(HX_("addHaxeLibrary",d4,92,3b,4b), ::Dynamic(new _hx_Closure_21(_gthis)),null());
HXLINE( 333)		this->set(HX_("parentLua",ae,22,50,7f),this->parentLua,null());
HXLINE( 337)		this->set(HX_("this",5e,06,fc,4c),::hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 338)		this->set(HX_("game",f2,f3,5e,44),::flixel::FlxG_obj::game->_state,null());
HXLINE( 339)		this->set(HX_("controls",76,86,bc,37),::backend::Controls_obj::instance,null());
HXLINE( 341)		this->set(HX_("buildTarget",1f,d9,5d,d7),::psychlua::LuaUtils_obj::getBuildTarget(),null());
HXLINE( 342)		this->set(HX_("customSubstate",62,39,8a,88),::psychlua::CustomSubstate_obj::instance,null());
HXLINE( 343)		this->set(HX_("customSubstateName",cd,30,b8,0d),::psychlua::CustomSubstate_obj::name,null());
HXLINE( 345)		this->set(HX_("Function_Stop",c9,a5,e8,d3),::psychlua::LuaUtils_obj::Function_Stop,null());
HXLINE( 346)		this->set(HX_("Function_Continue",ae,85,11,8b),::psychlua::LuaUtils_obj::Function_Continue,null());
HXLINE( 347)		this->set(HX_("Function_StopLua",6f,6f,62,22),::psychlua::LuaUtils_obj::Function_StopLua,null());
HXLINE( 348)		this->set(HX_("Function_StopHScript",ca,bd,3f,93),::psychlua::LuaUtils_obj::Function_StopHScript,null());
HXLINE( 349)		this->set(HX_("Function_StopAll",d8,0e,5a,22),::psychlua::LuaUtils_obj::Function_StopAll,null());
            	}


 ::crowplexus::iris::IrisCall HScript_obj::call(::String funcToRun,::cpp::VirtualArray args){
            	HX_GC_STACKFRAME(&_hx_pos_22ae5a7ed167d885_422_call)
HXLINE( 423)		bool _hx_tmp;
HXDLIN( 423)		if (::hx::IsNotNull( funcToRun )) {
HXLINE( 423)			_hx_tmp = ::hx::IsNull( this->interp );
            		}
            		else {
HXLINE( 423)			_hx_tmp = true;
            		}
HXDLIN( 423)		if (_hx_tmp) {
HXLINE( 423)			return null();
            		}
HXLINE( 425)		if (!(this->exists(funcToRun))) {
HXLINE( 426)			 ::Dynamic _hx_tmp1 = ::crowplexus::iris::Iris_obj::error;
HXDLIN( 426)			_hx_tmp1((HX_("No function named: ",36,a8,c3,72) + funcToRun),this->interp->posInfos());
HXLINE( 427)			return null();
            		}
HXLINE( 430)		try {
            			HX_STACK_CATCHABLE( ::crowplexus::hscript::Error, 0);
            			HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
            			HX_STACK_CATCHABLE( ::Dynamic, 2);
HXLINE( 431)			 ::Dynamic func = this->interp->variables->get(funcToRun);
HXLINE( 432)			::cpp::VirtualArray tmp = args;
HXDLIN( 432)			::cpp::VirtualArray ret;
HXDLIN( 432)			if (::hx::IsNotNull( tmp )) {
HXLINE( 432)				ret = tmp;
            			}
            			else {
HXLINE( 432)				ret = ::cpp::VirtualArray_obj::__new(0);
            			}
HXDLIN( 432)			 ::Dynamic ret1 = ::Reflect_obj::callMethod(null(),func,ret);
HXLINE( 433)			return  ::crowplexus::iris::IrisCall_obj::__alloc( HX_CTX ,funcToRun,func,ret1);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::crowplexus::hscript::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::crowplexus::hscript::Error e2 = _hx_e;
HXLINE( 436)				 ::Dynamic pos1 = this->interp->posInfos();
HXLINE( 437)				pos1->__SetField(HX_("funcName",af,7b,2e,fb),funcToRun,::hx::paccDynamic);
HXLINE( 439)				if (::hx::IsNotNull( this->parentLua )) {
HXLINE( 441)					pos1->__SetField(HX_("isLua",ee,83,50,c1),true,::hx::paccDynamic);
HXLINE( 442)					if ((this->parentLua->lastCalledFunction != HX_("",00,00,00,00))) {
HXLINE( 442)						pos1->__SetField(HX_("funcName",af,7b,2e,fb),this->parentLua->lastCalledFunction,::hx::paccDynamic);
            					}
            				}
HXLINE( 445)				 ::Dynamic _hx_tmp2 = ::crowplexus::iris::Iris_obj::error;
HXDLIN( 445)				_hx_tmp2(::crowplexus::hscript::Printer_obj::errorToString(e2,false),pos1);
            			}
            			else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::haxe::ValueException e11 = _hx_e;
HXLINE( 447)				{
HXLINE( 447)					null();
            				}
HXLINE( 430)				if (::Std_obj::isOfType(e11->value,::hx::ClassOf< ::crowplexus::hscript::Error >())) {
HXLINE( 435)					 ::crowplexus::hscript::Error e2 = ( ( ::crowplexus::hscript::Error)(e11->value) );
HXDLIN( 435)					{
HXLINE( 436)						 ::Dynamic pos1 = this->interp->posInfos();
HXLINE( 437)						pos1->__SetField(HX_("funcName",af,7b,2e,fb),funcToRun,::hx::paccDynamic);
HXLINE( 439)						if (::hx::IsNotNull( this->parentLua )) {
HXLINE( 441)							pos1->__SetField(HX_("isLua",ee,83,50,c1),true,::hx::paccDynamic);
HXLINE( 442)							if ((this->parentLua->lastCalledFunction != HX_("",00,00,00,00))) {
HXLINE( 442)								pos1->__SetField(HX_("funcName",af,7b,2e,fb),this->parentLua->lastCalledFunction,::hx::paccDynamic);
            							}
            						}
HXLINE( 445)						 ::Dynamic _hx_tmp3 = ::crowplexus::iris::Iris_obj::error;
HXDLIN( 445)						_hx_tmp3(::crowplexus::hscript::Printer_obj::errorToString(e2,false),pos1);
            					}
            				}
            				else {
HXLINE( 448)					 ::Dynamic pos21 = this->interp->posInfos();
HXLINE( 449)					pos21->__SetField(HX_("funcName",af,7b,2e,fb),funcToRun,::hx::paccDynamic);
HXLINE( 451)					if (::hx::IsNotNull( this->parentLua )) {
HXLINE( 453)						pos21->__SetField(HX_("isLua",ee,83,50,c1),true,::hx::paccDynamic);
HXLINE( 454)						if ((this->parentLua->lastCalledFunction != HX_("",00,00,00,00))) {
HXLINE( 454)							pos21->__SetField(HX_("funcName",af,7b,2e,fb),this->parentLua->lastCalledFunction,::hx::paccDynamic);
            						}
            					}
HXLINE( 457)					 ::Dynamic _hx_tmp4 = ::crowplexus::iris::Iris_obj::error;
HXDLIN( 457)					_hx_tmp4((HX_("",00,00,00,00) + ::Std_obj::string(e11)),pos21);
            				}
            			}
            			else if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 447)				 ::haxe::Exception _g1 = ::haxe::Exception_obj::caught(_g);
HXLINE( 430)				if (::Std_obj::isOfType(_g1,::hx::ClassOf< ::haxe::ValueException >())) {
HXLINE( 447)					 ::haxe::ValueException e11 = ( ( ::haxe::ValueException)(_g1) );
HXDLIN( 447)					{
HXLINE( 448)						 ::Dynamic pos21 = this->interp->posInfos();
HXLINE( 449)						pos21->__SetField(HX_("funcName",af,7b,2e,fb),funcToRun,::hx::paccDynamic);
HXLINE( 451)						if (::hx::IsNotNull( this->parentLua )) {
HXLINE( 453)							pos21->__SetField(HX_("isLua",ee,83,50,c1),true,::hx::paccDynamic);
HXLINE( 454)							if ((this->parentLua->lastCalledFunction != HX_("",00,00,00,00))) {
HXLINE( 454)								pos21->__SetField(HX_("funcName",af,7b,2e,fb),this->parentLua->lastCalledFunction,::hx::paccDynamic);
            							}
            						}
HXLINE( 457)						 ::Dynamic _hx_tmp5 = ::crowplexus::iris::Iris_obj::error;
HXDLIN( 457)						_hx_tmp5((HX_("",00,00,00,00) + ::Std_obj::string(e11)),pos21);
            					}
            				}
            				else {
HXLINE( 430)					HX_STACK_DO_THROW(_g);
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 459)		return null();
            	}


void HScript_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_463_destroy)
HXLINE( 464)		this->origin = null();
HXLINE( 465)		this->parentLua = null();
HXLINE( 466)		this->super::destroy();
            	}


 ::Dynamic HScript_obj::set_varsToBring( ::Dynamic values){
            	HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_469_set_varsToBring)
HXLINE( 470)		if (::hx::IsNotNull( this->varsToBring )) {
HXLINE( 471)			int _g = 0;
HXDLIN( 471)			::Array< ::String > _g1 = ::Reflect_obj::fields(this->varsToBring);
HXDLIN( 471)			while((_g < _g1->length)){
HXLINE( 471)				::String key = _g1->__get(_g);
HXDLIN( 471)				_g = (_g + 1);
HXLINE( 472)				if (this->exists(::StringTools_obj::trim(key))) {
HXLINE( 473)					::Dynamic this1 = this->interp->variables;
HXDLIN( 473)					( ( ::haxe::ds::StringMap)(this1) )->remove(::StringTools_obj::trim(key));
            				}
            			}
            		}
HXLINE( 475)		if (::hx::IsNotNull( values )) {
HXLINE( 477)			int _g2 = 0;
HXDLIN( 477)			::Array< ::String > _g3 = ::Reflect_obj::fields(values);
HXDLIN( 477)			while((_g2 < _g3->length)){
HXLINE( 477)				::String key1 = _g3->__get(_g2);
HXDLIN( 477)				_g2 = (_g2 + 1);
HXLINE( 479)				key1 = ::StringTools_obj::trim(key1);
HXLINE( 480)				this->set(key1,::Reflect_obj::field(values,key1),null());
            			}
            		}
HXLINE( 484)		return (this->varsToBring = values);
            	}


HX_DEFINE_DYNAMIC_FUNC1(HScript_obj,set_varsToBring,return )

void HScript_obj::initHaxeModule( ::psychlua::FunkinLua parent){
            	HX_GC_STACKFRAME(&_hx_pos_22ae5a7ed167d885_39_initHaxeModule)
HXDLIN(  39)		if (::hx::IsNull( parent->hscript )) {
HXLINE(  41)			::haxe::Log_obj::trace((HX_("initializing haxe interp for: ",8a,18,b6,6f) + parent->scriptName),::hx::SourceInfo(HX_("source/psychlua/HScript.hx",69,3a,e1,52),41,HX_("psychlua.HScript",62,b6,a1,67),HX_("initHaxeModule",a2,30,89,5d)));
HXLINE(  42)			parent->hscript =  ::psychlua::HScript_obj::__alloc( HX_CTX ,parent,null(),null(),null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HScript_obj,initHaxeModule,(void))

void HScript_obj::initHaxeModuleCode( ::psychlua::FunkinLua parent,::String code, ::Dynamic varsToBring){
            	HX_GC_STACKFRAME(&_hx_pos_22ae5a7ed167d885_47_initHaxeModuleCode)
HXLINE(  48)		 ::psychlua::HScript hs;
HXDLIN(  48)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  48)			hs = parent->hscript;
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(  48)				hs = null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  49)		if (::hx::IsNull( hs )) {
HXLINE(  51)			::haxe::Log_obj::trace((HX_("initializing haxe interp for: ",8a,18,b6,6f) + parent->scriptName),::hx::SourceInfo(HX_("source/psychlua/HScript.hx",69,3a,e1,52),51,HX_("psychlua.HScript",62,b6,a1,67),HX_("initHaxeModuleCode",ef,06,69,05)));
HXLINE(  52)			try {
            				HX_STACK_CATCHABLE( ::crowplexus::hscript::Error, 0);
            				HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE(  53)				parent->hscript =  ::psychlua::HScript_obj::__alloc( HX_CTX ,parent,code,varsToBring,null());
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::crowplexus::hscript::Error >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::crowplexus::hscript::Error e1 = _hx_e;
HXLINE(  56)					 ::Dynamic pos1 =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("isLua",ee,83,50,c1),true)
            						->setFixed(1,HX_("fileName",e7,5a,43,62),parent->scriptName));
HXLINE(  57)					if ((parent->lastCalledFunction != HX_("",00,00,00,00))) {
HXLINE(  57)						pos1->__SetField(HX_("funcName",af,7b,2e,fb),parent->lastCalledFunction,::hx::paccDynamic);
            					}
HXLINE(  58)					 ::Dynamic _hx_tmp = ::crowplexus::iris::Iris_obj::error;
HXDLIN(  58)					_hx_tmp(::crowplexus::hscript::Printer_obj::errorToString(e1,false),pos1);
HXLINE(  59)					parent->hscript = null();
            				}
            				else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::ValueException _g1 = _hx_e;
HXLINE(  55)					{
HXLINE(  55)						null();
            					}
HXLINE(  52)					if (::Std_obj::isOfType(_g1->value,::hx::ClassOf< ::crowplexus::hscript::Error >())) {
HXLINE(  55)						 ::crowplexus::hscript::Error e1 = ( ( ::crowplexus::hscript::Error)(_g1->value) );
HXDLIN(  55)						{
HXLINE(  56)							 ::Dynamic pos1 =  ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("isLua",ee,83,50,c1),true)
            								->setFixed(1,HX_("fileName",e7,5a,43,62),parent->scriptName));
HXLINE(  57)							if ((parent->lastCalledFunction != HX_("",00,00,00,00))) {
HXLINE(  57)								pos1->__SetField(HX_("funcName",af,7b,2e,fb),parent->lastCalledFunction,::hx::paccDynamic);
            							}
HXLINE(  58)							 ::Dynamic _hx_tmp1 = ::crowplexus::iris::Iris_obj::error;
HXDLIN(  58)							_hx_tmp1(::crowplexus::hscript::Printer_obj::errorToString(e1,false),pos1);
HXLINE(  59)							parent->hscript = null();
            						}
            					}
            					else {
HXLINE(  52)						HX_STACK_DO_THROW(_g1);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		else {
HXLINE(  64)			try {
            				HX_STACK_CATCHABLE( ::crowplexus::hscript::Error, 0);
            				HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE(  66)				hs->scriptCode = code;
HXLINE(  67)				hs->set_varsToBring(varsToBring);
HXLINE(  68)				hs->parse(true);
HXLINE(  69)				 ::Dynamic ret = hs->execute();
HXLINE(  70)				hs->returnValue = ret;
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::crowplexus::hscript::Error >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::crowplexus::hscript::Error e21 = _hx_e;
HXLINE(  74)					 ::Dynamic pos21 = hs->interp->posInfos();
HXLINE(  75)					pos21->__SetField(HX_("isLua",ee,83,50,c1),true,::hx::paccDynamic);
HXLINE(  76)					if ((parent->lastCalledFunction != HX_("",00,00,00,00))) {
HXLINE(  76)						pos21->__SetField(HX_("funcName",af,7b,2e,fb),parent->lastCalledFunction,::hx::paccDynamic);
            					}
HXLINE(  77)					 ::Dynamic _hx_tmp2 = ::crowplexus::iris::Iris_obj::error;
HXDLIN(  77)					_hx_tmp2(::crowplexus::hscript::Printer_obj::errorToString(e21,false),pos21);
HXLINE(  78)					hs->returnValue = null();
            				}
            				else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::ValueException _g2 = _hx_e;
HXLINE(  72)					{
HXLINE(  72)						null();
            					}
HXLINE(  64)					if (::Std_obj::isOfType(_g2->value,::hx::ClassOf< ::crowplexus::hscript::Error >())) {
HXLINE(  72)						 ::crowplexus::hscript::Error e21 = ( ( ::crowplexus::hscript::Error)(_g2->value) );
HXLINE(  73)						{
HXLINE(  74)							 ::Dynamic pos21 = hs->interp->posInfos();
HXLINE(  75)							pos21->__SetField(HX_("isLua",ee,83,50,c1),true,::hx::paccDynamic);
HXLINE(  76)							if ((parent->lastCalledFunction != HX_("",00,00,00,00))) {
HXLINE(  76)								pos21->__SetField(HX_("funcName",af,7b,2e,fb),parent->lastCalledFunction,::hx::paccDynamic);
            							}
HXLINE(  77)							 ::Dynamic _hx_tmp3 = ::crowplexus::iris::Iris_obj::error;
HXDLIN(  77)							_hx_tmp3(::crowplexus::hscript::Printer_obj::errorToString(e21,false),pos21);
HXLINE(  78)							hs->returnValue = null();
            						}
            					}
            					else {
HXLINE(  64)						HX_STACK_DO_THROW(_g2);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(HScript_obj,initHaxeModuleCode,(void))

void HScript_obj::implement( ::psychlua::FunkinLua funk){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::psychlua::FunkinLua,funk) HXARGC(4)
            		 ::Dynamic _hx_run(::String codeToRun, ::Dynamic varsToBring,::String funcToRun,::cpp::VirtualArray funcArgs){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_354_implement)
HXLINE( 355)			::psychlua::HScript_obj::initHaxeModuleCode(funk,codeToRun,varsToBring);
HXLINE( 356)			if (::hx::IsNotNull( funk->hscript )) {
HXLINE( 358)				 ::crowplexus::iris::IrisCall retVal = funk->hscript->call(funcToRun,funcArgs);
HXLINE( 359)				if (::hx::IsNotNull( retVal )) {
HXLINE( 361)					if (::psychlua::LuaUtils_obj::isLuaSupported(retVal->returnValue)) {
HXLINE( 361)						return retVal->returnValue;
            					}
            					else {
HXLINE( 361)						return null();
            					}
            				}
            				else {
HXLINE( 363)					if (::hx::IsNotNull( funk->hscript->returnValue )) {
HXLINE( 365)						return funk->hscript->returnValue;
            					}
            				}
            			}
HXLINE( 368)			return null();
            		}
            		HX_END_LOCAL_FUNC4(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::psychlua::FunkinLua,funk) HXARGC(2)
            		 ::Dynamic _hx_run(::String funcToRun,::cpp::VirtualArray funcArgs){
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_371_implement)
HXLINE( 372)			if (::hx::IsNotNull( funk->hscript )) {
HXLINE( 374)				 ::crowplexus::iris::IrisCall retVal = funk->hscript->call(funcToRun,funcArgs);
HXLINE( 375)				if (::hx::IsNotNull( retVal )) {
HXLINE( 377)					if (::psychlua::LuaUtils_obj::isLuaSupported(retVal->returnValue)) {
HXLINE( 377)						return retVal->returnValue;
            					}
            					else {
HXLINE( 377)						return null();
            					}
            				}
            			}
            			else {
HXLINE( 382)				 ::Dynamic pos =  ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("showLine",91,db,39,af),false)
            					->setFixed(1,HX_("fileName",e7,5a,43,62),funk->scriptName));
HXLINE( 383)				if ((funk->lastCalledFunction != HX_("",00,00,00,00))) {
HXLINE( 383)					pos->__SetField(HX_("funcName",af,7b,2e,fb),funk->lastCalledFunction,::hx::paccDynamic);
            				}
HXLINE( 384)				::crowplexus::iris::Iris_obj::error(HX_("runHaxeFunction: HScript has not been initialized yet! Use \"runHaxeCode\" to initialize it",1f,6e,18,94),pos);
            			}
HXLINE( 386)			return null();
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::psychlua::FunkinLua,funk) HXARGC(2)
            		void _hx_run(::String libName,::String __o_libPackage){
            		::String libPackage = __o_libPackage;
            		if (::hx::IsNull(__o_libPackage)) libPackage = HX_("",00,00,00,00);
            			HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_389_implement)
HXLINE( 390)			::String str = HX_("",00,00,00,00);
HXLINE( 391)			if ((libPackage.length > 0)) {
HXLINE( 392)				str = (libPackage + HX_(".",2e,00,00,00));
            			}
            			else {
HXLINE( 393)				if (::hx::IsNull( libName )) {
HXLINE( 394)					libName = HX_("",00,00,00,00);
            				}
            			}
HXLINE( 396)			 ::Dynamic c = ::Type_obj::resolveClass((str + libName));
HXLINE( 397)			if (::hx::IsNull( c )) {
HXLINE( 398)				c = ::Type_obj::resolveEnum((str + libName));
            			}
HXLINE( 400)			if (::hx::IsNull( funk->hscript )) {
HXLINE( 401)				::psychlua::HScript_obj::initHaxeModule(funk);
            			}
HXLINE( 403)			 ::Dynamic pos = funk->hscript->interp->posInfos();
HXLINE( 404)			pos->__SetField(HX_("showLine",91,db,39,af),false,::hx::paccDynamic);
HXLINE( 405)			if ((funk->lastCalledFunction != HX_("",00,00,00,00))) {
HXLINE( 406)				pos->__SetField(HX_("funcName",af,7b,2e,fb),funk->lastCalledFunction,::hx::paccDynamic);
            			}
HXLINE( 408)			try {
            				HX_STACK_CATCHABLE( ::crowplexus::hscript::Error, 0);
            				HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE( 409)				if (::hx::IsNotNull( c )) {
HXLINE( 410)					funk->hscript->set(libName,c,null());
            				}
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::crowplexus::hscript::Error >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::crowplexus::hscript::Error e1 = _hx_e;
HXLINE( 413)					 ::Dynamic _hx_tmp = ::crowplexus::iris::Iris_obj::error;
HXDLIN( 413)					_hx_tmp(::crowplexus::hscript::Printer_obj::errorToString(e1,false),pos);
            				}
            				else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::ValueException _g = _hx_e;
HXLINE( 412)					{
HXLINE( 412)						null();
            					}
HXLINE( 408)					if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::crowplexus::hscript::Error >())) {
HXLINE( 412)						 ::crowplexus::hscript::Error e1 = ( ( ::crowplexus::hscript::Error)(_g->value) );
HXLINE( 413)						{
HXLINE( 413)							 ::Dynamic _hx_tmp1 = ::crowplexus::iris::Iris_obj::error;
HXDLIN( 413)							_hx_tmp1(::crowplexus::hscript::Printer_obj::errorToString(e1,false),pos);
            						}
            					}
            					else {
HXLINE( 408)						HX_STACK_DO_THROW(_g);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 415)			::psychlua::FunkinLua_obj::lastCalledScript = funk;
HXLINE( 416)			bool _hx_tmp2;
HXDLIN( 416)			if (::psychlua::FunkinLua_obj::getBool(HX_("luaDebugMode",7e,06,20,4c))) {
HXLINE( 416)				_hx_tmp2 = ::psychlua::FunkinLua_obj::getBool(HX_("luaDeprecatedWarnings",02,69,36,70));
            			}
            			else {
HXLINE( 416)				_hx_tmp2 = false;
            			}
HXDLIN( 416)			if (_hx_tmp2) {
HXLINE( 417)				::crowplexus::iris::Iris_obj::warn(HX_("addHaxeLibrary is deprecated! Import classes through \"import\" in HScript!",38,c3,01,54),pos);
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_STACKFRAME(&_hx_pos_22ae5a7ed167d885_353_implement)
HXLINE( 354)		funk->addLocalCallback(HX_("runHaxeCode",de,82,8b,0f), ::Dynamic(new _hx_Closure_0(funk)));
HXLINE( 371)		funk->addLocalCallback(HX_("runHaxeFunction",49,a9,42,e6), ::Dynamic(new _hx_Closure_1(funk)));
HXLINE( 389)		funk->addLocalCallback(HX_("addHaxeLibrary",d4,92,3b,4b), ::Dynamic(new _hx_Closure_2(funk)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HScript_obj,implement,(void))


::hx::ObjectPtr< HScript_obj > HScript_obj::__new( ::Dynamic parent,::String file, ::Dynamic varsToBring, ::Dynamic __o_manualRun) {
	::hx::ObjectPtr< HScript_obj > __this = new HScript_obj();
	__this->__construct(parent,file,varsToBring,__o_manualRun);
	return __this;
}

::hx::ObjectPtr< HScript_obj > HScript_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic parent,::String file, ::Dynamic varsToBring, ::Dynamic __o_manualRun) {
	HScript_obj *__this = (HScript_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(HScript_obj), true, "psychlua.HScript"));
	*(void **)__this = HScript_obj::_hx_vtable;
	__this->__construct(parent,file,varsToBring,__o_manualRun);
	return __this;
}

HScript_obj::HScript_obj()
{
}

void HScript_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(HScript);
	HX_MARK_MEMBER_NAME(filePath,"filePath");
	HX_MARK_MEMBER_NAME(modFolder,"modFolder");
	HX_MARK_MEMBER_NAME(returnValue,"returnValue");
	HX_MARK_MEMBER_NAME(parentLua,"parentLua");
	HX_MARK_MEMBER_NAME(origin,"origin");
	HX_MARK_MEMBER_NAME(varsToBring,"varsToBring");
	 ::crowplexus::iris::Iris_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void HScript_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(filePath,"filePath");
	HX_VISIT_MEMBER_NAME(modFolder,"modFolder");
	HX_VISIT_MEMBER_NAME(returnValue,"returnValue");
	HX_VISIT_MEMBER_NAME(parentLua,"parentLua");
	HX_VISIT_MEMBER_NAME(origin,"origin");
	HX_VISIT_MEMBER_NAME(varsToBring,"varsToBring");
	 ::crowplexus::iris::Iris_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val HScript_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"call") ) { return ::hx::Val( call_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"origin") ) { return ::hx::Val( origin ); }
		if (HX_FIELD_EQ(inName,"preset") ) { return ::hx::Val( preset_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"filePath") ) { return ::hx::Val( filePath ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"modFolder") ) { return ::hx::Val( modFolder ); }
		if (HX_FIELD_EQ(inName,"parentLua") ) { return ::hx::Val( parentLua ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"returnValue") ) { return ::hx::Val( returnValue ); }
		if (HX_FIELD_EQ(inName,"varsToBring") ) { return ::hx::Val( varsToBring ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"set_varsToBring") ) { return ::hx::Val( set_varsToBring_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool HScript_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"implement") ) { outValue = implement_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"initHaxeModule") ) { outValue = initHaxeModule_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"initHaxeModuleCode") ) { outValue = initHaxeModuleCode_dyn(); return true; }
	}
	return false;
}

::hx::Val HScript_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"origin") ) { origin=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"filePath") ) { filePath=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"modFolder") ) { modFolder=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parentLua") ) { parentLua=inValue.Cast<  ::psychlua::FunkinLua >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"returnValue") ) { returnValue=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"varsToBring") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_varsToBring(inValue.Cast<  ::Dynamic >()) );varsToBring=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void HScript_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("filePath",41,ce,95,63));
	outFields->push(HX_("modFolder",10,7f,30,0a));
	outFields->push(HX_("returnValue",a1,4c,95,3e));
	outFields->push(HX_("parentLua",ae,22,50,7f));
	outFields->push(HX_("origin",e6,19,01,4b));
	outFields->push(HX_("varsToBring",4b,8f,ab,36));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo HScript_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(HScript_obj,filePath),HX_("filePath",41,ce,95,63)},
	{::hx::fsString,(int)offsetof(HScript_obj,modFolder),HX_("modFolder",10,7f,30,0a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(HScript_obj,returnValue),HX_("returnValue",a1,4c,95,3e)},
	{::hx::fsObject /*  ::psychlua::FunkinLua */ ,(int)offsetof(HScript_obj,parentLua),HX_("parentLua",ae,22,50,7f)},
	{::hx::fsString,(int)offsetof(HScript_obj,origin),HX_("origin",e6,19,01,4b)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(HScript_obj,varsToBring),HX_("varsToBring",4b,8f,ab,36)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *HScript_obj_sStaticStorageInfo = 0;
#endif

static ::String HScript_obj_sMemberFields[] = {
	HX_("filePath",41,ce,95,63),
	HX_("modFolder",10,7f,30,0a),
	HX_("returnValue",a1,4c,95,3e),
	HX_("parentLua",ae,22,50,7f),
	HX_("origin",e6,19,01,4b),
	HX_("varsToBring",4b,8f,ab,36),
	HX_("preset",5f,b3,c0,ae),
	HX_("call",9e,18,ba,41),
	HX_("destroy",fa,2c,86,24),
	HX_("set_varsToBring",ee,c3,58,f3),
	::String(null()) };

::hx::Class HScript_obj::__mClass;

static ::String HScript_obj_sStaticFields[] = {
	HX_("initHaxeModule",a2,30,89,5d),
	HX_("initHaxeModuleCode",ef,06,69,05),
	HX_("implement",a3,71,3f,af),
	::String(null())
};

void HScript_obj::__register()
{
	HScript_obj _hx_dummy;
	HScript_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("psychlua.HScript",62,b6,a1,67);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &HScript_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(HScript_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(HScript_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< HScript_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HScript_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HScript_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace psychlua
