// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flxanimate_FlxAnimate
#include <flxanimate/FlxAnimate.h>
#endif
#ifndef INCLUDED_flxanimate_PsychFlxAnimate
#include <flxanimate/PsychFlxAnimate.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxAnim
#include <flxanimate/animate/FlxAnim.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxSymbol
#include <flxanimate/animate/FlxSymbol.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_llua_Lua_helper
#include <llua/Lua_helper.h>
#endif
#ifndef INCLUDED_psychlua_FlxAnimateFunctions
#include <psychlua/FlxAnimateFunctions.h>
#endif
#ifndef INCLUDED_psychlua_FunkinLua
#include <psychlua/FunkinLua.h>
#endif
#ifndef INCLUDED_psychlua_ModchartAnimateSprite
#include <psychlua/ModchartAnimateSprite.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_30240667ee47f115_9_implement,"psychlua.FlxAnimateFunctions","implement",0x3a3823d0,"psychlua.FlxAnimateFunctions.implement","psychlua/FlxAnimateFunctions.hx",9,0xa7646e04)
HX_LOCAL_STACK_FRAME(_hx_pos_30240667ee47f115_11_implement,"psychlua.FlxAnimateFunctions","implement",0x3a3823d0,"psychlua.FlxAnimateFunctions.implement","psychlua/FlxAnimateFunctions.hx",11,0xa7646e04)
HX_LOCAL_STACK_FRAME(_hx_pos_30240667ee47f115_27_implement,"psychlua.FlxAnimateFunctions","implement",0x3a3823d0,"psychlua.FlxAnimateFunctions.implement","psychlua/FlxAnimateFunctions.hx",27,0xa7646e04)
HX_LOCAL_STACK_FRAME(_hx_pos_30240667ee47f115_33_implement,"psychlua.FlxAnimateFunctions","implement",0x3a3823d0,"psychlua.FlxAnimateFunctions.implement","psychlua/FlxAnimateFunctions.hx",33,0xa7646e04)
HX_LOCAL_STACK_FRAME(_hx_pos_30240667ee47f115_48_implement,"psychlua.FlxAnimateFunctions","implement",0x3a3823d0,"psychlua.FlxAnimateFunctions.implement","psychlua/FlxAnimateFunctions.hx",48,0xa7646e04)
namespace psychlua{

void FlxAnimateFunctions_obj::__construct() { }

Dynamic FlxAnimateFunctions_obj::__CreateEmpty() { return new FlxAnimateFunctions_obj; }

void *FlxAnimateFunctions_obj::_hx_vtable = 0;

Dynamic FlxAnimateFunctions_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxAnimateFunctions_obj > _hx_result = new FlxAnimateFunctions_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxAnimateFunctions_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7efa81c7;
}

void FlxAnimateFunctions_obj::implement( ::psychlua::FunkinLua funk){
            	HX_STACKFRAME(&_hx_pos_30240667ee47f115_9_implement)
HXLINE(  10)		 cpp::Reference<lua_State> lua = funk->lua;
HXLINE(  11)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(4)
            			void _hx_run(::String tag, ::Dynamic __o_x, ::Dynamic __o_y,::String loadFolder){
            		 ::Dynamic x = __o_x;
            		if (::hx::IsNull(__o_x)) x = 0;
            		 ::Dynamic y = __o_y;
            		if (::hx::IsNull(__o_y)) y = 0;
            				HX_GC_STACKFRAME(&_hx_pos_30240667ee47f115_11_implement)
HXLINE(  12)				tag = ::StringTools_obj::replace(tag,HX_(".",2e,00,00,00),HX_("",00,00,00,00));
HXLINE(  13)				 ::Dynamic lastSprite = ::backend::MusicBeatState_obj::getVariables()->get(tag);
HXLINE(  14)				if (::hx::IsNotNull( lastSprite )) {
HXLINE(  16)					lastSprite->__Field(HX_("kill",9e,df,09,47),::hx::paccDynamic)();
HXLINE(  17)					::states::PlayState_obj::instance->remove(lastSprite,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(  18)					lastSprite->__Field(HX_("destroy",fa,2c,86,24),::hx::paccDynamic)();
            				}
HXLINE(  21)				 ::psychlua::ModchartAnimateSprite mySprite =  ::psychlua::ModchartAnimateSprite_obj::__alloc( HX_CTX ,x,y);
HXLINE(  22)				if (::hx::IsNotNull( loadFolder )) {
HXLINE(  22)					::backend::Paths_obj::loadAnimateAtlas(mySprite,loadFolder,null(),null());
            				}
HXLINE(  23)				::backend::MusicBeatState_obj::getVariables()->set(tag,mySprite);
HXLINE(  24)				mySprite->set_active(true);
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(  11)			::llua::Lua_helper_obj::callbacks->set(HX_("makeFlxAnimateSprite",c2,d7,dd,58), ::Dynamic(new _hx_Closure_0()));
HXDLIN(  11)			linc::callbacks::add_callback_function(lua,HX_("makeFlxAnimateSprite",c2,d7,dd,58));
            		}
HXLINE(  27)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(4)
            			void _hx_run(::String tag,::String folderOrImg,::String spriteJson,::String animationJson){
            				HX_STACKFRAME(&_hx_pos_30240667ee47f115_27_implement)
HXLINE(  28)				 ::flxanimate::PsychFlxAnimate spr = ( ( ::flxanimate::PsychFlxAnimate)(::backend::MusicBeatState_obj::getVariables()->get(tag)) );
HXLINE(  29)				if (::hx::IsNotNull( spr )) {
HXLINE(  29)					::backend::Paths_obj::loadAnimateAtlas(spr,folderOrImg,spriteJson,animationJson);
            				}
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(  27)			::llua::Lua_helper_obj::callbacks->set(HX_("loadAnimateAtlas",30,42,b8,04), ::Dynamic(new _hx_Closure_1()));
HXDLIN(  27)			linc::callbacks::add_callback_function(lua,HX_("loadAnimateAtlas",30,42,b8,04));
            		}
HXLINE(  32)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(7)
            			bool _hx_run(::String tag,::String name,::String symbol, ::Dynamic __o_framerate, ::Dynamic __o_loop, ::Dynamic __o_matX, ::Dynamic __o_matY){
            		 ::Dynamic framerate = __o_framerate;
            		if (::hx::IsNull(__o_framerate)) framerate = 24;
            		 ::Dynamic loop = __o_loop;
            		if (::hx::IsNull(__o_loop)) loop = false;
            		 ::Dynamic matX = __o_matX;
            		if (::hx::IsNull(__o_matX)) matX = 0;
            		 ::Dynamic matY = __o_matY;
            		if (::hx::IsNull(__o_matY)) matY = 0;
            				HX_STACKFRAME(&_hx_pos_30240667ee47f115_33_implement)
HXLINE(  34)				 ::flxanimate::PsychFlxAnimate obj = ( ( ::flxanimate::PsychFlxAnimate)(::backend::MusicBeatState_obj::getVariables()->get(tag)) );
HXLINE(  35)				if (::hx::IsNull( obj )) {
HXLINE(  35)					return false;
            				}
HXLINE(  37)				obj->anim->addBySymbol(name,symbol,framerate,loop,matX,matY);
HXLINE(  38)				if (::hx::IsNull( obj->anim->get_curSymbol() )) {
HXLINE(  40)					 ::psychlua::ModchartAnimateSprite obj2 = ::hx::TCast<  ::psychlua::ModchartAnimateSprite >::cast(obj);
HXLINE(  41)					if (::hx::IsNotNull( obj2 )) {
HXLINE(  41)						obj2->playAnim(name,true,null(),null());
            					}
            					else {
HXLINE(  42)						obj->anim->play(name,true,null(),null());
            					}
            				}
HXLINE(  44)				return true;
            			}
            			HX_END_LOCAL_FUNC7(return)

HXLINE(  32)			::llua::Lua_helper_obj::callbacks->set(HX_("addAnimationBySymbol",52,9c,e7,6b), ::Dynamic(new _hx_Closure_2()));
HXDLIN(  32)			linc::callbacks::add_callback_function(lua,HX_("addAnimationBySymbol",52,9c,e7,6b));
            		}
HXLINE(  47)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(8)
            			bool _hx_run(::String tag,::String name,::String symbol, ::Dynamic indices, ::Dynamic __o_framerate, ::Dynamic __o_loop, ::Dynamic __o_matX, ::Dynamic __o_matY){
            		 ::Dynamic framerate = __o_framerate;
            		if (::hx::IsNull(__o_framerate)) framerate = 24;
            		 ::Dynamic loop = __o_loop;
            		if (::hx::IsNull(__o_loop)) loop = false;
            		 ::Dynamic matX = __o_matX;
            		if (::hx::IsNull(__o_matX)) matX = 0;
            		 ::Dynamic matY = __o_matY;
            		if (::hx::IsNull(__o_matY)) matY = 0;
            				HX_STACKFRAME(&_hx_pos_30240667ee47f115_48_implement)
HXLINE(  49)				 ::flxanimate::PsychFlxAnimate obj = ( ( ::flxanimate::PsychFlxAnimate)(::backend::MusicBeatState_obj::getVariables()->get(tag)) );
HXLINE(  50)				if (::hx::IsNull( obj )) {
HXLINE(  50)					return false;
            				}
HXLINE(  52)				if (::hx::IsNull( indices )) {
HXLINE(  53)					indices = ::cpp::VirtualArray_obj::__new(1)->init(0,0);
            				}
            				else {
HXLINE(  54)					if (::Std_obj::isOfType(indices,::hx::ClassOf< ::String >())) {
HXLINE(  56)						::Array< ::String > strIndices = ::StringTools_obj::trim(::hx::TCast< ::String >::cast(indices)).split(HX_(",",2c,00,00,00));
HXLINE(  57)						::Array< int > myIndices = ::Array_obj< int >::__new(0);
HXLINE(  58)						{
HXLINE(  58)							int _g = 0;
HXDLIN(  58)							int _g1 = strIndices->length;
HXDLIN(  58)							while((_g < _g1)){
HXLINE(  58)								_g = (_g + 1);
HXDLIN(  58)								int i = (_g - 1);
HXLINE(  59)								myIndices->push(::Std_obj::parseInt(strIndices->__get(i)));
            							}
            						}
HXLINE(  61)						indices = myIndices;
            					}
            				}
HXLINE(  64)				obj->anim->addBySymbolIndices(name,symbol,( (::Array< int >)(indices) ),framerate,loop,matX,matY);
HXLINE(  65)				if (::hx::IsNull( obj->anim->get_curSymbol() )) {
HXLINE(  67)					 ::psychlua::ModchartAnimateSprite obj2 = ::hx::TCast<  ::psychlua::ModchartAnimateSprite >::cast(obj);
HXLINE(  68)					if (::hx::IsNotNull( obj2 )) {
HXLINE(  68)						obj2->playAnim(name,true,null(),null());
            					}
            					else {
HXLINE(  69)						obj->anim->play(name,true,null(),null());
            					}
            				}
HXLINE(  71)				return true;
            			}
            			HX_END_LOCAL_FUNC8(return)

HXLINE(  47)			::llua::Lua_helper_obj::callbacks->set(HX_("addAnimationBySymbolIndices",f5,e0,51,af), ::Dynamic(new _hx_Closure_3()));
HXDLIN(  47)			linc::callbacks::add_callback_function(lua,HX_("addAnimationBySymbolIndices",f5,e0,51,af));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxAnimateFunctions_obj,implement,(void))


FlxAnimateFunctions_obj::FlxAnimateFunctions_obj()
{
}

bool FlxAnimateFunctions_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"implement") ) { outValue = implement_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxAnimateFunctions_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FlxAnimateFunctions_obj_sStaticStorageInfo = 0;
#endif

::hx::Class FlxAnimateFunctions_obj::__mClass;

static ::String FlxAnimateFunctions_obj_sStaticFields[] = {
	HX_("implement",a3,71,3f,af),
	::String(null())
};

void FlxAnimateFunctions_obj::__register()
{
	FlxAnimateFunctions_obj _hx_dummy;
	FlxAnimateFunctions_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("psychlua.FlxAnimateFunctions",5b,08,ed,f0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxAnimateFunctions_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxAnimateFunctions_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FlxAnimateFunctions_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxAnimateFunctions_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxAnimateFunctions_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace psychlua
