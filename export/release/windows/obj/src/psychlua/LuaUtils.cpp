// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_StageData
#include <backend/StageData.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_psychlua_LuaUtils
#include <psychlua/LuaUtils.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_substates_GameOverSubstate
#include <substates/GameOverSubstate.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_tjson_TJSON
#include <tjson/TJSON.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_32_getLuaTween,"psychlua.LuaUtils","getLuaTween",0xfcb23685,"psychlua.LuaUtils.getLuaTween","psychlua/LuaUtils.hx",32,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_44_setVarInArray,"psychlua.LuaUtils","setVarInArray",0x3b887acb,"psychlua.LuaUtils.setVarInArray","psychlua/LuaUtils.hx",44,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_84_getVarInArray,"psychlua.LuaUtils","getVarInArray",0xf68298bf,"psychlua.LuaUtils.getVarInArray","psychlua/LuaUtils.hx",84,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_122_getModSetting,"psychlua.LuaUtils","getModSetting",0x01b18060,"psychlua.LuaUtils.getModSetting","psychlua/LuaUtils.hx",122,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_193_isMap,"psychlua.LuaUtils","isMap",0xbb6b8e0e,"psychlua.LuaUtils.isMap","psychlua/LuaUtils.hx",193,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_206_setGroupStuff,"psychlua.LuaUtils","setGroupStuff",0x9e8e62b3,"psychlua.LuaUtils.setGroupStuff","psychlua/LuaUtils.hx",206,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_220_getGroupStuff,"psychlua.LuaUtils","getGroupStuff",0x598880a7,"psychlua.LuaUtils.getGroupStuff","psychlua/LuaUtils.hx",220,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_236_getPropertyLoop,"psychlua.LuaUtils","getPropertyLoop",0x2e8b7b4b,"psychlua.LuaUtils.getPropertyLoop","psychlua/LuaUtils.hx",236,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_247_getObjectDirectly,"psychlua.LuaUtils","getObjectDirectly",0xcdfc0a47,"psychlua.LuaUtils.getObjectDirectly","psychlua/LuaUtils.hx",247,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_260_isOfTypes,"psychlua.LuaUtils","isOfTypes",0xc6f25054,"psychlua.LuaUtils.isOfTypes","psychlua/LuaUtils.hx",260,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_268_isLuaSupported,"psychlua.LuaUtils","isLuaSupported",0x13e5d3a4,"psychlua.LuaUtils.isLuaSupported","psychlua/LuaUtils.hx",268,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_272_getTargetInstance,"psychlua.LuaUtils","getTargetInstance",0xdbd9fa78,"psychlua.LuaUtils.getTargetInstance","psychlua/LuaUtils.hx",272,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_278_getLowestCharacterGroup,"psychlua.LuaUtils","getLowestCharacterGroup",0x30e7469a,"psychlua.LuaUtils.getLowestCharacterGroup","psychlua/LuaUtils.hx",278,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_301_addAnimByIndices,"psychlua.LuaUtils","addAnimByIndices",0xe228f722,"psychlua.LuaUtils.addAnimByIndices","psychlua/LuaUtils.hx",301,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_333_loadFrames,"psychlua.LuaUtils","loadFrames",0x49dd8bb0,"psychlua.LuaUtils.loadFrames","psychlua/LuaUtils.hx",333,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_355_destroyObject,"psychlua.LuaUtils","destroyObject",0xe5690c95,"psychlua.LuaUtils.destroyObject","psychlua/LuaUtils.hx",355,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_366_cancelTween,"psychlua.LuaUtils","cancelTween",0xf68400cd,"psychlua.LuaUtils.cancelTween","psychlua/LuaUtils.hx",366,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_378_cancelTimer,"psychlua.LuaUtils","cancelTimer",0xed491627,"psychlua.LuaUtils.cancelTimer","psychlua/LuaUtils.hx",378,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_391_formatVariable,"psychlua.LuaUtils","formatVariable",0x91988bd7,"psychlua.LuaUtils.formatVariable","psychlua/LuaUtils.hx",391,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_393_tweenPrepare,"psychlua.LuaUtils","tweenPrepare",0x304288a0,"psychlua.LuaUtils.tweenPrepare","psychlua/LuaUtils.hx",393,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_407_getBuildTarget,"psychlua.LuaUtils","getBuildTarget",0x46c2cb6d,"psychlua.LuaUtils.getBuildTarget","psychlua/LuaUtils.hx",407,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_425_getTweenTypeByString,"psychlua.LuaUtils","getTweenTypeByString",0x069b72bb,"psychlua.LuaUtils.getTweenTypeByString","psychlua/LuaUtils.hx",425,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_436_getTweenEaseByString,"psychlua.LuaUtils","getTweenEaseByString",0x58695fef,"psychlua.LuaUtils.getTweenEaseByString","psychlua/LuaUtils.hx",436,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_478_blendModeFromString,"psychlua.LuaUtils","blendModeFromString",0xdbbad18b,"psychlua.LuaUtils.blendModeFromString","psychlua/LuaUtils.hx",478,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_498_typeToString,"psychlua.LuaUtils","typeToString",0xee774fca,"psychlua.LuaUtils.typeToString","psychlua/LuaUtils.hx",498,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_512_cameraFromString,"psychlua.LuaUtils","cameraFromString",0xa8801124,"psychlua.LuaUtils.cameraFromString","psychlua/LuaUtils.hx",512,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_24_boot,"psychlua.LuaUtils","boot",0x782f2676,"psychlua.LuaUtils.boot","psychlua/LuaUtils.hx",24,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_25_boot,"psychlua.LuaUtils","boot",0x782f2676,"psychlua.LuaUtils.boot","psychlua/LuaUtils.hx",25,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_26_boot,"psychlua.LuaUtils","boot",0x782f2676,"psychlua.LuaUtils.boot","psychlua/LuaUtils.hx",26,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_27_boot,"psychlua.LuaUtils","boot",0x782f2676,"psychlua.LuaUtils.boot","psychlua/LuaUtils.hx",27,0x035b91f3)
HX_LOCAL_STACK_FRAME(_hx_pos_9a11087af2501d00_28_boot,"psychlua.LuaUtils","boot",0x782f2676,"psychlua.LuaUtils.boot","psychlua/LuaUtils.hx",28,0x035b91f3)
namespace psychlua{

void LuaUtils_obj::__construct() { }

Dynamic LuaUtils_obj::__CreateEmpty() { return new LuaUtils_obj; }

void *LuaUtils_obj::_hx_vtable = 0;

Dynamic LuaUtils_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LuaUtils_obj > _hx_result = new LuaUtils_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool LuaUtils_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x23f0befa;
}

::String LuaUtils_obj::Function_Stop;

::String LuaUtils_obj::Function_Continue;

::String LuaUtils_obj::Function_StopLua;

::String LuaUtils_obj::Function_StopHScript;

::String LuaUtils_obj::Function_StopAll;

 ::Dynamic LuaUtils_obj::getLuaTween( ::Dynamic options){
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_32_getLuaTween)
HXDLIN(  32)		if (::hx::IsNotNull( options )) {
HXLINE(  33)			int _hx_tmp = ::psychlua::LuaUtils_obj::getTweenTypeByString(( (::String)(options->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) ));
HXLINE(  34)			 ::Dynamic options1 =  ::Dynamic(options->__Field(HX_("startDelay",c1,af,3d,f3),::hx::paccDynamic));
HXLINE(  35)			 ::Dynamic options2 =  ::Dynamic(options->__Field(HX_("onUpdate",88,7c,b2,66),::hx::paccDynamic));
HXLINE(  36)			 ::Dynamic options3 =  ::Dynamic(options->__Field(HX_("onStart",c3,12,49,1a),::hx::paccDynamic));
HXLINE(  37)			 ::Dynamic options4 =  ::Dynamic(options->__Field(HX_("onComplete",f8,d4,7e,5d),::hx::paccDynamic));
HXLINE(  38)			 ::Dynamic options5 =  ::Dynamic(options->__Field(HX_("loopDelay",7f,f6,d2,04),::hx::paccDynamic));
HXLINE(  32)			return  ::Dynamic(::hx::Anon_obj::Create(7)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),options1)
            				->setFixed(1,HX_("loopDelay",7f,f6,d2,04),options5)
            				->setFixed(2,HX_("onStart",c3,12,49,1a),options3)
            				->setFixed(3,HX_("ease",ee,8b,0c,43),::psychlua::LuaUtils_obj::getTweenEaseByString(( (::String)(options->__Field(HX_("ease",ee,8b,0c,43),::hx::paccDynamic)) )))
            				->setFixed(4,HX_("type",ba,f2,08,4d),_hx_tmp)
            				->setFixed(5,HX_("onComplete",f8,d4,7e,5d),options4)
            				->setFixed(6,HX_("onUpdate",88,7c,b2,66),options2));
            		}
            		else {
HXLINE(  40)			return null();
            		}
HXLINE(  32)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LuaUtils_obj,getLuaTween,return )

 ::Dynamic LuaUtils_obj::setVarInArray( ::Dynamic instance,::String variable, ::Dynamic value,::hx::Null< bool >  __o_allowMaps){
            		bool allowMaps = __o_allowMaps.Default(false);
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_44_setVarInArray)
HXLINE(  45)		::Array< ::String > splitProps = variable.split(HX_("[",5b,00,00,00));
HXLINE(  46)		if ((splitProps->length > 1)) {
HXLINE(  48)			 ::Dynamic target = null();
HXLINE(  49)			::Dynamic this1 = ::backend::MusicBeatState_obj::getVariables();
HXDLIN(  49)			if (( ( ::haxe::ds::StringMap)(this1) )->exists(splitProps->__get(0))) {
HXLINE(  51)				::Dynamic this2 = ::backend::MusicBeatState_obj::getVariables();
HXDLIN(  51)				 ::Dynamic retVal = ( ( ::haxe::ds::StringMap)(this2) )->get(splitProps->__get(0));
HXLINE(  52)				if (::hx::IsNotNull( retVal )) {
HXLINE(  53)					target = retVal;
            				}
            			}
            			else {
HXLINE(  55)				target = ::Reflect_obj::getProperty(instance,splitProps->__get(0));
            			}
HXLINE(  57)			{
HXLINE(  57)				int _g = 1;
HXDLIN(  57)				int _g1 = splitProps->length;
HXDLIN(  57)				while((_g < _g1)){
HXLINE(  57)					_g = (_g + 1);
HXDLIN(  57)					int i = (_g - 1);
HXLINE(  59)					 ::Dynamic j = splitProps->__get(i).substr(0,(splitProps->__get(i).length - 1));
HXLINE(  60)					if ((i >= (splitProps->length - 1))) {
HXLINE(  61)						target->__SetItem(( (int)(j) ),value);
            					}
            					else {
HXLINE(  63)						target = target->__GetItem(( (int)(j) ));
            					}
            				}
            			}
HXLINE(  65)			return target;
            		}
HXLINE(  68)		bool _hx_tmp;
HXDLIN(  68)		if (allowMaps) {
HXLINE(  68)			_hx_tmp = ::psychlua::LuaUtils_obj::isMap(instance);
            		}
            		else {
HXLINE(  68)			_hx_tmp = false;
            		}
HXDLIN(  68)		if (_hx_tmp) {
HXLINE(  71)			instance->__Field(HX_("set",a2,9b,57,00),::hx::paccDynamic)(variable,value);
HXLINE(  72)			return value;
            		}
HXLINE(  75)		bool _hx_tmp1;
HXDLIN(  75)		if (::Std_obj::isOfType(instance,::hx::ClassOf< ::backend::MusicBeatState >())) {
HXLINE(  75)			_hx_tmp1 = ::backend::MusicBeatState_obj::getVariables()->exists(variable);
            		}
            		else {
HXLINE(  75)			_hx_tmp1 = false;
            		}
HXDLIN(  75)		if (_hx_tmp1) {
HXLINE(  77)			::backend::MusicBeatState_obj::getVariables()->set(variable,value);
HXLINE(  78)			return value;
            		}
HXLINE(  80)		::Reflect_obj::setProperty(instance,variable,value);
HXLINE(  81)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(LuaUtils_obj,setVarInArray,return )

 ::Dynamic LuaUtils_obj::getVarInArray( ::Dynamic instance,::String variable,::hx::Null< bool >  __o_allowMaps){
            		bool allowMaps = __o_allowMaps.Default(false);
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_84_getVarInArray)
HXLINE(  85)		::Array< ::String > splitProps = variable.split(HX_("[",5b,00,00,00));
HXLINE(  86)		if ((splitProps->length > 1)) {
HXLINE(  88)			 ::Dynamic target = null();
HXLINE(  89)			::Dynamic this1 = ::backend::MusicBeatState_obj::getVariables();
HXDLIN(  89)			if (( ( ::haxe::ds::StringMap)(this1) )->exists(splitProps->__get(0))) {
HXLINE(  91)				::Dynamic this2 = ::backend::MusicBeatState_obj::getVariables();
HXDLIN(  91)				 ::Dynamic retVal = ( ( ::haxe::ds::StringMap)(this2) )->get(splitProps->__get(0));
HXLINE(  92)				if (::hx::IsNotNull( retVal )) {
HXLINE(  93)					target = retVal;
            				}
            			}
            			else {
HXLINE(  96)				target = ::Reflect_obj::getProperty(instance,splitProps->__get(0));
            			}
HXLINE(  98)			{
HXLINE(  98)				int _g = 1;
HXDLIN(  98)				int _g1 = splitProps->length;
HXDLIN(  98)				while((_g < _g1)){
HXLINE(  98)					_g = (_g + 1);
HXDLIN(  98)					int i = (_g - 1);
HXLINE( 100)					 ::Dynamic j = splitProps->__get(i).substr(0,(splitProps->__get(i).length - 1));
HXLINE( 101)					target = target->__GetItem(( (int)(j) ));
            				}
            			}
HXLINE( 103)			return target;
            		}
HXLINE( 106)		bool _hx_tmp;
HXDLIN( 106)		if (allowMaps) {
HXLINE( 106)			_hx_tmp = ::psychlua::LuaUtils_obj::isMap(instance);
            		}
            		else {
HXLINE( 106)			_hx_tmp = false;
            		}
HXDLIN( 106)		if (_hx_tmp) {
HXLINE( 109)			return instance->__Field(HX_("get",96,80,4e,00),::hx::paccDynamic)(variable);
            		}
HXLINE( 112)		bool _hx_tmp1;
HXDLIN( 112)		if (::Std_obj::isOfType(instance,::hx::ClassOf< ::backend::MusicBeatState >())) {
HXLINE( 112)			_hx_tmp1 = ::backend::MusicBeatState_obj::getVariables()->exists(variable);
            		}
            		else {
HXLINE( 112)			_hx_tmp1 = false;
            		}
HXDLIN( 112)		if (_hx_tmp1) {
HXLINE( 114)			 ::Dynamic retVal1 = ::backend::MusicBeatState_obj::getVariables()->get(variable);
HXLINE( 115)			if (::hx::IsNotNull( retVal1 )) {
HXLINE( 116)				return retVal1;
            			}
            		}
HXLINE( 118)		return ::Reflect_obj::getProperty(instance,variable);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(LuaUtils_obj,getVarInArray,return )

 ::Dynamic LuaUtils_obj::getModSetting(::String saveTag,::String modName){
            	HX_GC_STACKFRAME(&_hx_pos_9a11087af2501d00_122_getModSetting)
HXLINE( 124)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("modSettings",c5,e1,39,0a),::hx::paccDynamic) )) {
HXLINE( 124)			::flixel::FlxG_obj::save->data->__SetField(HX_("modSettings",c5,e1,39,0a), ::haxe::ds::StringMap_obj::__alloc( HX_CTX ),::hx::paccDynamic);
            		}
HXLINE( 126)		 ::haxe::ds::StringMap settings = ( ( ::haxe::ds::StringMap)( ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("modSettings",c5,e1,39,0a),::hx::paccDynamic))->__Field(HX_("get",96,80,4e,00),::hx::paccDynamic)(modName)) );
HXLINE( 127)		::String key = ((HX_("",00,00,00,00) + modName) + HX_("/data/settings.json",9d,ef,09,8c));
HXDLIN( 127)		if (::hx::IsNull( key )) {
HXLINE( 127)			key = HX_("",00,00,00,00);
            		}
HXDLIN( 127)		::String path = (HX_("mods/",9e,2f,58,0c) + key);
HXLINE( 128)		if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 130)			bool _hx_tmp;
HXDLIN( 130)			if (::hx::IsNotNull( settings )) {
HXLINE( 130)				_hx_tmp = !(settings->exists(saveTag));
            			}
            			else {
HXLINE( 130)				_hx_tmp = true;
            			}
HXDLIN( 130)			if (_hx_tmp) {
HXLINE( 132)				if (::hx::IsNull( settings )) {
HXLINE( 132)					settings =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            				}
HXLINE( 133)				::String data = ::sys::io::File_obj::getContent(path);
HXLINE( 134)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 137)					 ::Dynamic parsedJson = ::tjson::TJSON_obj::parse(data,null(),null());
HXLINE( 138)					{
HXLINE( 138)						int _g = 0;
HXDLIN( 138)						int _g1 = ( (int)(parsedJson->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN( 138)						while((_g < _g1)){
HXLINE( 138)							_g = (_g + 1);
HXDLIN( 138)							int i = (_g - 1);
HXLINE( 140)							 ::Dynamic sub = parsedJson->__GetItem(i);
HXLINE( 141)							bool _hx_tmp1;
HXDLIN( 141)							bool _hx_tmp2;
HXDLIN( 141)							if (::hx::IsNotNull( sub )) {
HXLINE( 141)								_hx_tmp2 = ::hx::IsNotNull( sub->__Field(HX_("save",3d,8b,4d,4c),::hx::paccDynamic) );
            							}
            							else {
HXLINE( 141)								_hx_tmp2 = false;
            							}
HXDLIN( 141)							if (_hx_tmp2) {
HXLINE( 141)								_hx_tmp1 = !(settings->exists(( (::String)(sub->__Field(HX_("save",3d,8b,4d,4c),::hx::paccDynamic)) )));
            							}
            							else {
HXLINE( 141)								_hx_tmp1 = false;
            							}
HXDLIN( 141)							if (_hx_tmp1) {
HXLINE( 143)								bool _hx_tmp3;
HXDLIN( 143)								if (::hx::IsNotEq( sub->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic),HX_("keybind",dc,3a,17,b0) )) {
HXLINE( 143)									_hx_tmp3 = ::hx::IsNotEq( sub->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic),HX_("key",9f,89,51,00) );
            								}
            								else {
HXLINE( 143)									_hx_tmp3 = false;
            								}
HXDLIN( 143)								if (_hx_tmp3) {
HXLINE( 145)									if (::hx::IsNotNull( sub->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic) )) {
HXLINE( 148)										settings->set(( (::String)(sub->__Field(HX_("save",3d,8b,4d,4c),::hx::paccDynamic)) ), ::Dynamic(sub->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)));
            									}
            								}
            								else {
HXLINE( 154)									::String value;
HXDLIN( 154)									if (::hx::IsNotNull( sub->__Field(HX_("keyboard",a7,bc,29,68),::hx::paccDynamic) )) {
HXLINE( 154)										value = ( (::String)(sub->__Field(HX_("keyboard",a7,bc,29,68),::hx::paccDynamic)) );
            									}
            									else {
HXLINE( 154)										value = HX_("NONE",b8,da,ca,33);
            									}
HXDLIN( 154)									::String value1;
HXDLIN( 154)									if (::hx::IsNotNull( sub->__Field(HX_("gamepad",a1,e0,85,89),::hx::paccDynamic) )) {
HXLINE( 154)										value1 = ( (::String)(sub->__Field(HX_("gamepad",a1,e0,85,89),::hx::paccDynamic)) );
            									}
            									else {
HXLINE( 154)										value1 = HX_("NONE",b8,da,ca,33);
            									}
HXDLIN( 154)									settings->set(( (::String)(sub->__Field(HX_("save",3d,8b,4d,4c),::hx::paccDynamic)) ), ::Dynamic(::hx::Anon_obj::Create(2)
            										->setFixed(0,HX_("gamepad",a1,e0,85,89),value1)
            										->setFixed(1,HX_("keyboard",a7,bc,29,68),value)));
            								}
            							}
            						}
            					}
HXLINE( 158)					 ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("modSettings",c5,e1,39,0a),::hx::paccDynamic))->__Field(HX_("set",a2,9b,57,00),::hx::paccDynamic)(modName,settings);
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g2 = _hx_e;
HXLINE( 160)						{
HXLINE( 160)							null();
            						}
HXDLIN( 160)						 ::Dynamic e = _g2;
HXLINE( 161)						{
HXLINE( 162)							::String errorTitle = (HX_("Mod name: ",6f,0f,ef,f4) + ::backend::Mods_obj::currentModDirectory);
HXLINE( 163)							::String errorMsg = (HX_("An error occurred: ",96,0b,5f,5d) + ::Std_obj::string(e));
HXLINE( 165)							::lime::app::Application_obj::current->_hx___window->alert(errorMsg,errorTitle);
HXLINE( 167)							::haxe::Log_obj::trace((((HX_("",00,00,00,00) + errorTitle) + HX_(" - ",73,6f,18,00)) + errorMsg),::hx::SourceInfo(HX_("source/psychlua/LuaUtils.hx",e7,52,1d,2e),167,HX_("psychlua.LuaUtils",aa,e4,6b,38),HX_("getModSetting",24,8b,81,ff)));
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
            		else {
HXLINE( 173)			 ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("modSettings",c5,e1,39,0a),::hx::paccDynamic))->__Field(HX_("remove",44,9c,88,04),::hx::paccDynamic)(modName);
HXLINE( 175)			::states::PlayState_obj::instance->addTextToDebug(((HX_("getModSetting: ",ca,ce,55,0b) + path) + HX_(" could not be found!",90,35,06,90)),-65536);
HXLINE( 179)			return null();
            		}
HXLINE( 182)		if (settings->exists(saveTag)) {
HXLINE( 182)			return settings->get(saveTag);
            		}
HXLINE( 184)		::states::PlayState_obj::instance->addTextToDebug(((((HX_("getModSetting: \"",18,22,bf,df) + saveTag) + HX_("\" could not be found inside ",13,12,2d,e6)) + modName) + HX_("'s settings!",2a,a7,f2,3b)),-65536);
HXLINE( 189)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LuaUtils_obj,getModSetting,return )

bool LuaUtils_obj::isMap( ::Dynamic variable){
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_193_isMap)
HXLINE( 202)		bool _hx_tmp;
HXDLIN( 202)		if (::hx::IsNotNull( variable->__Field(HX_("exists",dc,1d,e0,bf),::hx::paccDynamic) )) {
HXLINE( 202)			_hx_tmp = ::hx::IsNotNull( variable->__Field(HX_("keyValueIterator",60,cd,ee,4a),::hx::paccDynamic) );
            		}
            		else {
HXLINE( 202)			_hx_tmp = false;
            		}
HXDLIN( 202)		if (_hx_tmp) {
HXLINE( 202)			return true;
            		}
HXLINE( 203)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LuaUtils_obj,isMap,return )

 ::Dynamic LuaUtils_obj::setGroupStuff( ::Dynamic leArray,::String variable, ::Dynamic value, ::Dynamic __o_allowMaps){
            		 ::Dynamic allowMaps = __o_allowMaps;
            		if (::hx::IsNull(__o_allowMaps)) allowMaps = false;
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_206_setGroupStuff)
HXLINE( 207)		::Array< ::String > split = variable.split(HX_(".",2e,00,00,00));
HXLINE( 208)		if ((split->length > 1)) {
HXLINE( 209)			 ::Dynamic obj = ::Reflect_obj::getProperty(leArray,split->__get(0));
HXLINE( 210)			{
HXLINE( 210)				int _g = 1;
HXDLIN( 210)				int _g1 = (split->length - 1);
HXDLIN( 210)				while((_g < _g1)){
HXLINE( 210)					_g = (_g + 1);
HXDLIN( 210)					int i = (_g - 1);
HXLINE( 211)					obj = ::Reflect_obj::getProperty(obj,split->__get(i));
            				}
            			}
HXLINE( 213)			leArray = obj;
HXLINE( 214)			variable = split->__get((split->length - 1));
            		}
HXLINE( 216)		bool _hx_tmp;
HXDLIN( 216)		if (( (bool)(allowMaps) )) {
HXLINE( 216)			_hx_tmp = ::psychlua::LuaUtils_obj::isMap(leArray);
            		}
            		else {
HXLINE( 216)			_hx_tmp = false;
            		}
HXDLIN( 216)		if (_hx_tmp) {
HXLINE( 216)			leArray->__Field(HX_("set",a2,9b,57,00),::hx::paccDynamic)(variable,value);
            		}
            		else {
HXLINE( 217)			::Reflect_obj::setProperty(leArray,variable,value);
            		}
HXLINE( 218)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(LuaUtils_obj,setGroupStuff,return )

 ::Dynamic LuaUtils_obj::getGroupStuff( ::Dynamic leArray,::String variable, ::Dynamic __o_allowMaps){
            		 ::Dynamic allowMaps = __o_allowMaps;
            		if (::hx::IsNull(__o_allowMaps)) allowMaps = false;
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_220_getGroupStuff)
HXLINE( 221)		::Array< ::String > split = variable.split(HX_(".",2e,00,00,00));
HXLINE( 222)		if ((split->length > 1)) {
HXLINE( 223)			 ::Dynamic obj = ::Reflect_obj::getProperty(leArray,split->__get(0));
HXLINE( 224)			{
HXLINE( 224)				int _g = 1;
HXDLIN( 224)				int _g1 = (split->length - 1);
HXDLIN( 224)				while((_g < _g1)){
HXLINE( 224)					_g = (_g + 1);
HXDLIN( 224)					int i = (_g - 1);
HXLINE( 225)					obj = ::Reflect_obj::getProperty(obj,split->__get(i));
            				}
            			}
HXLINE( 227)			leArray = obj;
HXLINE( 228)			variable = split->__get((split->length - 1));
            		}
HXLINE( 231)		bool _hx_tmp;
HXDLIN( 231)		if (( (bool)(allowMaps) )) {
HXLINE( 231)			_hx_tmp = ::psychlua::LuaUtils_obj::isMap(leArray);
            		}
            		else {
HXLINE( 231)			_hx_tmp = false;
            		}
HXDLIN( 231)		if (_hx_tmp) {
HXLINE( 231)			return leArray->__Field(HX_("get",96,80,4e,00),::hx::paccDynamic)(variable);
            		}
HXLINE( 232)		return ::Reflect_obj::getProperty(leArray,variable);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(LuaUtils_obj,getGroupStuff,return )

 ::Dynamic LuaUtils_obj::getPropertyLoop(::Array< ::String > split, ::Dynamic __o_getProperty, ::Dynamic __o_allowMaps){
            		 ::Dynamic getProperty = __o_getProperty;
            		if (::hx::IsNull(__o_getProperty)) getProperty = true;
            		 ::Dynamic allowMaps = __o_allowMaps;
            		if (::hx::IsNull(__o_allowMaps)) allowMaps = false;
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_236_getPropertyLoop)
HXLINE( 237)		 ::Dynamic obj = ::psychlua::LuaUtils_obj::getObjectDirectly(split->__get(0),null());
HXLINE( 238)		int end = split->length;
HXLINE( 239)		if (( (bool)(getProperty) )) {
HXLINE( 239)			end = (split->length - 1);
            		}
HXLINE( 241)		{
HXLINE( 241)			int _g = 1;
HXDLIN( 241)			int _g1 = end;
HXDLIN( 241)			while((_g < _g1)){
HXLINE( 241)				_g = (_g + 1);
HXDLIN( 241)				int i = (_g - 1);
HXDLIN( 241)				obj = ::psychlua::LuaUtils_obj::getVarInArray(obj,split->__get(i),allowMaps);
            			}
            		}
HXLINE( 242)		return obj;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(LuaUtils_obj,getPropertyLoop,return )

 ::Dynamic LuaUtils_obj::getObjectDirectly(::String objectName, ::Dynamic __o_allowMaps){
            		 ::Dynamic allowMaps = __o_allowMaps;
            		if (::hx::IsNull(__o_allowMaps)) allowMaps = false;
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_247_getObjectDirectly)
HXDLIN( 247)		::String _hx_switch_0 = objectName;
            		if (  (_hx_switch_0==HX_("game",f2,f3,5e,44)) ||  (_hx_switch_0==HX_("instance",95,1f,e1,59)) ||  (_hx_switch_0==HX_("this",5e,06,fc,4c)) ){
HXLINE( 250)			return ::states::PlayState_obj::instance;
HXDLIN( 250)			goto _hx_goto_14;
            		}
            		/* default */{
HXLINE( 253)			 ::Dynamic obj = ::backend::MusicBeatState_obj::getVariables()->get(objectName);
HXLINE( 254)			if (::hx::IsNull( obj )) {
HXLINE( 254)				obj = ::psychlua::LuaUtils_obj::getVarInArray(::backend::MusicBeatState_obj::getState(),objectName,allowMaps);
            			}
HXLINE( 255)			return obj;
            		}
            		_hx_goto_14:;
HXLINE( 247)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LuaUtils_obj,getObjectDirectly,return )

bool LuaUtils_obj::isOfTypes( ::Dynamic value,::cpp::VirtualArray types){
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_260_isOfTypes)
HXLINE( 261)		{
HXLINE( 261)			int _g = 0;
HXDLIN( 261)			while((_g < types->get_length())){
HXLINE( 261)				 ::Dynamic type = types->__get(_g);
HXDLIN( 261)				_g = (_g + 1);
HXLINE( 263)				if (::Std_obj::isOfType(value,type)) {
HXLINE( 263)					return true;
            				}
            			}
            		}
HXLINE( 265)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LuaUtils_obj,isOfTypes,return )

bool LuaUtils_obj::isLuaSupported( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_268_isLuaSupported)
HXDLIN( 268)		bool _hx_tmp;
HXDLIN( 268)		if (::hx::IsNotNull( value )) {
HXDLIN( 268)			_hx_tmp = ::psychlua::LuaUtils_obj::isOfTypes(value,::cpp::VirtualArray_obj::__new(5)->init(0,::hx::ClassOf< bool >())->init(1,::hx::ClassOf< int >())->init(2,::hx::ClassOf< ::Float >())->init(3,::hx::ClassOf< ::String >())->init(4,::hx::ArrayBase::__mClass));
            		}
            		else {
HXDLIN( 268)			_hx_tmp = true;
            		}
HXDLIN( 268)		if (!(_hx_tmp)) {
HXDLIN( 268)			return ::hx::IsPointerEq( ::Type_obj::_hx_typeof(value),::ValueType_obj::TObject_dyn() );
            		}
            		else {
HXDLIN( 268)			return true;
            		}
HXDLIN( 268)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LuaUtils_obj,isLuaSupported,return )

 ::flixel::FlxState LuaUtils_obj::getTargetInstance(){
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_272_getTargetInstance)
HXLINE( 273)		if (::hx::IsNotNull( ::states::PlayState_obj::instance )) {
HXLINE( 273)			if (::states::PlayState_obj::instance->isDead) {
HXLINE( 273)				return ::substates::GameOverSubstate_obj::instance;
            			}
            			else {
HXLINE( 273)				return ::states::PlayState_obj::instance;
            			}
            		}
HXLINE( 274)		return ::backend::MusicBeatState_obj::getState();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(LuaUtils_obj,getTargetInstance,return )

 ::flixel::group::FlxTypedSpriteGroup LuaUtils_obj::getLowestCharacterGroup(){
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_278_getLowestCharacterGroup)
HXLINE( 279)		 ::Dynamic stageData = ::backend::StageData_obj::getStageFile(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) ));
HXLINE( 280)		 ::flixel::group::FlxTypedSpriteGroup group;
HXDLIN( 280)		if (( (bool)(stageData->__Field(HX_("hide_girlfriend",57,bd,d9,f9),::hx::paccDynamic)) )) {
HXLINE( 280)			group = ::states::PlayState_obj::instance->boyfriendGroup;
            		}
            		else {
HXLINE( 280)			group = ::states::PlayState_obj::instance->gfGroup;
            		}
HXLINE( 282)		int pos = ::states::PlayState_obj::instance->members->indexOf(group,null());
HXLINE( 284)		int newPos = ::states::PlayState_obj::instance->members->indexOf(::states::PlayState_obj::instance->boyfriendGroup,null());
HXLINE( 285)		if ((newPos < pos)) {
HXLINE( 287)			group = ::states::PlayState_obj::instance->boyfriendGroup;
HXLINE( 288)			pos = newPos;
            		}
HXLINE( 291)		newPos = ::states::PlayState_obj::instance->members->indexOf(::states::PlayState_obj::instance->dadGroup,null());
HXLINE( 292)		if ((newPos < pos)) {
HXLINE( 294)			group = ::states::PlayState_obj::instance->dadGroup;
HXLINE( 295)			pos = newPos;
            		}
HXLINE( 297)		return group;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(LuaUtils_obj,getLowestCharacterGroup,return )

bool LuaUtils_obj::addAnimByIndices(::String obj,::String name,::String prefix, ::Dynamic indices,::hx::Null< Float >  __o_framerate,::hx::Null< bool >  __o_loop){
            		Float framerate = __o_framerate.Default(24);
            		bool loop = __o_loop.Default(false);
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_301_addAnimByIndices)
HXLINE( 302)		 ::flixel::FlxSprite obj1 = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getObjectDirectly(obj,null())) );
HXLINE( 303)		bool _hx_tmp;
HXDLIN( 303)		if (::hx::IsNotNull( obj1 )) {
HXLINE( 303)			_hx_tmp = ::hx::IsNotNull( obj1->animation );
            		}
            		else {
HXLINE( 303)			_hx_tmp = false;
            		}
HXDLIN( 303)		if (_hx_tmp) {
HXLINE( 305)			if (::hx::IsNull( indices )) {
HXLINE( 306)				indices = ::cpp::VirtualArray_obj::__new(1)->init(0,0);
            			}
            			else {
HXLINE( 307)				if (::Std_obj::isOfType(indices,::hx::ClassOf< ::String >())) {
HXLINE( 309)					::Array< ::String > strIndices = ::StringTools_obj::trim(::hx::TCast< ::String >::cast(indices)).split(HX_(",",2c,00,00,00));
HXLINE( 310)					::Array< int > myIndices = ::Array_obj< int >::__new(0);
HXLINE( 311)					{
HXLINE( 311)						int _g = 0;
HXDLIN( 311)						int _g1 = strIndices->length;
HXDLIN( 311)						while((_g < _g1)){
HXLINE( 311)							_g = (_g + 1);
HXDLIN( 311)							int i = (_g - 1);
HXLINE( 312)							myIndices->push(::Std_obj::parseInt(strIndices->__get(i)));
            						}
            					}
HXLINE( 314)					indices = myIndices;
            				}
            			}
HXLINE( 317)			if (::hx::IsNotNull( prefix )) {
HXLINE( 317)				obj1->animation->addByIndices(name,prefix,( (::Array< int >)(indices) ),HX_("",00,00,00,00),framerate,loop,null(),null());
            			}
            			else {
HXLINE( 318)				obj1->animation->add(name,( (::Array< int >)(indices) ),framerate,loop,null(),null());
            			}
HXLINE( 320)			if (::hx::IsNull( obj1->animation->_curAnim )) {
HXLINE( 322)				 ::Dynamic dyn = obj1;
HXLINE( 323)				if (::hx::IsNotNull( dyn->__Field(HX_("playAnim",25,ea,84,30),::hx::paccDynamic) )) {
HXLINE( 323)					dyn->__Field(HX_("playAnim",25,ea,84,30),::hx::paccDynamic)(name,true);
            				}
            				else {
HXLINE( 324)					 ::Dynamic(dyn->__Field(HX_("animation",04,ef,34,4b),::hx::paccDynamic))->__Field(HX_("play",f4,2d,5a,4a),::hx::paccDynamic)(name,true);
            				}
            			}
HXLINE( 326)			return true;
            		}
HXLINE( 328)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(LuaUtils_obj,addAnimByIndices,return )

void LuaUtils_obj::loadFrames( ::flixel::FlxSprite spr,::String image,::String spriteType){
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_333_loadFrames)
HXDLIN( 333)		::String _hx_switch_0 = ::StringTools_obj::replace(spriteType.toLowerCase(),HX_(" ",20,00,00,00),HX_("",00,00,00,00));
            		if (  (_hx_switch_0==HX_("ase",33,ff,49,00)) ||  (_hx_switch_0==HX_("aseprite",45,65,d8,84)) ||  (_hx_switch_0==HX_("json",28,42,68,46)) ||  (_hx_switch_0==HX_("jsoni8",d7,77,9b,e2)) ){
HXLINE( 342)			::String parentFolder = null();
HXDLIN( 342)			 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(image,parentFolder,true);
HXDLIN( 342)			bool jsonExists = false;
HXDLIN( 342)			::String json = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + image) + HX_(".json",56,f1,d6,c2)));
HXDLIN( 342)			if (::sys::FileSystem_obj::exists(json)) {
HXLINE( 342)				jsonExists = true;
            			}
HXDLIN( 342)			 ::Dynamic _hx_tmp;
HXDLIN( 342)			if (jsonExists) {
HXLINE( 342)				_hx_tmp = ::sys::io::File_obj::getContent(json);
            			}
            			else {
HXLINE( 342)				::String key = (HX_("images/",77,50,74,c1) + image);
HXDLIN( 342)				::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 342)				::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXDLIN( 342)				if (::hx::IsNotNull( str )) {
HXLINE( 342)					key = str;
            				}
HXDLIN( 342)				_hx_tmp = ::backend::Paths_obj::getPath((key + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),parentFolder,null());
            			}
HXDLIN( 342)			spr->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromTexturePackerJson(imageLoaded,_hx_tmp,null()));
HXDLIN( 342)			goto _hx_goto_23;
            		}
            		if (  (_hx_switch_0==HX_("pac",52,51,55,00)) ||  (_hx_switch_0==HX_("packer",86,57,98,e3)) ||  (_hx_switch_0==HX_("packeratlas",05,f0,7b,dc)) ){
HXLINE( 345)			::String parentFolder1 = null();
HXDLIN( 345)			 ::flixel::graphics::FlxGraphic imageLoaded1 = ::backend::Paths_obj::image(image,parentFolder1,true);
HXDLIN( 345)			bool txtExists = false;
HXDLIN( 345)			::String txt = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + image) + HX_(".txt",02,3f,c0,1e)));
HXDLIN( 345)			if (::sys::FileSystem_obj::exists(txt)) {
HXLINE( 345)				txtExists = true;
            			}
HXDLIN( 345)			::String _hx_tmp1;
HXDLIN( 345)			if (txtExists) {
HXLINE( 345)				_hx_tmp1 = ::sys::io::File_obj::getContent(txt);
            			}
            			else {
HXLINE( 345)				::String key1 = (HX_("images/",77,50,74,c1) + image);
HXDLIN( 345)				::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN( 345)				::String str1 = ( ( ::haxe::ds::StringMap)(this2) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN( 345)				if (::hx::IsNotNull( str1 )) {
HXLINE( 345)					key1 = str1;
            				}
HXDLIN( 345)				_hx_tmp1 = ::backend::Paths_obj::getPath((key1 + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),parentFolder1,null());
            			}
HXDLIN( 345)			spr->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSpriteSheetPacker(imageLoaded1,_hx_tmp1));
HXDLIN( 345)			goto _hx_goto_23;
            		}
            		if (  (_hx_switch_0==HX_("sparrow",0c,3c,ac,9b)) ||  (_hx_switch_0==HX_("sparrowatlas",bf,e5,9f,f1)) ||  (_hx_switch_0==HX_("sparrowv2",08,be,3c,0c)) ){
HXLINE( 348)			::String parentFolder2 = null();
HXDLIN( 348)			if ((image.indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE( 348)				::haxe::Log_obj::trace(image, ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            					->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder2)->init(1,true))
            					->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            					->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            					->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            			}
HXDLIN( 348)			 ::flixel::graphics::FlxGraphic imageLoaded2 = ::backend::Paths_obj::image(image,parentFolder2,true);
HXDLIN( 348)			bool xmlExists = false;
HXDLIN( 348)			::String xml = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + image) + HX_(".xml",69,3e,c3,1e)));
HXDLIN( 348)			if (::sys::FileSystem_obj::exists(xml)) {
HXLINE( 348)				xmlExists = true;
            			}
HXDLIN( 348)			 ::Dynamic _hx_tmp2;
HXDLIN( 348)			if (xmlExists) {
HXLINE( 348)				_hx_tmp2 = ::sys::io::File_obj::getContent(xml);
            			}
            			else {
HXLINE( 348)				::String key2 = (HX_("images/",77,50,74,c1) + image);
HXDLIN( 348)				::Dynamic this3 = ::backend::Language_obj::phrases;
HXDLIN( 348)				::String str2 = ( ( ::haxe::ds::StringMap)(this3) )->get_string(::StringTools_obj::trim(key2).toLowerCase());
HXDLIN( 348)				if (::hx::IsNotNull( str2 )) {
HXLINE( 348)					key2 = str2;
            				}
HXDLIN( 348)				_hx_tmp2 = ::backend::Paths_obj::getPath((key2 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder2,null());
            			}
HXDLIN( 348)			spr->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded2,_hx_tmp2));
HXDLIN( 348)			goto _hx_goto_23;
            		}
            		/* default */{
HXLINE( 351)			spr->set_frames(::backend::Paths_obj::getAtlas(image,null(),null()));
            		}
            		_hx_goto_23:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(LuaUtils_obj,loadFrames,(void))

void LuaUtils_obj::destroyObject(::String tag){
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_355_destroyObject)
HXLINE( 356)		 ::haxe::ds::StringMap variables = ::backend::MusicBeatState_obj::getVariables();
HXLINE( 357)		 ::flixel::FlxSprite obj = ( ( ::flixel::FlxSprite)(variables->get(tag)) );
HXLINE( 358)		bool _hx_tmp;
HXDLIN( 358)		if (::hx::IsNotNull( obj )) {
HXLINE( 358)			_hx_tmp = ::hx::IsNull( obj->destroy_dyn() );
            		}
            		else {
HXLINE( 358)			_hx_tmp = true;
            		}
HXDLIN( 358)		if (_hx_tmp) {
HXLINE( 359)			return;
            		}
HXLINE( 361)		::psychlua::LuaUtils_obj::getTargetInstance()->remove(obj,true).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 362)		obj->destroy();
HXLINE( 363)		variables->remove(tag);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LuaUtils_obj,destroyObject,(void))

void LuaUtils_obj::cancelTween(::String tag){
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_366_cancelTween)
HXLINE( 367)		if (!(::StringTools_obj::startsWith(tag,HX_("tween_",94,73,24,29)))) {
HXLINE( 367)			tag = (HX_("tween_",94,73,24,29) + ::psychlua::LuaUtils_obj::formatVariable(tag));
            		}
HXLINE( 368)		 ::haxe::ds::StringMap variables = ::backend::MusicBeatState_obj::getVariables();
HXLINE( 369)		 ::flixel::tweens::FlxTween twn = ( ( ::flixel::tweens::FlxTween)(variables->get(tag)) );
HXLINE( 370)		if (::hx::IsNotNull( twn )) {
HXLINE( 372)			twn->cancel();
HXLINE( 373)			twn->destroy();
HXLINE( 374)			variables->remove(tag);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LuaUtils_obj,cancelTween,(void))

void LuaUtils_obj::cancelTimer(::String tag){
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_378_cancelTimer)
HXLINE( 379)		if (!(::StringTools_obj::startsWith(tag,HX_("timer_",fa,0c,d2,1e)))) {
HXLINE( 379)			tag = (HX_("timer_",fa,0c,d2,1e) + ::psychlua::LuaUtils_obj::formatVariable(tag));
            		}
HXLINE( 380)		 ::haxe::ds::StringMap variables = ::backend::MusicBeatState_obj::getVariables();
HXLINE( 381)		 ::flixel::util::FlxTimer tmr = ( ( ::flixel::util::FlxTimer)(variables->get(tag)) );
HXLINE( 382)		if (::hx::IsNotNull( tmr )) {
HXLINE( 384)			tmr->cancel();
HXLINE( 385)			tmr->destroy();
HXLINE( 386)			variables->remove(tag);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LuaUtils_obj,cancelTimer,(void))

::String LuaUtils_obj::formatVariable(::String tag){
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_391_formatVariable)
HXDLIN( 391)		return ::StringTools_obj::replace(::StringTools_obj::replace(::StringTools_obj::trim(tag),HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_(".",2e,00,00,00),HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LuaUtils_obj,formatVariable,return )

 ::Dynamic LuaUtils_obj::tweenPrepare(::String tag,::String vars){
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_393_tweenPrepare)
HXLINE( 394)		if (::hx::IsNotNull( tag )) {
HXLINE( 394)			::psychlua::LuaUtils_obj::cancelTween(tag);
            		}
HXLINE( 395)		::Array< ::String > variables = vars.split(HX_(".",2e,00,00,00));
HXLINE( 396)		 ::Dynamic sexyProp = ::psychlua::LuaUtils_obj::getObjectDirectly(variables->__get(0),null());
HXLINE( 397)		if ((variables->length > 1)) {
HXLINE( 397)			 ::Dynamic sexyProp1 = ::psychlua::LuaUtils_obj::getPropertyLoop(variables,null(),null());
HXDLIN( 397)			sexyProp = ::psychlua::LuaUtils_obj::getVarInArray(sexyProp1,variables->__get((variables->length - 1)),null());
            		}
HXLINE( 398)		return sexyProp;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LuaUtils_obj,tweenPrepare,return )

::String LuaUtils_obj::getBuildTarget(){
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_407_getBuildTarget)
HXDLIN( 407)		return HX_("windows",83,de,74,e8);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(LuaUtils_obj,getBuildTarget,return )

int LuaUtils_obj::getTweenTypeByString(::String __o_type){
            		::String type = __o_type;
            		if (::hx::IsNull(__o_type)) type = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_425_getTweenTypeByString)
HXLINE( 426)		::String _hx_switch_0 = ::StringTools_obj::trim(type.toLowerCase());
            		if (  (_hx_switch_0==HX_("backward",e3,db,18,27)) ){
HXLINE( 428)			return 16;
HXDLIN( 428)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("loop",64,a6,b7,47)) ||  (_hx_switch_0==HX_("looping",fe,7c,7d,20)) ){
HXLINE( 429)			return 2;
HXDLIN( 429)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("persist",14,22,71,83)) ){
HXLINE( 430)			return 1;
HXDLIN( 430)			goto _hx_goto_31;
            		}
            		if (  (_hx_switch_0==HX_("pingpong",6a,93,43,a8)) ){
HXLINE( 431)			return 4;
HXDLIN( 431)			goto _hx_goto_31;
            		}
            		_hx_goto_31:;
HXLINE( 433)		return 8;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LuaUtils_obj,getTweenTypeByString,return )

 ::Dynamic LuaUtils_obj::getTweenEaseByString(::String __o_ease){
            		::String ease = __o_ease;
            		if (::hx::IsNull(__o_ease)) ease = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_436_getTweenEaseByString)
HXLINE( 437)		::String _hx_switch_0 = ::StringTools_obj::trim(ease.toLowerCase());
            		if (  (_hx_switch_0==HX_("backin",cc,4d,99,4a)) ){
HXLINE( 438)			return ::flixel::tweens::FlxEase_obj::backIn_dyn();
HXDLIN( 438)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("backinout",42,fa,a0,07)) ){
HXLINE( 439)			return ::flixel::tweens::FlxEase_obj::backInOut_dyn();
HXDLIN( 439)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("backout",c7,58,8f,fb)) ){
HXLINE( 440)			return ::flixel::tweens::FlxEase_obj::backOut_dyn();
HXDLIN( 440)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("bouncein",6d,53,b0,4c)) ){
HXLINE( 441)			return ::flixel::tweens::FlxEase_obj::bounceIn_dyn();
HXDLIN( 441)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("bounceinout",41,6f,66,e6)) ){
HXLINE( 442)			return ::flixel::tweens::FlxEase_obj::bounceInOut_dyn();
HXDLIN( 442)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("bounceout",06,40,9d,cd)) ){
HXLINE( 443)			return ::flixel::tweens::FlxEase_obj::bounceOut_dyn();
HXDLIN( 443)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("circin",7c,6f,0d,56)) ){
HXLINE( 444)			return ::flixel::tweens::FlxEase_obj::circIn_dyn();
HXDLIN( 444)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("circinout",92,06,0d,e1)) ){
HXLINE( 445)			return ::flixel::tweens::FlxEase_obj::circInOut_dyn();
HXDLIN( 445)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("circout",17,b1,b8,f5)) ){
HXLINE( 446)			return ::flixel::tweens::FlxEase_obj::circOut_dyn();
HXDLIN( 446)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("cubein",1a,80,4a,34)) ){
HXLINE( 447)			return ::flixel::tweens::FlxEase_obj::cubeIn_dyn();
HXDLIN( 447)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("cubeinout",b4,ac,c9,c2)) ){
HXLINE( 448)			return ::flixel::tweens::FlxEase_obj::cubeInOut_dyn();
HXDLIN( 448)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("cubeout",b9,2a,ea,8c)) ){
HXLINE( 449)			return ::flixel::tweens::FlxEase_obj::cubeOut_dyn();
HXDLIN( 449)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("elasticin",fa,3c,61,27)) ){
HXLINE( 450)			return ::flixel::tweens::FlxEase_obj::elasticIn_dyn();
HXDLIN( 450)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("elasticinout",d4,3b,a0,39)) ){
HXLINE( 451)			return ::flixel::tweens::FlxEase_obj::elasticInOut_dyn();
HXDLIN( 451)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("elasticout",d9,b1,b8,4d)) ){
HXLINE( 452)			return ::flixel::tweens::FlxEase_obj::elasticOut_dyn();
HXDLIN( 452)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("expoin",97,89,7d,c4)) ){
HXLINE( 453)			return ::flixel::tweens::FlxEase_obj::expoIn_dyn();
HXDLIN( 453)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("expoinout",57,ef,01,5a)) ){
HXLINE( 454)			return ::flixel::tweens::FlxEase_obj::expoInOut_dyn();
HXDLIN( 454)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("expoout",9c,6e,5f,29)) ){
HXLINE( 455)			return ::flixel::tweens::FlxEase_obj::expoOut_dyn();
HXDLIN( 455)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("quadin",6c,94,9f,cc)) ){
HXLINE( 456)			return ::flixel::tweens::FlxEase_obj::quadIn_dyn();
HXDLIN( 456)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("quadinout",a2,97,0c,bc)) ){
HXLINE( 457)			return ::flixel::tweens::FlxEase_obj::quadInOut_dyn();
HXDLIN( 457)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("quadout",27,de,06,3f)) ){
HXLINE( 458)			return ::flixel::tweens::FlxEase_obj::quadOut_dyn();
HXDLIN( 458)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("quartin",a4,9b,4b,48)) ){
HXLINE( 459)			return ::flixel::tweens::FlxEase_obj::quartIn_dyn();
HXDLIN( 459)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("quartinout",6a,e3,62,99)) ){
HXLINE( 460)			return ::flixel::tweens::FlxEase_obj::quartInOut_dyn();
HXDLIN( 460)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("quartout",ef,27,e1,f9)) ){
HXLINE( 461)			return ::flixel::tweens::FlxEase_obj::quartOut_dyn();
HXDLIN( 461)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("quintin",30,65,db,e0)) ){
HXLINE( 462)			return ::flixel::tweens::FlxEase_obj::quintIn_dyn();
HXDLIN( 462)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("quintinout",5e,99,a0,bc)) ){
HXLINE( 463)			return ::flixel::tweens::FlxEase_obj::quintInOut_dyn();
HXDLIN( 463)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("quintout",e3,b8,21,df)) ){
HXLINE( 464)			return ::flixel::tweens::FlxEase_obj::quintOut_dyn();
HXDLIN( 464)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("sinein",72,df,1f,b9)) ){
HXLINE( 465)			return ::flixel::tweens::FlxEase_obj::sineIn_dyn();
HXDLIN( 465)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("sineinout",5c,74,84,36)) ){
HXLINE( 466)			return ::flixel::tweens::FlxEase_obj::sineInOut_dyn();
HXDLIN( 466)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("sineout",61,38,c8,42)) ){
HXLINE( 467)			return ::flixel::tweens::FlxEase_obj::sineOut_dyn();
HXDLIN( 467)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("smootherstepin",8c,7c,27,7b)) ){
HXLINE( 471)			return ::flixel::tweens::FlxEase_obj::smootherStepIn_dyn();
HXDLIN( 471)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("smootherstepinout",82,83,8c,0a)) ){
HXLINE( 472)			return ::flixel::tweens::FlxEase_obj::smootherStepInOut_dyn();
HXDLIN( 472)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("smootherstepout",07,12,6a,47)) ){
HXLINE( 473)			return ::flixel::tweens::FlxEase_obj::smootherStepOut_dyn();
HXDLIN( 473)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("smoothstepin",df,0c,da,16)) ){
HXLINE( 468)			return ::flixel::tweens::FlxEase_obj::smoothStepIn_dyn();
HXDLIN( 468)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("smoothstepinout",0f,a9,b0,af)) ){
HXLINE( 469)			return ::flixel::tweens::FlxEase_obj::smoothStepInOut_dyn();
HXDLIN( 469)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_0==HX_("smoothstepout",54,ca,f5,e7)) ){
HXLINE( 470)			return ::flixel::tweens::FlxEase_obj::smoothStepOut_dyn();
HXDLIN( 470)			goto _hx_goto_33;
            		}
            		_hx_goto_33:;
HXLINE( 475)		return ::flixel::tweens::FlxEase_obj::linear_dyn();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LuaUtils_obj,getTweenEaseByString,return )

 ::Dynamic LuaUtils_obj::blendModeFromString(::String blend){
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_478_blendModeFromString)
HXLINE( 479)		::String _hx_switch_0 = ::StringTools_obj::trim(blend.toLowerCase());
            		if (  (_hx_switch_0==HX_("add",21,f2,49,00)) ){
HXLINE( 480)			return 0;
HXDLIN( 480)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==HX_("alpha",5e,a7,96,21)) ){
HXLINE( 481)			return 1;
HXDLIN( 481)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==HX_("darken",5f,36,3a,21)) ){
HXLINE( 482)			return 2;
HXDLIN( 482)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==HX_("difference",fd,9b,91,46)) ){
HXLINE( 483)			return 3;
HXDLIN( 483)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==HX_("erase",e6,e8,1c,73)) ){
HXLINE( 484)			return 4;
HXDLIN( 484)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==HX_("hardlight",0b,6e,6b,53)) ){
HXLINE( 485)			return 5;
HXDLIN( 485)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==HX_("invert",16,e7,d8,9f)) ){
HXLINE( 486)			return 6;
HXDLIN( 486)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==HX_("layer",d1,81,c0,6f)) ){
HXLINE( 487)			return 7;
HXDLIN( 487)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==HX_("lighten",bf,4a,e3,19)) ){
HXLINE( 488)			return 8;
HXDLIN( 488)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==HX_("multiply",24,e2,8c,9a)) ){
HXLINE( 489)			return 9;
HXDLIN( 489)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==HX_("overlay",90,43,10,a9)) ){
HXLINE( 490)			return 11;
HXDLIN( 490)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==HX_("screen",6c,3b,5d,47)) ){
HXLINE( 491)			return 12;
HXDLIN( 491)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==HX_("shader",25,bf,20,1d)) ){
HXLINE( 492)			return 13;
HXDLIN( 492)			goto _hx_goto_35;
            		}
            		if (  (_hx_switch_0==HX_("subtract",14,75,11,f8)) ){
HXLINE( 493)			return 14;
HXDLIN( 493)			goto _hx_goto_35;
            		}
            		_hx_goto_35:;
HXLINE( 495)		return 10;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LuaUtils_obj,blendModeFromString,return )

::String LuaUtils_obj::typeToString(int type){
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_498_typeToString)
HXLINE( 500)		switch((int)(type)){
            			case (int)1: {
HXLINE( 501)				return HX_("boolean",a8,ea,fe,7d);
            			}
            			break;
            			case (int)3: {
HXLINE( 502)				return HX_("number",c9,86,7a,a1);
            			}
            			break;
            			case (int)4: {
HXLINE( 503)				return HX_("string",d1,28,30,11);
            			}
            			break;
            			case (int)5: {
HXLINE( 504)				return HX_("table",0e,b8,e3,0a);
            			}
            			break;
            			case (int)6: {
HXLINE( 505)				return HX_("function",18,ab,52,14);
            			}
            			break;
            		}
HXLINE( 507)		if ((type <= 0)) {
HXLINE( 507)			return HX_("nil",d1,d3,53,00);
            		}
HXLINE( 509)		return HX_("unknown",8a,23,7b,e1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LuaUtils_obj,typeToString,return )

 ::flixel::FlxCamera LuaUtils_obj::cameraFromString(::String cam){
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_512_cameraFromString)
HXLINE( 513)		::String _hx_switch_0 = cam.toLowerCase();
            		if (  (_hx_switch_0==HX_("camgame",81,1b,77,e4)) ||  (_hx_switch_0==HX_("game",f2,f3,5e,44)) ){
HXLINE( 514)			return ::states::PlayState_obj::instance->camGame;
HXDLIN( 514)			goto _hx_goto_38;
            		}
            		if (  (_hx_switch_0==HX_("camhud",08,90,8e,b7)) ||  (_hx_switch_0==HX_("hud",b7,50,4f,00)) ){
HXLINE( 515)			return ::states::PlayState_obj::instance->camHUD;
HXDLIN( 515)			goto _hx_goto_38;
            		}
            		if (  (_hx_switch_0==HX_("camother",61,dc,80,ab)) ||  (_hx_switch_0==HX_("other",d0,66,76,36)) ){
HXLINE( 516)			return ::states::PlayState_obj::instance->camOther;
HXDLIN( 516)			goto _hx_goto_38;
            		}
            		_hx_goto_38:;
HXLINE( 518)		 ::flixel::FlxCamera camera = ( ( ::flixel::FlxCamera)(::backend::MusicBeatState_obj::getVariables()->get(cam)) );
HXLINE( 519)		bool _hx_tmp;
HXDLIN( 519)		if (::hx::IsNotNull( camera )) {
HXLINE( 519)			_hx_tmp = !(::Std_obj::isOfType(camera,::hx::ClassOf< ::flixel::FlxCamera >()));
            		}
            		else {
HXLINE( 519)			_hx_tmp = true;
            		}
HXDLIN( 519)		if (_hx_tmp) {
HXLINE( 519)			camera = ::states::PlayState_obj::instance->camGame;
            		}
HXLINE( 520)		return camera;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LuaUtils_obj,cameraFromString,return )


LuaUtils_obj::LuaUtils_obj()
{
}

bool LuaUtils_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"isMap") ) { outValue = isMap_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isOfTypes") ) { outValue = isOfTypes_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"loadFrames") ) { outValue = loadFrames_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getLuaTween") ) { outValue = getLuaTween_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cancelTween") ) { outValue = cancelTween_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cancelTimer") ) { outValue = cancelTimer_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"tweenPrepare") ) { outValue = tweenPrepare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"typeToString") ) { outValue = typeToString_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"Function_Stop") ) { outValue = ( Function_Stop ); return true; }
		if (HX_FIELD_EQ(inName,"setVarInArray") ) { outValue = setVarInArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getVarInArray") ) { outValue = getVarInArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getModSetting") ) { outValue = getModSetting_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setGroupStuff") ) { outValue = setGroupStuff_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getGroupStuff") ) { outValue = getGroupStuff_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"destroyObject") ) { outValue = destroyObject_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"isLuaSupported") ) { outValue = isLuaSupported_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"formatVariable") ) { outValue = formatVariable_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBuildTarget") ) { outValue = getBuildTarget_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getPropertyLoop") ) { outValue = getPropertyLoop_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"Function_StopLua") ) { outValue = ( Function_StopLua ); return true; }
		if (HX_FIELD_EQ(inName,"Function_StopAll") ) { outValue = ( Function_StopAll ); return true; }
		if (HX_FIELD_EQ(inName,"addAnimByIndices") ) { outValue = addAnimByIndices_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cameraFromString") ) { outValue = cameraFromString_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"Function_Continue") ) { outValue = ( Function_Continue ); return true; }
		if (HX_FIELD_EQ(inName,"getObjectDirectly") ) { outValue = getObjectDirectly_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getTargetInstance") ) { outValue = getTargetInstance_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"blendModeFromString") ) { outValue = blendModeFromString_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"Function_StopHScript") ) { outValue = ( Function_StopHScript ); return true; }
		if (HX_FIELD_EQ(inName,"getTweenTypeByString") ) { outValue = getTweenTypeByString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getTweenEaseByString") ) { outValue = getTweenEaseByString_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getLowestCharacterGroup") ) { outValue = getLowestCharacterGroup_dyn(); return true; }
	}
	return false;
}

bool LuaUtils_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"Function_Stop") ) { Function_Stop=ioValue.Cast< ::String >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"Function_StopLua") ) { Function_StopLua=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"Function_StopAll") ) { Function_StopAll=ioValue.Cast< ::String >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"Function_Continue") ) { Function_Continue=ioValue.Cast< ::String >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"Function_StopHScript") ) { Function_StopHScript=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *LuaUtils_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo LuaUtils_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &LuaUtils_obj::Function_Stop,HX_("Function_Stop",c9,a5,e8,d3)},
	{::hx::fsString,(void *) &LuaUtils_obj::Function_Continue,HX_("Function_Continue",ae,85,11,8b)},
	{::hx::fsString,(void *) &LuaUtils_obj::Function_StopLua,HX_("Function_StopLua",6f,6f,62,22)},
	{::hx::fsString,(void *) &LuaUtils_obj::Function_StopHScript,HX_("Function_StopHScript",ca,bd,3f,93)},
	{::hx::fsString,(void *) &LuaUtils_obj::Function_StopAll,HX_("Function_StopAll",d8,0e,5a,22)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void LuaUtils_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(LuaUtils_obj::Function_Stop,"Function_Stop");
	HX_MARK_MEMBER_NAME(LuaUtils_obj::Function_Continue,"Function_Continue");
	HX_MARK_MEMBER_NAME(LuaUtils_obj::Function_StopLua,"Function_StopLua");
	HX_MARK_MEMBER_NAME(LuaUtils_obj::Function_StopHScript,"Function_StopHScript");
	HX_MARK_MEMBER_NAME(LuaUtils_obj::Function_StopAll,"Function_StopAll");
};

#ifdef HXCPP_VISIT_ALLOCS
static void LuaUtils_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(LuaUtils_obj::Function_Stop,"Function_Stop");
	HX_VISIT_MEMBER_NAME(LuaUtils_obj::Function_Continue,"Function_Continue");
	HX_VISIT_MEMBER_NAME(LuaUtils_obj::Function_StopLua,"Function_StopLua");
	HX_VISIT_MEMBER_NAME(LuaUtils_obj::Function_StopHScript,"Function_StopHScript");
	HX_VISIT_MEMBER_NAME(LuaUtils_obj::Function_StopAll,"Function_StopAll");
};

#endif

::hx::Class LuaUtils_obj::__mClass;

static ::String LuaUtils_obj_sStaticFields[] = {
	HX_("Function_Stop",c9,a5,e8,d3),
	HX_("Function_Continue",ae,85,11,8b),
	HX_("Function_StopLua",6f,6f,62,22),
	HX_("Function_StopHScript",ca,bd,3f,93),
	HX_("Function_StopAll",d8,0e,5a,22),
	HX_("getLuaTween",49,48,c7,bd),
	HX_("setVarInArray",8f,85,58,39),
	HX_("getVarInArray",83,a3,52,f4),
	HX_("getModSetting",24,8b,81,ff),
	HX_("isMap",d2,34,51,c1),
	HX_("setGroupStuff",77,6d,5e,9c),
	HX_("getGroupStuff",6b,8b,58,57),
	HX_("getPropertyLoop",0f,bf,86,48),
	HX_("getObjectDirectly",0b,c7,22,d0),
	HX_("isOfTypes",18,a9,2c,82),
	HX_("isLuaSupported",60,34,1f,2c),
	HX_("getTargetInstance",3c,b7,00,de),
	HX_("getLowestCharacterGroup",5e,ee,31,ed),
	HX_("addAnimByIndices",de,fe,08,84),
	HX_("loadFrames",6c,de,b0,61),
	HX_("destroyObject",59,17,39,e3),
	HX_("cancelTween",91,12,99,b7),
	HX_("cancelTimer",eb,27,5e,ae),
	HX_("formatVariable",93,ec,d1,a9),
	HX_("tweenPrepare",5c,02,9d,61),
	HX_("getBuildTarget",29,2c,fc,5e),
	HX_("getTweenTypeByString",77,08,e0,25),
	HX_("getTweenEaseByString",ab,f5,ad,77),
	HX_("blendModeFromString",4f,47,9d,c2),
	HX_("typeToString",86,c9,d1,1f),
	HX_("cameraFromString",e0,18,60,4a),
	::String(null())
};

void LuaUtils_obj::__register()
{
	LuaUtils_obj _hx_dummy;
	LuaUtils_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("psychlua.LuaUtils",aa,e4,6b,38);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &LuaUtils_obj::__GetStatic;
	__mClass->mSetStaticField = &LuaUtils_obj::__SetStatic;
	__mClass->mMarkFunc = LuaUtils_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(LuaUtils_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< LuaUtils_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = LuaUtils_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LuaUtils_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LuaUtils_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void LuaUtils_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_24_boot)
HXDLIN(  24)		Function_Stop = HX_("##PSYCHLUA_FUNCTIONSTOP",dc,01,33,cd);
            	}
{
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_25_boot)
HXDLIN(  25)		Function_Continue = HX_("##PSYCHLUA_FUNCTIONCONTINUE",41,af,17,aa);
            	}
{
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_26_boot)
HXDLIN(  26)		Function_StopLua = HX_("##PSYCHLUA_FUNCTIONSTOPLUA",3c,85,88,6f);
            	}
{
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_27_boot)
HXDLIN(  27)		Function_StopHScript = HX_("##PSYCHLUA_FUNCTIONSTOPHSCRIPT",f7,91,e5,94);
            	}
{
            	HX_STACKFRAME(&_hx_pos_9a11087af2501d00_28_boot)
HXDLIN(  28)		Function_StopAll = HX_("##PSYCHLUA_FUNCTIONSTOPALL",a5,24,80,6f);
            	}
}

} // end namespace psychlua
