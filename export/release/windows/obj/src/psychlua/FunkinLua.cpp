// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_backend_Achievements
#include <backend/Achievements.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Conductor
#include <backend/Conductor.h>
#endif
#ifndef INCLUDED_backend_Difficulty
#include <backend/Difficulty.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_Highscore
#include <backend/Highscore.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_backend_Song
#include <backend/Song.h>
#endif
#ifndef INCLUDED_backend_StageData
#include <backend/StageData.h>
#endif
#ifndef INCLUDED_backend_WeekData
#include <backend/WeekData.h>
#endif
#ifndef INCLUDED_crowplexus_iris_Iris
#include <crowplexus/iris/Iris.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_ColorTween
#include <flixel/tweens/misc/ColorTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_FlxAnimate
#include <flxanimate/FlxAnimate.h>
#endif
#ifndef INCLUDED_flxanimate_PsychFlxAnimate
#include <flxanimate/PsychFlxAnimate.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_llua_Convert
#include <llua/Convert.h>
#endif
#ifndef INCLUDED_llua_Lua_helper
#include <llua/Lua_helper.h>
#endif
#ifndef INCLUDED_objects_Bar
#include <objects/Bar.h>
#endif
#ifndef INCLUDED_objects_Character
#include <objects/Character.h>
#endif
#ifndef INCLUDED_objects_Note
#include <objects/Note.h>
#endif
#ifndef INCLUDED_objects_NoteSplash
#include <objects/NoteSplash.h>
#endif
#ifndef INCLUDED_objects_StrumNote
#include <objects/StrumNote.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_psychlua_CustomSubstate
#include <psychlua/CustomSubstate.h>
#endif
#ifndef INCLUDED_psychlua_DeprecatedFunctions
#include <psychlua/DeprecatedFunctions.h>
#endif
#ifndef INCLUDED_psychlua_ExtraFunctions
#include <psychlua/ExtraFunctions.h>
#endif
#ifndef INCLUDED_psychlua_FlxAnimateFunctions
#include <psychlua/FlxAnimateFunctions.h>
#endif
#ifndef INCLUDED_psychlua_FunkinLua
#include <psychlua/FunkinLua.h>
#endif
#ifndef INCLUDED_psychlua_HScript
#include <psychlua/HScript.h>
#endif
#ifndef INCLUDED_psychlua_LuaUtils
#include <psychlua/LuaUtils.h>
#endif
#ifndef INCLUDED_psychlua_ModchartAnimateSprite
#include <psychlua/ModchartAnimateSprite.h>
#endif
#ifndef INCLUDED_psychlua_ModchartSprite
#include <psychlua/ModchartSprite.h>
#endif
#ifndef INCLUDED_psychlua_ReflectionFunctions
#include <psychlua/ReflectionFunctions.h>
#endif
#ifndef INCLUDED_psychlua_ShaderFunctions
#include <psychlua/ShaderFunctions.h>
#endif
#ifndef INCLUDED_psychlua_TextFunctions
#include <psychlua/TextFunctions.h>
#endif
#ifndef INCLUDED_states_FreeplayState
#include <states/FreeplayState.h>
#endif
#ifndef INCLUDED_states_LoadingState
#include <states/LoadingState.h>
#endif
#ifndef INCLUDED_states_MainMenuState
#include <states/MainMenuState.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_states_StoryMenuState
#include <states/StoryMenuState.h>
#endif
#ifndef INCLUDED_substates_GameOverSubstate
#include <substates/GameOverSubstate.h>
#endif
#ifndef INCLUDED_substates_PauseSubState
#include <substates/PauseSubState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_220_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",220,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_225_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",225,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_230_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",230,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_236_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",236,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_241_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",241,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_246_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",246,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1532_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1532,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1552_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1552,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_46_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",46,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_212_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",212,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_252_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",252,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_265_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",265,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_286_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",286,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_291_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",291,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_294_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",294,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_311_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",311,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_332_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",332,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_352_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",352,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_377_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",377,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_399_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",399,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_413_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",413,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_425_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",425,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_439_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",439,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_468_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",468,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_501_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",501,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_519_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",519,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_522_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",522,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_524_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",524,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_538_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",538,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_541_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",541,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_544_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",544,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_555_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",555,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_558_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",558,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_561_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",561,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_564_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",564,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_566_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",566,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_577_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",577,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_590_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",590,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_605_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",605,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_608_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",608,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_611_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",611,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_614_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",614,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_617_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",617,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_619_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",619,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_630_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",630,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_641_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",641,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_653_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",653,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_655_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",655,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_662_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",662,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_669_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",669,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_672_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",672,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_676_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",676,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_680_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",680,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_684_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",684,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_688_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",688,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_692_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",692,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_696_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",696,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_697_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",697,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_698_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",698,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_701_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",701,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_702_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",702,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_703_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",703,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_704_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",704,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_707_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",707,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_716_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",716,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_719_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",719,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_722_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",722,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_726_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",726,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_732_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",732,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_736_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",736,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_741_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",741,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_747_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",747,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_770_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",770,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_774_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",774,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_784_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",784,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_794_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",794,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_804_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",804,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_814_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",814,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_825_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",825,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_826_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",826,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_827_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",827,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_828_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",828,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_832_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",832,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_833_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",833,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_834_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",834,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_835_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",835,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_838_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",838,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_842_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",842,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_845_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",845,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_847_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",847,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_851_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",851,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_855_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",855,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_859_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",859,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_860_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",860,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_864_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",864,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_869_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",869,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_879_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",879,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_889_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",889,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_899_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",899,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_909_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",909,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_919_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",919,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_930_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",930,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_937_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",937,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_948_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",948,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_960_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",960,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_964_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",964,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_981_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",981,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_985_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",985,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_989_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",989,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1004_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1004,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1014_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1014,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1025_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1025,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1040_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1040,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1061_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1061,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1082_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1082,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1102_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1102,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1119_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1119,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1123_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1123,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1127_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1127,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1132_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1132,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1141_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1141,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1151_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1151,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1171_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1171,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1191_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1191,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1219_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1219,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1232_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1232,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1242_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1242,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1303_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1303,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1282_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1282,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1315_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1315,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1317_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1317,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1331_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1331,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1341_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1341,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1359_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1359,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1372_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1372,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1385_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1385,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1399_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1399,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1413_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1413,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1426_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1426,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1441_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1441,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1457_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1457,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1467_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1467,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1482_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1482,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1492_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1492,0x1e7a8669)
HX_DEFINE_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1550_new,"psychlua.FunkinLua","new",0xca123f88,"psychlua.FunkinLua.new","psychlua/FunkinLua.hx",1550,0x1e7a8669)
HX_LOCAL_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1608_call,"psychlua.FunkinLua","call",0xfe9cec76,"psychlua.FunkinLua.call","psychlua/FunkinLua.hx",1608,0x1e7a8669)
HX_LOCAL_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1651_set,"psychlua.FunkinLua","set",0xca160aca,"psychlua.FunkinLua.set","psychlua/FunkinLua.hx",1651,0x1e7a8669)
HX_LOCAL_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1660_stop,"psychlua.FunkinLua","stop",0x093ec3da,"psychlua.FunkinLua.stop","psychlua/FunkinLua.hx",1660,0x1e7a8669)
HX_LOCAL_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1678_oldTweenFunction,"psychlua.FunkinLua","oldTweenFunction",0x07814754,"psychlua.FunkinLua.oldTweenFunction","psychlua/FunkinLua.hx",1678,0x1e7a8669)
HX_LOCAL_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1689_oldTweenFunction,"psychlua.FunkinLua","oldTweenFunction",0x07814754,"psychlua.FunkinLua.oldTweenFunction","psychlua/FunkinLua.hx",1689,0x1e7a8669)
HX_LOCAL_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1703_noteTweenFunction,"psychlua.FunkinLua","noteTweenFunction",0x28e64279,"psychlua.FunkinLua.noteTweenFunction","psychlua/FunkinLua.hx",1703,0x1e7a8669)
HX_LOCAL_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1718_noteTweenFunction,"psychlua.FunkinLua","noteTweenFunction",0x28e64279,"psychlua.FunkinLua.noteTweenFunction","psychlua/FunkinLua.hx",1718,0x1e7a8669)
HX_LOCAL_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1756_findScript,"psychlua.FunkinLua","findScript",0x4a1348fc,"psychlua.FunkinLua.findScript","psychlua/FunkinLua.hx",1756,0x1e7a8669)
HX_LOCAL_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1778_getErrorMessage,"psychlua.FunkinLua","getErrorMessage",0x3967fbbd,"psychlua.FunkinLua.getErrorMessage","psychlua/FunkinLua.hx",1778,0x1e7a8669)
HX_LOCAL_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1797_addLocalCallback,"psychlua.FunkinLua","addLocalCallback",0x00ed1747,"psychlua.FunkinLua.addLocalCallback","psychlua/FunkinLua.hx",1797,0x1e7a8669)
HX_LOCAL_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1807_initLuaShader,"psychlua.FunkinLua","initLuaShader",0xe6bd5af5,"psychlua.FunkinLua.initLuaShader","psychlua/FunkinLua.hx",1807,0x1e7a8669)
HX_LOCAL_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1730_luaTrace,"psychlua.FunkinLua","luaTrace",0x55580985,"psychlua.FunkinLua.luaTrace","psychlua/FunkinLua.hx",1730,0x1e7a8669)
HX_LOCAL_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1738_getBool,"psychlua.FunkinLua","getBool",0x16c75708,"psychlua.FunkinLua.getBool","psychlua/FunkinLua.hx",1738,0x1e7a8669)
HX_LOCAL_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_58_boot,"psychlua.FunkinLua","boot",0xfdfe580a,"psychlua.FunkinLua.boot","psychlua/FunkinLua.hx",58,0x1e7a8669)
HX_LOCAL_STACK_FRAME(_hx_pos_cee4ff64a0b4a703_1607_boot,"psychlua.FunkinLua","boot",0xfdfe580a,"psychlua.FunkinLua.boot","psychlua/FunkinLua.hx",1607,0x1e7a8669)
namespace psychlua{

void FunkinLua_obj::__construct(::String scriptName){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::states::PlayState,game,::Array< ::String >,scriptName1) HXARGC(4)
            		void _hx_run(::String varName, ::Dynamic arg, ::Dynamic __o_ignoreSelf,::Array< ::String > exclusions){
            		 ::Dynamic ignoreSelf = __o_ignoreSelf;
            		if (::hx::IsNull(__o_ignoreSelf)) ignoreSelf = false;
            			HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_220_new)
HXLINE( 221)			if (::hx::IsNull( exclusions )) {
HXLINE( 221)				exclusions = ::Array_obj< ::String >::__new(0);
            			}
HXLINE( 222)			bool _hx_tmp;
HXDLIN( 222)			if (( (bool)(ignoreSelf) )) {
HXLINE( 222)				_hx_tmp = !(exclusions->contains(scriptName1->__get(0)));
            			}
            			else {
HXLINE( 222)				_hx_tmp = false;
            			}
HXDLIN( 222)			if (_hx_tmp) {
HXLINE( 222)				exclusions->push(scriptName1->__get(0));
            			}
HXLINE( 223)			game->setOnScripts(varName,arg,exclusions);
            		}
            		HX_END_LOCAL_FUNC4((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::states::PlayState,game,::Array< ::String >,scriptName1) HXARGC(4)
            		void _hx_run(::String varName, ::Dynamic arg, ::Dynamic __o_ignoreSelf,::Array< ::String > exclusions){
            		 ::Dynamic ignoreSelf = __o_ignoreSelf;
            		if (::hx::IsNull(__o_ignoreSelf)) ignoreSelf = false;
            			HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_225_new)
HXLINE( 226)			if (::hx::IsNull( exclusions )) {
HXLINE( 226)				exclusions = ::Array_obj< ::String >::__new(0);
            			}
HXLINE( 227)			bool _hx_tmp;
HXDLIN( 227)			if (( (bool)(ignoreSelf) )) {
HXLINE( 227)				_hx_tmp = !(exclusions->contains(scriptName1->__get(0)));
            			}
            			else {
HXLINE( 227)				_hx_tmp = false;
            			}
HXDLIN( 227)			if (_hx_tmp) {
HXLINE( 227)				exclusions->push(scriptName1->__get(0));
            			}
HXLINE( 228)			game->setOnHScript(varName,arg,exclusions);
            		}
            		HX_END_LOCAL_FUNC4((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::states::PlayState,game,::Array< ::String >,scriptName1) HXARGC(4)
            		void _hx_run(::String varName, ::Dynamic arg, ::Dynamic __o_ignoreSelf,::Array< ::String > exclusions){
            		 ::Dynamic ignoreSelf = __o_ignoreSelf;
            		if (::hx::IsNull(__o_ignoreSelf)) ignoreSelf = false;
            			HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_230_new)
HXLINE( 231)			if (::hx::IsNull( exclusions )) {
HXLINE( 231)				exclusions = ::Array_obj< ::String >::__new(0);
            			}
HXLINE( 232)			bool _hx_tmp;
HXDLIN( 232)			if (( (bool)(ignoreSelf) )) {
HXLINE( 232)				_hx_tmp = !(exclusions->contains(scriptName1->__get(0)));
            			}
            			else {
HXLINE( 232)				_hx_tmp = false;
            			}
HXDLIN( 232)			if (_hx_tmp) {
HXLINE( 232)				exclusions->push(scriptName1->__get(0));
            			}
HXLINE( 233)			game->setOnLuas(varName,arg,exclusions);
            		}
            		HX_END_LOCAL_FUNC4((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_4, ::states::PlayState,game,::Array< ::String >,scriptName1) HXARGC(6)
            		 ::Dynamic _hx_run(::String funcName,::cpp::VirtualArray args, ::Dynamic __o_ignoreStops, ::Dynamic __o_ignoreSelf,::Array< ::String > excludeScripts,::cpp::VirtualArray excludeValues){
            		 ::Dynamic ignoreStops = __o_ignoreStops;
            		if (::hx::IsNull(__o_ignoreStops)) ignoreStops = false;
            		 ::Dynamic ignoreSelf = __o_ignoreSelf;
            		if (::hx::IsNull(__o_ignoreSelf)) ignoreSelf = true;
            			HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_236_new)
HXLINE( 237)			if (::hx::IsNull( excludeScripts )) {
HXLINE( 237)				excludeScripts = ::Array_obj< ::String >::__new(0);
            			}
HXLINE( 238)			bool _hx_tmp;
HXDLIN( 238)			if (( (bool)(ignoreSelf) )) {
HXLINE( 238)				_hx_tmp = !(excludeScripts->contains(scriptName1->__get(0)));
            			}
            			else {
HXLINE( 238)				_hx_tmp = false;
            			}
HXDLIN( 238)			if (_hx_tmp) {
HXLINE( 238)				excludeScripts->push(scriptName1->__get(0));
            			}
HXLINE( 239)			return game->callOnScripts(funcName,args,ignoreStops,excludeScripts,excludeValues);
            		}
            		HX_END_LOCAL_FUNC6(return)

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_5, ::states::PlayState,game,::Array< ::String >,scriptName1) HXARGC(6)
            		 ::Dynamic _hx_run(::String funcName,::cpp::VirtualArray args, ::Dynamic __o_ignoreStops, ::Dynamic __o_ignoreSelf,::Array< ::String > excludeScripts,::cpp::VirtualArray excludeValues){
            		 ::Dynamic ignoreStops = __o_ignoreStops;
            		if (::hx::IsNull(__o_ignoreStops)) ignoreStops = false;
            		 ::Dynamic ignoreSelf = __o_ignoreSelf;
            		if (::hx::IsNull(__o_ignoreSelf)) ignoreSelf = true;
            			HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_241_new)
HXLINE( 242)			if (::hx::IsNull( excludeScripts )) {
HXLINE( 242)				excludeScripts = ::Array_obj< ::String >::__new(0);
            			}
HXLINE( 243)			bool _hx_tmp;
HXDLIN( 243)			if (( (bool)(ignoreSelf) )) {
HXLINE( 243)				_hx_tmp = !(excludeScripts->contains(scriptName1->__get(0)));
            			}
            			else {
HXLINE( 243)				_hx_tmp = false;
            			}
HXDLIN( 243)			if (_hx_tmp) {
HXLINE( 243)				excludeScripts->push(scriptName1->__get(0));
            			}
HXLINE( 244)			return game->callOnLuas(funcName,args,ignoreStops,excludeScripts,excludeValues);
            		}
            		HX_END_LOCAL_FUNC6(return)

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_6, ::states::PlayState,game,::Array< ::String >,scriptName1) HXARGC(6)
            		 ::Dynamic _hx_run(::String funcName,::cpp::VirtualArray args, ::Dynamic __o_ignoreStops, ::Dynamic __o_ignoreSelf,::Array< ::String > excludeScripts,::cpp::VirtualArray excludeValues){
            		 ::Dynamic ignoreStops = __o_ignoreStops;
            		if (::hx::IsNull(__o_ignoreStops)) ignoreStops = false;
            		 ::Dynamic ignoreSelf = __o_ignoreSelf;
            		if (::hx::IsNull(__o_ignoreSelf)) ignoreSelf = true;
            			HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_246_new)
HXLINE( 247)			if (::hx::IsNull( excludeScripts )) {
HXLINE( 247)				excludeScripts = ::Array_obj< ::String >::__new(0);
            			}
HXLINE( 248)			bool _hx_tmp;
HXDLIN( 248)			if (( (bool)(ignoreSelf) )) {
HXLINE( 248)				_hx_tmp = !(excludeScripts->contains(scriptName1->__get(0)));
            			}
            			else {
HXLINE( 248)				_hx_tmp = false;
            			}
HXDLIN( 248)			if (_hx_tmp) {
HXLINE( 248)				excludeScripts->push(scriptName1->__get(0));
            			}
HXLINE( 249)			return game->callOnHScript(funcName,args,ignoreStops,excludeScripts,excludeValues);
            		}
            		HX_END_LOCAL_FUNC6(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_141, ::psychlua::FunkinLua,_gthis) HXARGC(2)
            		 ::Dynamic _hx_run(::String saveTag,::String modName){
            			HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1532_new)
HXLINE(1534)			if (::hx::IsNull( modName )) {
HXLINE(1536)				if (::hx::IsNull( _gthis->modFolder )) {
HXLINE(1538)					::psychlua::FunkinLua_obj::luaTrace(HX_("getModSetting: Argument #2 is null and script is not inside a packed Mod folder!",fe,0e,a5,12),false,false,-65536);
HXLINE(1539)					return null();
            				}
HXLINE(1541)				modName = _gthis->modFolder;
            			}
HXLINE(1543)			return ::psychlua::LuaUtils_obj::getModSetting(saveTag,modName);
            		}
            		HX_END_LOCAL_FUNC2(return)

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_143, ::psychlua::FunkinLua,_gthis,::Array< ::String >,scriptName1) HXARGC(0)
            		bool _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1552_new)
HXLINE(1553)			_gthis->closed = true;
HXLINE(1554)			::haxe::Log_obj::trace((HX_("Closing script ",6a,a3,fb,93) + scriptName1->__get(0)),::hx::SourceInfo(HX_("source/psychlua/FunkinLua.hx",f5,9a,41,5d),1554,HX_("psychlua.FunkinLua",96,1b,92,ca),HX_("new",60,d0,53,00)));
HXLINE(1555)			return _gthis->closed;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_46_new)
HXLINE(1803)		this->runtimeShaders =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1606)		this->lastCalledFunction = HX_("",00,00,00,00);
HXLINE(  57)		this->callbacks =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  54)		this->hscript = null();
HXLINE(  51)		this->closed = false;
HXLINE(  50)		this->modFolder = null();
HXLINE(  49)		this->scriptName = HX_("",00,00,00,00);
HXLINE(  47)		this->lua = null();
HXLINE(  60)		::Array< ::String > scriptName1 = ::Array_obj< ::String >::__new(1)->init(0,scriptName);
HXDLIN(  60)		 ::psychlua::FunkinLua _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  61)		this->lua = luaL_newstate();
HXLINE(  62)		luaL_openlibs(this->lua);
HXLINE(  69)		this->scriptName = ::StringTools_obj::trim(scriptName1->__get(0));
HXLINE(  70)		 ::states::PlayState game = ::states::PlayState_obj::instance;
HXLINE(  71)		if (::hx::IsNotNull( game )) {
HXLINE(  71)			game->luaArray->push(::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(  73)		::Array< ::String > myFolder = this->scriptName.split(HX_("/",2f,00,00,00));
HXLINE(  75)		bool _hx_tmp;
HXDLIN(  75)		if (((myFolder->__get(0) + HX_("/",2f,00,00,00)) == HX_("mods/",9e,2f,58,0c))) {
HXLINE(  75)			if ((::backend::Mods_obj::currentModDirectory != myFolder->__get(1))) {
HXLINE(  75)				_hx_tmp = ::backend::Mods_obj::globalMods->contains(myFolder->__get(1));
            			}
            			else {
HXLINE(  75)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(  75)			_hx_tmp = false;
            		}
HXDLIN(  75)		if (_hx_tmp) {
HXLINE(  76)			this->modFolder = myFolder->__get(1);
            		}
HXLINE(  80)		this->set(HX_("Function_StopLua",6f,6f,62,22),::psychlua::LuaUtils_obj::Function_StopLua);
HXLINE(  81)		this->set(HX_("Function_StopHScript",ca,bd,3f,93),::psychlua::LuaUtils_obj::Function_StopHScript);
HXLINE(  82)		this->set(HX_("Function_StopAll",d8,0e,5a,22),::psychlua::LuaUtils_obj::Function_StopAll);
HXLINE(  83)		this->set(HX_("Function_Stop",c9,a5,e8,d3),::psychlua::LuaUtils_obj::Function_Stop);
HXLINE(  84)		this->set(HX_("Function_Continue",ae,85,11,8b),::psychlua::LuaUtils_obj::Function_Continue);
HXLINE(  85)		this->set(HX_("luaDebugMode",7e,06,20,4c),false);
HXLINE(  86)		this->set(HX_("luaDeprecatedWarnings",02,69,36,70),true);
HXLINE(  87)		this->set(HX_("version",18,e7,f1,7c),::StringTools_obj::trim(::states::MainMenuState_obj::psychEngineVersion));
HXLINE(  88)		this->set(HX_("modFolder",10,7f,30,0a),this->modFolder);
HXLINE(  91)		this->set(HX_("curBpm",3f,61,c3,3e),::backend::Conductor_obj::bpm);
HXLINE(  92)		this->set(HX_("bpm",df,be,4a,00), ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)));
HXLINE(  93)		this->set(HX_("scrollSpeed",3a,e0,46,cb), ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)));
HXLINE(  94)		this->set(HX_("crochet",34,d5,b5,d4),::backend::Conductor_obj::crochet);
HXLINE(  95)		this->set(HX_("stepCrochet",48,d7,ff,e6),::backend::Conductor_obj::stepCrochet);
HXLINE(  96)		this->set(HX_("songLength",9b,3a,8c,fa),::flixel::FlxG_obj::sound->music->_length);
HXLINE(  97)		this->set(HX_("songName",c0,d0,d7,36), ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)));
HXLINE(  98)		::String path = ( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(  98)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(  98)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(  98)		this->set(HX_("songPath",1a,44,2a,38),::StringTools_obj::trim(hideChars->replace(invalidChars->replace(path,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase());
HXLINE(  99)		this->set(HX_("loadedSongName",e5,e1,37,f4),::backend::Song_obj::loadedSongName);
HXLINE( 100)		::String path1 = ::backend::Song_obj::loadedSongName;
HXDLIN( 100)		 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 100)		 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 100)		this->set(HX_("loadedSongPath",3f,55,8a,f5),::StringTools_obj::trim(hideChars1->replace(invalidChars1->replace(path1,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase());
HXLINE( 101)		this->set(HX_("chartPath",a3,75,d1,25),::backend::Song_obj::chartPath);
HXLINE( 102)		this->set(HX_("startedCountdown",30,57,28,9b),false);
HXLINE( 103)		this->set(HX_("curStage",1e,65,b9,cb), ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)));
HXLINE( 105)		this->set(HX_("isStoryMode",ae,68,02,07),::states::PlayState_obj::isStoryMode);
HXLINE( 106)		this->set(HX_("difficulty",3b,4e,8e,47),::states::PlayState_obj::storyDifficulty);
HXLINE( 108)		 ::Dynamic num = null();
HXDLIN( 108)		 ::Dynamic canTranslate = false;
HXDLIN( 108)		if (::hx::IsNull( canTranslate )) {
HXLINE( 108)			canTranslate = true;
            		}
HXDLIN( 108)		 ::Dynamic diffName;
HXDLIN( 108)		if (::hx::IsNull( num )) {
HXLINE( 108)			diffName = ::states::PlayState_obj::storyDifficulty;
            		}
            		else {
HXLINE( 108)			diffName = num;
            		}
HXDLIN( 108)		::String diffName1 = ::backend::Difficulty_obj::list->__get(( (int)(diffName) ));
HXDLIN( 108)		if (::hx::IsNull( diffName1 )) {
HXLINE(  64)			diffName1 = ::backend::Difficulty_obj::defaultDifficulty;
            		}
HXLINE( 108)		::String _hx_tmp1;
HXDLIN( 108)		if (( (bool)(canTranslate) )) {
HXLINE( 108)			::String key = (HX_("difficulty_",c4,25,f6,54) + diffName1);
HXDLIN( 108)			::cpp::VirtualArray values = null();
HXDLIN( 108)			::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 108)			 ::EReg hideChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN( 108)			::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars2->replace(::StringTools_obj::replace(key,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN( 108)			if (::hx::IsNull( str )) {
HXLINE(  62)				str = diffName1;
            			}
HXLINE( 108)			if (::hx::IsNull( str )) {
HXLINE(  68)				str = key;
            			}
HXLINE( 108)			if (::hx::IsNotNull( values )) {
HXLINE( 108)				int _g_current = 0;
HXDLIN( 108)				::cpp::VirtualArray _g_array = values;
HXDLIN( 108)				while((_g_current < _g_array->get_length())){
HXLINE( 108)					 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN( 108)					_g_current = (_g_current + 1);
HXDLIN( 108)					int _g_key = (_g_current - 1);
HXDLIN( 108)					int num1 = _g_key;
HXDLIN( 108)					 ::Dynamic value = _g_value;
HXLINE(  72)					str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num1 + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            				}
            			}
HXLINE( 108)			_hx_tmp1 = str;
            		}
            		else {
HXLINE( 108)			_hx_tmp1 = diffName1;
            		}
HXDLIN( 108)		this->set(HX_("difficultyName",26,26,4a,94),_hx_tmp1);
HXLINE( 109)		 ::Dynamic num2 = null();
HXDLIN( 109)		if (::hx::IsNull( num2 )) {
HXLINE(  16)			num2 = ::states::PlayState_obj::storyDifficulty;
            		}
HXLINE( 109)		::String filePostfix = ::backend::Difficulty_obj::list->__get(( (int)(num2) ));
HXDLIN( 109)		bool _hx_tmp2;
HXDLIN( 109)		if (::hx::IsNotNull( filePostfix )) {
HXLINE( 109)			 ::EReg invalidChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 109)			 ::EReg hideChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 109)			::String _hx_tmp3 = ::StringTools_obj::trim(hideChars3->replace(invalidChars2->replace(filePostfix,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
HXDLIN( 109)			 ::EReg invalidChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 109)			 ::EReg hideChars4 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 109)			_hx_tmp2 = (_hx_tmp3 != ::StringTools_obj::trim(hideChars4->replace(invalidChars3->replace(::backend::Difficulty_obj::defaultDifficulty,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase());
            		}
            		else {
HXLINE( 109)			_hx_tmp2 = false;
            		}
HXDLIN( 109)		if (_hx_tmp2) {
HXLINE(  20)			filePostfix = (HX_("-",2d,00,00,00) + filePostfix);
            		}
            		else {
HXLINE(  22)			filePostfix = HX_("",00,00,00,00);
            		}
HXLINE( 109)		 ::EReg invalidChars4 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 109)		 ::EReg hideChars5 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 109)		this->set(HX_("difficultyPath",80,99,9c,95),::StringTools_obj::trim(hideChars5->replace(invalidChars4->replace(filePostfix,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase());
HXLINE( 110)		 ::Dynamic num3 = null();
HXDLIN( 110)		 ::Dynamic canTranslate1 = true;
HXDLIN( 110)		if (::hx::IsNull( canTranslate1 )) {
HXLINE( 110)			canTranslate1 = true;
            		}
HXDLIN( 110)		 ::Dynamic diffName2;
HXDLIN( 110)		if (::hx::IsNull( num3 )) {
HXLINE( 110)			diffName2 = ::states::PlayState_obj::storyDifficulty;
            		}
            		else {
HXLINE( 110)			diffName2 = num3;
            		}
HXDLIN( 110)		::String diffName3 = ::backend::Difficulty_obj::list->__get(( (int)(diffName2) ));
HXDLIN( 110)		if (::hx::IsNull( diffName3 )) {
HXLINE(  64)			diffName3 = ::backend::Difficulty_obj::defaultDifficulty;
            		}
HXLINE( 110)		::String _hx_tmp4;
HXDLIN( 110)		if (( (bool)(canTranslate1) )) {
HXLINE( 110)			::String key1 = (HX_("difficulty_",c4,25,f6,54) + diffName3);
HXDLIN( 110)			::cpp::VirtualArray values1 = null();
HXDLIN( 110)			::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN( 110)			 ::EReg hideChars6 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN( 110)			::String str1 = ( ( ::haxe::ds::StringMap)(this2) )->get_string(::StringTools_obj::trim(hideChars6->replace(::StringTools_obj::replace(key1,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN( 110)			if (::hx::IsNull( str1 )) {
HXLINE(  62)				str1 = diffName3;
            			}
HXLINE( 110)			if (::hx::IsNull( str1 )) {
HXLINE(  68)				str1 = key1;
            			}
HXLINE( 110)			if (::hx::IsNotNull( values1 )) {
HXLINE( 110)				int _g_current1 = 0;
HXDLIN( 110)				::cpp::VirtualArray _g_array1 = values1;
HXDLIN( 110)				while((_g_current1 < _g_array1->get_length())){
HXLINE( 110)					 ::Dynamic _g_value1 = _g_array1->__get(_g_current1);
HXDLIN( 110)					_g_current1 = (_g_current1 + 1);
HXDLIN( 110)					int _g_key1 = (_g_current1 - 1);
HXDLIN( 110)					int num4 = _g_key1;
HXDLIN( 110)					 ::Dynamic value1 = _g_value1;
HXLINE(  72)					str1 = ::StringTools_obj::replace(str1,((HX_("{",7b,00,00,00) + (num4 + 1)) + HX_("}",7d,00,00,00)),( (::String)(value1) ));
            				}
            			}
HXLINE( 110)			_hx_tmp4 = str1;
            		}
            		else {
HXLINE( 110)			_hx_tmp4 = diffName3;
            		}
HXDLIN( 110)		this->set(HX_("difficultyNameTranslation",6b,a8,7a,37),_hx_tmp4);
HXLINE( 111)		this->set(HX_("weekRaw",54,9e,f6,24),::states::PlayState_obj::storyWeek);
HXLINE( 112)		this->set(HX_("week",f4,5f,f5,4e),::backend::WeekData_obj::weeksList->__get(::states::PlayState_obj::storyWeek));
HXLINE( 113)		this->set(HX_("seenCutscene",25,d1,95,b5),::states::PlayState_obj::seenCutscene);
HXLINE( 114)		this->set(HX_("hasVocals",58,c3,39,9a), ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)));
HXLINE( 117)		this->set(HX_("screenWidth",fa,02,e8,81),::flixel::FlxG_obj::width);
HXLINE( 118)		this->set(HX_("screenHeight",73,10,6a,df),::flixel::FlxG_obj::height);
HXLINE( 122)		if (::hx::IsNotNull( game )) {
HXLINE( 125)			 ::Dynamic curSection =  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(game->curSection);
HXLINE( 126)			this->set(HX_("curSection",45,58,c1,68),game->curSection);
HXLINE( 127)			this->set(HX_("curBeat",16,53,29,ac),game->curBeat);
HXLINE( 128)			this->set(HX_("curStep",ec,58,71,b7),game->curStep);
HXLINE( 129)			this->set(HX_("curDecBeat",b8,a2,ef,d7),game->curDecBeat);
HXLINE( 130)			this->set(HX_("curDecStep",8e,a8,37,e3),game->curDecStep);
HXLINE( 132)			this->set(HX_("score",52,73,d9,78),game->songScore);
HXLINE( 133)			this->set(HX_("misses",6a,62,54,56),game->songMisses);
HXLINE( 134)			this->set(HX_("hits",c0,42,0e,45),game->songHits);
HXLINE( 135)			this->set(HX_("combo",4e,28,5d,4a),game->combo);
HXLINE( 136)			this->set(HX_("deaths",bf,be,9e,63),::states::PlayState_obj::deathCounter);
HXLINE( 138)			this->set(HX_("rating",1d,34,8a,bb),game->ratingPercent);
HXLINE( 139)			this->set(HX_("ratingName",08,a5,2b,05),game->ratingName);
HXLINE( 140)			this->set(HX_("ratingFC",9a,72,95,59),game->ratingFC);
HXLINE( 141)			this->set(HX_("totalPlayed",37,de,ee,fd),game->totalPlayed);
HXLINE( 142)			this->set(HX_("totalNotesHit",76,f4,57,a6),game->totalNotesHit);
HXLINE( 144)			this->set(HX_("inGameOver",6b,97,d6,11),::hx::IsNotNull( ::substates::GameOverSubstate_obj::instance ));
HXLINE( 145)			 ::Dynamic _hx_tmp5;
HXDLIN( 145)			if (::hx::IsNotNull( curSection )) {
HXLINE( 145)				_hx_tmp5 = ::hx::IsEq( curSection->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic),true );
            			}
            			else {
HXLINE( 145)				_hx_tmp5 = false;
            			}
HXDLIN( 145)			this->set(HX_("mustHitSection",3b,5f,87,62),_hx_tmp5);
HXLINE( 146)			 ::Dynamic _hx_tmp6;
HXDLIN( 146)			if (::hx::IsNotNull( curSection )) {
HXLINE( 146)				_hx_tmp6 = ::hx::IsEq( curSection->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic),true );
            			}
            			else {
HXLINE( 146)				_hx_tmp6 = false;
            			}
HXDLIN( 146)			this->set(HX_("altAnim",da,f3,f2,e5),_hx_tmp6);
HXLINE( 147)			 ::Dynamic _hx_tmp7;
HXDLIN( 147)			if (::hx::IsNotNull( curSection )) {
HXLINE( 147)				_hx_tmp7 = ::hx::IsEq( curSection->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic),true );
            			}
            			else {
HXLINE( 147)				_hx_tmp7 = false;
            			}
HXDLIN( 147)			this->set(HX_("gfSection",86,e5,63,d4),_hx_tmp7);
HXLINE( 149)			this->set(HX_("healthGainMult",cb,10,f5,d9),game->healthGain);
HXLINE( 150)			this->set(HX_("healthLossMult",2f,4c,b0,1e),game->healthLoss);
HXLINE( 153)			this->set(HX_("playbackRate",9b,3a,8b,c0),game->playbackRate);
HXLINE( 158)			this->set(HX_("guitarHeroSustains",74,ae,d8,47),game->guitarHeroSustains);
HXLINE( 159)			this->set(HX_("instakillOnMiss",94,43,20,66),game->instakillOnMiss);
HXLINE( 160)			this->set(HX_("botPlay",9b,27,83,4c),game->cpuControlled);
HXLINE( 161)			this->set(HX_("practice",bb,00,e7,a0),game->practiceMode);
HXLINE( 163)			{
HXLINE( 163)				{
HXLINE( 164)					this->set((HX_("defaultPlayerStrumX",91,a3,83,89) + 0),0);
HXLINE( 165)					this->set((HX_("defaultPlayerStrumY",92,a3,83,89) + 0),0);
HXLINE( 166)					this->set((HX_("defaultOpponentStrumX",0d,e1,d7,f1) + 0),0);
HXLINE( 167)					this->set((HX_("defaultOpponentStrumY",0e,e1,d7,f1) + 0),0);
            				}
HXLINE( 163)				{
HXLINE( 164)					this->set((HX_("defaultPlayerStrumX",91,a3,83,89) + 1),0);
HXLINE( 165)					this->set((HX_("defaultPlayerStrumY",92,a3,83,89) + 1),0);
HXLINE( 166)					this->set((HX_("defaultOpponentStrumX",0d,e1,d7,f1) + 1),0);
HXLINE( 167)					this->set((HX_("defaultOpponentStrumY",0e,e1,d7,f1) + 1),0);
            				}
HXLINE( 163)				{
HXLINE( 164)					this->set((HX_("defaultPlayerStrumX",91,a3,83,89) + 2),0);
HXLINE( 165)					this->set((HX_("defaultPlayerStrumY",92,a3,83,89) + 2),0);
HXLINE( 166)					this->set((HX_("defaultOpponentStrumX",0d,e1,d7,f1) + 2),0);
HXLINE( 167)					this->set((HX_("defaultOpponentStrumY",0e,e1,d7,f1) + 2),0);
            				}
HXLINE( 163)				{
HXLINE( 164)					this->set((HX_("defaultPlayerStrumX",91,a3,83,89) + 3),0);
HXLINE( 165)					this->set((HX_("defaultPlayerStrumY",92,a3,83,89) + 3),0);
HXLINE( 166)					this->set((HX_("defaultOpponentStrumX",0d,e1,d7,f1) + 3),0);
HXLINE( 167)					this->set((HX_("defaultOpponentStrumY",0e,e1,d7,f1) + 3),0);
            				}
            			}
HXLINE( 171)			this->set(HX_("defaultBoyfriendX",cf,cb,cd,d0),game->BF_X);
HXLINE( 172)			this->set(HX_("defaultBoyfriendY",d0,cb,cd,d0),game->BF_Y);
HXLINE( 173)			this->set(HX_("defaultOpponentX",1a,17,e2,6b),game->DAD_X);
HXLINE( 174)			this->set(HX_("defaultOpponentY",1b,17,e2,6b),game->DAD_Y);
HXLINE( 175)			this->set(HX_("defaultGirlfriendX",1d,56,56,66),game->GF_X);
HXLINE( 176)			this->set(HX_("defaultGirlfriendY",1e,56,56,66),game->GF_Y);
HXLINE( 178)			 ::Dynamic _hx_tmp8;
HXDLIN( 178)			if (::hx::IsNotNull( game->boyfriend )) {
HXLINE( 178)				_hx_tmp8 = game->boyfriend->curCharacter;
            			}
            			else {
HXLINE( 178)				_hx_tmp8 =  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic));
            			}
HXDLIN( 178)			this->set(HX_("boyfriendName",d5,c4,d2,4c),_hx_tmp8);
HXLINE( 179)			 ::Dynamic _hx_tmp9;
HXDLIN( 179)			if (::hx::IsNotNull( game->dad )) {
HXLINE( 179)				_hx_tmp9 = game->dad->curCharacter;
            			}
            			else {
HXLINE( 179)				_hx_tmp9 =  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic));
            			}
HXDLIN( 179)			this->set(HX_("dadName",32,04,eb,ce),_hx_tmp9);
HXLINE( 180)			 ::Dynamic _hx_tmp10;
HXDLIN( 180)			if (::hx::IsNotNull( game->gf )) {
HXLINE( 180)				_hx_tmp10 = game->gf->curCharacter;
            			}
            			else {
HXLINE( 180)				_hx_tmp10 =  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic));
            			}
HXDLIN( 180)			this->set(HX_("gfName",0a,f4,79,1d),_hx_tmp10);
            		}
HXLINE( 184)		this->set(HX_("downscroll",ef,45,d4,4f),::backend::ClientPrefs_obj::data->downScroll);
HXLINE( 185)		this->set(HX_("middlescroll",22,59,c4,2d),::backend::ClientPrefs_obj::data->middleScroll);
HXLINE( 186)		this->set(HX_("framerate",8d,e5,4b,4e),::backend::ClientPrefs_obj::data->framerate);
HXLINE( 187)		this->set(HX_("ghostTapping",c6,6a,da,10),::backend::ClientPrefs_obj::data->ghostTapping);
HXLINE( 188)		this->set(HX_("hideHud",15,b9,3c,b7),::backend::ClientPrefs_obj::data->hideHud);
HXLINE( 189)		this->set(HX_("timeBarType",a0,5d,bb,01),::backend::ClientPrefs_obj::data->timeBarType);
HXLINE( 190)		this->set(HX_("scoreZoom",85,53,bc,e0),::backend::ClientPrefs_obj::data->scoreZoom);
HXLINE( 191)		this->set(HX_("cameraZoomOnBeat",ad,fc,ca,a9),::backend::ClientPrefs_obj::data->camZooms);
HXLINE( 192)		this->set(HX_("flashingLights",af,15,62,da),::backend::ClientPrefs_obj::data->flashing);
HXLINE( 193)		this->set(HX_("noteOffset",25,a5,53,fe),::backend::ClientPrefs_obj::data->noteOffset);
HXLINE( 194)		this->set(HX_("healthBarAlpha",47,c9,a0,80),::backend::ClientPrefs_obj::data->healthBarAlpha);
HXLINE( 195)		this->set(HX_("noResetButton",60,f2,dd,d8),::backend::ClientPrefs_obj::data->noReset);
HXLINE( 196)		this->set(HX_("lowQuality",8b,52,27,3e),::backend::ClientPrefs_obj::data->lowQuality);
HXLINE( 197)		this->set(HX_("shadersEnabled",73,5c,87,d4),::backend::ClientPrefs_obj::data->shaders);
HXLINE( 198)		this->set(HX_("scriptName",f6,4d,e0,41),scriptName1->__get(0));
HXLINE( 199)		this->set(HX_("currentModDirectory",24,ad,ec,de),::backend::Mods_obj::currentModDirectory);
HXLINE( 202)		this->set(HX_("noteSkin",8f,3b,88,5b),::backend::ClientPrefs_obj::data->noteSkin);
HXLINE( 203)		this->set(HX_("noteSkinPostfix",a6,45,54,1d),::objects::Note_obj::getNoteSkinPostfix());
HXLINE( 204)		this->set(HX_("splashSkin",84,03,e1,a1),::backend::ClientPrefs_obj::data->splashSkin);
HXLINE( 205)		this->set(HX_("splashSkinPostfix",51,96,f9,c5),::objects::NoteSplash_obj::getSplashSkinPostfix());
HXLINE( 206)		this->set(HX_("splashAlpha",77,20,7a,a6),::backend::ClientPrefs_obj::data->splashAlpha);
HXLINE( 209)		this->set(HX_("buildTarget",1f,d9,5d,d7),::psychlua::LuaUtils_obj::getBuildTarget());
HXLINE( 212)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,game) HXARGC(0)
            			::Array< ::String > _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_212_new)
HXLINE( 213)				::Array< ::String > runningScripts = ::Array_obj< ::String >::__new(0);
HXLINE( 214)				{
HXLINE( 214)					int _g = 0;
HXDLIN( 214)					::Array< ::Dynamic> _g1 = game->luaArray;
HXDLIN( 214)					while((_g < _g1->length)){
HXLINE( 214)						 ::psychlua::FunkinLua script = _g1->__get(_g).StaticCast<  ::psychlua::FunkinLua >();
HXDLIN( 214)						_g = (_g + 1);
HXLINE( 215)						runningScripts->push(script->scriptName);
            					}
            				}
HXLINE( 217)				return runningScripts;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 212)			 cpp::Reference<lua_State> l = this->lua;
HXDLIN( 212)			::llua::Lua_helper_obj::callbacks->set(HX_("getRunningScripts",ff,b2,36,24), ::Dynamic(new _hx_Closure_0(game)));
HXDLIN( 212)			linc::callbacks::add_callback_function(l,HX_("getRunningScripts",ff,b2,36,24));
            		}
HXLINE( 220)		this->addLocalCallback(HX_("setOnScripts",a7,74,de,28), ::Dynamic(new _hx_Closure_1(game,scriptName1)));
HXLINE( 225)		this->addLocalCallback(HX_("setOnHScript",32,79,a7,5c), ::Dynamic(new _hx_Closure_2(game,scriptName1)));
HXLINE( 230)		this->addLocalCallback(HX_("setOnLuas",bc,a5,ed,49), ::Dynamic(new _hx_Closure_3(game,scriptName1)));
HXLINE( 236)		this->addLocalCallback(HX_("callOnScripts",2b,78,9a,06), ::Dynamic(new _hx_Closure_4(game,scriptName1)));
HXLINE( 241)		this->addLocalCallback(HX_("callOnLuas",b8,07,76,15), ::Dynamic(new _hx_Closure_5(game,scriptName1)));
HXLINE( 246)		this->addLocalCallback(HX_("callOnHScript",b6,7c,63,3a), ::Dynamic(new _hx_Closure_6(game,scriptName1)));
HXLINE( 252)		{
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_7, ::states::PlayState,game, ::psychlua::FunkinLua,_gthis) HXARGC(3)
            			 ::Dynamic _hx_run(::String luaFile,::String funcName,::cpp::VirtualArray args){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_252_new)
HXLINE( 253)				if (::hx::IsNull( args )) {
HXLINE( 254)					args = ::cpp::VirtualArray_obj::__new(0);
            				}
HXLINE( 257)				::String luaPath = _gthis->findScript(luaFile,null());
HXLINE( 258)				if (::hx::IsNotNull( luaPath )) {
HXLINE( 259)					int _g = 0;
HXDLIN( 259)					::Array< ::Dynamic> _g1 = game->luaArray;
HXDLIN( 259)					while((_g < _g1->length)){
HXLINE( 259)						 ::psychlua::FunkinLua luaInstance = _g1->__get(_g).StaticCast<  ::psychlua::FunkinLua >();
HXDLIN( 259)						_g = (_g + 1);
HXLINE( 260)						if ((luaInstance->scriptName == luaPath)) {
HXLINE( 261)							return luaInstance->call(funcName,args);
            						}
            					}
            				}
HXLINE( 263)				return null();
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE( 252)			 cpp::Reference<lua_State> l1 = this->lua;
HXDLIN( 252)			::llua::Lua_helper_obj::callbacks->set(HX_("callScript",49,25,90,72), ::Dynamic(new _hx_Closure_7(game,_gthis)));
HXDLIN( 252)			linc::callbacks::add_callback_function(l1,HX_("callScript",49,25,90,72));
            		}
HXLINE( 265)		{
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_8, ::states::PlayState,game, ::psychlua::FunkinLua,_gthis) HXARGC(1)
            			bool _hx_run(::String scriptFile){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_265_new)
HXLINE( 266)				::String luaPath = _gthis->findScript(scriptFile,null());
HXLINE( 267)				if (::hx::IsNotNull( luaPath )) {
HXLINE( 269)					int _g = 0;
HXDLIN( 269)					::Array< ::Dynamic> _g1 = game->luaArray;
HXDLIN( 269)					while((_g < _g1->length)){
HXLINE( 269)						 ::psychlua::FunkinLua luaInstance = _g1->__get(_g).StaticCast<  ::psychlua::FunkinLua >();
HXDLIN( 269)						_g = (_g + 1);
HXLINE( 270)						if ((luaInstance->scriptName == luaPath)) {
HXLINE( 271)							return true;
            						}
            					}
            				}
HXLINE( 275)				::String hscriptPath = _gthis->findScript(scriptFile,HX_(".hx",be,42,23,00));
HXLINE( 276)				if (::hx::IsNotNull( hscriptPath )) {
HXLINE( 278)					int _g2 = 0;
HXDLIN( 278)					::Array< ::Dynamic> _g3 = game->hscriptArray;
HXDLIN( 278)					while((_g2 < _g3->length)){
HXLINE( 278)						 ::psychlua::HScript hscriptInstance = _g3->__get(_g2).StaticCast<  ::psychlua::HScript >();
HXDLIN( 278)						_g2 = (_g2 + 1);
HXLINE( 279)						if ((hscriptInstance->origin == hscriptPath)) {
HXLINE( 280)							return true;
            						}
            					}
            				}
HXLINE( 283)				return false;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 265)			 cpp::Reference<lua_State> l2 = this->lua;
HXDLIN( 265)			::llua::Lua_helper_obj::callbacks->set(HX_("isRunning",35,eb,67,ef), ::Dynamic(new _hx_Closure_8(game,_gthis)));
HXDLIN( 265)			linc::callbacks::add_callback_function(l2,HX_("isRunning",35,eb,67,ef));
            		}
HXLINE( 286)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_9) HXARGC(2)
            			 ::Dynamic _hx_run(::String varName, ::Dynamic value){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_286_new)
HXLINE( 287)				{
HXLINE( 287)					::Dynamic this1 = ::backend::MusicBeatState_obj::getVariables();
HXDLIN( 287)					( ( ::haxe::ds::StringMap)(this1) )->set(varName,::psychlua::ReflectionFunctions_obj::parseSingleInstance(value));
            				}
HXLINE( 288)				return value;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 286)			 cpp::Reference<lua_State> l3 = this->lua;
HXDLIN( 286)			::llua::Lua_helper_obj::callbacks->set(HX_("setVar",65,6c,71,6f), ::Dynamic(new _hx_Closure_9()));
HXDLIN( 286)			linc::callbacks::add_callback_function(l3,HX_("setVar",65,6c,71,6f));
            		}
HXLINE( 290)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_10) HXARGC(1)
            			 ::Dynamic _hx_run(::String varName){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_291_new)
HXLINE( 291)				return ::backend::MusicBeatState_obj::getVariables()->get(varName);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 290)			 cpp::Reference<lua_State> l4 = this->lua;
HXDLIN( 290)			::llua::Lua_helper_obj::callbacks->set(HX_("getVar",f1,17,29,a3), ::Dynamic(new _hx_Closure_10()));
HXDLIN( 290)			linc::callbacks::add_callback_function(l4,HX_("getVar",f1,17,29,a3));
            		}
HXLINE( 294)		{
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_11, ::states::PlayState,game, ::psychlua::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String luaFile, ::Dynamic __o_ignoreAlreadyRunning){
            		 ::Dynamic ignoreAlreadyRunning = __o_ignoreAlreadyRunning;
            		if (::hx::IsNull(__o_ignoreAlreadyRunning)) ignoreAlreadyRunning = false;
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_294_new)
HXLINE( 295)				::String luaPath = _gthis->findScript(luaFile,null());
HXLINE( 296)				if (::hx::IsNotNull( luaPath )) {
HXLINE( 298)					if (!(( (bool)(ignoreAlreadyRunning) ))) {
HXLINE( 299)						int _g = 0;
HXDLIN( 299)						::Array< ::Dynamic> _g1 = game->luaArray;
HXDLIN( 299)						while((_g < _g1->length)){
HXLINE( 299)							 ::psychlua::FunkinLua luaInstance = _g1->__get(_g).StaticCast<  ::psychlua::FunkinLua >();
HXDLIN( 299)							_g = (_g + 1);
HXLINE( 300)							if ((luaInstance->scriptName == luaPath)) {
HXLINE( 302)								::psychlua::FunkinLua_obj::luaTrace(((HX_("addLuaScript: The script \"",24,83,49,8c) + luaPath) + HX_("\" is already running!",c2,b4,3c,35)),null(),null(),null());
HXLINE( 303)								return;
            							}
            						}
            					}
HXLINE( 306)					 ::psychlua::FunkinLua_obj::__alloc( HX_CTX ,luaPath);
HXLINE( 307)					return;
            				}
HXLINE( 309)				::psychlua::FunkinLua_obj::luaTrace(HX_("addLuaScript: Script doesn't exist!",55,15,bb,80),false,false,-65536);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 294)			 cpp::Reference<lua_State> l5 = this->lua;
HXDLIN( 294)			::llua::Lua_helper_obj::callbacks->set(HX_("addLuaScript",82,57,d1,5e), ::Dynamic(new _hx_Closure_11(game,_gthis)));
HXDLIN( 294)			linc::callbacks::add_callback_function(l5,HX_("addLuaScript",82,57,d1,5e));
            		}
HXLINE( 311)		{
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_12, ::states::PlayState,game, ::psychlua::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String scriptFile, ::Dynamic __o_ignoreAlreadyRunning){
            		 ::Dynamic ignoreAlreadyRunning = __o_ignoreAlreadyRunning;
            		if (::hx::IsNull(__o_ignoreAlreadyRunning)) ignoreAlreadyRunning = false;
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_311_new)
HXLINE( 313)				::String scriptPath = _gthis->findScript(scriptFile,HX_(".hx",be,42,23,00));
HXLINE( 314)				if (::hx::IsNotNull( scriptPath )) {
HXLINE( 316)					if (!(( (bool)(ignoreAlreadyRunning) ))) {
HXLINE( 317)						int _g = 0;
HXDLIN( 317)						::Array< ::Dynamic> _g1 = game->hscriptArray;
HXDLIN( 317)						while((_g < _g1->length)){
HXLINE( 317)							 ::psychlua::HScript script = _g1->__get(_g).StaticCast<  ::psychlua::HScript >();
HXDLIN( 317)							_g = (_g + 1);
HXLINE( 318)							if ((script->origin == scriptPath)) {
HXLINE( 320)								::psychlua::FunkinLua_obj::luaTrace(((HX_("addHScript: The script \"",14,1c,a0,c8) + scriptPath) + HX_("\" is already running!",c2,b4,3c,35)),null(),null(),null());
HXLINE( 321)								return;
            							}
            						}
            					}
HXLINE( 324)					::states::PlayState_obj::instance->initHScript(scriptPath);
HXLINE( 325)					return;
            				}
HXLINE( 327)				::psychlua::FunkinLua_obj::luaTrace(HX_("addHScript: Script doesn't exist!",65,de,a1,86),false,false,-65536);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 311)			 cpp::Reference<lua_State> l6 = this->lua;
HXDLIN( 311)			::llua::Lua_helper_obj::callbacks->set(HX_("addHScript",72,2c,37,c8), ::Dynamic(new _hx_Closure_12(game,_gthis)));
HXDLIN( 311)			linc::callbacks::add_callback_function(l6,HX_("addHScript",72,2c,37,c8));
            		}
HXLINE( 332)		{
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_13, ::states::PlayState,game, ::psychlua::FunkinLua,_gthis) HXARGC(1)
            			bool _hx_run(::String luaFile){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_332_new)
HXLINE( 333)				::String luaPath = _gthis->findScript(luaFile,null());
HXLINE( 334)				if (::hx::IsNotNull( luaPath )) {
HXLINE( 336)					bool foundAny = false;
HXLINE( 337)					{
HXLINE( 337)						int _g = 0;
HXDLIN( 337)						::Array< ::Dynamic> _g1 = game->luaArray;
HXDLIN( 337)						while((_g < _g1->length)){
HXLINE( 337)							 ::psychlua::FunkinLua luaInstance = _g1->__get(_g).StaticCast<  ::psychlua::FunkinLua >();
HXDLIN( 337)							_g = (_g + 1);
HXLINE( 339)							if ((luaInstance->scriptName == luaPath)) {
HXLINE( 341)								::haxe::Log_obj::trace((HX_("Closing lua script ",82,37,87,e1) + luaPath),::hx::SourceInfo(HX_("source/psychlua/FunkinLua.hx",f5,9a,41,5d),341,HX_("psychlua.FunkinLua",96,1b,92,ca),HX_("new",60,d0,53,00)));
HXLINE( 342)								luaInstance->stop();
HXLINE( 343)								foundAny = true;
            							}
            						}
            					}
HXLINE( 346)					if (foundAny) {
HXLINE( 346)						return true;
            					}
            				}
HXLINE( 349)				::psychlua::FunkinLua_obj::luaTrace(((HX_("removeLuaScript: Script ",d0,c8,cc,ea) + luaFile) + HX_(" isn't running!",b1,3e,e9,40)),false,false,-65536);
HXLINE( 350)				return false;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 332)			 cpp::Reference<lua_State> l7 = this->lua;
HXDLIN( 332)			::llua::Lua_helper_obj::callbacks->set(HX_("removeLuaScript",ff,d0,9b,a0), ::Dynamic(new _hx_Closure_13(game,_gthis)));
HXDLIN( 332)			linc::callbacks::add_callback_function(l7,HX_("removeLuaScript",ff,d0,9b,a0));
            		}
HXLINE( 352)		{
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_14, ::states::PlayState,game, ::psychlua::FunkinLua,_gthis) HXARGC(1)
            			bool _hx_run(::String scriptFile){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_352_new)
HXLINE( 354)				::String scriptPath = _gthis->findScript(scriptFile,HX_(".hx",be,42,23,00));
HXLINE( 355)				if (::hx::IsNotNull( scriptPath )) {
HXLINE( 357)					bool foundAny = false;
HXLINE( 358)					{
HXLINE( 358)						int _g = 0;
HXDLIN( 358)						::Array< ::Dynamic> _g1 = game->hscriptArray;
HXDLIN( 358)						while((_g < _g1->length)){
HXLINE( 358)							 ::psychlua::HScript script = _g1->__get(_g).StaticCast<  ::psychlua::HScript >();
HXDLIN( 358)							_g = (_g + 1);
HXLINE( 360)							if ((script->origin == scriptPath)) {
HXLINE( 362)								::haxe::Log_obj::trace((HX_("Closing hscript ",f8,6e,fd,36) + scriptPath),::hx::SourceInfo(HX_("source/psychlua/FunkinLua.hx",f5,9a,41,5d),362,HX_("psychlua.FunkinLua",96,1b,92,ca),HX_("new",60,d0,53,00)));
HXLINE( 363)								script->destroy();
HXLINE( 364)								foundAny = true;
            							}
            						}
            					}
HXLINE( 367)					if (foundAny) {
HXLINE( 367)						return true;
            					}
            				}
HXLINE( 370)				::psychlua::FunkinLua_obj::luaTrace(((HX_("removeHScript: Script ",20,47,ea,02) + scriptFile) + HX_(" isn't running!",b1,3e,e9,40)),false,false,-65536);
HXLINE( 371)				return false;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 352)			 cpp::Reference<lua_State> l8 = this->lua;
HXDLIN( 352)			::llua::Lua_helper_obj::callbacks->set(HX_("removeHScript",af,5c,67,39), ::Dynamic(new _hx_Closure_14(game,_gthis)));
HXDLIN( 352)			linc::callbacks::add_callback_function(l8,HX_("removeHScript",af,5c,67,39));
            		}
HXLINE( 377)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_15, ::states::PlayState,game) HXARGC(2)
            			void _hx_run(::String name, ::Dynamic __o_difficultyNum){
            		 ::Dynamic difficultyNum = __o_difficultyNum;
            		if (::hx::IsNull(__o_difficultyNum)) difficultyNum = -1;
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_377_new)
HXLINE( 378)				bool _hx_tmp;
HXDLIN( 378)				if (::hx::IsNotNull( name )) {
HXLINE( 378)					_hx_tmp = (name.length < 1);
            				}
            				else {
HXLINE( 378)					_hx_tmp = true;
            				}
HXDLIN( 378)				if (_hx_tmp) {
HXLINE( 379)					name = ::backend::Song_obj::loadedSongName;
            				}
HXLINE( 380)				if (::hx::IsEq( difficultyNum,-1 )) {
HXLINE( 381)					difficultyNum = ::states::PlayState_obj::storyDifficulty;
            				}
HXLINE( 383)				::String poop = ::backend::Highscore_obj::formatSong(name,( (int)(difficultyNum) ));
HXLINE( 384)				::backend::Song_obj::loadFromJson(poop,name);
HXLINE( 385)				::states::PlayState_obj::storyDifficulty = ( (int)(difficultyNum) );
HXLINE( 386)				::flixel::FlxG_obj::game->_state->persistentUpdate = false;
HXLINE( 387)				::backend::MusicBeatState_obj::switchState(::states::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::states::PlayState_obj::__alloc( HX_CTX )) ),false,true));
HXLINE( 389)				::flixel::FlxG_obj::sound->music->pause();
HXLINE( 390)				::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE( 391)				bool _hx_tmp1;
HXDLIN( 391)				if (::hx::IsNotNull( game )) {
HXLINE( 391)					_hx_tmp1 = ::hx::IsNotNull( game->vocals );
            				}
            				else {
HXLINE( 391)					_hx_tmp1 = false;
            				}
HXDLIN( 391)				if (_hx_tmp1) {
HXLINE( 393)					game->vocals->pause();
HXLINE( 394)					game->vocals->set_volume(( (Float)(0) ));
            				}
HXLINE( 396)				::flixel::FlxG_obj::camera->set_followLerp(( (Float)(0) ));
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 377)			 cpp::Reference<lua_State> l9 = this->lua;
HXDLIN( 377)			::llua::Lua_helper_obj::callbacks->set(HX_("loadSong",1b,f5,f7,bc), ::Dynamic(new _hx_Closure_15(game)));
HXDLIN( 377)			linc::callbacks::add_callback_function(l9,HX_("loadSong",1b,f5,f7,bc));
            		}
HXLINE( 399)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_16) HXARGC(4)
            			void _hx_run(::String variable,::String image, ::Dynamic __o_gridX, ::Dynamic __o_gridY){
            		 ::Dynamic gridX = __o_gridX;
            		if (::hx::IsNull(__o_gridX)) gridX = 0;
            		 ::Dynamic gridY = __o_gridY;
            		if (::hx::IsNull(__o_gridY)) gridY = 0;
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_399_new)
HXLINE( 400)				::Array< ::String > split = variable.split(HX_(".",2e,00,00,00));
HXLINE( 401)				 ::flixel::FlxSprite spr = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getObjectDirectly(split->__get(0),null())) );
HXLINE( 402)				bool animated;
HXDLIN( 402)				if (::hx::IsEq( gridX,0 )) {
HXLINE( 402)					animated = ::hx::IsNotEq( gridY,0 );
            				}
            				else {
HXLINE( 402)					animated = true;
            				}
HXLINE( 404)				if ((split->length > 1)) {
HXLINE( 405)					 ::Dynamic this1 = ::psychlua::LuaUtils_obj::getPropertyLoop(split,null(),null());
HXDLIN( 405)					spr = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getVarInArray(this1,split->__get((split->length - 1)),null())) );
            				}
HXLINE( 408)				bool _hx_tmp;
HXDLIN( 408)				bool _hx_tmp1;
HXDLIN( 408)				if (::hx::IsNotNull( spr )) {
HXLINE( 408)					_hx_tmp1 = ::hx::IsNotNull( image );
            				}
            				else {
HXLINE( 408)					_hx_tmp1 = false;
            				}
HXDLIN( 408)				if (_hx_tmp1) {
HXLINE( 408)					_hx_tmp = (image.length > 0);
            				}
            				else {
HXLINE( 408)					_hx_tmp = false;
            				}
HXDLIN( 408)				if (_hx_tmp) {
HXLINE( 410)					spr->loadGraphic(::backend::Paths_obj::image(image,null(),null()),animated,gridX,gridY,null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 399)			 cpp::Reference<lua_State> l10 = this->lua;
HXDLIN( 399)			::llua::Lua_helper_obj::callbacks->set(HX_("loadGraphic",22,19,a5,44), ::Dynamic(new _hx_Closure_16()));
HXDLIN( 399)			linc::callbacks::add_callback_function(l10,HX_("loadGraphic",22,19,a5,44));
            		}
HXLINE( 413)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_17) HXARGC(3)
            			void _hx_run(::String variable,::String image,::String __o_spriteType){
            		::String spriteType = __o_spriteType;
            		if (::hx::IsNull(__o_spriteType)) spriteType = HX_("auto",6f,df,76,40);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_413_new)
HXLINE( 414)				::Array< ::String > split = variable.split(HX_(".",2e,00,00,00));
HXLINE( 415)				 ::flixel::FlxSprite spr = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getObjectDirectly(split->__get(0),null())) );
HXLINE( 416)				if ((split->length > 1)) {
HXLINE( 417)					 ::Dynamic this1 = ::psychlua::LuaUtils_obj::getPropertyLoop(split,null(),null());
HXDLIN( 417)					spr = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getVarInArray(this1,split->__get((split->length - 1)),null())) );
            				}
HXLINE( 420)				bool _hx_tmp;
HXDLIN( 420)				bool _hx_tmp1;
HXDLIN( 420)				if (::hx::IsNotNull( spr )) {
HXLINE( 420)					_hx_tmp1 = ::hx::IsNotNull( image );
            				}
            				else {
HXLINE( 420)					_hx_tmp1 = false;
            				}
HXDLIN( 420)				if (_hx_tmp1) {
HXLINE( 420)					_hx_tmp = (image.length > 0);
            				}
            				else {
HXLINE( 420)					_hx_tmp = false;
            				}
HXDLIN( 420)				if (_hx_tmp) {
HXLINE( 422)					::psychlua::LuaUtils_obj::loadFrames(spr,image,spriteType);
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 413)			 cpp::Reference<lua_State> l11 = this->lua;
HXDLIN( 413)			::llua::Lua_helper_obj::callbacks->set(HX_("loadFrames",6c,de,b0,61), ::Dynamic(new _hx_Closure_17()));
HXDLIN( 413)			linc::callbacks::add_callback_function(l11,HX_("loadFrames",6c,de,b0,61));
            		}
HXLINE( 425)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_18) HXARGC(2)
            			void _hx_run(::String variable,::Array< ::String > images){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_425_new)
HXLINE( 426)				::Array< ::String > split = variable.split(HX_(".",2e,00,00,00));
HXLINE( 427)				 ::flixel::FlxSprite spr = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getObjectDirectly(split->__get(0),null())) );
HXLINE( 428)				if ((split->length > 1)) {
HXLINE( 429)					 ::Dynamic this1 = ::psychlua::LuaUtils_obj::getPropertyLoop(split,null(),null());
HXDLIN( 429)					spr = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getVarInArray(this1,split->__get((split->length - 1)),null())) );
            				}
HXLINE( 432)				bool _hx_tmp;
HXDLIN( 432)				bool _hx_tmp1;
HXDLIN( 432)				if (::hx::IsNotNull( spr )) {
HXLINE( 432)					_hx_tmp1 = ::hx::IsNotNull( images );
            				}
            				else {
HXLINE( 432)					_hx_tmp1 = false;
            				}
HXDLIN( 432)				if (_hx_tmp1) {
HXLINE( 432)					_hx_tmp = (images->length > 0);
            				}
            				else {
HXLINE( 432)					_hx_tmp = false;
            				}
HXDLIN( 432)				if (_hx_tmp) {
HXLINE( 434)					spr->set_frames(::backend::Paths_obj::getMultiAtlas(images,null(),null()));
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 425)			 cpp::Reference<lua_State> l12 = this->lua;
HXDLIN( 425)			::llua::Lua_helper_obj::callbacks->set(HX_("loadMultipleFrames",9c,56,94,58), ::Dynamic(new _hx_Closure_18()));
HXDLIN( 425)			linc::callbacks::add_callback_function(l12,HX_("loadMultipleFrames",9c,56,94,58));
            		}
HXLINE( 439)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_19) HXARGC(2)
            			int _hx_run(::String obj,::String group){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_439_new)
HXLINE( 440)				 ::flixel::FlxBasic leObj = ( ( ::flixel::FlxBasic)(::psychlua::LuaUtils_obj::getObjectDirectly(obj,null())) );
HXLINE( 441)				if (::hx::IsNotNull( leObj )) {
HXLINE( 443)					if (::hx::IsNotNull( group )) {
HXLINE( 445)						 ::Dynamic groupOrArray = ::Reflect_obj::getProperty(::psychlua::LuaUtils_obj::getTargetInstance(),group);
HXLINE( 446)						if (::hx::IsNotNull( groupOrArray )) {
HXLINE( 448)							 ::ValueType _g = ::Type_obj::_hx_typeof(groupOrArray);
HXDLIN( 448)							if ((_g->_hx_getIndex() == 6)) {
HXLINE( 450)								if (::hx::IsPointerEq( _g->_hx_getObject(0).StaticCast< ::hx::Class >(),::hx::ArrayBase::__mClass )) {
HXLINE( 451)									return ( (int)(groupOrArray->__Field(HX_("indexOf",c9,48,bf,e0),::hx::paccDynamic)(leObj)) );
            								}
            								else {
HXLINE( 453)									return ( (int)(::Reflect_obj::getProperty(groupOrArray,HX_("members",d9,2c,70,1a))->__Field(HX_("indexOf",c9,48,bf,e0),::hx::paccDynamic)(leObj)) );
            								}
            							}
            							else {
HXLINE( 453)								return ( (int)(::Reflect_obj::getProperty(groupOrArray,HX_("members",d9,2c,70,1a))->__Field(HX_("indexOf",c9,48,bf,e0),::hx::paccDynamic)(leObj)) );
            							}
            						}
            						else {
HXLINE( 458)							::psychlua::FunkinLua_obj::luaTrace(((HX_("getObjectOrder: Group ",a0,2c,15,20) + group) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE( 459)							return -1;
            						}
            					}
HXLINE( 462)					 ::Dynamic groupOrArray1;
HXDLIN( 462)					if (::hx::IsNotNull( ::psychlua::CustomSubstate_obj::instance )) {
HXLINE( 462)						groupOrArray1 = ::psychlua::CustomSubstate_obj::instance;
            					}
            					else {
HXLINE( 462)						groupOrArray1 = ::psychlua::LuaUtils_obj::getTargetInstance();
            					}
HXLINE( 463)					return ( (int)( ::Dynamic(groupOrArray1->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__Field(HX_("indexOf",c9,48,bf,e0),::hx::paccDynamic)(leObj)) );
            				}
HXLINE( 465)				::psychlua::FunkinLua_obj::luaTrace(((HX_("getObjectOrder: Object ",02,eb,c9,ed) + obj) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE( 466)				return -1;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 439)			 cpp::Reference<lua_State> l13 = this->lua;
HXDLIN( 439)			::llua::Lua_helper_obj::callbacks->set(HX_("getObjectOrder",59,60,ee,2b), ::Dynamic(new _hx_Closure_19()));
HXDLIN( 439)			linc::callbacks::add_callback_function(l13,HX_("getObjectOrder",59,60,ee,2b));
            		}
HXLINE( 468)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_20) HXARGC(3)
            			void _hx_run(::String obj,int position,::String group){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_468_new)
HXLINE( 469)				 ::flixel::FlxBasic leObj = ( ( ::flixel::FlxBasic)(::psychlua::LuaUtils_obj::getObjectDirectly(obj,null())) );
HXLINE( 470)				if (::hx::IsNotNull( leObj )) {
HXLINE( 472)					if (::hx::IsNotNull( group )) {
HXLINE( 474)						 ::Dynamic groupOrArray = ::Reflect_obj::getProperty(::psychlua::LuaUtils_obj::getTargetInstance(),group);
HXLINE( 475)						if (::hx::IsNotNull( groupOrArray )) {
HXLINE( 477)							 ::ValueType _g = ::Type_obj::_hx_typeof(groupOrArray);
HXDLIN( 477)							if ((_g->_hx_getIndex() == 6)) {
HXLINE( 479)								if (::hx::IsPointerEq( _g->_hx_getObject(0).StaticCast< ::hx::Class >(),::hx::ArrayBase::__mClass )) {
HXLINE( 480)									groupOrArray->__Field(HX_("remove",44,9c,88,04),::hx::paccDynamic)(leObj);
HXLINE( 481)									groupOrArray->__Field(HX_("insert",39,43,dd,9d),::hx::paccDynamic)(position,leObj);
            								}
            								else {
HXLINE( 483)									groupOrArray->__Field(HX_("remove",44,9c,88,04),::hx::paccDynamic)(leObj,true);
HXLINE( 484)									groupOrArray->__Field(HX_("insert",39,43,dd,9d),::hx::paccDynamic)(position,leObj);
            								}
            							}
            							else {
HXLINE( 483)								groupOrArray->__Field(HX_("remove",44,9c,88,04),::hx::paccDynamic)(leObj,true);
HXLINE( 484)								groupOrArray->__Field(HX_("insert",39,43,dd,9d),::hx::paccDynamic)(position,leObj);
            							}
            						}
            						else {
HXLINE( 487)							::psychlua::FunkinLua_obj::luaTrace(((HX_("setObjectOrder: Group ",14,a9,c0,53) + group) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
            						}
            					}
            					else {
HXLINE( 491)						 ::Dynamic groupOrArray1;
HXDLIN( 491)						if (::hx::IsNotNull( ::psychlua::CustomSubstate_obj::instance )) {
HXLINE( 491)							groupOrArray1 = ::psychlua::CustomSubstate_obj::instance;
            						}
            						else {
HXLINE( 491)							groupOrArray1 = ::psychlua::LuaUtils_obj::getTargetInstance();
            						}
HXLINE( 492)						groupOrArray1->__Field(HX_("remove",44,9c,88,04),::hx::paccDynamic)(leObj,true);
HXLINE( 493)						groupOrArray1->__Field(HX_("insert",39,43,dd,9d),::hx::paccDynamic)(position,leObj);
            					}
HXLINE( 495)					return;
            				}
HXLINE( 497)				::psychlua::FunkinLua_obj::luaTrace(((HX_("setObjectOrder: Object ",0e,54,2b,f0) + obj) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 468)			 cpp::Reference<lua_State> l14 = this->lua;
HXDLIN( 468)			::llua::Lua_helper_obj::callbacks->set(HX_("setObjectOrder",cd,48,0e,4c), ::Dynamic(new _hx_Closure_20()));
HXDLIN( 468)			linc::callbacks::add_callback_function(l14,HX_("setObjectOrder",cd,48,0e,4c));
            		}
HXLINE( 501)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_27, ::states::PlayState,game) HXARGC(5)
            			::String _hx_run(::String tag,::String vars, ::Dynamic values,Float duration, ::Dynamic options){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_501_new)
HXLINE( 502)				 ::Dynamic penisExam = ::psychlua::LuaUtils_obj::tweenPrepare(tag,vars);
HXLINE( 503)				if (::hx::IsNotNull( penisExam )) {
HXLINE( 505)					if (::hx::IsNotNull( values )) {
HXLINE( 507)						 ::Dynamic myOptions = ::psychlua::LuaUtils_obj::getLuaTween(options);
HXLINE( 508)						if (::hx::IsNotNull( tag )) {
HXLINE( 510)							 ::haxe::ds::StringMap variables = ::backend::MusicBeatState_obj::getVariables();
HXLINE( 511)							::String originalTag = (HX_("tween_",94,73,24,29) + ::psychlua::LuaUtils_obj::formatVariable(tag));
HXLINE( 512)							{
HXLINE( 512)								 ::Dynamic value;
HXDLIN( 512)								if (::hx::IsNotNull( myOptions )) {
            									HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_21, ::states::PlayState,game, ::Dynamic,myOptions,::String,vars,::String,originalTag) HXARGC(1)
            									void _hx_run( ::flixel::tweens::FlxTween twn){
            										HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_519_new)
HXLINE( 519)										if (::hx::IsNotNull( myOptions->__Field(HX_("onUpdate",88,7c,b2,66),::hx::paccDynamic) )) {
HXLINE( 519)											game->callOnLuas(( (::String)(myOptions->__Field(HX_("onUpdate",88,7c,b2,66),::hx::paccDynamic)) ),::cpp::VirtualArray_obj::__new(2)->init(0,originalTag)->init(1,vars),null(),null(),null());
            										}
            									}
            									HX_END_LOCAL_FUNC1((void))

            									HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_22, ::states::PlayState,game, ::Dynamic,myOptions,::String,vars,::String,originalTag) HXARGC(1)
            									void _hx_run( ::flixel::tweens::FlxTween twn){
            										HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_522_new)
HXLINE( 522)										if (::hx::IsNotNull( myOptions->__Field(HX_("onStart",c3,12,49,1a),::hx::paccDynamic) )) {
HXLINE( 522)											game->callOnLuas(( (::String)(myOptions->__Field(HX_("onStart",c3,12,49,1a),::hx::paccDynamic)) ),::cpp::VirtualArray_obj::__new(2)->init(0,originalTag)->init(1,vars),null(),null(),null());
            										}
            									}
            									HX_END_LOCAL_FUNC1((void))

            									HX_BEGIN_LOCAL_FUNC_S6(::hx::LocalFunc,_hx_Closure_23, ::states::PlayState,game, ::Dynamic,myOptions,::String,tag,::String,vars,::String,originalTag, ::haxe::ds::StringMap,variables) HXARGC(1)
            									void _hx_run( ::flixel::tweens::FlxTween twn){
            										HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_524_new)
HXLINE( 525)										bool value;
HXDLIN( 525)										if ((twn->type != 8)) {
HXLINE( 525)											value = (twn->type == 16);
            										}
            										else {
HXLINE( 525)											value = true;
            										}
HXDLIN( 525)										if (value) {
HXLINE( 525)											variables->remove(tag);
            										}
HXLINE( 526)										if (::hx::IsNotNull( myOptions->__Field(HX_("onComplete",f8,d4,7e,5d),::hx::paccDynamic) )) {
HXLINE( 526)											game->callOnLuas(( (::String)(myOptions->__Field(HX_("onComplete",f8,d4,7e,5d),::hx::paccDynamic)) ),::cpp::VirtualArray_obj::__new(2)->init(0,originalTag)->init(1,vars),null(),null(),null());
            										}
            									}
            									HX_END_LOCAL_FUNC1((void))

HXLINE( 512)									value =  ::Dynamic(::hx::Anon_obj::Create(7)
            										->setFixed(0,HX_("startDelay",c1,af,3d,f3), ::Dynamic(myOptions->__Field(HX_("startDelay",c1,af,3d,f3),::hx::paccDynamic)))
            										->setFixed(1,HX_("loopDelay",7f,f6,d2,04), ::Dynamic(myOptions->__Field(HX_("loopDelay",7f,f6,d2,04),::hx::paccDynamic)))
            										->setFixed(2,HX_("onStart",c3,12,49,1a), ::Dynamic(new _hx_Closure_22(game,myOptions,vars,originalTag)))
            										->setFixed(3,HX_("ease",ee,8b,0c,43), ::Dynamic(myOptions->__Field(HX_("ease",ee,8b,0c,43),::hx::paccDynamic)))
            										->setFixed(4,HX_("type",ba,f2,08,4d), ::Dynamic(myOptions->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)))
            										->setFixed(5,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_23(game,myOptions,tag,vars,originalTag,variables)))
            										->setFixed(6,HX_("onUpdate",88,7c,b2,66), ::Dynamic(new _hx_Closure_21(game,myOptions,vars,originalTag))));
            								}
            								else {
HXLINE( 512)									value = null();
            								}
HXDLIN( 512)								 ::Dynamic value1 = ::flixel::tweens::FlxTween_obj::tween(penisExam,values,duration,value);
HXDLIN( 512)								variables->set(tag,value1);
            							}
HXLINE( 529)							return tag;
            						}
            						else {
HXLINE( 531)							 ::Dynamic _hx_tmp;
HXDLIN( 531)							if (::hx::IsNotNull( myOptions )) {
            								HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_24, ::states::PlayState,game, ::Dynamic,myOptions,::String,vars) HXARGC(1)
            								void _hx_run( ::flixel::tweens::FlxTween twn){
            									HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_538_new)
HXLINE( 538)									if (::hx::IsNotNull( myOptions->__Field(HX_("onUpdate",88,7c,b2,66),::hx::paccDynamic) )) {
HXLINE( 538)										game->callOnLuas(( (::String)(myOptions->__Field(HX_("onUpdate",88,7c,b2,66),::hx::paccDynamic)) ),::cpp::VirtualArray_obj::__new(2)->init(0,null())->init(1,vars),null(),null(),null());
            									}
            								}
            								HX_END_LOCAL_FUNC1((void))

            								HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_25, ::states::PlayState,game, ::Dynamic,myOptions,::String,vars) HXARGC(1)
            								void _hx_run( ::flixel::tweens::FlxTween twn){
            									HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_541_new)
HXLINE( 541)									if (::hx::IsNotNull( myOptions->__Field(HX_("onStart",c3,12,49,1a),::hx::paccDynamic) )) {
HXLINE( 541)										game->callOnLuas(( (::String)(myOptions->__Field(HX_("onStart",c3,12,49,1a),::hx::paccDynamic)) ),::cpp::VirtualArray_obj::__new(2)->init(0,null())->init(1,vars),null(),null(),null());
            									}
            								}
            								HX_END_LOCAL_FUNC1((void))

            								HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_26, ::states::PlayState,game, ::Dynamic,myOptions,::String,vars) HXARGC(1)
            								void _hx_run( ::flixel::tweens::FlxTween twn){
            									HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_544_new)
HXLINE( 544)									if (::hx::IsNotNull( myOptions->__Field(HX_("onComplete",f8,d4,7e,5d),::hx::paccDynamic) )) {
HXLINE( 544)										game->callOnLuas(( (::String)(myOptions->__Field(HX_("onComplete",f8,d4,7e,5d),::hx::paccDynamic)) ),::cpp::VirtualArray_obj::__new(2)->init(0,null())->init(1,vars),null(),null(),null());
            									}
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE( 531)								_hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(7)
            									->setFixed(0,HX_("startDelay",c1,af,3d,f3), ::Dynamic(myOptions->__Field(HX_("startDelay",c1,af,3d,f3),::hx::paccDynamic)))
            									->setFixed(1,HX_("loopDelay",7f,f6,d2,04), ::Dynamic(myOptions->__Field(HX_("loopDelay",7f,f6,d2,04),::hx::paccDynamic)))
            									->setFixed(2,HX_("onStart",c3,12,49,1a), ::Dynamic(new _hx_Closure_25(game,myOptions,vars)))
            									->setFixed(3,HX_("ease",ee,8b,0c,43), ::Dynamic(myOptions->__Field(HX_("ease",ee,8b,0c,43),::hx::paccDynamic)))
            									->setFixed(4,HX_("type",ba,f2,08,4d), ::Dynamic(myOptions->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)))
            									->setFixed(5,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_26(game,myOptions,vars)))
            									->setFixed(6,HX_("onUpdate",88,7c,b2,66), ::Dynamic(new _hx_Closure_24(game,myOptions,vars))));
            							}
            							else {
HXLINE( 531)								_hx_tmp = null();
            							}
HXDLIN( 531)							::flixel::tweens::FlxTween_obj::tween(penisExam,values,duration,_hx_tmp);
            						}
            					}
            					else {
HXLINE( 548)						::psychlua::FunkinLua_obj::luaTrace(HX_("startTween: No values on 2nd argument!",99,6c,ce,b6),false,false,-65536);
            					}
            				}
            				else {
HXLINE( 550)					::psychlua::FunkinLua_obj::luaTrace((HX_("startTween: Couldnt find object: ",84,59,1c,fb) + vars),false,false,-65536);
            				}
HXLINE( 551)				return null();
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE( 501)			 cpp::Reference<lua_State> l15 = this->lua;
HXDLIN( 501)			::llua::Lua_helper_obj::callbacks->set(HX_("startTween",a9,82,87,35), ::Dynamic(new _hx_Closure_27(game)));
HXDLIN( 501)			linc::callbacks::add_callback_function(l15,HX_("startTween",a9,82,87,35));
            		}
HXLINE( 554)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_28, ::psychlua::FunkinLua,_gthis) HXARGC(5)
            			::String _hx_run(::String tag,::String vars, ::Dynamic value,Float duration,::String __o_ease){
            		::String ease = __o_ease;
            		if (::hx::IsNull(__o_ease)) ease = HX_("linear",e5,51,a0,ec);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_555_new)
HXLINE( 555)				return _gthis->oldTweenFunction(tag,vars, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("x",78,00,00,00),value)),duration,ease,HX_("doTweenX",78,f9,3b,bd));
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE( 554)			 cpp::Reference<lua_State> l16 = this->lua;
HXDLIN( 554)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenX",78,f9,3b,bd), ::Dynamic(new _hx_Closure_28(_gthis)));
HXDLIN( 554)			linc::callbacks::add_callback_function(l16,HX_("doTweenX",78,f9,3b,bd));
            		}
HXLINE( 557)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_29, ::psychlua::FunkinLua,_gthis) HXARGC(5)
            			::String _hx_run(::String tag,::String vars, ::Dynamic value,Float duration,::String __o_ease){
            		::String ease = __o_ease;
            		if (::hx::IsNull(__o_ease)) ease = HX_("linear",e5,51,a0,ec);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_558_new)
HXLINE( 558)				return _gthis->oldTweenFunction(tag,vars, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("y",79,00,00,00),value)),duration,ease,HX_("doTweenY",79,f9,3b,bd));
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE( 557)			 cpp::Reference<lua_State> l17 = this->lua;
HXDLIN( 557)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenY",79,f9,3b,bd), ::Dynamic(new _hx_Closure_29(_gthis)));
HXDLIN( 557)			linc::callbacks::add_callback_function(l17,HX_("doTweenY",79,f9,3b,bd));
            		}
HXLINE( 560)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_30, ::psychlua::FunkinLua,_gthis) HXARGC(5)
            			::String _hx_run(::String tag,::String vars, ::Dynamic value,Float duration,::String __o_ease){
            		::String ease = __o_ease;
            		if (::hx::IsNull(__o_ease)) ease = HX_("linear",e5,51,a0,ec);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_561_new)
HXLINE( 561)				return _gthis->oldTweenFunction(tag,vars, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("angle",d3,43,e2,22),value)),duration,ease,HX_("doTweenAngle",d3,bc,0e,60));
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE( 560)			 cpp::Reference<lua_State> l18 = this->lua;
HXDLIN( 560)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenAngle",d3,bc,0e,60), ::Dynamic(new _hx_Closure_30(_gthis)));
HXDLIN( 560)			linc::callbacks::add_callback_function(l18,HX_("doTweenAngle",d3,bc,0e,60));
            		}
HXLINE( 563)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_31, ::psychlua::FunkinLua,_gthis) HXARGC(5)
            			::String _hx_run(::String tag,::String vars, ::Dynamic value,Float duration,::String __o_ease){
            		::String ease = __o_ease;
            		if (::hx::IsNull(__o_ease)) ease = HX_("linear",e5,51,a0,ec);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_564_new)
HXLINE( 564)				return _gthis->oldTweenFunction(tag,vars, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),value)),duration,ease,HX_("doTweenAlpha",5e,20,c3,5e));
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE( 563)			 cpp::Reference<lua_State> l19 = this->lua;
HXDLIN( 563)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenAlpha",5e,20,c3,5e), ::Dynamic(new _hx_Closure_31(_gthis)));
HXDLIN( 563)			linc::callbacks::add_callback_function(l19,HX_("doTweenAlpha",5e,20,c3,5e));
            		}
HXLINE( 566)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_32, ::psychlua::FunkinLua,_gthis) HXARGC(5)
            			::String _hx_run(::String tag,::String camera, ::Dynamic value,Float duration,::String __o_ease){
            		::String ease = __o_ease;
            		if (::hx::IsNull(__o_ease)) ease = HX_("linear",e5,51,a0,ec);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_566_new)
HXLINE( 567)				::String _hx_switch_0 = camera.toLowerCase();
            				if (  (_hx_switch_0==HX_("camgame",81,1b,77,e4)) ||  (_hx_switch_0==HX_("game",f2,f3,5e,44)) ){
HXLINE( 568)					camera = HX_("camGame",a1,47,50,cf);
HXDLIN( 568)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==HX_("camhud",08,90,8e,b7)) ||  (_hx_switch_0==HX_("hud",b7,50,4f,00)) ){
HXLINE( 569)					camera = HX_("camHUD",e8,2b,76,b7);
HXDLIN( 569)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==HX_("camother",61,dc,80,ab)) ||  (_hx_switch_0==HX_("other",d0,66,76,36)) ){
HXLINE( 570)					camera = HX_("camOther",41,4c,ae,3e);
HXDLIN( 570)					goto _hx_goto_10;
            				}
            				/* default */{
HXLINE( 572)					 ::flixel::FlxCamera cam = ( ( ::flixel::FlxCamera)(::backend::MusicBeatState_obj::getVariables()->get(camera)) );
HXLINE( 573)					bool _hx_tmp;
HXDLIN( 573)					if (::hx::IsNotNull( cam )) {
HXLINE( 573)						_hx_tmp = !(::Std_obj::isOfType(cam,::hx::ClassOf< ::flixel::FlxCamera >()));
            					}
            					else {
HXLINE( 573)						_hx_tmp = true;
            					}
HXDLIN( 573)					if (_hx_tmp) {
HXLINE( 573)						camera = HX_("camGame",a1,47,50,cf);
            					}
            				}
            				_hx_goto_10:;
HXLINE( 575)				return _gthis->oldTweenFunction(tag,camera, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("zoom",13,a3,f8,50),value)),duration,ease,HX_("doTweenZoom",13,4a,be,e0));
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE( 566)			 cpp::Reference<lua_State> l20 = this->lua;
HXDLIN( 566)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenZoom",13,4a,be,e0), ::Dynamic(new _hx_Closure_32(_gthis)));
HXDLIN( 566)			linc::callbacks::add_callback_function(l20,HX_("doTweenZoom",13,4a,be,e0));
            		}
HXLINE( 577)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_34, ::states::PlayState,game) HXARGC(5)
            			::String _hx_run(::String tag,::String vars,::String targetColor,Float duration,::String __o_ease){
            		::String ease = __o_ease;
            		if (::hx::IsNull(__o_ease)) ease = HX_("linear",e5,51,a0,ec);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_577_new)
HXLINE( 577)				::Array< ::String > tag1 = ::Array_obj< ::String >::__new(1)->init(0,tag);
HXLINE( 578)				 ::Dynamic penisExam = ::psychlua::LuaUtils_obj::tweenPrepare(tag1->__get(0),vars);
HXLINE( 579)				if (::hx::IsNotNull( penisExam )) {
HXLINE( 580)					int curColor = ( (int)(penisExam->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic)) );
HXLINE( 581)					{
HXLINE( 581)						Float Value = ( (Float)(penisExam->__Field(HX_("alpha",5e,a7,96,21),::hx::paccDynamic)) );
HXDLIN( 581)						{
HXLINE( 581)							int Value1 = ::Math_obj::round((Value * ( (Float)(255) )));
HXDLIN( 581)							curColor = (curColor & 16777215);
HXDLIN( 581)							int curColor1;
HXDLIN( 581)							if ((Value1 > 255)) {
HXLINE( 581)								curColor1 = 255;
            							}
            							else {
HXLINE( 581)								if ((Value1 < 0)) {
HXLINE( 581)									curColor1 = 0;
            								}
            								else {
HXLINE( 581)									curColor1 = Value1;
            								}
            							}
HXDLIN( 581)							curColor = (curColor | (curColor1 << 24));
            						}
            					}
HXLINE( 583)					if (::hx::IsNotNull( tag1->__get(0) )) {
HXLINE( 585)						::String originalTag = tag1->__get(0);
HXLINE( 586)						tag1[0] = ::psychlua::LuaUtils_obj::formatVariable((HX_("tween_",94,73,24,29) + tag1->__get(0)));
HXLINE( 587)						 ::haxe::ds::StringMap variables = ::backend::MusicBeatState_obj::getVariables();
HXLINE( 588)						{
            							HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_33, ::states::PlayState,game,::String,vars,::String,originalTag,::Array< ::String >,tag1, ::haxe::ds::StringMap,variables) HXARGC(1)
            							void _hx_run( ::flixel::tweens::FlxTween twn){
            								HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_590_new)
HXLINE( 591)								variables->remove(tag1->__get(0));
HXLINE( 592)								if (::hx::IsNotNull( game )) {
HXLINE( 592)									game->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(2)->init(0,originalTag)->init(1,vars),null(),null(),null());
            								}
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE( 588)							 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN( 588)							::String color = ::StringTools_obj::trim(hideChars->split(targetColor)->join(HX_("",00,00,00,00)));
HXDLIN( 588)							if (::StringTools_obj::startsWith(color,HX_("0x",48,2a,00,00))) {
HXLINE(  59)								color = color.substring((color.length - 6),null());
            							}
HXLINE( 588)							 ::Dynamic colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color);
HXDLIN( 588)							if (::hx::IsNull( colorNum )) {
HXLINE(  62)								colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color));
            							}
HXLINE( 588)							int value;
HXDLIN( 588)							if (::hx::IsNotNull( colorNum )) {
HXLINE( 588)								value = ( (int)(colorNum) );
            							}
            							else {
HXLINE( 588)								value = -1;
            							}
HXDLIN( 588)							 ::Dynamic value1 = ::flixel::tweens::FlxTween_obj::color(( ( ::flixel::FlxSprite)(penisExam) ),duration,curColor,value, ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("ease",ee,8b,0c,43),::psychlua::LuaUtils_obj::getTweenEaseByString(ease))
            								->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_33(game,vars,originalTag,tag1,variables)))));
HXDLIN( 588)							variables->set(tag1->__get(0),value1);
            						}
HXLINE( 595)						return tag1->__get(0);
            					}
            					else {
HXLINE( 597)						 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN( 597)						::String color1 = ::StringTools_obj::trim(hideChars1->split(targetColor)->join(HX_("",00,00,00,00)));
HXDLIN( 597)						if (::StringTools_obj::startsWith(color1,HX_("0x",48,2a,00,00))) {
HXLINE(  59)							color1 = color1.substring((color1.length - 6),null());
            						}
HXLINE( 597)						 ::Dynamic colorNum1 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color1);
HXDLIN( 597)						if (::hx::IsNull( colorNum1 )) {
HXLINE(  62)							colorNum1 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color1));
            						}
HXLINE( 597)						int _hx_tmp;
HXDLIN( 597)						if (::hx::IsNotNull( colorNum1 )) {
HXLINE( 597)							_hx_tmp = ( (int)(colorNum1) );
            						}
            						else {
HXLINE( 597)							_hx_tmp = -1;
            						}
HXDLIN( 597)						::flixel::tweens::FlxTween_obj::color(( ( ::flixel::FlxSprite)(penisExam) ),duration,curColor,_hx_tmp, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::psychlua::LuaUtils_obj::getTweenEaseByString(ease))));
            					}
            				}
            				else {
HXLINE( 599)					::psychlua::FunkinLua_obj::luaTrace((HX_("doTweenColor: Couldnt find object: ",0a,a9,a2,6b) + vars),false,false,-65536);
            				}
HXLINE( 600)				return null();
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE( 577)			 cpp::Reference<lua_State> l21 = this->lua;
HXDLIN( 577)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenColor",63,ea,88,87), ::Dynamic(new _hx_Closure_34(game)));
HXDLIN( 577)			linc::callbacks::add_callback_function(l21,HX_("doTweenColor",63,ea,88,87));
            		}
HXLINE( 604)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_35, ::psychlua::FunkinLua,_gthis) HXARGC(5)
            			::String _hx_run(::String tag,int note, ::Dynamic value,Float duration,::String __o_ease){
            		::String ease = __o_ease;
            		if (::hx::IsNull(__o_ease)) ease = HX_("linear",e5,51,a0,ec);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_605_new)
HXLINE( 605)				return _gthis->noteTweenFunction(tag,note, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("x",78,00,00,00),value)),duration,ease);
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE( 604)			 cpp::Reference<lua_State> l22 = this->lua;
HXDLIN( 604)			::llua::Lua_helper_obj::callbacks->set(HX_("noteTweenX",1f,81,38,c7), ::Dynamic(new _hx_Closure_35(_gthis)));
HXDLIN( 604)			linc::callbacks::add_callback_function(l22,HX_("noteTweenX",1f,81,38,c7));
            		}
HXLINE( 607)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_36, ::psychlua::FunkinLua,_gthis) HXARGC(5)
            			::String _hx_run(::String tag,int note, ::Dynamic value,Float duration,::String __o_ease){
            		::String ease = __o_ease;
            		if (::hx::IsNull(__o_ease)) ease = HX_("linear",e5,51,a0,ec);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_608_new)
HXLINE( 608)				return _gthis->noteTweenFunction(tag,note, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("y",79,00,00,00),value)),duration,ease);
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE( 607)			 cpp::Reference<lua_State> l23 = this->lua;
HXDLIN( 607)			::llua::Lua_helper_obj::callbacks->set(HX_("noteTweenY",20,81,38,c7), ::Dynamic(new _hx_Closure_36(_gthis)));
HXDLIN( 607)			linc::callbacks::add_callback_function(l23,HX_("noteTweenY",20,81,38,c7));
            		}
HXLINE( 610)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_37, ::psychlua::FunkinLua,_gthis) HXARGC(5)
            			::String _hx_run(::String tag,int note, ::Dynamic value,Float duration,::String __o_ease){
            		::String ease = __o_ease;
            		if (::hx::IsNull(__o_ease)) ease = HX_("linear",e5,51,a0,ec);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_611_new)
HXLINE( 611)				return _gthis->noteTweenFunction(tag,note, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("angle",d3,43,e2,22),value)),duration,ease);
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE( 610)			 cpp::Reference<lua_State> l24 = this->lua;
HXDLIN( 610)			::llua::Lua_helper_obj::callbacks->set(HX_("noteTweenAngle",fa,a3,45,58), ::Dynamic(new _hx_Closure_37(_gthis)));
HXDLIN( 610)			linc::callbacks::add_callback_function(l24,HX_("noteTweenAngle",fa,a3,45,58));
            		}
HXLINE( 613)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_38, ::psychlua::FunkinLua,_gthis) HXARGC(5)
            			::String _hx_run(::String tag,int note, ::Dynamic value,Float duration,::String __o_ease){
            		::String ease = __o_ease;
            		if (::hx::IsNull(__o_ease)) ease = HX_("linear",e5,51,a0,ec);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_614_new)
HXLINE( 614)				return _gthis->noteTweenFunction(tag,note, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),value)),duration,ease);
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE( 613)			 cpp::Reference<lua_State> l25 = this->lua;
HXDLIN( 613)			::llua::Lua_helper_obj::callbacks->set(HX_("noteTweenAlpha",85,07,fa,56), ::Dynamic(new _hx_Closure_38(_gthis)));
HXDLIN( 613)			linc::callbacks::add_callback_function(l25,HX_("noteTweenAlpha",85,07,fa,56));
            		}
HXLINE( 616)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_39, ::psychlua::FunkinLua,_gthis) HXARGC(5)
            			::String _hx_run(::String tag,int note, ::Dynamic value,Float duration,::String __o_ease){
            		::String ease = __o_ease;
            		if (::hx::IsNull(__o_ease)) ease = HX_("linear",e5,51,a0,ec);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_617_new)
HXLINE( 617)				return _gthis->noteTweenFunction(tag,note, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("direction",3f,62,40,10),value)),duration,ease);
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE( 616)			 cpp::Reference<lua_State> l26 = this->lua;
HXDLIN( 616)			::llua::Lua_helper_obj::callbacks->set(HX_("noteTweenDirection",e6,61,74,1f), ::Dynamic(new _hx_Closure_39(_gthis)));
HXDLIN( 616)			linc::callbacks::add_callback_function(l26,HX_("noteTweenDirection",e6,61,74,1f));
            		}
HXLINE( 619)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_40) HXARGC(1)
            			bool _hx_run(::String __o_button){
            		::String button = __o_button;
            		if (::hx::IsNull(__o_button)) button = HX_("left",07,08,b0,47);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_619_new)
HXLINE( 620)				bool click = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
HXLINE( 621)				::String _hx_switch_1 = ::StringTools_obj::trim(button).toLowerCase();
            				if (  (_hx_switch_1==HX_("middle",55,d3,5e,4c)) ){
HXLINE( 624)					click = (::flixel::FlxG_obj::mouse->_middleButton->current == 2);
HXDLIN( 624)					goto _hx_goto_11;
            				}
            				if (  (_hx_switch_1==HX_("right",dc,0b,64,e9)) ){
HXLINE( 626)					click = (::flixel::FlxG_obj::mouse->_rightButton->current == 2);
HXDLIN( 626)					goto _hx_goto_11;
            				}
            				_hx_goto_11:;
HXLINE( 628)				return click;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 619)			 cpp::Reference<lua_State> l27 = this->lua;
HXDLIN( 619)			::llua::Lua_helper_obj::callbacks->set(HX_("mouseClicked",02,c7,d1,db), ::Dynamic(new _hx_Closure_40()));
HXDLIN( 619)			linc::callbacks::add_callback_function(l27,HX_("mouseClicked",02,c7,d1,db));
            		}
HXLINE( 630)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_41) HXARGC(1)
            			bool _hx_run(::String __o_button){
            		::String button = __o_button;
            		if (::hx::IsNull(__o_button)) button = HX_("left",07,08,b0,47);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_630_new)
HXLINE( 631)				 ::flixel::input::mouse::FlxMouseButton _this = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN( 631)				bool press;
HXDLIN( 631)				if ((_this->current != 1)) {
HXLINE( 631)					press = (_this->current == 2);
            				}
            				else {
HXLINE( 631)					press = true;
            				}
HXLINE( 632)				::String _hx_switch_2 = ::StringTools_obj::trim(button).toLowerCase();
            				if (  (_hx_switch_2==HX_("middle",55,d3,5e,4c)) ){
HXLINE( 635)					 ::flixel::input::mouse::FlxMouseButton _this1 = ::flixel::FlxG_obj::mouse->_middleButton;
HXDLIN( 635)					if ((_this1->current != 1)) {
HXLINE( 635)						press = (_this1->current == 2);
            					}
            					else {
HXLINE( 635)						press = true;
            					}
HXDLIN( 635)					goto _hx_goto_12;
            				}
            				if (  (_hx_switch_2==HX_("right",dc,0b,64,e9)) ){
HXLINE( 637)					 ::flixel::input::mouse::FlxMouseButton _this2 = ::flixel::FlxG_obj::mouse->_rightButton;
HXDLIN( 637)					if ((_this2->current != 1)) {
HXLINE( 637)						press = (_this2->current == 2);
            					}
            					else {
HXLINE( 637)						press = true;
            					}
HXDLIN( 637)					goto _hx_goto_12;
            				}
            				_hx_goto_12:;
HXLINE( 639)				return press;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 630)			 cpp::Reference<lua_State> l28 = this->lua;
HXDLIN( 630)			::llua::Lua_helper_obj::callbacks->set(HX_("mousePressed",fd,22,8c,1b), ::Dynamic(new _hx_Closure_41()));
HXDLIN( 630)			linc::callbacks::add_callback_function(l28,HX_("mousePressed",fd,22,8c,1b));
            		}
HXLINE( 641)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_42) HXARGC(1)
            			bool _hx_run(::String __o_button){
            		::String button = __o_button;
            		if (::hx::IsNull(__o_button)) button = HX_("left",07,08,b0,47);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_641_new)
HXLINE( 642)				bool released = (::flixel::FlxG_obj::mouse->_leftButton->current == -1);
HXLINE( 643)				::String _hx_switch_3 = ::StringTools_obj::trim(button).toLowerCase();
            				if (  (_hx_switch_3==HX_("middle",55,d3,5e,4c)) ){
HXLINE( 646)					released = (::flixel::FlxG_obj::mouse->_middleButton->current == -1);
HXDLIN( 646)					goto _hx_goto_13;
            				}
            				if (  (_hx_switch_3==HX_("right",dc,0b,64,e9)) ){
HXLINE( 648)					released = (::flixel::FlxG_obj::mouse->_rightButton->current == -1);
HXDLIN( 648)					goto _hx_goto_13;
            				}
            				_hx_goto_13:;
HXLINE( 650)				return released;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 641)			 cpp::Reference<lua_State> l29 = this->lua;
HXDLIN( 641)			::llua::Lua_helper_obj::callbacks->set(HX_("mouseReleased",02,88,e8,05), ::Dynamic(new _hx_Closure_42()));
HXDLIN( 641)			linc::callbacks::add_callback_function(l29,HX_("mouseReleased",02,88,e8,05));
            		}
HXLINE( 653)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_43) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_653_new)
HXLINE( 653)				::psychlua::LuaUtils_obj::cancelTween(tag);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 653)			 cpp::Reference<lua_State> l30 = this->lua;
HXDLIN( 653)			::llua::Lua_helper_obj::callbacks->set(HX_("cancelTween",91,12,99,b7), ::Dynamic(new _hx_Closure_43()));
HXDLIN( 653)			linc::callbacks::add_callback_function(l30,HX_("cancelTween",91,12,99,b7));
            		}
HXLINE( 655)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_45, ::states::PlayState,game) HXARGC(3)
            			::String _hx_run(::String tag, ::Dynamic __o_time, ::Dynamic __o_loops){
            		Float time = __o_time.Default(1);
            		int loops = __o_loops.Default(1);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_655_new)
HXLINE( 655)				::Array< ::String > tag1 = ::Array_obj< ::String >::__new(1)->init(0,tag);
HXLINE( 656)				::psychlua::LuaUtils_obj::cancelTimer(tag1->__get(0));
HXLINE( 657)				 ::haxe::ds::StringMap variables = ::backend::MusicBeatState_obj::getVariables();
HXLINE( 659)				::String originalTag = tag1->__get(0);
HXLINE( 660)				tag1[0] = ::psychlua::LuaUtils_obj::formatVariable((HX_("timer_",fa,0c,d2,1e) + tag1->__get(0)));
HXLINE( 661)				{
            					HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_44, ::states::PlayState,game,::String,originalTag,::Array< ::String >,tag1, ::haxe::ds::StringMap,variables) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_662_new)
HXLINE( 663)						if (tmr->finished) {
HXLINE( 663)							variables->remove(tag1->__get(0));
            						}
HXLINE( 664)						game->callOnLuas(HX_("onTimerCompleted",85,2e,4a,47),::cpp::VirtualArray_obj::__new(3)->init(0,originalTag)->init(1,tmr->loops)->init(2,(tmr->loops - tmr->_loopsCounter)),null(),null(),null());
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 661)					 ::Dynamic value =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(time, ::Dynamic(new _hx_Closure_44(game,originalTag,tag1,variables)),loops);
HXDLIN( 661)					variables->set(tag1->__get(0),value);
            				}
HXLINE( 667)				return tag1->__get(0);
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE( 655)			 cpp::Reference<lua_State> l31 = this->lua;
HXDLIN( 655)			::llua::Lua_helper_obj::callbacks->set(HX_("runTimer",7a,f8,6a,18), ::Dynamic(new _hx_Closure_45(game)));
HXDLIN( 655)			linc::callbacks::add_callback_function(l31,HX_("runTimer",7a,f8,6a,18));
            		}
HXLINE( 669)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_46) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_669_new)
HXLINE( 669)				::psychlua::LuaUtils_obj::cancelTimer(tag);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 669)			 cpp::Reference<lua_State> l32 = this->lua;
HXDLIN( 669)			::llua::Lua_helper_obj::callbacks->set(HX_("cancelTimer",eb,27,5e,ae), ::Dynamic(new _hx_Closure_46()));
HXDLIN( 669)			linc::callbacks::add_callback_function(l32,HX_("cancelTimer",eb,27,5e,ae));
            		}
HXLINE( 672)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_47, ::states::PlayState,game) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_672_new)
HXLINE( 673)				 ::states::PlayState game1 = game;
HXDLIN( 673)				game1->songScore = (game1->songScore + value);
HXLINE( 674)				game->RecalculateRating(null(),null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 672)			 cpp::Reference<lua_State> l33 = this->lua;
HXDLIN( 672)			::llua::Lua_helper_obj::callbacks->set(HX_("addScore",71,99,36,f2), ::Dynamic(new _hx_Closure_47(game)));
HXDLIN( 672)			linc::callbacks::add_callback_function(l33,HX_("addScore",71,99,36,f2));
            		}
HXLINE( 676)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_48, ::states::PlayState,game) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_676_new)
HXLINE( 677)				 ::states::PlayState game1 = game;
HXDLIN( 677)				game1->songMisses = (game1->songMisses + value);
HXLINE( 678)				game->RecalculateRating(null(),null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 676)			 cpp::Reference<lua_State> l34 = this->lua;
HXDLIN( 676)			::llua::Lua_helper_obj::callbacks->set(HX_("addMisses",6b,97,78,0e), ::Dynamic(new _hx_Closure_48(game)));
HXDLIN( 676)			linc::callbacks::add_callback_function(l34,HX_("addMisses",6b,97,78,0e));
            		}
HXLINE( 680)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_49, ::states::PlayState,game) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_680_new)
HXLINE( 681)				 ::states::PlayState game1 = game;
HXDLIN( 681)				game1->songHits = (game1->songHits + value);
HXLINE( 682)				game->RecalculateRating(null(),null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 680)			 cpp::Reference<lua_State> l35 = this->lua;
HXDLIN( 680)			::llua::Lua_helper_obj::callbacks->set(HX_("addHits",81,85,4b,81), ::Dynamic(new _hx_Closure_49(game)));
HXDLIN( 680)			linc::callbacks::add_callback_function(l35,HX_("addHits",81,85,4b,81));
            		}
HXLINE( 684)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_50, ::states::PlayState,game) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_684_new)
HXLINE( 685)				game->songScore = value;
HXLINE( 686)				game->RecalculateRating(null(),null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 684)			 cpp::Reference<lua_State> l36 = this->lua;
HXDLIN( 684)			::llua::Lua_helper_obj::callbacks->set(HX_("setScore",50,dc,0d,87), ::Dynamic(new _hx_Closure_50(game)));
HXDLIN( 684)			linc::callbacks::add_callback_function(l36,HX_("setScore",50,dc,0d,87));
            		}
HXLINE( 688)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_51, ::states::PlayState,game) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_688_new)
HXLINE( 689)				game->songMisses = value;
HXLINE( 690)				game->RecalculateRating(null(),null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 688)			 cpp::Reference<lua_State> l37 = this->lua;
HXDLIN( 688)			::llua::Lua_helper_obj::callbacks->set(HX_("setMisses",ac,d7,fb,b5), ::Dynamic(new _hx_Closure_51(game)));
HXDLIN( 688)			linc::callbacks::add_callback_function(l37,HX_("setMisses",ac,d7,fb,b5));
            		}
HXLINE( 692)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_52, ::states::PlayState,game) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_692_new)
HXLINE( 693)				game->songHits = value;
HXLINE( 694)				game->RecalculateRating(null(),null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 692)			 cpp::Reference<lua_State> l38 = this->lua;
HXDLIN( 692)			::llua::Lua_helper_obj::callbacks->set(HX_("setHits",82,83,92,0a), ::Dynamic(new _hx_Closure_52(game)));
HXDLIN( 692)			linc::callbacks::add_callback_function(l38,HX_("setHits",82,83,92,0a));
            		}
HXLINE( 696)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_53, ::states::PlayState,game) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		Float value = __o_value.Default(1);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_696_new)
HXLINE( 696)				game->set_health(value);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 696)			 cpp::Reference<lua_State> l39 = this->lua;
HXDLIN( 696)			::llua::Lua_helper_obj::callbacks->set(HX_("setHealth",de,9d,ad,5c), ::Dynamic(new _hx_Closure_53(game)));
HXDLIN( 696)			linc::callbacks::add_callback_function(l39,HX_("setHealth",de,9d,ad,5c));
            		}
HXLINE( 697)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_54, ::states::PlayState,game) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		Float value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_697_new)
HXLINE( 697)				game->set_health((game->health + value));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 697)			 cpp::Reference<lua_State> l40 = this->lua;
HXDLIN( 697)			::llua::Lua_helper_obj::callbacks->set(HX_("addHealth",9d,5d,2a,b5), ::Dynamic(new _hx_Closure_54(game)));
HXDLIN( 697)			linc::callbacks::add_callback_function(l40,HX_("addHealth",9d,5d,2a,b5));
            		}
HXLINE( 698)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_55, ::states::PlayState,game) HXARGC(0)
            			Float _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_698_new)
HXLINE( 698)				return game->health;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 698)			 cpp::Reference<lua_State> l41 = this->lua;
HXDLIN( 698)			::llua::Lua_helper_obj::callbacks->set(HX_("getHealth",d2,b1,5c,79), ::Dynamic(new _hx_Closure_55(game)));
HXDLIN( 698)			linc::callbacks::add_callback_function(l41,HX_("getHealth",d2,b1,5c,79));
            		}
HXLINE( 701)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_56) HXARGC(1)
            			 ::Dynamic _hx_run(::String color){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_701_new)
HXLINE( 701)				return ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 701)			 cpp::Reference<lua_State> l42 = this->lua;
HXDLIN( 701)			::llua::Lua_helper_obj::callbacks->set(HX_("FlxColor",b1,7b,36,07), ::Dynamic(new _hx_Closure_56()));
HXDLIN( 701)			linc::callbacks::add_callback_function(l42,HX_("FlxColor",b1,7b,36,07));
            		}
HXLINE( 702)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_57) HXARGC(1)
            			 ::Dynamic _hx_run(::String color){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_702_new)
HXLINE( 702)				return ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 702)			 cpp::Reference<lua_State> l43 = this->lua;
HXDLIN( 702)			::llua::Lua_helper_obj::callbacks->set(HX_("getColorFromName",e2,b2,ae,13), ::Dynamic(new _hx_Closure_57()));
HXDLIN( 702)			linc::callbacks::add_callback_function(l43,HX_("getColorFromName",e2,b2,ae,13));
            		}
HXLINE( 703)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_58) HXARGC(1)
            			 ::Dynamic _hx_run(::String color){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_703_new)
HXLINE( 703)				return ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 703)			 cpp::Reference<lua_State> l44 = this->lua;
HXDLIN( 703)			::llua::Lua_helper_obj::callbacks->set(HX_("getColorFromString",28,fd,a1,56), ::Dynamic(new _hx_Closure_58()));
HXDLIN( 703)			linc::callbacks::add_callback_function(l44,HX_("getColorFromString",28,fd,a1,56));
            		}
HXLINE( 704)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_59) HXARGC(1)
            			 ::Dynamic _hx_run(::String color){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_704_new)
HXLINE( 704)				return ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color));
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 704)			 cpp::Reference<lua_State> l45 = this->lua;
HXDLIN( 704)			::llua::Lua_helper_obj::callbacks->set(HX_("getColorFromHex",24,62,3b,a4), ::Dynamic(new _hx_Closure_59()));
HXDLIN( 704)			linc::callbacks::add_callback_function(l45,HX_("getColorFromHex",24,62,3b,a4));
            		}
HXLINE( 707)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_60, ::states::PlayState,game) HXARGC(2)
            			void _hx_run(::String name,::String type){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_707_new)
HXLINE( 708)				int charType = 0;
HXLINE( 709)				::String _hx_switch_4 = type.toLowerCase();
            				if (  (_hx_switch_4==HX_("dad",47,36,4c,00)) ){
HXLINE( 710)					charType = 1;
HXDLIN( 710)					goto _hx_goto_14;
            				}
            				if (  (_hx_switch_4==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_4==HX_("girlfriend",ba,91,48,98)) ){
HXLINE( 711)					charType = 2;
HXDLIN( 711)					goto _hx_goto_14;
            				}
            				_hx_goto_14:;
HXLINE( 713)				game->addCharacterToList(name,charType);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 707)			 cpp::Reference<lua_State> l46 = this->lua;
HXDLIN( 707)			::llua::Lua_helper_obj::callbacks->set(HX_("addCharacterToList",e1,1e,4c,45), ::Dynamic(new _hx_Closure_60(game)));
HXDLIN( 707)			linc::callbacks::add_callback_function(l46,HX_("addCharacterToList",e1,1e,4c,45));
            		}
HXLINE( 715)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_61) HXARGC(2)
            			void _hx_run(::String name, ::Dynamic __o_allowGPU){
            		 ::Dynamic allowGPU = __o_allowGPU;
            		if (::hx::IsNull(__o_allowGPU)) allowGPU = true;
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_716_new)
HXLINE( 716)				::backend::Paths_obj::image(name,null(),allowGPU);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 715)			 cpp::Reference<lua_State> l47 = this->lua;
HXDLIN( 715)			::llua::Lua_helper_obj::callbacks->set(HX_("precacheImage",9c,8f,57,a3), ::Dynamic(new _hx_Closure_61()));
HXDLIN( 715)			linc::callbacks::add_callback_function(l47,HX_("precacheImage",9c,8f,57,a3));
            		}
HXLINE( 718)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_62) HXARGC(1)
            			void _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_719_new)
HXLINE( 719)				::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + name),null(),true,null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 718)			 cpp::Reference<lua_State> l48 = this->lua;
HXDLIN( 718)			::llua::Lua_helper_obj::callbacks->set(HX_("precacheSound",10,fd,ba,66), ::Dynamic(new _hx_Closure_62()));
HXDLIN( 718)			linc::callbacks::add_callback_function(l48,HX_("precacheSound",10,fd,ba,66));
            		}
HXLINE( 721)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_63) HXARGC(1)
            			void _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_722_new)
HXLINE( 722)				::backend::Paths_obj::returnSound((HX_("music/",ea,bf,1b,3f) + name),null(),true,null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 721)			 cpp::Reference<lua_State> l49 = this->lua;
HXDLIN( 721)			::llua::Lua_helper_obj::callbacks->set(HX_("precacheMusic",e6,40,49,f6), ::Dynamic(new _hx_Closure_63()));
HXDLIN( 721)			linc::callbacks::add_callback_function(l49,HX_("precacheMusic",e6,40,49,f6));
            		}
HXLINE( 726)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_64, ::states::PlayState,game) HXARGC(3)
            			bool _hx_run(::String name,::String __o_value1,::String __o_value2){
            		::String value1 = __o_value1;
            		if (::hx::IsNull(__o_value1)) value1 = HX_("",00,00,00,00);
            		::String value2 = __o_value2;
            		if (::hx::IsNull(__o_value2)) value2 = HX_("",00,00,00,00);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_726_new)
HXLINE( 727)				game->triggerEvent(name,value1,value2,::backend::Conductor_obj::songPosition);
HXLINE( 729)				return true;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE( 726)			 cpp::Reference<lua_State> l50 = this->lua;
HXDLIN( 726)			::llua::Lua_helper_obj::callbacks->set(HX_("triggerEvent",c2,f7,5a,f4), ::Dynamic(new _hx_Closure_64(game)));
HXDLIN( 726)			linc::callbacks::add_callback_function(l50,HX_("triggerEvent",c2,f7,5a,f4));
            		}
HXLINE( 732)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_65, ::states::PlayState,game) HXARGC(0)
            			bool _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_732_new)
HXLINE( 733)				game->startCountdown();
HXLINE( 734)				return true;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 732)			 cpp::Reference<lua_State> l51 = this->lua;
HXDLIN( 732)			::llua::Lua_helper_obj::callbacks->set(HX_("startCountdown",ef,1f,f0,88), ::Dynamic(new _hx_Closure_65(game)));
HXDLIN( 732)			linc::callbacks::add_callback_function(l51,HX_("startCountdown",ef,1f,f0,88));
            		}
HXLINE( 736)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_66, ::states::PlayState,game) HXARGC(0)
            			bool _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_736_new)
HXLINE( 737)				game->KillNotes();
HXLINE( 738)				game->endSong();
HXLINE( 739)				return true;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 736)			 cpp::Reference<lua_State> l52 = this->lua;
HXDLIN( 736)			::llua::Lua_helper_obj::callbacks->set(HX_("endSong",50,dd,7c,2e), ::Dynamic(new _hx_Closure_66(game)));
HXDLIN( 736)			linc::callbacks::add_callback_function(l52,HX_("endSong",50,dd,7c,2e));
            		}
HXLINE( 741)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_67, ::states::PlayState,game) HXARGC(1)
            			bool _hx_run( ::Dynamic __o_skipTransition){
            		 ::Dynamic skipTransition = __o_skipTransition;
            		if (::hx::IsNull(__o_skipTransition)) skipTransition = false;
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_741_new)
HXLINE( 742)				game->persistentUpdate = false;
HXLINE( 743)				::flixel::FlxG_obj::camera->set_followLerp(( (Float)(0) ));
HXLINE( 744)				::substates::PauseSubState_obj::restartSong(skipTransition);
HXLINE( 745)				return true;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 741)			 cpp::Reference<lua_State> l53 = this->lua;
HXDLIN( 741)			::llua::Lua_helper_obj::callbacks->set(HX_("restartSong",44,ab,b8,45), ::Dynamic(new _hx_Closure_67(game)));
HXDLIN( 741)			linc::callbacks::add_callback_function(l53,HX_("restartSong",44,ab,b8,45));
            		}
HXLINE( 747)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_68, ::states::PlayState,game) HXARGC(1)
            			bool _hx_run( ::Dynamic __o_skipTransition){
            		 ::Dynamic skipTransition = __o_skipTransition;
            		if (::hx::IsNull(__o_skipTransition)) skipTransition = false;
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_747_new)
HXLINE( 748)				if (( (bool)(skipTransition) )) {
HXLINE( 750)					::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE( 751)					::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
            				}
HXLINE( 754)				if (::states::PlayState_obj::isStoryMode) {
HXLINE( 755)					::backend::MusicBeatState_obj::switchState( ::states::StoryMenuState_obj::__alloc( HX_CTX ));
            				}
            				else {
HXLINE( 757)					::backend::MusicBeatState_obj::switchState( ::states::FreeplayState_obj::__alloc( HX_CTX ));
            				}
HXLINE( 759)				::backend::DiscordClient_obj::set_clientID(HX_("863222024192262205",be,6e,40,13));
HXLINE( 761)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 761)				_hx_tmp->playMusic(::backend::Paths_obj::returnSound((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)),null(),true,null()),null(),null(),null());
HXLINE( 762)				::states::PlayState_obj::changedDifficulty = false;
HXLINE( 763)				::states::PlayState_obj::chartingMode = false;
HXLINE( 764)				game->transitioning = true;
HXLINE( 765)				::flixel::FlxG_obj::camera->set_followLerp(( (Float)(0) ));
HXLINE( 766)				::backend::Mods_obj::loadTopMod();
HXLINE( 767)				return true;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 747)			 cpp::Reference<lua_State> l54 = this->lua;
HXDLIN( 747)			::llua::Lua_helper_obj::callbacks->set(HX_("exitSong",13,2e,1c,0c), ::Dynamic(new _hx_Closure_68(game)));
HXDLIN( 747)			linc::callbacks::add_callback_function(l54,HX_("exitSong",13,2e,1c,0c));
            		}
HXLINE( 769)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_69) HXARGC(0)
            			Float _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_770_new)
HXLINE( 770)				return ::backend::Conductor_obj::songPosition;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 769)			 cpp::Reference<lua_State> l55 = this->lua;
HXDLIN( 769)			::llua::Lua_helper_obj::callbacks->set(HX_("getSongPosition",54,33,26,b0), ::Dynamic(new _hx_Closure_69()));
HXDLIN( 769)			linc::callbacks::add_callback_function(l55,HX_("getSongPosition",54,33,26,b0));
            		}
HXLINE( 773)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_70, ::states::PlayState,game) HXARGC(1)
            			Float _hx_run(::String type){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_774_new)
HXLINE( 774)				::String _hx_switch_5 = type.toLowerCase();
            				if (  (_hx_switch_5==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_5==HX_("girlfriend",ba,91,48,98)) ){
HXLINE( 778)					return game->gfGroup->x;
HXDLIN( 778)					goto _hx_goto_15;
            				}
            				if (  (_hx_switch_5==HX_("dad",47,36,4c,00)) ||  (_hx_switch_5==HX_("opponent",9d,b9,b8,f8)) ){
HXLINE( 776)					return game->dadGroup->x;
HXDLIN( 776)					goto _hx_goto_15;
            				}
            				/* default */{
HXLINE( 780)					return game->boyfriendGroup->x;
            				}
            				_hx_goto_15:;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 773)			 cpp::Reference<lua_State> l56 = this->lua;
HXDLIN( 773)			::llua::Lua_helper_obj::callbacks->set(HX_("getCharacterX",c5,b4,40,b2), ::Dynamic(new _hx_Closure_70(game)));
HXDLIN( 773)			linc::callbacks::add_callback_function(l56,HX_("getCharacterX",c5,b4,40,b2));
            		}
HXLINE( 783)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_71, ::states::PlayState,game) HXARGC(2)
            			void _hx_run(::String type,Float value){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_784_new)
HXLINE( 784)				::String _hx_switch_6 = type.toLowerCase();
            				if (  (_hx_switch_6==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_6==HX_("girlfriend",ba,91,48,98)) ){
HXLINE( 788)					game->gfGroup->set_x(value);
HXDLIN( 788)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_6==HX_("dad",47,36,4c,00)) ||  (_hx_switch_6==HX_("opponent",9d,b9,b8,f8)) ){
HXLINE( 786)					game->dadGroup->set_x(value);
HXDLIN( 786)					goto _hx_goto_16;
            				}
            				/* default */{
HXLINE( 790)					game->boyfriendGroup->set_x(value);
            				}
            				_hx_goto_16:;
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 783)			 cpp::Reference<lua_State> l57 = this->lua;
HXDLIN( 783)			::llua::Lua_helper_obj::callbacks->set(HX_("setCharacterX",d1,96,46,f7), ::Dynamic(new _hx_Closure_71(game)));
HXDLIN( 783)			linc::callbacks::add_callback_function(l57,HX_("setCharacterX",d1,96,46,f7));
            		}
HXLINE( 793)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_72, ::states::PlayState,game) HXARGC(1)
            			Float _hx_run(::String type){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_794_new)
HXLINE( 794)				::String _hx_switch_7 = type.toLowerCase();
            				if (  (_hx_switch_7==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_7==HX_("girlfriend",ba,91,48,98)) ){
HXLINE( 798)					return game->gfGroup->y;
HXDLIN( 798)					goto _hx_goto_17;
            				}
            				if (  (_hx_switch_7==HX_("dad",47,36,4c,00)) ||  (_hx_switch_7==HX_("opponent",9d,b9,b8,f8)) ){
HXLINE( 796)					return game->dadGroup->y;
HXDLIN( 796)					goto _hx_goto_17;
            				}
            				/* default */{
HXLINE( 800)					return game->boyfriendGroup->y;
            				}
            				_hx_goto_17:;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 793)			 cpp::Reference<lua_State> l58 = this->lua;
HXDLIN( 793)			::llua::Lua_helper_obj::callbacks->set(HX_("getCharacterY",c6,b4,40,b2), ::Dynamic(new _hx_Closure_72(game)));
HXDLIN( 793)			linc::callbacks::add_callback_function(l58,HX_("getCharacterY",c6,b4,40,b2));
            		}
HXLINE( 803)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_73, ::states::PlayState,game) HXARGC(2)
            			void _hx_run(::String type,Float value){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_804_new)
HXLINE( 804)				::String _hx_switch_8 = type.toLowerCase();
            				if (  (_hx_switch_8==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_8==HX_("girlfriend",ba,91,48,98)) ){
HXLINE( 808)					game->gfGroup->set_y(value);
HXDLIN( 808)					goto _hx_goto_18;
            				}
            				if (  (_hx_switch_8==HX_("dad",47,36,4c,00)) ||  (_hx_switch_8==HX_("opponent",9d,b9,b8,f8)) ){
HXLINE( 806)					game->dadGroup->set_y(value);
HXDLIN( 806)					goto _hx_goto_18;
            				}
            				/* default */{
HXLINE( 810)					game->boyfriendGroup->set_y(value);
            				}
            				_hx_goto_18:;
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 803)			 cpp::Reference<lua_State> l59 = this->lua;
HXDLIN( 803)			::llua::Lua_helper_obj::callbacks->set(HX_("setCharacterY",d2,96,46,f7), ::Dynamic(new _hx_Closure_73(game)));
HXDLIN( 803)			linc::callbacks::add_callback_function(l59,HX_("setCharacterY",d2,96,46,f7));
            		}
HXLINE( 813)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_74, ::states::PlayState,game) HXARGC(1)
            			void _hx_run(::String target){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_814_new)
HXLINE( 814)				::String _hx_switch_9 = ::StringTools_obj::trim(target).toLowerCase();
            				if (  (_hx_switch_9==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_9==HX_("girlfriend",ba,91,48,98)) ){
HXLINE( 817)					game->moveCameraToGirlfriend();
HXDLIN( 817)					goto _hx_goto_19;
            				}
            				if (  (_hx_switch_9==HX_("dad",47,36,4c,00)) ||  (_hx_switch_9==HX_("opponent",9d,b9,b8,f8)) ){
HXLINE( 819)					game->moveCamera(true);
HXDLIN( 819)					goto _hx_goto_19;
            				}
            				/* default */{
HXLINE( 821)					game->moveCamera(false);
            				}
            				_hx_goto_19:;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 813)			 cpp::Reference<lua_State> l60 = this->lua;
HXDLIN( 813)			::llua::Lua_helper_obj::callbacks->set(HX_("cameraSetTarget",2e,85,21,cc), ::Dynamic(new _hx_Closure_74(game)));
HXDLIN( 813)			linc::callbacks::add_callback_function(l60,HX_("cameraSetTarget",2e,85,21,cc));
            		}
HXLINE( 825)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_75) HXARGC(2)
            			void _hx_run(Float x,Float y){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_825_new)
HXLINE( 825)				 ::flixel::math::FlxBasePoint this1 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN( 825)				Float y1 = (y - (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )));
HXDLIN( 825)				this1->set_x((x - (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
HXDLIN( 825)				this1->set_y(y1);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 825)			 cpp::Reference<lua_State> l61 = this->lua;
HXDLIN( 825)			::llua::Lua_helper_obj::callbacks->set(HX_("setCameraScroll",54,6f,09,2f), ::Dynamic(new _hx_Closure_75()));
HXDLIN( 825)			linc::callbacks::add_callback_function(l61,HX_("setCameraScroll",54,6f,09,2f));
            		}
HXLINE( 826)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_76, ::states::PlayState,game) HXARGC(2)
            			void _hx_run(Float x,Float y){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_826_new)
HXLINE( 826)				game->camFollow->setPosition(x,y);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 826)			 cpp::Reference<lua_State> l62 = this->lua;
HXDLIN( 826)			::llua::Lua_helper_obj::callbacks->set(HX_("setCameraFollowPoint",78,60,bb,fa), ::Dynamic(new _hx_Closure_76(game)));
HXDLIN( 826)			linc::callbacks::add_callback_function(l62,HX_("setCameraFollowPoint",78,60,bb,fa));
            		}
HXLINE( 827)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_77) HXARGC(2)
            			void _hx_run( ::Dynamic __o_x, ::Dynamic __o_y){
            		 ::Dynamic x = __o_x;
            		if (::hx::IsNull(__o_x)) x = 0;
            		 ::Dynamic y = __o_y;
            		if (::hx::IsNull(__o_y)) y = 0;
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_827_new)
HXLINE( 827)				 ::flixel::math::FlxBasePoint this1 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN( 827)				this1->set_x((this1->x + ( (Float)(x) )));
HXDLIN( 827)				this1->set_y((this1->y + ( (Float)(y) )));
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 827)			 cpp::Reference<lua_State> l63 = this->lua;
HXDLIN( 827)			::llua::Lua_helper_obj::callbacks->set(HX_("addCameraScroll",53,08,a3,96), ::Dynamic(new _hx_Closure_77()));
HXDLIN( 827)			linc::callbacks::add_callback_function(l63,HX_("addCameraScroll",53,08,a3,96));
            		}
HXLINE( 828)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_78, ::states::PlayState,game) HXARGC(2)
            			void _hx_run( ::Dynamic __o_x, ::Dynamic __o_y){
            		 ::Dynamic x = __o_x;
            		if (::hx::IsNull(__o_x)) x = 0;
            		 ::Dynamic y = __o_y;
            		if (::hx::IsNull(__o_y)) y = 0;
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_828_new)
HXLINE( 829)				 ::flixel::FlxObject fh = game->camFollow;
HXDLIN( 829)				fh->set_x((fh->x + x));
HXLINE( 830)				 ::flixel::FlxObject fh1 = game->camFollow;
HXDLIN( 830)				fh1->set_y((fh1->y + y));
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 828)			 cpp::Reference<lua_State> l64 = this->lua;
HXDLIN( 828)			::llua::Lua_helper_obj::callbacks->set(HX_("addCameraFollowPoint",19,cb,5b,9c), ::Dynamic(new _hx_Closure_78(game)));
HXDLIN( 828)			linc::callbacks::add_callback_function(l64,HX_("addCameraFollowPoint",19,cb,5b,9c));
            		}
HXLINE( 832)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_79) HXARGC(0)
            			Float _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_832_new)
HXLINE( 832)				return (::flixel::FlxG_obj::camera->scroll->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )));
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 832)			 cpp::Reference<lua_State> l65 = this->lua;
HXDLIN( 832)			::llua::Lua_helper_obj::callbacks->set(HX_("getCameraScrollX",10,0d,f6,a2), ::Dynamic(new _hx_Closure_79()));
HXDLIN( 832)			linc::callbacks::add_callback_function(l65,HX_("getCameraScrollX",10,0d,f6,a2));
            		}
HXLINE( 833)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_80) HXARGC(0)
            			Float _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_833_new)
HXLINE( 833)				return (::flixel::FlxG_obj::camera->scroll->y + (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )));
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 833)			 cpp::Reference<lua_State> l66 = this->lua;
HXDLIN( 833)			::llua::Lua_helper_obj::callbacks->set(HX_("getCameraScrollY",11,0d,f6,a2), ::Dynamic(new _hx_Closure_80()));
HXDLIN( 833)			linc::callbacks::add_callback_function(l66,HX_("getCameraScrollY",11,0d,f6,a2));
            		}
HXLINE( 834)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_81, ::states::PlayState,game) HXARGC(0)
            			Float _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_834_new)
HXLINE( 834)				return game->camFollow->x;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 834)			 cpp::Reference<lua_State> l67 = this->lua;
HXDLIN( 834)			::llua::Lua_helper_obj::callbacks->set(HX_("getCameraFollowX",2c,8b,46,dc), ::Dynamic(new _hx_Closure_81(game)));
HXDLIN( 834)			linc::callbacks::add_callback_function(l67,HX_("getCameraFollowX",2c,8b,46,dc));
            		}
HXLINE( 835)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_82, ::states::PlayState,game) HXARGC(0)
            			Float _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_835_new)
HXLINE( 835)				return game->camFollow->y;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 835)			 cpp::Reference<lua_State> l68 = this->lua;
HXDLIN( 835)			::llua::Lua_helper_obj::callbacks->set(HX_("getCameraFollowY",2d,8b,46,dc), ::Dynamic(new _hx_Closure_82(game)));
HXDLIN( 835)			linc::callbacks::add_callback_function(l68,HX_("getCameraFollowY",2d,8b,46,dc));
            		}
HXLINE( 837)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_83) HXARGC(3)
            			void _hx_run(::String camera,Float intensity,Float duration){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_838_new)
HXLINE( 838)				::psychlua::LuaUtils_obj::cameraFromString(camera)->shake(intensity,duration,null(),null(),null());
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 837)			 cpp::Reference<lua_State> l69 = this->lua;
HXDLIN( 837)			::llua::Lua_helper_obj::callbacks->set(HX_("cameraShake",e1,d1,62,70), ::Dynamic(new _hx_Closure_83()));
HXDLIN( 837)			linc::callbacks::add_callback_function(l69,HX_("cameraShake",e1,d1,62,70));
            		}
HXLINE( 841)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_84) HXARGC(4)
            			void _hx_run(::String camera,::String color,Float duration,bool forced){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_842_new)
HXLINE( 842)				 ::flixel::FlxCamera _hx_tmp = ::psychlua::LuaUtils_obj::cameraFromString(camera);
HXDLIN( 842)				 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN( 842)				::String color1 = ::StringTools_obj::trim(hideChars->split(color)->join(HX_("",00,00,00,00)));
HXDLIN( 842)				if (::StringTools_obj::startsWith(color1,HX_("0x",48,2a,00,00))) {
HXLINE(  59)					color1 = color1.substring((color1.length - 6),null());
            				}
HXLINE( 842)				 ::Dynamic colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color1);
HXDLIN( 842)				if (::hx::IsNull( colorNum )) {
HXLINE(  62)					colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color1));
            				}
HXLINE( 842)				int _hx_tmp1;
HXDLIN( 842)				if (::hx::IsNotNull( colorNum )) {
HXLINE( 842)					_hx_tmp1 = ( (int)(colorNum) );
            				}
            				else {
HXLINE( 842)					_hx_tmp1 = -1;
            				}
HXDLIN( 842)				_hx_tmp->flash(_hx_tmp1,duration,null(),forced);
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 841)			 cpp::Reference<lua_State> l70 = this->lua;
HXDLIN( 841)			::llua::Lua_helper_obj::callbacks->set(HX_("cameraFlash",cb,28,d2,f6), ::Dynamic(new _hx_Closure_84()));
HXDLIN( 841)			linc::callbacks::add_callback_function(l70,HX_("cameraFlash",cb,28,d2,f6));
            		}
HXLINE( 844)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_85) HXARGC(5)
            			void _hx_run(::String camera,::String color,Float duration,bool forced, ::Dynamic __o_fadeOut){
            		 ::Dynamic fadeOut = __o_fadeOut;
            		if (::hx::IsNull(__o_fadeOut)) fadeOut = false;
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_845_new)
HXLINE( 845)				 ::flixel::FlxCamera _hx_tmp = ::psychlua::LuaUtils_obj::cameraFromString(camera);
HXDLIN( 845)				 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN( 845)				::String color1 = ::StringTools_obj::trim(hideChars->split(color)->join(HX_("",00,00,00,00)));
HXDLIN( 845)				if (::StringTools_obj::startsWith(color1,HX_("0x",48,2a,00,00))) {
HXLINE(  59)					color1 = color1.substring((color1.length - 6),null());
            				}
HXLINE( 845)				 ::Dynamic colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color1);
HXDLIN( 845)				if (::hx::IsNull( colorNum )) {
HXLINE(  62)					colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color1));
            				}
HXLINE( 845)				int _hx_tmp1;
HXDLIN( 845)				if (::hx::IsNotNull( colorNum )) {
HXLINE( 845)					_hx_tmp1 = ( (int)(colorNum) );
            				}
            				else {
HXLINE( 845)					_hx_tmp1 = -1;
            				}
HXDLIN( 845)				_hx_tmp->fade(_hx_tmp1,duration,fadeOut,null(),forced);
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 844)			 cpp::Reference<lua_State> l71 = this->lua;
HXDLIN( 844)			::llua::Lua_helper_obj::callbacks->set(HX_("cameraFade",c1,de,d3,a9), ::Dynamic(new _hx_Closure_85()));
HXDLIN( 844)			linc::callbacks::add_callback_function(l71,HX_("cameraFade",c1,de,d3,a9));
            		}
HXLINE( 847)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_86, ::states::PlayState,game) HXARGC(1)
            			void _hx_run(Float value){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_847_new)
HXLINE( 848)				game->ratingPercent = value;
HXLINE( 849)				game->setOnScripts(HX_("rating",1d,34,8a,bb),game->ratingPercent,null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 847)			 cpp::Reference<lua_State> l72 = this->lua;
HXDLIN( 847)			::llua::Lua_helper_obj::callbacks->set(HX_("setRatingPercent",26,a3,29,ea), ::Dynamic(new _hx_Closure_86(game)));
HXDLIN( 847)			linc::callbacks::add_callback_function(l72,HX_("setRatingPercent",26,a3,29,ea));
            		}
HXLINE( 851)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_87, ::states::PlayState,game) HXARGC(1)
            			void _hx_run(::String value){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_851_new)
HXLINE( 852)				game->ratingName = value;
HXLINE( 853)				game->setOnScripts(HX_("ratingName",08,a5,2b,05),game->ratingName,null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 851)			 cpp::Reference<lua_State> l73 = this->lua;
HXDLIN( 851)			::llua::Lua_helper_obj::callbacks->set(HX_("setRatingName",4a,e3,a3,a6), ::Dynamic(new _hx_Closure_87(game)));
HXDLIN( 851)			linc::callbacks::add_callback_function(l73,HX_("setRatingName",4a,e3,a3,a6));
            		}
HXLINE( 855)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_88, ::states::PlayState,game) HXARGC(1)
            			void _hx_run(::String value){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_855_new)
HXLINE( 856)				game->ratingFC = value;
HXLINE( 857)				game->setOnScripts(HX_("ratingFC",9a,72,95,59),game->ratingFC,null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 855)			 cpp::Reference<lua_State> l74 = this->lua;
HXDLIN( 855)			::llua::Lua_helper_obj::callbacks->set(HX_("setRatingFC",5c,3c,f6,89), ::Dynamic(new _hx_Closure_88(game)));
HXDLIN( 855)			linc::callbacks::add_callback_function(l74,HX_("setRatingFC",5c,3c,f6,89));
            		}
HXLINE( 859)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_89, ::states::PlayState,game) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_859_new)
HXLINE( 859)				game->updateScoreText();
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 859)			 cpp::Reference<lua_State> l75 = this->lua;
HXDLIN( 859)			::llua::Lua_helper_obj::callbacks->set(HX_("updateScoreText",d6,4d,48,2c), ::Dynamic(new _hx_Closure_89(game)));
HXDLIN( 859)			linc::callbacks::add_callback_function(l75,HX_("updateScoreText",d6,4d,48,2c));
            		}
HXLINE( 860)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_90) HXARGC(1)
            			Float _hx_run(::String __o_camera){
            		::String camera = __o_camera;
            		if (::hx::IsNull(__o_camera)) camera = HX_("game",f2,f3,5e,44);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_860_new)
HXLINE( 861)				 ::flixel::FlxCamera cam = ::psychlua::LuaUtils_obj::cameraFromString(camera);
HXLINE( 862)				return ::flixel::FlxG_obj::mouse->getScreenPosition(cam,null())->x;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 860)			 cpp::Reference<lua_State> l76 = this->lua;
HXDLIN( 860)			::llua::Lua_helper_obj::callbacks->set(HX_("getMouseX",c9,d3,64,48), ::Dynamic(new _hx_Closure_90()));
HXDLIN( 860)			linc::callbacks::add_callback_function(l76,HX_("getMouseX",c9,d3,64,48));
            		}
HXLINE( 864)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_91) HXARGC(1)
            			Float _hx_run(::String __o_camera){
            		::String camera = __o_camera;
            		if (::hx::IsNull(__o_camera)) camera = HX_("game",f2,f3,5e,44);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_864_new)
HXLINE( 865)				 ::flixel::FlxCamera cam = ::psychlua::LuaUtils_obj::cameraFromString(camera);
HXLINE( 866)				return ::flixel::FlxG_obj::mouse->getScreenPosition(cam,null())->y;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 864)			 cpp::Reference<lua_State> l77 = this->lua;
HXDLIN( 864)			::llua::Lua_helper_obj::callbacks->set(HX_("getMouseY",ca,d3,64,48), ::Dynamic(new _hx_Closure_91()));
HXDLIN( 864)			linc::callbacks::add_callback_function(l77,HX_("getMouseY",ca,d3,64,48));
            		}
HXLINE( 869)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_92) HXARGC(1)
            			Float _hx_run(::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_869_new)
HXLINE( 870)				::Array< ::String > split = variable.split(HX_(".",2e,00,00,00));
HXLINE( 871)				 ::flixel::FlxObject obj = ( ( ::flixel::FlxObject)(::psychlua::LuaUtils_obj::getObjectDirectly(split->__get(0),null())) );
HXLINE( 872)				if ((split->length > 1)) {
HXLINE( 873)					 ::Dynamic this1 = ::psychlua::LuaUtils_obj::getPropertyLoop(split,null(),null());
HXDLIN( 873)					obj = ( ( ::flixel::FlxObject)(::psychlua::LuaUtils_obj::getVarInArray(this1,split->__get((split->length - 1)),null())) );
            				}
HXLINE( 875)				if (::hx::IsNotNull( obj )) {
HXLINE( 875)					return obj->getMidpoint(null())->x;
            				}
HXLINE( 877)				return ( (Float)(0) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 869)			 cpp::Reference<lua_State> l78 = this->lua;
HXDLIN( 869)			::llua::Lua_helper_obj::callbacks->set(HX_("getMidpointX",1a,96,61,8b), ::Dynamic(new _hx_Closure_92()));
HXDLIN( 869)			linc::callbacks::add_callback_function(l78,HX_("getMidpointX",1a,96,61,8b));
            		}
HXLINE( 879)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_93) HXARGC(1)
            			Float _hx_run(::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_879_new)
HXLINE( 880)				::Array< ::String > split = variable.split(HX_(".",2e,00,00,00));
HXLINE( 881)				 ::flixel::FlxObject obj = ( ( ::flixel::FlxObject)(::psychlua::LuaUtils_obj::getObjectDirectly(split->__get(0),null())) );
HXLINE( 882)				if ((split->length > 1)) {
HXLINE( 883)					 ::Dynamic this1 = ::psychlua::LuaUtils_obj::getPropertyLoop(split,null(),null());
HXDLIN( 883)					obj = ( ( ::flixel::FlxObject)(::psychlua::LuaUtils_obj::getVarInArray(this1,split->__get((split->length - 1)),null())) );
            				}
HXLINE( 885)				if (::hx::IsNotNull( obj )) {
HXLINE( 885)					return obj->getMidpoint(null())->y;
            				}
HXLINE( 887)				return ( (Float)(0) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 879)			 cpp::Reference<lua_State> l79 = this->lua;
HXDLIN( 879)			::llua::Lua_helper_obj::callbacks->set(HX_("getMidpointY",1b,96,61,8b), ::Dynamic(new _hx_Closure_93()));
HXDLIN( 879)			linc::callbacks::add_callback_function(l79,HX_("getMidpointY",1b,96,61,8b));
            		}
HXLINE( 889)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_94) HXARGC(1)
            			Float _hx_run(::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_889_new)
HXLINE( 890)				::Array< ::String > split = variable.split(HX_(".",2e,00,00,00));
HXLINE( 891)				 ::flixel::FlxSprite obj = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getObjectDirectly(split->__get(0),null())) );
HXLINE( 892)				if ((split->length > 1)) {
HXLINE( 893)					 ::Dynamic this1 = ::psychlua::LuaUtils_obj::getPropertyLoop(split,null(),null());
HXDLIN( 893)					obj = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getVarInArray(this1,split->__get((split->length - 1)),null())) );
            				}
HXLINE( 895)				if (::hx::IsNotNull( obj )) {
HXLINE( 895)					return obj->getGraphicMidpoint(null())->x;
            				}
HXLINE( 897)				return ( (Float)(0) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 889)			 cpp::Reference<lua_State> l80 = this->lua;
HXDLIN( 889)			::llua::Lua_helper_obj::callbacks->set(HX_("getGraphicMidpointX",7e,52,20,8a), ::Dynamic(new _hx_Closure_94()));
HXDLIN( 889)			linc::callbacks::add_callback_function(l80,HX_("getGraphicMidpointX",7e,52,20,8a));
            		}
HXLINE( 899)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_95) HXARGC(1)
            			Float _hx_run(::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_899_new)
HXLINE( 900)				::Array< ::String > split = variable.split(HX_(".",2e,00,00,00));
HXLINE( 901)				 ::flixel::FlxSprite obj = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getObjectDirectly(split->__get(0),null())) );
HXLINE( 902)				if ((split->length > 1)) {
HXLINE( 903)					 ::Dynamic this1 = ::psychlua::LuaUtils_obj::getPropertyLoop(split,null(),null());
HXDLIN( 903)					obj = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getVarInArray(this1,split->__get((split->length - 1)),null())) );
            				}
HXLINE( 905)				if (::hx::IsNotNull( obj )) {
HXLINE( 905)					return obj->getGraphicMidpoint(null())->y;
            				}
HXLINE( 907)				return ( (Float)(0) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 899)			 cpp::Reference<lua_State> l81 = this->lua;
HXDLIN( 899)			::llua::Lua_helper_obj::callbacks->set(HX_("getGraphicMidpointY",7f,52,20,8a), ::Dynamic(new _hx_Closure_95()));
HXDLIN( 899)			linc::callbacks::add_callback_function(l81,HX_("getGraphicMidpointY",7f,52,20,8a));
            		}
HXLINE( 909)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_96) HXARGC(2)
            			Float _hx_run(::String variable,::String __o_camera){
            		::String camera = __o_camera;
            		if (::hx::IsNull(__o_camera)) camera = HX_("game",f2,f3,5e,44);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_909_new)
HXLINE( 910)				::Array< ::String > split = variable.split(HX_(".",2e,00,00,00));
HXLINE( 911)				 ::flixel::FlxObject obj = ( ( ::flixel::FlxObject)(::psychlua::LuaUtils_obj::getObjectDirectly(split->__get(0),null())) );
HXLINE( 912)				if ((split->length > 1)) {
HXLINE( 913)					 ::Dynamic this1 = ::psychlua::LuaUtils_obj::getPropertyLoop(split,null(),null());
HXDLIN( 913)					obj = ( ( ::flixel::FlxObject)(::psychlua::LuaUtils_obj::getVarInArray(this1,split->__get((split->length - 1)),null())) );
            				}
HXLINE( 915)				if (::hx::IsNotNull( obj )) {
HXLINE( 915)					return obj->getScreenPosition(null(),::psychlua::LuaUtils_obj::cameraFromString(camera))->x;
            				}
HXLINE( 917)				return ( (Float)(0) );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 909)			 cpp::Reference<lua_State> l82 = this->lua;
HXDLIN( 909)			::llua::Lua_helper_obj::callbacks->set(HX_("getScreenPositionX",8d,6a,f8,d2), ::Dynamic(new _hx_Closure_96()));
HXDLIN( 909)			linc::callbacks::add_callback_function(l82,HX_("getScreenPositionX",8d,6a,f8,d2));
            		}
HXLINE( 919)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_97) HXARGC(2)
            			Float _hx_run(::String variable,::String __o_camera){
            		::String camera = __o_camera;
            		if (::hx::IsNull(__o_camera)) camera = HX_("game",f2,f3,5e,44);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_919_new)
HXLINE( 920)				::Array< ::String > split = variable.split(HX_(".",2e,00,00,00));
HXLINE( 921)				 ::flixel::FlxObject obj = ( ( ::flixel::FlxObject)(::psychlua::LuaUtils_obj::getObjectDirectly(split->__get(0),null())) );
HXLINE( 922)				if ((split->length > 1)) {
HXLINE( 923)					 ::Dynamic this1 = ::psychlua::LuaUtils_obj::getPropertyLoop(split,null(),null());
HXDLIN( 923)					obj = ( ( ::flixel::FlxObject)(::psychlua::LuaUtils_obj::getVarInArray(this1,split->__get((split->length - 1)),null())) );
            				}
HXLINE( 925)				if (::hx::IsNotNull( obj )) {
HXLINE( 925)					return obj->getScreenPosition(null(),::psychlua::LuaUtils_obj::cameraFromString(camera))->y;
            				}
HXLINE( 927)				return ( (Float)(0) );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 919)			 cpp::Reference<lua_State> l83 = this->lua;
HXDLIN( 919)			::llua::Lua_helper_obj::callbacks->set(HX_("getScreenPositionY",8e,6a,f8,d2), ::Dynamic(new _hx_Closure_97()));
HXDLIN( 919)			linc::callbacks::add_callback_function(l83,HX_("getScreenPositionY",8e,6a,f8,d2));
            		}
HXLINE( 929)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_98, ::states::PlayState,game) HXARGC(1)
            			void _hx_run(::String character){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_930_new)
HXLINE( 930)				::String _hx_switch_10 = character.toLowerCase();
            				if (  (_hx_switch_10==HX_("dad",47,36,4c,00)) ){
HXLINE( 931)					game->dad->dance();
HXDLIN( 931)					goto _hx_goto_20;
            				}
            				if (  (_hx_switch_10==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_10==HX_("girlfriend",ba,91,48,98)) ){
HXLINE( 932)					if (::hx::IsNotNull( game->gf )) {
HXLINE( 932)						game->gf->dance();
            					}
HXDLIN( 932)					goto _hx_goto_20;
            				}
            				/* default */{
HXLINE( 933)					game->boyfriend->dance();
            				}
            				_hx_goto_20:;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 929)			 cpp::Reference<lua_State> l84 = this->lua;
HXDLIN( 929)			::llua::Lua_helper_obj::callbacks->set(HX_("characterDance",ca,32,95,aa), ::Dynamic(new _hx_Closure_98(game)));
HXDLIN( 929)			linc::callbacks::add_callback_function(l84,HX_("characterDance",ca,32,95,aa));
            		}
HXLINE( 937)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_99) HXARGC(4)
            			void _hx_run(::String tag,::String image, ::Dynamic __o_x, ::Dynamic __o_y){
            		 ::Dynamic x = __o_x;
            		if (::hx::IsNull(__o_x)) x = 0;
            		 ::Dynamic y = __o_y;
            		if (::hx::IsNull(__o_y)) y = 0;
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_937_new)
HXLINE( 938)				tag = ::StringTools_obj::replace(tag,HX_(".",2e,00,00,00),HX_("",00,00,00,00));
HXLINE( 939)				::psychlua::LuaUtils_obj::destroyObject(tag);
HXLINE( 940)				 ::psychlua::ModchartSprite leSprite =  ::psychlua::ModchartSprite_obj::__alloc( HX_CTX ,x,y);
HXLINE( 941)				bool _hx_tmp;
HXDLIN( 941)				if (::hx::IsNotNull( image )) {
HXLINE( 941)					_hx_tmp = (image.length > 0);
            				}
            				else {
HXLINE( 941)					_hx_tmp = false;
            				}
HXDLIN( 941)				if (_hx_tmp) {
HXLINE( 943)					leSprite->loadGraphic(::backend::Paths_obj::image(image,null(),null()),null(),null(),null(),null(),null());
            				}
HXLINE( 945)				::backend::MusicBeatState_obj::getVariables()->set(tag,leSprite);
HXLINE( 946)				leSprite->set_active(true);
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 937)			 cpp::Reference<lua_State> l85 = this->lua;
HXDLIN( 937)			::llua::Lua_helper_obj::callbacks->set(HX_("makeLuaSprite",0f,bc,5b,d4), ::Dynamic(new _hx_Closure_99()));
HXDLIN( 937)			linc::callbacks::add_callback_function(l85,HX_("makeLuaSprite",0f,bc,5b,d4));
            		}
HXLINE( 948)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_100) HXARGC(5)
            			void _hx_run(::String tag,::String image, ::Dynamic __o_x, ::Dynamic __o_y,::String __o_spriteType){
            		 ::Dynamic x = __o_x;
            		if (::hx::IsNull(__o_x)) x = 0;
            		 ::Dynamic y = __o_y;
            		if (::hx::IsNull(__o_y)) y = 0;
            		::String spriteType = __o_spriteType;
            		if (::hx::IsNull(__o_spriteType)) spriteType = HX_("auto",6f,df,76,40);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_948_new)
HXLINE( 949)				tag = ::StringTools_obj::replace(tag,HX_(".",2e,00,00,00),HX_("",00,00,00,00));
HXLINE( 950)				::psychlua::LuaUtils_obj::destroyObject(tag);
HXLINE( 951)				 ::psychlua::ModchartSprite leSprite =  ::psychlua::ModchartSprite_obj::__alloc( HX_CTX ,x,y);
HXLINE( 953)				bool _hx_tmp;
HXDLIN( 953)				if (::hx::IsNotNull( image )) {
HXLINE( 953)					_hx_tmp = (image.length > 0);
            				}
            				else {
HXLINE( 953)					_hx_tmp = false;
            				}
HXDLIN( 953)				if (_hx_tmp) {
HXLINE( 955)					::psychlua::LuaUtils_obj::loadFrames(leSprite,image,spriteType);
            				}
HXLINE( 957)				::backend::MusicBeatState_obj::getVariables()->set(tag,leSprite);
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 948)			 cpp::Reference<lua_State> l86 = this->lua;
HXDLIN( 948)			::llua::Lua_helper_obj::callbacks->set(HX_("makeAnimatedLuaSprite",ec,be,a6,d0), ::Dynamic(new _hx_Closure_100()));
HXDLIN( 948)			linc::callbacks::add_callback_function(l86,HX_("makeAnimatedLuaSprite",ec,be,a6,d0));
            		}
HXLINE( 960)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_101) HXARGC(4)
            			void _hx_run(::String obj, ::Dynamic __o_width, ::Dynamic __o_height,::String __o_color){
            		int width = __o_width.Default(256);
            		int height = __o_height.Default(256);
            		::String color = __o_color;
            		if (::hx::IsNull(__o_color)) color = HX_("FFFFFF",c0,27,82,79);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_960_new)
HXLINE( 961)				 ::flixel::FlxSprite spr = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getObjectDirectly(obj,null())) );
HXLINE( 962)				if (::hx::IsNotNull( spr )) {
HXLINE( 962)					 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN( 962)					::String color1 = ::StringTools_obj::trim(hideChars->split(color)->join(HX_("",00,00,00,00)));
HXDLIN( 962)					if (::StringTools_obj::startsWith(color1,HX_("0x",48,2a,00,00))) {
HXLINE(  59)						color1 = color1.substring((color1.length - 6),null());
            					}
HXLINE( 962)					 ::Dynamic colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color1);
HXDLIN( 962)					if (::hx::IsNull( colorNum )) {
HXLINE(  62)						colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color1));
            					}
HXLINE( 962)					int _hx_tmp;
HXDLIN( 962)					if (::hx::IsNotNull( colorNum )) {
HXLINE( 962)						_hx_tmp = ( (int)(colorNum) );
            					}
            					else {
HXLINE( 962)						_hx_tmp = -1;
            					}
HXDLIN( 962)					spr->makeGraphic(width,height,_hx_tmp,null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 960)			 cpp::Reference<lua_State> l87 = this->lua;
HXDLIN( 960)			::llua::Lua_helper_obj::callbacks->set(HX_("makeGraphic",5a,82,11,b8), ::Dynamic(new _hx_Closure_101()));
HXDLIN( 960)			linc::callbacks::add_callback_function(l87,HX_("makeGraphic",5a,82,11,b8));
            		}
HXLINE( 964)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_102) HXARGC(5)
            			bool _hx_run(::String obj,::String name,::String prefix, ::Dynamic __o_framerate, ::Dynamic __o_loop){
            		Float framerate = __o_framerate.Default(24);
            		bool loop = __o_loop.Default(true);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_964_new)
HXLINE( 965)				 ::flixel::FlxSprite obj1 = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getObjectDirectly(obj,null())) );
HXLINE( 966)				bool _hx_tmp;
HXDLIN( 966)				if (::hx::IsNotNull( obj1 )) {
HXLINE( 966)					_hx_tmp = ::hx::IsNotNull( obj1->animation );
            				}
            				else {
HXLINE( 966)					_hx_tmp = false;
            				}
HXDLIN( 966)				if (_hx_tmp) {
HXLINE( 968)					obj1->animation->addByPrefix(name,prefix,framerate,loop,null(),null());
HXLINE( 969)					if (::hx::IsNull( obj1->animation->_curAnim )) {
HXLINE( 971)						 ::Dynamic dyn = obj1;
HXLINE( 972)						if (::hx::IsNotNull( dyn->__Field(HX_("playAnim",25,ea,84,30),::hx::paccDynamic) )) {
HXLINE( 972)							dyn->__Field(HX_("playAnim",25,ea,84,30),::hx::paccDynamic)(name,true);
            						}
            						else {
HXLINE( 973)							 ::Dynamic(dyn->__Field(HX_("animation",04,ef,34,4b),::hx::paccDynamic))->__Field(HX_("play",f4,2d,5a,4a),::hx::paccDynamic)(name,true);
            						}
            					}
HXLINE( 975)					return true;
            				}
HXLINE( 977)				return false;
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE( 964)			 cpp::Reference<lua_State> l88 = this->lua;
HXDLIN( 964)			::llua::Lua_helper_obj::callbacks->set(HX_("addAnimationByPrefix",8c,c6,c0,2b), ::Dynamic(new _hx_Closure_102()));
HXDLIN( 964)			linc::callbacks::add_callback_function(l88,HX_("addAnimationByPrefix",8c,c6,c0,2b));
            		}
HXLINE( 980)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_103) HXARGC(5)
            			bool _hx_run(::String obj,::String name, ::Dynamic frames, ::Dynamic __o_framerate, ::Dynamic __o_loop){
            		Float framerate = __o_framerate.Default(24);
            		bool loop = __o_loop.Default(true);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_981_new)
HXLINE( 981)				return ::psychlua::LuaUtils_obj::addAnimByIndices(obj,name,null(),frames,framerate,loop);
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE( 980)			 cpp::Reference<lua_State> l89 = this->lua;
HXDLIN( 980)			::llua::Lua_helper_obj::callbacks->set(HX_("addAnimation",a3,10,89,4a), ::Dynamic(new _hx_Closure_103()));
HXDLIN( 980)			linc::callbacks::add_callback_function(l89,HX_("addAnimation",a3,10,89,4a));
            		}
HXLINE( 984)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_104) HXARGC(6)
            			bool _hx_run(::String obj,::String name,::String prefix, ::Dynamic indices, ::Dynamic __o_framerate, ::Dynamic __o_loop){
            		Float framerate = __o_framerate.Default(24);
            		bool loop = __o_loop.Default(false);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_985_new)
HXLINE( 985)				return ::psychlua::LuaUtils_obj::addAnimByIndices(obj,name,prefix,indices,framerate,loop);
            			}
            			HX_END_LOCAL_FUNC6(return)

HXLINE( 984)			 cpp::Reference<lua_State> l90 = this->lua;
HXDLIN( 984)			::llua::Lua_helper_obj::callbacks->set(HX_("addAnimationByIndices",ed,b4,f9,ce), ::Dynamic(new _hx_Closure_104()));
HXDLIN( 984)			linc::callbacks::add_callback_function(l90,HX_("addAnimationByIndices",ed,b4,f9,ce));
            		}
HXLINE( 988)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_105) HXARGC(5)
            			bool _hx_run(::String obj,::String name, ::Dynamic __o_forced, ::Dynamic __o_reverse, ::Dynamic __o_startFrame){
            		 ::Dynamic forced = __o_forced;
            		if (::hx::IsNull(__o_forced)) forced = false;
            		 ::Dynamic reverse = __o_reverse;
            		if (::hx::IsNull(__o_reverse)) reverse = false;
            		 ::Dynamic startFrame = __o_startFrame;
            		if (::hx::IsNull(__o_startFrame)) startFrame = 0;
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_989_new)
HXLINE( 990)				 ::Dynamic obj1 = ::psychlua::LuaUtils_obj::getObjectDirectly(obj,null());
HXLINE( 991)				if (::hx::IsNotNull( obj1->__Field(HX_("playAnim",25,ea,84,30),::hx::paccDynamic) )) {
HXLINE( 993)					obj1->__Field(HX_("playAnim",25,ea,84,30),::hx::paccDynamic)(name,forced,reverse,startFrame);
HXLINE( 994)					return true;
            				}
            				else {
HXLINE( 998)					if (::hx::IsNotNull( obj1->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic) )) {
HXLINE( 998)						 ::Dynamic(obj1->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic))->__Field(HX_("play",f4,2d,5a,4a),::hx::paccDynamic)(name,forced,reverse,startFrame);
            					}
            					else {
HXLINE( 999)						 ::Dynamic(obj1->__Field(HX_("animation",04,ef,34,4b),::hx::paccDynamic))->__Field(HX_("play",f4,2d,5a,4a),::hx::paccDynamic)(name,forced,reverse,startFrame);
            					}
HXLINE(1000)					return true;
            				}
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE( 988)			 cpp::Reference<lua_State> l91 = this->lua;
HXDLIN( 988)			::llua::Lua_helper_obj::callbacks->set(HX_("playAnim",25,ea,84,30), ::Dynamic(new _hx_Closure_105()));
HXDLIN( 988)			linc::callbacks::add_callback_function(l91,HX_("playAnim",25,ea,84,30));
            		}
HXLINE(1004)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_106) HXARGC(4)
            			bool _hx_run(::String obj,::String anim,Float x,Float y){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1004_new)
HXLINE(1005)				 ::Dynamic obj1 = ::psychlua::LuaUtils_obj::getObjectDirectly(obj,null());
HXLINE(1006)				bool _hx_tmp;
HXDLIN(1006)				if (::hx::IsNotNull( obj1 )) {
HXLINE(1006)					_hx_tmp = ::hx::IsNotNull( obj1->__Field(HX_("addOffset",94,cc,63,18),::hx::paccDynamic) );
            				}
            				else {
HXLINE(1006)					_hx_tmp = false;
            				}
HXDLIN(1006)				if (_hx_tmp) {
HXLINE(1008)					obj1->__Field(HX_("addOffset",94,cc,63,18),::hx::paccDynamic)(anim,x,y);
HXLINE(1009)					return true;
            				}
HXLINE(1011)				return false;
            			}
            			HX_END_LOCAL_FUNC4(return)

HXLINE(1004)			 cpp::Reference<lua_State> l92 = this->lua;
HXDLIN(1004)			::llua::Lua_helper_obj::callbacks->set(HX_("addOffset",94,cc,63,18), ::Dynamic(new _hx_Closure_106()));
HXDLIN(1004)			linc::callbacks::add_callback_function(l92,HX_("addOffset",94,cc,63,18));
            		}
HXLINE(1014)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_107, ::states::PlayState,game) HXARGC(3)
            			void _hx_run(::String obj,Float scrollX,Float scrollY){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1014_new)
HXLINE(1015)				if (::hx::IsNotNull( game->getLuaObject(obj) )) {
HXLINE(1016)					 ::Dynamic(game->getLuaObject(obj)->__Field(HX_("scrollFactor",bc,ec,cf,3b),::hx::paccDynamic))->__Field(HX_("set",a2,9b,57,00),::hx::paccDynamic)(scrollX,scrollY);
HXLINE(1017)					return;
            				}
HXLINE(1020)				 ::flixel::FlxObject object = ( ( ::flixel::FlxObject)(::Reflect_obj::getProperty(::psychlua::LuaUtils_obj::getTargetInstance(),obj)) );
HXLINE(1021)				if (::hx::IsNotNull( object )) {
HXLINE(1022)					 ::flixel::math::FlxBasePoint this1 = object->scrollFactor;
HXDLIN(1022)					this1->set_x(scrollX);
HXDLIN(1022)					this1->set_y(scrollY);
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1014)			 cpp::Reference<lua_State> l93 = this->lua;
HXDLIN(1014)			::llua::Lua_helper_obj::callbacks->set(HX_("setScrollFactor",7e,bf,85,5a), ::Dynamic(new _hx_Closure_107(game)));
HXDLIN(1014)			linc::callbacks::add_callback_function(l93,HX_("setScrollFactor",7e,bf,85,5a));
            		}
HXLINE(1025)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_108) HXARGC(2)
            			void _hx_run(::String tag, ::Dynamic __o_inFront){
            		 ::Dynamic inFront = __o_inFront;
            		if (::hx::IsNull(__o_inFront)) inFront = false;
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1025_new)
HXLINE(1026)				 ::flixel::FlxSprite mySprite = ( ( ::flixel::FlxSprite)(::backend::MusicBeatState_obj::getVariables()->get(tag)) );
HXLINE(1027)				if (::hx::IsNull( mySprite )) {
HXLINE(1027)					return;
            				}
HXLINE(1029)				 ::flixel::FlxState instance = ::psychlua::LuaUtils_obj::getTargetInstance();
HXLINE(1030)				if (( (bool)(inFront) )) {
HXLINE(1031)					instance->add(mySprite).StaticCast<  ::flixel::FlxBasic >();
            				}
            				else {
HXLINE(1034)					bool _hx_tmp;
HXDLIN(1034)					if (::hx::IsNotNull( ::states::PlayState_obj::instance )) {
HXLINE(1034)						_hx_tmp = !(::states::PlayState_obj::instance->isDead);
            					}
            					else {
HXLINE(1034)						_hx_tmp = true;
            					}
HXDLIN(1034)					if (_hx_tmp) {
HXLINE(1035)						::Array< ::Dynamic> instance1 = instance->members;
HXDLIN(1035)						 ::Dynamic stageData = ::backend::StageData_obj::getStageFile(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) ));
HXDLIN(1035)						 ::flixel::group::FlxTypedSpriteGroup group;
HXDLIN(1035)						if (( (bool)(stageData->__Field(HX_("hide_girlfriend",57,bd,d9,f9),::hx::paccDynamic)) )) {
HXLINE(1035)							group = ::states::PlayState_obj::instance->boyfriendGroup;
            						}
            						else {
HXLINE(1035)							group = ::states::PlayState_obj::instance->gfGroup;
            						}
HXDLIN(1035)						int pos = ::states::PlayState_obj::instance->members->indexOf(group,null());
HXDLIN(1035)						int newPos = ::states::PlayState_obj::instance->members->indexOf(::states::PlayState_obj::instance->boyfriendGroup,null());
HXDLIN(1035)						if ((newPos < pos)) {
HXLINE( 287)							group = ::states::PlayState_obj::instance->boyfriendGroup;
HXLINE( 288)							pos = newPos;
            						}
HXLINE( 291)						newPos = ::states::PlayState_obj::instance->members->indexOf(::states::PlayState_obj::instance->dadGroup,null());
HXLINE(1035)						if ((newPos < pos)) {
HXLINE( 294)							group = ::states::PlayState_obj::instance->dadGroup;
HXLINE( 295)							pos = newPos;
            						}
HXLINE(1035)						instance->insert(instance1->indexOf(group,null()),mySprite).StaticCast<  ::flixel::FlxBasic >();
            					}
            					else {
HXLINE(1037)						 ::substates::GameOverSubstate _hx_tmp1 = ::substates::GameOverSubstate_obj::instance;
HXDLIN(1037)						_hx_tmp1->insert(::substates::GameOverSubstate_obj::instance->members->indexOf(::substates::GameOverSubstate_obj::instance->boyfriend,null()),mySprite).StaticCast<  ::flixel::FlxBasic >();
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1025)			 cpp::Reference<lua_State> l94 = this->lua;
HXDLIN(1025)			::llua::Lua_helper_obj::callbacks->set(HX_("addLuaSprite",7c,e5,06,db), ::Dynamic(new _hx_Closure_108()));
HXDLIN(1025)			linc::callbacks::add_callback_function(l94,HX_("addLuaSprite",7c,e5,06,db));
            		}
HXLINE(1040)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_109, ::states::PlayState,game) HXARGC(4)
            			void _hx_run(::String obj,Float x, ::Dynamic __o_y, ::Dynamic __o_updateHitbox){
            		Float y = __o_y.Default(0);
            		bool updateHitbox = __o_updateHitbox.Default(true);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1040_new)
HXLINE(1041)				if (::hx::IsNotNull( game->getLuaObject(obj) )) {
HXLINE(1042)					 ::flixel::FlxSprite shit = ( ( ::flixel::FlxSprite)(game->getLuaObject(obj)) );
HXLINE(1043)					shit->setGraphicSize(x,y);
HXLINE(1044)					if (updateHitbox) {
HXLINE(1044)						shit->updateHitbox();
            					}
HXLINE(1045)					return;
            				}
HXLINE(1048)				::Array< ::String > split = obj.split(HX_(".",2e,00,00,00));
HXLINE(1049)				 ::flixel::FlxSprite poop = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getObjectDirectly(split->__get(0),null())) );
HXLINE(1050)				if ((split->length > 1)) {
HXLINE(1051)					 ::Dynamic this1 = ::psychlua::LuaUtils_obj::getPropertyLoop(split,null(),null());
HXDLIN(1051)					poop = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getVarInArray(this1,split->__get((split->length - 1)),null())) );
            				}
HXLINE(1054)				if (::hx::IsNotNull( poop )) {
HXLINE(1055)					poop->setGraphicSize(x,y);
HXLINE(1056)					if (updateHitbox) {
HXLINE(1056)						poop->updateHitbox();
            					}
HXLINE(1057)					return;
            				}
HXLINE(1059)				::psychlua::FunkinLua_obj::luaTrace((HX_("setGraphicSize: Couldnt find object: ",e6,d0,af,28) + obj),false,false,-65536);
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(1040)			 cpp::Reference<lua_State> l95 = this->lua;
HXDLIN(1040)			::llua::Lua_helper_obj::callbacks->set(HX_("setGraphicSize",07,d7,f8,2d), ::Dynamic(new _hx_Closure_109(game)));
HXDLIN(1040)			linc::callbacks::add_callback_function(l95,HX_("setGraphicSize",07,d7,f8,2d));
            		}
HXLINE(1061)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_110, ::states::PlayState,game) HXARGC(4)
            			void _hx_run(::String obj,Float x,Float y, ::Dynamic __o_updateHitbox){
            		bool updateHitbox = __o_updateHitbox.Default(true);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1061_new)
HXLINE(1062)				if (::hx::IsNotNull( game->getLuaObject(obj) )) {
HXLINE(1063)					 ::flixel::FlxSprite shit = ( ( ::flixel::FlxSprite)(game->getLuaObject(obj)) );
HXLINE(1064)					{
HXLINE(1064)						 ::flixel::math::FlxBasePoint this1 = shit->scale;
HXDLIN(1064)						this1->set_x(x);
HXDLIN(1064)						this1->set_y(y);
            					}
HXLINE(1065)					if (updateHitbox) {
HXLINE(1065)						shit->updateHitbox();
            					}
HXLINE(1066)					return;
            				}
HXLINE(1069)				::Array< ::String > split = obj.split(HX_(".",2e,00,00,00));
HXLINE(1070)				 ::flixel::FlxSprite poop = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getObjectDirectly(split->__get(0),null())) );
HXLINE(1071)				if ((split->length > 1)) {
HXLINE(1072)					 ::Dynamic this2 = ::psychlua::LuaUtils_obj::getPropertyLoop(split,null(),null());
HXDLIN(1072)					poop = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getVarInArray(this2,split->__get((split->length - 1)),null())) );
            				}
HXLINE(1075)				if (::hx::IsNotNull( poop )) {
HXLINE(1076)					{
HXLINE(1076)						 ::flixel::math::FlxBasePoint this3 = poop->scale;
HXDLIN(1076)						this3->set_x(x);
HXDLIN(1076)						this3->set_y(y);
            					}
HXLINE(1077)					if (updateHitbox) {
HXLINE(1077)						poop->updateHitbox();
            					}
HXLINE(1078)					return;
            				}
HXLINE(1080)				::psychlua::FunkinLua_obj::luaTrace((HX_("scaleObject: Couldnt find object: ",44,df,d0,77) + obj),false,false,-65536);
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(1061)			 cpp::Reference<lua_State> l96 = this->lua;
HXDLIN(1061)			::llua::Lua_helper_obj::callbacks->set(HX_("scaleObject",e9,44,43,01), ::Dynamic(new _hx_Closure_110(game)));
HXDLIN(1061)			linc::callbacks::add_callback_function(l96,HX_("scaleObject",e9,44,43,01));
            		}
HXLINE(1082)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_111, ::states::PlayState,game) HXARGC(1)
            			void _hx_run(::String obj){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1082_new)
HXLINE(1083)				if (::hx::IsNotNull( game->getLuaObject(obj) )) {
HXLINE(1084)					 ::flixel::FlxSprite shit = ( ( ::flixel::FlxSprite)(game->getLuaObject(obj)) );
HXLINE(1085)					shit->updateHitbox();
HXLINE(1086)					return;
            				}
HXLINE(1089)				::Array< ::String > split = obj.split(HX_(".",2e,00,00,00));
HXLINE(1090)				 ::flixel::FlxSprite poop = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getObjectDirectly(split->__get(0),null())) );
HXLINE(1091)				if ((split->length > 1)) {
HXLINE(1092)					 ::Dynamic this1 = ::psychlua::LuaUtils_obj::getPropertyLoop(split,null(),null());
HXDLIN(1092)					poop = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getVarInArray(this1,split->__get((split->length - 1)),null())) );
            				}
HXLINE(1095)				if (::hx::IsNotNull( poop )) {
HXLINE(1096)					poop->updateHitbox();
HXLINE(1097)					return;
            				}
HXLINE(1099)				::psychlua::FunkinLua_obj::luaTrace((HX_("updateHitbox: Couldnt find object: ",ac,82,77,e4) + obj),false,false,-65536);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1082)			 cpp::Reference<lua_State> l97 = this->lua;
HXDLIN(1082)			::llua::Lua_helper_obj::callbacks->set(HX_("updateHitbox",81,94,eb,56), ::Dynamic(new _hx_Closure_111(game)));
HXDLIN(1082)			linc::callbacks::add_callback_function(l97,HX_("updateHitbox",81,94,eb,56));
            		}
HXLINE(1102)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_112) HXARGC(3)
            			void _hx_run(::String tag, ::Dynamic __o_destroy,::String group){
            		bool destroy = __o_destroy.Default(true);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1102_new)
HXLINE(1103)				 ::flixel::FlxSprite obj = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getObjectDirectly(tag,null())) );
HXLINE(1104)				bool _hx_tmp;
HXDLIN(1104)				if (::hx::IsNotNull( obj )) {
HXLINE(1104)					_hx_tmp = ::hx::IsNull( obj->destroy_dyn() );
            				}
            				else {
HXLINE(1104)					_hx_tmp = true;
            				}
HXDLIN(1104)				if (_hx_tmp) {
HXLINE(1105)					return;
            				}
HXLINE(1107)				 ::Dynamic groupObj = null();
HXLINE(1108)				if (::hx::IsNull( group )) {
HXLINE(1108)					groupObj = ::psychlua::LuaUtils_obj::getTargetInstance();
            				}
            				else {
HXLINE(1109)					groupObj = ::psychlua::LuaUtils_obj::getObjectDirectly(group,null());
            				}
HXLINE(1111)				groupObj->__Field(HX_("remove",44,9c,88,04),::hx::paccDynamic)(obj,true);
HXLINE(1112)				if (destroy) {
HXLINE(1114)					::backend::MusicBeatState_obj::getVariables()->remove(tag);
HXLINE(1115)					obj->destroy();
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1102)			 cpp::Reference<lua_State> l98 = this->lua;
HXDLIN(1102)			::llua::Lua_helper_obj::callbacks->set(HX_("removeLuaSprite",f9,5e,d1,1c), ::Dynamic(new _hx_Closure_112()));
HXDLIN(1102)			linc::callbacks::add_callback_function(l98,HX_("removeLuaSprite",f9,5e,d1,1c));
            		}
HXLINE(1119)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_113) HXARGC(1)
            			bool _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1119_new)
HXLINE(1120)				 ::flixel::FlxSprite obj = ( ( ::flixel::FlxSprite)(::backend::MusicBeatState_obj::getVariables()->get(tag)) );
HXLINE(1121)				if (::hx::IsNotNull( obj )) {
HXLINE(1121)					if (!(::Std_obj::isOfType(obj,::hx::ClassOf< ::psychlua::ModchartSprite >()))) {
HXLINE(1121)						return ::Std_obj::isOfType(obj,::hx::ClassOf< ::psychlua::ModchartAnimateSprite >());
            					}
            					else {
HXLINE(1121)						return true;
            					}
            				}
            				else {
HXLINE(1121)					return false;
            				}
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1119)			 cpp::Reference<lua_State> l99 = this->lua;
HXDLIN(1119)			::llua::Lua_helper_obj::callbacks->set(HX_("luaSpriteExists",99,19,23,61), ::Dynamic(new _hx_Closure_113()));
HXDLIN(1119)			linc::callbacks::add_callback_function(l99,HX_("luaSpriteExists",99,19,23,61));
            		}
HXLINE(1123)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_114) HXARGC(1)
            			bool _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1123_new)
HXLINE(1124)				 ::flixel::text::FlxText obj = ( ( ::flixel::text::FlxText)(::backend::MusicBeatState_obj::getVariables()->get(tag)) );
HXLINE(1125)				if (::hx::IsNotNull( obj )) {
HXLINE(1125)					return ::Std_obj::isOfType(obj,::hx::ClassOf< ::flixel::text::FlxText >());
            				}
            				else {
HXLINE(1125)					return false;
            				}
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1123)			 cpp::Reference<lua_State> l100 = this->lua;
HXDLIN(1123)			::llua::Lua_helper_obj::callbacks->set(HX_("luaTextExists",41,52,7a,3b), ::Dynamic(new _hx_Closure_114()));
HXDLIN(1123)			linc::callbacks::add_callback_function(l100,HX_("luaTextExists",41,52,7a,3b));
            		}
HXLINE(1127)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_115) HXARGC(1)
            			bool _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1127_new)
HXLINE(1128)				 ::flixel::sound::FlxSound obj = ( ( ::flixel::sound::FlxSound)(::backend::MusicBeatState_obj::getVariables()->get((HX_("sound_",b0,a8,2e,32) + tag))) );
HXLINE(1129)				if (::hx::IsNotNull( obj )) {
HXLINE(1129)					return ::Std_obj::isOfType(obj,::hx::ClassOf< ::flixel::sound::FlxSound >());
            				}
            				else {
HXLINE(1129)					return false;
            				}
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1127)			 cpp::Reference<lua_State> l101 = this->lua;
HXDLIN(1127)			::llua::Lua_helper_obj::callbacks->set(HX_("luaSoundExists",33,cd,e0,42), ::Dynamic(new _hx_Closure_115()));
HXDLIN(1127)			linc::callbacks::add_callback_function(l101,HX_("luaSoundExists",33,cd,e0,42));
            		}
HXLINE(1132)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_116, ::states::PlayState,game) HXARGC(2)
            			void _hx_run(::String left,::String right){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1132_new)
HXLINE(1133)				 ::Dynamic left_color = null();
HXLINE(1134)				 ::Dynamic right_color = null();
HXLINE(1135)				bool _hx_tmp;
HXDLIN(1135)				if (::hx::IsNotNull( left )) {
HXLINE(1135)					_hx_tmp = (left != HX_("",00,00,00,00));
            				}
            				else {
HXLINE(1135)					_hx_tmp = false;
            				}
HXDLIN(1135)				if (_hx_tmp) {
HXLINE(1136)					 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN(1136)					::String color = ::StringTools_obj::trim(hideChars->split(left)->join(HX_("",00,00,00,00)));
HXDLIN(1136)					if (::StringTools_obj::startsWith(color,HX_("0x",48,2a,00,00))) {
HXLINE(  59)						color = color.substring((color.length - 6),null());
            					}
HXLINE(1136)					 ::Dynamic colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color);
HXDLIN(1136)					if (::hx::IsNull( colorNum )) {
HXLINE(  62)						colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color));
            					}
HXLINE(1136)					if (::hx::IsNotNull( colorNum )) {
HXLINE(1136)						left_color = colorNum;
            					}
            					else {
HXLINE(1136)						left_color = -1;
            					}
            				}
HXLINE(1137)				bool _hx_tmp1;
HXDLIN(1137)				if (::hx::IsNotNull( right )) {
HXLINE(1137)					_hx_tmp1 = (right != HX_("",00,00,00,00));
            				}
            				else {
HXLINE(1137)					_hx_tmp1 = false;
            				}
HXDLIN(1137)				if (_hx_tmp1) {
HXLINE(1138)					 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN(1138)					::String color1 = ::StringTools_obj::trim(hideChars1->split(right)->join(HX_("",00,00,00,00)));
HXDLIN(1138)					if (::StringTools_obj::startsWith(color1,HX_("0x",48,2a,00,00))) {
HXLINE(  59)						color1 = color1.substring((color1.length - 6),null());
            					}
HXLINE(1138)					 ::Dynamic colorNum1 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color1);
HXDLIN(1138)					if (::hx::IsNull( colorNum1 )) {
HXLINE(  62)						colorNum1 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color1));
            					}
HXLINE(1138)					if (::hx::IsNotNull( colorNum1 )) {
HXLINE(1138)						right_color = colorNum1;
            					}
            					else {
HXLINE(1138)						right_color = -1;
            					}
            				}
HXLINE(1139)				game->healthBar->setColors(left_color,right_color);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1132)			 cpp::Reference<lua_State> l102 = this->lua;
HXDLIN(1132)			::llua::Lua_helper_obj::callbacks->set(HX_("setHealthBarColors",25,22,cf,1f), ::Dynamic(new _hx_Closure_116(game)));
HXDLIN(1132)			linc::callbacks::add_callback_function(l102,HX_("setHealthBarColors",25,22,cf,1f));
            		}
HXLINE(1141)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_117, ::states::PlayState,game) HXARGC(2)
            			void _hx_run(::String left,::String right){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1141_new)
HXLINE(1142)				 ::Dynamic left_color = null();
HXLINE(1143)				 ::Dynamic right_color = null();
HXLINE(1144)				bool _hx_tmp;
HXDLIN(1144)				if (::hx::IsNotNull( left )) {
HXLINE(1144)					_hx_tmp = (left != HX_("",00,00,00,00));
            				}
            				else {
HXLINE(1144)					_hx_tmp = false;
            				}
HXDLIN(1144)				if (_hx_tmp) {
HXLINE(1145)					 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN(1145)					::String color = ::StringTools_obj::trim(hideChars->split(left)->join(HX_("",00,00,00,00)));
HXDLIN(1145)					if (::StringTools_obj::startsWith(color,HX_("0x",48,2a,00,00))) {
HXLINE(  59)						color = color.substring((color.length - 6),null());
            					}
HXLINE(1145)					 ::Dynamic colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color);
HXDLIN(1145)					if (::hx::IsNull( colorNum )) {
HXLINE(  62)						colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color));
            					}
HXLINE(1145)					if (::hx::IsNotNull( colorNum )) {
HXLINE(1145)						left_color = colorNum;
            					}
            					else {
HXLINE(1145)						left_color = -1;
            					}
            				}
HXLINE(1146)				bool _hx_tmp1;
HXDLIN(1146)				if (::hx::IsNotNull( right )) {
HXLINE(1146)					_hx_tmp1 = (right != HX_("",00,00,00,00));
            				}
            				else {
HXLINE(1146)					_hx_tmp1 = false;
            				}
HXDLIN(1146)				if (_hx_tmp1) {
HXLINE(1147)					 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN(1147)					::String color1 = ::StringTools_obj::trim(hideChars1->split(right)->join(HX_("",00,00,00,00)));
HXDLIN(1147)					if (::StringTools_obj::startsWith(color1,HX_("0x",48,2a,00,00))) {
HXLINE(  59)						color1 = color1.substring((color1.length - 6),null());
            					}
HXLINE(1147)					 ::Dynamic colorNum1 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color1);
HXDLIN(1147)					if (::hx::IsNull( colorNum1 )) {
HXLINE(  62)						colorNum1 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color1));
            					}
HXLINE(1147)					if (::hx::IsNotNull( colorNum1 )) {
HXLINE(1147)						right_color = colorNum1;
            					}
            					else {
HXLINE(1147)						right_color = -1;
            					}
            				}
HXLINE(1148)				game->timeBar->setColors(left_color,right_color);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1141)			 cpp::Reference<lua_State> l103 = this->lua;
HXDLIN(1141)			::llua::Lua_helper_obj::callbacks->set(HX_("setTimeBarColors",14,cd,38,9d), ::Dynamic(new _hx_Closure_117(game)));
HXDLIN(1141)			linc::callbacks::add_callback_function(l103,HX_("setTimeBarColors",14,cd,38,9d));
            		}
HXLINE(1151)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_118, ::states::PlayState,game) HXARGC(2)
            			bool _hx_run(::String obj,::String __o_camera){
            		::String camera = __o_camera;
            		if (::hx::IsNull(__o_camera)) camera = HX_("game",f2,f3,5e,44);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1151_new)
HXLINE(1152)				 ::flixel::FlxBasic real = ( ( ::flixel::FlxBasic)(game->getLuaObject(obj)) );
HXLINE(1153)				if (::hx::IsNotNull( real )) {
HXLINE(1154)					real->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::psychlua::LuaUtils_obj::cameraFromString(camera)));
HXLINE(1155)					return true;
            				}
HXLINE(1158)				::Array< ::String > split = obj.split(HX_(".",2e,00,00,00));
HXLINE(1159)				 ::flixel::FlxBasic object = ( ( ::flixel::FlxBasic)(::psychlua::LuaUtils_obj::getObjectDirectly(split->__get(0),null())) );
HXLINE(1160)				if ((split->length > 1)) {
HXLINE(1161)					 ::Dynamic this1 = ::psychlua::LuaUtils_obj::getPropertyLoop(split,null(),null());
HXDLIN(1161)					object = ( ( ::flixel::FlxBasic)(::psychlua::LuaUtils_obj::getVarInArray(this1,split->__get((split->length - 1)),null())) );
            				}
HXLINE(1164)				if (::hx::IsNotNull( object )) {
HXLINE(1165)					object->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::psychlua::LuaUtils_obj::cameraFromString(camera)));
HXLINE(1166)					return true;
            				}
HXLINE(1168)				::psychlua::FunkinLua_obj::luaTrace(((HX_("setObjectCamera: Object ",35,98,22,91) + obj) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE(1169)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1151)			 cpp::Reference<lua_State> l104 = this->lua;
HXDLIN(1151)			::llua::Lua_helper_obj::callbacks->set(HX_("setObjectCamera",86,25,4c,b0), ::Dynamic(new _hx_Closure_118(game)));
HXDLIN(1151)			linc::callbacks::add_callback_function(l104,HX_("setObjectCamera",86,25,4c,b0));
            		}
HXLINE(1171)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_119, ::states::PlayState,game) HXARGC(2)
            			bool _hx_run(::String obj,::String __o_blend){
            		::String blend = __o_blend;
            		if (::hx::IsNull(__o_blend)) blend = HX_("",00,00,00,00);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1171_new)
HXLINE(1172)				 ::flixel::FlxSprite real = ( ( ::flixel::FlxSprite)(game->getLuaObject(obj)) );
HXLINE(1173)				if (::hx::IsNotNull( real )) {
HXLINE(1174)					real->set_blend(::psychlua::LuaUtils_obj::blendModeFromString(blend));
HXLINE(1175)					return true;
            				}
HXLINE(1178)				::Array< ::String > split = obj.split(HX_(".",2e,00,00,00));
HXLINE(1179)				 ::flixel::FlxSprite spr = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getObjectDirectly(split->__get(0),null())) );
HXLINE(1180)				if ((split->length > 1)) {
HXLINE(1181)					 ::Dynamic this1 = ::psychlua::LuaUtils_obj::getPropertyLoop(split,null(),null());
HXDLIN(1181)					spr = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getVarInArray(this1,split->__get((split->length - 1)),null())) );
            				}
HXLINE(1184)				if (::hx::IsNotNull( spr )) {
HXLINE(1185)					spr->set_blend(::psychlua::LuaUtils_obj::blendModeFromString(blend));
HXLINE(1186)					return true;
            				}
HXLINE(1188)				::psychlua::FunkinLua_obj::luaTrace(((HX_("setBlendMode: Object ",e9,df,de,93) + obj) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE(1189)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1171)			 cpp::Reference<lua_State> l105 = this->lua;
HXDLIN(1171)			::llua::Lua_helper_obj::callbacks->set(HX_("setBlendMode",52,a4,87,30), ::Dynamic(new _hx_Closure_119(game)));
HXDLIN(1171)			linc::callbacks::add_callback_function(l105,HX_("setBlendMode",52,a4,87,30));
            		}
HXLINE(1191)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_120, ::states::PlayState,game) HXARGC(2)
            			void _hx_run(::String obj,::String __o_pos){
            		::String pos = __o_pos;
            		if (::hx::IsNull(__o_pos)) pos = HX_("xy",01,69,00,00);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1191_new)
HXLINE(1192)				 ::flixel::FlxObject spr = ( ( ::flixel::FlxObject)(game->getLuaObject(obj)) );
HXLINE(1194)				if (::hx::IsNull( spr )) {
HXLINE(1195)					::Array< ::String > split = obj.split(HX_(".",2e,00,00,00));
HXLINE(1196)					spr = ( ( ::flixel::FlxObject)(::psychlua::LuaUtils_obj::getObjectDirectly(split->__get(0),null())) );
HXLINE(1197)					if ((split->length > 1)) {
HXLINE(1198)						 ::Dynamic this1 = ::psychlua::LuaUtils_obj::getPropertyLoop(split,null(),null());
HXDLIN(1198)						spr = ( ( ::flixel::FlxObject)(::psychlua::LuaUtils_obj::getVarInArray(this1,split->__get((split->length - 1)),null())) );
            					}
            				}
HXLINE(1202)				if (::hx::IsNotNull( spr )) {
HXLINE(1204)					::String _hx_switch_11 = ::StringTools_obj::trim(pos).toLowerCase();
            					if (  (_hx_switch_11==HX_("x",78,00,00,00)) ){
HXLINE(1207)						{
HXLINE(1207)							int axes = 1;
HXDLIN(1207)							bool _hx_tmp;
HXDLIN(1207)							if ((axes != 1)) {
HXLINE(1207)								_hx_tmp = (axes == 17);
            							}
            							else {
HXLINE(1207)								_hx_tmp = true;
            							}
HXDLIN(1207)							if (_hx_tmp) {
HXLINE(1207)								int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(1207)								spr->set_x(((( (Float)(_hx_tmp1) ) - spr->get_width()) / ( (Float)(2) )));
            							}
HXDLIN(1207)							bool _hx_tmp2;
HXDLIN(1207)							if ((axes != 16)) {
HXLINE(1207)								_hx_tmp2 = (axes == 17);
            							}
            							else {
HXLINE(1207)								_hx_tmp2 = true;
            							}
HXDLIN(1207)							if (_hx_tmp2) {
HXLINE(1207)								int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(1207)								spr->set_y(((( (Float)(_hx_tmp3) ) - spr->get_height()) / ( (Float)(2) )));
            							}
            						}
HXLINE(1208)						return;
HXLINE(1206)						goto _hx_goto_21;
            					}
            					if (  (_hx_switch_11==HX_("y",79,00,00,00)) ){
HXLINE(1210)						{
HXLINE(1210)							int axes1 = 16;
HXDLIN(1210)							bool _hx_tmp4;
HXDLIN(1210)							if ((axes1 != 1)) {
HXLINE(1210)								_hx_tmp4 = (axes1 == 17);
            							}
            							else {
HXLINE(1210)								_hx_tmp4 = true;
            							}
HXDLIN(1210)							if (_hx_tmp4) {
HXLINE(1210)								int _hx_tmp5 = ::flixel::FlxG_obj::width;
HXDLIN(1210)								spr->set_x(((( (Float)(_hx_tmp5) ) - spr->get_width()) / ( (Float)(2) )));
            							}
HXDLIN(1210)							bool _hx_tmp6;
HXDLIN(1210)							if ((axes1 != 16)) {
HXLINE(1210)								_hx_tmp6 = (axes1 == 17);
            							}
            							else {
HXLINE(1210)								_hx_tmp6 = true;
            							}
HXDLIN(1210)							if (_hx_tmp6) {
HXLINE(1210)								int _hx_tmp7 = ::flixel::FlxG_obj::height;
HXDLIN(1210)								spr->set_y(((( (Float)(_hx_tmp7) ) - spr->get_height()) / ( (Float)(2) )));
            							}
            						}
HXLINE(1211)						return;
HXLINE(1209)						goto _hx_goto_21;
            					}
            					/* default */{
HXLINE(1213)						{
HXLINE(1213)							int axes2 = 17;
HXDLIN(1213)							bool _hx_tmp8;
HXDLIN(1213)							if ((axes2 != 1)) {
HXLINE(1213)								_hx_tmp8 = (axes2 == 17);
            							}
            							else {
HXLINE(1213)								_hx_tmp8 = true;
            							}
HXDLIN(1213)							if (_hx_tmp8) {
HXLINE(1213)								int _hx_tmp9 = ::flixel::FlxG_obj::width;
HXDLIN(1213)								spr->set_x(((( (Float)(_hx_tmp9) ) - spr->get_width()) / ( (Float)(2) )));
            							}
HXDLIN(1213)							bool _hx_tmp10;
HXDLIN(1213)							if ((axes2 != 16)) {
HXLINE(1213)								_hx_tmp10 = (axes2 == 17);
            							}
            							else {
HXLINE(1213)								_hx_tmp10 = true;
            							}
HXDLIN(1213)							if (_hx_tmp10) {
HXLINE(1213)								int _hx_tmp11 = ::flixel::FlxG_obj::height;
HXDLIN(1213)								spr->set_y(((( (Float)(_hx_tmp11) ) - spr->get_height()) / ( (Float)(2) )));
            							}
            						}
HXLINE(1214)						return;
            					}
            					_hx_goto_21:;
            				}
HXLINE(1217)				::psychlua::FunkinLua_obj::luaTrace(((HX_("screenCenter: Object ",fa,1b,49,f4) + obj) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1191)			 cpp::Reference<lua_State> l106 = this->lua;
HXDLIN(1191)			::llua::Lua_helper_obj::callbacks->set(HX_("screenCenter",61,2e,f9,e2), ::Dynamic(new _hx_Closure_120(game)));
HXDLIN(1191)			linc::callbacks::add_callback_function(l106,HX_("screenCenter",61,2e,f9,e2));
            		}
HXLINE(1219)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_121, ::states::PlayState,game) HXARGC(2)
            			bool _hx_run(::String obj1,::String obj2){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1219_new)
HXLINE(1220)				::Array< ::String > namesArray = ::Array_obj< ::String >::__new(2)->init(0,obj1)->init(1,obj2);
HXLINE(1221)				::Array< ::Dynamic> objectsArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1222)				{
HXLINE(1222)					int _g = 0;
HXDLIN(1222)					int _g1 = namesArray->length;
HXDLIN(1222)					while((_g < _g1)){
HXLINE(1222)						_g = (_g + 1);
HXDLIN(1222)						int i = (_g - 1);
HXLINE(1224)						 ::flixel::FlxBasic real = ( ( ::flixel::FlxBasic)(game->getLuaObject(namesArray->__get(i))) );
HXLINE(1225)						if (::hx::IsNotNull( real )) {
HXLINE(1226)							objectsArray->push(real);
            						}
            						else {
HXLINE(1228)							 ::flixel::FlxState _hx_tmp = ::psychlua::LuaUtils_obj::getTargetInstance();
HXDLIN(1228)							objectsArray->push(::Reflect_obj::getProperty(_hx_tmp,namesArray->__get(i)));
            						}
            					}
            				}
HXLINE(1230)				if (!(objectsArray->contains(null()))) {
HXLINE(1230)					return ::flixel::FlxG_obj::overlap(objectsArray->__get(0).StaticCast<  ::flixel::FlxBasic >(),objectsArray->__get(1).StaticCast<  ::flixel::FlxBasic >(),null(),null());
            				}
            				else {
HXLINE(1230)					return false;
            				}
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1219)			 cpp::Reference<lua_State> l107 = this->lua;
HXDLIN(1219)			::llua::Lua_helper_obj::callbacks->set(HX_("objectsOverlap",13,85,15,48), ::Dynamic(new _hx_Closure_121(game)));
HXDLIN(1219)			linc::callbacks::add_callback_function(l107,HX_("objectsOverlap",13,85,15,48));
            		}
HXLINE(1232)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_122) HXARGC(3)
            			int _hx_run(::String obj,int x,int y){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1232_new)
HXLINE(1233)				::Array< ::String > split = obj.split(HX_(".",2e,00,00,00));
HXLINE(1234)				 ::flixel::FlxSprite spr = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getObjectDirectly(split->__get(0),null())) );
HXLINE(1235)				if ((split->length > 1)) {
HXLINE(1236)					 ::Dynamic this1 = ::psychlua::LuaUtils_obj::getPropertyLoop(split,null(),null());
HXDLIN(1236)					spr = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getVarInArray(this1,split->__get((split->length - 1)),null())) );
            				}
HXLINE(1239)				if (::hx::IsNotNull( spr )) {
HXLINE(1239)					return spr->get_pixels()->getPixel32(x,y);
            				}
HXLINE(1240)				return -16777216;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(1232)			 cpp::Reference<lua_State> l108 = this->lua;
HXDLIN(1232)			::llua::Lua_helper_obj::callbacks->set(HX_("getPixelColor",33,11,bd,45), ::Dynamic(new _hx_Closure_122()));
HXDLIN(1232)			linc::callbacks::add_callback_function(l108,HX_("getPixelColor",33,11,bd,45));
            		}
HXLINE(1242)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_123, ::states::PlayState,game) HXARGC(2)
            			bool _hx_run(::String dialogueFile,::String music){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1242_new)
HXLINE(1244)				::String path = ::backend::Song_obj::loadedSongName;
HXDLIN(1244)				 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(1244)				 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(1244)				::String songPath = ::StringTools_obj::trim(hideChars->replace(invalidChars->replace(path,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
HXLINE(1243)				::String path1 = ::backend::Paths_obj::getPath(((((((HX_("data/",c5,0e,88,d4) + songPath) + HX_("/",2f,00,00,00)) + dialogueFile) + HX_("_",5f,00,00,00)) + ::backend::ClientPrefs_obj::data->language) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),null(),null());
HXLINE(1248)				if (!(::sys::FileSystem_obj::exists(path1))) {
HXLINE(1253)					path1 = ::backend::Paths_obj::getPath(((((HX_("data/",c5,0e,88,d4) + songPath) + HX_("/",2f,00,00,00)) + dialogueFile) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),null(),null());
            				}
HXLINE(1255)				::psychlua::FunkinLua_obj::luaTrace((HX_("startDialogue: Trying to load dialogue: ",ec,81,25,2d) + path1),null(),null(),null());
HXLINE(1258)				if (::sys::FileSystem_obj::exists(path1)) {
HXLINE(1263)					 ::Dynamic shit;
HXDLIN(1263)					if (::sys::FileSystem_obj::exists(path1)) {
HXLINE(1263)						shit =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,::sys::io::File_obj::getContent(path1))->doParse();
            					}
            					else {
HXLINE(1263)						shit =  ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("dialogue",18,2d,94,a7),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(::hx::Anon_obj::Create(5)
            								->setFixed(0,HX_("speed",87,97,69,81),((Float)0.05))
            								->setFixed(1,HX_("portrait",5b,21,af,b8),HX_("bf",c4,55,00,00))
            								->setFixed(2,HX_("boxState",06,60,2a,ff),HX_("normal",27,72,69,30))
            								->setFixed(3,HX_("expression",98,11,9f,2e),HX_("talk",2c,b9,f6,4c))
            								->setFixed(4,HX_("text",ad,cc,f9,4c),HX_("DIALOGUE NOT FOUND",2d,fa,cb,ec))))));
            					}
HXDLIN(1263)					 ::Dynamic shit1 = shit;
HXLINE(1264)					if ((( (::Array< ::Dynamic>)(shit1->__Field(HX_("dialogue",18,2d,94,a7),::hx::paccDynamic)) )->length > 0)) {
HXLINE(1266)						game->startDialogue(shit1,music);
HXLINE(1267)						::psychlua::FunkinLua_obj::luaTrace(HX_("startDialogue: Successfully loaded dialogue",ba,12,25,dc),false,false,-16744448);
HXLINE(1268)						return true;
            					}
            					else {
HXLINE(1270)						::psychlua::FunkinLua_obj::luaTrace(HX_("startDialogue: Your dialogue file is badly formatted!",00,e6,fc,67),false,false,-65536);
            					}
            				}
            				else {
HXLINE(1274)					::psychlua::FunkinLua_obj::luaTrace(HX_("startDialogue: Dialogue file not found",f9,9d,dd,42),false,false,-65536);
HXLINE(1275)					if (game->endingSong) {
HXLINE(1276)						game->endSong();
            					}
            					else {
HXLINE(1278)						game->startCountdown();
            					}
            				}
HXLINE(1280)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1242)			 cpp::Reference<lua_State> l109 = this->lua;
HXDLIN(1242)			::llua::Lua_helper_obj::callbacks->set(HX_("startDialogue",9a,8f,4f,ac), ::Dynamic(new _hx_Closure_123(game)));
HXDLIN(1242)			linc::callbacks::add_callback_function(l109,HX_("startDialogue",9a,8f,4f,ac));
            		}
HXLINE(1282)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_125, ::states::PlayState,game) HXARGC(5)
            			bool _hx_run(::String videoFile, ::Dynamic __o_canSkip, ::Dynamic __o_forMidSong, ::Dynamic __o_shouldLoop, ::Dynamic __o_playOnLoad){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_124, ::states::PlayState,game) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1303_new)
HXLINE(1304)					::states::PlayState_obj::instance->inCutscene = false;
HXLINE(1305)					if (game->endingSong) {
HXLINE(1306)						game->endSong();
            					}
            					else {
HXLINE(1308)						game->startCountdown();
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            		 ::Dynamic canSkip = __o_canSkip;
            		if (::hx::IsNull(__o_canSkip)) canSkip = true;
            		 ::Dynamic forMidSong = __o_forMidSong;
            		if (::hx::IsNull(__o_forMidSong)) forMidSong = false;
            		 ::Dynamic shouldLoop = __o_shouldLoop;
            		if (::hx::IsNull(__o_shouldLoop)) shouldLoop = false;
            		 ::Dynamic playOnLoad = __o_playOnLoad;
            		if (::hx::IsNull(__o_playOnLoad)) playOnLoad = true;
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1282_new)
HXLINE(1301)				::states::PlayState_obj::instance->inCutscene = true;
HXLINE(1302)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_124(game)),null());
HXLINE(1310)				return true;
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE(1282)			 cpp::Reference<lua_State> l110 = this->lua;
HXDLIN(1282)			::llua::Lua_helper_obj::callbacks->set(HX_("startVideo",b9,ec,12,53), ::Dynamic(new _hx_Closure_125(game)));
HXDLIN(1282)			linc::callbacks::add_callback_function(l110,HX_("startVideo",b9,ec,12,53));
            		}
HXLINE(1314)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_126) HXARGC(3)
            			void _hx_run(::String sound, ::Dynamic __o_volume, ::Dynamic __o_loop){
            		 ::Dynamic volume = __o_volume;
            		if (::hx::IsNull(__o_volume)) volume = 1;
            		 ::Dynamic loop = __o_loop;
            		if (::hx::IsNull(__o_loop)) loop = false;
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1315_new)
HXLINE(1315)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1315)				_hx_tmp->playMusic(::backend::Paths_obj::returnSound((HX_("music/",ea,bf,1b,3f) + sound),null(),true,null()),volume,loop,null());
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1314)			 cpp::Reference<lua_State> l111 = this->lua;
HXDLIN(1314)			::llua::Lua_helper_obj::callbacks->set(HX_("playMusic",11,fe,3e,31), ::Dynamic(new _hx_Closure_126()));
HXDLIN(1314)			linc::callbacks::add_callback_function(l111,HX_("playMusic",11,fe,3e,31));
            		}
HXLINE(1317)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_128, ::states::PlayState,game) HXARGC(4)
            			::String _hx_run(::String sound, ::Dynamic __o_volume,::String tag, ::Dynamic __o_loop){
            		 ::Dynamic volume = __o_volume;
            		if (::hx::IsNull(__o_volume)) volume = 1;
            		 ::Dynamic loop = __o_loop;
            		if (::hx::IsNull(__o_loop)) loop = false;
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1317_new)
HXLINE(1317)				::Array< ::String > tag1 = ::Array_obj< ::String >::__new(1)->init(0,tag);
HXLINE(1318)				bool _hx_tmp;
HXDLIN(1318)				if (::hx::IsNotNull( tag1->__get(0) )) {
HXLINE(1318)					_hx_tmp = (tag1->__get(0).length > 0);
            				}
            				else {
HXLINE(1318)					_hx_tmp = false;
            				}
HXDLIN(1318)				if (_hx_tmp) {
HXLINE(1320)					::String originalTag = tag1->__get(0);
HXLINE(1321)					tag1[0] = ::psychlua::LuaUtils_obj::formatVariable((HX_("sound_",b0,a8,2e,32) + tag1->__get(0)));
HXLINE(1322)					 ::haxe::ds::StringMap variables = ::backend::MusicBeatState_obj::getVariables();
HXLINE(1323)					 ::Dynamic oldSnd = variables->get(tag1->__get(0));
HXLINE(1324)					if (::hx::IsNotNull( oldSnd )) {
HXLINE(1326)						oldSnd->__Field(HX_("stop",02,f0,5b,4c),::hx::paccDynamic)();
HXLINE(1327)						oldSnd->__Field(HX_("destroy",fa,2c,86,24),::hx::paccDynamic)();
            					}
HXLINE(1330)					{
            						HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_127, ::states::PlayState,game,::String,originalTag,::Array< ::String >,tag1, ::haxe::ds::StringMap,variables, ::Dynamic,loop) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1331_new)
HXLINE(1332)							if (!(( (bool)(loop) ))) {
HXLINE(1332)								variables->remove(tag1->__get(0));
            							}
HXLINE(1333)							if (::hx::IsNotNull( game )) {
HXLINE(1333)								game->callOnLuas(HX_("onSoundFinished",c2,2a,b1,b9),::cpp::VirtualArray_obj::__new(1)->init(0,originalTag),null(),null(),null());
            							}
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE(1330)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd value = ::flixel::FlxG_obj::sound;
HXDLIN(1330)						 ::openfl::media::Sound value1 = ::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + sound),null(),true,null());
HXDLIN(1330)						 ::Dynamic value2 = value->play(value1,volume,loop,null(),true, ::Dynamic(new _hx_Closure_127(game,originalTag,tag1,variables,loop)));
HXDLIN(1330)						variables->set(tag1->__get(0),value2);
            					}
HXLINE(1335)					return tag1->__get(0);
            				}
HXLINE(1337)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1337)				_hx_tmp1->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + sound),null(),true,null()),volume,null(),null(),null(),null());
HXLINE(1338)				return null();
            			}
            			HX_END_LOCAL_FUNC4(return)

HXLINE(1317)			 cpp::Reference<lua_State> l112 = this->lua;
HXDLIN(1317)			::llua::Lua_helper_obj::callbacks->set(HX_("playSound",3b,ba,b0,a1), ::Dynamic(new _hx_Closure_128(game)));
HXDLIN(1317)			linc::callbacks::add_callback_function(l112,HX_("playSound",3b,ba,b0,a1));
            		}
HXLINE(1340)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_129) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1341_new)
HXLINE(1341)				bool _hx_tmp;
HXDLIN(1341)				if (::hx::IsNotNull( tag )) {
HXLINE(1341)					_hx_tmp = (tag.length < 1);
            				}
            				else {
HXLINE(1341)					_hx_tmp = true;
            				}
HXDLIN(1341)				if (_hx_tmp) {
HXLINE(1343)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1344)						 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1344)						_this->cleanup(_this->autoDestroy,true);
            					}
            				}
            				else {
HXLINE(1348)					tag = ::psychlua::LuaUtils_obj::formatVariable((HX_("sound_",b0,a8,2e,32) + tag));
HXLINE(1349)					 ::haxe::ds::StringMap variables = ::backend::MusicBeatState_obj::getVariables();
HXLINE(1350)					 ::flixel::sound::FlxSound snd = ( ( ::flixel::sound::FlxSound)(variables->get(tag)) );
HXLINE(1351)					if (::hx::IsNotNull( snd )) {
HXLINE(1353)						snd->cleanup(snd->autoDestroy,true);
HXLINE(1354)						variables->remove(tag);
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1340)			 cpp::Reference<lua_State> l113 = this->lua;
HXDLIN(1340)			::llua::Lua_helper_obj::callbacks->set(HX_("stopSound",6d,c5,0e,91), ::Dynamic(new _hx_Closure_129()));
HXDLIN(1340)			linc::callbacks::add_callback_function(l113,HX_("stopSound",6d,c5,0e,91));
            		}
HXLINE(1358)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_130) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1359_new)
HXLINE(1359)				bool _hx_tmp;
HXDLIN(1359)				if (::hx::IsNotNull( tag )) {
HXLINE(1359)					_hx_tmp = (tag.length < 1);
            				}
            				else {
HXLINE(1359)					_hx_tmp = true;
            				}
HXDLIN(1359)				if (_hx_tmp) {
HXLINE(1361)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1362)						::flixel::FlxG_obj::sound->music->pause();
            					}
            				}
            				else {
HXLINE(1366)					tag = ::psychlua::LuaUtils_obj::formatVariable((HX_("sound_",b0,a8,2e,32) + tag));
HXLINE(1367)					 ::flixel::sound::FlxSound snd = ( ( ::flixel::sound::FlxSound)(::backend::MusicBeatState_obj::getVariables()->get(tag)) );
HXLINE(1368)					if (::hx::IsNotNull( snd )) {
HXLINE(1368)						snd->pause();
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1358)			 cpp::Reference<lua_State> l114 = this->lua;
HXDLIN(1358)			::llua::Lua_helper_obj::callbacks->set(HX_("pauseSound",f9,29,45,56), ::Dynamic(new _hx_Closure_130()));
HXDLIN(1358)			linc::callbacks::add_callback_function(l114,HX_("pauseSound",f9,29,45,56));
            		}
HXLINE(1371)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_131) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1372_new)
HXLINE(1372)				bool _hx_tmp;
HXDLIN(1372)				if (::hx::IsNotNull( tag )) {
HXLINE(1372)					_hx_tmp = (tag.length < 1);
            				}
            				else {
HXLINE(1372)					_hx_tmp = true;
            				}
HXDLIN(1372)				if (_hx_tmp) {
HXLINE(1374)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1375)						::flixel::FlxG_obj::sound->music->play(null(),null(),null());
            					}
            				}
            				else {
HXLINE(1379)					tag = ::psychlua::LuaUtils_obj::formatVariable((HX_("sound_",b0,a8,2e,32) + tag));
HXLINE(1380)					 ::flixel::sound::FlxSound snd = ( ( ::flixel::sound::FlxSound)(::backend::MusicBeatState_obj::getVariables()->get(tag)) );
HXLINE(1381)					if (::hx::IsNotNull( snd )) {
HXLINE(1381)						snd->play(null(),null(),null());
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1371)			 cpp::Reference<lua_State> l115 = this->lua;
HXDLIN(1371)			::llua::Lua_helper_obj::callbacks->set(HX_("resumeSound",e2,5f,96,51), ::Dynamic(new _hx_Closure_131()));
HXDLIN(1371)			linc::callbacks::add_callback_function(l115,HX_("resumeSound",e2,5f,96,51));
            		}
HXLINE(1384)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_132) HXARGC(4)
            			void _hx_run(::String tag,Float duration, ::Dynamic __o_fromValue, ::Dynamic __o_toValue){
            		Float fromValue = __o_fromValue.Default(0);
            		Float toValue = __o_toValue.Default(1);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1385_new)
HXLINE(1385)				bool _hx_tmp;
HXDLIN(1385)				if (::hx::IsNotNull( tag )) {
HXLINE(1385)					_hx_tmp = (tag.length < 1);
            				}
            				else {
HXLINE(1385)					_hx_tmp = true;
            				}
HXDLIN(1385)				if (_hx_tmp) {
HXLINE(1387)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1388)						 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1388)						 ::Dynamic onComplete = null();
HXDLIN(1388)						if (::hx::IsNull( _this->_channel )) {
HXLINE(1388)							_this->play(null(),null(),null());
            						}
HXDLIN(1388)						if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(1388)							_this->fadeTween->cancel();
            						}
HXDLIN(1388)						_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(fromValue,toValue,duration, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            					}
            				}
            				else {
HXLINE(1392)					tag = ::psychlua::LuaUtils_obj::formatVariable((HX_("sound_",b0,a8,2e,32) + tag));
HXLINE(1393)					 ::flixel::sound::FlxSound snd = ( ( ::flixel::sound::FlxSound)(::backend::MusicBeatState_obj::getVariables()->get(tag)) );
HXLINE(1394)					if (::hx::IsNotNull( snd )) {
HXLINE(1395)						 ::Dynamic onComplete1 = null();
HXDLIN(1395)						if (::hx::IsNull( snd->_channel )) {
HXLINE(1395)							snd->play(null(),null(),null());
            						}
HXDLIN(1395)						if (::hx::IsNotNull( snd->fadeTween )) {
HXLINE(1395)							snd->fadeTween->cancel();
            						}
HXDLIN(1395)						snd->fadeTween = ::flixel::tweens::FlxTween_obj::num(fromValue,toValue,duration, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete1)),snd->volumeTween_dyn());
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(1384)			 cpp::Reference<lua_State> l116 = this->lua;
HXDLIN(1384)			::llua::Lua_helper_obj::callbacks->set(HX_("soundFadeIn",b0,52,d8,97), ::Dynamic(new _hx_Closure_132()));
HXDLIN(1384)			linc::callbacks::add_callback_function(l116,HX_("soundFadeIn",b0,52,d8,97));
            		}
HXLINE(1398)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_133) HXARGC(3)
            			void _hx_run(::String tag,Float duration, ::Dynamic __o_toValue){
            		Float toValue = __o_toValue.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1399_new)
HXLINE(1399)				bool _hx_tmp;
HXDLIN(1399)				if (::hx::IsNotNull( tag )) {
HXLINE(1399)					_hx_tmp = (tag.length < 1);
            				}
            				else {
HXLINE(1399)					_hx_tmp = true;
            				}
HXDLIN(1399)				if (_hx_tmp) {
HXLINE(1401)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1402)						 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1402)						 ::Dynamic To = toValue;
HXDLIN(1402)						 ::Dynamic onComplete = null();
HXDLIN(1402)						if (::hx::IsNull( To )) {
HXLINE(1402)							To = 0;
            						}
HXDLIN(1402)						if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(1402)							_this->fadeTween->cancel();
            						}
HXDLIN(1402)						_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(To) ),duration, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            					}
            				}
            				else {
HXLINE(1406)					tag = ::psychlua::LuaUtils_obj::formatVariable((HX_("sound_",b0,a8,2e,32) + tag));
HXLINE(1407)					 ::flixel::sound::FlxSound snd = ( ( ::flixel::sound::FlxSound)(::backend::MusicBeatState_obj::getVariables()->get(tag)) );
HXLINE(1408)					if (::hx::IsNotNull( snd )) {
HXLINE(1409)						 ::Dynamic To1 = toValue;
HXDLIN(1409)						 ::Dynamic onComplete1 = null();
HXDLIN(1409)						if (::hx::IsNull( To1 )) {
HXLINE(1409)							To1 = 0;
            						}
HXDLIN(1409)						if (::hx::IsNotNull( snd->fadeTween )) {
HXLINE(1409)							snd->fadeTween->cancel();
            						}
HXDLIN(1409)						snd->fadeTween = ::flixel::tweens::FlxTween_obj::num(snd->_volume,( (Float)(To1) ),duration, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete1)),snd->volumeTween_dyn());
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1398)			 cpp::Reference<lua_State> l117 = this->lua;
HXDLIN(1398)			::llua::Lua_helper_obj::callbacks->set(HX_("soundFadeOut",63,9b,74,45), ::Dynamic(new _hx_Closure_133()));
HXDLIN(1398)			linc::callbacks::add_callback_function(l117,HX_("soundFadeOut",63,9b,74,45));
            		}
HXLINE(1412)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_134) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1413_new)
HXLINE(1413)				bool _hx_tmp;
HXDLIN(1413)				if (::hx::IsNotNull( tag )) {
HXLINE(1413)					_hx_tmp = (tag.length < 1);
            				}
            				else {
HXLINE(1413)					_hx_tmp = true;
            				}
HXDLIN(1413)				if (_hx_tmp) {
HXLINE(1415)					bool _hx_tmp1;
HXDLIN(1415)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1415)						_hx_tmp1 = ::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->fadeTween );
            					}
            					else {
HXLINE(1415)						_hx_tmp1 = false;
            					}
HXDLIN(1415)					if (_hx_tmp1) {
HXLINE(1416)						::flixel::FlxG_obj::sound->music->fadeTween->cancel();
            					}
            				}
            				else {
HXLINE(1420)					tag = ::psychlua::LuaUtils_obj::formatVariable((HX_("sound_",b0,a8,2e,32) + tag));
HXLINE(1421)					 ::flixel::sound::FlxSound snd = ( ( ::flixel::sound::FlxSound)(::backend::MusicBeatState_obj::getVariables()->get(tag)) );
HXLINE(1422)					bool _hx_tmp2;
HXDLIN(1422)					if (::hx::IsNotNull( snd )) {
HXLINE(1422)						_hx_tmp2 = ::hx::IsNotNull( snd->fadeTween );
            					}
            					else {
HXLINE(1422)						_hx_tmp2 = false;
            					}
HXDLIN(1422)					if (_hx_tmp2) {
HXLINE(1423)						snd->fadeTween->cancel();
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1412)			 cpp::Reference<lua_State> l118 = this->lua;
HXDLIN(1412)			::llua::Lua_helper_obj::callbacks->set(HX_("soundFadeCancel",c5,a5,96,fc), ::Dynamic(new _hx_Closure_134()));
HXDLIN(1412)			linc::callbacks::add_callback_function(l118,HX_("soundFadeCancel",c5,a5,96,fc));
            		}
HXLINE(1426)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_135) HXARGC(1)
            			Float _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1426_new)
HXLINE(1427)				bool _hx_tmp;
HXDLIN(1427)				if (::hx::IsNotNull( tag )) {
HXLINE(1427)					_hx_tmp = (tag.length < 1);
            				}
            				else {
HXLINE(1427)					_hx_tmp = true;
            				}
HXDLIN(1427)				if (_hx_tmp) {
HXLINE(1429)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1430)						return ::flixel::FlxG_obj::sound->music->_volume;
            					}
            				}
            				else {
HXLINE(1434)					tag = ::psychlua::LuaUtils_obj::formatVariable((HX_("sound_",b0,a8,2e,32) + tag));
HXLINE(1435)					 ::flixel::sound::FlxSound snd = ( ( ::flixel::sound::FlxSound)(::backend::MusicBeatState_obj::getVariables()->get(tag)) );
HXLINE(1436)					if (::hx::IsNotNull( snd )) {
HXLINE(1436)						return snd->_volume;
            					}
            				}
HXLINE(1438)				return ( (Float)(0) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1426)			 cpp::Reference<lua_State> l119 = this->lua;
HXDLIN(1426)			::llua::Lua_helper_obj::callbacks->set(HX_("getSoundVolume",13,83,1e,9a), ::Dynamic(new _hx_Closure_135()));
HXDLIN(1426)			linc::callbacks::add_callback_function(l119,HX_("getSoundVolume",13,83,1e,9a));
            		}
HXLINE(1440)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_136) HXARGC(2)
            			void _hx_run(::String tag,Float value){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1441_new)
HXLINE(1441)				bool _hx_tmp;
HXDLIN(1441)				if (::hx::IsNotNull( tag )) {
HXLINE(1441)					_hx_tmp = (tag.length < 1);
            				}
            				else {
HXLINE(1441)					_hx_tmp = true;
            				}
HXDLIN(1441)				if (_hx_tmp) {
HXLINE(1443)					tag = ::psychlua::LuaUtils_obj::formatVariable((HX_("sound_",b0,a8,2e,32) + tag));
HXLINE(1444)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1446)						::flixel::FlxG_obj::sound->music->set_volume(value);
HXLINE(1447)						return;
            					}
            				}
            				else {
HXLINE(1452)					tag = ::psychlua::LuaUtils_obj::formatVariable((HX_("sound_",b0,a8,2e,32) + tag));
HXLINE(1453)					 ::flixel::sound::FlxSound snd = ( ( ::flixel::sound::FlxSound)(::backend::MusicBeatState_obj::getVariables()->get(tag)) );
HXLINE(1454)					if (::hx::IsNotNull( snd )) {
HXLINE(1454)						snd->set_volume(value);
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1440)			 cpp::Reference<lua_State> l120 = this->lua;
HXDLIN(1440)			::llua::Lua_helper_obj::callbacks->set(HX_("setSoundVolume",87,6b,3e,ba), ::Dynamic(new _hx_Closure_136()));
HXDLIN(1440)			linc::callbacks::add_callback_function(l120,HX_("setSoundVolume",87,6b,3e,ba));
            		}
HXLINE(1457)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_137) HXARGC(1)
            			Float _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1457_new)
HXLINE(1458)				bool _hx_tmp;
HXDLIN(1458)				if (::hx::IsNotNull( tag )) {
HXLINE(1458)					_hx_tmp = (tag.length < 1);
            				}
            				else {
HXLINE(1458)					_hx_tmp = true;
            				}
HXDLIN(1458)				if (_hx_tmp) {
HXLINE(1460)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1460)						return ::flixel::FlxG_obj::sound->music->_time;
            					}
            					else {
HXLINE(1460)						return ( (Float)(0) );
            					}
            				}
HXLINE(1462)				tag = ::psychlua::LuaUtils_obj::formatVariable((HX_("sound_",b0,a8,2e,32) + tag));
HXLINE(1463)				 ::flixel::sound::FlxSound snd = ( ( ::flixel::sound::FlxSound)(::backend::MusicBeatState_obj::getVariables()->get(tag)) );
HXLINE(1464)				if (::hx::IsNotNull( snd )) {
HXLINE(1464)					return snd->_time;
            				}
            				else {
HXLINE(1464)					return ( (Float)(0) );
            				}
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1457)			 cpp::Reference<lua_State> l121 = this->lua;
HXDLIN(1457)			::llua::Lua_helper_obj::callbacks->set(HX_("getSoundTime",06,35,21,67), ::Dynamic(new _hx_Closure_137()));
HXDLIN(1457)			linc::callbacks::add_callback_function(l121,HX_("getSoundTime",06,35,21,67));
            		}
HXLINE(1466)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_138) HXARGC(2)
            			void _hx_run(::String tag,Float value){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1467_new)
HXLINE(1467)				bool _hx_tmp;
HXDLIN(1467)				if (::hx::IsNotNull( tag )) {
HXLINE(1467)					_hx_tmp = (tag.length < 1);
            				}
            				else {
HXLINE(1467)					_hx_tmp = true;
            				}
HXDLIN(1467)				if (_hx_tmp) {
HXLINE(1469)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1471)						::flixel::FlxG_obj::sound->music->set_time(value);
HXLINE(1472)						return;
            					}
            				}
            				else {
HXLINE(1477)					tag = ::psychlua::LuaUtils_obj::formatVariable((HX_("sound_",b0,a8,2e,32) + tag));
HXLINE(1478)					 ::flixel::sound::FlxSound snd = ( ( ::flixel::sound::FlxSound)(::backend::MusicBeatState_obj::getVariables()->get(tag)) );
HXLINE(1479)					if (::hx::IsNotNull( snd )) {
HXLINE(1479)						snd->set_time(value);
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1466)			 cpp::Reference<lua_State> l122 = this->lua;
HXDLIN(1466)			::llua::Lua_helper_obj::callbacks->set(HX_("setSoundTime",7a,58,1a,7c), ::Dynamic(new _hx_Closure_138()));
HXDLIN(1466)			linc::callbacks::add_callback_function(l122,HX_("setSoundTime",7a,58,1a,7c));
            		}
HXLINE(1482)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_139) HXARGC(1)
            			Float _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1482_new)
HXLINE(1484)				tag = ::psychlua::LuaUtils_obj::formatVariable((HX_("sound_",b0,a8,2e,32) + tag));
HXLINE(1485)				 ::flixel::sound::FlxSound snd = ( ( ::flixel::sound::FlxSound)(::backend::MusicBeatState_obj::getVariables()->get(tag)) );
HXLINE(1486)				if (::hx::IsNotNull( snd )) {
HXLINE(1486)					return snd->_pitch;
            				}
            				else {
HXLINE(1486)					return ( (Float)(1) );
            				}
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1482)			 cpp::Reference<lua_State> l123 = this->lua;
HXDLIN(1482)			::llua::Lua_helper_obj::callbacks->set(HX_("getSoundPitch",a7,2c,58,88), ::Dynamic(new _hx_Closure_139()));
HXDLIN(1482)			linc::callbacks::add_callback_function(l123,HX_("getSoundPitch",a7,2c,58,88));
            		}
HXLINE(1492)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_140) HXARGC(3)
            			void _hx_run(::String tag,Float value, ::Dynamic __o_doPause){
            		 ::Dynamic doPause = __o_doPause;
            		if (::hx::IsNull(__o_doPause)) doPause = false;
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1492_new)
HXLINE(1494)				tag = ::psychlua::LuaUtils_obj::formatVariable((HX_("sound_",b0,a8,2e,32) + tag));
HXLINE(1495)				 ::flixel::sound::FlxSound snd = ( ( ::flixel::sound::FlxSound)(::backend::MusicBeatState_obj::getVariables()->get(tag)) );
HXLINE(1496)				if (::hx::IsNotNull( snd )) {
HXLINE(1498)					bool wasResumed = ::hx::IsNotNull( snd->_channel );
HXLINE(1499)					if (( (bool)(doPause) )) {
HXLINE(1499)						snd->pause();
            					}
HXLINE(1500)					snd->set_pitch(value);
HXLINE(1501)					bool _hx_tmp;
HXDLIN(1501)					if (( (bool)(doPause) )) {
HXLINE(1501)						_hx_tmp = wasResumed;
            					}
            					else {
HXLINE(1501)						_hx_tmp = false;
            					}
HXDLIN(1501)					if (_hx_tmp) {
HXLINE(1501)						snd->play(null(),null(),null());
            					}
            				}
HXLINE(1504)				bool _hx_tmp1;
HXDLIN(1504)				if (::hx::IsNotNull( tag )) {
HXLINE(1504)					_hx_tmp1 = (tag.length < 1);
            				}
            				else {
HXLINE(1504)					_hx_tmp1 = true;
            				}
HXDLIN(1504)				if (_hx_tmp1) {
HXLINE(1506)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1508)						bool wasResumed1 = ::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel );
HXLINE(1509)						if (( (bool)(doPause) )) {
HXLINE(1509)							::flixel::FlxG_obj::sound->music->pause();
            						}
HXLINE(1510)						::flixel::FlxG_obj::sound->music->set_pitch(value);
HXLINE(1511)						bool _hx_tmp2;
HXDLIN(1511)						if (( (bool)(doPause) )) {
HXLINE(1511)							_hx_tmp2 = wasResumed1;
            						}
            						else {
HXLINE(1511)							_hx_tmp2 = false;
            						}
HXDLIN(1511)						if (_hx_tmp2) {
HXLINE(1511)							::flixel::FlxG_obj::sound->music->play(null(),null(),null());
            						}
HXLINE(1512)						return;
            					}
            				}
            				else {
HXLINE(1517)					 ::flixel::sound::FlxSound snd1 = ( ( ::flixel::sound::FlxSound)(::backend::MusicBeatState_obj::getVariables()->get(tag)) );
HXLINE(1518)					if (::hx::IsNotNull( snd1 )) {
HXLINE(1520)						bool wasResumed2 = ::hx::IsNotNull( snd1->_channel );
HXLINE(1521)						if (( (bool)(doPause) )) {
HXLINE(1521)							snd1->pause();
            						}
HXLINE(1522)						snd1->set_pitch(value);
HXLINE(1523)						bool _hx_tmp3;
HXDLIN(1523)						if (( (bool)(doPause) )) {
HXLINE(1523)							_hx_tmp3 = wasResumed2;
            						}
            						else {
HXLINE(1523)							_hx_tmp3 = false;
            						}
HXDLIN(1523)						if (_hx_tmp3) {
HXLINE(1523)							snd1->play(null(),null(),null());
            						}
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1492)			 cpp::Reference<lua_State> l124 = this->lua;
HXDLIN(1492)			::llua::Lua_helper_obj::callbacks->set(HX_("setSoundPitch",b3,0e,5e,cd), ::Dynamic(new _hx_Closure_140()));
HXDLIN(1492)			linc::callbacks::add_callback_function(l124,HX_("setSoundPitch",b3,0e,5e,cd));
            		}
HXLINE(1532)		this->addLocalCallback(HX_("getModSetting",24,8b,81,ff), ::Dynamic(new _hx_Closure_141(_gthis)));
HXLINE(1550)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_142) HXARGC(2)
            			void _hx_run( ::Dynamic __o_text,::String __o_color){
            		 ::Dynamic text = __o_text;
            		if (::hx::IsNull(__o_text)) text = HX_("",00,00,00,00);
            		::String color = __o_color;
            		if (::hx::IsNull(__o_color)) color = HX_("WHITE",89,82,ab,47);
            				HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1550_new)
HXLINE(1550)				 ::states::PlayState _hx_tmp = ::states::PlayState_obj::instance;
HXDLIN(1550)				 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN(1550)				::String color1 = ::StringTools_obj::trim(hideChars->split(color)->join(HX_("",00,00,00,00)));
HXDLIN(1550)				if (::StringTools_obj::startsWith(color1,HX_("0x",48,2a,00,00))) {
HXLINE(  59)					color1 = color1.substring((color1.length - 6),null());
            				}
HXLINE(1550)				 ::Dynamic colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color1);
HXDLIN(1550)				if (::hx::IsNull( colorNum )) {
HXLINE(  62)					colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color1));
            				}
HXLINE(1550)				int _hx_tmp1;
HXDLIN(1550)				if (::hx::IsNotNull( colorNum )) {
HXLINE(1550)					_hx_tmp1 = ( (int)(colorNum) );
            				}
            				else {
HXLINE(1550)					_hx_tmp1 = -1;
            				}
HXDLIN(1550)				_hx_tmp->addTextToDebug(( (::String)(text) ),_hx_tmp1);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1550)			 cpp::Reference<lua_State> l125 = this->lua;
HXDLIN(1550)			::llua::Lua_helper_obj::callbacks->set(HX_("debugPrint",da,28,6f,c7), ::Dynamic(new _hx_Closure_142()));
HXDLIN(1550)			linc::callbacks::add_callback_function(l125,HX_("debugPrint",da,28,6f,c7));
            		}
HXLINE(1552)		this->addLocalCallback(HX_("close",b8,17,63,48), ::Dynamic(new _hx_Closure_143(_gthis,scriptName1)));
HXLINE(1558)		::backend::DiscordClient_obj::addLuaCallbacks(this->lua);
HXLINE(1559)		::backend::Achievements_obj::addLuaCallbacks(this->lua);
HXLINE(1560)		::backend::Language_obj::addLuaCallbacks(this->lua);
HXLINE(1561)		::psychlua::HScript_obj::implement(::hx::ObjectPtr<OBJ_>(this));
HXLINE(1562)		::psychlua::FlxAnimateFunctions_obj::implement(::hx::ObjectPtr<OBJ_>(this));
HXLINE(1563)		::psychlua::ReflectionFunctions_obj::implement(::hx::ObjectPtr<OBJ_>(this));
HXLINE(1564)		::psychlua::TextFunctions_obj::implement(::hx::ObjectPtr<OBJ_>(this));
HXLINE(1565)		::psychlua::ExtraFunctions_obj::implement(::hx::ObjectPtr<OBJ_>(this));
HXLINE(1566)		::psychlua::CustomSubstate_obj::implement(::hx::ObjectPtr<OBJ_>(this));
HXLINE(1567)		::psychlua::ShaderFunctions_obj::implement(::hx::ObjectPtr<OBJ_>(this));
HXLINE(1568)		::psychlua::DeprecatedFunctions_obj::implement(::hx::ObjectPtr<OBJ_>(this));
HXLINE(1570)		{
HXLINE(1570)			::Dynamic map = ::psychlua::FunkinLua_obj::customFunctions;
HXDLIN(1570)			::Dynamic _g_map = map;
HXDLIN(1570)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN(1570)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1570)				::String key2 = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(1570)				 ::Dynamic _g_value2 = ::haxe::IMap_obj::get(_g_map,key2);
HXDLIN(1570)				::String _g_key2 = key2;
HXDLIN(1570)				::String name = _g_key2;
HXDLIN(1570)				 ::Dynamic func = _g_value2;
HXLINE(1572)				if (::hx::IsNotNull( func )) {
HXLINE(1573)					 cpp::Reference<lua_State> l126 = this->lua;
HXDLIN(1573)					::llua::Lua_helper_obj::callbacks->set(name,func);
HXDLIN(1573)					linc::callbacks::add_callback_function(l126,name);
            				}
            			}
            		}
HXLINE(1576)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1577)			bool isString = !(::sys::FileSystem_obj::exists(scriptName1->__get(0)));
HXLINE(1578)			 ::Dynamic result = null();
HXLINE(1579)			if (!(isString)) {
HXLINE(1580)				result = luaL_dofile(this->lua,scriptName1->__get(0));
            			}
            			else {
HXLINE(1582)				result = luaL_dostring(this->lua,scriptName1->__get(0));
            			}
HXLINE(1584)			::String resultStr = linc::lua::tostring(this->lua,( (int)(result) ));
HXLINE(1585)			bool _hx_tmp11;
HXDLIN(1585)			if (::hx::IsNotNull( resultStr )) {
HXLINE(1585)				_hx_tmp11 = ::hx::IsNotEq( result,0 );
            			}
            			else {
HXLINE(1585)				_hx_tmp11 = false;
            			}
HXDLIN(1585)			if (_hx_tmp11) {
HXLINE(1586)				::haxe::Log_obj::trace(resultStr,::hx::SourceInfo(HX_("source/psychlua/FunkinLua.hx",f5,9a,41,5d),1586,HX_("psychlua.FunkinLua",96,1b,92,ca),HX_("new",60,d0,53,00)));
HXLINE(1588)				::lime::app::Application_obj::current->_hx___window->alert(resultStr,HX_("Error on lua script!",45,f2,65,3e));
HXLINE(1592)				this->lua = null();
HXLINE(1593)				return;
            			}
HXLINE(1595)			if (isString) {
HXLINE(1595)				scriptName1[0] = HX_("unknown",8a,23,7b,e1);
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(1596)				 ::Dynamic e = _g;
HXLINE(1597)				::haxe::Log_obj::trace(e,::hx::SourceInfo(HX_("source/psychlua/FunkinLua.hx",f5,9a,41,5d),1597,HX_("psychlua.FunkinLua",96,1b,92,ca),HX_("new",60,d0,53,00)));
HXLINE(1598)				return;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(1600)		::haxe::Log_obj::trace((HX_("lua file loaded succesfully:",5f,de,e6,ea) + scriptName1->__get(0)),::hx::SourceInfo(HX_("source/psychlua/FunkinLua.hx",f5,9a,41,5d),1600,HX_("psychlua.FunkinLua",96,1b,92,ca),HX_("new",60,d0,53,00)));
HXLINE(1602)		this->call(HX_("onCreate",7b,5d,bc,5b),::cpp::VirtualArray_obj::__new(0));
            	}

Dynamic FunkinLua_obj::__CreateEmpty() { return new FunkinLua_obj; }

void *FunkinLua_obj::_hx_vtable = 0;

Dynamic FunkinLua_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FunkinLua_obj > _hx_result = new FunkinLua_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FunkinLua_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x44b73a2a;
}

 ::Dynamic FunkinLua_obj::call(::String func,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1608_call)
HXLINE(1609)		if (this->closed) {
HXLINE(1609)			return ::psychlua::LuaUtils_obj::Function_Continue;
            		}
HXLINE(1611)		this->lastCalledFunction = func;
HXLINE(1612)		::psychlua::FunkinLua_obj::lastCalledScript = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1613)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1614)			if (::hx::IsNull( this->lua )) {
HXLINE(1614)				return ::psychlua::LuaUtils_obj::Function_Continue;
            			}
HXLINE(1616)			lua_getglobal(this->lua,func);
HXLINE(1617)			int type = lua_type(this->lua,-1);
HXLINE(1619)			if ((type != 6)) {
HXLINE(1620)				if ((type > 0)) {
HXLINE(1621)					::psychlua::FunkinLua_obj::luaTrace(((((HX_("ERROR (",b0,59,de,69) + func) + HX_("): attempt to call a ",3e,66,c9,81)) + ::psychlua::LuaUtils_obj::typeToString(type)) + HX_(" value",51,0b,24,fd)),false,false,-65536);
            				}
HXLINE(1623)				lua_pop(this->lua,1);
HXLINE(1624)				return ::psychlua::LuaUtils_obj::Function_Continue;
            			}
HXLINE(1627)			{
HXLINE(1627)				int _g = 0;
HXDLIN(1627)				while((_g < args->get_length())){
HXLINE(1627)					 ::Dynamic arg = args->__get(_g);
HXDLIN(1627)					_g = (_g + 1);
HXDLIN(1627)					::llua::Convert_obj::toLua(this->lua,arg);
            				}
            			}
HXLINE(1628)			int status = lua_pcall(this->lua,args->get_length(),1,0);
HXLINE(1631)			if ((status != 0)) {
HXLINE(1632)				::String error = this->getErrorMessage(status);
HXLINE(1633)				::psychlua::FunkinLua_obj::luaTrace((((HX_("ERROR (",b0,59,de,69) + func) + HX_("): ",0f,4f,1f,00)) + error),false,false,-65536);
HXLINE(1634)				return ::psychlua::LuaUtils_obj::Function_Continue;
            			}
HXLINE(1638)			 ::Dynamic result = ::llua::Convert_obj::fromLua(this->lua,-1);
HXLINE(1639)			if (::hx::IsNull( result )) {
HXLINE(1639)				result = ::psychlua::LuaUtils_obj::Function_Continue;
            			}
HXLINE(1641)			lua_pop(this->lua,1);
HXLINE(1642)			if (this->closed) {
HXLINE(1642)				this->stop();
            			}
HXLINE(1643)			return result;
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g1 = _hx_e;
HXLINE(1645)				{
HXLINE(1645)					null();
            				}
HXDLIN(1645)				 ::Dynamic e = _g1;
HXLINE(1646)				::haxe::Log_obj::trace(e,::hx::SourceInfo(HX_("source/psychlua/FunkinLua.hx",f5,9a,41,5d),1646,HX_("psychlua.FunkinLua",96,1b,92,ca),HX_("call",9e,18,ba,41)));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(1648)		return ::psychlua::LuaUtils_obj::Function_Continue;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,call,return )

void FunkinLua_obj::set(::String variable, ::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1651_set)
HXLINE(1652)		if (::hx::IsNull( this->lua )) {
HXLINE(1653)			return;
            		}
HXLINE(1656)		::llua::Convert_obj::toLua(this->lua,data);
HXLINE(1657)		lua_setglobal(this->lua,variable);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,set,(void))

void FunkinLua_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1660_stop)
HXLINE(1661)		this->closed = true;
HXLINE(1663)		if (::hx::IsNull( this->lua )) {
HXLINE(1664)			return;
            		}
HXLINE(1666)		lua_close(this->lua);
HXLINE(1667)		this->lua = null();
HXLINE(1669)		if (::hx::IsNotNull( this->hscript )) {
HXLINE(1671)			this->hscript->destroy();
HXLINE(1672)			this->hscript = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunkinLua_obj,stop,(void))

::String FunkinLua_obj::oldTweenFunction(::String tag,::String vars, ::Dynamic tweenValue,Float duration,::String ease,::String funcName){
            	HX_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1678_oldTweenFunction)
HXDLIN(1678)		::Array< ::String > tag1 = ::Array_obj< ::String >::__new(1)->init(0,tag);
HXLINE(1679)		 ::Dynamic target = ::psychlua::LuaUtils_obj::tweenPrepare(tag1->__get(0),vars);
HXLINE(1680)		 ::haxe::ds::StringMap variables = ::backend::MusicBeatState_obj::getVariables();
HXLINE(1681)		if (::hx::IsNotNull( target )) {
HXLINE(1683)			if (::hx::IsNotNull( tag1->__get(0) )) {
HXLINE(1685)				::String originalTag = tag1->__get(0);
HXLINE(1686)				tag1[0] = ::psychlua::LuaUtils_obj::formatVariable((HX_("tween_",94,73,24,29) + tag1->__get(0)));
HXLINE(1687)				{
            					HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_0,::String,vars,::String,originalTag,::Array< ::String >,tag1, ::haxe::ds::StringMap,variables) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1689_oldTweenFunction)
HXLINE(1690)						variables->remove(tag1->__get(0));
HXLINE(1691)						if (::hx::IsNotNull( ::states::PlayState_obj::instance )) {
HXLINE(1691)							::states::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(2)->init(0,originalTag)->init(1,vars),null(),null(),null());
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1687)					 ::Dynamic value = ::flixel::tweens::FlxTween_obj::tween(target,tweenValue,duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::psychlua::LuaUtils_obj::getTweenEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(vars,originalTag,tag1,variables)))));
HXDLIN(1687)					variables->set(tag1->__get(0),value);
            				}
            			}
            			else {
HXLINE(1695)				::flixel::tweens::FlxTween_obj::tween(target,tweenValue,duration, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::psychlua::LuaUtils_obj::getTweenEaseByString(ease))));
            			}
HXLINE(1696)			return tag1->__get(0);
            		}
            		else {
HXLINE(1698)			::psychlua::FunkinLua_obj::luaTrace((((HX_("",00,00,00,00) + funcName) + HX_(": Couldnt find object: ",0d,a7,c3,c1)) + vars),false,false,-65536);
            		}
HXLINE(1699)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC6(FunkinLua_obj,oldTweenFunction,return )

::String FunkinLua_obj::noteTweenFunction(::String tag,int note, ::Dynamic data,Float duration,::String ease){
            	HX_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1703_noteTweenFunction)
HXDLIN(1703)		::Array< ::String > tag1 = ::Array_obj< ::String >::__new(1)->init(0,tag);
HXLINE(1704)		if (::hx::IsNull( ::states::PlayState_obj::instance )) {
HXLINE(1704)			return null();
            		}
HXLINE(1706)		 ::objects::StrumNote strumNote = Dynamic( ::states::PlayState_obj::instance->strumLineNotes->members->__get(::hx::Mod(note,::states::PlayState_obj::instance->strumLineNotes->length))).StaticCast<  ::objects::StrumNote >();
HXLINE(1707)		if (::hx::IsNull( strumNote )) {
HXLINE(1707)			return null();
            		}
HXLINE(1709)		if (::hx::IsNotNull( tag1->__get(0) )) {
HXLINE(1711)			::String originalTag = tag1->__get(0);
HXLINE(1712)			tag1[0] = ::psychlua::LuaUtils_obj::formatVariable((HX_("tween_",94,73,24,29) + tag1->__get(0)));
HXLINE(1713)			::psychlua::LuaUtils_obj::cancelTween(tag1->__get(0));
HXLINE(1715)			 ::haxe::ds::StringMap variables = ::backend::MusicBeatState_obj::getVariables();
HXLINE(1716)			{
            				HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0,::String,originalTag,::Array< ::String >,tag1, ::haxe::ds::StringMap,variables) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween twn){
            					HX_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1718_noteTweenFunction)
HXLINE(1719)					variables->remove(tag1->__get(0));
HXLINE(1720)					if (::hx::IsNotNull( ::states::PlayState_obj::instance )) {
HXLINE(1720)						::states::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,originalTag),null(),null(),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1716)				 ::Dynamic value = ::flixel::tweens::FlxTween_obj::tween(strumNote,data,duration, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::psychlua::LuaUtils_obj::getTweenEaseByString(ease))
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(originalTag,tag1,variables)))));
HXDLIN(1716)				variables->set(tag1->__get(0),value);
            			}
HXLINE(1723)			return tag1->__get(0);
            		}
            		else {
HXLINE(1725)			::flixel::tweens::FlxTween_obj::tween(strumNote,data,duration, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::psychlua::LuaUtils_obj::getTweenEaseByString(ease))));
            		}
HXLINE(1726)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC5(FunkinLua_obj,noteTweenFunction,return )

::String FunkinLua_obj::findScript(::String scriptFile,::String __o_ext){
            		::String ext = __o_ext;
            		if (::hx::IsNull(__o_ext)) ext = HX_(".lua",4a,2a,ba,1e);
            	HX_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1756_findScript)
HXLINE(1757)		if (!(::StringTools_obj::endsWith(scriptFile,ext))) {
HXLINE(1757)			scriptFile = (scriptFile + ext);
            		}
HXLINE(1758)		::String path = ::backend::Paths_obj::getPath(scriptFile,HX_("TEXT",ad,94,ba,37),null(),null());
HXLINE(1760)		if (::sys::FileSystem_obj::exists(path)) {
HXLINE(1765)			return path;
            		}
            		else {
HXLINE(1768)			if (::sys::FileSystem_obj::exists(scriptFile)) {
HXLINE(1773)				return scriptFile;
            			}
            		}
HXLINE(1775)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,findScript,return )

::String FunkinLua_obj::getErrorMessage(int status){
            	HX_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1778_getErrorMessage)
HXLINE(1779)		::String v = linc::lua::tostring(this->lua,-1);
HXLINE(1780)		lua_pop(this->lua,1);
HXLINE(1782)		if (::hx::IsNotNull( v )) {
HXLINE(1782)			v = ::StringTools_obj::trim(v);
            		}
HXLINE(1783)		bool _hx_tmp;
HXDLIN(1783)		if (::hx::IsNotNull( v )) {
HXLINE(1783)			_hx_tmp = (v == HX_("",00,00,00,00));
            		}
            		else {
HXLINE(1783)			_hx_tmp = true;
            		}
HXDLIN(1783)		if (_hx_tmp) {
HXLINE(1784)			switch((int)(status)){
            				case (int)2: {
HXLINE(1785)					return HX_("Runtime Error",40,fe,ae,fe);
            				}
            				break;
            				case (int)4: {
HXLINE(1786)					return HX_("Memory Allocation Error",a7,0d,34,8f);
            				}
            				break;
            				case (int)5: {
HXLINE(1787)					return HX_("Critical Error",87,29,36,da);
            				}
            				break;
            			}
HXLINE(1789)			return HX_("Unknown Error",72,7e,3c,a3);
            		}
HXLINE(1792)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,getErrorMessage,return )

void FunkinLua_obj::addLocalCallback(::String name, ::Dynamic myFunction){
            	HX_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1797_addLocalCallback)
HXLINE(1798)		this->callbacks->set(name,myFunction);
HXLINE(1799)		{
HXLINE(1799)			 cpp::Reference<lua_State> l = this->lua;
HXDLIN(1799)			 ::Dynamic f = null();
HXDLIN(1799)			::llua::Lua_helper_obj::callbacks->set(name,f);
HXDLIN(1799)			linc::callbacks::add_callback_function(l,name);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,addLocalCallback,(void))

bool FunkinLua_obj::initLuaShader(::String name){
            	HX_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1807_initLuaShader)
HXLINE(1808)		if (!(::backend::ClientPrefs_obj::data->shaders)) {
HXLINE(1808)			return false;
            		}
HXLINE(1811)		if (this->runtimeShaders->exists(name)) {
HXLINE(1813)			::Array< ::String > shaderData = ( (::Array< ::String >)(this->runtimeShaders->get(name)) );
HXLINE(1814)			bool _hx_tmp;
HXDLIN(1814)			if (::hx::IsNotNull( shaderData )) {
HXLINE(1814)				if (::hx::IsNull( shaderData->__get(0) )) {
HXLINE(1814)					_hx_tmp = ::hx::IsNotNull( shaderData->__get(1) );
            				}
            				else {
HXLINE(1814)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(1814)				_hx_tmp = false;
            			}
HXDLIN(1814)			if (_hx_tmp) {
HXLINE(1816)				::psychlua::FunkinLua_obj::luaTrace(((HX_("Shader ",3b,a9,d7,2c) + name) + HX_(" was already initialized!",8c,8e,cf,cf)),null(),null(),null());
HXLINE(1817)				return true;
            			}
            		}
HXLINE(1821)		::String file = HX_("shaders/",c1,f6,2a,36);
HXDLIN(1821)		if (::hx::IsNull( file )) {
HXLINE(1821)			file = HX_("",00,00,00,00);
            		}
HXDLIN(1821)		::Array< ::String > foldersToCheck = ::Array_obj< ::String >::__new(1)->init(0,(HX_("assets/shared/",1e,69,1e,47) + file));
HXLINE(1823)		::String key = HX_("shaders/",c1,f6,2a,36);
HXDLIN(1823)		if (::hx::IsNull( key )) {
HXLINE(1823)			key = HX_("",00,00,00,00);
            		}
HXDLIN(1823)		foldersToCheck->push((HX_("mods/",9e,2f,58,0c) + key));
HXLINE(1824)		bool _hx_tmp1;
HXDLIN(1824)		if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE(1824)			_hx_tmp1 = (::backend::Mods_obj::currentModDirectory.length > 0);
            		}
            		else {
HXLINE(1824)			_hx_tmp1 = false;
            		}
HXDLIN(1824)		if (_hx_tmp1) {
HXLINE(1825)			::String key1 = (::backend::Mods_obj::currentModDirectory + HX_("/shaders/",f0,3d,7d,f0));
HXDLIN(1825)			if (::hx::IsNull( key1 )) {
HXLINE(1825)				key1 = HX_("",00,00,00,00);
            			}
HXDLIN(1825)			foldersToCheck->insert(0,(HX_("mods/",9e,2f,58,0c) + key1));
            		}
HXLINE(1827)		{
HXLINE(1827)			int _g = 0;
HXDLIN(1827)			::Array< ::String > _g1 = ::backend::Mods_obj::globalMods;
HXDLIN(1827)			while((_g < _g1->length)){
HXLINE(1827)				::String mod = _g1->__get(_g);
HXDLIN(1827)				_g = (_g + 1);
HXLINE(1828)				::String key2 = (mod + HX_("/shaders/",f0,3d,7d,f0));
HXDLIN(1828)				if (::hx::IsNull( key2 )) {
HXLINE(1828)					key2 = HX_("",00,00,00,00);
            				}
HXDLIN(1828)				foldersToCheck->insert(0,(HX_("mods/",9e,2f,58,0c) + key2));
            			}
            		}
HXLINE(1831)		{
HXLINE(1831)			int _g2 = 0;
HXDLIN(1831)			while((_g2 < foldersToCheck->length)){
HXLINE(1831)				::String folder = foldersToCheck->__get(_g2);
HXDLIN(1831)				_g2 = (_g2 + 1);
HXLINE(1833)				if (::sys::FileSystem_obj::exists(folder)) {
HXLINE(1835)					::String frag = ((folder + name) + HX_(".frag",60,48,31,c0));
HXLINE(1836)					::String vert = ((folder + name) + HX_(".vert",df,e3,ba,ca));
HXLINE(1837)					bool found = false;
HXLINE(1838)					if (::sys::FileSystem_obj::exists(frag)) {
HXLINE(1840)						frag = ::sys::io::File_obj::getContent(frag);
HXLINE(1841)						found = true;
            					}
            					else {
HXLINE(1843)						frag = null();
            					}
HXLINE(1845)					if (::sys::FileSystem_obj::exists(vert)) {
HXLINE(1847)						vert = ::sys::io::File_obj::getContent(vert);
HXLINE(1848)						found = true;
            					}
            					else {
HXLINE(1850)						vert = null();
            					}
HXLINE(1852)					if (found) {
HXLINE(1854)						this->runtimeShaders->set(name,::Array_obj< ::String >::__new(2)->init(0,frag)->init(1,vert));
HXLINE(1856)						return true;
            					}
            				}
            			}
            		}
HXLINE(1860)		::psychlua::FunkinLua_obj::luaTrace(((HX_("Missing shader ",81,62,6c,67) + name) + HX_(" .frag AND .vert files!",d4,1e,ab,6a)),false,false,-65536);
HXLINE(1864)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,initLuaShader,return )

 ::haxe::ds::StringMap FunkinLua_obj::customFunctions;

 ::psychlua::FunkinLua FunkinLua_obj::lastCalledScript;

void FunkinLua_obj::luaTrace(::String text,::hx::Null< bool >  __o_ignoreCheck,::hx::Null< bool >  __o_deprecated,::hx::Null< int >  __o_color){
            		bool ignoreCheck = __o_ignoreCheck.Default(false);
            		bool deprecated = __o_deprecated.Default(false);
            		int color = __o_color.Default(-1);
            	HX_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1730_luaTrace)
HXDLIN(1730)		bool _hx_tmp;
HXDLIN(1730)		if (!(ignoreCheck)) {
HXDLIN(1730)			_hx_tmp = ::psychlua::FunkinLua_obj::getBool(HX_("luaDebugMode",7e,06,20,4c));
            		}
            		else {
HXDLIN(1730)			_hx_tmp = true;
            		}
HXDLIN(1730)		if (_hx_tmp) {
HXLINE(1731)			bool _hx_tmp1;
HXDLIN(1731)			if (deprecated) {
HXLINE(1731)				_hx_tmp1 = !(::psychlua::FunkinLua_obj::getBool(HX_("luaDeprecatedWarnings",02,69,36,70)));
            			}
            			else {
HXLINE(1731)				_hx_tmp1 = false;
            			}
HXDLIN(1731)			if (_hx_tmp1) {
HXLINE(1732)				return;
            			}
HXLINE(1734)			::states::PlayState_obj::instance->addTextToDebug(text,color);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FunkinLua_obj,luaTrace,(void))

bool FunkinLua_obj::getBool(::String variable){
            	HX_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1738_getBool)
HXLINE(1739)		if (::hx::IsNull( ::psychlua::FunkinLua_obj::lastCalledScript )) {
HXLINE(1739)			return false;
            		}
HXLINE(1741)		 cpp::Reference<lua_State> lua = ::psychlua::FunkinLua_obj::lastCalledScript->lua;
HXLINE(1742)		if (::hx::IsNull( lua )) {
HXLINE(1742)			return false;
            		}
HXLINE(1744)		::String result = null();
HXLINE(1745)		lua_getglobal(lua,variable);
HXLINE(1746)		result = ( (::String)(::llua::Convert_obj::fromLua(lua,-1)) );
HXLINE(1747)		lua_pop(lua,1);
HXLINE(1749)		if (::hx::IsNull( result )) {
HXLINE(1750)			return false;
            		}
HXLINE(1752)		return (result == HX_("true",4e,a7,03,4d));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,getBool,return )


::hx::ObjectPtr< FunkinLua_obj > FunkinLua_obj::__new(::String scriptName) {
	::hx::ObjectPtr< FunkinLua_obj > __this = new FunkinLua_obj();
	__this->__construct(scriptName);
	return __this;
}

::hx::ObjectPtr< FunkinLua_obj > FunkinLua_obj::__alloc(::hx::Ctx *_hx_ctx,::String scriptName) {
	FunkinLua_obj *__this = (FunkinLua_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FunkinLua_obj), true, "psychlua.FunkinLua"));
	*(void **)__this = FunkinLua_obj::_hx_vtable;
	__this->__construct(scriptName);
	return __this;
}

FunkinLua_obj::FunkinLua_obj()
{
}

void FunkinLua_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FunkinLua);
	HX_MARK_MEMBER_NAME(lua,"lua");
	HX_MARK_MEMBER_NAME(camTarget,"camTarget");
	HX_MARK_MEMBER_NAME(scriptName,"scriptName");
	HX_MARK_MEMBER_NAME(modFolder,"modFolder");
	HX_MARK_MEMBER_NAME(closed,"closed");
	HX_MARK_MEMBER_NAME(hscript,"hscript");
	HX_MARK_MEMBER_NAME(callbacks,"callbacks");
	HX_MARK_MEMBER_NAME(lastCalledFunction,"lastCalledFunction");
	HX_MARK_MEMBER_NAME(runtimeShaders,"runtimeShaders");
	HX_MARK_END_CLASS();
}

void FunkinLua_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lua,"lua");
	HX_VISIT_MEMBER_NAME(camTarget,"camTarget");
	HX_VISIT_MEMBER_NAME(scriptName,"scriptName");
	HX_VISIT_MEMBER_NAME(modFolder,"modFolder");
	HX_VISIT_MEMBER_NAME(closed,"closed");
	HX_VISIT_MEMBER_NAME(hscript,"hscript");
	HX_VISIT_MEMBER_NAME(callbacks,"callbacks");
	HX_VISIT_MEMBER_NAME(lastCalledFunction,"lastCalledFunction");
	HX_VISIT_MEMBER_NAME(runtimeShaders,"runtimeShaders");
}

::hx::Val FunkinLua_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"lua") ) { return ::hx::Val( lua ); }
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"call") ) { return ::hx::Val( call_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return ::hx::Val( stop_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"closed") ) { return ::hx::Val( closed ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hscript") ) { return ::hx::Val( hscript ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"camTarget") ) { return ::hx::Val( camTarget ); }
		if (HX_FIELD_EQ(inName,"modFolder") ) { return ::hx::Val( modFolder ); }
		if (HX_FIELD_EQ(inName,"callbacks") ) { return ::hx::Val( callbacks ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scriptName") ) { return ::hx::Val( scriptName ); }
		if (HX_FIELD_EQ(inName,"findScript") ) { return ::hx::Val( findScript_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"initLuaShader") ) { return ::hx::Val( initLuaShader_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"runtimeShaders") ) { return ::hx::Val( runtimeShaders ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getErrorMessage") ) { return ::hx::Val( getErrorMessage_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"oldTweenFunction") ) { return ::hx::Val( oldTweenFunction_dyn() ); }
		if (HX_FIELD_EQ(inName,"addLocalCallback") ) { return ::hx::Val( addLocalCallback_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"noteTweenFunction") ) { return ::hx::Val( noteTweenFunction_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lastCalledFunction") ) { return ::hx::Val( lastCalledFunction ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FunkinLua_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getBool") ) { outValue = getBool_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"luaTrace") ) { outValue = luaTrace_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"customFunctions") ) { outValue = ( customFunctions ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"lastCalledScript") ) { outValue = ( lastCalledScript ); return true; }
	}
	return false;
}

::hx::Val FunkinLua_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"lua") ) { lua=inValue.Cast<  cpp::Reference<lua_State> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"closed") ) { closed=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hscript") ) { hscript=inValue.Cast<  ::psychlua::HScript >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"camTarget") ) { camTarget=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"modFolder") ) { modFolder=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"callbacks") ) { callbacks=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scriptName") ) { scriptName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"runtimeShaders") ) { runtimeShaders=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lastCalledFunction") ) { lastCalledFunction=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FunkinLua_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"customFunctions") ) { customFunctions=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"lastCalledScript") ) { lastCalledScript=ioValue.Cast<  ::psychlua::FunkinLua >(); return true; }
	}
	return false;
}

void FunkinLua_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("lua",b8,59,52,00));
	outFields->push(HX_("camTarget",c0,d0,9d,af));
	outFields->push(HX_("scriptName",f6,4d,e0,41));
	outFields->push(HX_("modFolder",10,7f,30,0a));
	outFields->push(HX_("closed",ac,a9,51,0e));
	outFields->push(HX_("hscript",73,8c,18,2c));
	outFields->push(HX_("callbacks",0e,f3,bf,a6));
	outFields->push(HX_("lastCalledFunction",ab,c9,c8,0a));
	outFields->push(HX_("runtimeShaders",b6,bf,45,a4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FunkinLua_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  cpp::Reference<lua_State> */ ,(int)offsetof(FunkinLua_obj,lua),HX_("lua",b8,59,52,00)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(FunkinLua_obj,camTarget),HX_("camTarget",c0,d0,9d,af)},
	{::hx::fsString,(int)offsetof(FunkinLua_obj,scriptName),HX_("scriptName",f6,4d,e0,41)},
	{::hx::fsString,(int)offsetof(FunkinLua_obj,modFolder),HX_("modFolder",10,7f,30,0a)},
	{::hx::fsBool,(int)offsetof(FunkinLua_obj,closed),HX_("closed",ac,a9,51,0e)},
	{::hx::fsObject /*  ::psychlua::HScript */ ,(int)offsetof(FunkinLua_obj,hscript),HX_("hscript",73,8c,18,2c)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FunkinLua_obj,callbacks),HX_("callbacks",0e,f3,bf,a6)},
	{::hx::fsString,(int)offsetof(FunkinLua_obj,lastCalledFunction),HX_("lastCalledFunction",ab,c9,c8,0a)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FunkinLua_obj,runtimeShaders),HX_("runtimeShaders",b6,bf,45,a4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FunkinLua_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &FunkinLua_obj::customFunctions,HX_("customFunctions",6a,64,b7,cc)},
	{::hx::fsObject /*  ::psychlua::FunkinLua */ ,(void *) &FunkinLua_obj::lastCalledScript,HX_("lastCalledScript",de,91,9f,fc)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FunkinLua_obj_sMemberFields[] = {
	HX_("lua",b8,59,52,00),
	HX_("camTarget",c0,d0,9d,af),
	HX_("scriptName",f6,4d,e0,41),
	HX_("modFolder",10,7f,30,0a),
	HX_("closed",ac,a9,51,0e),
	HX_("hscript",73,8c,18,2c),
	HX_("callbacks",0e,f3,bf,a6),
	HX_("lastCalledFunction",ab,c9,c8,0a),
	HX_("call",9e,18,ba,41),
	HX_("set",a2,9b,57,00),
	HX_("stop",02,f0,5b,4c),
	HX_("oldTweenFunction",7c,0f,c4,fd),
	HX_("noteTweenFunction",51,9d,12,ad),
	HX_("findScript",24,03,b4,70),
	HX_("getErrorMessage",95,70,2b,6e),
	HX_("addLocalCallback",6f,df,2f,f7),
	HX_("runtimeShaders",b6,bf,45,a4),
	HX_("initLuaShader",cd,69,3d,b0),
	::String(null()) };

static void FunkinLua_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FunkinLua_obj::customFunctions,"customFunctions");
	HX_MARK_MEMBER_NAME(FunkinLua_obj::lastCalledScript,"lastCalledScript");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FunkinLua_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FunkinLua_obj::customFunctions,"customFunctions");
	HX_VISIT_MEMBER_NAME(FunkinLua_obj::lastCalledScript,"lastCalledScript");
};

#endif

::hx::Class FunkinLua_obj::__mClass;

static ::String FunkinLua_obj_sStaticFields[] = {
	HX_("customFunctions",6a,64,b7,cc),
	HX_("lastCalledScript",de,91,9f,fc),
	HX_("luaTrace",ad,69,82,94),
	HX_("getBool",e0,33,9e,13),
	::String(null())
};

void FunkinLua_obj::__register()
{
	FunkinLua_obj _hx_dummy;
	FunkinLua_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("psychlua.FunkinLua",96,1b,92,ca);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FunkinLua_obj::__GetStatic;
	__mClass->mSetStaticField = &FunkinLua_obj::__SetStatic;
	__mClass->mMarkFunc = FunkinLua_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FunkinLua_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FunkinLua_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FunkinLua_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FunkinLua_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FunkinLua_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FunkinLua_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FunkinLua_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_58_boot)
HXDLIN(  58)		customFunctions =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_cee4ff64a0b4a703_1607_boot)
HXDLIN(1607)		lastCalledScript = null();
            	}
}

} // end namespace psychlua
