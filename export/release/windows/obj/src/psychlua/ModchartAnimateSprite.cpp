// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flxanimate_FlxAnimate
#include <flxanimate/FlxAnimate.h>
#endif
#ifndef INCLUDED_flxanimate_PsychFlxAnimate
#include <flxanimate/PsychFlxAnimate.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxAnim
#include <flxanimate/animate/FlxAnim.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_psychlua_ModchartAnimateSprite
#include <psychlua/ModchartAnimateSprite.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d68da6b4ceec386c_4_new,"psychlua.ModchartAnimateSprite","new",0x72790c8b,"psychlua.ModchartAnimateSprite.new","psychlua/ModchartAnimateSprite.hx",4,0x96be4846)
HX_LOCAL_STACK_FRAME(_hx_pos_d68da6b4ceec386c_14_playAnim,"psychlua.ModchartAnimateSprite","playAnim",0x733eb21a,"psychlua.ModchartAnimateSprite.playAnim","psychlua/ModchartAnimateSprite.hx",14,0x96be4846)
HX_LOCAL_STACK_FRAME(_hx_pos_d68da6b4ceec386c_23_addOffset,"psychlua.ModchartAnimateSprite","addOffset",0x3838faff,"psychlua.ModchartAnimateSprite.addOffset","psychlua/ModchartAnimateSprite.hx",23,0x96be4846)
namespace psychlua{

void ModchartAnimateSprite_obj::__construct( ::Dynamic __o_x, ::Dynamic __o_y){
            		 ::Dynamic x = __o_x;
            		if (::hx::IsNull(__o_x)) x = 0;
            		 ::Dynamic y = __o_y;
            		if (::hx::IsNull(__o_y)) y = 0;
            	HX_GC_STACKFRAME(&_hx_pos_d68da6b4ceec386c_4_new)
HXLINE(   6)		this->animOffsets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(   9)		super::__construct(x,y,null(),null());
HXLINE(  10)		this->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
            	}

Dynamic ModchartAnimateSprite_obj::__CreateEmpty() { return new ModchartAnimateSprite_obj; }

void *ModchartAnimateSprite_obj::_hx_vtable = 0;

Dynamic ModchartAnimateSprite_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ModchartAnimateSprite_obj > _hx_result = new ModchartAnimateSprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ModchartAnimateSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6d2f127b) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x0943d942) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0943d942;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x6d2f127b;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x6eca17ad || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7dab0655;
		}
	}
}

void ModchartAnimateSprite_obj::playAnim(::String name,::hx::Null< bool >  __o_forced, ::Dynamic __o_reverse, ::Dynamic __o_startFrame){
            		bool forced = __o_forced.Default(false);
            		 ::Dynamic reverse = __o_reverse;
            		if (::hx::IsNull(__o_reverse)) reverse = false;
            		 ::Dynamic startFrame = __o_startFrame;
            		if (::hx::IsNull(__o_startFrame)) startFrame = 0;
            	HX_STACKFRAME(&_hx_pos_d68da6b4ceec386c_14_playAnim)
HXLINE(  15)		this->anim->play(name,forced,reverse,startFrame);
HXLINE(  17)		::Array< Float > daOffset = ( (::Array< Float >)(this->animOffsets->get(name)) );
HXLINE(  18)		if (this->animOffsets->exists(name)) {
HXLINE(  18)			 ::flixel::math::FlxBasePoint this1 = this->offset;
HXDLIN(  18)			this1->set_x(daOffset->__get(0));
HXDLIN(  18)			this1->set_y(daOffset->__get(1));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(ModchartAnimateSprite_obj,playAnim,(void))

void ModchartAnimateSprite_obj::addOffset(::String name,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d68da6b4ceec386c_23_addOffset)
HXDLIN(  23)		this->animOffsets->set(name,::Array_obj< Float >::__new(2)->init(0,x)->init(1,y));
            	}


HX_DEFINE_DYNAMIC_FUNC3(ModchartAnimateSprite_obj,addOffset,(void))


::hx::ObjectPtr< ModchartAnimateSprite_obj > ModchartAnimateSprite_obj::__new( ::Dynamic __o_x, ::Dynamic __o_y) {
	::hx::ObjectPtr< ModchartAnimateSprite_obj > __this = new ModchartAnimateSprite_obj();
	__this->__construct(__o_x,__o_y);
	return __this;
}

::hx::ObjectPtr< ModchartAnimateSprite_obj > ModchartAnimateSprite_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic __o_x, ::Dynamic __o_y) {
	ModchartAnimateSprite_obj *__this = (ModchartAnimateSprite_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ModchartAnimateSprite_obj), true, "psychlua.ModchartAnimateSprite"));
	*(void **)__this = ModchartAnimateSprite_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y);
	return __this;
}

ModchartAnimateSprite_obj::ModchartAnimateSprite_obj()
{
}

void ModchartAnimateSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ModchartAnimateSprite);
	HX_MARK_MEMBER_NAME(animOffsets,"animOffsets");
	 ::flxanimate::FlxAnimate_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ModchartAnimateSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(animOffsets,"animOffsets");
	 ::flxanimate::FlxAnimate_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ModchartAnimateSprite_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"playAnim") ) { return ::hx::Val( playAnim_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addOffset") ) { return ::hx::Val( addOffset_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"animOffsets") ) { return ::hx::Val( animOffsets ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ModchartAnimateSprite_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"animOffsets") ) { animOffsets=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ModchartAnimateSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("animOffsets",6f,ff,7a,f8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ModchartAnimateSprite_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(ModchartAnimateSprite_obj,animOffsets),HX_("animOffsets",6f,ff,7a,f8)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ModchartAnimateSprite_obj_sStaticStorageInfo = 0;
#endif

static ::String ModchartAnimateSprite_obj_sMemberFields[] = {
	HX_("animOffsets",6f,ff,7a,f8),
	HX_("playAnim",25,ea,84,30),
	HX_("addOffset",94,cc,63,18),
	::String(null()) };

::hx::Class ModchartAnimateSprite_obj::__mClass;

void ModchartAnimateSprite_obj::__register()
{
	ModchartAnimateSprite_obj _hx_dummy;
	ModchartAnimateSprite_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("psychlua.ModchartAnimateSprite",19,6b,27,ef);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ModchartAnimateSprite_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ModchartAnimateSprite_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ModchartAnimateSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ModchartAnimateSprite_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace psychlua
