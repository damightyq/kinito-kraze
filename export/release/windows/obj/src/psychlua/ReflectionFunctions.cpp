// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_StageData
#include <backend/StageData.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_llua_Lua_helper
#include <llua/Lua_helper.h>
#endif
#ifndef INCLUDED_objects_Character
#include <objects/Character.h>
#endif
#ifndef INCLUDED_psychlua_FunkinLua
#include <psychlua/FunkinLua.h>
#endif
#ifndef INCLUDED_psychlua_LuaUtils
#include <psychlua/LuaUtils.h>
#endif
#ifndef INCLUDED_psychlua_ReflectionFunctions
#include <psychlua/ReflectionFunctions.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_substates_GameOverSubstate
#include <substates/GameOverSubstate.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_17_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",17,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_19_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",19,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_25_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",25,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_34_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",34,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_52_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",52,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_72_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",72,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_105_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",105,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_136_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",136,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_164_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",164,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_200_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",200,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_216_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",216,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_219_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",219,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_244_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",244,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_261_implement,"psychlua.ReflectionFunctions","implement",0x9729eff4,"psychlua.ReflectionFunctions.implement","psychlua/ReflectionFunctions.hx",261,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_268_parseInstanceArray,"psychlua.ReflectionFunctions","parseInstanceArray",0x3ce62d20,"psychlua.ReflectionFunctions.parseInstanceArray","psychlua/ReflectionFunctions.hx",268,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_274_parseInstances,"psychlua.ReflectionFunctions","parseInstances",0x1170b09a,"psychlua.ReflectionFunctions.parseInstances","psychlua/ReflectionFunctions.hx",274,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_284_parseSingleInstance,"psychlua.ReflectionFunctions","parseSingleInstance",0x0fc5ef61,"psychlua.ReflectionFunctions.parseSingleInstance","psychlua/ReflectionFunctions.hx",284,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_309_callMethodFromObject,"psychlua.ReflectionFunctions","callMethodFromObject",0x9b57c417,"psychlua.ReflectionFunctions.callMethodFromObject","psychlua/ReflectionFunctions.hx",309,0x2ed48560)
HX_LOCAL_STACK_FRAME(_hx_pos_0bdd6de38e5581b0_15_boot,"psychlua.ReflectionFunctions","boot",0xe403a781,"psychlua.ReflectionFunctions.boot","psychlua/ReflectionFunctions.hx",15,0x2ed48560)
namespace psychlua{

void ReflectionFunctions_obj::__construct() { }

Dynamic ReflectionFunctions_obj::__CreateEmpty() { return new ReflectionFunctions_obj; }

void *ReflectionFunctions_obj::_hx_vtable = 0;

Dynamic ReflectionFunctions_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ReflectionFunctions_obj > _hx_result = new ReflectionFunctions_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ReflectionFunctions_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5fe99f13;
}

 ::Dynamic ReflectionFunctions_obj::instanceStr;

void ReflectionFunctions_obj::implement( ::psychlua::FunkinLua funk){
            	HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_17_implement)
HXLINE(  18)		 cpp::Reference<lua_State> lua = funk->lua;
HXLINE(  19)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			 ::Dynamic _hx_run(::String variable, ::Dynamic __o_allowMaps){
            		 ::Dynamic allowMaps = __o_allowMaps;
            		if (::hx::IsNull(__o_allowMaps)) allowMaps = false;
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_19_implement)
HXLINE(  20)				::Array< ::String > split = variable.split(HX_(".",2e,00,00,00));
HXLINE(  21)				if ((split->length > 1)) {
HXLINE(  22)					 ::Dynamic _hx_tmp = ::psychlua::LuaUtils_obj::getPropertyLoop(split,true,allowMaps);
HXDLIN(  22)					return ::psychlua::LuaUtils_obj::getVarInArray(_hx_tmp,split->__get((split->length - 1)),allowMaps);
            				}
HXLINE(  23)				return ::psychlua::LuaUtils_obj::getVarInArray(::psychlua::LuaUtils_obj::getTargetInstance(),variable,allowMaps);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(  19)			::llua::Lua_helper_obj::callbacks->set(HX_("getProperty",0b,0b,2c,d2), ::Dynamic(new _hx_Closure_0()));
HXDLIN(  19)			linc::callbacks::add_callback_function(lua,HX_("getProperty",0b,0b,2c,d2));
            		}
HXLINE(  25)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(4)
            			 ::Dynamic _hx_run(::String variable, ::Dynamic value, ::Dynamic __o_allowMaps, ::Dynamic __o_allowInstances){
            		 ::Dynamic allowMaps = __o_allowMaps;
            		if (::hx::IsNull(__o_allowMaps)) allowMaps = false;
            		 ::Dynamic allowInstances = __o_allowInstances;
            		if (::hx::IsNull(__o_allowInstances)) allowInstances = false;
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_25_implement)
HXLINE(  26)				::Array< ::String > split = variable.split(HX_(".",2e,00,00,00));
HXLINE(  27)				if ((split->length > 1)) {
HXLINE(  28)					 ::Dynamic _hx_tmp = ::psychlua::LuaUtils_obj::getPropertyLoop(split,true,allowMaps);
HXDLIN(  28)					::String split1 = split->__get((split->length - 1));
HXDLIN(  28)					 ::Dynamic _hx_tmp1;
HXDLIN(  28)					if (( (bool)(allowInstances) )) {
HXLINE(  28)						_hx_tmp1 = ::psychlua::ReflectionFunctions_obj::parseInstances(value);
            					}
            					else {
HXLINE(  28)						_hx_tmp1 = value;
            					}
HXDLIN(  28)					::psychlua::LuaUtils_obj::setVarInArray(_hx_tmp,split1,_hx_tmp1,allowMaps);
HXLINE(  29)					return value;
            				}
HXLINE(  31)				 ::flixel::FlxState _hx_tmp2 = ::psychlua::LuaUtils_obj::getTargetInstance();
HXDLIN(  31)				 ::Dynamic _hx_tmp3;
HXDLIN(  31)				if (( (bool)(allowInstances) )) {
HXLINE(  31)					_hx_tmp3 = ::psychlua::ReflectionFunctions_obj::parseInstances(value);
            				}
            				else {
HXLINE(  31)					_hx_tmp3 = value;
            				}
HXDLIN(  31)				::psychlua::LuaUtils_obj::setVarInArray(_hx_tmp2,variable,_hx_tmp3,allowMaps);
HXLINE(  32)				return value;
            			}
            			HX_END_LOCAL_FUNC4(return)

HXLINE(  25)			::llua::Lua_helper_obj::callbacks->set(HX_("setProperty",17,12,99,dc), ::Dynamic(new _hx_Closure_1()));
HXDLIN(  25)			linc::callbacks::add_callback_function(lua,HX_("setProperty",17,12,99,dc));
            		}
HXLINE(  34)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(3)
            			 ::Dynamic _hx_run(::String classVar,::String variable, ::Dynamic __o_allowMaps){
            		 ::Dynamic allowMaps = __o_allowMaps;
            		if (::hx::IsNull(__o_allowMaps)) allowMaps = false;
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_34_implement)
HXLINE(  35)				 ::Dynamic myClass = ::Type_obj::resolveClass(classVar);
HXLINE(  36)				if (::hx::IsNull( myClass )) {
HXLINE(  38)					::psychlua::FunkinLua_obj::luaTrace(((HX_("getPropertyFromClass: Class ",11,f9,f8,68) + classVar) + HX_(" not found",55,f3,a5,21)),false,false,-65536);
HXLINE(  39)					return null();
            				}
HXLINE(  42)				::Array< ::String > split = variable.split(HX_(".",2e,00,00,00));
HXLINE(  43)				if ((split->length > 1)) {
HXLINE(  44)					 ::Dynamic obj = ::psychlua::LuaUtils_obj::getVarInArray(myClass,split->__get(0),allowMaps);
HXLINE(  45)					{
HXLINE(  45)						int _g = 1;
HXDLIN(  45)						int _g1 = (split->length - 1);
HXDLIN(  45)						while((_g < _g1)){
HXLINE(  45)							_g = (_g + 1);
HXDLIN(  45)							int i = (_g - 1);
HXLINE(  46)							obj = ::psychlua::LuaUtils_obj::getVarInArray(obj,split->__get(i),allowMaps);
            						}
            					}
HXLINE(  48)					return ::psychlua::LuaUtils_obj::getVarInArray(obj,split->__get((split->length - 1)),allowMaps);
            				}
HXLINE(  50)				return ::psychlua::LuaUtils_obj::getVarInArray(myClass,variable,allowMaps);
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(  34)			::llua::Lua_helper_obj::callbacks->set(HX_("getPropertyFromClass",e3,fd,61,9d), ::Dynamic(new _hx_Closure_2()));
HXDLIN(  34)			linc::callbacks::add_callback_function(lua,HX_("getPropertyFromClass",e3,fd,61,9d));
            		}
HXLINE(  52)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(5)
            			 ::Dynamic _hx_run(::String classVar,::String variable, ::Dynamic value, ::Dynamic __o_allowMaps, ::Dynamic __o_allowInstances){
            		 ::Dynamic allowMaps = __o_allowMaps;
            		if (::hx::IsNull(__o_allowMaps)) allowMaps = false;
            		 ::Dynamic allowInstances = __o_allowInstances;
            		if (::hx::IsNull(__o_allowInstances)) allowInstances = false;
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_52_implement)
HXLINE(  53)				 ::Dynamic myClass = ::Type_obj::resolveClass(classVar);
HXLINE(  54)				if (::hx::IsNull( myClass )) {
HXLINE(  56)					::psychlua::FunkinLua_obj::luaTrace(((HX_("setPropertyFromClass: Class ",85,44,23,6c) + classVar) + HX_(" not found",55,f3,a5,21)),false,false,-65536);
HXLINE(  57)					return null();
            				}
HXLINE(  60)				::Array< ::String > split = variable.split(HX_(".",2e,00,00,00));
HXLINE(  61)				if ((split->length > 1)) {
HXLINE(  62)					 ::Dynamic obj = ::psychlua::LuaUtils_obj::getVarInArray(myClass,split->__get(0),allowMaps);
HXLINE(  63)					{
HXLINE(  63)						int _g = 1;
HXDLIN(  63)						int _g1 = (split->length - 1);
HXDLIN(  63)						while((_g < _g1)){
HXLINE(  63)							_g = (_g + 1);
HXDLIN(  63)							int i = (_g - 1);
HXLINE(  64)							obj = ::psychlua::LuaUtils_obj::getVarInArray(obj,split->__get(i),allowMaps);
            						}
            					}
HXLINE(  66)					::String split1 = split->__get((split->length - 1));
HXDLIN(  66)					 ::Dynamic _hx_tmp;
HXDLIN(  66)					if (( (bool)(allowInstances) )) {
HXLINE(  66)						_hx_tmp = ::psychlua::ReflectionFunctions_obj::parseInstances(value);
            					}
            					else {
HXLINE(  66)						_hx_tmp = value;
            					}
HXDLIN(  66)					::psychlua::LuaUtils_obj::setVarInArray(obj,split1,_hx_tmp,allowMaps);
HXLINE(  67)					return value;
            				}
HXLINE(  69)				 ::Dynamic _hx_tmp1;
HXDLIN(  69)				if (( (bool)(allowInstances) )) {
HXLINE(  69)					_hx_tmp1 = ::psychlua::ReflectionFunctions_obj::parseInstances(value);
            				}
            				else {
HXLINE(  69)					_hx_tmp1 = value;
            				}
HXDLIN(  69)				::psychlua::LuaUtils_obj::setVarInArray(myClass,variable,_hx_tmp1,allowMaps);
HXLINE(  70)				return value;
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE(  52)			::llua::Lua_helper_obj::callbacks->set(HX_("setPropertyFromClass",57,b5,19,6a), ::Dynamic(new _hx_Closure_3()));
HXDLIN(  52)			linc::callbacks::add_callback_function(lua,HX_("setPropertyFromClass",57,b5,19,6a));
            		}
HXLINE(  72)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(4)
            			 ::Dynamic _hx_run(::String group,int index, ::Dynamic variable, ::Dynamic __o_allowMaps){
            		 ::Dynamic allowMaps = __o_allowMaps;
            		if (::hx::IsNull(__o_allowMaps)) allowMaps = false;
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_72_implement)
HXLINE(  73)				::Array< ::String > split = group.split(HX_(".",2e,00,00,00));
HXLINE(  74)				 ::Dynamic realObject = null();
HXLINE(  75)				if ((split->length > 1)) {
HXLINE(  76)					realObject = ::psychlua::LuaUtils_obj::getPropertyLoop(split,false,allowMaps);
            				}
            				else {
HXLINE(  78)					realObject = ::Reflect_obj::getProperty(::psychlua::LuaUtils_obj::getTargetInstance(),group);
            				}
HXLINE(  80)				 ::Dynamic groupOrArray = ::Reflect_obj::getProperty(::psychlua::LuaUtils_obj::getTargetInstance(),group);
HXLINE(  81)				if (::hx::IsNotNull( groupOrArray )) {
HXLINE(  83)					 ::ValueType _g = ::Type_obj::_hx_typeof(groupOrArray);
HXDLIN(  83)					if ((_g->_hx_getIndex() == 6)) {
HXLINE(  85)						if (::hx::IsPointerEq( _g->_hx_getObject(0).StaticCast< ::hx::Class >(),::hx::ArrayBase::__mClass )) {
HXLINE(  86)							 ::Dynamic leArray = realObject->__GetItem(index);
HXLINE(  87)							if (::hx::IsNotNull( leArray )) {
HXLINE(  88)								 ::Dynamic result = null();
HXLINE(  89)								if (::hx::IsPointerEq( ::Type_obj::_hx_typeof(variable),::ValueType_obj::TInt_dyn() )) {
HXLINE(  90)									result = leArray->__GetItem(( (int)(variable) ));
            								}
            								else {
HXLINE(  92)									result = ::psychlua::LuaUtils_obj::getGroupStuff(leArray,( (::String)(variable) ),allowMaps);
            								}
HXLINE(  93)								return result;
            							}
HXLINE(  95)							::psychlua::FunkinLua_obj::luaTrace(((((HX_("getPropertyFromGroup: Object #",b2,4e,2c,97) + index) + HX_(" from group: ",0f,87,ba,2b)) + group) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
            						}
            						else {
HXLINE(  98)							 ::Dynamic result1 = ::psychlua::LuaUtils_obj::getGroupStuff( ::Dynamic(realObject->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index),( (::String)(variable) ),allowMaps);
HXLINE(  99)							return result1;
            						}
            					}
            					else {
HXLINE(  98)						 ::Dynamic result2 = ::psychlua::LuaUtils_obj::getGroupStuff( ::Dynamic(realObject->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index),( (::String)(variable) ),allowMaps);
HXLINE(  99)						return result2;
            					}
            				}
HXLINE( 102)				::psychlua::FunkinLua_obj::luaTrace(((HX_("getPropertyFromGroup: Group/Array ",c7,9a,8e,f8) + group) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE( 103)				return null();
            			}
            			HX_END_LOCAL_FUNC4(return)

HXLINE(  72)			::llua::Lua_helper_obj::callbacks->set(HX_("getPropertyFromGroup",ea,38,fe,ee), ::Dynamic(new _hx_Closure_4()));
HXDLIN(  72)			linc::callbacks::add_callback_function(lua,HX_("getPropertyFromGroup",ea,38,fe,ee));
            		}
HXLINE( 105)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_5) HXARGC(6)
            			 ::Dynamic _hx_run(::String group,int index, ::Dynamic variable, ::Dynamic value, ::Dynamic __o_allowMaps, ::Dynamic __o_allowInstances){
            		 ::Dynamic allowMaps = __o_allowMaps;
            		if (::hx::IsNull(__o_allowMaps)) allowMaps = false;
            		 ::Dynamic allowInstances = __o_allowInstances;
            		if (::hx::IsNull(__o_allowInstances)) allowInstances = false;
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_105_implement)
HXLINE( 106)				::Array< ::String > split = group.split(HX_(".",2e,00,00,00));
HXLINE( 107)				 ::Dynamic realObject = null();
HXLINE( 108)				if ((split->length > 1)) {
HXLINE( 109)					realObject = ::psychlua::LuaUtils_obj::getPropertyLoop(split,false,allowMaps);
            				}
            				else {
HXLINE( 111)					realObject = ::Reflect_obj::getProperty(::psychlua::LuaUtils_obj::getTargetInstance(),group);
            				}
HXLINE( 113)				if (::hx::IsNotNull( realObject )) {
HXLINE( 115)					 ::ValueType _g = ::Type_obj::_hx_typeof(realObject);
HXDLIN( 115)					if ((_g->_hx_getIndex() == 6)) {
HXLINE( 117)						if (::hx::IsPointerEq( _g->_hx_getObject(0).StaticCast< ::hx::Class >(),::hx::ArrayBase::__mClass )) {
HXLINE( 118)							 ::Dynamic leArray = realObject->__GetItem(index);
HXLINE( 119)							if (::hx::IsNotNull( leArray )) {
HXLINE( 121)								if (::hx::IsPointerEq( ::Type_obj::_hx_typeof(variable),::ValueType_obj::TInt_dyn() )) {
HXLINE( 123)									 ::Dynamic _hx_tmp;
HXDLIN( 123)									if (( (bool)(allowInstances) )) {
HXLINE( 123)										_hx_tmp = ::psychlua::ReflectionFunctions_obj::parseInstances(value);
            									}
            									else {
HXLINE( 123)										_hx_tmp = value;
            									}
HXDLIN( 123)									leArray->__SetItem(( (int)(variable) ),_hx_tmp);
HXLINE( 124)									return value;
            								}
HXLINE( 126)								 ::Dynamic _hx_tmp1;
HXDLIN( 126)								if (( (bool)(allowInstances) )) {
HXLINE( 126)									_hx_tmp1 = ::psychlua::ReflectionFunctions_obj::parseInstances(value);
            								}
            								else {
HXLINE( 126)									_hx_tmp1 = value;
            								}
HXDLIN( 126)								::psychlua::LuaUtils_obj::setGroupStuff(leArray,( (::String)(variable) ),_hx_tmp1,allowMaps);
            							}
            						}
            						else {
HXLINE( 130)							 ::Dynamic realObject1 =  ::Dynamic(realObject->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index);
HXDLIN( 130)							 ::Dynamic _hx_tmp2;
HXDLIN( 130)							if (( (bool)(allowInstances) )) {
HXLINE( 130)								_hx_tmp2 = ::psychlua::ReflectionFunctions_obj::parseInstances(value);
            							}
            							else {
HXLINE( 130)								_hx_tmp2 = value;
            							}
HXDLIN( 130)							::psychlua::LuaUtils_obj::setGroupStuff(realObject1,( (::String)(variable) ),_hx_tmp2,allowMaps);
            						}
            					}
            					else {
HXLINE( 130)						 ::Dynamic realObject2 =  ::Dynamic(realObject->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index);
HXDLIN( 130)						 ::Dynamic _hx_tmp3;
HXDLIN( 130)						if (( (bool)(allowInstances) )) {
HXLINE( 130)							_hx_tmp3 = ::psychlua::ReflectionFunctions_obj::parseInstances(value);
            						}
            						else {
HXLINE( 130)							_hx_tmp3 = value;
            						}
HXDLIN( 130)						::psychlua::LuaUtils_obj::setGroupStuff(realObject2,( (::String)(variable) ),_hx_tmp3,allowMaps);
            					}
            				}
            				else {
HXLINE( 133)					::psychlua::FunkinLua_obj::luaTrace(((HX_("setPropertyFromGroup: Group/Array ",3b,f5,bc,58) + group) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
            				}
HXLINE( 134)				return value;
            			}
            			HX_END_LOCAL_FUNC6(return)

HXLINE( 105)			::llua::Lua_helper_obj::callbacks->set(HX_("setPropertyFromGroup",5e,f0,b5,bb), ::Dynamic(new _hx_Closure_5()));
HXDLIN( 105)			linc::callbacks::add_callback_function(lua,HX_("setPropertyFromGroup",5e,f0,b5,bb));
            		}
HXLINE( 136)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_6) HXARGC(3)
            			void _hx_run(::String group,::String tag, ::Dynamic __o_index){
            		 ::Dynamic index = __o_index;
            		if (::hx::IsNull(__o_index)) index = -1;
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_136_implement)
HXLINE( 137)				 ::flixel::FlxSprite obj = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getObjectDirectly(tag,null())) );
HXLINE( 138)				bool _hx_tmp;
HXDLIN( 138)				if (::hx::IsNotNull( obj )) {
HXLINE( 138)					_hx_tmp = ::hx::IsNull( obj->destroy_dyn() );
            				}
            				else {
HXLINE( 138)					_hx_tmp = true;
            				}
HXDLIN( 138)				if (_hx_tmp) {
HXLINE( 140)					::psychlua::FunkinLua_obj::luaTrace(((HX_("addToGroup: Object ",78,66,ca,0b) + tag) + HX_(" is not valid!",68,0b,4e,1a)),false,false,-65536);
HXLINE( 141)					return;
            				}
HXLINE( 144)				 ::Dynamic groupOrArray = ::Reflect_obj::getProperty(::psychlua::LuaUtils_obj::getTargetInstance(),group);
HXLINE( 145)				if (::hx::IsNull( groupOrArray )) {
HXLINE( 147)					::psychlua::FunkinLua_obj::luaTrace(((HX_("addToGroup: Group/Array ",40,7f,6d,1d) + group) + HX_(" is not valid!",68,0b,4e,1a)),false,false,-65536);
HXLINE( 148)					return;
            				}
HXLINE( 151)				if (::hx::IsLess( index,0 )) {
HXLINE( 153)					 ::ValueType _g = ::Type_obj::_hx_typeof(groupOrArray);
HXDLIN( 153)					if ((_g->_hx_getIndex() == 6)) {
HXLINE( 155)						if (::hx::IsPointerEq( _g->_hx_getObject(0).StaticCast< ::hx::Class >(),::hx::ArrayBase::__mClass )) {
HXLINE( 156)							groupOrArray->__Field(HX_("push",da,11,61,4a),::hx::paccDynamic)(obj);
            						}
            						else {
HXLINE( 159)							groupOrArray->__Field(HX_("add",21,f2,49,00),::hx::paccDynamic)(obj);
            						}
            					}
            					else {
HXLINE( 159)						groupOrArray->__Field(HX_("add",21,f2,49,00),::hx::paccDynamic)(obj);
            					}
            				}
            				else {
HXLINE( 162)					groupOrArray->__Field(HX_("insert",39,43,dd,9d),::hx::paccDynamic)(index,obj);
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 136)			::llua::Lua_helper_obj::callbacks->set(HX_("addToGroup",a3,2b,03,ce), ::Dynamic(new _hx_Closure_6()));
HXDLIN( 136)			linc::callbacks::add_callback_function(lua,HX_("addToGroup",a3,2b,03,ce));
            		}
HXLINE( 164)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_7) HXARGC(4)
            			void _hx_run(::String group, ::Dynamic __o_index,::String tag, ::Dynamic __o_destroy){
            		 ::Dynamic index = __o_index;
            		if (::hx::IsNull(__o_index)) index = -1;
            		 ::Dynamic destroy = __o_destroy;
            		if (::hx::IsNull(__o_destroy)) destroy = true;
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_164_implement)
HXLINE( 165)				 ::flixel::FlxSprite obj = null();
HXLINE( 166)				if (::hx::IsNotNull( tag )) {
HXLINE( 168)					obj = ( ( ::flixel::FlxSprite)(::psychlua::LuaUtils_obj::getObjectDirectly(tag,null())) );
HXLINE( 169)					bool _hx_tmp;
HXDLIN( 169)					if (::hx::IsNotNull( obj )) {
HXLINE( 169)						_hx_tmp = ::hx::IsNull( obj->destroy_dyn() );
            					}
            					else {
HXLINE( 169)						_hx_tmp = true;
            					}
HXDLIN( 169)					if (_hx_tmp) {
HXLINE( 171)						::psychlua::FunkinLua_obj::luaTrace(((HX_("removeFromGroup: Object ",ca,4b,eb,11) + tag) + HX_(" is not valid!",68,0b,4e,1a)),false,false,-65536);
HXLINE( 172)						return;
            					}
            				}
HXLINE( 176)				 ::Dynamic groupOrArray = ::Reflect_obj::getProperty(::psychlua::LuaUtils_obj::getTargetInstance(),group);
HXLINE( 177)				if (::hx::IsNull( groupOrArray )) {
HXLINE( 179)					::psychlua::FunkinLua_obj::luaTrace(((HX_("removeFromGroup: Group/Array ",ae,10,32,66) + group) + HX_(" is not valid!",68,0b,4e,1a)),false,false,-65536);
HXLINE( 180)					return;
            				}
HXLINE( 183)				{
HXLINE( 183)					 ::ValueType _g = ::Type_obj::_hx_typeof(groupOrArray);
HXDLIN( 183)					if ((_g->_hx_getIndex() == 6)) {
HXLINE( 185)						if (::hx::IsPointerEq( _g->_hx_getObject(0).StaticCast< ::hx::Class >(),::hx::ArrayBase::__mClass )) {
HXLINE( 186)							if (::hx::IsNotNull( obj )) {
HXLINE( 188)								groupOrArray->__Field(HX_("remove",44,9c,88,04),::hx::paccDynamic)(obj);
HXLINE( 189)								if (( (bool)(destroy) )) {
HXLINE( 189)									obj->destroy();
            								}
            							}
            							else {
HXLINE( 191)								groupOrArray->__Field(HX_("remove",44,9c,88,04),::hx::paccDynamic)(groupOrArray->__GetItem(( (int)(index) )));
            							}
            						}
            						else {
HXLINE( 194)							if (::hx::IsNull( obj )) {
HXLINE( 194)								obj = Dynamic(  ::Dynamic(groupOrArray->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(( (int)(index) ))).StaticCast<  ::flixel::FlxSprite >();
            							}
HXLINE( 195)							groupOrArray->__Field(HX_("remove",44,9c,88,04),::hx::paccDynamic)(obj,true);
HXLINE( 196)							if (( (bool)(destroy) )) {
HXLINE( 196)								obj->destroy();
            							}
            						}
            					}
            					else {
HXLINE( 194)						if (::hx::IsNull( obj )) {
HXLINE( 194)							obj = Dynamic(  ::Dynamic(groupOrArray->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(( (int)(index) ))).StaticCast<  ::flixel::FlxSprite >();
            						}
HXLINE( 195)						groupOrArray->__Field(HX_("remove",44,9c,88,04),::hx::paccDynamic)(obj,true);
HXLINE( 196)						if (( (bool)(destroy) )) {
HXLINE( 196)							obj->destroy();
            						}
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 164)			::llua::Lua_helper_obj::callbacks->set(HX_("removeFromGroup",91,38,9c,8f), ::Dynamic(new _hx_Closure_7()));
HXDLIN( 164)			linc::callbacks::add_callback_function(lua,HX_("removeFromGroup",91,38,9c,8f));
            		}
HXLINE( 200)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_8) HXARGC(2)
            			 ::Dynamic _hx_run(::String funcToRun,::cpp::VirtualArray args){
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_200_implement)
HXLINE( 201)				 ::Dynamic parent = ::states::PlayState_obj::instance;
HXLINE( 202)				::Array< ::String > split = funcToRun.split(HX_(".",2e,00,00,00));
HXLINE( 203)				::Dynamic this1 = ::backend::MusicBeatState_obj::getVariables();
HXDLIN( 203)				 ::Dynamic varParent = ( ( ::haxe::ds::StringMap)(this1) )->get(::StringTools_obj::trim(split->__get(0)));
HXLINE( 204)				if (::hx::IsNotNull( varParent )) {
HXLINE( 205)					split->shift();
HXLINE( 206)					funcToRun = ::StringTools_obj::trim(split->join(HX_(".",2e,00,00,00)));
HXLINE( 207)					parent = varParent;
            				}
HXLINE( 210)				if ((funcToRun.length > 0)) {
HXLINE( 211)					return ::psychlua::ReflectionFunctions_obj::callMethodFromObject(parent,funcToRun,( (::cpp::VirtualArray)(::psychlua::ReflectionFunctions_obj::parseInstances(args)) ));
            				}
HXLINE( 213)				return ::Reflect_obj::callMethod(null(),parent,( (::cpp::VirtualArray)(::psychlua::ReflectionFunctions_obj::parseInstances(args)) ));
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 200)			::llua::Lua_helper_obj::callbacks->set(HX_("callMethod",1f,ce,8a,34), ::Dynamic(new _hx_Closure_8()));
HXDLIN( 200)			linc::callbacks::add_callback_function(lua,HX_("callMethod",1f,ce,8a,34));
            		}
HXLINE( 215)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_9) HXARGC(3)
            			 ::Dynamic _hx_run(::String className,::String funcToRun,::cpp::VirtualArray args){
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_216_implement)
HXLINE( 216)				::hx::Class _hx_tmp = ::Type_obj::resolveClass(className);
HXDLIN( 216)				return ::psychlua::ReflectionFunctions_obj::callMethodFromObject(_hx_tmp,funcToRun,( (::cpp::VirtualArray)(::psychlua::ReflectionFunctions_obj::parseInstances(args)) ));
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE( 215)			::llua::Lua_helper_obj::callbacks->set(HX_("callMethodFromClass",4f,38,64,be), ::Dynamic(new _hx_Closure_9()));
HXDLIN( 215)			linc::callbacks::add_callback_function(lua,HX_("callMethodFromClass",4f,38,64,be));
            		}
HXLINE( 219)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_10) HXARGC(3)
            			bool _hx_run(::String variableToSave,::String className,::cpp::VirtualArray args){
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_219_implement)
HXLINE( 220)				if (!(::Std_obj::isOfType(args,::hx::ArrayBase::__mClass))) {
HXLINE( 220)					args = ::cpp::VirtualArray_obj::__new(0);
            				}
HXLINE( 221)				variableToSave = ::StringTools_obj::replace(::StringTools_obj::trim(variableToSave),HX_(".",2e,00,00,00),HX_("",00,00,00,00));
HXLINE( 222)				if (::hx::IsNull( ::backend::MusicBeatState_obj::getVariables()->get(variableToSave) )) {
HXLINE( 224)					if (::hx::IsNull( args )) {
HXLINE( 224)						args = ::cpp::VirtualArray_obj::__new(0);
            					}
HXLINE( 225)					 ::Dynamic myType = ::Type_obj::resolveClass(className);
HXLINE( 227)					if (::hx::IsNull( myType )) {
HXLINE( 229)						::psychlua::FunkinLua_obj::luaTrace(((HX_("createInstance: Class ",df,17,95,f8) + className) + HX_(" not found",55,f3,a5,21)),false,false,-65536);
HXLINE( 230)						return false;
            					}
HXLINE( 233)					 ::Dynamic obj = ::Type_obj::createInstance(myType,( (::cpp::VirtualArray)(::psychlua::ReflectionFunctions_obj::parseInstances(args)) ));
HXLINE( 234)					if (::hx::IsNotNull( obj )) {
HXLINE( 235)						::backend::MusicBeatState_obj::getVariables()->set(variableToSave,obj);
            					}
            					else {
HXLINE( 237)						::psychlua::FunkinLua_obj::luaTrace(((HX_("createInstance: Failed to create ",eb,a9,51,2f) + variableToSave) + HX_(", arguments are possibly wrong.",12,b8,b6,e3)),false,false,-65536);
            					}
HXLINE( 239)					return ::hx::IsNotNull( obj );
            				}
            				else {
HXLINE( 241)					::psychlua::FunkinLua_obj::luaTrace(((HX_("createInstance: Variable ",cd,f7,b0,5e) + variableToSave) + HX_(" is already being used and cannot be replaced!",04,3c,54,b7)),false,false,-65536);
            				}
HXLINE( 242)				return false;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE( 219)			::llua::Lua_helper_obj::callbacks->set(HX_("createInstance",b1,9e,1b,ac), ::Dynamic(new _hx_Closure_10()));
HXDLIN( 219)			linc::callbacks::add_callback_function(lua,HX_("createInstance",b1,9e,1b,ac));
            		}
HXLINE( 244)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_11) HXARGC(2)
            			void _hx_run(::String objectName, ::Dynamic __o_inFront){
            		 ::Dynamic inFront = __o_inFront;
            		if (::hx::IsNull(__o_inFront)) inFront = false;
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_244_implement)
HXLINE( 245)				 ::Dynamic savedObj = ::backend::MusicBeatState_obj::getVariables()->get(objectName);
HXLINE( 246)				if (::hx::IsNotNull( savedObj )) {
HXLINE( 248)					 ::Dynamic obj = savedObj;
HXLINE( 249)					if (( (bool)(inFront) )) {
HXLINE( 250)						::psychlua::LuaUtils_obj::getTargetInstance()->add(obj).StaticCast<  ::flixel::FlxBasic >();
            					}
            					else {
HXLINE( 253)						if (!(::states::PlayState_obj::instance->isDead)) {
HXLINE( 254)							 ::states::PlayState _hx_tmp = ::states::PlayState_obj::instance;
HXDLIN( 254)							::Array< ::Dynamic> _hx_tmp1 = ::states::PlayState_obj::instance->members;
HXDLIN( 254)							 ::Dynamic stageData = ::backend::StageData_obj::getStageFile(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) ));
HXDLIN( 254)							 ::flixel::group::FlxTypedSpriteGroup group;
HXDLIN( 254)							if (( (bool)(stageData->__Field(HX_("hide_girlfriend",57,bd,d9,f9),::hx::paccDynamic)) )) {
HXLINE( 254)								group = ::states::PlayState_obj::instance->boyfriendGroup;
            							}
            							else {
HXLINE( 254)								group = ::states::PlayState_obj::instance->gfGroup;
            							}
HXDLIN( 254)							int pos = ::states::PlayState_obj::instance->members->indexOf(group,null());
HXDLIN( 254)							int newPos = ::states::PlayState_obj::instance->members->indexOf(::states::PlayState_obj::instance->boyfriendGroup,null());
HXDLIN( 254)							if ((newPos < pos)) {
HXLINE( 254)								group = ::states::PlayState_obj::instance->boyfriendGroup;
HXDLIN( 254)								pos = newPos;
            							}
HXDLIN( 254)							newPos = ::states::PlayState_obj::instance->members->indexOf(::states::PlayState_obj::instance->dadGroup,null());
HXDLIN( 254)							if ((newPos < pos)) {
HXLINE( 254)								group = ::states::PlayState_obj::instance->dadGroup;
HXDLIN( 254)								pos = newPos;
            							}
HXDLIN( 254)							_hx_tmp->insert(_hx_tmp1->indexOf(group,null()),obj).StaticCast<  ::flixel::FlxBasic >();
            						}
            						else {
HXLINE( 256)							 ::substates::GameOverSubstate _hx_tmp2 = ::substates::GameOverSubstate_obj::instance;
HXDLIN( 256)							_hx_tmp2->insert(::substates::GameOverSubstate_obj::instance->members->indexOf(::substates::GameOverSubstate_obj::instance->boyfriend,null()),obj).StaticCast<  ::flixel::FlxBasic >();
            						}
            					}
            				}
            				else {
HXLINE( 259)					::psychlua::FunkinLua_obj::luaTrace(((HX_("addInstance: Can't add what doesn't exist~ (",6b,4c,da,1e) + objectName) + HX_(")",29,00,00,00)),false,false,-65536);
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 244)			::llua::Lua_helper_obj::callbacks->set(HX_("addInstance",d6,56,3d,8b), ::Dynamic(new _hx_Closure_11()));
HXDLIN( 244)			linc::callbacks::add_callback_function(lua,HX_("addInstance",d6,56,3d,8b));
            		}
HXLINE( 261)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_12) HXARGC(2)
            			::String _hx_run(::String instanceName,::String className){
            				HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_261_implement)
HXLINE( 262)				::String retStr = (((HX_("",00,00,00,00) + ::Std_obj::string(::psychlua::ReflectionFunctions_obj::instanceStr)) + HX_("::",c0,32,00,00)) + instanceName);
HXLINE( 263)				if (::hx::IsNotNull( className )) {
HXLINE( 263)					retStr = (retStr + (HX_("::",c0,32,00,00) + className));
            				}
HXLINE( 264)				return retStr;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 261)			::llua::Lua_helper_obj::callbacks->set(HX_("instanceArg",c1,c1,0a,29), ::Dynamic(new _hx_Closure_12()));
HXDLIN( 261)			linc::callbacks::add_callback_function(lua,HX_("instanceArg",c1,c1,0a,29));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ReflectionFunctions_obj,implement,(void))

::cpp::VirtualArray ReflectionFunctions_obj::parseInstanceArray(::cpp::VirtualArray arg){
            	HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_268_parseInstanceArray)
HXLINE( 269)		::cpp::VirtualArray newArray = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 270)		{
HXLINE( 270)			int _g = 0;
HXDLIN( 270)			while((_g < arg->get_length())){
HXLINE( 270)				 ::Dynamic val = arg->__get(_g);
HXDLIN( 270)				_g = (_g + 1);
HXLINE( 271)				newArray->push(::psychlua::ReflectionFunctions_obj::parseInstances(val));
            			}
            		}
HXLINE( 272)		return newArray;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ReflectionFunctions_obj,parseInstanceArray,return )

 ::Dynamic ReflectionFunctions_obj::parseInstances( ::Dynamic arg){
            	HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_274_parseInstances)
HXLINE( 275)		if (::hx::IsNull( arg )) {
HXLINE( 275)			return null();
            		}
HXLINE( 277)		if (::Std_obj::isOfType(arg,::hx::ArrayBase::__mClass)) {
HXLINE( 278)			return ::psychlua::ReflectionFunctions_obj::parseInstanceArray(( (::cpp::VirtualArray)(arg) ));
            		}
            		else {
HXLINE( 280)			return ::psychlua::ReflectionFunctions_obj::parseSingleInstance(arg);
            		}
HXLINE( 277)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ReflectionFunctions_obj,parseInstances,return )

 ::Dynamic ReflectionFunctions_obj::parseSingleInstance( ::Dynamic arg){
            	HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_284_parseSingleInstance)
HXLINE( 285)		::String argStr = ( (::String)(arg) );
HXLINE( 286)		bool _hx_tmp;
HXDLIN( 286)		if (::hx::IsNotNull( argStr )) {
HXLINE( 286)			_hx_tmp = ::hx::IsGreater( argStr.length,::psychlua::ReflectionFunctions_obj::instanceStr->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic) );
            		}
            		else {
HXLINE( 286)			_hx_tmp = false;
            		}
HXDLIN( 286)		if (_hx_tmp) {
HXLINE( 288)			int index = argStr.indexOf(HX_("::",c0,32,00,00),null());
HXLINE( 289)			if ((index > -1)) {
HXLINE( 291)				argStr = argStr.substring((index + 2),null());
HXLINE( 293)				int lastIndex = argStr.lastIndexOf(HX_("::",c0,32,00,00),null());
HXLINE( 295)				::Array< ::String > split;
HXDLIN( 295)				if ((lastIndex > -1)) {
HXLINE( 295)					split = argStr.substring(0,lastIndex).split(HX_(".",2e,00,00,00));
            				}
            				else {
HXLINE( 295)					split = argStr.split(HX_(".",2e,00,00,00));
            				}
HXLINE( 296)				if ((lastIndex > -1)) {
HXLINE( 296)					arg = ::Type_obj::resolveClass(argStr.substring((lastIndex + 2),null()));
            				}
            				else {
HXLINE( 296)					arg = ::states::PlayState_obj::instance;
            				}
HXLINE( 297)				{
HXLINE( 297)					int _g = 0;
HXDLIN( 297)					int _g1 = split->length;
HXDLIN( 297)					while((_g < _g1)){
HXLINE( 297)						_g = (_g + 1);
HXDLIN( 297)						int j = (_g - 1);
HXLINE( 300)						arg = ::psychlua::LuaUtils_obj::getVarInArray(arg,::StringTools_obj::trim(split->__get(j)),null());
            					}
            				}
            			}
            		}
HXLINE( 305)		return arg;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ReflectionFunctions_obj,parseSingleInstance,return )

 ::Dynamic ReflectionFunctions_obj::callMethodFromObject( ::Dynamic classObj,::String funcStr,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_309_callMethodFromObject)
HXLINE( 310)		::Array< ::String > split = funcStr.split(HX_(".",2e,00,00,00));
HXLINE( 311)		 ::Dynamic funcToRun = null();
HXLINE( 312)		 ::Dynamic obj = classObj;
HXLINE( 314)		if (::hx::IsNull( obj )) {
HXLINE( 316)			return null();
            		}
HXLINE( 319)		{
HXLINE( 319)			int _g = 0;
HXDLIN( 319)			int _g1 = split->length;
HXDLIN( 319)			while((_g < _g1)){
HXLINE( 319)				_g = (_g + 1);
HXDLIN( 319)				int i = (_g - 1);
HXLINE( 321)				obj = ::psychlua::LuaUtils_obj::getVarInArray(obj,::StringTools_obj::trim(split->__get(i)),null());
            			}
            		}
HXLINE( 325)		funcToRun = obj;
HXLINE( 327)		if (::hx::IsNotNull( funcToRun )) {
HXLINE( 327)			return ::Reflect_obj::callMethod(obj,funcToRun,args);
            		}
            		else {
HXLINE( 327)			return null();
            		}
HXDLIN( 327)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ReflectionFunctions_obj,callMethodFromObject,return )


ReflectionFunctions_obj::ReflectionFunctions_obj()
{
}

bool ReflectionFunctions_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"implement") ) { outValue = implement_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"instanceStr") ) { outValue = ( instanceStr ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"parseInstances") ) { outValue = parseInstances_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"parseInstanceArray") ) { outValue = parseInstanceArray_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"parseSingleInstance") ) { outValue = parseSingleInstance_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"callMethodFromObject") ) { outValue = callMethodFromObject_dyn(); return true; }
	}
	return false;
}

bool ReflectionFunctions_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"instanceStr") ) { instanceStr=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ReflectionFunctions_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo ReflectionFunctions_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &ReflectionFunctions_obj::instanceStr,HX_("instanceStr",1c,6c,18,29)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void ReflectionFunctions_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ReflectionFunctions_obj::instanceStr,"instanceStr");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ReflectionFunctions_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ReflectionFunctions_obj::instanceStr,"instanceStr");
};

#endif

::hx::Class ReflectionFunctions_obj::__mClass;

static ::String ReflectionFunctions_obj_sStaticFields[] = {
	HX_("instanceStr",1c,6c,18,29),
	HX_("implement",a3,71,3f,af),
	HX_("parseInstanceArray",91,7d,80,f3),
	HX_("parseInstances",8b,b4,3b,8f),
	HX_("parseSingleInstance",d0,01,32,20),
	HX_("callMethodFromObject",c8,d2,7b,e9),
	::String(null())
};

void ReflectionFunctions_obj::__register()
{
	ReflectionFunctions_obj _hx_dummy;
	ReflectionFunctions_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("psychlua.ReflectionFunctions",7f,ff,5c,54);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ReflectionFunctions_obj::__GetStatic;
	__mClass->mSetStaticField = &ReflectionFunctions_obj::__SetStatic;
	__mClass->mMarkFunc = ReflectionFunctions_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ReflectionFunctions_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ReflectionFunctions_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ReflectionFunctions_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ReflectionFunctions_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ReflectionFunctions_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ReflectionFunctions_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0bdd6de38e5581b0_15_boot)
HXDLIN(  15)		instanceStr = HX_("##PSYCHLUA_STRINGTOOBJ",49,42,57,d0);
            	}
}

} // end namespace psychlua
