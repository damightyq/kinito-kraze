// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_Difficulty
#include <backend/Difficulty.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_Highscore
#include <backend/Highscore.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_backend_Song
#include <backend/Song.h>
#endif
#ifndef INCLUDED_backend_StageData
#include <backend/StageData.h>
#endif
#ifndef INCLUDED_backend_WeekData
#include <backend/WeekData.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIEvent
#include <backend/ui/PsychUIEvent.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_objects_MenuCharacter
#include <objects/MenuCharacter.h>
#endif
#ifndef INCLUDED_objects_MenuItem
#include <objects/MenuItem.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_options_GameplayChangersSubstate
#include <options/GameplayChangersSubstate.h>
#endif
#ifndef INCLUDED_states_ErrorState
#include <states/ErrorState.h>
#endif
#ifndef INCLUDED_states_FreeplayState
#include <states/FreeplayState.h>
#endif
#ifndef INCLUDED_states_LoadingState
#include <states/LoadingState.h>
#endif
#ifndef INCLUDED_states_MainMenuState
#include <states/MainMenuState.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_states_StoryMenuState
#include <states/StoryMenuState.h>
#endif
#ifndef INCLUDED_states_editors_WeekEditorState
#include <states/editors/WeekEditorState.h>
#endif
#ifndef INCLUDED_substates_ResetScoreSubState
#include <substates/ResetScoreSubState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bb97520c7169a052_18_new,"states.StoryMenuState","new",0x0cdc887b,"states.StoryMenuState.new","states/StoryMenuState.hx",18,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_47_create,"states.StoryMenuState","create",0xa5a271c1,"states.StoryMenuState.create","states/StoryMenuState.hx",47,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_65_create,"states.StoryMenuState","create",0xa5a271c1,"states.StoryMenuState.create","states/StoryMenuState.hx",65,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_66_create,"states.StoryMenuState","create",0xa5a271c1,"states.StoryMenuState.create","states/StoryMenuState.hx",66,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_191_closeSubState,"states.StoryMenuState","closeSubState",0x7f462024,"states.StoryMenuState.closeSubState","states/StoryMenuState.hx",191,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_198_update,"states.StoryMenuState","update",0xb09890ce,"states.StoryMenuState.update","states/StoryMenuState.hx",198,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_301_selectWeek,"states.StoryMenuState","selectWeek",0x1c612655,"states.StoryMenuState.selectWeek","states/StoryMenuState.hx",301,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_359_selectWeek,"states.StoryMenuState","selectWeek",0x1c612655,"states.StoryMenuState.selectWeek","states/StoryMenuState.hx",359,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_373_changeDifficulty,"states.StoryMenuState","changeDifficulty",0xaeec22d0,"states.StoryMenuState.changeDifficulty","states/StoryMenuState.hx",373,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_409_changeWeek,"states.StoryMenuState","changeWeek",0x880ee6c9,"states.StoryMenuState.changeWeek","states/StoryMenuState.hx",409,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_458_weekIsLocked,"states.StoryMenuState","weekIsLocked",0xec61bd2d,"states.StoryMenuState.weekIsLocked","states/StoryMenuState.hx",458,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_464_updateText,"states.StoryMenuState","updateText",0x647f089b,"states.StoryMenuState.updateText","states/StoryMenuState.hx",464,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_20_boot,"states.StoryMenuState","boot",0x2c33e3b7,"states.StoryMenuState.boot","states/StoryMenuState.hx",20,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_24_boot,"states.StoryMenuState","boot",0x2c33e3b7,"states.StoryMenuState.boot","states/StoryMenuState.hx",24,0xbd7f4e34)
HX_LOCAL_STACK_FRAME(_hx_pos_bb97520c7169a052_30_boot,"states.StoryMenuState","boot",0x2c33e3b7,"states.StoryMenuState.boot","states/StoryMenuState.hx",30,0xbd7f4e34)
namespace states{

void StoryMenuState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_bb97520c7169a052_18_new)
HXLINE( 406)		this->intendedScore = 0;
HXLINE( 405)		this->lerpScore = 49324858;
HXLINE( 297)		this->stopspamming = false;
HXLINE( 296)		this->selectedWeek = false;
HXLINE( 295)		this->movedBack = false;
HXLINE(  44)		this->loadedWeeks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  25)		this->curDifficulty = 1;
HXLINE(  18)		super::__construct();
            	}

Dynamic StoryMenuState_obj::__CreateEmpty() { return new StoryMenuState_obj; }

void *StoryMenuState_obj::_hx_vtable = 0;

Dynamic StoryMenuState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StoryMenuState_obj > _hx_result = new StoryMenuState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool StoryMenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x53aaab8a) {
			if (inClassId<=(int)0x18456883) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x18456883;
			} else {
				return inClassId==(int)0x53aaab8a;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void StoryMenuState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_bb97520c7169a052_47_create)
HXLINE(  48)		::backend::Paths_obj::clearStoredMemory();
HXLINE(  49)		::backend::Paths_obj::clearUnusedMemory();
HXLINE(  51)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE(  52)		::states::PlayState_obj::isStoryMode = true;
HXLINE(  53)		::backend::WeekData_obj::reloadWeekFiles(true);
HXLINE(  57)		::backend::DiscordClient_obj::changePresence(HX_("In the Menus",0a,c1,ad,c6),null(),null(),null(),null(),null());
HXLINE(  60)		if ((::backend::WeekData_obj::weeksList->length < 1)) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_bb97520c7169a052_65_create)
HXLINE(  65)				::backend::MusicBeatState_obj::switchState( ::states::editors::WeekEditorState_obj::__alloc( HX_CTX ,null()));
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_bb97520c7169a052_66_create)
HXLINE(  66)				::backend::MusicBeatState_obj::switchState( ::states::MainMenuState_obj::__alloc( HX_CTX ));
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(  62)			::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE(  63)			this->persistentUpdate = false;
HXLINE(  64)			::backend::MusicBeatState_obj::switchState( ::states::ErrorState_obj::__alloc( HX_CTX ,HX_("NO WEEKS ADDED FOR STORY MODE\n\nPress ACCEPT to go to the Week Editor Menu.\nPress BACK to return to Main Menu.",f3,ad,ff,f0), ::Dynamic(new _hx_Closure_0()), ::Dynamic(new _hx_Closure_1())));
HXLINE(  67)			return;
            		}
HXLINE(  70)		if ((::states::StoryMenuState_obj::curWeek >= ::backend::WeekData_obj::weeksList->length)) {
HXLINE(  70)			::states::StoryMenuState_obj::curWeek = 0;
            		}
HXLINE(  72)		::cpp::VirtualArray values = ::cpp::VirtualArray_obj::__new(1)->init(0,this->lerpScore);
HXDLIN(  72)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(  72)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN(  72)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(HX_("week_score",87,89,fc,02),HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN(  72)		if (::hx::IsNull( str )) {
HXLINE(  62)			str = HX_("WEEK SCORE: {1}",bb,95,25,dd);
            		}
HXLINE(  72)		if (::hx::IsNull( str )) {
HXLINE(  68)			str = HX_("week_score",87,89,fc,02);
            		}
HXLINE(  72)		if (::hx::IsNotNull( values )) {
HXLINE(  72)			int _g_current = 0;
HXDLIN(  72)			::cpp::VirtualArray _g_array = values;
HXDLIN(  72)			while((_g_current < _g_array->get_length())){
HXLINE(  72)				 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN(  72)				_g_current = (_g_current + 1);
HXDLIN(  72)				int _g_key = (_g_current - 1);
HXDLIN(  72)				int num = _g_key;
HXDLIN(  72)				 ::Dynamic value = _g_value;
HXDLIN(  72)				str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            			}
            		}
HXDLIN(  72)		this->scoreText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,10,0,str,36,null());
HXLINE(  73)		 ::flixel::text::FlxText _hx_tmp = this->scoreText;
HXDLIN(  73)		::String key = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN(  73)		::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN(  73)		::String str1 = ( ( ::haxe::ds::StringMap)(this2) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXDLIN(  73)		if (::hx::IsNotNull( str1 )) {
HXLINE(  82)			key = str1;
            		}
HXLINE(  73)		::String folderKey = key;
HXDLIN(  73)		::String file = ::backend::Paths_obj::modFolders(folderKey);
HXDLIN(  73)		::String _hx_tmp1;
HXDLIN(  73)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE(  73)			_hx_tmp1 = file;
            		}
            		else {
HXLINE(  73)			_hx_tmp1 = (HX_("assets/",4c,2a,dc,36) + folderKey);
            		}
HXDLIN(  73)		_hx_tmp->setFormat(_hx_tmp1,32,null(),null(),null(),null(),null());
HXLINE(  75)		this->txtWeekTitle =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7)),10,0,HX_("",00,00,00,00),32,null());
HXLINE(  76)		 ::flixel::text::FlxText _hx_tmp2 = this->txtWeekTitle;
HXDLIN(  76)		::String key1 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN(  76)		::Dynamic this3 = ::backend::Language_obj::phrases;
HXDLIN(  76)		::String str2 = ( ( ::haxe::ds::StringMap)(this3) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN(  76)		if (::hx::IsNotNull( str2 )) {
HXLINE(  82)			key1 = str2;
            		}
HXLINE(  76)		::String folderKey1 = key1;
HXDLIN(  76)		::String file1 = ::backend::Paths_obj::modFolders(folderKey1);
HXDLIN(  76)		::String _hx_tmp3;
HXDLIN(  76)		if (::sys::FileSystem_obj::exists(file1)) {
HXLINE(  76)			_hx_tmp3 = file1;
            		}
            		else {
HXLINE(  76)			_hx_tmp3 = (HX_("assets/",4c,2a,dc,36) + folderKey1);
            		}
HXDLIN(  76)		_hx_tmp2->setFormat(_hx_tmp3,32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE(  77)		this->txtWeekTitle->set_alpha(((Float)0.7));
HXLINE(  79)		::String parentFolder = null();
HXDLIN(  79)		if ((HX_("campaign_menu_UI_assets",fd,f3,ba,6a).indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE(  79)			::haxe::Log_obj::trace(HX_("campaign_menu_UI_assets",fd,f3,ba,6a), ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder)->init(1,true))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            		}
HXDLIN(  79)		 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(HX_("campaign_menu_UI_assets",fd,f3,ba,6a),parentFolder,true);
HXDLIN(  79)		bool xmlExists = false;
HXDLIN(  79)		::String xml = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("campaign_menu_UI_assets",fd,f3,ba,6a)) + HX_(".xml",69,3e,c3,1e)));
HXDLIN(  79)		if (::sys::FileSystem_obj::exists(xml)) {
HXLINE( 378)			xmlExists = true;
            		}
HXLINE(  79)		 ::Dynamic ui_tex;
HXDLIN(  79)		if (xmlExists) {
HXLINE(  79)			ui_tex = ::sys::io::File_obj::getContent(xml);
            		}
            		else {
HXLINE(  79)			::String key2 = (HX_("images/",77,50,74,c1) + HX_("campaign_menu_UI_assets",fd,f3,ba,6a));
HXDLIN(  79)			::Dynamic this4 = ::backend::Language_obj::phrases;
HXDLIN(  79)			::String str3 = ( ( ::haxe::ds::StringMap)(this4) )->get_string(::StringTools_obj::trim(key2).toLowerCase());
HXDLIN(  79)			if (::hx::IsNotNull( str3 )) {
HXLINE(  82)				key2 = str3;
            			}
HXLINE(  79)			ui_tex = ::backend::Paths_obj::getPath((key2 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder,null());
            		}
HXDLIN(  79)		 ::flixel::graphics::frames::FlxAtlasFrames ui_tex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded,ui_tex);
HXLINE(  80)		 ::flixel::FlxSprite bgYellow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,56,null())->makeGraphic(::flixel::FlxG_obj::width,386,-405679,null(),null());
HXLINE(  81)		this->bgSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,56,null());
HXLINE(  83)		this->grpWeekText =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  84)		this->add(this->grpWeekText);
HXLINE(  86)		 ::flixel::FlxSprite blackBarThingie =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,56,-16777216,null(),null());
HXLINE(  87)		this->add(blackBarThingie);
HXLINE(  89)		this->grpWeekCharacters =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  91)		this->grpLocks =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  92)		this->add(this->grpLocks);
HXLINE(  94)		int num1 = 0;
HXLINE(  95)		Float itemTargetY = ( (Float)(0) );
HXLINE(  96)		{
HXLINE(  96)			int _g = 0;
HXDLIN(  96)			int _g1 = ::backend::WeekData_obj::weeksList->length;
HXDLIN(  96)			while((_g < _g1)){
HXLINE(  96)				_g = (_g + 1);
HXDLIN(  96)				int i = (_g - 1);
HXLINE(  98)				 ::backend::WeekData weekFile = ( ( ::backend::WeekData)(::backend::WeekData_obj::weeksLoaded->get(::backend::WeekData_obj::weeksList->__get(i))) );
HXLINE(  99)				bool isLocked = this->weekIsLocked(::backend::WeekData_obj::weeksList->__get(i));
HXLINE( 100)				bool _hx_tmp4;
HXDLIN( 100)				if (isLocked) {
HXLINE( 100)					_hx_tmp4 = !(weekFile->hiddenUntilUnlocked);
            				}
            				else {
HXLINE( 100)					_hx_tmp4 = true;
            				}
HXDLIN( 100)				if (_hx_tmp4) {
HXLINE( 102)					this->loadedWeeks->push(weekFile);
HXLINE( 103)					::backend::WeekData_obj::setDirectoryFromWeek(weekFile);
HXLINE( 104)					 ::objects::MenuItem weekThing =  ::objects::MenuItem_obj::__alloc( HX_CTX ,( (Float)(0) ),(this->bgSprite->y + 396),::backend::WeekData_obj::weeksList->__get(i));
HXLINE( 105)					Float weekThing1 = weekThing->y;
HXDLIN( 105)					weekThing->set_y((weekThing1 + ((weekThing->get_height() + 20) * ( (Float)(num1) ))));
HXLINE( 106)					weekThing->ID = num1;
HXLINE( 107)					weekThing->targetY = itemTargetY;
HXLINE( 108)					itemTargetY = (itemTargetY + (::Math_obj::max(weekThing->get_height(),( (Float)(110) )) + 10));
HXLINE( 109)					this->grpWeekText->add(weekThing).StaticCast<  ::objects::MenuItem >();
HXLINE( 111)					{
HXLINE( 111)						int axes = 1;
HXDLIN( 111)						bool _hx_tmp5;
HXDLIN( 111)						if ((axes != 1)) {
HXLINE( 111)							_hx_tmp5 = (axes == 17);
            						}
            						else {
HXLINE( 111)							_hx_tmp5 = true;
            						}
HXDLIN( 111)						if (_hx_tmp5) {
HXLINE( 111)							int _hx_tmp6 = ::flixel::FlxG_obj::width;
HXDLIN( 111)							weekThing->set_x(((( (Float)(_hx_tmp6) ) - weekThing->get_width()) / ( (Float)(2) )));
            						}
HXDLIN( 111)						bool _hx_tmp7;
HXDLIN( 111)						if ((axes != 16)) {
HXLINE( 111)							_hx_tmp7 = (axes == 17);
            						}
            						else {
HXLINE( 111)							_hx_tmp7 = true;
            						}
HXDLIN( 111)						if (_hx_tmp7) {
HXLINE( 111)							int _hx_tmp8 = ::flixel::FlxG_obj::height;
HXDLIN( 111)							weekThing->set_y(((( (Float)(_hx_tmp8) ) - weekThing->get_height()) / ( (Float)(2) )));
            						}
            					}
HXLINE( 115)					if (isLocked) {
HXLINE( 117)						Float lock = (weekThing->get_width() + 10);
HXDLIN( 117)						 ::flixel::FlxSprite lock1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(lock + weekThing->x),null(),null());
HXLINE( 118)						lock1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 119)						lock1->set_frames(ui_tex1);
HXLINE( 120)						lock1->animation->addByPrefix(HX_("lock",eb,9b,b7,47),HX_("lock",eb,9b,b7,47),null(),null(),null(),null());
HXLINE( 121)						lock1->animation->play(HX_("lock",eb,9b,b7,47),null(),null(),null());
HXLINE( 122)						lock1->ID = i;
HXLINE( 123)						this->grpLocks->add(lock1).StaticCast<  ::flixel::FlxSprite >();
            					}
HXLINE( 125)					num1 = (num1 + 1);
            				}
            			}
            		}
HXLINE( 129)		::backend::WeekData_obj::setDirectoryFromWeek(this->loadedWeeks->__get(0).StaticCast<  ::backend::WeekData >());
HXLINE( 130)		::Array< ::String > charArray = this->loadedWeeks->__get(0).StaticCast<  ::backend::WeekData >()->weekCharacters;
HXLINE( 131)		{
HXLINE( 132)			{
HXLINE( 133)				 ::objects::MenuCharacter weekCharacterThing =  ::objects::MenuCharacter_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.25)) - ( (Float)(150) )),charArray->__get(0));
HXLINE( 134)				weekCharacterThing->set_y((weekCharacterThing->y + 70));
HXLINE( 135)				this->grpWeekCharacters->add(weekCharacterThing).StaticCast<  ::objects::MenuCharacter >();
            			}
HXLINE( 132)			{
HXLINE( 133)				 ::objects::MenuCharacter weekCharacterThing1 =  ::objects::MenuCharacter_obj::__alloc( HX_CTX ,(((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.25)) * ( (Float)(2) )) - ( (Float)(150) )),charArray->__get(1));
HXLINE( 134)				weekCharacterThing1->set_y((weekCharacterThing1->y + 70));
HXLINE( 135)				this->grpWeekCharacters->add(weekCharacterThing1).StaticCast<  ::objects::MenuCharacter >();
            			}
HXLINE( 132)			{
HXLINE( 133)				 ::objects::MenuCharacter weekCharacterThing2 =  ::objects::MenuCharacter_obj::__alloc( HX_CTX ,(((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.25)) * ( (Float)(3) )) - ( (Float)(150) )),charArray->__get(2));
HXLINE( 134)				weekCharacterThing2->set_y((weekCharacterThing2->y + 70));
HXLINE( 135)				this->grpWeekCharacters->add(weekCharacterThing2).StaticCast<  ::objects::MenuCharacter >();
            			}
            		}
HXLINE( 138)		this->difficultySelectors =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 139)		this->add(this->difficultySelectors);
HXLINE( 141)		this->leftArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,850,(Dynamic( this->grpWeekText->members->__get(0)).StaticCast<  ::objects::MenuItem >()->y + 10),null());
HXLINE( 142)		this->leftArrow->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 143)		this->leftArrow->set_frames(ui_tex1);
HXLINE( 144)		this->leftArrow->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("arrow left",be,05,f8,94),null(),null(),null(),null());
HXLINE( 145)		this->leftArrow->animation->addByPrefix(HX_("press",83,53,88,c8),HX_("arrow push left",f6,7a,62,0c),null(),null(),null(),null());
HXLINE( 146)		this->leftArrow->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 147)		this->difficultySelectors->add(this->leftArrow).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 149)		::backend::Difficulty_obj::list = ::backend::Difficulty_obj::defaultList->copy();
HXLINE( 150)		if ((::states::StoryMenuState_obj::lastDifficultyName == HX_("",00,00,00,00))) {
HXLINE( 152)			::states::StoryMenuState_obj::lastDifficultyName = ::backend::Difficulty_obj::defaultDifficulty;
            		}
HXLINE( 154)		this->curDifficulty = ::Math_obj::round(::Math_obj::max(( (Float)(0) ),( (Float)(::backend::Difficulty_obj::defaultList->indexOf(::states::StoryMenuState_obj::lastDifficultyName,null())) )));
HXLINE( 156)		this->sprDifficulty =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,this->leftArrow->y,null());
HXLINE( 157)		this->sprDifficulty->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 158)		this->difficultySelectors->add(this->sprDifficulty).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 160)		this->rightArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->leftArrow->x + 376),this->leftArrow->y,null());
HXLINE( 161)		this->rightArrow->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 162)		this->rightArrow->set_frames(ui_tex1);
HXLINE( 163)		this->rightArrow->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("arrow right",45,0e,1a,3b),null(),null(),null(),null());
HXLINE( 164)		this->rightArrow->animation->addByPrefix(HX_("press",83,53,88,c8),HX_("arrow push right",0d,2a,d6,40),24,false,null(),null());
HXLINE( 165)		this->rightArrow->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 166)		this->difficultySelectors->add(this->rightArrow).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 168)		this->add(bgYellow);
HXLINE( 169)		this->add(this->bgSprite);
HXLINE( 170)		this->add(this->grpWeekCharacters);
HXLINE( 172)		 ::flixel::FlxSprite tracksSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.07)) + 100),(this->bgSprite->y + 425),null());
HXDLIN( 172)		 ::flixel::FlxSprite tracksSprite1 = tracksSprite->loadGraphic(::backend::Paths_obj::image(HX_("Menu_Tracks",68,85,99,50),null(),null()),null(),null(),null(),null(),null());
HXLINE( 173)		tracksSprite1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 174)		Float tracksSprite2 = tracksSprite1->x;
HXDLIN( 174)		tracksSprite1->set_x((tracksSprite2 - (tracksSprite1->get_width() / ( (Float)(2) ))));
HXLINE( 175)		this->add(tracksSprite1);
HXLINE( 177)		this->txtTracklist =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.05)),(tracksSprite1->y + 60),0,HX_("",00,00,00,00),32,null());
HXLINE( 178)		this->txtTracklist->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 179)		 ::flixel::text::FlxText _hx_tmp9 = this->txtTracklist;
HXDLIN( 179)		::String key3 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 179)		::Dynamic this5 = ::backend::Language_obj::phrases;
HXDLIN( 179)		::String str4 = ( ( ::haxe::ds::StringMap)(this5) )->get_string(::StringTools_obj::trim(key3).toLowerCase());
HXDLIN( 179)		if (::hx::IsNotNull( str4 )) {
HXLINE(  82)			key3 = str4;
            		}
HXLINE( 179)		::String folderKey2 = key3;
HXDLIN( 179)		::String file2 = ::backend::Paths_obj::modFolders(folderKey2);
HXDLIN( 179)		::String _hx_tmp10;
HXDLIN( 179)		if (::sys::FileSystem_obj::exists(file2)) {
HXLINE( 179)			_hx_tmp10 = file2;
            		}
            		else {
HXLINE( 179)			_hx_tmp10 = (HX_("assets/",4c,2a,dc,36) + folderKey2);
            		}
HXDLIN( 179)		_hx_tmp9->set_font(_hx_tmp10);
HXLINE( 180)		this->txtTracklist->set_color(-1747081);
HXLINE( 181)		this->add(this->txtTracklist);
HXLINE( 182)		this->add(this->scoreText);
HXLINE( 183)		this->add(this->txtWeekTitle);
HXLINE( 185)		this->changeWeek(null());
HXLINE( 186)		this->changeDifficulty(null());
HXLINE( 188)		this->super::create();
            	}


void StoryMenuState_obj::closeSubState(){
            	HX_STACKFRAME(&_hx_pos_bb97520c7169a052_191_closeSubState)
HXLINE( 192)		this->persistentUpdate = true;
HXLINE( 193)		this->changeWeek(null());
HXLINE( 194)		this->super::closeSubState();
            	}


void StoryMenuState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_bb97520c7169a052_198_update)
HXLINE( 199)		if ((::backend::WeekData_obj::weeksList->length < 1)) {
HXLINE( 201)			bool _hx_tmp;
HXDLIN( 201)			bool _hx_tmp1;
HXDLIN( 201)			if (this->get_controls()->get_BACK()) {
HXLINE( 201)				_hx_tmp1 = !(this->movedBack);
            			}
            			else {
HXLINE( 201)				_hx_tmp1 = false;
            			}
HXDLIN( 201)			if (_hx_tmp1) {
HXLINE( 201)				_hx_tmp = !(this->selectedWeek);
            			}
            			else {
HXLINE( 201)				_hx_tmp = false;
            			}
HXDLIN( 201)			if (_hx_tmp) {
HXLINE( 203)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN( 203)				_hx_tmp2->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("cancelMenu",39,a4,43,b7)),null(),true,null()),null(),null(),null(),null(),null());
HXLINE( 204)				this->movedBack = true;
HXLINE( 205)				::backend::MusicBeatState_obj::switchState( ::states::MainMenuState_obj::__alloc( HX_CTX ));
            			}
HXLINE( 207)			this->super::update(elapsed);
HXLINE( 208)			return;
            		}
HXLINE( 212)		if ((this->intendedScore != this->lerpScore)) {
HXLINE( 214)			Float a = ( (Float)(this->intendedScore) );
HXDLIN( 214)			this->lerpScore = ::Math_obj::floor((a + (::Math_obj::exp((-(elapsed) * ( (Float)(30) ))) * (( (Float)(this->lerpScore) ) - a))));
HXLINE( 215)			if ((::Math_obj::abs(( (Float)((this->intendedScore - this->lerpScore)) )) < 10)) {
HXLINE( 215)				this->lerpScore = this->intendedScore;
            			}
HXLINE( 217)			 ::flixel::text::FlxText _hx_tmp3 = this->scoreText;
HXDLIN( 217)			::cpp::VirtualArray values = ::cpp::VirtualArray_obj::__new(1)->init(0,this->lerpScore);
HXDLIN( 217)			::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 217)			 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN( 217)			::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(HX_("week_score",87,89,fc,02),HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN( 217)			if (::hx::IsNull( str )) {
HXLINE(  62)				str = HX_("WEEK SCORE: {1}",bb,95,25,dd);
            			}
HXLINE( 217)			if (::hx::IsNull( str )) {
HXLINE(  68)				str = HX_("week_score",87,89,fc,02);
            			}
HXLINE( 217)			if (::hx::IsNotNull( values )) {
HXLINE( 217)				int _g_current = 0;
HXDLIN( 217)				::cpp::VirtualArray _g_array = values;
HXDLIN( 217)				while((_g_current < _g_array->get_length())){
HXLINE( 217)					 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN( 217)					_g_current = (_g_current + 1);
HXDLIN( 217)					int _g_key = (_g_current - 1);
HXDLIN( 217)					int num = _g_key;
HXDLIN( 217)					 ::Dynamic value = _g_value;
HXLINE(  72)					str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            				}
            			}
HXLINE( 217)			_hx_tmp3->set_text(str);
            		}
HXLINE( 222)		bool _hx_tmp4;
HXDLIN( 222)		if (!(this->movedBack)) {
HXLINE( 222)			_hx_tmp4 = !(this->selectedWeek);
            		}
            		else {
HXLINE( 222)			_hx_tmp4 = false;
            		}
HXDLIN( 222)		if (_hx_tmp4) {
HXLINE( 224)			bool changeDiff = false;
HXLINE( 225)			if (this->get_controls()->get_UI_UP_P()) {
HXLINE( 227)				this->changeWeek(-1);
HXLINE( 228)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp5 = ::flixel::FlxG_obj::sound;
HXDLIN( 228)				_hx_tmp5->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("scrollMenu",4c,d4,18,06)),null(),true,null()),null(),null(),null(),null(),null());
HXLINE( 229)				changeDiff = true;
            			}
HXLINE( 232)			if (this->get_controls()->get_UI_DOWN_P()) {
HXLINE( 234)				this->changeWeek(1);
HXLINE( 235)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp6 = ::flixel::FlxG_obj::sound;
HXDLIN( 235)				_hx_tmp6->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("scrollMenu",4c,d4,18,06)),null(),true,null()),null(),null(),null(),null(),null());
HXLINE( 236)				changeDiff = true;
            			}
HXLINE( 239)			if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE( 241)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp7 = ::flixel::FlxG_obj::sound;
HXDLIN( 241)				_hx_tmp7->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("scrollMenu",4c,d4,18,06)),null(),true,null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 242)				this->changeWeek(-(::flixel::FlxG_obj::mouse->wheel));
HXLINE( 243)				this->changeDifficulty(null());
            			}
HXLINE( 246)			if (this->get_controls()->get_UI_RIGHT()) {
HXLINE( 247)				this->rightArrow->animation->play(HX_("press",83,53,88,c8),null(),null(),null());
            			}
            			else {
HXLINE( 249)				this->rightArrow->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
            			}
HXLINE( 251)			if (this->get_controls()->get_UI_LEFT()) {
HXLINE( 252)				this->leftArrow->animation->play(HX_("press",83,53,88,c8),null(),null(),null());
            			}
            			else {
HXLINE( 254)				this->leftArrow->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
            			}
HXLINE( 256)			if (this->get_controls()->get_UI_RIGHT_P()) {
HXLINE( 257)				this->changeDifficulty(1);
            			}
            			else {
HXLINE( 258)				if (this->get_controls()->get_UI_LEFT_P()) {
HXLINE( 259)					this->changeDifficulty(-1);
            				}
            				else {
HXLINE( 260)					if (changeDiff) {
HXLINE( 261)						this->changeDifficulty(null());
            					}
            				}
            			}
HXLINE( 263)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 263)			if (_this->keyManager->checkStatusUnsafe(17,_this->status)) {
HXLINE( 265)				this->persistentUpdate = false;
HXLINE( 266)				this->openSubState( ::options::GameplayChangersSubstate_obj::__alloc( HX_CTX ));
            			}
            			else {
HXLINE( 268)				if (this->get_controls()->get_RESET()) {
HXLINE( 270)					this->persistentUpdate = false;
HXLINE( 271)					this->openSubState( ::substates::ResetScoreSubState_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),this->curDifficulty,HX_("",00,00,00,00),::states::StoryMenuState_obj::curWeek));
            				}
            				else {
HXLINE( 274)					if (this->get_controls()->get_ACCEPT()) {
HXLINE( 275)						this->selectWeek();
            					}
            				}
            			}
            		}
HXLINE( 278)		bool _hx_tmp8;
HXDLIN( 278)		bool _hx_tmp9;
HXDLIN( 278)		if (this->get_controls()->get_BACK()) {
HXLINE( 278)			_hx_tmp9 = !(this->movedBack);
            		}
            		else {
HXLINE( 278)			_hx_tmp9 = false;
            		}
HXDLIN( 278)		if (_hx_tmp9) {
HXLINE( 278)			_hx_tmp8 = !(this->selectedWeek);
            		}
            		else {
HXLINE( 278)			_hx_tmp8 = false;
            		}
HXDLIN( 278)		if (_hx_tmp8) {
HXLINE( 280)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp10 = ::flixel::FlxG_obj::sound;
HXDLIN( 280)			_hx_tmp10->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("cancelMenu",39,a4,43,b7)),null(),true,null()),null(),null(),null(),null(),null());
HXLINE( 281)			this->movedBack = true;
HXLINE( 282)			::backend::MusicBeatState_obj::switchState( ::states::MainMenuState_obj::__alloc( HX_CTX ));
            		}
HXLINE( 285)		this->super::update(elapsed);
HXLINE( 287)		Float offY = Dynamic( this->grpWeekText->members->__get(::states::StoryMenuState_obj::curWeek)).StaticCast<  ::objects::MenuItem >()->targetY;
HXLINE( 288)		{
HXLINE( 288)			int _g_current1 = 0;
HXDLIN( 288)			::Array< ::Dynamic> _g_array1 = this->grpWeekText->members;
HXDLIN( 288)			while((_g_current1 < _g_array1->length)){
HXLINE( 288)				 ::objects::MenuItem _g_value1 = _g_array1->__get(_g_current1).StaticCast<  ::objects::MenuItem >();
HXDLIN( 288)				_g_current1 = (_g_current1 + 1);
HXDLIN( 288)				int _g_key1 = (_g_current1 - 1);
HXDLIN( 288)				int num1 = _g_key1;
HXDLIN( 288)				 ::objects::MenuItem item = _g_value1;
HXLINE( 289)				Float a1 = ((item->targetY - offY) + 480);
HXDLIN( 289)				item->set_y((a1 + (::Math_obj::exp((-(elapsed) * ((Float)10.2))) * (item->y - a1))));
            			}
            		}
HXLINE( 291)		{
HXLINE( 291)			int _g_current2 = 0;
HXDLIN( 291)			::Array< ::Dynamic> _g_array2 = this->grpLocks->members;
HXDLIN( 291)			while((_g_current2 < _g_array2->length)){
HXLINE( 291)				 ::flixel::FlxSprite _g_value2 = _g_array2->__get(_g_current2).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 291)				_g_current2 = (_g_current2 + 1);
HXDLIN( 291)				int _g_key2 = (_g_current2 - 1);
HXDLIN( 291)				int num2 = _g_key2;
HXDLIN( 291)				 ::flixel::FlxSprite lock = _g_value2;
HXLINE( 292)				Float _hx_tmp11 = Dynamic( this->grpWeekText->members->__get(lock->ID)).StaticCast<  ::objects::MenuItem >()->y;
HXDLIN( 292)				Float _hx_tmp12 = (_hx_tmp11 + (Dynamic( this->grpWeekText->members->__get(lock->ID)).StaticCast<  ::objects::MenuItem >()->get_height() / ( (Float)(2) )));
HXDLIN( 292)				lock->set_y((_hx_tmp12 - (lock->get_height() / ( (Float)(2) ))));
            			}
            		}
            	}


void StoryMenuState_obj::selectWeek(){
            	HX_GC_STACKFRAME(&_hx_pos_bb97520c7169a052_301_selectWeek)
HXDLIN( 301)		if (!(this->weekIsLocked(this->loadedWeeks->__get(::states::StoryMenuState_obj::curWeek).StaticCast<  ::backend::WeekData >()->fileName))) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_bb97520c7169a052_359_selectWeek)
HXLINE( 361)				::backend::MusicBeatState_obj::switchState(::states::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::states::PlayState_obj::__alloc( HX_CTX )) ),true,true));
HXLINE( 362)				::states::FreeplayState_obj::destroyFreeplayVocals();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 304)			::Array< ::String > songArray = ::Array_obj< ::String >::__new(0);
HXLINE( 305)			::cpp::VirtualArray leWeek = this->loadedWeeks->__get(::states::StoryMenuState_obj::curWeek).StaticCast<  ::backend::WeekData >()->songs;
HXLINE( 306)			{
HXLINE( 306)				int _g = 0;
HXDLIN( 306)				int _g1 = leWeek->get_length();
HXDLIN( 306)				while((_g < _g1)){
HXLINE( 306)					_g = (_g + 1);
HXDLIN( 306)					int i = (_g - 1);
HXLINE( 307)					songArray->push(leWeek->__get(i)->__GetItem(0));
            				}
            			}
HXLINE( 311)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 313)				::states::PlayState_obj::storyPlaylist = songArray;
HXLINE( 314)				::states::PlayState_obj::isStoryMode = true;
HXLINE( 315)				this->selectedWeek = true;
HXLINE( 317)				 ::Dynamic num = this->curDifficulty;
HXDLIN( 317)				if (::hx::IsNull( num )) {
HXLINE( 317)					num = ::states::PlayState_obj::storyDifficulty;
            				}
HXDLIN( 317)				::String filePostfix = ::backend::Difficulty_obj::list->__get(( (int)(num) ));
HXDLIN( 317)				bool _hx_tmp;
HXDLIN( 317)				if (::hx::IsNotNull( filePostfix )) {
HXLINE( 317)					 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 317)					 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 317)					::String _hx_tmp1 = ::StringTools_obj::trim(hideChars->replace(invalidChars->replace(filePostfix,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
HXDLIN( 317)					 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 317)					 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 317)					_hx_tmp = (_hx_tmp1 != ::StringTools_obj::trim(hideChars1->replace(invalidChars1->replace(::backend::Difficulty_obj::defaultDifficulty,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase());
            				}
            				else {
HXLINE( 317)					_hx_tmp = false;
            				}
HXDLIN( 317)				if (_hx_tmp) {
HXLINE( 317)					filePostfix = (HX_("-",2d,00,00,00) + filePostfix);
            				}
            				else {
HXLINE( 317)					filePostfix = HX_("",00,00,00,00);
            				}
HXDLIN( 317)				 ::EReg invalidChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 317)				 ::EReg hideChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 317)				::String diffic = ::StringTools_obj::trim(hideChars2->replace(invalidChars2->replace(filePostfix,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
HXLINE( 318)				if (::hx::IsNull( diffic )) {
HXLINE( 318)					diffic = HX_("",00,00,00,00);
            				}
HXLINE( 320)				::states::PlayState_obj::storyDifficulty = this->curDifficulty;
HXLINE( 322)				::String _hx_tmp2 = (::states::PlayState_obj::storyPlaylist->__get(0).toLowerCase() + diffic);
HXDLIN( 322)				::backend::Song_obj::loadFromJson(_hx_tmp2,::states::PlayState_obj::storyPlaylist->__get(0).toLowerCase());
HXLINE( 323)				::states::PlayState_obj::campaignScore = 0;
HXLINE( 324)				::states::PlayState_obj::campaignMisses = 0;
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g2 = _hx_e;
HXLINE( 326)					{
HXLINE( 326)						null();
            					}
HXDLIN( 326)					 ::Dynamic e = _g2;
HXLINE( 328)					 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 328)					::String _hx_tmp4 = (HX_("ERROR! ",87,5a,de,69) + ::Std_obj::string(e));
HXDLIN( 328)					_hx_tmp3(_hx_tmp4,::hx::SourceInfo(HX_("source/states/StoryMenuState.hx",28,99,e6,49),328,HX_("states.StoryMenuState",09,2f,42,21),HX_("selectWeek",10,d5,90,bd)));
HXLINE( 329)					return;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 332)			if ((this->stopspamming == false)) {
HXLINE( 334)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp5 = ::flixel::FlxG_obj::sound;
HXDLIN( 334)				_hx_tmp5->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("confirmMenu",bf,8e,fe,3c)),null(),true,null()),null(),null(),null(),null(),null());
HXLINE( 336)				Dynamic( this->grpWeekText->members->__get(::states::StoryMenuState_obj::curWeek)).StaticCast<  ::objects::MenuItem >()->set_isFlashing(true);
HXLINE( 337)				{
HXLINE( 337)					int _g3 = 0;
HXDLIN( 337)					::Array< ::Dynamic> _g4 = this->grpWeekCharacters->members;
HXDLIN( 337)					while((_g3 < _g4->length)){
HXLINE( 337)						 ::objects::MenuCharacter _hx_char = _g4->__get(_g3).StaticCast<  ::objects::MenuCharacter >();
HXDLIN( 337)						_g3 = (_g3 + 1);
HXLINE( 339)						bool _hx_tmp6;
HXDLIN( 339)						if ((_hx_char->character != HX_("",00,00,00,00))) {
HXLINE( 339)							_hx_tmp6 = _hx_char->hasConfirmAnimation;
            						}
            						else {
HXLINE( 339)							_hx_tmp6 = false;
            						}
HXDLIN( 339)						if (_hx_tmp6) {
HXLINE( 341)							_hx_char->animation->play(HX_("confirm",00,9d,39,10),null(),null(),null());
            						}
            					}
            				}
HXLINE( 344)				this->stopspamming = true;
            			}
HXLINE( 347)			::String directory = ::backend::StageData_obj::forceNextDirectory;
HXLINE( 348)			::states::LoadingState_obj::loadNextDirectory();
HXLINE( 349)			::backend::StageData_obj::forceNextDirectory = directory;
HXLINE( 352)			if ((::states::PlayState_obj::_lastLoadedModDirectory != ::backend::Mods_obj::currentModDirectory)) {
HXLINE( 354)				::haxe::Log_obj::trace(HX_("CHANGED MOD DIRECTORY, RELOADING STUFF",26,cc,2c,25),::hx::SourceInfo(HX_("source/states/StoryMenuState.hx",28,99,e6,49),354,HX_("states.StoryMenuState",09,2f,42,21),HX_("selectWeek",10,d5,90,bd)));
HXLINE( 355)				::backend::Paths_obj::freeGraphicsFromMemory();
            			}
HXLINE( 357)			::states::LoadingState_obj::prepareToSong();
HXLINE( 358)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_0()),null());
HXLINE( 366)			::backend::DiscordClient_obj::loadModRPC();
            		}
            		else {
HXLINE( 369)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp7 = ::flixel::FlxG_obj::sound;
HXDLIN( 369)			_hx_tmp7->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("cancelMenu",39,a4,43,b7)),null(),true,null()),null(),null(),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(StoryMenuState_obj,selectWeek,(void))

void StoryMenuState_obj::changeDifficulty(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_bb97520c7169a052_373_changeDifficulty)
HXLINE( 374)		 ::states::StoryMenuState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 374)		_hx_tmp->curDifficulty = (_hx_tmp->curDifficulty + change);
HXLINE( 376)		if ((this->curDifficulty < 0)) {
HXLINE( 377)			this->curDifficulty = (::backend::Difficulty_obj::list->length - 1);
            		}
HXLINE( 378)		if ((this->curDifficulty >= ::backend::Difficulty_obj::list->length)) {
HXLINE( 379)			this->curDifficulty = 0;
            		}
HXLINE( 381)		::backend::WeekData_obj::setDirectoryFromWeek(this->loadedWeeks->__get(::states::StoryMenuState_obj::curWeek).StaticCast<  ::backend::WeekData >());
HXLINE( 383)		 ::Dynamic num = this->curDifficulty;
HXDLIN( 383)		 ::Dynamic canTranslate = false;
HXDLIN( 383)		if (::hx::IsNull( canTranslate )) {
HXLINE( 383)			canTranslate = true;
            		}
HXDLIN( 383)		 ::Dynamic diffName;
HXDLIN( 383)		if (::hx::IsNull( num )) {
HXLINE( 383)			diffName = ::states::PlayState_obj::storyDifficulty;
            		}
            		else {
HXLINE( 383)			diffName = num;
            		}
HXDLIN( 383)		::String diffName1 = ::backend::Difficulty_obj::list->__get(( (int)(diffName) ));
HXDLIN( 383)		if (::hx::IsNull( diffName1 )) {
HXLINE(  64)			diffName1 = ::backend::Difficulty_obj::defaultDifficulty;
            		}
HXLINE( 383)		::String diff;
HXDLIN( 383)		if (( (bool)(canTranslate) )) {
HXLINE( 383)			::String key = (HX_("difficulty_",c4,25,f6,54) + diffName1);
HXDLIN( 383)			::cpp::VirtualArray values = null();
HXDLIN( 383)			::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 383)			 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN( 383)			::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(key,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN( 383)			if (::hx::IsNull( str )) {
HXLINE(  62)				str = diffName1;
            			}
HXLINE( 383)			if (::hx::IsNull( str )) {
HXLINE(  68)				str = key;
            			}
HXLINE( 383)			if (::hx::IsNotNull( values )) {
HXLINE( 383)				int _g_current = 0;
HXDLIN( 383)				::cpp::VirtualArray _g_array = values;
HXDLIN( 383)				while((_g_current < _g_array->get_length())){
HXLINE( 383)					 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN( 383)					_g_current = (_g_current + 1);
HXDLIN( 383)					int _g_key = (_g_current - 1);
HXDLIN( 383)					int num1 = _g_key;
HXDLIN( 383)					 ::Dynamic value = _g_value;
HXLINE(  72)					str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num1 + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            				}
            			}
HXLINE( 383)			diff = str;
            		}
            		else {
HXLINE( 383)			diff = diffName1;
            		}
HXLINE( 384)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 384)		 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 384)		 ::flixel::graphics::FlxGraphic newImage = ::backend::Paths_obj::image((HX_("menudifficulties/",b7,09,b6,65) + ::StringTools_obj::trim(hideChars1->replace(invalidChars->replace(diff,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase()),null(),null());
HXLINE( 387)		if (::hx::IsInstanceNotEq( this->sprDifficulty->graphic,newImage )) {
HXLINE( 389)			this->sprDifficulty->loadGraphic(newImage,null(),null(),null(),null(),null());
HXLINE( 390)			this->sprDifficulty->set_x((this->leftArrow->x + 60));
HXLINE( 391)			 ::flixel::FlxSprite fh = this->sprDifficulty;
HXDLIN( 391)			Float fh1 = fh->x;
HXDLIN( 391)			fh->set_x((fh1 + ((( (Float)(308) ) - this->sprDifficulty->get_width()) / ( (Float)(3) ))));
HXLINE( 392)			this->sprDifficulty->set_alpha(( (Float)(0) ));
HXLINE( 393)			 ::flixel::FlxSprite _hx_tmp1 = this->sprDifficulty;
HXDLIN( 393)			Float _hx_tmp2 = this->leftArrow->y;
HXDLIN( 393)			_hx_tmp1->set_y(((_hx_tmp2 - this->sprDifficulty->get_height()) + 50));
HXLINE( 395)			::flixel::tweens::FlxTween_obj::cancelTweensOf(this->sprDifficulty,null());
HXLINE( 396)			::flixel::tweens::FlxTween_obj::tween(this->sprDifficulty, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("y",79,00,00,00),(this->sprDifficulty->y + 30))
            				->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.07),null());
            		}
HXLINE( 398)		::states::StoryMenuState_obj::lastDifficultyName = diff;
HXLINE( 401)		this->intendedScore = ::backend::Highscore_obj::getWeekScore(this->loadedWeeks->__get(::states::StoryMenuState_obj::curWeek).StaticCast<  ::backend::WeekData >()->fileName,this->curDifficulty);
            	}


HX_DEFINE_DYNAMIC_FUNC1(StoryMenuState_obj,changeDifficulty,(void))

void StoryMenuState_obj::changeWeek(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_bb97520c7169a052_409_changeWeek)
HXLINE( 410)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::states::StoryMenuState >();
HXDLIN( 410)		::states::StoryMenuState_obj::curWeek = (::states::StoryMenuState_obj::curWeek + change);
HXLINE( 412)		if ((::states::StoryMenuState_obj::curWeek >= this->loadedWeeks->length)) {
HXLINE( 413)			::states::StoryMenuState_obj::curWeek = 0;
            		}
HXLINE( 414)		if ((::states::StoryMenuState_obj::curWeek < 0)) {
HXLINE( 415)			::states::StoryMenuState_obj::curWeek = (this->loadedWeeks->length - 1);
            		}
HXLINE( 417)		 ::backend::WeekData leWeek = this->loadedWeeks->__get(::states::StoryMenuState_obj::curWeek).StaticCast<  ::backend::WeekData >();
HXLINE( 418)		::backend::WeekData_obj::setDirectoryFromWeek(leWeek);
HXLINE( 420)		::String key = (HX_("storyname_",9f,03,f9,3f) + leWeek->fileName);
HXDLIN( 420)		::String defaultPhrase = leWeek->storyName;
HXDLIN( 420)		::cpp::VirtualArray values = null();
HXDLIN( 420)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 420)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN( 420)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(key,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN( 420)		if (::hx::IsNull( str )) {
HXLINE(  62)			str = defaultPhrase;
            		}
HXLINE( 420)		if (::hx::IsNull( str )) {
HXLINE(  68)			str = key;
            		}
HXLINE( 420)		if (::hx::IsNotNull( values )) {
HXLINE( 420)			int _g_current = 0;
HXDLIN( 420)			::cpp::VirtualArray _g_array = values;
HXDLIN( 420)			while((_g_current < _g_array->get_length())){
HXLINE( 420)				 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN( 420)				_g_current = (_g_current + 1);
HXDLIN( 420)				int _g_key = (_g_current - 1);
HXDLIN( 420)				int num = _g_key;
HXDLIN( 420)				 ::Dynamic value = _g_value;
HXLINE(  72)				str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            			}
            		}
HXLINE( 420)		::String leName = str;
HXLINE( 421)		 ::flixel::text::FlxText _hx_tmp1 = this->txtWeekTitle;
HXDLIN( 421)		_hx_tmp1->set_text(leName.toUpperCase());
HXLINE( 422)		 ::flixel::text::FlxText _hx_tmp2 = this->txtWeekTitle;
HXDLIN( 422)		int _hx_tmp3 = ::flixel::FlxG_obj::width;
HXDLIN( 422)		_hx_tmp2->set_x((( (Float)(_hx_tmp3) ) - (this->txtWeekTitle->get_width() + 10)));
HXLINE( 424)		bool unlocked = !(this->weekIsLocked(leWeek->fileName));
HXLINE( 425)		{
HXLINE( 425)			int _g_current1 = 0;
HXDLIN( 425)			::Array< ::Dynamic> _g_array1 = this->grpWeekText->members;
HXDLIN( 425)			while((_g_current1 < _g_array1->length)){
HXLINE( 425)				 ::objects::MenuItem _g_value1 = _g_array1->__get(_g_current1).StaticCast<  ::objects::MenuItem >();
HXDLIN( 425)				_g_current1 = (_g_current1 + 1);
HXDLIN( 425)				int _g_key1 = (_g_current1 - 1);
HXDLIN( 425)				int num1 = _g_key1;
HXDLIN( 425)				 ::objects::MenuItem item = _g_value1;
HXLINE( 426)				{
HXLINE( 427)					item->set_alpha(((Float)0.6));
HXLINE( 428)					bool _hx_tmp4;
HXDLIN( 428)					if (((num1 - ::states::StoryMenuState_obj::curWeek) == 0)) {
HXLINE( 428)						_hx_tmp4 = unlocked;
            					}
            					else {
HXLINE( 428)						_hx_tmp4 = false;
            					}
HXDLIN( 428)					if (_hx_tmp4) {
HXLINE( 429)						item->set_alpha(( (Float)(1) ));
            					}
            				}
            			}
            		}
HXLINE( 432)		this->bgSprite->set_visible(true);
HXLINE( 433)		::String assetName = leWeek->weekBackground;
HXLINE( 434)		bool _hx_tmp5;
HXDLIN( 434)		if (::hx::IsNotNull( assetName )) {
HXLINE( 434)			_hx_tmp5 = (assetName.length < 1);
            		}
            		else {
HXLINE( 434)			_hx_tmp5 = true;
            		}
HXDLIN( 434)		if (_hx_tmp5) {
HXLINE( 435)			this->bgSprite->set_visible(false);
            		}
            		else {
HXLINE( 437)			 ::flixel::FlxSprite _hx_tmp6 = this->bgSprite;
HXDLIN( 437)			_hx_tmp6->loadGraphic(::backend::Paths_obj::image((HX_("menubackgrounds/menu_",57,51,99,49) + assetName),null(),null()),null(),null(),null(),null(),null());
            		}
HXLINE( 439)		::states::PlayState_obj::storyWeek = ::states::StoryMenuState_obj::curWeek;
HXLINE( 441)		{
HXLINE( 441)			 ::backend::WeekData week = null();
HXDLIN( 441)			if (::hx::IsNull( week )) {
HXLINE(  28)				week = ::backend::WeekData_obj::getCurrentWeek();
            			}
HXLINE( 441)			::String diffStr = week->difficulties;
HXDLIN( 441)			bool _hx_tmp7;
HXDLIN( 441)			if (::hx::IsNotNull( diffStr )) {
HXLINE( 441)				_hx_tmp7 = (diffStr.length > 0);
            			}
            			else {
HXLINE( 441)				_hx_tmp7 = false;
            			}
HXDLIN( 441)			if (_hx_tmp7) {
HXLINE( 441)				::Array< ::String > diffs = ::StringTools_obj::trim(diffStr).split(HX_(",",2c,00,00,00));
HXDLIN( 441)				int i = (diffs->length - 1);
HXDLIN( 441)				while((i > 0)){
HXLINE( 441)					if (::hx::IsNotNull( diffs->__get(i) )) {
HXLINE( 441)						diffs[i] = ::StringTools_obj::trim(diffs->__get(i));
HXDLIN( 441)						if ((diffs->__get(i).length < 1)) {
HXLINE( 441)							diffs->remove(diffs->__get(i));
            						}
            					}
HXDLIN( 441)					i = (i - 1);
            				}
HXDLIN( 441)				bool _hx_tmp8;
HXDLIN( 441)				if ((diffs->length > 0)) {
HXLINE( 441)					_hx_tmp8 = (diffs->__get(0).length > 0);
            				}
            				else {
HXLINE( 441)					_hx_tmp8 = false;
            				}
HXDLIN( 441)				if (_hx_tmp8) {
HXLINE( 441)					::backend::Difficulty_obj::list = diffs;
            				}
            			}
            			else {
HXLINE( 441)				::backend::Difficulty_obj::list = ::backend::Difficulty_obj::defaultList->copy();
            			}
            		}
HXLINE( 442)		this->difficultySelectors->set_visible(unlocked);
HXLINE( 444)		if (::backend::Difficulty_obj::list->contains(::backend::Difficulty_obj::defaultDifficulty)) {
HXLINE( 445)			this->curDifficulty = ::Math_obj::round(::Math_obj::max(( (Float)(0) ),( (Float)(::backend::Difficulty_obj::defaultList->indexOf(::backend::Difficulty_obj::defaultDifficulty,null())) )));
            		}
            		else {
HXLINE( 447)			this->curDifficulty = 0;
            		}
HXLINE( 449)		int newPos = ::backend::Difficulty_obj::list->indexOf(::states::StoryMenuState_obj::lastDifficultyName,null());
HXLINE( 451)		if ((newPos > -1)) {
HXLINE( 453)			this->curDifficulty = newPos;
            		}
HXLINE( 455)		this->updateText();
            	}


HX_DEFINE_DYNAMIC_FUNC1(StoryMenuState_obj,changeWeek,(void))

bool StoryMenuState_obj::weekIsLocked(::String name){
            	HX_STACKFRAME(&_hx_pos_bb97520c7169a052_458_weekIsLocked)
HXLINE( 459)		 ::backend::WeekData leWeek = ( ( ::backend::WeekData)(::backend::WeekData_obj::weeksLoaded->get(name)) );
HXLINE( 460)		bool _hx_tmp;
HXDLIN( 460)		if (!(leWeek->startUnlocked)) {
HXLINE( 460)			_hx_tmp = (leWeek->weekBefore.length > 0);
            		}
            		else {
HXLINE( 460)			_hx_tmp = false;
            		}
HXDLIN( 460)		if (_hx_tmp) {
HXLINE( 460)			if (::states::StoryMenuState_obj::weekCompleted->exists(leWeek->weekBefore)) {
HXLINE( 460)				return !(::states::StoryMenuState_obj::weekCompleted->get_bool(leWeek->weekBefore));
            			}
            			else {
HXLINE( 460)				return true;
            			}
            		}
            		else {
HXLINE( 460)			return false;
            		}
HXDLIN( 460)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(StoryMenuState_obj,weekIsLocked,return )

void StoryMenuState_obj::updateText(){
            	HX_STACKFRAME(&_hx_pos_bb97520c7169a052_464_updateText)
HXLINE( 465)		::Array< ::String > weekArray = this->loadedWeeks->__get(::states::StoryMenuState_obj::curWeek).StaticCast<  ::backend::WeekData >()->weekCharacters;
HXLINE( 466)		{
HXLINE( 466)			int _g = 0;
HXDLIN( 466)			int _g1 = this->grpWeekCharacters->length;
HXDLIN( 466)			while((_g < _g1)){
HXLINE( 466)				_g = (_g + 1);
HXDLIN( 466)				int i = (_g - 1);
HXLINE( 467)				Dynamic( this->grpWeekCharacters->members->__get(i)).StaticCast<  ::objects::MenuCharacter >()->changeCharacter(weekArray->__get(i));
            			}
            		}
HXLINE( 470)		 ::backend::WeekData leWeek = this->loadedWeeks->__get(::states::StoryMenuState_obj::curWeek).StaticCast<  ::backend::WeekData >();
HXLINE( 471)		::Array< ::String > stringThing = ::Array_obj< ::String >::__new(0);
HXLINE( 472)		{
HXLINE( 472)			int _g2 = 0;
HXDLIN( 472)			int _g3 = leWeek->songs->get_length();
HXDLIN( 472)			while((_g2 < _g3)){
HXLINE( 472)				_g2 = (_g2 + 1);
HXDLIN( 472)				int i1 = (_g2 - 1);
HXLINE( 473)				stringThing->push(leWeek->songs->__get(i1)->__GetItem(0));
            			}
            		}
HXLINE( 476)		this->txtTracklist->set_text(HX_("",00,00,00,00));
HXLINE( 477)		{
HXLINE( 477)			int _g4 = 0;
HXDLIN( 477)			int _g5 = stringThing->length;
HXDLIN( 477)			while((_g4 < _g5)){
HXLINE( 477)				_g4 = (_g4 + 1);
HXDLIN( 477)				int i2 = (_g4 - 1);
HXLINE( 479)				 ::flixel::text::FlxText fh = this->txtTracklist;
HXDLIN( 479)				fh->set_text((fh->text + (stringThing->__get(i2) + HX_("\n",0a,00,00,00))));
            			}
            		}
HXLINE( 482)		 ::flixel::text::FlxText _hx_tmp = this->txtTracklist;
HXDLIN( 482)		_hx_tmp->set_text(this->txtTracklist->text.toUpperCase());
HXLINE( 484)		{
HXLINE( 484)			 ::flixel::text::FlxText _this = this->txtTracklist;
HXDLIN( 484)			int axes = 1;
HXDLIN( 484)			bool _hx_tmp1;
HXDLIN( 484)			if ((axes != 1)) {
HXLINE( 484)				_hx_tmp1 = (axes == 17);
            			}
            			else {
HXLINE( 484)				_hx_tmp1 = true;
            			}
HXDLIN( 484)			if (_hx_tmp1) {
HXLINE( 484)				int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN( 484)				_this->set_x(((( (Float)(_hx_tmp2) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 484)			bool _hx_tmp3;
HXDLIN( 484)			if ((axes != 16)) {
HXLINE( 484)				_hx_tmp3 = (axes == 17);
            			}
            			else {
HXLINE( 484)				_hx_tmp3 = true;
            			}
HXDLIN( 484)			if (_hx_tmp3) {
HXLINE( 484)				int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN( 484)				_this->set_y(((( (Float)(_hx_tmp4) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 485)		 ::flixel::text::FlxText fh1 = this->txtTracklist;
HXDLIN( 485)		fh1->set_x((fh1->x - (( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.35))));
HXLINE( 488)		this->intendedScore = ::backend::Highscore_obj::getWeekScore(this->loadedWeeks->__get(::states::StoryMenuState_obj::curWeek).StaticCast<  ::backend::WeekData >()->fileName,this->curDifficulty);
            	}


HX_DEFINE_DYNAMIC_FUNC0(StoryMenuState_obj,updateText,(void))

 ::haxe::ds::StringMap StoryMenuState_obj::weekCompleted;

::String StoryMenuState_obj::lastDifficultyName;

int StoryMenuState_obj::curWeek;


::hx::ObjectPtr< StoryMenuState_obj > StoryMenuState_obj::__new() {
	::hx::ObjectPtr< StoryMenuState_obj > __this = new StoryMenuState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< StoryMenuState_obj > StoryMenuState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	StoryMenuState_obj *__this = (StoryMenuState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StoryMenuState_obj), true, "states.StoryMenuState"));
	*(void **)__this = StoryMenuState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

StoryMenuState_obj::StoryMenuState_obj()
{
}

void StoryMenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StoryMenuState);
	HX_MARK_MEMBER_NAME(scoreText,"scoreText");
	HX_MARK_MEMBER_NAME(curDifficulty,"curDifficulty");
	HX_MARK_MEMBER_NAME(txtWeekTitle,"txtWeekTitle");
	HX_MARK_MEMBER_NAME(bgSprite,"bgSprite");
	HX_MARK_MEMBER_NAME(txtTracklist,"txtTracklist");
	HX_MARK_MEMBER_NAME(grpWeekText,"grpWeekText");
	HX_MARK_MEMBER_NAME(grpWeekCharacters,"grpWeekCharacters");
	HX_MARK_MEMBER_NAME(grpLocks,"grpLocks");
	HX_MARK_MEMBER_NAME(difficultySelectors,"difficultySelectors");
	HX_MARK_MEMBER_NAME(sprDifficulty,"sprDifficulty");
	HX_MARK_MEMBER_NAME(leftArrow,"leftArrow");
	HX_MARK_MEMBER_NAME(rightArrow,"rightArrow");
	HX_MARK_MEMBER_NAME(loadedWeeks,"loadedWeeks");
	HX_MARK_MEMBER_NAME(movedBack,"movedBack");
	HX_MARK_MEMBER_NAME(selectedWeek,"selectedWeek");
	HX_MARK_MEMBER_NAME(stopspamming,"stopspamming");
	HX_MARK_MEMBER_NAME(lerpScore,"lerpScore");
	HX_MARK_MEMBER_NAME(intendedScore,"intendedScore");
	 ::backend::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void StoryMenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(scoreText,"scoreText");
	HX_VISIT_MEMBER_NAME(curDifficulty,"curDifficulty");
	HX_VISIT_MEMBER_NAME(txtWeekTitle,"txtWeekTitle");
	HX_VISIT_MEMBER_NAME(bgSprite,"bgSprite");
	HX_VISIT_MEMBER_NAME(txtTracklist,"txtTracklist");
	HX_VISIT_MEMBER_NAME(grpWeekText,"grpWeekText");
	HX_VISIT_MEMBER_NAME(grpWeekCharacters,"grpWeekCharacters");
	HX_VISIT_MEMBER_NAME(grpLocks,"grpLocks");
	HX_VISIT_MEMBER_NAME(difficultySelectors,"difficultySelectors");
	HX_VISIT_MEMBER_NAME(sprDifficulty,"sprDifficulty");
	HX_VISIT_MEMBER_NAME(leftArrow,"leftArrow");
	HX_VISIT_MEMBER_NAME(rightArrow,"rightArrow");
	HX_VISIT_MEMBER_NAME(loadedWeeks,"loadedWeeks");
	HX_VISIT_MEMBER_NAME(movedBack,"movedBack");
	HX_VISIT_MEMBER_NAME(selectedWeek,"selectedWeek");
	HX_VISIT_MEMBER_NAME(stopspamming,"stopspamming");
	HX_VISIT_MEMBER_NAME(lerpScore,"lerpScore");
	HX_VISIT_MEMBER_NAME(intendedScore,"intendedScore");
	 ::backend::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val StoryMenuState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bgSprite") ) { return ::hx::Val( bgSprite ); }
		if (HX_FIELD_EQ(inName,"grpLocks") ) { return ::hx::Val( grpLocks ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { return ::hx::Val( scoreText ); }
		if (HX_FIELD_EQ(inName,"leftArrow") ) { return ::hx::Val( leftArrow ); }
		if (HX_FIELD_EQ(inName,"movedBack") ) { return ::hx::Val( movedBack ); }
		if (HX_FIELD_EQ(inName,"lerpScore") ) { return ::hx::Val( lerpScore ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rightArrow") ) { return ::hx::Val( rightArrow ); }
		if (HX_FIELD_EQ(inName,"selectWeek") ) { return ::hx::Val( selectWeek_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeWeek") ) { return ::hx::Val( changeWeek_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateText") ) { return ::hx::Val( updateText_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"grpWeekText") ) { return ::hx::Val( grpWeekText ); }
		if (HX_FIELD_EQ(inName,"loadedWeeks") ) { return ::hx::Val( loadedWeeks ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"txtWeekTitle") ) { return ::hx::Val( txtWeekTitle ); }
		if (HX_FIELD_EQ(inName,"txtTracklist") ) { return ::hx::Val( txtTracklist ); }
		if (HX_FIELD_EQ(inName,"selectedWeek") ) { return ::hx::Val( selectedWeek ); }
		if (HX_FIELD_EQ(inName,"stopspamming") ) { return ::hx::Val( stopspamming ); }
		if (HX_FIELD_EQ(inName,"weekIsLocked") ) { return ::hx::Val( weekIsLocked_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { return ::hx::Val( curDifficulty ); }
		if (HX_FIELD_EQ(inName,"sprDifficulty") ) { return ::hx::Val( sprDifficulty ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"intendedScore") ) { return ::hx::Val( intendedScore ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"changeDifficulty") ) { return ::hx::Val( changeDifficulty_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"grpWeekCharacters") ) { return ::hx::Val( grpWeekCharacters ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"difficultySelectors") ) { return ::hx::Val( difficultySelectors ); }
	}
	return super::__Field(inName,inCallProp);
}

bool StoryMenuState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"curWeek") ) { outValue = ( curWeek ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"weekCompleted") ) { outValue = ( weekCompleted ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lastDifficultyName") ) { outValue = ( lastDifficultyName ); return true; }
	}
	return false;
}

::hx::Val StoryMenuState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"bgSprite") ) { bgSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpLocks") ) { grpLocks=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scoreText") ) { scoreText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftArrow") ) { leftArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"movedBack") ) { movedBack=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lerpScore") ) { lerpScore=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rightArrow") ) { rightArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"grpWeekText") ) { grpWeekText=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loadedWeeks") ) { loadedWeeks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"txtWeekTitle") ) { txtWeekTitle=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"txtTracklist") ) { txtTracklist=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectedWeek") ) { selectedWeek=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stopspamming") ) { stopspamming=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { curDifficulty=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sprDifficulty") ) { sprDifficulty=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"intendedScore") ) { intendedScore=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"grpWeekCharacters") ) { grpWeekCharacters=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"difficultySelectors") ) { difficultySelectors=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool StoryMenuState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"curWeek") ) { curWeek=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"weekCompleted") ) { weekCompleted=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lastDifficultyName") ) { lastDifficultyName=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void StoryMenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("scoreText",1f,7d,bd,dc));
	outFields->push(HX_("curDifficulty",db,b7,38,a7));
	outFields->push(HX_("txtWeekTitle",74,f4,3f,69));
	outFields->push(HX_("bgSprite",aa,c7,9c,98));
	outFields->push(HX_("txtTracklist",d9,6f,f5,3e));
	outFields->push(HX_("grpWeekText",c6,97,1f,d2));
	outFields->push(HX_("grpWeekCharacters",83,fc,76,59));
	outFields->push(HX_("grpLocks",03,78,f1,5b));
	outFields->push(HX_("difficultySelectors",b9,fa,53,88));
	outFields->push(HX_("sprDifficulty",d0,6b,83,ba));
	outFields->push(HX_("leftArrow",42,68,6f,3a));
	outFields->push(HX_("rightArrow",4d,60,54,28));
	outFields->push(HX_("loadedWeeks",ba,8b,e0,c1));
	outFields->push(HX_("movedBack",fa,67,95,ea));
	outFields->push(HX_("selectedWeek",ef,7f,8f,df));
	outFields->push(HX_("stopspamming",e0,83,63,4e));
	outFields->push(HX_("lerpScore",5b,81,4d,e7));
	outFields->push(HX_("intendedScore",a7,fd,7c,89));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StoryMenuState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(StoryMenuState_obj,scoreText),HX_("scoreText",1f,7d,bd,dc)},
	{::hx::fsInt,(int)offsetof(StoryMenuState_obj,curDifficulty),HX_("curDifficulty",db,b7,38,a7)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(StoryMenuState_obj,txtWeekTitle),HX_("txtWeekTitle",74,f4,3f,69)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StoryMenuState_obj,bgSprite),HX_("bgSprite",aa,c7,9c,98)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(StoryMenuState_obj,txtTracklist),HX_("txtTracklist",d9,6f,f5,3e)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(StoryMenuState_obj,grpWeekText),HX_("grpWeekText",c6,97,1f,d2)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(StoryMenuState_obj,grpWeekCharacters),HX_("grpWeekCharacters",83,fc,76,59)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(StoryMenuState_obj,grpLocks),HX_("grpLocks",03,78,f1,5b)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(StoryMenuState_obj,difficultySelectors),HX_("difficultySelectors",b9,fa,53,88)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StoryMenuState_obj,sprDifficulty),HX_("sprDifficulty",d0,6b,83,ba)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StoryMenuState_obj,leftArrow),HX_("leftArrow",42,68,6f,3a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StoryMenuState_obj,rightArrow),HX_("rightArrow",4d,60,54,28)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(StoryMenuState_obj,loadedWeeks),HX_("loadedWeeks",ba,8b,e0,c1)},
	{::hx::fsBool,(int)offsetof(StoryMenuState_obj,movedBack),HX_("movedBack",fa,67,95,ea)},
	{::hx::fsBool,(int)offsetof(StoryMenuState_obj,selectedWeek),HX_("selectedWeek",ef,7f,8f,df)},
	{::hx::fsBool,(int)offsetof(StoryMenuState_obj,stopspamming),HX_("stopspamming",e0,83,63,4e)},
	{::hx::fsInt,(int)offsetof(StoryMenuState_obj,lerpScore),HX_("lerpScore",5b,81,4d,e7)},
	{::hx::fsInt,(int)offsetof(StoryMenuState_obj,intendedScore),HX_("intendedScore",a7,fd,7c,89)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo StoryMenuState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &StoryMenuState_obj::weekCompleted,HX_("weekCompleted",f7,82,ec,84)},
	{::hx::fsString,(void *) &StoryMenuState_obj::lastDifficultyName,HX_("lastDifficultyName",1c,ef,d1,9b)},
	{::hx::fsInt,(void *) &StoryMenuState_obj::curWeek,HX_("curWeek",94,d1,0a,ba)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String StoryMenuState_obj_sMemberFields[] = {
	HX_("scoreText",1f,7d,bd,dc),
	HX_("curDifficulty",db,b7,38,a7),
	HX_("txtWeekTitle",74,f4,3f,69),
	HX_("bgSprite",aa,c7,9c,98),
	HX_("txtTracklist",d9,6f,f5,3e),
	HX_("grpWeekText",c6,97,1f,d2),
	HX_("grpWeekCharacters",83,fc,76,59),
	HX_("grpLocks",03,78,f1,5b),
	HX_("difficultySelectors",b9,fa,53,88),
	HX_("sprDifficulty",d0,6b,83,ba),
	HX_("leftArrow",42,68,6f,3a),
	HX_("rightArrow",4d,60,54,28),
	HX_("loadedWeeks",ba,8b,e0,c1),
	HX_("create",fc,66,0f,7c),
	HX_("closeSubState",49,18,32,04),
	HX_("update",09,86,05,87),
	HX_("movedBack",fa,67,95,ea),
	HX_("selectedWeek",ef,7f,8f,df),
	HX_("stopspamming",e0,83,63,4e),
	HX_("selectWeek",10,d5,90,bd),
	HX_("changeDifficulty",cb,0f,40,d4),
	HX_("lerpScore",5b,81,4d,e7),
	HX_("intendedScore",a7,fd,7c,89),
	HX_("changeWeek",84,95,3e,29),
	HX_("weekIsLocked",a8,d0,e6,fb),
	HX_("updateText",56,b7,ae,05),
	::String(null()) };

static void StoryMenuState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StoryMenuState_obj::weekCompleted,"weekCompleted");
	HX_MARK_MEMBER_NAME(StoryMenuState_obj::lastDifficultyName,"lastDifficultyName");
	HX_MARK_MEMBER_NAME(StoryMenuState_obj::curWeek,"curWeek");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StoryMenuState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StoryMenuState_obj::weekCompleted,"weekCompleted");
	HX_VISIT_MEMBER_NAME(StoryMenuState_obj::lastDifficultyName,"lastDifficultyName");
	HX_VISIT_MEMBER_NAME(StoryMenuState_obj::curWeek,"curWeek");
};

#endif

::hx::Class StoryMenuState_obj::__mClass;

static ::String StoryMenuState_obj_sStaticFields[] = {
	HX_("weekCompleted",f7,82,ec,84),
	HX_("lastDifficultyName",1c,ef,d1,9b),
	HX_("curWeek",94,d1,0a,ba),
	::String(null())
};

void StoryMenuState_obj::__register()
{
	StoryMenuState_obj _hx_dummy;
	StoryMenuState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.StoryMenuState",09,2f,42,21);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &StoryMenuState_obj::__GetStatic;
	__mClass->mSetStaticField = &StoryMenuState_obj::__SetStatic;
	__mClass->mMarkFunc = StoryMenuState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(StoryMenuState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StoryMenuState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StoryMenuState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StoryMenuState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StoryMenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StoryMenuState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void StoryMenuState_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_bb97520c7169a052_20_boot)
HXDLIN(  20)		weekCompleted =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_bb97520c7169a052_24_boot)
HXDLIN(  24)		lastDifficultyName = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_bb97520c7169a052_30_boot)
HXDLIN(  30)		curWeek = 0;
            	}
}

} // end namespace states
