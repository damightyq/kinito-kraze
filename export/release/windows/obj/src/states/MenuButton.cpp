// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_objects_Alphabet
#include <objects/Alphabet.h>
#endif
#ifndef INCLUDED_states_MenuButton
#include <states/MenuButton.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ea21d460f288a33b_902_new,"states.MenuButton","new",0xac67342f,"states.MenuButton.new","states/ModsMenuState.hx",902,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_ea21d460f288a33b_954_update,"states.MenuButton","update",0x61c52d9a,"states.MenuButton.update","states/ModsMenuState.hx",954,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_ea21d460f288a33b_978_set_onFocus,"states.MenuButton","set_onFocus",0x8f10b02b,"states.MenuButton.set_onFocus","states/ModsMenuState.hx",978,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_ea21d460f288a33b_986_set_enabled,"states.MenuButton","set_enabled",0x727ab673,"states.MenuButton.set_enabled","states/ModsMenuState.hx",986,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_ea21d460f288a33b_996_setButtonVisibility,"states.MenuButton","setButtonVisibility",0x3ab743f5,"states.MenuButton.setButtonVisibility","states/ModsMenuState.hx",996,0xd12771ea)
HX_LOCAL_STACK_FRAME(_hx_pos_ea21d460f288a33b_1019_centerOnBg,"states.MenuButton","centerOnBg",0x49f0054a,"states.MenuButton.centerOnBg","states/ModsMenuState.hx",1019,0xd12771ea)
namespace states{

void MenuButton_obj::__construct(Float x,Float y,int width,int height,::String text, ::flixel::graphics::FlxGraphic img, ::Dynamic onClick,::hx::Null< int >  __o_animWidth,::hx::Null< int >  __o_animHeight){
            		int animWidth = __o_animWidth.Default(0);
            		int animHeight = __o_animHeight.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_ea21d460f288a33b_902_new)
HXLINE( 952)		this->_needACheck = false;
HXLINE( 951)		this->ignoreCheck = false;
HXLINE( 950)		this->onFocus = false;
HXLINE( 949)		this->focusChangeCallback = null();
HXLINE( 909)		this->enabled = true;
HXLINE( 908)		this->onClick = null();
HXLINE( 912)		super::__construct(x,y,null());
HXLINE( 914)		this->bg = ::flixel::util::FlxSpriteUtil_obj::drawRoundRect( ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(width,height,0,null(),null()),( (Float)(0) ),( (Float)(0) ),( (Float)(width) ),( (Float)(height) ),( (Float)(15) ),( (Float)(15) ),-1,null(),null());
HXLINE( 915)		this->bg->set_color(-16777216);
HXLINE( 916)		this->add(this->bg);
HXLINE( 918)		if (::hx::IsNotNull( text )) {
HXLINE( 920)			this->textOn =  ::objects::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("",00,00,00,00),false);
HXLINE( 921)			this->textOn->setScale(((Float)0.6),null());
HXLINE( 922)			this->textOn->set_text(text);
HXLINE( 923)			this->textOn->set_alpha(((Float)0.6));
HXLINE( 924)			this->textOn->set_visible(false);
HXLINE( 925)			this->centerOnBg(this->textOn);
HXLINE( 926)			 ::objects::Alphabet fh = this->textOn;
HXDLIN( 926)			fh->set_y((fh->y - ( (Float)(30) )));
HXLINE( 927)			this->add(this->textOn);
HXLINE( 929)			this->textOff =  ::objects::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("",00,00,00,00),true);
HXLINE( 930)			this->textOff->setScale(((Float)0.52),null());
HXLINE( 931)			this->textOff->set_text(text);
HXLINE( 932)			this->textOff->set_alpha(((Float)0.6));
HXLINE( 933)			this->centerOnBg(this->textOff);
HXLINE( 934)			this->add(this->textOff);
            		}
            		else {
HXLINE( 936)			if (::hx::IsNotNull( img )) {
HXLINE( 938)				this->icon =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 939)				bool _hx_tmp;
HXDLIN( 939)				if ((animWidth <= 0)) {
HXLINE( 939)					_hx_tmp = (animHeight > 0);
            				}
            				else {
HXLINE( 939)					_hx_tmp = true;
            				}
HXDLIN( 939)				if (_hx_tmp) {
HXLINE( 939)					this->icon->loadGraphic(img,true,animWidth,animHeight,null(),null());
            				}
            				else {
HXLINE( 940)					this->icon->loadGraphic(img,null(),null(),null(),null(),null());
            				}
HXLINE( 941)				this->centerOnBg(this->icon);
HXLINE( 942)				this->add(this->icon);
            			}
            		}
HXLINE( 945)		this->onClick = onClick;
HXLINE( 946)		this->setButtonVisibility(false);
            	}

Dynamic MenuButton_obj::__CreateEmpty() { return new MenuButton_obj; }

void *MenuButton_obj::_hx_vtable = 0;

Dynamic MenuButton_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MenuButton_obj > _hx_result = new MenuButton_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8]);
	return _hx_result;
}

bool MenuButton_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x420e6537) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x288ce903) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x288ce903;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x420e6537;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void MenuButton_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_ea21d460f288a33b_954_update)
HXLINE( 955)		this->super::update(elapsed);
HXLINE( 957)		if (!(this->enabled)) {
HXLINE( 959)			this->set_onFocus(false);
HXLINE( 960)			return;
            		}
HXLINE( 963)		bool _hx_tmp;
HXDLIN( 963)		bool _hx_tmp1;
HXDLIN( 963)		bool _hx_tmp2;
HXDLIN( 963)		if (!(this->ignoreCheck)) {
HXLINE( 963)			_hx_tmp2 = !(::backend::Controls_obj::instance->controllerMode);
            		}
            		else {
HXLINE( 963)			_hx_tmp2 = false;
            		}
HXDLIN( 963)		if (_hx_tmp2) {
HXLINE( 963)			if ((::flixel::FlxG_obj::mouse->_leftButton->current != 2)) {
HXLINE( 963)				 ::flixel::input::mouse::FlxMouse _this = ::flixel::FlxG_obj::mouse;
HXDLIN( 963)				if ((_this->_prevX == _this->x)) {
HXLINE( 963)					_hx_tmp1 = (_this->_prevY != _this->y);
            				}
            				else {
HXLINE( 963)					_hx_tmp1 = true;
            				}
            			}
            			else {
HXLINE( 963)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE( 963)			_hx_tmp1 = false;
            		}
HXDLIN( 963)		if (_hx_tmp1) {
HXLINE( 963)			_hx_tmp = ::flixel::FlxG_obj::mouse->visible;
            		}
            		else {
HXLINE( 963)			_hx_tmp = false;
            		}
HXDLIN( 963)		if (_hx_tmp) {
HXLINE( 964)			this->set_onFocus(::flixel::FlxG_obj::mouse->overlaps(::hx::ObjectPtr<OBJ_>(this),null()));
            		}
HXLINE( 966)		bool _hx_tmp3;
HXDLIN( 966)		bool _hx_tmp4;
HXDLIN( 966)		if (this->onFocus) {
HXLINE( 966)			_hx_tmp4 = ::hx::IsNotNull( this->onClick );
            		}
            		else {
HXLINE( 966)			_hx_tmp4 = false;
            		}
HXDLIN( 966)		if (_hx_tmp4) {
HXLINE( 966)			_hx_tmp3 = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            		}
            		else {
HXLINE( 966)			_hx_tmp3 = false;
            		}
HXDLIN( 966)		if (_hx_tmp3) {
HXLINE( 967)			this->onClick();
            		}
HXLINE( 969)		if (this->_needACheck) {
HXLINE( 971)			this->_needACheck = false;
HXLINE( 972)			if (!(::backend::Controls_obj::instance->controllerMode)) {
HXLINE( 973)				this->setButtonVisibility(::flixel::FlxG_obj::mouse->overlaps(::hx::ObjectPtr<OBJ_>(this),null()));
            			}
            		}
            	}


bool MenuButton_obj::set_onFocus(bool newValue){
            	HX_STACKFRAME(&_hx_pos_ea21d460f288a33b_978_set_onFocus)
HXLINE( 979)		bool lastFocus = this->onFocus;
HXLINE( 980)		this->onFocus = newValue;
HXLINE( 981)		bool _hx_tmp;
HXDLIN( 981)		if ((this->onFocus != lastFocus)) {
HXLINE( 981)			_hx_tmp = this->enabled;
            		}
            		else {
HXLINE( 981)			_hx_tmp = false;
            		}
HXDLIN( 981)		if (_hx_tmp) {
HXLINE( 981)			this->setButtonVisibility(this->onFocus);
            		}
HXLINE( 982)		return newValue;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuButton_obj,set_onFocus,return )

bool MenuButton_obj::set_enabled(bool newValue){
            	HX_STACKFRAME(&_hx_pos_ea21d460f288a33b_986_set_enabled)
HXLINE( 987)		this->enabled = newValue;
HXLINE( 988)		this->setButtonVisibility(false);
HXLINE( 989)		Float _hx_tmp;
HXDLIN( 989)		if (this->enabled) {
HXLINE( 989)			_hx_tmp = ( (Float)(1) );
            		}
            		else {
HXLINE( 989)			_hx_tmp = ((Float)0.4);
            		}
HXDLIN( 989)		this->set_alpha(_hx_tmp);
HXLINE( 991)		this->_needACheck = this->enabled;
HXLINE( 992)		return newValue;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuButton_obj,set_enabled,return )

void MenuButton_obj::setButtonVisibility(bool focusVal){
            	HX_STACKFRAME(&_hx_pos_ea21d460f288a33b_996_setButtonVisibility)
HXLINE( 997)		this->set_alpha(( (Float)(1) ));
HXLINE( 998)		int _hx_tmp;
HXDLIN( 998)		if (focusVal) {
HXLINE( 998)			_hx_tmp = -1;
            		}
            		else {
HXLINE( 998)			_hx_tmp = -16777216;
            		}
HXDLIN( 998)		this->bg->set_color(_hx_tmp);
HXLINE( 999)		Float _hx_tmp1;
HXDLIN( 999)		if (focusVal) {
HXLINE( 999)			_hx_tmp1 = ((Float)0.8);
            		}
            		else {
HXLINE( 999)			_hx_tmp1 = ((Float)0.6);
            		}
HXDLIN( 999)		this->bg->set_alpha(_hx_tmp1);
HXLINE(1001)		Float focusAlpha;
HXDLIN(1001)		if (focusVal) {
HXLINE(1001)			focusAlpha = ( (Float)(1) );
            		}
            		else {
HXLINE(1001)			focusAlpha = ((Float)0.6);
            		}
HXLINE(1002)		bool _hx_tmp2;
HXDLIN(1002)		if (::hx::IsNotNull( this->textOn )) {
HXLINE(1002)			_hx_tmp2 = ::hx::IsNotNull( this->textOff );
            		}
            		else {
HXLINE(1002)			_hx_tmp2 = false;
            		}
HXDLIN(1002)		if (_hx_tmp2) {
HXLINE(1004)			 ::objects::Alphabet _hx_tmp3 = this->textOn;
HXDLIN(1004)			_hx_tmp3->set_alpha(this->textOff->set_alpha(focusAlpha));
HXLINE(1005)			this->textOn->set_visible(focusVal);
HXLINE(1006)			this->textOff->set_visible(!(focusVal));
            		}
            		else {
HXLINE(1008)			if (::hx::IsNotNull( this->icon )) {
HXLINE(1010)				this->icon->set_alpha(focusAlpha);
HXLINE(1011)				int _hx_tmp4;
HXDLIN(1011)				if (focusVal) {
HXLINE(1011)					_hx_tmp4 = -16777216;
            				}
            				else {
HXLINE(1011)					_hx_tmp4 = -1;
            				}
HXDLIN(1011)				this->icon->set_color(_hx_tmp4);
            			}
            		}
HXLINE(1014)		if (!(this->enabled)) {
HXLINE(1014)			this->set_alpha(((Float)0.4));
            		}
HXLINE(1015)		if (::hx::IsNotNull( this->focusChangeCallback )) {
HXLINE(1015)			this->focusChangeCallback(focusVal);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuButton_obj,setButtonVisibility,(void))

void MenuButton_obj::centerOnBg( ::flixel::FlxSprite spr){
            	HX_STACKFRAME(&_hx_pos_ea21d460f288a33b_1019_centerOnBg)
HXLINE(1020)		Float _hx_tmp = (this->bg->get_width() / ( (Float)(2) ));
HXDLIN(1020)		spr->set_x((_hx_tmp - (spr->get_width() / ( (Float)(2) ))));
HXLINE(1021)		Float _hx_tmp1 = (this->bg->get_height() / ( (Float)(2) ));
HXDLIN(1021)		spr->set_y((_hx_tmp1 - (spr->get_height() / ( (Float)(2) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuButton_obj,centerOnBg,(void))


::hx::ObjectPtr< MenuButton_obj > MenuButton_obj::__new(Float x,Float y,int width,int height,::String text, ::flixel::graphics::FlxGraphic img, ::Dynamic onClick,::hx::Null< int >  __o_animWidth,::hx::Null< int >  __o_animHeight) {
	::hx::ObjectPtr< MenuButton_obj > __this = new MenuButton_obj();
	__this->__construct(x,y,width,height,text,img,onClick,__o_animWidth,__o_animHeight);
	return __this;
}

::hx::ObjectPtr< MenuButton_obj > MenuButton_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y,int width,int height,::String text, ::flixel::graphics::FlxGraphic img, ::Dynamic onClick,::hx::Null< int >  __o_animWidth,::hx::Null< int >  __o_animHeight) {
	MenuButton_obj *__this = (MenuButton_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MenuButton_obj), true, "states.MenuButton"));
	*(void **)__this = MenuButton_obj::_hx_vtable;
	__this->__construct(x,y,width,height,text,img,onClick,__o_animWidth,__o_animHeight);
	return __this;
}

MenuButton_obj::MenuButton_obj()
{
}

void MenuButton_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuButton);
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(textOn,"textOn");
	HX_MARK_MEMBER_NAME(textOff,"textOff");
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(onClick,"onClick");
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_MEMBER_NAME(focusChangeCallback,"focusChangeCallback");
	HX_MARK_MEMBER_NAME(onFocus,"onFocus");
	HX_MARK_MEMBER_NAME(ignoreCheck,"ignoreCheck");
	HX_MARK_MEMBER_NAME(_needACheck,"_needACheck");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuButton_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(textOn,"textOn");
	HX_VISIT_MEMBER_NAME(textOff,"textOff");
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(onClick,"onClick");
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
	HX_VISIT_MEMBER_NAME(focusChangeCallback,"focusChangeCallback");
	HX_VISIT_MEMBER_NAME(onFocus,"onFocus");
	HX_VISIT_MEMBER_NAME(ignoreCheck,"ignoreCheck");
	HX_VISIT_MEMBER_NAME(_needACheck,"_needACheck");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MenuButton_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { return ::hx::Val( icon ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"textOn") ) { return ::hx::Val( textOn ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"textOff") ) { return ::hx::Val( textOff ); }
		if (HX_FIELD_EQ(inName,"onClick") ) { return ::hx::Val( onClick ); }
		if (HX_FIELD_EQ(inName,"enabled") ) { return ::hx::Val( enabled ); }
		if (HX_FIELD_EQ(inName,"onFocus") ) { return ::hx::Val( onFocus ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"centerOnBg") ) { return ::hx::Val( centerOnBg_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"ignoreCheck") ) { return ::hx::Val( ignoreCheck ); }
		if (HX_FIELD_EQ(inName,"_needACheck") ) { return ::hx::Val( _needACheck ); }
		if (HX_FIELD_EQ(inName,"set_onFocus") ) { return ::hx::Val( set_onFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_enabled") ) { return ::hx::Val( set_enabled_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"focusChangeCallback") ) { return ::hx::Val( focusChangeCallback ); }
		if (HX_FIELD_EQ(inName,"setButtonVisibility") ) { return ::hx::Val( setButtonVisibility_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MenuButton_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { icon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"textOn") ) { textOn=inValue.Cast<  ::objects::Alphabet >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"textOff") ) { textOff=inValue.Cast<  ::objects::Alphabet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onClick") ) { onClick=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"enabled") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_enabled(inValue.Cast< bool >()) );enabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onFocus") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_onFocus(inValue.Cast< bool >()) );onFocus=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"ignoreCheck") ) { ignoreCheck=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_needACheck") ) { _needACheck=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"focusChangeCallback") ) { focusChangeCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MenuButton_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("textOn",2c,57,88,d8));
	outFields->push(HX_("textOff",c2,e8,c3,9e));
	outFields->push(HX_("icon",79,e7,b2,45));
	outFields->push(HX_("enabled",81,04,31,7e));
	outFields->push(HX_("onFocus",39,fe,c6,9a));
	outFields->push(HX_("ignoreCheck",56,2e,49,69));
	outFields->push(HX_("_needACheck",bc,a2,27,51));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MenuButton_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuButton_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::objects::Alphabet */ ,(int)offsetof(MenuButton_obj,textOn),HX_("textOn",2c,57,88,d8)},
	{::hx::fsObject /*  ::objects::Alphabet */ ,(int)offsetof(MenuButton_obj,textOff),HX_("textOff",c2,e8,c3,9e)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuButton_obj,icon),HX_("icon",79,e7,b2,45)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(MenuButton_obj,onClick),HX_("onClick",a9,1a,9c,de)},
	{::hx::fsBool,(int)offsetof(MenuButton_obj,enabled),HX_("enabled",81,04,31,7e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(MenuButton_obj,focusChangeCallback),HX_("focusChangeCallback",4d,d5,77,19)},
	{::hx::fsBool,(int)offsetof(MenuButton_obj,onFocus),HX_("onFocus",39,fe,c6,9a)},
	{::hx::fsBool,(int)offsetof(MenuButton_obj,ignoreCheck),HX_("ignoreCheck",56,2e,49,69)},
	{::hx::fsBool,(int)offsetof(MenuButton_obj,_needACheck),HX_("_needACheck",bc,a2,27,51)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MenuButton_obj_sStaticStorageInfo = 0;
#endif

static ::String MenuButton_obj_sMemberFields[] = {
	HX_("bg",c5,55,00,00),
	HX_("textOn",2c,57,88,d8),
	HX_("textOff",c2,e8,c3,9e),
	HX_("icon",79,e7,b2,45),
	HX_("onClick",a9,1a,9c,de),
	HX_("enabled",81,04,31,7e),
	HX_("focusChangeCallback",4d,d5,77,19),
	HX_("onFocus",39,fe,c6,9a),
	HX_("ignoreCheck",56,2e,49,69),
	HX_("_needACheck",bc,a2,27,51),
	HX_("update",09,86,05,87),
	HX_("set_onFocus",5c,65,2e,2b),
	HX_("set_enabled",a4,6b,98,0e),
	HX_("setButtonVisibility",26,12,47,cb),
	HX_("centerOnBg",39,c1,b6,3b),
	::String(null()) };

::hx::Class MenuButton_obj::__mClass;

void MenuButton_obj::__register()
{
	MenuButton_obj _hx_dummy;
	MenuButton_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.MenuButton",bd,f0,37,a8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MenuButton_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MenuButton_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuButton_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuButton_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
