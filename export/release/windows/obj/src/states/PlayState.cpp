// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_backend_Achievements
#include <backend/Achievements.h>
#endif
#ifndef INCLUDED_backend_BaseStage
#include <backend/BaseStage.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Conductor
#include <backend/Conductor.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_CoolUtil
#include <backend/CoolUtil.h>
#endif
#ifndef INCLUDED_backend_Countdown
#include <backend/Countdown.h>
#endif
#ifndef INCLUDED_backend_Difficulty
#include <backend/Difficulty.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_Highscore
#include <backend/Highscore.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_NoteTypesConfig
#include <backend/NoteTypesConfig.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_PsychCamera
#include <backend/PsychCamera.h>
#endif
#ifndef INCLUDED_backend_Rating
#include <backend/Rating.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_backend_Song
#include <backend/Song.h>
#endif
#ifndef INCLUDED_backend_StageData
#include <backend/StageData.h>
#endif
#ifndef INCLUDED_backend_WeekData
#include <backend/WeekData.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIEvent
#include <backend/ui/PsychUIEvent.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_Error
#include <crowplexus/hscript/Error.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_Printer
#include <crowplexus/hscript/Printer.h>
#endif
#ifndef INCLUDED_crowplexus_iris_Iris
#include <crowplexus/iris/Iris.h>
#endif
#ifndef INCLUDED_crowplexus_iris_IrisCall
#include <crowplexus/iris/IrisCall.h>
#endif
#ifndef INCLUDED_cutscenes_DialogueBoxPsych
#include <cutscenes/DialogueBoxPsych.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxRuntimeShader
#include <flixel/addons/display/FlxRuntimeShader.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTweenManager
#include <flixel/tweens/FlxTweenManager.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSort
#include <flixel/util/FlxSort.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_objects_Bar
#include <objects/Bar.h>
#endif
#ifndef INCLUDED_objects_Character
#include <objects/Character.h>
#endif
#ifndef INCLUDED_objects_HealthIcon
#include <objects/HealthIcon.h>
#endif
#ifndef INCLUDED_objects_Note
#include <objects/Note.h>
#endif
#ifndef INCLUDED_objects_NoteSplash
#include <objects/NoteSplash.h>
#endif
#ifndef INCLUDED_objects_StrumNote
#include <objects/StrumNote.h>
#endif
#ifndef INCLUDED_objects_VideoSprite
#include <objects/VideoSprite.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_psychlua_CustomSubstate
#include <psychlua/CustomSubstate.h>
#endif
#ifndef INCLUDED_psychlua_DebugLuaText
#include <psychlua/DebugLuaText.h>
#endif
#ifndef INCLUDED_psychlua_FunkinLua
#include <psychlua/FunkinLua.h>
#endif
#ifndef INCLUDED_psychlua_HScript
#include <psychlua/HScript.h>
#endif
#ifndef INCLUDED_psychlua_LuaUtils
#include <psychlua/LuaUtils.h>
#endif
#ifndef INCLUDED_shaders_ErrorHandledRuntimeShader
#include <shaders/ErrorHandledRuntimeShader.h>
#endif
#ifndef INCLUDED_shaders_IErrorHandler
#include <shaders/IErrorHandler.h>
#endif
#ifndef INCLUDED_shaders_RGBPalette
#include <shaders/RGBPalette.h>
#endif
#ifndef INCLUDED_states_FreeplayState
#include <states/FreeplayState.h>
#endif
#ifndef INCLUDED_states_LoadingState
#include <states/LoadingState.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_states_StoryMenuState
#include <states/StoryMenuState.h>
#endif
#ifndef INCLUDED_states_editors_CharacterEditorState
#include <states/editors/CharacterEditorState.h>
#endif
#ifndef INCLUDED_states_editors_ChartingState
#include <states/editors/ChartingState.h>
#endif
#ifndef INCLUDED_states_stages_Limo
#include <states/stages/Limo.h>
#endif
#ifndef INCLUDED_states_stages_Mall
#include <states/stages/Mall.h>
#endif
#ifndef INCLUDED_states_stages_MallEvil
#include <states/stages/MallEvil.h>
#endif
#ifndef INCLUDED_states_stages_Philly
#include <states/stages/Philly.h>
#endif
#ifndef INCLUDED_states_stages_PhillyBlazin
#include <states/stages/PhillyBlazin.h>
#endif
#ifndef INCLUDED_states_stages_PhillyStreets
#include <states/stages/PhillyStreets.h>
#endif
#ifndef INCLUDED_states_stages_School
#include <states/stages/School.h>
#endif
#ifndef INCLUDED_states_stages_SchoolEvil
#include <states/stages/SchoolEvil.h>
#endif
#ifndef INCLUDED_states_stages_Spooky
#include <states/stages/Spooky.h>
#endif
#ifndef INCLUDED_states_stages_StageWeek1
#include <states/stages/StageWeek1.h>
#endif
#ifndef INCLUDED_states_stages_Tank
#include <states/stages/Tank.h>
#endif
#ifndef INCLUDED_substates_GameOverSubstate
#include <substates/GameOverSubstate.h>
#endif
#ifndef INCLUDED_substates_PauseSubState
#include <substates/PauseSubState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_801e532e222627de_74_new,"states.PlayState","new",0x0e695aa3,"states.PlayState.new","states/PlayState.hx",74,0x36e487ae)
static const ::String _hx_array_data_0420cd31_1[] = {
	HX_("singLEFT",d6,39,ef,3b),HX_("singDOWN",31,2a,ad,36),HX_("singUP",6a,52,21,b9),HX_("singRIGHT",0d,6f,70,ac),
};
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_491_create,"states.PlayState","create",0x0cd56899,"states.PlayState.create","states/PlayState.hx",491,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_529_create,"states.PlayState","create",0x0cd56899,"states.PlayState.create","states/PlayState.hx",529,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_629_create,"states.PlayState","create",0x0cd56899,"states.PlayState.create","states/PlayState.hx",629,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_270_create,"states.PlayState","create",0x0cd56899,"states.PlayState.create","states/PlayState.hx",270,0x36e487ae)
static const ::String _hx_array_data_0420cd31_21[] = {
	HX_("note_left",b4,fe,20,a5),HX_("note_down",0f,ef,de,9f),HX_("note_up",c8,67,5c,4d),HX_("note_right",8f,ec,ca,4e),
};
static const Float _hx_array_data_0420cd31_22[] = {
	(Float)0,(Float)0,
};
static const Float _hx_array_data_0420cd31_23[] = {
	(Float)0,(Float)0,
};
static const Float _hx_array_data_0420cd31_24[] = {
	(Float)0,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_646_set_songSpeed,"states.PlayState","set_songSpeed",0xb1a9b158,"states.PlayState.set_songSpeed","states/PlayState.hx",646,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_662_set_playbackRate,"states.PlayState","set_playbackRate",0x86851c75,"states.PlayState.set_playbackRate","states/PlayState.hx",662,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_701_addTextToDebug,"states.PlayState","addTextToDebug",0x2b3707a7,"states.PlayState.addTextToDebug","states/PlayState.hx",701,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_692_addTextToDebug,"states.PlayState","addTextToDebug",0x2b3707a7,"states.PlayState.addTextToDebug","states/PlayState.hx",692,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_710_reloadHealthBarColors,"states.PlayState","reloadHealthBarColors",0x93a70751,"states.PlayState.reloadHealthBarColors","states/PlayState.hx",710,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_715_addCharacterToList,"states.PlayState","addCharacterToList",0x6e9c97fe,"states.PlayState.addCharacterToList","states/PlayState.hx",715,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_750_startCharacterScripts,"states.PlayState","startCharacterScripts",0xc5a30ae4,"states.PlayState.startCharacterScripts","states/PlayState.hx",750,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_817_getLuaObject,"states.PlayState","getLuaObject",0xbc19987e,"states.PlayState.getLuaObject","states/PlayState.hx",817,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_819_startCharacterPos,"states.PlayState","startCharacterPos",0x1074ce70,"states.PlayState.startCharacterPos","states/PlayState.hx",819,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_831_startVideo,"states.PlayState","startVideo",0x8b5680d6,"states.PlayState.startVideo","states/PlayState.hx",831,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_890_startAndEnd,"states.PlayState","startAndEnd",0xdbc44489,"states.PlayState.startAndEnd","states/PlayState.hx",890,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_900_startDialogue,"states.PlayState","startDialogue",0xa6abab9d,"states.PlayState.startDialogue","states/PlayState.hx",900,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_909_startDialogue,"states.PlayState","startDialogue",0xa6abab9d,"states.PlayState.startDialogue","states/PlayState.hx",909,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_914_startDialogue,"states.PlayState","startDialogue",0xa6abab9d,"states.PlayState.startDialogue","states/PlayState.hx",914,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_939_cacheCountdown,"states.PlayState","cacheCountdown",0x7d7fa4ac,"states.PlayState.cacheCountdown","states/PlayState.hx",939,0x36e487ae)
static const ::String _hx_array_data_0420cd31_47[] = {
	HX_("ready",63,a0,ba,e6),HX_("set",a2,9b,57,00),HX_("go",28,5a,00,00),
};
static const ::String _hx_array_data_0420cd31_48[] = {
	HX_("pixelUI/ready-pixel",67,0d,b0,1a),HX_("pixelUI/set-pixel",26,79,64,dc),HX_("pixelUI/date-pixel",bc,ec,1d,b8),
};
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_957_startCountdown,"states.PlayState","startCountdown",0x9f2c868c,"states.PlayState.startCountdown","states/PlayState.hx",957,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1050_startCountdown,"states.PlayState","startCountdown",0x9f2c868c,"states.PlayState.startCountdown","states/PlayState.hx",1050,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1001_startCountdown,"states.PlayState","startCountdown",0x9f2c868c,"states.PlayState.startCountdown","states/PlayState.hx",1001,0x36e487ae)
static const ::String _hx_array_data_0420cd31_55[] = {
	HX_("ready",63,a0,ba,e6),HX_("set",a2,9b,57,00),HX_("go",28,5a,00,00),
};
static const ::String _hx_array_data_0420cd31_56[] = {
	HX_("pixelUI/ready-pixel",67,0d,b0,1a),HX_("pixelUI/set-pixel",26,79,64,dc),HX_("pixelUI/date-pixel",bc,ec,1d,b8),
};
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1022_startCountdown,"states.PlayState","startCountdown",0x9f2c868c,"states.PlayState.startCountdown","states/PlayState.hx",1022,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1026_startCountdown,"states.PlayState","startCountdown",0x9f2c868c,"states.PlayState.startCountdown","states/PlayState.hx",1026,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1030_startCountdown,"states.PlayState","startCountdown",0x9f2c868c,"states.PlayState.startCountdown","states/PlayState.hx",1030,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1040_startCountdown,"states.PlayState","startCountdown",0x9f2c868c,"states.PlayState.startCountdown","states/PlayState.hx",1040,0x36e487ae)
static const int _hx_array_data_0420cd31_61[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1076_createCountdownSprite,"states.PlayState","createCountdownSprite",0x34e6eefd,"states.PlayState.createCountdownSprite","states/PlayState.hx",1076,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1061_createCountdownSprite,"states.PlayState","createCountdownSprite",0x34e6eefd,"states.PlayState.createCountdownSprite","states/PlayState.hx",1061,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1086_addBehindGF,"states.PlayState","addBehindGF",0xd4b3cddd,"states.PlayState.addBehindGF","states/PlayState.hx",1086,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1090_addBehindBF,"states.PlayState","addBehindBF",0xd4b3c982,"states.PlayState.addBehindBF","states/PlayState.hx",1090,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1094_addBehindDad,"states.PlayState","addBehindDad",0x489e24a9,"states.PlayState.addBehindDad","states/PlayState.hx",1094,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1098_clearNotesBefore,"states.PlayState","clearNotesBefore",0x17b4faf0,"states.PlayState.clearNotesBefore","states/PlayState.hx",1098,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1134___default_updateScore,"states.PlayState","__default_updateScore",0x7d6278ae,"states.PlayState.__default_updateScore","states/PlayState.hx",1134,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1147___default_updateScoreText,"states.PlayState","__default_updateScoreText",0x538a607b,"states.PlayState.__default_updateScoreText","states/PlayState.hx",1147,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1162___default_fullComboFunction,"states.PlayState","__default_fullComboFunction",0xde9eac5c,"states.PlayState.__default_fullComboFunction","states/PlayState.hx",1162,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1192_doScoreBop,"states.PlayState","doScoreBop",0xb46f0c99,"states.PlayState.doScoreBop","states/PlayState.hx",1192,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1181_doScoreBop,"states.PlayState","doScoreBop",0xb46f0c99,"states.PlayState.doScoreBop","states/PlayState.hx",1181,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1198_setSongTime,"states.PlayState","setSongTime",0x6e13f987,"states.PlayState.setSongTime","states/PlayState.hx",1198,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1225_startNextDialogue,"states.PlayState","startNextDialogue",0x398cbe30,"states.PlayState.startNextDialogue","states/PlayState.hx",1225,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1231_skipDialogue,"states.PlayState","skipDialogue",0x8ecaac14,"states.PlayState.skipDialogue","states/PlayState.hx",1231,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1241_startSong,"states.PlayState","startSong",0xc542bbda,"states.PlayState.startSong","states/PlayState.hx",1241,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1255_startSong,"states.PlayState","startSong",0xc542bbda,"states.PlayState.startSong","states/PlayState.hx",1255,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1235_startSong,"states.PlayState","startSong",0xc542bbda,"states.PlayState.startSong","states/PlayState.hx",1235,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1275_generateSong,"states.PlayState","generateSong",0x9e928307,"states.PlayState.generateSong","states/PlayState.hx",1275,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1468_eventPushed,"states.PlayState","eventPushed",0xc85865b6,"states.PlayState.eventPushed","states/PlayState.hx",1468,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1462_eventPushed,"states.PlayState","eventPushed",0xc85865b6,"states.PlayState.eventPushed","states/PlayState.hx",1462,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1494_eventPushedUnique,"states.PlayState","eventPushedUnique",0xba9b9967,"states.PlayState.eventPushedUnique","states/PlayState.hx",1494,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1473_eventPushedUnique,"states.PlayState","eventPushedUnique",0xba9b9967,"states.PlayState.eventPushedUnique","states/PlayState.hx",1473,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1497_eventEarlyTrigger,"states.PlayState","eventEarlyTrigger",0xf614ab92,"states.PlayState.eventEarlyTrigger","states/PlayState.hx",1497,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1514_makeEvent,"states.PlayState","makeEvent",0x09545dcf,"states.PlayState.makeEvent","states/PlayState.hx",1514,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1528_generateStaticArrows,"states.PlayState","generateStaticArrows",0xbbc6ff0a,"states.PlayState.generateStaticArrows","states/PlayState.hx",1528,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1572_openSubState,"states.PlayState","openSubState",0xb6aefbb8,"states.PlayState.openSubState","states/PlayState.hx",1572,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1571_openSubState,"states.PlayState","openSubState",0xb6aefbb8,"states.PlayState.openSubState","states/PlayState.hx",1571,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1581_openSubState,"states.PlayState","openSubState",0xb6aefbb8,"states.PlayState.openSubState","states/PlayState.hx",1581,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1582_openSubState,"states.PlayState","openSubState",0xb6aefbb8,"states.PlayState.openSubState","states/PlayState.hx",1582,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1593_closeSubState,"states.PlayState","closeSubState",0xfe8e344c,"states.PlayState.closeSubState","states/PlayState.hx",1593,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1590_closeSubState,"states.PlayState","closeSubState",0xfe8e344c,"states.PlayState.closeSubState","states/PlayState.hx",1590,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1600_closeSubState,"states.PlayState","closeSubState",0xfe8e344c,"states.PlayState.closeSubState","states/PlayState.hx",1600,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1601_closeSubState,"states.PlayState","closeSubState",0xfe8e344c,"states.PlayState.closeSubState","states/PlayState.hx",1601,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1611_onFocus,"states.PlayState","onFocus",0xb74265fc,"states.PlayState.onFocus","states/PlayState.hx",1611,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1620_onFocusLost,"states.PlayState","onFocusLost",0x4463ea00,"states.PlayState.onFocusLost","states/PlayState.hx",1620,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1632_resetRPC,"states.PlayState","resetRPC",0x1f5c6333,"states.PlayState.resetRPC","states/PlayState.hx",1632,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1644_resyncVocals,"states.PlayState","resyncVocals",0xea53abe9,"states.PlayState.resyncVocals","states/PlayState.hx",1644,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1674_update,"states.PlayState","update",0x17cb87a6,"states.PlayState.update","states/PlayState.hx",1674,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1845_update,"states.PlayState","update",0x17cb87a6,"states.PlayState.update","states/PlayState.hx",1845,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1874___default_updateIconsScale,"states.PlayState","__default_updateIconsScale",0xa0801274,"states.PlayState.__default_updateIconsScale","states/PlayState.hx",1874,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1885___default_updateIconsPosition,"states.PlayState","__default_updateIconsPosition",0xabe12aff,"states.PlayState.__default_updateIconsPosition","states/PlayState.hx",1885,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1893_set_health,"states.PlayState","set_health",0x294ecaf6,"states.PlayState.set_health","states/PlayState.hx",1893,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1912_openPauseMenu,"states.PlayState","openPauseMenu",0x62e52a8e,"states.PlayState.openPauseMenu","states/PlayState.hx",1912,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1940_openChartEditor,"states.PlayState","openChartEditor",0x6f50a444,"states.PlayState.openChartEditor","states/PlayState.hx",1940,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1963_openCharacterEditor,"states.PlayState","openCharacterEditor",0x90328dcf,"states.PlayState.openCharacterEditor","states/PlayState.hx",1963,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1982_doDeathCheck,"states.PlayState","doDeathCheck",0x4d7cc9bc,"states.PlayState.doDeathCheck","states/PlayState.hx",1982,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2012_doDeathCheck,"states.PlayState","doDeathCheck",0x4d7cc9bc,"states.PlayState.doDeathCheck","states/PlayState.hx",2012,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2042_checkEventNote,"states.PlayState","checkEventNote",0x750a75e1,"states.PlayState.checkEventNote","states/PlayState.hx",2042,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2303_triggerEvent,"states.PlayState","triggerEvent",0x73c18d1f,"states.PlayState.triggerEvent","states/PlayState.hx",2303,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2061_triggerEvent,"states.PlayState","triggerEvent",0x73c18d1f,"states.PlayState.triggerEvent","states/PlayState.hx",2061,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2267_triggerEvent,"states.PlayState","triggerEvent",0x73c18d1f,"states.PlayState.triggerEvent","states/PlayState.hx",2267,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2307_moveCameraSection,"states.PlayState","moveCameraSection",0x92a32572,"states.PlayState.moveCameraSection","states/PlayState.hx",2307,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2329_moveCameraToGirlfriend,"states.PlayState","moveCameraToGirlfriend",0x35fe2468,"states.PlayState.moveCameraToGirlfriend","states/PlayState.hx",2329,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2338_moveCamera,"states.PlayState","moveCamera",0x3ffe54b3,"states.PlayState.moveCamera","states/PlayState.hx",2338,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2359_moveCamera,"states.PlayState","moveCamera",0x3ffe54b3,"states.PlayState.moveCamera","states/PlayState.hx",2359,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2366_tweenCamIn,"states.PlayState","tweenCamIn",0x30a3cb86,"states.PlayState.tweenCamIn","states/PlayState.hx",2366,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2370_tweenCamIn,"states.PlayState","tweenCamIn",0x30a3cb86,"states.PlayState.tweenCamIn","states/PlayState.hx",2370,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2377_finishSong,"states.PlayState","finishSong",0x10d649e5,"states.PlayState.finishSong","states/PlayState.hx",2377,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2390_finishSong,"states.PlayState","finishSong",0x10d649e5,"states.PlayState.finishSong","states/PlayState.hx",2390,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2398_endSong,"states.PlayState","endSong",0x4af84513,"states.PlayState.endSong","states/PlayState.hx",2398,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2404_endSong,"states.PlayState","endSong",0x4af84513,"states.PlayState.endSong","states/PlayState.hx",2404,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2511_KillNotes,"states.PlayState","KillNotes",0xeef30e26,"states.PlayState.KillNotes","states/PlayState.hx",2511,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2537_cachePopUpScore,"states.PlayState","cachePopUpScore",0x7d31c90b,"states.PlayState.cachePopUpScore","states/PlayState.hx",2537,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2682_popUpScore,"states.PlayState","popUpScore",0x78363583,"states.PlayState.popUpScore","states/PlayState.hx",2682,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2549_popUpScore,"states.PlayState","popUpScore",0x78363583,"states.PlayState.popUpScore","states/PlayState.hx",2549,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2667_popUpScore,"states.PlayState","popUpScore",0x78363583,"states.PlayState.popUpScore","states/PlayState.hx",2667,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2692_onKeyPress,"states.PlayState","onKeyPress",0x22ec61c0,"states.PlayState.onKeyPress","states/PlayState.hx",2692,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2709_keyPressed,"states.PlayState","keyPressed",0xe0b206e0,"states.PlayState.keyPressed","states/PlayState.hx",2709,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2780_onKeyRelease,"states.PlayState","onKeyRelease",0x1f1f5d44,"states.PlayState.onKeyRelease","states/PlayState.hx",2780,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2787_keyReleased,"states.PlayState","keyReleased",0xc1ea0abf,"states.PlayState.keyReleased","states/PlayState.hx",2787,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2819_keysCheck,"states.PlayState","keysCheck",0xf758b0b7,"states.PlayState.keysCheck","states/PlayState.hx",2819,0x36e487ae)
static const ::String _hx_array_data_0420cd31_173[] = {
	HX_("oversinging",1f,13,8f,78),
};
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2874_noteMiss,"states.PlayState","noteMiss",0x270edaeb,"states.PlayState.noteMiss","states/PlayState.hx",2874,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2879_noteMiss,"states.PlayState","noteMiss",0x270edaeb,"states.PlayState.noteMiss","states/PlayState.hx",2879,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2871_noteMiss,"states.PlayState","noteMiss",0x270edaeb,"states.PlayState.noteMiss","states/PlayState.hx",2871,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2890_noteMissPress,"states.PlayState","noteMissPress",0xa46e7498,"states.PlayState.noteMissPress","states/PlayState.hx",2890,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2885_noteMissPress,"states.PlayState","noteMissPress",0xa46e7498,"states.PlayState.noteMissPress","states/PlayState.hx",2885,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2895_noteMissCommon,"states.PlayState","noteMissCommon",0x54a54676,"states.PlayState.noteMissCommon","states/PlayState.hx",2895,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3016_opponentNoteHit,"states.PlayState","opponentNoteHit",0x0fe9d827,"states.PlayState.opponentNoteHit","states/PlayState.hx",3016,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2976_opponentNoteHit,"states.PlayState","opponentNoteHit",0x0fe9d827,"states.PlayState.opponentNoteHit","states/PlayState.hx",2976,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3119_goodNoteHit,"states.PlayState","goodNoteHit",0x25a25307,"states.PlayState.goodNoteHit","states/PlayState.hx",3119,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3024_goodNoteHit,"states.PlayState","goodNoteHit",0x25a25307,"states.PlayState.goodNoteHit","states/PlayState.hx",3024,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3125_invalidateNote,"states.PlayState","invalidateNote",0x85139daa,"states.PlayState.invalidateNote","states/PlayState.hx",3125,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3132_spawnNoteSplashOnNote,"states.PlayState","spawnNoteSplashOnNote",0xe8ef5be8,"states.PlayState.spawnNoteSplashOnNote","states/PlayState.hx",3132,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3139_spawnNoteSplash,"states.PlayState","spawnNoteSplash",0x2955cbd7,"states.PlayState.spawnNoteSplash","states/PlayState.hx",3139,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3173_destroy,"states.PlayState","destroy",0x410194bd,"states.PlayState.destroy","states/PlayState.hx",3173,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3146_destroy,"states.PlayState","destroy",0x410194bd,"states.PlayState.destroy","states/PlayState.hx",3146,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3201_stepHit,"states.PlayState","stepHit",0x9dbd162a,"states.PlayState.stepHit","states/PlayState.hx",3201,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3216_beatHit,"states.PlayState","beatHit",0x90805240,"states.PlayState.beatHit","states/PlayState.hx",3216,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3223_beatHit,"states.PlayState","beatHit",0x90805240,"states.PlayState.beatHit","states/PlayState.hx",3223,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3241_characterBopper,"states.PlayState","characterBopper",0x3ad65206,"states.PlayState.characterBopper","states/PlayState.hx",3241,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3251_playerDance,"states.PlayState","playerDance",0xde402d55,"states.PlayState.playerDance","states/PlayState.hx",3251,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3258_sectionHit,"states.PlayState","sectionHit",0xf711898b,"states.PlayState.sectionHit","states/PlayState.hx",3258,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3289_startLuasNamed,"states.PlayState","startLuasNamed",0x3dbc27d9,"states.PlayState.startLuasNamed","states/PlayState.hx",3289,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3313_startHScriptsNamed,"states.PlayState","startHScriptsNamed",0xb8736e74,"states.PlayState.startHScriptsNamed","states/PlayState.hx",3313,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3333_initHScript,"states.PlayState","initHScript",0x1bf574a6,"states.PlayState.initHScript","states/PlayState.hx",3333,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3353_callOnScripts,"states.PlayState","callOnScripts",0x00f6942e,"states.PlayState.callOnScripts","states/PlayState.hx",3353,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3364_callOnLuas,"states.PlayState","callOnLuas",0x4db99bd5,"states.PlayState.callOnLuas","states/PlayState.hx",3364,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3403_callOnHScript,"states.PlayState","callOnHScript",0x34bf98b9,"states.PlayState.callOnHScript","states/PlayState.hx",3403,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3441_setOnScripts,"states.PlayState","setOnScripts",0xa8450a04,"states.PlayState.setOnScripts","states/PlayState.hx",3441,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3447_setOnLuas,"states.PlayState","setOnLuas",0x09e4c43f,"states.PlayState.setOnLuas","states/PlayState.hx",3447,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3459_setOnHScript,"states.PlayState","setOnHScript",0xdc0e0e8f,"states.PlayState.setOnHScript","states/PlayState.hx",3459,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3471_strumPlayAnim,"states.PlayState","strumPlayAnim",0x3aa71091,"states.PlayState.strumPlayAnim","states/PlayState.hx",3471,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3488_RecalculateRating,"states.PlayState","RecalculateRating",0x439ba533,"states.PlayState.RecalculateRating","states/PlayState.hx",3488,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3526_checkForAchievement,"states.PlayState","checkForAchievement",0x64c84711,"states.PlayState.checkForAchievement","states/PlayState.hx",3526,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3580_createRuntimeShader,"states.PlayState","createRuntimeShader",0x1421d5c4,"states.PlayState.createRuntimeShader","states/PlayState.hx",3580,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_3599_initLuaShader,"states.PlayState","initLuaShader",0xaa9985d0,"states.PlayState.initLuaShader","states/PlayState.hx",3599,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_128_set_stageUI,"states.PlayState","set_stageUI",0xc10fccf8,"states.PlayState.set_stageUI","states/PlayState.hx",128,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_140_get_isPixelStage,"states.PlayState","get_isPixelStage",0x64d0cb48,"states.PlayState.get_isPixelStage","states/PlayState.hx",140,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_1511_sortByTime,"states.PlayState","sortByTime",0xa7748f9f,"states.PlayState.sortByTime","states/PlayState.hx",1511,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2770_sortHitNotes,"states.PlayState","sortHitNotes",0xd83e3fc9,"states.PlayState.sortHitNotes","states/PlayState.hx",2770,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_2803_getKeyFromEvent,"states.PlayState","getKeyFromEvent",0x839e152a,"states.PlayState.getKeyFromEvent","states/PlayState.hx",2803,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_76_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",76,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_77_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",77,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_79_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",79,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_120_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",120,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_121_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",121,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_122_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",122,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_123_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",123,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_142_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",142,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_143_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",143,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_144_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",144,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_145_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",145,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_146_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",146,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_189_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",189,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_190_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",190,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_219_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",219,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_220_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",220,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_221_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",221,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_222_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",222,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_227_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",227,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_267_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",267,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_268_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",268,0x36e487ae)
HX_LOCAL_STACK_FRAME(_hx_pos_801e532e222627de_936_boot,"states.PlayState","boot",0x85def48f,"states.PlayState.boot","states/PlayState.hx",936,0x36e487ae)
namespace states{

void PlayState_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_74_new)
HXLINE(3577)		this->runtimeShaders =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(3485)		this->ratingName = HX_("?",3f,00,00,00);
HXLINE(3213)		this->lastBeatHit = -1;
HXLINE(3199)		this->lastStepHit = -1;
HXLINE(2690)		this->strumsBlocked = ::Array_obj< bool >::__new(0);
HXLINE(2527)		this->showRating = true;
HXLINE(2526)		this->showComboNum = true;
HXLINE(2525)		this->showCombo = false;
HXLINE(2523)		this->totalNotesHit = ((Float)0.0);
HXLINE(2522)		this->totalPlayed = 0;
HXLINE(2396)		this->transitioning = false;
HXLINE(1980)		this->isDead = false;
HXLINE(1891)		this->iconsAnimations = true;
HXLINE(1671)		this->allowDebugKeys = true;
HXLINE(1670)		this->freezeCamera = false;
HXLINE(1669)		this->canPause = true;
HXLINE(1668)		this->startedCountdown = false;
HXLINE(1667)		this->canReset = true;
HXLINE(1666)		this->paused = false;
HXLINE(1630)		this->autoUpdateRPC = true;
HXLINE(1588)		this->canResync = true;
HXLINE(1526)		this->skipArrowStartTween = false;
HXLINE(1272)		this->totalColumns = 4;
HXLINE(1271)		this->eventsPushed = ::Array_obj< ::String >::__new(0);
HXLINE(1270)		this->noteTypes = ::Array_obj< ::String >::__new(0);
HXLINE( 930)		this->finishTimer = null();
HXLINE( 896)		this->dialogueCount = 0;
HXLINE( 829)		this->videoCutscene = null();
HXLINE( 265)		this->endCallback = null();
HXLINE( 264)		this->startCallback = null();
HXLINE( 257)		this->introSoundsSuffix = HX_("",00,00,00,00);
HXLINE( 252)		this->luaArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 248)		this->boyfriendIdled = false;
HXLINE( 247)		this->boyfriendIdleTime = ((Float)0.0);
HXLINE( 246)		this->keysPressed = ::Array_obj< int >::__new(0);
HXLINE( 242)		this->detailsPausedText = HX_("",00,00,00,00);
HXLINE( 241)		this->detailsText = HX_("",00,00,00,00);
HXLINE( 240)		this->storyDifficultyText = HX_("",00,00,00,00);
HXLINE( 236)		this->girlfriendCameraOffset = null();
HXLINE( 235)		this->opponentCameraOffset = null();
HXLINE( 234)		this->boyfriendCameraOffset = null();
HXLINE( 232)		this->songLength = ((Float)0);
HXLINE( 231)		this->skipCountdown = false;
HXLINE( 230)		this->inCutscene = false;
HXLINE( 228)		this->singAnimations = ::Array_obj< ::String >::fromData( _hx_array_data_0420cd31_1,4);
HXLINE( 224)		this->defaultCamZoom = ((Float)1.05);
HXLINE( 214)		this->songMisses = 0;
HXLINE( 213)		this->songHits = 0;
HXLINE( 212)		this->songScore = 0;
HXLINE( 210)		this->cameraSpeed = ((Float)1);
HXLINE( 202)		this->botplaySine = ((Float)0);
HXLINE( 200)		this->pressMissDamage = ((Float)0.05);
HXLINE( 199)		this->practiceMode = false;
HXLINE( 198)		this->cpuControlled = false;
HXLINE( 197)		this->instakillOnMiss = false;
HXLINE( 196)		this->guitarHeroSustains = false;
HXLINE( 194)		this->healthLoss = ((Float)1);
HXLINE( 193)		this->healthGain = ((Float)1);
HXLINE( 188)		this->updateTime = true;
HXLINE( 187)		this->startingSong = false;
HXLINE( 186)		this->endingSong = false;
HXLINE( 185)		this->generatedMusic = false;
HXLINE( 183)		this->ratingsData = ::backend::Rating_obj::loadDefault();
HXLINE( 181)		this->songPercent = ((Float)0);
HXLINE( 177)		this->combo = 0;
HXLINE( 176)		this->health = ((Float)1);
HXLINE( 175)		this->gfSpeed = 1;
HXLINE( 173)		this->curSong = HX_("",00,00,00,00);
HXLINE( 172)		this->camZoomingDecay = ((Float)1);
HXLINE( 171)		this->camZoomingMult = ((Float)1);
HXLINE( 170)		this->camZooming = false;
HXLINE( 168)		this->grpNoteSplashes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 167)		this->playerStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 166)		this->opponentStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 165)		this->strumLineNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 160)		this->eventNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 159)		this->unspawnNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 156)		this->boyfriend = null();
HXLINE( 155)		this->gf = null();
HXLINE( 154)		this->dad = null();
HXLINE( 148)		this->spawnTime = ((Float)2000);
HXLINE( 115)		this->playbackRate = ((Float)1);
HXLINE( 113)		this->noteKillOffset = ((Float)350);
HXLINE( 112)		this->songSpeedType = HX_("multiplicative",96,7a,3f,fa);
HXLINE( 111)		this->songSpeed = ((Float)1);
HXLINE( 108)		this->GF_Y = ((Float)130);
HXLINE( 107)		this->GF_X = ((Float)400);
HXLINE( 106)		this->DAD_Y = ((Float)100);
HXLINE( 105)		this->DAD_X = ((Float)100);
HXLINE( 104)		this->BF_Y = ((Float)100);
HXLINE( 103)		this->BF_X = ((Float)770);
HXLINE( 100)		this->hscriptArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  97)		this->gfMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  96)		this->dadMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  95)		this->boyfriendMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  93)		this->isCameraOnForcedPos = false;
HXLINE(  74)		super::__construct();
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x53aaab8a) {
			if (inClassId<=(int)0x26cbb7db) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x26cbb7db;
			} else {
				return inClassId==(int)0x53aaab8a;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void PlayState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_gthis) HXARGC(0)
            		Float _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_491_create)
HXLINE( 491)			return _gthis->songPercent;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::PlayState,_gthis) HXARGC(0)
            		Float _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_529_create)
HXLINE( 529)			return _gthis->health;
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            		void _hx_run( ::backend::BaseStage stage){
            			HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_629_create)
HXLINE( 629)			stage->createPost();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_270_create)
HXDLIN( 270)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 272)		::states::PlayState_obj::_lastLoadedModDirectory = ::backend::Mods_obj::currentModDirectory;
HXLINE( 273)		::backend::Paths_obj::clearStoredMemory();
HXLINE( 274)		if (::states::PlayState_obj::nextReloadAll) {
HXLINE( 276)			::backend::Paths_obj::clearUnusedMemory();
HXLINE( 277)			::backend::Language_obj::reloadPhrases();
            		}
HXLINE( 279)		::states::PlayState_obj::nextReloadAll = false;
HXLINE( 281)		this->startCallback = this->startCountdown_dyn();
HXLINE( 282)		this->endCallback = this->endSong_dyn();
HXLINE( 285)		::states::PlayState_obj::instance = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 287)		::substates::PauseSubState_obj::songName = null();
HXLINE( 288)		 ::Dynamic defaultValue = null();
HXDLIN( 288)		defaultValue = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("songspeed",92,6f,b6,1d));
HXDLIN( 288)		 ::Dynamic _hx_tmp;
HXDLIN( 288)		if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("songspeed",92,6f,b6,1d))) {
HXLINE( 288)			_hx_tmp = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("songspeed",92,6f,b6,1d));
            		}
            		else {
HXLINE( 288)			_hx_tmp = defaultValue;
            		}
HXDLIN( 288)		this->set_playbackRate(( (Float)(_hx_tmp) ));
HXLINE( 290)		this->keysArray = ::Array_obj< ::String >::fromData( _hx_array_data_0420cd31_21,4);
HXLINE( 297)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 298)			 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 298)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 301)		 ::Dynamic defaultValue1 = null();
HXDLIN( 301)		defaultValue1 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("healthgain",1b,97,1b,16));
HXDLIN( 301)		 ::Dynamic _hx_tmp1;
HXDLIN( 301)		if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("healthgain",1b,97,1b,16))) {
HXLINE( 301)			_hx_tmp1 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("healthgain",1b,97,1b,16));
            		}
            		else {
HXLINE( 301)			_hx_tmp1 = defaultValue1;
            		}
HXDLIN( 301)		this->healthGain = ( (Float)(_hx_tmp1) );
HXLINE( 302)		 ::Dynamic defaultValue2 = null();
HXDLIN( 302)		defaultValue2 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("healthloss",7f,50,74,19));
HXDLIN( 302)		 ::Dynamic _hx_tmp2;
HXDLIN( 302)		if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("healthloss",7f,50,74,19))) {
HXLINE( 302)			_hx_tmp2 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("healthloss",7f,50,74,19));
            		}
            		else {
HXLINE( 302)			_hx_tmp2 = defaultValue2;
            		}
HXDLIN( 302)		this->healthLoss = ( (Float)(_hx_tmp2) );
HXLINE( 303)		 ::Dynamic defaultValue3 = null();
HXDLIN( 303)		defaultValue3 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("instakill",f9,72,23,49));
HXDLIN( 303)		 ::Dynamic _hx_tmp3;
HXDLIN( 303)		if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("instakill",f9,72,23,49))) {
HXLINE( 303)			_hx_tmp3 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("instakill",f9,72,23,49));
            		}
            		else {
HXLINE( 303)			_hx_tmp3 = defaultValue3;
            		}
HXDLIN( 303)		this->instakillOnMiss = ( (bool)(_hx_tmp3) );
HXLINE( 304)		 ::Dynamic defaultValue4 = null();
HXDLIN( 304)		defaultValue4 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("practice",bb,00,e7,a0));
HXDLIN( 304)		 ::Dynamic _hx_tmp4;
HXDLIN( 304)		if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("practice",bb,00,e7,a0))) {
HXLINE( 304)			_hx_tmp4 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("practice",bb,00,e7,a0));
            		}
            		else {
HXLINE( 304)			_hx_tmp4 = defaultValue4;
            		}
HXDLIN( 304)		this->practiceMode = ( (bool)(_hx_tmp4) );
HXLINE( 305)		 ::Dynamic defaultValue5 = null();
HXDLIN( 305)		defaultValue5 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("botplay",7b,fb,a9,61));
HXDLIN( 305)		 ::Dynamic _hx_tmp5;
HXDLIN( 305)		if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("botplay",7b,fb,a9,61))) {
HXLINE( 305)			_hx_tmp5 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("botplay",7b,fb,a9,61));
            		}
            		else {
HXLINE( 305)			_hx_tmp5 = defaultValue5;
            		}
HXDLIN( 305)		this->cpuControlled = ( (bool)(_hx_tmp5) );
HXLINE( 306)		this->guitarHeroSustains = ::backend::ClientPrefs_obj::data->guitarHeroSustains;
HXLINE( 309)		this->camGame = this->initPsychCamera();
HXLINE( 310)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 311)		this->camOther =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 312)		{
HXLINE( 312)			 ::flixel::FlxCamera _hx_tmp6 = this->camHUD;
HXDLIN( 312)			_hx_tmp6->bgColor = (_hx_tmp6->bgColor & 16777215);
HXDLIN( 312)			 ::flixel::FlxCamera _hx_tmp7 = this->camHUD;
HXDLIN( 312)			_hx_tmp7->bgColor = (_hx_tmp7->bgColor | 0);
            		}
HXLINE( 313)		{
HXLINE( 313)			 ::flixel::FlxCamera _hx_tmp8 = this->camOther;
HXDLIN( 313)			_hx_tmp8->bgColor = (_hx_tmp8->bgColor & 16777215);
HXDLIN( 313)			 ::flixel::FlxCamera _hx_tmp9 = this->camOther;
HXDLIN( 313)			_hx_tmp9->bgColor = (_hx_tmp9->bgColor | 0);
            		}
HXLINE( 315)		::flixel::FlxG_obj::cameras->add(this->camHUD,false).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 316)		::flixel::FlxG_obj::cameras->add(this->camOther,false).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 318)		this->persistentUpdate = true;
HXLINE( 319)		this->persistentDraw = true;
HXLINE( 321)		::backend::Conductor_obj::mapBPMChanges(::states::PlayState_obj::SONG);
HXLINE( 322)		::backend::Conductor_obj::set_bpm(( (Float)(::states::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE( 326)		 ::Dynamic num = null();
HXDLIN( 326)		 ::Dynamic diffName;
HXDLIN( 326)		if (::hx::IsNull( num )) {
HXLINE( 326)			diffName = ::states::PlayState_obj::storyDifficulty;
            		}
            		else {
HXLINE( 326)			diffName = num;
            		}
HXDLIN( 326)		::String diffName1 = ::backend::Difficulty_obj::list->__get(( (int)(diffName) ));
HXDLIN( 326)		if (::hx::IsNull( diffName1 )) {
HXLINE(  64)			diffName1 = ::backend::Difficulty_obj::defaultDifficulty;
            		}
HXLINE( 326)		::String key = (HX_("difficulty_",c4,25,f6,54) + diffName1);
HXDLIN( 326)		::cpp::VirtualArray values = null();
HXDLIN( 326)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 326)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN( 326)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(key,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN( 326)		if (::hx::IsNull( str )) {
HXLINE(  62)			str = diffName1;
            		}
HXLINE( 326)		if (::hx::IsNull( str )) {
HXLINE(  68)			str = key;
            		}
HXLINE( 326)		if (::hx::IsNotNull( values )) {
HXLINE( 326)			int _g_current = 0;
HXDLIN( 326)			::cpp::VirtualArray _g_array = values;
HXDLIN( 326)			while((_g_current < _g_array->get_length())){
HXLINE( 326)				 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN( 326)				_g_current = (_g_current + 1);
HXDLIN( 326)				int _g_key = (_g_current - 1);
HXDLIN( 326)				int num1 = _g_key;
HXDLIN( 326)				 ::Dynamic value = _g_value;
HXLINE(  72)				str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num1 + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            			}
            		}
HXLINE( 326)		this->storyDifficultyText = str;
HXLINE( 328)		if (::states::PlayState_obj::isStoryMode) {
HXLINE( 329)			this->detailsText = (HX_("Story Mode: ",d4,01,86,36) + ::backend::WeekData_obj::getCurrentWeek()->weekName);
            		}
            		else {
HXLINE( 331)			this->detailsText = HX_("Freeplay",c0,4c,38,fc);
            		}
HXLINE( 334)		this->detailsPausedText = (HX_("Paused - ",65,2f,92,fd) + this->detailsText);
HXLINE( 337)		::substates::GameOverSubstate_obj::resetVariables();
HXLINE( 338)		::String path = ( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN( 338)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 338)		 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 338)		this->songName = ::StringTools_obj::trim(hideChars1->replace(invalidChars->replace(path,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
HXLINE( 339)		bool _hx_tmp10;
HXDLIN( 339)		if (::hx::IsNotNull( ::states::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic) )) {
HXLINE( 339)			_hx_tmp10 = (( (::String)(::states::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) ).length < 1);
            		}
            		else {
HXLINE( 339)			_hx_tmp10 = true;
            		}
HXDLIN( 339)		if (_hx_tmp10) {
HXLINE( 340)			::String path1 = ::backend::Song_obj::loadedSongName;
HXDLIN( 340)			 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 340)			 ::EReg hideChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 340)			::String _hx_tmp11 = ::StringTools_obj::trim(hideChars2->replace(invalidChars1->replace(path1,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
HXDLIN( 340)			::states::PlayState_obj::SONG->__SetField(HX_("stage",be,6a,0b,84),::backend::StageData_obj::vanillaSongStage(_hx_tmp11),::hx::paccDynamic);
            		}
HXLINE( 342)		::states::PlayState_obj::curStage = ( (::String)(::states::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) );
HXLINE( 344)		 ::Dynamic stageData = ::backend::StageData_obj::getStageFile(::states::PlayState_obj::curStage);
HXLINE( 345)		this->defaultCamZoom = ( (Float)(stageData->__Field(HX_("defaultZoom",74,9c,b7,22),::hx::paccDynamic)) );
HXLINE( 347)		::states::PlayState_obj::set_stageUI(HX_("normal",27,72,69,30));
HXLINE( 348)		bool _hx_tmp12;
HXDLIN( 348)		if (::hx::IsNotNull( stageData->__Field(HX_("stageUI",92,60,ca,2d),::hx::paccDynamic) )) {
HXLINE( 348)			_hx_tmp12 = (::StringTools_obj::trim(( (::String)(stageData->__Field(HX_("stageUI",92,60,ca,2d),::hx::paccDynamic)) )).length > 0);
            		}
            		else {
HXLINE( 348)			_hx_tmp12 = false;
            		}
HXDLIN( 348)		if (_hx_tmp12) {
HXLINE( 349)			::states::PlayState_obj::set_stageUI(( (::String)(stageData->__Field(HX_("stageUI",92,60,ca,2d),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 350)			if (::hx::IsEq( stageData->__Field(HX_("isPixelStage",e2,d6,18,f5),::hx::paccDynamic),true )) {
HXLINE( 351)				::states::PlayState_obj::set_stageUI(HX_("pixel",86,c6,a3,c2));
            			}
            		}
HXLINE( 353)		this->BF_X = ( (Float)( ::Dynamic(stageData->__Field(HX_("boyfriend",6a,29,b8,e6),::hx::paccDynamic))->__GetItem(0)) );
HXLINE( 354)		this->BF_Y = ( (Float)( ::Dynamic(stageData->__Field(HX_("boyfriend",6a,29,b8,e6),::hx::paccDynamic))->__GetItem(1)) );
HXLINE( 355)		this->GF_X = ( (Float)( ::Dynamic(stageData->__Field(HX_("girlfriend",ba,91,48,98),::hx::paccDynamic))->__GetItem(0)) );
HXLINE( 356)		this->GF_Y = ( (Float)( ::Dynamic(stageData->__Field(HX_("girlfriend",ba,91,48,98),::hx::paccDynamic))->__GetItem(1)) );
HXLINE( 357)		this->DAD_X = ( (Float)( ::Dynamic(stageData->__Field(HX_("opponent",9d,b9,b8,f8),::hx::paccDynamic))->__GetItem(0)) );
HXLINE( 358)		this->DAD_Y = ( (Float)( ::Dynamic(stageData->__Field(HX_("opponent",9d,b9,b8,f8),::hx::paccDynamic))->__GetItem(1)) );
HXLINE( 360)		if (::hx::IsNotNull( stageData->__Field(HX_("camera_speed",2d,2f,ab,11),::hx::paccDynamic) )) {
HXLINE( 361)			this->cameraSpeed = ( (Float)(stageData->__Field(HX_("camera_speed",2d,2f,ab,11),::hx::paccDynamic)) );
            		}
HXLINE( 363)		this->boyfriendCameraOffset = ( (::Array< Float >)(stageData->__Field(HX_("camera_boyfriend",10,8c,95,41),::hx::paccDynamic)) );
HXLINE( 364)		if (::hx::IsNull( this->boyfriendCameraOffset )) {
HXLINE( 365)			this->boyfriendCameraOffset = ::Array_obj< Float >::fromData( _hx_array_data_0420cd31_22,2);
            		}
HXLINE( 367)		this->opponentCameraOffset = ( (::Array< Float >)(stageData->__Field(HX_("camera_opponent",b7,ed,08,84),::hx::paccDynamic)) );
HXLINE( 368)		if (::hx::IsNull( this->opponentCameraOffset )) {
HXLINE( 369)			this->opponentCameraOffset = ::Array_obj< Float >::fromData( _hx_array_data_0420cd31_23,2);
            		}
HXLINE( 371)		this->girlfriendCameraOffset = ( (::Array< Float >)(stageData->__Field(HX_("camera_girlfriend",54,80,21,bf),::hx::paccDynamic)) );
HXLINE( 372)		if (::hx::IsNull( this->girlfriendCameraOffset )) {
HXLINE( 373)			this->girlfriendCameraOffset = ::Array_obj< Float >::fromData( _hx_array_data_0420cd31_24,2);
            		}
HXLINE( 375)		this->boyfriendGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,this->BF_X,this->BF_Y,null());
HXLINE( 376)		this->dadGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,this->DAD_X,this->DAD_Y,null());
HXLINE( 377)		this->gfGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,this->GF_X,this->GF_Y,null());
HXLINE( 379)		::String _hx_switch_0 = ::states::PlayState_obj::curStage;
            		if (  (_hx_switch_0==HX_("limo",1f,17,b3,47)) ){
HXLINE( 384)			 ::states::stages::Limo_obj::__alloc( HX_CTX );
HXDLIN( 384)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("mall",d4,3a,56,48)) ){
HXLINE( 385)			 ::states::stages::Mall_obj::__alloc( HX_CTX );
HXDLIN( 385)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("mallEvil",88,d3,e3,a7)) ){
HXLINE( 386)			 ::states::stages::MallEvil_obj::__alloc( HX_CTX );
HXDLIN( 386)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("philly",28,77,5e,ef)) ){
HXLINE( 383)			 ::states::stages::Philly_obj::__alloc( HX_CTX );
HXDLIN( 383)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("phillyBlazin",30,5d,bb,96)) ){
HXLINE( 391)			 ::states::stages::PhillyBlazin_obj::__alloc( HX_CTX );
HXDLIN( 391)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("phillyStreets",c8,50,e9,fe)) ){
HXLINE( 390)			 ::states::stages::PhillyStreets_obj::__alloc( HX_CTX );
HXDLIN( 390)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("school",74,b8,c8,40)) ){
HXLINE( 387)			 ::states::stages::School_obj::__alloc( HX_CTX );
HXDLIN( 387)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 388)			 ::states::stages::SchoolEvil_obj::__alloc( HX_CTX );
HXDLIN( 388)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("spooky",eb,bd,9e,c1)) ){
HXLINE( 382)			 ::states::stages::Spooky_obj::__alloc( HX_CTX );
HXDLIN( 382)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("stage",be,6a,0b,84)) ){
HXLINE( 381)			 ::states::stages::StageWeek1_obj::__alloc( HX_CTX );
HXDLIN( 381)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("tank",ea,ba,f6,4c)) ){
HXLINE( 389)			 ::states::stages::Tank_obj::__alloc( HX_CTX );
HXDLIN( 389)			goto _hx_goto_3;
            		}
            		_hx_goto_3:;
HXLINE( 393)		if (::states::PlayState_obj::get_isPixelStage()) {
HXLINE( 393)			this->introSoundsSuffix = HX_("-pixel",39,03,b3,c0);
            		}
HXLINE( 396)		this->luaDebugGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 397)		this->luaDebugGroup->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camOther));
HXLINE( 398)		this->add(this->luaDebugGroup);
HXLINE( 401)		if (!(( (bool)(stageData->__Field(HX_("hide_girlfriend",57,bd,d9,f9),::hx::paccDynamic)) ))) {
HXLINE( 403)			bool _hx_tmp13;
HXDLIN( 403)			if (::hx::IsNotNull( ::states::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic) )) {
HXLINE( 403)				_hx_tmp13 = (( (::String)(::states::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) ).length < 1);
            			}
            			else {
HXLINE( 403)				_hx_tmp13 = true;
            			}
HXDLIN( 403)			if (_hx_tmp13) {
HXLINE( 403)				::states::PlayState_obj::SONG->__SetField(HX_("gfVersion",b9,c6,7d,f3),HX_("gf",1f,5a,00,00),::hx::paccDynamic);
            			}
HXLINE( 404)			this->gf =  ::objects::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),( (::String)(::states::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) ),null());
HXLINE( 405)			this->startCharacterPos(this->gf,null());
HXLINE( 406)			{
HXLINE( 406)				 ::flixel::math::FlxBasePoint this2 = this->gfGroup->scrollFactor;
HXDLIN( 406)				this2->set_x(((Float)0.95));
HXDLIN( 406)				this2->set_y(((Float)0.95));
            			}
HXLINE( 407)			this->gfGroup->add(this->gf).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE( 410)		this->dad =  ::objects::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),( (::String)(::states::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 411)		this->startCharacterPos(this->dad,true);
HXLINE( 412)		this->dadGroup->add(this->dad).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 414)		this->boyfriend =  ::objects::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),( (::String)(::states::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),true);
HXLINE( 415)		this->startCharacterPos(this->boyfriend,null());
HXLINE( 416)		this->boyfriendGroup->add(this->boyfriend).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 418)		bool _hx_tmp14;
HXDLIN( 418)		if (::hx::IsNotNull( stageData->__Field(HX_("objects",d4,68,4f,82),::hx::paccDynamic) )) {
HXLINE( 418)			_hx_tmp14 = (( (::cpp::VirtualArray)(stageData->__Field(HX_("objects",d4,68,4f,82),::hx::paccDynamic)) )->get_length() > 0);
            		}
            		else {
HXLINE( 418)			_hx_tmp14 = false;
            		}
HXDLIN( 418)		if (_hx_tmp14) {
HXLINE( 420)			 ::flixel::FlxSprite list;
HXDLIN( 420)			if (!(( (bool)(stageData->__Field(HX_("hide_girlfriend",57,bd,d9,f9),::hx::paccDynamic)) ))) {
HXLINE( 420)				list = this->gfGroup;
            			}
            			else {
HXLINE( 420)				list = null();
            			}
HXDLIN( 420)			 ::haxe::ds::StringMap list1 = ::backend::StageData_obj::addObjectsToState(( (::cpp::VirtualArray)(stageData->__Field(HX_("objects",d4,68,4f,82),::hx::paccDynamic)) ),list,this->dadGroup,this->boyfriendGroup,::hx::ObjectPtr<OBJ_>(this),null());
HXLINE( 421)			{
HXLINE( 421)				::Dynamic map = list1;
HXDLIN( 421)				::Dynamic _g_map = map;
HXDLIN( 421)				 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 421)				while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 421)					::String key1 = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 421)					 ::flixel::FlxSprite _g_value1 = ( ( ::flixel::FlxSprite)(::haxe::IMap_obj::get(_g_map,key1)) );
HXDLIN( 421)					::String _g_key1 = key1;
HXDLIN( 421)					::String key2 = _g_key1;
HXDLIN( 421)					 ::flixel::FlxSprite spr = _g_value1;
HXLINE( 422)					if (!(::backend::StageData_obj::reservedNames->contains(key2))) {
HXLINE( 423)						this->variables->set(key2,spr);
            					}
            				}
            			}
            		}
            		else {
HXLINE( 427)			this->add(this->gfGroup);
HXLINE( 428)			this->add(this->dadGroup);
HXLINE( 429)			this->add(this->boyfriendGroup);
            		}
HXLINE( 434)		{
HXLINE( 434)			int _g = 0;
HXDLIN( 434)			::Array< ::String > foldersToCheck = ::Array_obj< ::String >::__new(0);
HXDLIN( 434)			if (::sys::FileSystem_obj::exists((HX_("assets/shared/",1e,69,1e,47) + HX_("scripts/",27,8b,98,1a)))) {
HXLINE( 434)				foldersToCheck->push((HX_("assets/shared/",1e,69,1e,47) + HX_("scripts/",27,8b,98,1a)));
            			}
HXDLIN( 434)			bool _hx_tmp15;
HXDLIN( 434)			if (::hx::IsNotNull( ::backend::Paths_obj::currentLevel )) {
HXLINE( 434)				_hx_tmp15 = (::backend::Paths_obj::currentLevel != HX_("assets/shared/",1e,69,1e,47));
            			}
            			else {
HXLINE( 434)				_hx_tmp15 = false;
            			}
HXDLIN( 434)			if (_hx_tmp15) {
HXLINE( 434)				::String folder = ::backend::Paths_obj::currentLevel;
HXDLIN( 434)				if (::hx::IsNull( folder )) {
HXLINE( 104)					folder = HX_("shared",a5,5e,2b,1d);
            				}
HXLINE( 434)				::String pth = (((HX_("assets/",4c,2a,dc,36) + folder) + HX_("/",2f,00,00,00)) + HX_("scripts/",27,8b,98,1a));
HXDLIN( 434)				bool _hx_tmp16;
HXDLIN( 434)				if (!(foldersToCheck->contains(pth))) {
HXLINE( 434)					_hx_tmp16 = ::sys::FileSystem_obj::exists(pth);
            				}
            				else {
HXLINE( 434)					_hx_tmp16 = false;
            				}
HXDLIN( 434)				if (_hx_tmp16) {
HXLINE( 434)					foldersToCheck->push(pth);
            				}
            			}
HXDLIN( 434)			{
HXLINE( 434)				{
HXLINE( 434)					int _g1 = 0;
HXDLIN( 434)					::Array< ::String > _g2 = ::backend::Mods_obj::globalMods;
HXDLIN( 434)					while((_g1 < _g2->length)){
HXLINE( 434)						::String mod = _g2->__get(_g1);
HXDLIN( 434)						_g1 = (_g1 + 1);
HXDLIN( 434)						::String key3 = ((mod + HX_("/",2f,00,00,00)) + HX_("scripts/",27,8b,98,1a));
HXDLIN( 434)						if (::hx::IsNull( key3 )) {
HXLINE( 115)							key3 = HX_("",00,00,00,00);
            						}
HXLINE( 434)						::String folder1 = (HX_("mods/",9e,2f,58,0c) + key3);
HXDLIN( 434)						bool _hx_tmp17;
HXDLIN( 434)						if (::sys::FileSystem_obj::exists(folder1)) {
HXLINE( 434)							_hx_tmp17 = !(foldersToCheck->contains(folder1));
            						}
            						else {
HXLINE( 434)							_hx_tmp17 = false;
            						}
HXDLIN( 434)						if (_hx_tmp17) {
HXLINE( 434)							foldersToCheck->push(folder1);
            						}
            					}
            				}
HXDLIN( 434)				::String key4 = HX_("scripts/",27,8b,98,1a);
HXDLIN( 434)				if (::hx::IsNull( key4 )) {
HXLINE( 120)					key4 = HX_("",00,00,00,00);
            				}
HXLINE( 434)				::String folder2 = (HX_("mods/",9e,2f,58,0c) + key4);
HXDLIN( 434)				bool _hx_tmp18;
HXDLIN( 434)				if (::sys::FileSystem_obj::exists(folder2)) {
HXLINE( 434)					_hx_tmp18 = !(foldersToCheck->contains(folder2));
            				}
            				else {
HXLINE( 434)					_hx_tmp18 = false;
            				}
HXDLIN( 434)				if (_hx_tmp18) {
HXLINE( 434)					::String key5 = HX_("scripts/",27,8b,98,1a);
HXDLIN( 434)					if (::hx::IsNull( key5 )) {
HXLINE( 121)						key5 = HX_("",00,00,00,00);
            					}
HXLINE( 434)					foldersToCheck->push((HX_("mods/",9e,2f,58,0c) + key5));
            				}
HXDLIN( 434)				bool _hx_tmp19;
HXDLIN( 434)				if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE( 434)					_hx_tmp19 = (::backend::Mods_obj::currentModDirectory.length > 0);
            				}
            				else {
HXLINE( 434)					_hx_tmp19 = false;
            				}
HXDLIN( 434)				if (_hx_tmp19) {
HXLINE( 434)					::String key6 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + HX_("scripts/",27,8b,98,1a));
HXDLIN( 434)					if (::hx::IsNull( key6 )) {
HXLINE( 126)						key6 = HX_("",00,00,00,00);
            					}
HXLINE( 434)					::String folder3 = (HX_("mods/",9e,2f,58,0c) + key6);
HXDLIN( 434)					bool _hx_tmp20;
HXDLIN( 434)					if (::sys::FileSystem_obj::exists(folder3)) {
HXLINE( 434)						_hx_tmp20 = !(foldersToCheck->contains(folder3));
            					}
            					else {
HXLINE( 434)						_hx_tmp20 = false;
            					}
HXDLIN( 434)					if (_hx_tmp20) {
HXLINE( 434)						foldersToCheck->push(folder3);
            					}
            				}
            			}
HXDLIN( 434)			::Array< ::String > _g3 = foldersToCheck;
HXDLIN( 434)			while((_g < _g3->length)){
HXLINE( 434)				::String folder4 = _g3->__get(_g);
HXDLIN( 434)				_g = (_g + 1);
HXLINE( 435)				{
HXLINE( 435)					int _g4 = 0;
HXDLIN( 435)					::Array< ::String > _g5 = ::sys::FileSystem_obj::readDirectory(folder4);
HXDLIN( 435)					while((_g4 < _g5->length)){
HXLINE( 435)						::String file = _g5->__get(_g4);
HXDLIN( 435)						_g4 = (_g4 + 1);
HXLINE( 438)						if (::StringTools_obj::endsWith(file.toLowerCase(),HX_(".lua",4a,2a,ba,1e))) {
HXLINE( 439)							 ::psychlua::FunkinLua_obj::__alloc( HX_CTX ,(folder4 + file));
            						}
HXLINE( 443)						if (::StringTools_obj::endsWith(file.toLowerCase(),HX_(".hx",be,42,23,00))) {
HXLINE( 444)							this->initHScript((folder4 + file));
            						}
            					}
            				}
            			}
            		}
HXLINE( 449)		Float x = this->girlfriendCameraOffset->__get(0);
HXDLIN( 449)		Float y = this->girlfriendCameraOffset->__get(1);
HXDLIN( 449)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 449)		point->_inPool = false;
HXDLIN( 449)		 ::flixel::math::FlxBasePoint camPos = point;
HXLINE( 450)		if (::hx::IsNotNull( this->gf )) {
HXLINE( 452)			{
HXLINE( 452)				Float camPos1 = camPos->x;
HXDLIN( 452)				Float x1 = this->gf->getGraphicMidpoint(null())->x;
HXDLIN( 452)				camPos->set_x((camPos1 + (x1 + this->gf->cameraPosition->__get(0))));
            			}
HXLINE( 453)			{
HXLINE( 453)				Float camPos2 = camPos->y;
HXDLIN( 453)				Float y1 = this->gf->getGraphicMidpoint(null())->y;
HXDLIN( 453)				camPos->set_y((camPos2 + (y1 + this->gf->cameraPosition->__get(1))));
            			}
            		}
HXLINE( 456)		if (::StringTools_obj::startsWith(this->dad->curCharacter,HX_("gf",1f,5a,00,00))) {
HXLINE( 457)			this->dad->setPosition(this->GF_X,this->GF_Y);
HXLINE( 458)			if (::hx::IsNotNull( this->gf )) {
HXLINE( 459)				this->gf->set_visible(false);
            			}
            		}
HXLINE( 464)		this->startLuasNamed(((HX_("stages/",9a,7a,ca,2d) + ::states::PlayState_obj::curStage) + HX_(".lua",4a,2a,ba,1e)));
HXLINE( 465)		this->startHScriptsNamed(((HX_("stages/",9a,7a,ca,2d) + ::states::PlayState_obj::curStage) + HX_(".hx",be,42,23,00)));
HXLINE( 468)		if (::hx::IsNotNull( this->gf )) {
HXLINE( 468)			this->startCharacterScripts(this->gf->curCharacter);
            		}
HXLINE( 469)		this->startCharacterScripts(this->dad->curCharacter);
HXLINE( 470)		this->startCharacterScripts(this->boyfriend->curCharacter);
HXLINE( 473)		this->uiGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 474)		this->comboGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 475)		this->noteGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 476)		this->add(this->comboGroup);
HXLINE( 477)		this->add(this->uiGroup);
HXLINE( 478)		this->add(this->noteGroup);
HXLINE( 480)		::backend::Conductor_obj::songPosition = ((-(::backend::Conductor_obj::crochet) * ( (Float)(5) )) + ::backend::Conductor_obj::offset);
HXLINE( 481)		bool showTime = (::backend::ClientPrefs_obj::data->timeBarType != HX_("Disabled",9c,fd,b5,55));
HXLINE( 482)		this->timeTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,((::states::PlayState_obj::STRUM_X + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))) - ( (Float)(248) )),19,400,HX_("",00,00,00,00),32,null());
HXLINE( 483)		 ::flixel::text::FlxText _hx_tmp21 = this->timeTxt;
HXDLIN( 483)		::String key7 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 483)		::Dynamic this3 = ::backend::Language_obj::phrases;
HXDLIN( 483)		::String str1 = ( ( ::haxe::ds::StringMap)(this3) )->get_string(::StringTools_obj::trim(key7).toLowerCase());
HXDLIN( 483)		if (::hx::IsNotNull( str1 )) {
HXLINE(  82)			key7 = str1;
            		}
HXLINE( 483)		::String folderKey = key7;
HXDLIN( 483)		::String file1 = ::backend::Paths_obj::modFolders(folderKey);
HXDLIN( 483)		::String _hx_tmp22;
HXDLIN( 483)		if (::sys::FileSystem_obj::exists(file1)) {
HXLINE( 483)			_hx_tmp22 = file1;
            		}
            		else {
HXLINE( 483)			_hx_tmp22 = (HX_("assets/",4c,2a,dc,36) + folderKey);
            		}
HXDLIN( 483)		_hx_tmp21->setFormat(_hx_tmp22,32,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 484)		{
HXLINE( 484)			 ::flixel::math::FlxBasePoint this4 = this->timeTxt->scrollFactor;
HXDLIN( 484)			this4->set_x(( (Float)(0) ));
HXDLIN( 484)			this4->set_y(( (Float)(0) ));
            		}
HXLINE( 485)		this->timeTxt->set_alpha(( (Float)(0) ));
HXLINE( 486)		this->timeTxt->set_borderSize(( (Float)(2) ));
HXLINE( 487)		this->timeTxt->set_visible((this->updateTime = showTime));
HXLINE( 488)		if (::backend::ClientPrefs_obj::data->downScroll) {
HXLINE( 488)			this->timeTxt->set_y(( (Float)((::flixel::FlxG_obj::height - 44)) ));
            		}
HXLINE( 489)		if ((::backend::ClientPrefs_obj::data->timeBarType == HX_("Song Name",76,e6,ca,de))) {
HXLINE( 489)			this->timeTxt->set_text(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
            		}
HXLINE( 491)		Float _hx_tmp23 = this->timeTxt->y;
HXDLIN( 491)		this->timeBar =  ::objects::Bar_obj::__alloc( HX_CTX ,( (Float)(0) ),(_hx_tmp23 + (this->timeTxt->get_height() / ( (Float)(4) ))),HX_("timeBar",c6,e3,d4,d8), ::Dynamic(new _hx_Closure_0(_gthis)),0,1);
HXLINE( 492)		{
HXLINE( 492)			 ::flixel::math::FlxBasePoint this5 = this->timeBar->scrollFactor;
HXDLIN( 492)			this5->set_x(( (Float)(0) ));
HXDLIN( 492)			this5->set_y(( (Float)(0) ));
            		}
HXLINE( 493)		{
HXLINE( 493)			 ::objects::Bar _this1 = this->timeBar;
HXDLIN( 493)			int axes = 1;
HXDLIN( 493)			bool _hx_tmp24;
HXDLIN( 493)			if ((axes != 1)) {
HXLINE( 493)				_hx_tmp24 = (axes == 17);
            			}
            			else {
HXLINE( 493)				_hx_tmp24 = true;
            			}
HXDLIN( 493)			if (_hx_tmp24) {
HXLINE( 493)				int _hx_tmp25 = ::flixel::FlxG_obj::width;
HXDLIN( 493)				_this1->set_x(((( (Float)(_hx_tmp25) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 493)			bool _hx_tmp26;
HXDLIN( 493)			if ((axes != 16)) {
HXLINE( 493)				_hx_tmp26 = (axes == 17);
            			}
            			else {
HXLINE( 493)				_hx_tmp26 = true;
            			}
HXDLIN( 493)			if (_hx_tmp26) {
HXLINE( 493)				int _hx_tmp27 = ::flixel::FlxG_obj::height;
HXDLIN( 493)				_this1->set_y(((( (Float)(_hx_tmp27) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 494)		this->timeBar->set_alpha(( (Float)(0) ));
HXLINE( 495)		this->timeBar->set_visible(showTime);
HXLINE( 496)		this->uiGroup->add(this->timeBar).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 497)		this->uiGroup->add(this->timeTxt).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 499)		this->noteGroup->add(this->strumLineNotes).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 501)		if ((::backend::ClientPrefs_obj::data->timeBarType == HX_("Song Name",76,e6,ca,de))) {
HXLINE( 503)			this->timeTxt->set_size(24);
HXLINE( 504)			 ::flixel::text::FlxText fh = this->timeTxt;
HXDLIN( 504)			fh->set_y((fh->y + 3));
            		}
HXLINE( 507)		this->generateSong();
HXLINE( 509)		this->noteGroup->add(this->grpNoteSplashes).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 511)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 512)		this->camFollow->setPosition(camPos->x,camPos->y);
HXLINE( 513)		camPos->put();
HXLINE( 515)		if (::hx::IsNotNull( ::states::PlayState_obj::prevCamFollow )) {
HXLINE( 517)			this->camFollow = ::states::PlayState_obj::prevCamFollow;
HXLINE( 518)			::states::PlayState_obj::prevCamFollow = null();
            		}
HXLINE( 520)		this->add(this->camFollow);
HXLINE( 522)		::flixel::FlxG_obj::camera->follow(this->camFollow,::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),0);
HXLINE( 523)		::flixel::FlxG_obj::camera->set_zoom(this->defaultCamZoom);
HXLINE( 524)		::flixel::FlxG_obj::camera->snapToTarget();
HXLINE( 526)		{
HXLINE( 526)			 ::flixel::math::FlxRect _this2 = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 526)			_this2->x = ( (Float)(0) );
HXDLIN( 526)			_this2->y = ( (Float)(0) );
HXDLIN( 526)			_this2->width = ( (Float)(::flixel::FlxG_obj::width) );
HXDLIN( 526)			_this2->height = ( (Float)(::flixel::FlxG_obj::height) );
            		}
HXLINE( 527)		this->moveCameraSection(null());
HXLINE( 529)		Float _hx_tmp28;
HXDLIN( 529)		if (!(::backend::ClientPrefs_obj::data->downScroll)) {
HXLINE( 529)			_hx_tmp28 = ((Float)0.89);
            		}
            		else {
HXLINE( 529)			_hx_tmp28 = ((Float)0.11);
            		}
HXDLIN( 529)		this->healthBar =  ::objects::Bar_obj::__alloc( HX_CTX ,( (Float)(0) ),(( (Float)(::flixel::FlxG_obj::height) ) * _hx_tmp28),HX_("healthBar",97,8a,92,42), ::Dynamic(new _hx_Closure_1(_gthis)),0,2);
HXLINE( 530)		{
HXLINE( 530)			 ::objects::Bar _this3 = this->healthBar;
HXDLIN( 530)			int axes1 = 1;
HXDLIN( 530)			bool _hx_tmp29;
HXDLIN( 530)			if ((axes1 != 1)) {
HXLINE( 530)				_hx_tmp29 = (axes1 == 17);
            			}
            			else {
HXLINE( 530)				_hx_tmp29 = true;
            			}
HXDLIN( 530)			if (_hx_tmp29) {
HXLINE( 530)				int _hx_tmp30 = ::flixel::FlxG_obj::width;
HXDLIN( 530)				_this3->set_x(((( (Float)(_hx_tmp30) ) - _this3->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 530)			bool _hx_tmp31;
HXDLIN( 530)			if ((axes1 != 16)) {
HXLINE( 530)				_hx_tmp31 = (axes1 == 17);
            			}
            			else {
HXLINE( 530)				_hx_tmp31 = true;
            			}
HXDLIN( 530)			if (_hx_tmp31) {
HXLINE( 530)				int _hx_tmp32 = ::flixel::FlxG_obj::height;
HXDLIN( 530)				_this3->set_y(((( (Float)(_hx_tmp32) ) - _this3->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 531)		this->healthBar->set_leftToRight(false);
HXLINE( 532)		{
HXLINE( 532)			 ::flixel::math::FlxBasePoint this6 = this->healthBar->scrollFactor;
HXDLIN( 532)			this6->set_x(( (Float)(0) ));
HXDLIN( 532)			this6->set_y(( (Float)(0) ));
            		}
HXLINE( 533)		this->healthBar->set_visible(!(::backend::ClientPrefs_obj::data->hideHud));
HXLINE( 534)		this->healthBar->set_alpha(::backend::ClientPrefs_obj::data->healthBarAlpha);
HXLINE( 535)		this->reloadHealthBarColors();
HXLINE( 536)		this->uiGroup->add(this->healthBar).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 538)		this->iconP1 =  ::objects::HealthIcon_obj::__alloc( HX_CTX ,this->boyfriend->healthIcon,true,null());
HXLINE( 539)		this->iconP1->set_y((this->healthBar->y - ( (Float)(75) )));
HXLINE( 540)		this->iconP1->set_visible(!(::backend::ClientPrefs_obj::data->hideHud));
HXLINE( 541)		this->iconP1->set_alpha(::backend::ClientPrefs_obj::data->healthBarAlpha);
HXLINE( 542)		this->uiGroup->add(this->iconP1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 544)		this->iconP2 =  ::objects::HealthIcon_obj::__alloc( HX_CTX ,this->dad->healthIcon,false,null());
HXLINE( 545)		this->iconP2->set_y((this->healthBar->y - ( (Float)(75) )));
HXLINE( 546)		this->iconP2->set_visible(!(::backend::ClientPrefs_obj::data->hideHud));
HXLINE( 547)		this->iconP2->set_alpha(::backend::ClientPrefs_obj::data->healthBarAlpha);
HXLINE( 548)		this->uiGroup->add(this->iconP2).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 550)		this->scoreTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,(this->healthBar->y + 40),::flixel::FlxG_obj::width,HX_("",00,00,00,00),20,null());
HXLINE( 551)		 ::flixel::text::FlxText _hx_tmp33 = this->scoreTxt;
HXDLIN( 551)		::String key8 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 551)		::Dynamic this7 = ::backend::Language_obj::phrases;
HXDLIN( 551)		::String str2 = ( ( ::haxe::ds::StringMap)(this7) )->get_string(::StringTools_obj::trim(key8).toLowerCase());
HXDLIN( 551)		if (::hx::IsNotNull( str2 )) {
HXLINE(  82)			key8 = str2;
            		}
HXLINE( 551)		::String folderKey1 = key8;
HXDLIN( 551)		::String file2 = ::backend::Paths_obj::modFolders(folderKey1);
HXDLIN( 551)		::String _hx_tmp34;
HXDLIN( 551)		if (::sys::FileSystem_obj::exists(file2)) {
HXLINE( 551)			_hx_tmp34 = file2;
            		}
            		else {
HXLINE( 551)			_hx_tmp34 = (HX_("assets/",4c,2a,dc,36) + folderKey1);
            		}
HXDLIN( 551)		_hx_tmp33->setFormat(_hx_tmp34,20,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 552)		{
HXLINE( 552)			 ::flixel::math::FlxBasePoint this8 = this->scoreTxt->scrollFactor;
HXDLIN( 552)			this8->set_x(( (Float)(0) ));
HXDLIN( 552)			this8->set_y(( (Float)(0) ));
            		}
HXLINE( 553)		this->scoreTxt->set_borderSize(((Float)1.25));
HXLINE( 554)		this->scoreTxt->set_visible(!(::backend::ClientPrefs_obj::data->hideHud));
HXLINE( 555)		this->uiGroup->add(this->scoreTxt).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 557)		Float _hx_tmp35 = (this->healthBar->y - ( (Float)(90) ));
HXDLIN( 557)		int _hx_tmp36 = (::flixel::FlxG_obj::width - 800);
HXDLIN( 557)		::String defaultPhrase = null();
HXDLIN( 557)		::cpp::VirtualArray values1 = null();
HXDLIN( 557)		::Dynamic this9 = ::backend::Language_obj::phrases;
HXDLIN( 557)		 ::EReg hideChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN( 557)		::String str3 = ( ( ::haxe::ds::StringMap)(this9) )->get_string(::StringTools_obj::trim(hideChars3->replace(::StringTools_obj::replace(HX_("Botplay",5b,23,fb,2e),HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN( 557)		if (::hx::IsNull( str3 )) {
HXLINE(  62)			str3 = defaultPhrase;
            		}
HXLINE( 557)		if (::hx::IsNull( str3 )) {
HXLINE(  68)			str3 = HX_("Botplay",5b,23,fb,2e);
            		}
HXLINE( 557)		if (::hx::IsNotNull( values1 )) {
HXLINE( 557)			int _g_current1 = 0;
HXDLIN( 557)			::cpp::VirtualArray _g_array1 = values1;
HXDLIN( 557)			while((_g_current1 < _g_array1->get_length())){
HXLINE( 557)				 ::Dynamic _g_value2 = _g_array1->__get(_g_current1);
HXDLIN( 557)				_g_current1 = (_g_current1 + 1);
HXDLIN( 557)				int _g_key2 = (_g_current1 - 1);
HXDLIN( 557)				int num2 = _g_key2;
HXDLIN( 557)				 ::Dynamic value1 = _g_value2;
HXLINE(  72)				str3 = ::StringTools_obj::replace(str3,((HX_("{",7b,00,00,00) + (num2 + 1)) + HX_("}",7d,00,00,00)),( (::String)(value1) ));
            			}
            		}
HXLINE( 557)		this->botplayTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,400,_hx_tmp35,_hx_tmp36,str3.toUpperCase(),32,null());
HXLINE( 558)		 ::flixel::text::FlxText _hx_tmp37 = this->botplayTxt;
HXDLIN( 558)		::String key9 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 558)		::Dynamic this10 = ::backend::Language_obj::phrases;
HXDLIN( 558)		::String str4 = ( ( ::haxe::ds::StringMap)(this10) )->get_string(::StringTools_obj::trim(key9).toLowerCase());
HXDLIN( 558)		if (::hx::IsNotNull( str4 )) {
HXLINE(  82)			key9 = str4;
            		}
HXLINE( 558)		::String folderKey2 = key9;
HXDLIN( 558)		::String file3 = ::backend::Paths_obj::modFolders(folderKey2);
HXDLIN( 558)		::String _hx_tmp38;
HXDLIN( 558)		if (::sys::FileSystem_obj::exists(file3)) {
HXLINE( 558)			_hx_tmp38 = file3;
            		}
            		else {
HXLINE( 558)			_hx_tmp38 = (HX_("assets/",4c,2a,dc,36) + folderKey2);
            		}
HXDLIN( 558)		_hx_tmp37->setFormat(_hx_tmp38,32,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 559)		{
HXLINE( 559)			 ::flixel::math::FlxBasePoint this11 = this->botplayTxt->scrollFactor;
HXDLIN( 559)			this11->set_x(( (Float)(0) ));
HXDLIN( 559)			this11->set_y(( (Float)(0) ));
            		}
HXLINE( 560)		this->botplayTxt->set_borderSize(((Float)1.25));
HXLINE( 561)		this->botplayTxt->set_visible(this->cpuControlled);
HXLINE( 562)		this->uiGroup->add(this->botplayTxt).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 563)		if (::backend::ClientPrefs_obj::data->downScroll) {
HXLINE( 564)			this->botplayTxt->set_y((this->healthBar->y + 70));
            		}
HXLINE( 566)		this->uiGroup->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 567)		this->noteGroup->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 568)		this->comboGroup->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 570)		this->startingSong = true;
HXLINE( 573)		{
HXLINE( 573)			int _g6 = 0;
HXDLIN( 573)			::Array< ::String > _g7 = this->noteTypes;
HXDLIN( 573)			while((_g6 < _g7->length)){
HXLINE( 573)				::String notetype = _g7->__get(_g6);
HXDLIN( 573)				_g6 = (_g6 + 1);
HXLINE( 574)				this->startLuasNamed(((HX_("custom_notetypes/",16,04,18,a1) + notetype) + HX_(".lua",4a,2a,ba,1e)));
            			}
            		}
HXLINE( 575)		{
HXLINE( 575)			int _g8 = 0;
HXDLIN( 575)			::Array< ::String > _g9 = this->eventsPushed;
HXDLIN( 575)			while((_g8 < _g9->length)){
HXLINE( 575)				::String event = _g9->__get(_g8);
HXDLIN( 575)				_g8 = (_g8 + 1);
HXLINE( 576)				this->startLuasNamed(((HX_("custom_events/",28,61,2e,89) + event) + HX_(".lua",4a,2a,ba,1e)));
            			}
            		}
HXLINE( 580)		{
HXLINE( 580)			int _g10 = 0;
HXDLIN( 580)			::Array< ::String > _g11 = this->noteTypes;
HXDLIN( 580)			while((_g10 < _g11->length)){
HXLINE( 580)				::String notetype1 = _g11->__get(_g10);
HXDLIN( 580)				_g10 = (_g10 + 1);
HXLINE( 581)				this->startHScriptsNamed(((HX_("custom_notetypes/",16,04,18,a1) + notetype1) + HX_(".hx",be,42,23,00)));
            			}
            		}
HXLINE( 582)		{
HXLINE( 582)			int _g12 = 0;
HXDLIN( 582)			::Array< ::String > _g13 = this->eventsPushed;
HXDLIN( 582)			while((_g12 < _g13->length)){
HXLINE( 582)				::String event1 = _g13->__get(_g12);
HXDLIN( 582)				_g12 = (_g12 + 1);
HXLINE( 583)				this->startHScriptsNamed(((HX_("custom_events/",28,61,2e,89) + event1) + HX_(".hx",be,42,23,00)));
            			}
            		}
HXLINE( 585)		this->noteTypes = null();
HXLINE( 586)		this->eventsPushed = null();
HXLINE( 590)		{
HXLINE( 590)			int _g14 = 0;
HXDLIN( 590)			::String fileToFind = ((HX_("data/",c5,0e,88,d4) + this->songName) + HX_("/",2f,00,00,00));
HXDLIN( 590)			::Array< ::String > foldersToCheck1 = ::Array_obj< ::String >::__new(0);
HXDLIN( 590)			if (::sys::FileSystem_obj::exists((HX_("assets/shared/",1e,69,1e,47) + fileToFind))) {
HXLINE( 590)				foldersToCheck1->push((HX_("assets/shared/",1e,69,1e,47) + fileToFind));
            			}
HXDLIN( 590)			bool _hx_tmp39;
HXDLIN( 590)			if (::hx::IsNotNull( ::backend::Paths_obj::currentLevel )) {
HXLINE( 590)				_hx_tmp39 = (::backend::Paths_obj::currentLevel != HX_("assets/shared/",1e,69,1e,47));
            			}
            			else {
HXLINE( 590)				_hx_tmp39 = false;
            			}
HXDLIN( 590)			if (_hx_tmp39) {
HXLINE( 590)				::String folder5 = ::backend::Paths_obj::currentLevel;
HXDLIN( 590)				if (::hx::IsNull( folder5 )) {
HXLINE( 104)					folder5 = HX_("shared",a5,5e,2b,1d);
            				}
HXLINE( 590)				::String pth1 = (((HX_("assets/",4c,2a,dc,36) + folder5) + HX_("/",2f,00,00,00)) + fileToFind);
HXDLIN( 590)				bool _hx_tmp40;
HXDLIN( 590)				if (!(foldersToCheck1->contains(pth1))) {
HXLINE( 590)					_hx_tmp40 = ::sys::FileSystem_obj::exists(pth1);
            				}
            				else {
HXLINE( 590)					_hx_tmp40 = false;
            				}
HXDLIN( 590)				if (_hx_tmp40) {
HXLINE( 590)					foldersToCheck1->push(pth1);
            				}
            			}
HXDLIN( 590)			{
HXLINE( 590)				{
HXLINE( 590)					int _g15 = 0;
HXDLIN( 590)					::Array< ::String > _g16 = ::backend::Mods_obj::globalMods;
HXDLIN( 590)					while((_g15 < _g16->length)){
HXLINE( 590)						::String mod1 = _g16->__get(_g15);
HXDLIN( 590)						_g15 = (_g15 + 1);
HXDLIN( 590)						::String key10 = ((mod1 + HX_("/",2f,00,00,00)) + fileToFind);
HXDLIN( 590)						if (::hx::IsNull( key10 )) {
HXLINE( 115)							key10 = HX_("",00,00,00,00);
            						}
HXLINE( 590)						::String folder6 = (HX_("mods/",9e,2f,58,0c) + key10);
HXDLIN( 590)						bool _hx_tmp41;
HXDLIN( 590)						if (::sys::FileSystem_obj::exists(folder6)) {
HXLINE( 590)							_hx_tmp41 = !(foldersToCheck1->contains(folder6));
            						}
            						else {
HXLINE( 590)							_hx_tmp41 = false;
            						}
HXDLIN( 590)						if (_hx_tmp41) {
HXLINE( 590)							foldersToCheck1->push(folder6);
            						}
            					}
            				}
HXDLIN( 590)				::String key11 = fileToFind;
HXDLIN( 590)				if (::hx::IsNull( key11 )) {
HXLINE( 120)					key11 = HX_("",00,00,00,00);
            				}
HXLINE( 590)				::String folder7 = (HX_("mods/",9e,2f,58,0c) + key11);
HXDLIN( 590)				bool _hx_tmp42;
HXDLIN( 590)				if (::sys::FileSystem_obj::exists(folder7)) {
HXLINE( 590)					_hx_tmp42 = !(foldersToCheck1->contains(folder7));
            				}
            				else {
HXLINE( 590)					_hx_tmp42 = false;
            				}
HXDLIN( 590)				if (_hx_tmp42) {
HXLINE( 590)					::String key12 = fileToFind;
HXDLIN( 590)					if (::hx::IsNull( key12 )) {
HXLINE( 121)						key12 = HX_("",00,00,00,00);
            					}
HXLINE( 590)					foldersToCheck1->push((HX_("mods/",9e,2f,58,0c) + key12));
            				}
HXDLIN( 590)				bool _hx_tmp43;
HXDLIN( 590)				if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE( 590)					_hx_tmp43 = (::backend::Mods_obj::currentModDirectory.length > 0);
            				}
            				else {
HXLINE( 590)					_hx_tmp43 = false;
            				}
HXDLIN( 590)				if (_hx_tmp43) {
HXLINE( 590)					::String key13 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + fileToFind);
HXDLIN( 590)					if (::hx::IsNull( key13 )) {
HXLINE( 126)						key13 = HX_("",00,00,00,00);
            					}
HXLINE( 590)					::String folder8 = (HX_("mods/",9e,2f,58,0c) + key13);
HXDLIN( 590)					bool _hx_tmp44;
HXDLIN( 590)					if (::sys::FileSystem_obj::exists(folder8)) {
HXLINE( 590)						_hx_tmp44 = !(foldersToCheck1->contains(folder8));
            					}
            					else {
HXLINE( 590)						_hx_tmp44 = false;
            					}
HXDLIN( 590)					if (_hx_tmp44) {
HXLINE( 590)						foldersToCheck1->push(folder8);
            					}
            				}
            			}
HXDLIN( 590)			::Array< ::String > _g17 = foldersToCheck1;
HXDLIN( 590)			while((_g14 < _g17->length)){
HXLINE( 590)				::String folder9 = _g17->__get(_g14);
HXDLIN( 590)				_g14 = (_g14 + 1);
HXLINE( 591)				{
HXLINE( 591)					int _g18 = 0;
HXDLIN( 591)					::Array< ::String > _g19 = ::sys::FileSystem_obj::readDirectory(folder9);
HXDLIN( 591)					while((_g18 < _g19->length)){
HXLINE( 591)						::String file4 = _g19->__get(_g18);
HXDLIN( 591)						_g18 = (_g18 + 1);
HXLINE( 594)						if (::StringTools_obj::endsWith(file4.toLowerCase(),HX_(".lua",4a,2a,ba,1e))) {
HXLINE( 595)							 ::psychlua::FunkinLua_obj::__alloc( HX_CTX ,(folder9 + file4));
            						}
HXLINE( 599)						if (::StringTools_obj::endsWith(file4.toLowerCase(),HX_(".hx",be,42,23,00))) {
HXLINE( 600)							this->initHScript((folder9 + file4));
            						}
            					}
            				}
            			}
            		}
HXLINE( 605)		if ((this->eventNotes->length > 0)) {
HXLINE( 607)			{
HXLINE( 607)				int _g20 = 0;
HXDLIN( 607)				::Array< ::Dynamic> _g21 = this->eventNotes;
HXDLIN( 607)				while((_g20 < _g21->length)){
HXLINE( 607)					 ::Dynamic event2 = _g21->__get(_g20);
HXDLIN( 607)					_g20 = (_g20 + 1);
HXDLIN( 607)					 ::Dynamic event3 = event2;
HXDLIN( 607)					Float event4 = ( (Float)(event3->__Field(HX_("strumTime",f6,2d,21,f4),::hx::paccDynamic)) );
HXDLIN( 607)					event3->__SetField(HX_("strumTime",f6,2d,21,f4),(event4 - this->eventEarlyTrigger(event2)),::hx::paccDynamic);
            				}
            			}
HXLINE( 608)			this->eventNotes->sort(::states::PlayState_obj::sortByTime_dyn());
            		}
HXLINE( 611)		this->startCallback();
HXLINE( 612)		this->RecalculateRating(false,false);
HXLINE( 614)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyPress_dyn(),null(),null(),null());
HXLINE( 615)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->onKeyRelease_dyn(),null(),null(),null());
HXLINE( 618)		if ((::backend::ClientPrefs_obj::data->hitsoundVolume > 0)) {
HXLINE( 618)			::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("hitsound",9c,79,fe,2c)),null(),true,null());
            		}
HXLINE( 619)		if (!(::backend::ClientPrefs_obj::data->ghostTapping)) {
HXLINE( 619)			::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + (HX_("missnote",ee,98,f1,e3) + 1)),null(),true,null());
HXDLIN( 619)			::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + (HX_("missnote",ee,98,f1,e3) + 2)),null(),true,null());
HXDLIN( 619)			::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + (HX_("missnote",ee,98,f1,e3) + 3)),null(),true,null());
            		}
HXLINE( 620)		::backend::Paths_obj::image(HX_("alphabet",b3,7c,38,21),null(),null());
HXLINE( 622)		if (::hx::IsNotNull( ::substates::PauseSubState_obj::songName )) {
HXLINE( 623)			::backend::Paths_obj::returnSound((HX_("music/",ea,bf,1b,3f) + ::substates::PauseSubState_obj::songName),null(),true,null());
            		}
            		else {
HXLINE( 624)			::String path2 = ::backend::ClientPrefs_obj::data->pauseMusic;
HXDLIN( 624)			 ::EReg invalidChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 624)			 ::EReg hideChars4 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 624)			if ((::StringTools_obj::trim(hideChars4->replace(invalidChars2->replace(path2,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase() != HX_("none",b8,12,0a,49))) {
HXLINE( 625)				::String path3 = ::backend::ClientPrefs_obj::data->pauseMusic;
HXDLIN( 625)				 ::EReg invalidChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 625)				 ::EReg hideChars5 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 625)				::backend::Paths_obj::returnSound((HX_("music/",ea,bf,1b,3f) + ::StringTools_obj::trim(hideChars5->replace(invalidChars3->replace(path3,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase()),null(),true,null());
            			}
            		}
HXLINE( 627)		this->resetRPC(null());
HXLINE( 629)		this->stagesFunc( ::Dynamic(new _hx_Closure_2()));
HXLINE( 630)		this->callOnScripts(HX_("onCreatePost",7b,e7,2d,35),null(),null(),null(),null());
HXLINE( 632)		 ::objects::NoteSplash splash =  ::objects::NoteSplash_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 633)		this->grpNoteSplashes->add(splash).StaticCast<  ::objects::NoteSplash >();
HXLINE( 634)		splash->set_alpha(((Float)0.000001));
HXLINE( 636)		this->super::create();
HXLINE( 637)		::backend::Paths_obj::clearUnusedMemory();
HXLINE( 639)		this->cacheCountdown();
HXLINE( 640)		this->cachePopUpScore();
HXLINE( 642)		if ((this->eventNotes->length < 1)) {
HXLINE( 642)			this->checkEventNote();
            		}
            	}


Float PlayState_obj::set_songSpeed(Float value){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_646_set_songSpeed)
HXLINE( 647)		if (this->generatedMusic) {
HXLINE( 649)			Float ratio = (value / this->songSpeed);
HXLINE( 650)			if ((ratio != 1)) {
HXLINE( 652)				{
HXLINE( 652)					int _g = 0;
HXDLIN( 652)					::Array< ::Dynamic> _g1 = this->notes->members;
HXDLIN( 652)					while((_g < _g1->length)){
HXLINE( 652)						 ::objects::Note note = _g1->__get(_g).StaticCast<  ::objects::Note >();
HXDLIN( 652)						_g = (_g + 1);
HXDLIN( 652)						note->resizeByRatio(ratio);
            					}
            				}
HXLINE( 653)				{
HXLINE( 653)					int _g2 = 0;
HXDLIN( 653)					::Array< ::Dynamic> _g3 = this->unspawnNotes;
HXDLIN( 653)					while((_g2 < _g3->length)){
HXLINE( 653)						 ::objects::Note note1 = _g3->__get(_g2).StaticCast<  ::objects::Note >();
HXDLIN( 653)						_g2 = (_g2 + 1);
HXDLIN( 653)						note1->resizeByRatio(ratio);
            					}
            				}
            			}
            		}
HXLINE( 656)		this->songSpeed = value;
HXLINE( 657)		this->noteKillOffset = ::Math_obj::max(::backend::Conductor_obj::stepCrochet,((( (Float)(350) ) / this->songSpeed) * this->playbackRate));
HXLINE( 658)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,set_songSpeed,return )

Float PlayState_obj::set_playbackRate(Float value){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_662_set_playbackRate)
HXLINE( 664)		if (this->generatedMusic) {
HXLINE( 666)			this->vocals->set_pitch(value);
HXLINE( 667)			this->opponentVocals->set_pitch(value);
HXLINE( 668)			::flixel::FlxG_obj::sound->music->set_pitch(value);
HXLINE( 670)			Float ratio = (this->playbackRate / value);
HXLINE( 671)			if ((ratio != 1)) {
HXLINE( 673)				{
HXLINE( 673)					int _g = 0;
HXDLIN( 673)					::Array< ::Dynamic> _g1 = this->notes->members;
HXDLIN( 673)					while((_g < _g1->length)){
HXLINE( 673)						 ::objects::Note note = _g1->__get(_g).StaticCast<  ::objects::Note >();
HXDLIN( 673)						_g = (_g + 1);
HXDLIN( 673)						note->resizeByRatio(ratio);
            					}
            				}
HXLINE( 674)				{
HXLINE( 674)					int _g2 = 0;
HXDLIN( 674)					::Array< ::Dynamic> _g3 = this->unspawnNotes;
HXDLIN( 674)					while((_g2 < _g3->length)){
HXLINE( 674)						 ::objects::Note note1 = _g3->__get(_g2).StaticCast<  ::objects::Note >();
HXDLIN( 674)						_g2 = (_g2 + 1);
HXDLIN( 674)						note1->resizeByRatio(ratio);
            					}
            				}
            			}
            		}
HXLINE( 677)		this->playbackRate = value;
HXLINE( 678)		::flixel::FlxG_obj::animationTimeScale = value;
HXLINE( 679)		Float _hx_tmp;
HXDLIN( 679)		if (::Reflect_obj::hasField(::states::PlayState_obj::SONG,HX_("offset",93,97,3f,60))) {
HXLINE( 679)			_hx_tmp = (( (Float)(::states::PlayState_obj::SONG->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic)) ) / value);
            		}
            		else {
HXLINE( 679)			_hx_tmp = ( (Float)(0) );
            		}
HXDLIN( 679)		::backend::Conductor_obj::offset = _hx_tmp;
HXLINE( 680)		::backend::Conductor_obj::safeZoneOffset = (((::backend::ClientPrefs_obj::data->safeFrames / ( (Float)(60) )) * ( (Float)(1000) )) * value);
HXLINE( 684)		this->setOnScripts(HX_("playbackRate",9b,3a,8b,c0),this->playbackRate,null());
HXLINE( 688)		return this->playbackRate;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,set_playbackRate,return )

void PlayState_obj::addTextToDebug(::String text,int color){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::psychlua::DebugLuaText,newText) HXARGC(1)
            		void _hx_run( ::psychlua::DebugLuaText spr){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_701_addTextToDebug)
HXLINE( 701)			Float spr1 = spr->y;
HXDLIN( 701)			spr->set_y((spr1 + (newText->get_height() + 2)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_692_addTextToDebug)
HXLINE( 693)		 ::psychlua::DebugLuaText newText = this->luaDebugGroup->recycle(::hx::ClassOf< ::psychlua::DebugLuaText >(),null(),null(),null()).StaticCast<  ::psychlua::DebugLuaText >();
HXLINE( 694)		newText->set_text(text);
HXLINE( 695)		newText->set_color(color);
HXLINE( 696)		newText->disableTime = ( (Float)(6) );
HXLINE( 697)		newText->set_alpha(( (Float)(1) ));
HXLINE( 698)		 ::psychlua::DebugLuaText newText1 = newText;
HXDLIN( 698)		newText1->setPosition(10,(( (Float)(8) ) - newText->get_height()));
HXLINE( 700)		this->luaDebugGroup->forEachAlive( ::Dynamic(new _hx_Closure_0(newText)),null());
HXLINE( 703)		this->luaDebugGroup->add(newText).StaticCast<  ::psychlua::DebugLuaText >();
HXLINE( 705)		::Sys_obj::println(text);
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,addTextToDebug,(void))

void PlayState_obj::reloadHealthBarColors(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_710_reloadHealthBarColors)
HXDLIN( 710)		 ::objects::Bar _hx_tmp = this->healthBar;
HXDLIN( 710)		int Red = this->dad->healthColorArray->__get(0);
HXDLIN( 710)		int Green = this->dad->healthColorArray->__get(1);
HXDLIN( 710)		int Blue = this->dad->healthColorArray->__get(2);
HXDLIN( 710)		int Alpha = 255;
HXDLIN( 710)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 710)		{
HXDLIN( 710)			color = (color & -16711681);
HXDLIN( 710)			int color1;
HXDLIN( 710)			if ((Red > 255)) {
HXDLIN( 710)				color1 = 255;
            			}
            			else {
HXDLIN( 710)				if ((Red < 0)) {
HXDLIN( 710)					color1 = 0;
            				}
            				else {
HXDLIN( 710)					color1 = Red;
            				}
            			}
HXDLIN( 710)			color = (color | (color1 << 16));
            		}
HXDLIN( 710)		{
HXDLIN( 710)			color = (color & -65281);
HXDLIN( 710)			int color2;
HXDLIN( 710)			if ((Green > 255)) {
HXDLIN( 710)				color2 = 255;
            			}
            			else {
HXDLIN( 710)				if ((Green < 0)) {
HXDLIN( 710)					color2 = 0;
            				}
            				else {
HXDLIN( 710)					color2 = Green;
            				}
            			}
HXDLIN( 710)			color = (color | (color2 << 8));
            		}
HXDLIN( 710)		{
HXDLIN( 710)			color = (color & -256);
HXDLIN( 710)			int color3;
HXDLIN( 710)			if ((Blue > 255)) {
HXDLIN( 710)				color3 = 255;
            			}
            			else {
HXDLIN( 710)				if ((Blue < 0)) {
HXDLIN( 710)					color3 = 0;
            				}
            				else {
HXDLIN( 710)					color3 = Blue;
            				}
            			}
HXDLIN( 710)			color = (color | color3);
            		}
HXDLIN( 710)		{
HXDLIN( 710)			color = (color & 16777215);
HXDLIN( 710)			int color4;
HXDLIN( 710)			if ((Alpha > 255)) {
HXDLIN( 710)				color4 = 255;
            			}
            			else {
HXDLIN( 710)				if ((Alpha < 0)) {
HXDLIN( 710)					color4 = 0;
            				}
            				else {
HXDLIN( 710)					color4 = Alpha;
            				}
            			}
HXDLIN( 710)			color = (color | (color4 << 24));
            		}
HXLINE( 711)		int Red1 = this->boyfriend->healthColorArray->__get(0);
HXDLIN( 711)		int Green1 = this->boyfriend->healthColorArray->__get(1);
HXDLIN( 711)		int Blue1 = this->boyfriend->healthColorArray->__get(2);
HXDLIN( 711)		int Alpha1 = 255;
HXDLIN( 711)		int color5 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 711)		{
HXLINE( 711)			color5 = (color5 & -16711681);
HXDLIN( 711)			int color6;
HXDLIN( 711)			if ((Red1 > 255)) {
HXLINE( 711)				color6 = 255;
            			}
            			else {
HXLINE( 711)				if ((Red1 < 0)) {
HXLINE( 711)					color6 = 0;
            				}
            				else {
HXLINE( 711)					color6 = Red1;
            				}
            			}
HXDLIN( 711)			color5 = (color5 | (color6 << 16));
            		}
HXDLIN( 711)		{
HXLINE( 711)			color5 = (color5 & -65281);
HXDLIN( 711)			int color7;
HXDLIN( 711)			if ((Green1 > 255)) {
HXLINE( 711)				color7 = 255;
            			}
            			else {
HXLINE( 711)				if ((Green1 < 0)) {
HXLINE( 711)					color7 = 0;
            				}
            				else {
HXLINE( 711)					color7 = Green1;
            				}
            			}
HXDLIN( 711)			color5 = (color5 | (color7 << 8));
            		}
HXDLIN( 711)		{
HXLINE( 711)			color5 = (color5 & -256);
HXDLIN( 711)			int color8;
HXDLIN( 711)			if ((Blue1 > 255)) {
HXLINE( 711)				color8 = 255;
            			}
            			else {
HXLINE( 711)				if ((Blue1 < 0)) {
HXLINE( 711)					color8 = 0;
            				}
            				else {
HXLINE( 711)					color8 = Blue1;
            				}
            			}
HXDLIN( 711)			color5 = (color5 | color8);
            		}
HXDLIN( 711)		{
HXLINE( 711)			color5 = (color5 & 16777215);
HXDLIN( 711)			int color9;
HXDLIN( 711)			if ((Alpha1 > 255)) {
HXLINE( 711)				color9 = 255;
            			}
            			else {
HXLINE( 711)				if ((Alpha1 < 0)) {
HXLINE( 711)					color9 = 0;
            				}
            				else {
HXLINE( 711)					color9 = Alpha1;
            				}
            			}
HXDLIN( 711)			color5 = (color5 | (color9 << 24));
            		}
HXLINE( 710)		_hx_tmp->setColors(color,color5);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,reloadHealthBarColors,(void))

void PlayState_obj::addCharacterToList(::String newCharacter,int type){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_715_addCharacterToList)
HXDLIN( 715)		switch((int)(type)){
            			case (int)0: {
HXLINE( 717)				if (!(this->boyfriendMap->exists(newCharacter))) {
HXLINE( 718)					 ::objects::Character newBoyfriend =  ::objects::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),newCharacter,true);
HXLINE( 719)					this->boyfriendMap->set(newCharacter,newBoyfriend);
HXLINE( 720)					this->boyfriendGroup->add(newBoyfriend).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 721)					this->startCharacterPos(newBoyfriend,null());
HXLINE( 722)					newBoyfriend->set_alpha(((Float)0.00001));
HXLINE( 723)					this->startCharacterScripts(newBoyfriend->curCharacter);
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 727)				if (!(this->dadMap->exists(newCharacter))) {
HXLINE( 728)					 ::objects::Character newDad =  ::objects::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),newCharacter,null());
HXLINE( 729)					this->dadMap->set(newCharacter,newDad);
HXLINE( 730)					this->dadGroup->add(newDad).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 731)					this->startCharacterPos(newDad,true);
HXLINE( 732)					newDad->set_alpha(((Float)0.00001));
HXLINE( 733)					this->startCharacterScripts(newDad->curCharacter);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 737)				bool _hx_tmp;
HXDLIN( 737)				if (::hx::IsNotNull( this->gf )) {
HXLINE( 737)					_hx_tmp = !(this->gfMap->exists(newCharacter));
            				}
            				else {
HXLINE( 737)					_hx_tmp = false;
            				}
HXDLIN( 737)				if (_hx_tmp) {
HXLINE( 738)					 ::objects::Character newGf =  ::objects::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),newCharacter,null());
HXLINE( 739)					{
HXLINE( 739)						 ::flixel::math::FlxBasePoint this1 = newGf->scrollFactor;
HXDLIN( 739)						this1->set_x(((Float)0.95));
HXDLIN( 739)						this1->set_y(((Float)0.95));
            					}
HXLINE( 740)					this->gfMap->set(newCharacter,newGf);
HXLINE( 741)					this->gfGroup->add(newGf).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 742)					this->startCharacterPos(newGf,null());
HXLINE( 743)					newGf->set_alpha(((Float)0.00001));
HXLINE( 744)					this->startCharacterScripts(newGf->curCharacter);
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,addCharacterToList,(void))

void PlayState_obj::startCharacterScripts(::String name){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_750_startCharacterScripts)
HXLINE( 753)		bool doPush = false;
HXLINE( 754)		::String luaFile = ((HX_("characters/",45,3c,bf,be) + name) + HX_(".lua",4a,2a,ba,1e));
HXLINE( 756)		::String replacePath = ::backend::Paths_obj::modFolders(luaFile);
HXLINE( 757)		if (::sys::FileSystem_obj::exists(replacePath)) {
HXLINE( 759)			luaFile = replacePath;
HXLINE( 760)			doPush = true;
            		}
            		else {
HXLINE( 764)			::String file = luaFile;
HXDLIN( 764)			if (::hx::IsNull( file )) {
HXLINE( 764)				file = HX_("",00,00,00,00);
            			}
HXDLIN( 764)			luaFile = (HX_("assets/shared/",1e,69,1e,47) + file);
HXLINE( 765)			if (::sys::FileSystem_obj::exists(luaFile)) {
HXLINE( 766)				doPush = true;
            			}
            		}
HXLINE( 773)		if (doPush) {
HXLINE( 775)			{
HXLINE( 775)				int _g = 0;
HXDLIN( 775)				::Array< ::Dynamic> _g1 = this->luaArray;
HXDLIN( 775)				while((_g < _g1->length)){
HXLINE( 775)					 ::psychlua::FunkinLua script = _g1->__get(_g).StaticCast<  ::psychlua::FunkinLua >();
HXDLIN( 775)					_g = (_g + 1);
HXLINE( 777)					if ((script->scriptName == luaFile)) {
HXLINE( 779)						doPush = false;
HXLINE( 780)						goto _hx_goto_35;
            					}
            				}
            				_hx_goto_35:;
            			}
HXLINE( 783)			if (doPush) {
HXLINE( 783)				 ::psychlua::FunkinLua_obj::__alloc( HX_CTX ,luaFile);
            			}
            		}
HXLINE( 789)		bool doPush1 = false;
HXLINE( 790)		::String scriptFile = ((HX_("characters/",45,3c,bf,be) + name) + HX_(".hx",be,42,23,00));
HXLINE( 792)		::String replacePath1 = ::backend::Paths_obj::modFolders(scriptFile);
HXLINE( 793)		if (::sys::FileSystem_obj::exists(replacePath1)) {
HXLINE( 795)			scriptFile = replacePath1;
HXLINE( 796)			doPush1 = true;
            		}
            		else {
HXLINE( 801)			::String file1 = scriptFile;
HXDLIN( 801)			if (::hx::IsNull( file1 )) {
HXLINE( 801)				file1 = HX_("",00,00,00,00);
            			}
HXDLIN( 801)			scriptFile = (HX_("assets/shared/",1e,69,1e,47) + file1);
HXLINE( 802)			if (::sys::FileSystem_obj::exists(scriptFile)) {
HXLINE( 803)				doPush1 = true;
            			}
            		}
HXLINE( 806)		if (doPush1) {
HXLINE( 808)			if (::crowplexus::iris::Iris_obj::instances->exists(scriptFile)) {
HXLINE( 809)				doPush1 = false;
            			}
HXLINE( 811)			if (doPush1) {
HXLINE( 811)				this->initHScript(scriptFile);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,startCharacterScripts,(void))

 ::Dynamic PlayState_obj::getLuaObject(::String tag){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_817_getLuaObject)
HXDLIN( 817)		return this->variables->get(tag);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,getLuaObject,return )

void PlayState_obj::startCharacterPos( ::objects::Character _hx_char, ::Dynamic __o_gfCheck){
            		 ::Dynamic gfCheck = __o_gfCheck;
            		if (::hx::IsNull(__o_gfCheck)) gfCheck = false;
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_819_startCharacterPos)
HXLINE( 820)		bool _hx_tmp;
HXDLIN( 820)		if (( (bool)(gfCheck) )) {
HXLINE( 820)			_hx_tmp = ::StringTools_obj::startsWith(_hx_char->curCharacter,HX_("gf",1f,5a,00,00));
            		}
            		else {
HXLINE( 820)			_hx_tmp = false;
            		}
HXDLIN( 820)		if (_hx_tmp) {
HXLINE( 821)			_hx_char->setPosition(this->GF_X,this->GF_Y);
HXLINE( 822)			{
HXLINE( 822)				 ::flixel::math::FlxBasePoint this1 = _hx_char->scrollFactor;
HXDLIN( 822)				this1->set_x(((Float)0.95));
HXDLIN( 822)				this1->set_y(((Float)0.95));
            			}
HXLINE( 823)			_hx_char->danceEveryNumBeats = 2;
            		}
HXLINE( 825)		_hx_char->set_x((_hx_char->x + _hx_char->positionArray->__get(0)));
HXLINE( 826)		_hx_char->set_y((_hx_char->y + _hx_char->positionArray->__get(1)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,startCharacterPos,(void))

 ::Dynamic PlayState_obj::startVideo(::String name,::hx::Null< bool >  __o_forMidSong,::hx::Null< bool >  __o_canSkip,::hx::Null< bool >  __o_loop,::hx::Null< bool >  __o_playOnLoad){
            		bool forMidSong = __o_forMidSong.Default(false);
            		bool canSkip = __o_canSkip.Default(true);
            		bool loop = __o_loop.Default(false);
            		bool playOnLoad = __o_playOnLoad.Default(true);
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_831_startVideo)
HXLINE( 882)		::flixel::FlxG_obj::log->advanced(HX_("Platform not supported!",cd,22,85,f3),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 883)		this->startAndEnd();
HXLINE( 885)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC5(PlayState_obj,startVideo,return )

void PlayState_obj::startAndEnd(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_890_startAndEnd)
HXDLIN( 890)		if (this->endingSong) {
HXLINE( 891)			this->endSong();
            		}
            		else {
HXLINE( 893)			this->startCountdown();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startAndEnd,(void))

void PlayState_obj::startDialogue( ::Dynamic dialogueFile,::String song){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_900_startDialogue)
HXDLIN( 900)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 902)		if (::hx::IsNotNull( this->psychDialogue )) {
HXLINE( 902)			return;
            		}
HXLINE( 904)		if ((( (::Array< ::Dynamic>)(dialogueFile->__Field(HX_("dialogue",18,2d,94,a7),::hx::paccDynamic)) )->length > 0)) {
HXLINE( 905)			this->inCutscene = true;
HXLINE( 906)			this->psychDialogue =  ::cutscenes::DialogueBoxPsych_obj::__alloc( HX_CTX ,dialogueFile,song);
HXLINE( 907)			{
HXLINE( 907)				 ::flixel::math::FlxBasePoint this1 = this->psychDialogue->scrollFactor;
HXDLIN( 907)				this1->set_x(( (Float)(0) ));
HXDLIN( 907)				this1->set_y(( (Float)(0) ));
            			}
HXLINE( 908)			if (this->endingSong) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_909_startDialogue)
HXLINE( 910)					_gthis->psychDialogue = null();
HXLINE( 911)					_gthis->endSong();
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 909)				this->psychDialogue->finishThing =  ::Dynamic(new _hx_Closure_0(_gthis));
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::PlayState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_914_startDialogue)
HXLINE( 915)					_gthis->psychDialogue = null();
HXLINE( 916)					_gthis->startCountdown();
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 914)				this->psychDialogue->finishThing =  ::Dynamic(new _hx_Closure_1(_gthis));
            			}
HXLINE( 919)			this->psychDialogue->nextDialogueThing = this->startNextDialogue_dyn();
HXLINE( 920)			this->psychDialogue->skipDialogueThing = this->skipDialogue_dyn();
HXLINE( 921)			this->psychDialogue->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 922)			this->add(this->psychDialogue);
            		}
            		else {
HXLINE( 924)			::flixel::FlxG_obj::log->advanced(HX_("Your dialogue file is badly formatted!",40,79,c5,b3),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 925)			this->startAndEnd();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,startDialogue,(void))

void PlayState_obj::cacheCountdown(){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_939_cacheCountdown)
HXLINE( 940)		 ::haxe::ds::StringMap introAssets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 941)		::Array< ::String > introImagesArray;
HXDLIN( 941)		::String _hx_switch_0 = ::states::PlayState_obj::stageUI;
            		if (  (_hx_switch_0==HX_("normal",27,72,69,30)) ){
HXLINE( 941)			introImagesArray = ::Array_obj< ::String >::fromData( _hx_array_data_0420cd31_47,3);
HXDLIN( 941)			goto _hx_goto_44;
            		}
            		if (  (_hx_switch_0==HX_("pixel",86,c6,a3,c2)) ){
HXLINE( 941)			introImagesArray = ::Array_obj< ::String >::fromData( _hx_array_data_0420cd31_48,3);
HXDLIN( 941)			goto _hx_goto_44;
            		}
            		/* default */{
HXLINE( 941)			introImagesArray = ::Array_obj< ::String >::__new(3)->init(0,(((HX_("",00,00,00,00) + ::states::PlayState_obj::uiPrefix) + HX_("UI/ready",28,57,df,8a)) + ::states::PlayState_obj::uiPostfix))->init(1,(((HX_("",00,00,00,00) + ::states::PlayState_obj::uiPrefix) + HX_("UI/set",27,a7,fe,23)) + ::states::PlayState_obj::uiPostfix))->init(2,(((HX_("",00,00,00,00) + ::states::PlayState_obj::uiPrefix) + HX_("UI/go",43,e6,73,21)) + ::states::PlayState_obj::uiPostfix));
            		}
            		_hx_goto_44:;
HXLINE( 946)		introAssets->set(::states::PlayState_obj::stageUI,introImagesArray);
HXLINE( 947)		::Array< ::String > introAlts = ( (::Array< ::String >)(introAssets->get(::states::PlayState_obj::stageUI)) );
HXLINE( 948)		{
HXLINE( 948)			int _g = 0;
HXDLIN( 948)			while((_g < introAlts->length)){
HXLINE( 948)				::String asset = introAlts->__get(_g);
HXDLIN( 948)				_g = (_g + 1);
HXDLIN( 948)				::backend::Paths_obj::image(asset,null(),null());
            			}
            		}
HXLINE( 950)		::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + (HX_("intro3",47,54,90,9e) + this->introSoundsSuffix)),null(),true,null());
HXLINE( 951)		::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + (HX_("intro2",46,54,90,9e) + this->introSoundsSuffix)),null(),true,null());
HXLINE( 952)		::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + (HX_("intro1",45,54,90,9e) + this->introSoundsSuffix)),null(),true,null());
HXLINE( 953)		::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + (HX_("introGo",b4,7b,b9,1f) + this->introSoundsSuffix)),null(),true,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,cacheCountdown,(void))

bool PlayState_obj::startCountdown(){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_957_startCountdown)
HXDLIN( 957)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 958)		if (this->startedCountdown) {
HXLINE( 959)			this->callOnScripts(HX_("onStartCountdown",6e,2d,46,95),null(),null(),null(),null());
HXLINE( 960)			return false;
            		}
HXLINE( 963)		::states::PlayState_obj::seenCutscene = true;
HXLINE( 964)		this->inCutscene = false;
HXLINE( 965)		 ::Dynamic ret = this->callOnScripts(HX_("onStartCountdown",6e,2d,46,95),null(),true,null(),null());
HXLINE( 966)		if (::hx::IsNotEq( ret,::psychlua::LuaUtils_obj::Function_Stop )) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_5, ::states::PlayState,_gthis,::Array< int >,swagCounter) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_4,::Array< ::Dynamic>,tick,::Array< int >,swagCounter) HXARGC(1)
            				void _hx_run( ::backend::BaseStage stage){
            					HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1050_startCountdown)
HXLINE(1050)					stage->countdownTick(tick->__get(0).StaticCast<  ::backend::Countdown >(),swagCounter->__get(0));
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1001_startCountdown)
HXLINE(1002)				_gthis->characterBopper((tmr->loops - tmr->_loopsCounter));
HXLINE(1004)				 ::haxe::ds::StringMap introAssets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1005)				::Array< ::String > introImagesArray;
HXDLIN(1005)				::String _hx_switch_0 = ::states::PlayState_obj::stageUI;
            				if (  (_hx_switch_0==HX_("normal",27,72,69,30)) ){
HXLINE(1005)					introImagesArray = ::Array_obj< ::String >::fromData( _hx_array_data_0420cd31_55,3);
HXDLIN(1005)					goto _hx_goto_51;
            				}
            				if (  (_hx_switch_0==HX_("pixel",86,c6,a3,c2)) ){
HXLINE(1005)					introImagesArray = ::Array_obj< ::String >::fromData( _hx_array_data_0420cd31_56,3);
HXDLIN(1005)					goto _hx_goto_51;
            				}
            				/* default */{
HXLINE(1005)					introImagesArray = ::Array_obj< ::String >::__new(3)->init(0,(((HX_("",00,00,00,00) + ::states::PlayState_obj::uiPrefix) + HX_("UI/ready",28,57,df,8a)) + ::states::PlayState_obj::uiPostfix))->init(1,(((HX_("",00,00,00,00) + ::states::PlayState_obj::uiPrefix) + HX_("UI/set",27,a7,fe,23)) + ::states::PlayState_obj::uiPostfix))->init(2,(((HX_("",00,00,00,00) + ::states::PlayState_obj::uiPrefix) + HX_("UI/go",43,e6,73,21)) + ::states::PlayState_obj::uiPostfix));
            				}
            				_hx_goto_51:;
HXLINE(1010)				introAssets->set(::states::PlayState_obj::stageUI,introImagesArray);
HXLINE(1012)				::Array< ::String > introAlts = ( (::Array< ::String >)(introAssets->get(::states::PlayState_obj::stageUI)) );
HXLINE(1013)				bool antialias;
HXDLIN(1013)				if (::backend::ClientPrefs_obj::data->antialiasing) {
HXLINE(1013)					antialias = !(::states::PlayState_obj::get_isPixelStage());
            				}
            				else {
HXLINE(1013)					antialias = false;
            				}
HXLINE(1014)				::Array< ::Dynamic> tick = ::Array_obj< ::Dynamic>::__new(1)->init(0,::backend::Countdown_obj::THREE_dyn());
HXLINE(1016)				switch((int)(swagCounter->__get(0))){
            					case (int)0: {
HXLINE(1019)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1019)						_hx_tmp->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + (HX_("intro3",47,54,90,9e) + _gthis->introSoundsSuffix)),null(),true,null()),((Float)0.6),null(),null(),null(),null());
HXLINE(1020)						tick[0] = ::backend::Countdown_obj::THREE_dyn();
            					}
            					break;
            					case (int)1: {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,spr1, ::states::PlayState,_gthis1) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1022_startCountdown)
HXLINE(1022)							_gthis1->remove(spr1,null()).StaticCast<  ::flixel::FlxBasic >();
HXDLIN(1022)							spr1->destroy();
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(1022)						 ::states::PlayState _gthis1 = _gthis;
HXDLIN(1022)						 ::flixel::FlxSprite spr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1022)						 ::flixel::FlxSprite spr1 = spr->loadGraphic(::backend::Paths_obj::image(introAlts->__get(0),null(),null()),null(),null(),null(),null(),null());
HXDLIN(1022)						spr1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->camHUD));
HXDLIN(1022)						{
HXLINE(1022)							 ::flixel::math::FlxBasePoint this1 = spr1->scrollFactor;
HXDLIN(1022)							this1->set_x(( (Float)(0) ));
HXDLIN(1022)							this1->set_y(( (Float)(0) ));
            						}
HXDLIN(1022)						spr1->updateHitbox();
HXDLIN(1022)						if (::states::PlayState_obj::get_isPixelStage()) {
HXLINE(1022)							 ::flixel::FlxSprite spr2 = spr1;
HXDLIN(1022)							Float _hx_tmp1 = spr1->get_width();
HXDLIN(1022)							spr2->setGraphicSize(::Std_obj::_hx_int((_hx_tmp1 * ::states::PlayState_obj::daPixelZoom)),null());
            						}
HXDLIN(1022)						{
HXLINE(1022)							int axes = 17;
HXDLIN(1022)							bool _hx_tmp2;
HXDLIN(1022)							if ((axes != 1)) {
HXLINE(1022)								_hx_tmp2 = (axes == 17);
            							}
            							else {
HXLINE(1022)								_hx_tmp2 = true;
            							}
HXDLIN(1022)							if (_hx_tmp2) {
HXLINE(1022)								 ::flixel::FlxSprite spr3 = spr1;
HXDLIN(1022)								int _hx_tmp3 = ::flixel::FlxG_obj::width;
HXDLIN(1022)								spr3->set_x(((( (Float)(_hx_tmp3) ) - spr1->get_width()) / ( (Float)(2) )));
            							}
HXDLIN(1022)							bool _hx_tmp4;
HXDLIN(1022)							if ((axes != 16)) {
HXLINE(1022)								_hx_tmp4 = (axes == 17);
            							}
            							else {
HXLINE(1022)								_hx_tmp4 = true;
            							}
HXDLIN(1022)							if (_hx_tmp4) {
HXLINE(1022)								 ::flixel::FlxSprite spr4 = spr1;
HXDLIN(1022)								int _hx_tmp5 = ::flixel::FlxG_obj::height;
HXDLIN(1022)								spr4->set_y(((( (Float)(_hx_tmp5) ) - spr1->get_height()) / ( (Float)(2) )));
            							}
            						}
HXDLIN(1022)						spr1->set_antialiasing(antialias);
HXDLIN(1022)						 ::states::PlayState _gthis2 = _gthis;
HXDLIN(1022)						int _hx_tmp6 = _gthis->members->indexOf(_gthis->noteGroup,null());
HXDLIN(1022)						_gthis2->insert(_hx_tmp6,spr1).StaticCast<  ::flixel::FlxBasic >();
HXDLIN(1022)						::flixel::tweens::FlxTween_obj::tween(spr1, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(::backend::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            							->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(spr1,_gthis1)))));
HXDLIN(1022)						_gthis->countdownReady = spr1;
HXLINE(1023)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp7 = ::flixel::FlxG_obj::sound;
HXDLIN(1023)						_hx_tmp7->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + (HX_("intro2",46,54,90,9e) + _gthis->introSoundsSuffix)),null(),true,null()),((Float)0.6),null(),null(),null(),null());
HXLINE(1024)						tick[0] = ::backend::Countdown_obj::TWO_dyn();
            					}
            					break;
            					case (int)2: {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,spr6, ::states::PlayState,_gthis3) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1026_startCountdown)
HXLINE(1026)							_gthis3->remove(spr6,null()).StaticCast<  ::flixel::FlxBasic >();
HXDLIN(1026)							spr6->destroy();
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(1026)						 ::states::PlayState _gthis3 = _gthis;
HXDLIN(1026)						 ::flixel::FlxSprite spr5 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1026)						 ::flixel::FlxSprite spr6 = spr5->loadGraphic(::backend::Paths_obj::image(introAlts->__get(1),null(),null()),null(),null(),null(),null(),null());
HXDLIN(1026)						spr6->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->camHUD));
HXDLIN(1026)						{
HXLINE(1026)							 ::flixel::math::FlxBasePoint this2 = spr6->scrollFactor;
HXDLIN(1026)							this2->set_x(( (Float)(0) ));
HXDLIN(1026)							this2->set_y(( (Float)(0) ));
            						}
HXDLIN(1026)						spr6->updateHitbox();
HXDLIN(1026)						if (::states::PlayState_obj::get_isPixelStage()) {
HXLINE(1026)							 ::flixel::FlxSprite spr7 = spr6;
HXDLIN(1026)							Float _hx_tmp8 = spr6->get_width();
HXDLIN(1026)							spr7->setGraphicSize(::Std_obj::_hx_int((_hx_tmp8 * ::states::PlayState_obj::daPixelZoom)),null());
            						}
HXDLIN(1026)						{
HXLINE(1026)							int axes1 = 17;
HXDLIN(1026)							bool _hx_tmp9;
HXDLIN(1026)							if ((axes1 != 1)) {
HXLINE(1026)								_hx_tmp9 = (axes1 == 17);
            							}
            							else {
HXLINE(1026)								_hx_tmp9 = true;
            							}
HXDLIN(1026)							if (_hx_tmp9) {
HXLINE(1026)								 ::flixel::FlxSprite spr8 = spr6;
HXDLIN(1026)								int _hx_tmp10 = ::flixel::FlxG_obj::width;
HXDLIN(1026)								spr8->set_x(((( (Float)(_hx_tmp10) ) - spr6->get_width()) / ( (Float)(2) )));
            							}
HXDLIN(1026)							bool _hx_tmp11;
HXDLIN(1026)							if ((axes1 != 16)) {
HXLINE(1026)								_hx_tmp11 = (axes1 == 17);
            							}
            							else {
HXLINE(1026)								_hx_tmp11 = true;
            							}
HXDLIN(1026)							if (_hx_tmp11) {
HXLINE(1026)								 ::flixel::FlxSprite spr9 = spr6;
HXDLIN(1026)								int _hx_tmp12 = ::flixel::FlxG_obj::height;
HXDLIN(1026)								spr9->set_y(((( (Float)(_hx_tmp12) ) - spr6->get_height()) / ( (Float)(2) )));
            							}
            						}
HXDLIN(1026)						spr6->set_antialiasing(antialias);
HXDLIN(1026)						 ::states::PlayState _gthis4 = _gthis;
HXDLIN(1026)						int _hx_tmp13 = _gthis->members->indexOf(_gthis->noteGroup,null());
HXDLIN(1026)						_gthis4->insert(_hx_tmp13,spr6).StaticCast<  ::flixel::FlxBasic >();
HXDLIN(1026)						::flixel::tweens::FlxTween_obj::tween(spr6, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(::backend::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            							->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(spr6,_gthis3)))));
HXDLIN(1026)						_gthis->countdownSet = spr6;
HXLINE(1027)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp14 = ::flixel::FlxG_obj::sound;
HXDLIN(1027)						_hx_tmp14->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + (HX_("intro1",45,54,90,9e) + _gthis->introSoundsSuffix)),null(),true,null()),((Float)0.6),null(),null(),null(),null());
HXLINE(1028)						tick[0] = ::backend::Countdown_obj::ONE_dyn();
            					}
            					break;
            					case (int)3: {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::states::PlayState,_gthis5, ::flixel::FlxSprite,spr11) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1030_startCountdown)
HXLINE(1030)							_gthis5->remove(spr11,null()).StaticCast<  ::flixel::FlxBasic >();
HXDLIN(1030)							spr11->destroy();
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(1030)						 ::states::PlayState _gthis5 = _gthis;
HXDLIN(1030)						 ::flixel::FlxSprite spr10 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1030)						 ::flixel::FlxSprite spr11 = spr10->loadGraphic(::backend::Paths_obj::image(introAlts->__get(2),null(),null()),null(),null(),null(),null(),null());
HXDLIN(1030)						spr11->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->camHUD));
HXDLIN(1030)						{
HXLINE(1030)							 ::flixel::math::FlxBasePoint this3 = spr11->scrollFactor;
HXDLIN(1030)							this3->set_x(( (Float)(0) ));
HXDLIN(1030)							this3->set_y(( (Float)(0) ));
            						}
HXDLIN(1030)						spr11->updateHitbox();
HXDLIN(1030)						if (::states::PlayState_obj::get_isPixelStage()) {
HXLINE(1030)							 ::flixel::FlxSprite spr12 = spr11;
HXDLIN(1030)							Float _hx_tmp15 = spr11->get_width();
HXDLIN(1030)							spr12->setGraphicSize(::Std_obj::_hx_int((_hx_tmp15 * ::states::PlayState_obj::daPixelZoom)),null());
            						}
HXDLIN(1030)						{
HXLINE(1030)							int axes2 = 17;
HXDLIN(1030)							bool _hx_tmp16;
HXDLIN(1030)							if ((axes2 != 1)) {
HXLINE(1030)								_hx_tmp16 = (axes2 == 17);
            							}
            							else {
HXLINE(1030)								_hx_tmp16 = true;
            							}
HXDLIN(1030)							if (_hx_tmp16) {
HXLINE(1030)								 ::flixel::FlxSprite spr13 = spr11;
HXDLIN(1030)								int _hx_tmp17 = ::flixel::FlxG_obj::width;
HXDLIN(1030)								spr13->set_x(((( (Float)(_hx_tmp17) ) - spr11->get_width()) / ( (Float)(2) )));
            							}
HXDLIN(1030)							bool _hx_tmp18;
HXDLIN(1030)							if ((axes2 != 16)) {
HXLINE(1030)								_hx_tmp18 = (axes2 == 17);
            							}
            							else {
HXLINE(1030)								_hx_tmp18 = true;
            							}
HXDLIN(1030)							if (_hx_tmp18) {
HXLINE(1030)								 ::flixel::FlxSprite spr14 = spr11;
HXDLIN(1030)								int _hx_tmp19 = ::flixel::FlxG_obj::height;
HXDLIN(1030)								spr14->set_y(((( (Float)(_hx_tmp19) ) - spr11->get_height()) / ( (Float)(2) )));
            							}
            						}
HXDLIN(1030)						spr11->set_antialiasing(antialias);
HXDLIN(1030)						 ::states::PlayState _gthis6 = _gthis;
HXDLIN(1030)						int _hx_tmp20 = _gthis->members->indexOf(_gthis->noteGroup,null());
HXDLIN(1030)						_gthis6->insert(_hx_tmp20,spr11).StaticCast<  ::flixel::FlxBasic >();
HXDLIN(1030)						::flixel::tweens::FlxTween_obj::tween(spr11, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(::backend::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            							->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(_gthis5,spr11)))));
HXDLIN(1030)						_gthis->countdownGo = spr11;
HXLINE(1031)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp21 = ::flixel::FlxG_obj::sound;
HXDLIN(1031)						_hx_tmp21->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + (HX_("introGo",b4,7b,b9,1f) + _gthis->introSoundsSuffix)),null(),true,null()),((Float)0.6),null(),null(),null(),null());
HXLINE(1032)						tick[0] = ::backend::Countdown_obj::GO_dyn();
            					}
            					break;
            					case (int)4: {
HXLINE(1034)						tick[0] = ::backend::Countdown_obj::START_dyn();
            					}
            					break;
            				}
HXLINE(1037)				if (!(_gthis->skipArrowStartTween)) {
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(1)
            					void _hx_run( ::objects::Note note){
            						HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1040_startCountdown)
HXLINE(1040)						bool _hx_tmp;
HXDLIN(1040)						if (!(::backend::ClientPrefs_obj::data->opponentStrums)) {
HXLINE(1040)							_hx_tmp = note->mustPress;
            						}
            						else {
HXLINE(1040)							_hx_tmp = true;
            						}
HXDLIN(1040)						if (_hx_tmp) {
HXLINE(1042)							note->copyAlpha = false;
HXLINE(1043)							note->set_alpha(note->multAlpha);
HXLINE(1044)							bool _hx_tmp1;
HXDLIN(1044)							if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE(1044)								_hx_tmp1 = !(note->mustPress);
            							}
            							else {
HXLINE(1044)								_hx_tmp1 = false;
            							}
HXDLIN(1044)							if (_hx_tmp1) {
HXLINE(1045)								note->set_alpha((note->alpha * ((Float)0.35)));
            							}
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1039)					_gthis->notes->forEachAlive( ::Dynamic(new _hx_Closure_3()),null());
            				}
HXLINE(1050)				_gthis->stagesFunc( ::Dynamic(new _hx_Closure_4(tick,swagCounter)));
HXLINE(1051)				_gthis->callOnLuas(HX_("onCountdownTick",0f,54,e4,9f),::cpp::VirtualArray_obj::__new(1)->init(0,swagCounter->__get(0)),null(),null(),null());
HXLINE(1052)				_gthis->callOnHScript(HX_("onCountdownTick",0f,54,e4,9f),::cpp::VirtualArray_obj::__new(2)->init(0,tick->__get(0).StaticCast<  ::backend::Countdown >())->init(1,swagCounter->__get(0)),null(),null(),null());
HXLINE(1054)				::Array< int > swagCounter1 = swagCounter;
HXDLIN(1054)				int _hx_tmp22 = 0;
HXDLIN(1054)				swagCounter1[_hx_tmp22] = (swagCounter1->__get(_hx_tmp22) + 1);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 967)			bool _hx_tmp;
HXDLIN( 967)			if (!(this->skipCountdown)) {
HXLINE( 967)				_hx_tmp = (::states::PlayState_obj::startOnTime > 0);
            			}
            			else {
HXLINE( 967)				_hx_tmp = true;
            			}
HXDLIN( 967)			if (_hx_tmp) {
HXLINE( 967)				this->skipArrowStartTween = true;
            			}
HXLINE( 969)			this->canPause = true;
HXLINE( 970)			this->generateStaticArrows(0);
HXLINE( 971)			this->generateStaticArrows(1);
HXLINE( 972)			{
HXLINE( 972)				int _g = 0;
HXDLIN( 972)				int _g1 = this->playerStrums->length;
HXDLIN( 972)				while((_g < _g1)){
HXLINE( 972)					_g = (_g + 1);
HXDLIN( 972)					int i = (_g - 1);
HXLINE( 973)					this->setOnScripts((HX_("defaultPlayerStrumX",91,a3,83,89) + i),Dynamic( this->playerStrums->members->__get(i)).StaticCast<  ::objects::StrumNote >()->x,null());
HXLINE( 974)					this->setOnScripts((HX_("defaultPlayerStrumY",92,a3,83,89) + i),Dynamic( this->playerStrums->members->__get(i)).StaticCast<  ::objects::StrumNote >()->y,null());
            				}
            			}
HXLINE( 976)			{
HXLINE( 976)				int _g2 = 0;
HXDLIN( 976)				int _g3 = this->opponentStrums->length;
HXDLIN( 976)				while((_g2 < _g3)){
HXLINE( 976)					_g2 = (_g2 + 1);
HXDLIN( 976)					int i1 = (_g2 - 1);
HXLINE( 977)					this->setOnScripts((HX_("defaultOpponentStrumX",0d,e1,d7,f1) + i1),Dynamic( this->opponentStrums->members->__get(i1)).StaticCast<  ::objects::StrumNote >()->x,null());
HXLINE( 978)					this->setOnScripts((HX_("defaultOpponentStrumY",0e,e1,d7,f1) + i1),Dynamic( this->opponentStrums->members->__get(i1)).StaticCast<  ::objects::StrumNote >()->y,null());
            				}
            			}
HXLINE( 982)			this->startedCountdown = true;
HXLINE( 983)			::backend::Conductor_obj::songPosition = ((-(::backend::Conductor_obj::crochet) * ( (Float)(5) )) + ::backend::Conductor_obj::offset);
HXLINE( 984)			this->setOnScripts(HX_("startedCountdown",30,57,28,9b),true,null());
HXLINE( 985)			this->callOnScripts(HX_("onCountdownStarted",cf,93,f5,10),null(),null(),null(),null());
HXLINE( 987)			::Array< int > swagCounter = ::Array_obj< int >::fromData( _hx_array_data_0420cd31_61,1);
HXLINE( 988)			if ((::states::PlayState_obj::startOnTime > 0)) {
HXLINE( 989)				this->clearNotesBefore(::states::PlayState_obj::startOnTime);
HXLINE( 990)				this->setSongTime((::states::PlayState_obj::startOnTime - ( (Float)(350) )));
HXLINE( 991)				return true;
            			}
            			else {
HXLINE( 993)				if (this->skipCountdown) {
HXLINE( 995)					this->setSongTime(( (Float)(0) ));
HXLINE( 996)					return true;
            				}
            			}
HXLINE( 998)			this->moveCameraSection(null());
HXLINE(1000)			 ::flixel::util::FlxTimer _hx_tmp1 =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN(1000)			this->startTimer = _hx_tmp1->start(((::backend::Conductor_obj::crochet / ( (Float)(1000) )) / this->playbackRate), ::Dynamic(new _hx_Closure_5(_gthis,swagCounter)),5);
            		}
HXLINE(1057)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startCountdown,return )

 ::flixel::FlxSprite PlayState_obj::createCountdownSprite(::String image,bool antialias){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_gthis, ::flixel::FlxSprite,spr1) HXARGC(1)
            		void _hx_run( ::flixel::tweens::FlxTween twn){
            			HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1076_createCountdownSprite)
HXLINE(1077)			_gthis->remove(spr1,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1078)			spr1->destroy();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1061_createCountdownSprite)
HXDLIN(1061)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1062)		 ::flixel::FlxSprite spr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1062)		 ::flixel::FlxSprite spr1 = spr->loadGraphic(::backend::Paths_obj::image(image,null(),null()),null(),null(),null(),null(),null());
HXLINE(1063)		spr1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1064)		{
HXLINE(1064)			 ::flixel::math::FlxBasePoint this1 = spr1->scrollFactor;
HXDLIN(1064)			this1->set_x(( (Float)(0) ));
HXDLIN(1064)			this1->set_y(( (Float)(0) ));
            		}
HXLINE(1065)		spr1->updateHitbox();
HXLINE(1067)		if (::states::PlayState_obj::get_isPixelStage()) {
HXLINE(1068)			 ::flixel::FlxSprite spr2 = spr1;
HXDLIN(1068)			Float _hx_tmp = spr1->get_width();
HXDLIN(1068)			spr2->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::states::PlayState_obj::daPixelZoom)),null());
            		}
HXLINE(1070)		{
HXLINE(1070)			int axes = 17;
HXDLIN(1070)			bool _hx_tmp1;
HXDLIN(1070)			if ((axes != 1)) {
HXLINE(1070)				_hx_tmp1 = (axes == 17);
            			}
            			else {
HXLINE(1070)				_hx_tmp1 = true;
            			}
HXDLIN(1070)			if (_hx_tmp1) {
HXLINE(1070)				 ::flixel::FlxSprite spr3 = spr1;
HXDLIN(1070)				int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN(1070)				spr3->set_x(((( (Float)(_hx_tmp2) ) - spr1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(1070)			bool _hx_tmp3;
HXDLIN(1070)			if ((axes != 16)) {
HXLINE(1070)				_hx_tmp3 = (axes == 17);
            			}
            			else {
HXLINE(1070)				_hx_tmp3 = true;
            			}
HXDLIN(1070)			if (_hx_tmp3) {
HXLINE(1070)				 ::flixel::FlxSprite spr4 = spr1;
HXDLIN(1070)				int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN(1070)				spr4->set_y(((( (Float)(_hx_tmp4) ) - spr1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(1071)		spr1->set_antialiasing(antialias);
HXLINE(1072)		int _hx_tmp5 = this->members->indexOf(this->noteGroup,null());
HXDLIN(1072)		this->insert(_hx_tmp5,spr1);
HXLINE(1073)		::flixel::tweens::FlxTween_obj::tween(spr1, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(::backend::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            			->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis,spr1)))));
HXLINE(1081)		return spr1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,createCountdownSprite,return )

void PlayState_obj::addBehindGF( ::flixel::FlxBasic obj){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1086_addBehindGF)
HXDLIN(1086)		this->insert(this->members->indexOf(this->gfGroup,null()),obj);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,addBehindGF,(void))

void PlayState_obj::addBehindBF( ::flixel::FlxBasic obj){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1090_addBehindBF)
HXDLIN(1090)		this->insert(this->members->indexOf(this->boyfriendGroup,null()),obj);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,addBehindBF,(void))

void PlayState_obj::addBehindDad( ::flixel::FlxBasic obj){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1094_addBehindDad)
HXDLIN(1094)		this->insert(this->members->indexOf(this->dadGroup,null()),obj);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,addBehindDad,(void))

void PlayState_obj::clearNotesBefore(Float time){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1098_clearNotesBefore)
HXLINE(1099)		int i = (this->unspawnNotes->length - 1);
HXLINE(1100)		while((i >= 0)){
HXLINE(1101)			 ::objects::Note daNote = this->unspawnNotes->__get(i).StaticCast<  ::objects::Note >();
HXLINE(1102)			if (((daNote->strumTime - ( (Float)(350) )) < time)) {
HXLINE(1104)				daNote->set_active(false);
HXLINE(1105)				daNote->set_visible(false);
HXLINE(1106)				daNote->ignoreNote = true;
HXLINE(1108)				daNote->kill();
HXLINE(1109)				this->unspawnNotes->remove(daNote);
HXLINE(1110)				daNote->destroy();
            			}
HXLINE(1112)			i = (i - 1);
            		}
HXLINE(1115)		i = (this->notes->length - 1);
HXLINE(1116)		while((i >= 0)){
HXLINE(1117)			 ::objects::Note daNote1 = Dynamic( this->notes->members->__get(i)).StaticCast<  ::objects::Note >();
HXLINE(1118)			if (((daNote1->strumTime - ( (Float)(350) )) < time)) {
HXLINE(1120)				daNote1->set_active(false);
HXLINE(1121)				daNote1->set_visible(false);
HXLINE(1122)				daNote1->ignoreNote = true;
HXLINE(1123)				this->invalidateNote(daNote1);
            			}
HXLINE(1125)			i = (i - 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,clearNotesBefore,(void))

HX_BEGIN_DEFAULT_FUNC(__default_updateScore,PlayState_obj)
void _hx_run(::hx::Null< bool >  __o_miss,::hx::Null< bool >  __o_scoreBop){
            		bool miss = __o_miss.Default(false);
            		bool scoreBop = __o_scoreBop.Default(true);
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1134___default_updateScore)
HXLINE(1135)		 ::Dynamic ret = ( ( ::states::PlayState)(__this) )->callOnScripts(HX_("preUpdateScore",26,11,b7,6e),::cpp::VirtualArray_obj::__new(1)->init(0,miss),true,null(),null());
HXLINE(1136)		if (::hx::IsEq( ret,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(1137)			return;
            		}
HXLINE(1139)		( ( ::states::PlayState)(__this) )->updateScoreText();
HXLINE(1140)		bool _hx_tmp;
HXDLIN(1140)		bool _hx_tmp1;
HXDLIN(1140)		if (!(miss)) {
HXLINE(1140)			_hx_tmp1 = !(( ( ::states::PlayState)(__this) )->cpuControlled);
            		}
            		else {
HXLINE(1140)			_hx_tmp1 = false;
            		}
HXDLIN(1140)		if (_hx_tmp1) {
HXLINE(1140)			_hx_tmp = scoreBop;
            		}
            		else {
HXLINE(1140)			_hx_tmp = false;
            		}
HXDLIN(1140)		if (_hx_tmp) {
HXLINE(1141)			( ( ::states::PlayState)(__this) )->doScoreBop();
            		}
HXLINE(1143)		( ( ::states::PlayState)(__this) )->callOnScripts(HX_("onUpdateScore",aa,f9,5b,c1),::cpp::VirtualArray_obj::__new(1)->init(0,miss),null(),null(),null());
            	}
HX_END_LOCAL_FUNC2((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_updateScoreText,PlayState_obj)
void _hx_run(){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1147___default_updateScoreText)
HXLINE(1148)		::String key = (HX_("rating_",a2,65,63,5d) + ( ( ::states::PlayState)(__this) )->ratingName);
HXDLIN(1148)		::String defaultPhrase = ( ( ::states::PlayState)(__this) )->ratingName;
HXDLIN(1148)		::cpp::VirtualArray values = null();
HXDLIN(1148)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(1148)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN(1148)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(key,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN(1148)		if (::hx::IsNull( str )) {
HXLINE(  62)			str = defaultPhrase;
            		}
HXLINE(1148)		if (::hx::IsNull( str )) {
HXLINE(  68)			str = key;
            		}
HXLINE(1148)		if (::hx::IsNotNull( values )) {
HXLINE(1148)			int _g_current = 0;
HXDLIN(1148)			::cpp::VirtualArray _g_array = values;
HXDLIN(1148)			while((_g_current < _g_array->get_length())){
HXLINE(1148)				 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN(1148)				_g_current = (_g_current + 1);
HXDLIN(1148)				int _g_key = (_g_current - 1);
HXDLIN(1148)				int num = _g_key;
HXDLIN(1148)				 ::Dynamic value = _g_value;
HXLINE(  72)				str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            			}
            		}
HXLINE(1148)		::String str1 = str;
HXLINE(1149)		if ((( ( ::states::PlayState)(__this) )->totalPlayed != 0)) {
HXLINE(1151)			Float percent = ::backend::CoolUtil_obj::floorDecimal((( ( ::states::PlayState)(__this) )->ratingPercent * ( (Float)(100) )),2);
HXLINE(1152)			::String str2 = ((HX_(" (",08,1c,00,00) + percent) + HX_("%) - ",8f,a5,05,69));
HXDLIN(1152)			::String key1 = ( ( ::states::PlayState)(__this) )->ratingFC;
HXDLIN(1152)			::String defaultPhrase1 = null();
HXDLIN(1152)			::cpp::VirtualArray values1 = null();
HXDLIN(1152)			::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN(1152)			 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN(1152)			::String str3 = ( ( ::haxe::ds::StringMap)(this2) )->get_string(::StringTools_obj::trim(hideChars1->replace(::StringTools_obj::replace(key1,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN(1152)			if (::hx::IsNull( str3 )) {
HXLINE(  62)				str3 = defaultPhrase1;
            			}
HXLINE(1152)			if (::hx::IsNull( str3 )) {
HXLINE(  68)				str3 = key1;
            			}
HXLINE(1152)			if (::hx::IsNotNull( values1 )) {
HXLINE(1152)				int _g_current1 = 0;
HXDLIN(1152)				::cpp::VirtualArray _g_array1 = values1;
HXDLIN(1152)				while((_g_current1 < _g_array1->get_length())){
HXLINE(1152)					 ::Dynamic _g_value1 = _g_array1->__get(_g_current1);
HXDLIN(1152)					_g_current1 = (_g_current1 + 1);
HXDLIN(1152)					int _g_key1 = (_g_current1 - 1);
HXDLIN(1152)					int num1 = _g_key1;
HXDLIN(1152)					 ::Dynamic value1 = _g_value1;
HXLINE(  72)					str3 = ::StringTools_obj::replace(str3,((HX_("{",7b,00,00,00) + (num1 + 1)) + HX_("}",7d,00,00,00)),( (::String)(value1) ));
            				}
            			}
HXLINE(1152)			str1 = (str1 + (str2 + str3));
            		}
HXLINE(1155)		::String tempScore;
HXLINE(1156)		if (!(( ( ::states::PlayState)(__this) )->instakillOnMiss)) {
HXLINE(1156)			::cpp::VirtualArray values2 = ::cpp::VirtualArray_obj::__new(3)->init(0,( ( ::states::PlayState)(__this) )->songScore)->init(1,( ( ::states::PlayState)(__this) )->songMisses)->init(2,str1);
HXDLIN(1156)			::Dynamic this3 = ::backend::Language_obj::phrases;
HXDLIN(1156)			 ::EReg hideChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN(1156)			::String str4 = ( ( ::haxe::ds::StringMap)(this3) )->get_string(::StringTools_obj::trim(hideChars2->replace(::StringTools_obj::replace(HX_("score_text",fa,2b,54,a8),HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN(1156)			if (::hx::IsNull( str4 )) {
HXLINE(  62)				str4 = HX_("Score: {1} | Misses: {2} | Rating: {3}",ff,8e,fe,7f);
            			}
HXLINE(1156)			if (::hx::IsNull( str4 )) {
HXLINE(  68)				str4 = HX_("score_text",fa,2b,54,a8);
            			}
HXLINE(1156)			if (::hx::IsNotNull( values2 )) {
HXLINE(1156)				int _g_current2 = 0;
HXDLIN(1156)				::cpp::VirtualArray _g_array2 = values2;
HXDLIN(1156)				while((_g_current2 < _g_array2->get_length())){
HXLINE(1156)					 ::Dynamic _g_value2 = _g_array2->__get(_g_current2);
HXDLIN(1156)					_g_current2 = (_g_current2 + 1);
HXDLIN(1156)					int _g_key2 = (_g_current2 - 1);
HXDLIN(1156)					int num2 = _g_key2;
HXDLIN(1156)					 ::Dynamic value2 = _g_value2;
HXLINE(  72)					str4 = ::StringTools_obj::replace(str4,((HX_("{",7b,00,00,00) + (num2 + 1)) + HX_("}",7d,00,00,00)),( (::String)(value2) ));
            				}
            			}
HXLINE(1156)			tempScore = str4;
            		}
            		else {
HXLINE(1157)			::cpp::VirtualArray values3 = ::cpp::VirtualArray_obj::__new(2)->init(0,( ( ::states::PlayState)(__this) )->songScore)->init(1,str1);
HXDLIN(1157)			::Dynamic this4 = ::backend::Language_obj::phrases;
HXDLIN(1157)			 ::EReg hideChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN(1157)			::String str5 = ( ( ::haxe::ds::StringMap)(this4) )->get_string(::StringTools_obj::trim(hideChars3->replace(::StringTools_obj::replace(HX_("score_text_instakill",34,97,52,b3),HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN(1157)			if (::hx::IsNull( str5 )) {
HXLINE(  62)				str5 = HX_("Score: {1} | Rating: {2}",8e,9c,26,d6);
            			}
HXLINE(1157)			if (::hx::IsNull( str5 )) {
HXLINE(  68)				str5 = HX_("score_text_instakill",34,97,52,b3);
            			}
HXLINE(1157)			if (::hx::IsNotNull( values3 )) {
HXLINE(1157)				int _g_current3 = 0;
HXDLIN(1157)				::cpp::VirtualArray _g_array3 = values3;
HXDLIN(1157)				while((_g_current3 < _g_array3->get_length())){
HXLINE(1157)					 ::Dynamic _g_value3 = _g_array3->__get(_g_current3);
HXDLIN(1157)					_g_current3 = (_g_current3 + 1);
HXDLIN(1157)					int _g_key3 = (_g_current3 - 1);
HXDLIN(1157)					int num3 = _g_key3;
HXDLIN(1157)					 ::Dynamic value3 = _g_value3;
HXLINE(  72)					str5 = ::StringTools_obj::replace(str5,((HX_("{",7b,00,00,00) + (num3 + 1)) + HX_("}",7d,00,00,00)),( (::String)(value3) ));
            				}
            			}
HXLINE(1157)			tempScore = str5;
            		}
HXLINE(1158)		( ( ::states::PlayState)(__this) )->scoreTxt->set_text(tempScore);
            	}
HX_END_LOCAL_FUNC0((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_fullComboFunction,PlayState_obj)
void _hx_run(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1162___default_fullComboFunction)
HXLINE(1163)		int sicks = ( ( ::states::PlayState)(__this) )->ratingsData->__get(0).StaticCast<  ::backend::Rating >()->hits;
HXLINE(1164)		int goods = ( ( ::states::PlayState)(__this) )->ratingsData->__get(1).StaticCast<  ::backend::Rating >()->hits;
HXLINE(1165)		int bads = ( ( ::states::PlayState)(__this) )->ratingsData->__get(2).StaticCast<  ::backend::Rating >()->hits;
HXLINE(1166)		int shits = ( ( ::states::PlayState)(__this) )->ratingsData->__get(3).StaticCast<  ::backend::Rating >()->hits;
HXLINE(1168)		( ( ::states::PlayState)(__this) )->ratingFC = HX_("",00,00,00,00);
HXLINE(1169)		if ((( ( ::states::PlayState)(__this) )->songMisses == 0)) {
HXLINE(1171)			bool _hx_tmp;
HXDLIN(1171)			if ((bads <= 0)) {
HXLINE(1171)				_hx_tmp = (shits > 0);
            			}
            			else {
HXLINE(1171)				_hx_tmp = true;
            			}
HXDLIN(1171)			if (_hx_tmp) {
HXLINE(1171)				( ( ::states::PlayState)(__this) )->ratingFC = HX_("FC",3d,3d,00,00);
            			}
            			else {
HXLINE(1172)				if ((goods > 0)) {
HXLINE(1172)					( ( ::states::PlayState)(__this) )->ratingFC = HX_("GFC",44,1d,36,00);
            				}
            				else {
HXLINE(1173)					if ((sicks > 0)) {
HXLINE(1173)						( ( ::states::PlayState)(__this) )->ratingFC = HX_("SFC",50,38,3f,00);
            					}
            				}
            			}
            		}
            		else {
HXLINE(1176)			if ((( ( ::states::PlayState)(__this) )->songMisses < 10)) {
HXLINE(1176)				( ( ::states::PlayState)(__this) )->ratingFC = HX_("SDCB",70,89,10,37);
            			}
            			else {
HXLINE(1177)				( ( ::states::PlayState)(__this) )->ratingFC = HX_("Clear",6d,e1,88,db);
            			}
            		}
            	}
HX_END_LOCAL_FUNC0((void))
HX_END_DEFAULT_FUNC

void PlayState_obj::doScoreBop(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::tweens::FlxTween twn){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_1192_doScoreBop)
HXLINE(1192)			_gthis->scoreTxtTween = null();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1181_doScoreBop)
HXDLIN(1181)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1182)		if (!(::backend::ClientPrefs_obj::data->scoreZoom)) {
HXLINE(1183)			return;
            		}
HXLINE(1185)		if (::hx::IsNotNull( this->scoreTxtTween )) {
HXLINE(1186)			this->scoreTxtTween->cancel();
            		}
HXLINE(1188)		this->scoreTxt->scale->set_x(((Float)1.075));
HXLINE(1189)		this->scoreTxt->scale->set_y(((Float)1.075));
HXLINE(1190)		this->scoreTxtTween = ::flixel::tweens::FlxTween_obj::tween(this->scoreTxt->scale, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),1)
            			->setFixed(1,HX_("y",79,00,00,00),1)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,doScoreBop,(void))

void PlayState_obj::setSongTime(Float time){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1198_setSongTime)
HXLINE(1199)		::flixel::FlxG_obj::sound->music->pause();
HXLINE(1200)		this->vocals->pause();
HXLINE(1201)		this->opponentVocals->pause();
HXLINE(1203)		::flixel::FlxG_obj::sound->music->set_time((time - ::backend::Conductor_obj::offset));
HXLINE(1204)		::flixel::FlxG_obj::sound->music->set_pitch(this->playbackRate);
HXLINE(1205)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(1207)		if ((::backend::Conductor_obj::songPosition < this->vocals->_length)) {
HXLINE(1209)			this->vocals->set_time((time - ::backend::Conductor_obj::offset));
HXLINE(1210)			this->vocals->set_pitch(this->playbackRate);
HXLINE(1211)			this->vocals->play(null(),null(),null());
            		}
            		else {
HXLINE(1213)			this->vocals->pause();
            		}
HXLINE(1215)		if ((::backend::Conductor_obj::songPosition < this->opponentVocals->_length)) {
HXLINE(1217)			this->opponentVocals->set_time((time - ::backend::Conductor_obj::offset));
HXLINE(1218)			this->opponentVocals->set_pitch(this->playbackRate);
HXLINE(1219)			this->opponentVocals->play(null(),null(),null());
            		}
            		else {
HXLINE(1221)			this->opponentVocals->pause();
            		}
HXLINE(1222)		::backend::Conductor_obj::songPosition = time;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,setSongTime,(void))

void PlayState_obj::startNextDialogue(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1225_startNextDialogue)
HXLINE(1226)		this->dialogueCount++;
HXLINE(1227)		this->callOnScripts(HX_("onNextDialogue",ea,78,82,7b),::cpp::VirtualArray_obj::__new(1)->init(0,this->dialogueCount),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startNextDialogue,(void))

void PlayState_obj::skipDialogue(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1231_skipDialogue)
HXDLIN(1231)		this->callOnScripts(HX_("onSkipDialogue",76,76,53,39),::cpp::VirtualArray_obj::__new(1)->init(0,this->dialogueCount),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,skipDialogue,(void))

void PlayState_obj::startSong(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_g) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_1241_startSong)
HXLINE(1241)			_g->finishSong(null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run( ::backend::BaseStage stage){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_1255_startSong)
HXLINE(1255)			stage->startSong();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1235_startSong)
HXLINE(1236)		this->startingSong = false;
HXLINE(1239)		::flixel::FlxG_obj::sound->playMusic(this->inst->_sound,1,false,null());
HXLINE(1240)		::flixel::FlxG_obj::sound->music->set_pitch(this->playbackRate);
HXLINE(1241)		 ::states::PlayState _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1241)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(_g));
HXDLIN(1241)		::flixel::FlxG_obj::sound->music->onComplete = _hx_tmp;
HXLINE(1242)		this->vocals->play(null(),null(),null());
HXLINE(1243)		this->opponentVocals->play(null(),null(),null());
HXLINE(1245)		this->setSongTime((::Math_obj::max(( (Float)(0) ),(::states::PlayState_obj::startOnTime - ( (Float)(500) ))) + ::backend::Conductor_obj::offset));
HXLINE(1246)		::states::PlayState_obj::startOnTime = ( (Float)(0) );
HXLINE(1248)		if (this->paused) {
HXLINE(1250)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(1251)			this->vocals->pause();
HXLINE(1252)			this->opponentVocals->pause();
            		}
HXLINE(1255)		this->stagesFunc( ::Dynamic(new _hx_Closure_1()));
HXLINE(1258)		this->songLength = ::flixel::FlxG_obj::sound->music->_length;
HXLINE(1259)		::flixel::tweens::FlxTween_obj::tween(this->timeBar, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
HXLINE(1260)		::flixel::tweens::FlxTween_obj::tween(this->timeTxt, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
HXLINE(1264)		if (this->autoUpdateRPC) {
HXLINE(1264)			::String _hx_tmp1 = this->detailsText;
HXDLIN(1264)			::String _hx_tmp2 = ( (::String)((((::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) );
HXDLIN(1264)			::String _hx_tmp3 = this->iconP2->getCharacter();
HXDLIN(1264)			::backend::DiscordClient_obj::changePresence(_hx_tmp1,_hx_tmp2,_hx_tmp3,true,this->songLength,null());
            		}
HXLINE(1266)		this->setOnScripts(HX_("songLength",9b,3a,8c,fa),this->songLength,null());
HXLINE(1267)		this->callOnScripts(HX_("onSongStart",2e,9f,c8,d5),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startSong,(void))

void PlayState_obj::generateSong(){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1275_generateSong)
HXLINE(1277)		this->set_songSpeed(( (Float)(::states::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ));
HXLINE(1278)		 ::Dynamic defaultValue = null();
HXDLIN(1278)		defaultValue = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("scrolltype",47,55,ef,1f));
HXDLIN(1278)		 ::Dynamic _hx_tmp;
HXDLIN(1278)		if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("scrolltype",47,55,ef,1f))) {
HXLINE(1278)			_hx_tmp = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("scrolltype",47,55,ef,1f));
            		}
            		else {
HXLINE(1278)			_hx_tmp = defaultValue;
            		}
HXDLIN(1278)		this->songSpeedType = ( (::String)(_hx_tmp) );
HXLINE(1279)		::String _hx_switch_0 = this->songSpeedType;
            		if (  (_hx_switch_0==HX_("constant",64,c1,9d,a5)) ){
HXLINE(1284)			 ::Dynamic defaultValue1 = null();
HXDLIN(1284)			defaultValue1 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
HXDLIN(1284)			 ::Dynamic _hx_tmp1;
HXDLIN(1284)			if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("scrollspeed",5a,70,19,38))) {
HXLINE(1284)				_hx_tmp1 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
            			}
            			else {
HXLINE(1284)				_hx_tmp1 = defaultValue1;
            			}
HXDLIN(1284)			this->set_songSpeed(( (Float)(_hx_tmp1) ));
HXDLIN(1284)			goto _hx_goto_85;
            		}
            		if (  (_hx_switch_0==HX_("multiplicative",96,7a,3f,fa)) ){
HXLINE(1282)			Float _hx_tmp2 = ( (Float)(::states::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
HXDLIN(1282)			 ::Dynamic defaultValue2 = null();
HXDLIN(1282)			defaultValue2 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
HXDLIN(1282)			 ::Dynamic _hx_tmp3;
HXDLIN(1282)			if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("scrollspeed",5a,70,19,38))) {
HXLINE(1282)				_hx_tmp3 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
            			}
            			else {
HXLINE(1282)				_hx_tmp3 = defaultValue2;
            			}
HXDLIN(1282)			this->set_songSpeed((_hx_tmp2 * ( (Float)(_hx_tmp3) )));
HXDLIN(1282)			goto _hx_goto_85;
            		}
            		_hx_goto_85:;
HXLINE(1287)		 ::Dynamic songData = ::states::PlayState_obj::SONG;
HXLINE(1288)		::backend::Conductor_obj::set_bpm(( (Float)(songData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE(1290)		this->curSong = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXLINE(1292)		this->vocals =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXLINE(1293)		this->opponentVocals =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXLINE(1294)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1296)			if (( (bool)(songData->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(1298)				::String song = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1298)				::String postfix;
HXDLIN(1298)				bool postfix1;
HXDLIN(1298)				if (::hx::IsNotNull( this->boyfriend->vocalsFile )) {
HXLINE(1298)					postfix1 = (this->boyfriend->vocalsFile.length < 1);
            				}
            				else {
HXLINE(1298)					postfix1 = true;
            				}
HXDLIN(1298)				if (postfix1) {
HXLINE(1298)					postfix = HX_("Player",81,5f,4d,6c);
            				}
            				else {
HXLINE(1298)					postfix = this->boyfriend->vocalsFile;
            				}
HXDLIN(1298)				 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(1298)				 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(1298)				::String songKey = ((HX_("",00,00,00,00) + ::StringTools_obj::trim(hideChars->replace(invalidChars->replace(song,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase()) + HX_("/Voices",10,18,4f,34));
HXDLIN(1298)				if (::hx::IsNotNull( postfix )) {
HXLINE(1298)					songKey = (songKey + (HX_("-",2d,00,00,00) + postfix));
            				}
HXDLIN(1298)				 ::openfl::media::Sound playerVocals = ::backend::Paths_obj::returnSound(songKey,HX_("songs",fe,36,c7,80),true,false);
HXLINE(1299)				 ::flixel::sound::FlxSound _hx_tmp4 = this->vocals;
HXDLIN(1299)				 ::Dynamic _hx_tmp5;
HXDLIN(1299)				if (::hx::IsNotNull( playerVocals )) {
HXLINE(1299)					_hx_tmp5 = playerVocals;
            				}
            				else {
HXLINE(1299)					::String song1 = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1299)					::String postfix2 = null();
HXDLIN(1299)					 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(1299)					 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(1299)					::String songKey1 = ((HX_("",00,00,00,00) + ::StringTools_obj::trim(hideChars1->replace(invalidChars1->replace(song1,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase()) + HX_("/Voices",10,18,4f,34));
HXDLIN(1299)					if (::hx::IsNotNull( postfix2 )) {
HXLINE(1299)						songKey1 = (songKey1 + (HX_("-",2d,00,00,00) + postfix2));
            					}
HXDLIN(1299)					_hx_tmp5 = ::backend::Paths_obj::returnSound(songKey1,HX_("songs",fe,36,c7,80),true,false);
            				}
HXDLIN(1299)				_hx_tmp4->loadEmbedded(_hx_tmp5,null(),null(),null());
HXLINE(1301)				::String song2 = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1301)				::String postfix3;
HXDLIN(1301)				bool postfix4;
HXDLIN(1301)				if (::hx::IsNotNull( this->dad->vocalsFile )) {
HXLINE(1301)					postfix4 = (this->dad->vocalsFile.length < 1);
            				}
            				else {
HXLINE(1301)					postfix4 = true;
            				}
HXDLIN(1301)				if (postfix4) {
HXLINE(1301)					postfix3 = HX_("Opponent",bd,75,6a,d2);
            				}
            				else {
HXLINE(1301)					postfix3 = this->dad->vocalsFile;
            				}
HXDLIN(1301)				 ::EReg invalidChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(1301)				 ::EReg hideChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(1301)				::String songKey2 = ((HX_("",00,00,00,00) + ::StringTools_obj::trim(hideChars2->replace(invalidChars2->replace(song2,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase()) + HX_("/Voices",10,18,4f,34));
HXDLIN(1301)				if (::hx::IsNotNull( postfix3 )) {
HXLINE(1301)					songKey2 = (songKey2 + (HX_("-",2d,00,00,00) + postfix3));
            				}
HXDLIN(1301)				 ::openfl::media::Sound oppVocals = ::backend::Paths_obj::returnSound(songKey2,HX_("songs",fe,36,c7,80),true,false);
HXLINE(1302)				bool _hx_tmp6;
HXDLIN(1302)				if (::hx::IsNotNull( oppVocals )) {
HXLINE(1302)					_hx_tmp6 = (( (Float)(oppVocals->get_length()) ) > 0);
            				}
            				else {
HXLINE(1302)					_hx_tmp6 = false;
            				}
HXDLIN(1302)				if (_hx_tmp6) {
HXLINE(1302)					this->opponentVocals->loadEmbedded(oppVocals,null(),null(),null());
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(1305)				{
HXLINE(1305)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(1308)		this->vocals->set_pitch(this->playbackRate);
HXLINE(1309)		this->opponentVocals->set_pitch(this->playbackRate);
HXLINE(1311)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE(1312)		::flixel::FlxG_obj::sound->list->add(this->opponentVocals).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE(1314)		this->inst =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXLINE(1315)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1317)			 ::flixel::sound::FlxSound _hx_tmp7 = this->inst;
HXDLIN(1317)			::String song3 = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1317)			 ::EReg invalidChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(1317)			 ::EReg hideChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(1317)			_hx_tmp7->loadEmbedded(::backend::Paths_obj::returnSound(((HX_("",00,00,00,00) + ::StringTools_obj::trim(hideChars3->replace(invalidChars3->replace(song3,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase()) + HX_("/Inst",95,b3,69,40)),HX_("songs",fe,36,c7,80),true,null()),null(),null(),null());
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g1 = _hx_e;
HXLINE(1319)				{
HXLINE(1319)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(1320)		::flixel::FlxG_obj::sound->list->add(this->inst).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE(1322)		this->notes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(1323)		this->noteGroup->add(this->notes).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1325)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1327)			 ::Dynamic eventsChart = ::backend::Song_obj::getChart(HX_("events",19,4f,6a,96),this->songName);
HXLINE(1328)			if (::hx::IsNotNull( eventsChart )) {
HXLINE(1329)				int _g2 = 0;
HXDLIN(1329)				::cpp::VirtualArray _g3 = ( (::cpp::VirtualArray)(eventsChart->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) );
HXDLIN(1329)				while((_g2 < _g3->get_length())){
HXLINE(1329)					 ::Dynamic event = _g3->__get(_g2);
HXDLIN(1329)					_g2 = (_g2 + 1);
HXLINE(1330)					{
HXLINE(1330)						int _g4 = 0;
HXDLIN(1330)						int _g5 = ( (int)(event->__GetItem(1)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN(1330)						while((_g4 < _g5)){
HXLINE(1330)							_g4 = (_g4 + 1);
HXDLIN(1330)							int i = (_g4 - 1);
HXLINE(1331)							this->makeEvent(( (::cpp::VirtualArray)(event) ),i);
            						}
            					}
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g6 = _hx_e;
HXLINE(1333)				{
HXLINE(1333)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(1335)		 ::objects::Note oldNote = null();
HXLINE(1336)		::Array< ::Dynamic> sectionsData = ( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXLINE(1337)		int ghostNotesCaught = 0;
HXLINE(1338)		Float daBpm = ::backend::Conductor_obj::bpm;
HXLINE(1340)		{
HXLINE(1340)			int _g7 = 0;
HXDLIN(1340)			while((_g7 < sectionsData->length)){
HXLINE(1340)				 ::Dynamic section = sectionsData->__get(_g7);
HXDLIN(1340)				_g7 = (_g7 + 1);
HXLINE(1342)				bool _hx_tmp8;
HXDLIN(1342)				bool _hx_tmp9;
HXDLIN(1342)				bool _hx_tmp10;
HXDLIN(1342)				if (::hx::IsNotNull( section->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic) )) {
HXLINE(1342)					_hx_tmp10 = ( (bool)(section->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) );
            				}
            				else {
HXLINE(1342)					_hx_tmp10 = false;
            				}
HXDLIN(1342)				if (_hx_tmp10) {
HXLINE(1342)					_hx_tmp9 = ::hx::IsNotNull( section->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic) );
            				}
            				else {
HXLINE(1342)					_hx_tmp9 = false;
            				}
HXDLIN(1342)				if (_hx_tmp9) {
HXLINE(1342)					_hx_tmp8 = ::hx::IsNotEq( daBpm,section->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic) );
            				}
            				else {
HXLINE(1342)					_hx_tmp8 = false;
            				}
HXDLIN(1342)				if (_hx_tmp8) {
HXLINE(1343)					daBpm = ( (Float)(section->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            				}
HXLINE(1345)				{
HXLINE(1345)					int _g8 = 0;
HXDLIN(1345)					int _g9 = ( (::cpp::VirtualArray)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->get_length();
HXDLIN(1345)					while((_g8 < _g9)){
HXLINE(1345)						_g8 = (_g8 + 1);
HXDLIN(1345)						int i1 = (_g8 - 1);
HXLINE(1347)						::cpp::VirtualArray songNotes = ( (::cpp::VirtualArray)( ::Dynamic(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(i1)) );
HXLINE(1348)						Float spawnTime = ( (Float)(songNotes->__get(0)) );
HXLINE(1349)						int noteColumn = ::Std_obj::_hx_int(::hx::Mod(songNotes->__get(1),this->totalColumns));
HXLINE(1350)						Float holdLength = ( (Float)(songNotes->__get(2)) );
HXLINE(1351)						::String noteType;
HXDLIN(1351)						if (!(::Std_obj::isOfType(songNotes->__get(3),::hx::ClassOf< ::String >()))) {
HXLINE(1351)							noteType = ::objects::Note_obj::defaultNoteTypes->__get(( (int)(songNotes->__get(3)) ));
            						}
            						else {
HXLINE(1351)							noteType = ( (::String)(songNotes->__get(3)) );
            						}
HXLINE(1352)						if (::Math_obj::isNaN(holdLength)) {
HXLINE(1353)							holdLength = ((Float)0.0);
            						}
HXLINE(1355)						bool gottaHitNote = ::hx::IsLess( songNotes->__get(1),this->totalColumns );
HXLINE(1357)						if ((i1 != 0)) {
HXLINE(1359)							int _g10 = 0;
HXDLIN(1359)							::Array< ::Dynamic> _g11 = this->unspawnNotes;
HXDLIN(1359)							while((_g10 < _g11->length)){
HXLINE(1359)								 ::objects::Note evilNote = _g11->__get(_g10).StaticCast<  ::objects::Note >();
HXDLIN(1359)								_g10 = (_g10 + 1);
HXLINE(1360)								bool matches;
HXDLIN(1360)								bool matches1;
HXDLIN(1360)								if ((noteColumn == evilNote->noteData)) {
HXLINE(1360)									matches1 = (gottaHitNote == evilNote->mustPress);
            								}
            								else {
HXLINE(1360)									matches1 = false;
            								}
HXDLIN(1360)								if (matches1) {
HXLINE(1360)									matches = (evilNote->noteType == noteType);
            								}
            								else {
HXLINE(1360)									matches = false;
            								}
HXLINE(1361)								bool _hx_tmp11;
HXDLIN(1361)								if (matches) {
HXLINE(1361)									_hx_tmp11 = (::Math_obj::abs((spawnTime - evilNote->strumTime)) < ((Float)0.0000001));
            								}
            								else {
HXLINE(1361)									_hx_tmp11 = false;
            								}
HXDLIN(1361)								if (_hx_tmp11) {
HXLINE(1362)									if ((evilNote->tail->length > 0)) {
HXLINE(1363)										int _g12 = 0;
HXDLIN(1363)										::Array< ::Dynamic> _g13 = evilNote->tail;
HXDLIN(1363)										while((_g12 < _g13->length)){
HXLINE(1363)											 ::objects::Note tail = _g13->__get(_g12).StaticCast<  ::objects::Note >();
HXDLIN(1363)											_g12 = (_g12 + 1);
HXLINE(1365)											tail->destroy();
HXLINE(1366)											this->unspawnNotes->remove(tail);
            										}
            									}
HXLINE(1368)									evilNote->destroy();
HXLINE(1369)									this->unspawnNotes->remove(evilNote);
HXLINE(1370)									ghostNotesCaught = (ghostNotesCaught + 1);
            								}
            							}
            						}
HXLINE(1376)						 ::objects::Note swagNote =  ::objects::Note_obj::__alloc( HX_CTX ,spawnTime,noteColumn,oldNote,null(),null(),null());
HXLINE(1377)						bool isAlt;
HXDLIN(1377)						if (( (bool)(section->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) )) {
HXLINE(1377)							isAlt = !(gottaHitNote);
            						}
            						else {
HXLINE(1377)							isAlt = false;
            						}
HXLINE(1378)						bool _hx_tmp12;
HXDLIN(1378)						if (( (bool)(section->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)) )) {
HXLINE(1378)							_hx_tmp12 = ::hx::IsEq( gottaHitNote,section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic) );
            						}
            						else {
HXLINE(1378)							_hx_tmp12 = false;
            						}
HXDLIN(1378)						swagNote->gfNote = _hx_tmp12;
HXLINE(1379)						::String _hx_tmp13;
HXDLIN(1379)						if (isAlt) {
HXLINE(1379)							_hx_tmp13 = HX_("-alt",1c,93,08,1e);
            						}
            						else {
HXLINE(1379)							_hx_tmp13 = HX_("",00,00,00,00);
            						}
HXDLIN(1379)						swagNote->animSuffix = _hx_tmp13;
HXLINE(1380)						swagNote->mustPress = gottaHitNote;
HXLINE(1381)						swagNote->sustainLength = holdLength;
HXLINE(1382)						swagNote->set_noteType(noteType);
HXLINE(1384)						{
HXLINE(1384)							 ::flixel::math::FlxBasePoint this1 = swagNote->scrollFactor;
HXDLIN(1384)							this1->set_x(( (Float)(0) ));
HXDLIN(1384)							this1->set_y(( (Float)(0) ));
            						}
HXLINE(1385)						this->unspawnNotes->push(swagNote);
HXLINE(1387)						Float curStepCrochet = (((( (Float)(60) ) / daBpm) * ( (Float)(1000) )) / ((Float)4.0));
HXLINE(1388)						int roundSus = ::Math_obj::round((swagNote->sustainLength / curStepCrochet));
HXLINE(1389)						if ((roundSus > 0)) {
HXLINE(1391)							int _g14 = 0;
HXDLIN(1391)							int _g15 = roundSus;
HXDLIN(1391)							while((_g14 < _g15)){
HXLINE(1391)								_g14 = (_g14 + 1);
HXDLIN(1391)								int susNote = (_g14 - 1);
HXLINE(1393)								oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::objects::Note >();
HXLINE(1395)								 ::objects::Note sustainNote =  ::objects::Note_obj::__alloc( HX_CTX ,(spawnTime + (curStepCrochet * ( (Float)(susNote) ))),noteColumn,oldNote,true,null(),null());
HXLINE(1396)								sustainNote->animSuffix = swagNote->animSuffix;
HXLINE(1397)								sustainNote->mustPress = swagNote->mustPress;
HXLINE(1398)								sustainNote->gfNote = swagNote->gfNote;
HXLINE(1399)								sustainNote->set_noteType(swagNote->noteType);
HXLINE(1400)								{
HXLINE(1400)									 ::flixel::math::FlxBasePoint this2 = sustainNote->scrollFactor;
HXDLIN(1400)									this2->set_x(( (Float)(0) ));
HXDLIN(1400)									this2->set_y(( (Float)(0) ));
            								}
HXLINE(1401)								sustainNote->parent = swagNote;
HXLINE(1402)								this->unspawnNotes->push(sustainNote);
HXLINE(1403)								swagNote->tail->push(sustainNote);
HXLINE(1405)								sustainNote->correctionOffset = (swagNote->get_height() / ( (Float)(2) ));
HXLINE(1406)								if (!(::states::PlayState_obj::get_isPixelStage())) {
HXLINE(1408)									if (oldNote->isSustainNote) {
HXLINE(1410)										oldNote->scale->set_y((oldNote->scale->y * (( (Float)(::objects::Note_obj::SUSTAIN_SIZE) ) / ( (Float)(oldNote->frameHeight) ))));
HXLINE(1411)										oldNote->scale->set_y((oldNote->scale->y / this->playbackRate));
HXLINE(1412)										oldNote->resizeByRatio((curStepCrochet / ::backend::Conductor_obj::stepCrochet));
            									}
HXLINE(1415)									if (::backend::ClientPrefs_obj::data->downScroll) {
HXLINE(1416)										sustainNote->correctionOffset = ( (Float)(0) );
            									}
            								}
            								else {
HXLINE(1418)									if (oldNote->isSustainNote) {
HXLINE(1420)										oldNote->scale->set_y((oldNote->scale->y / this->playbackRate));
HXLINE(1421)										oldNote->resizeByRatio((curStepCrochet / ::backend::Conductor_obj::stepCrochet));
            									}
            								}
HXLINE(1424)								if (sustainNote->mustPress) {
HXLINE(1424)									sustainNote->set_x((sustainNote->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            								}
            								else {
HXLINE(1425)									if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE(1427)										sustainNote->set_x((sustainNote->x + 310));
HXLINE(1428)										if ((noteColumn > 1)) {
HXLINE(1429)											sustainNote->set_x((sustainNote->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 25)));
            										}
            									}
            								}
            							}
            						}
HXLINE(1434)						if (swagNote->mustPress) {
HXLINE(1436)							swagNote->set_x((swagNote->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            						}
            						else {
HXLINE(1438)							if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE(1440)								swagNote->set_x((swagNote->x + 310));
HXLINE(1441)								if ((noteColumn > 1)) {
HXLINE(1443)									swagNote->set_x((swagNote->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 25)));
            								}
            							}
            						}
HXLINE(1446)						if (!(this->noteTypes->contains(swagNote->noteType))) {
HXLINE(1447)							this->noteTypes->push(swagNote->noteType);
            						}
HXLINE(1449)						oldNote = swagNote;
            					}
            				}
            			}
            		}
HXLINE(1452)		 ::Dynamic _hx_tmp14 = ::haxe::Log_obj::trace;
HXDLIN(1452)		::String _hx_tmp15 = (((HX_("[\"",67,4f,00,00) + ( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toUpperCase()) + HX_("\" CHART INFO]: Ghost Notes Cleared: ",2d,f8,f6,cb)) + ghostNotesCaught);
HXDLIN(1452)		_hx_tmp14(_hx_tmp15,::hx::SourceInfo(HX_("source/states/PlayState.hx",3a,21,29,28),1452,HX_("states.PlayState",31,cd,20,04),HX_("generateSong",aa,ed,2b,1f)));
HXLINE(1453)		{
HXLINE(1453)			int _g16 = 0;
HXDLIN(1453)			::cpp::VirtualArray _g17 = ( (::cpp::VirtualArray)(songData->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) );
HXDLIN(1453)			while((_g16 < _g17->get_length())){
HXLINE(1453)				 ::Dynamic event1 = _g17->__get(_g16);
HXDLIN(1453)				_g16 = (_g16 + 1);
HXLINE(1454)				{
HXLINE(1454)					int _g18 = 0;
HXDLIN(1454)					int _g19 = ( (int)(event1->__GetItem(1)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN(1454)					while((_g18 < _g19)){
HXLINE(1454)						_g18 = (_g18 + 1);
HXDLIN(1454)						int i2 = (_g18 - 1);
HXLINE(1455)						this->makeEvent(( (::cpp::VirtualArray)(event1) ),i2);
            					}
            				}
            			}
            		}
HXLINE(1457)		this->unspawnNotes->sort(::states::PlayState_obj::sortByTime_dyn());
HXLINE(1458)		this->generatedMusic = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,generateSong,(void))

void PlayState_obj::eventPushed( ::Dynamic event){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,event) HXARGC(1)
            		void _hx_run( ::backend::BaseStage stage){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_1468_eventPushed)
HXLINE(1468)			stage->eventPushed(event);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1462_eventPushed)
HXLINE(1463)		this->eventPushedUnique(event);
HXLINE(1464)		if (this->eventsPushed->contains( ::Dynamic(event->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic)))) {
HXLINE(1465)			return;
            		}
HXLINE(1468)		this->stagesFunc( ::Dynamic(new _hx_Closure_0(event)));
HXLINE(1469)		this->eventsPushed->push( ::Dynamic(event->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,eventPushed,(void))

void PlayState_obj::eventPushedUnique( ::Dynamic event){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,event) HXARGC(1)
            		void _hx_run( ::backend::BaseStage stage){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_1494_eventPushedUnique)
HXLINE(1494)			stage->eventPushedUnique(event);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1473_eventPushedUnique)
HXLINE(1474)		::String _hx_switch_0 = ( (::String)(event->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic)) );
            		if (  (_hx_switch_0==HX_("Change Character",f9,50,ef,9c)) ){
HXLINE(1476)			int charType = 0;
HXLINE(1477)			::String _hx_switch_1 = ( (::String)(event->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic)) ).toLowerCase();
            			if (  (_hx_switch_1==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_1==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(1479)				charType = 2;
HXDLIN(1479)				goto _hx_goto_99;
            			}
            			if (  (_hx_switch_1==HX_("dad",47,36,4c,00)) ||  (_hx_switch_1==HX_("opponent",9d,b9,b8,f8)) ){
HXLINE(1481)				charType = 1;
HXDLIN(1481)				goto _hx_goto_99;
            			}
            			/* default */{
HXLINE(1483)				int val1 = ( (int)(::Std_obj::parseInt(( (::String)(event->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic)) ))) );
HXLINE(1484)				if (::Math_obj::isNaN(( (Float)(val1) ))) {
HXLINE(1484)					val1 = 0;
            				}
HXLINE(1485)				charType = val1;
            			}
            			_hx_goto_99:;
HXLINE(1488)			::String newCharacter = ( (::String)(event->__Field(HX_("value2",a1,03,b7,4f),::hx::paccDynamic)) );
HXLINE(1489)			this->addCharacterToList(newCharacter,charType);
HXLINE(1475)			goto _hx_goto_98;
            		}
            		if (  (_hx_switch_0==HX_("Play Sound",a3,a9,45,48)) ){
HXLINE(1492)			::backend::Paths_obj::returnSound(( (::String)((HX_("sounds/",eb,02,a5,b6) + event->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic))) ),null(),true,null());
HXDLIN(1492)			goto _hx_goto_98;
            		}
            		_hx_goto_98:;
HXLINE(1494)		this->stagesFunc( ::Dynamic(new _hx_Closure_0(event)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,eventPushedUnique,(void))

Float PlayState_obj::eventEarlyTrigger( ::Dynamic event){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1497_eventEarlyTrigger)
HXLINE(1498)		 ::Dynamic returnedValue = this->callOnScripts(HX_("eventEarlyTrigger",0f,d2,46,ab),::cpp::VirtualArray_obj::__new(4)->init(0, ::Dynamic(event->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic)))->init(1, ::Dynamic(event->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic)))->init(2, ::Dynamic(event->__Field(HX_("value2",a1,03,b7,4f),::hx::paccDynamic)))->init(3, ::Dynamic(event->__Field(HX_("strumTime",f6,2d,21,f4),::hx::paccDynamic))),true,null(),null());
HXLINE(1499)		bool _hx_tmp;
HXDLIN(1499)		if (::hx::IsNotNull( returnedValue )) {
HXLINE(1499)			_hx_tmp = ::hx::IsNotEq( returnedValue,0 );
            		}
            		else {
HXLINE(1499)			_hx_tmp = false;
            		}
HXDLIN(1499)		if (_hx_tmp) {
HXLINE(1500)			return ( (Float)(returnedValue) );
            		}
HXLINE(1503)		if (::hx::IsEq( event->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic),HX_("Kill Henchmen",e2,fc,7b,01) )) {
HXLINE(1505)			return ( (Float)(280) );
            		}
HXLINE(1507)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,eventEarlyTrigger,return )

void PlayState_obj::makeEvent(::cpp::VirtualArray event,int i){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1514_makeEvent)
HXLINE(1515)		 ::Dynamic subEvent =  ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("strumTime",f6,2d,21,f4),( (Float)((event->__get(0) + ::backend::ClientPrefs_obj::data->noteOffset)) ))
            			->setFixed(1,HX_("value1",a0,03,b7,4f),event->__get(1)->__GetItem(i)->__GetItem(1))
            			->setFixed(2,HX_("value2",a1,03,b7,4f),event->__get(1)->__GetItem(i)->__GetItem(2))
            			->setFixed(3,HX_("event",1a,c8,c4,75),event->__get(1)->__GetItem(i)->__GetItem(0)));
HXLINE(1521)		this->eventNotes->push(subEvent);
HXLINE(1522)		this->eventPushed(subEvent);
HXLINE(1523)		 ::Dynamic _hx_tmp;
HXDLIN(1523)		if (::hx::IsNotNull( subEvent->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic) )) {
HXLINE(1523)			_hx_tmp =  ::Dynamic(subEvent->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic));
            		}
            		else {
HXLINE(1523)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN(1523)		 ::Dynamic _hx_tmp1;
HXDLIN(1523)		if (::hx::IsNotNull( subEvent->__Field(HX_("value2",a1,03,b7,4f),::hx::paccDynamic) )) {
HXLINE(1523)			_hx_tmp1 =  ::Dynamic(subEvent->__Field(HX_("value2",a1,03,b7,4f),::hx::paccDynamic));
            		}
            		else {
HXLINE(1523)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN(1523)		this->callOnScripts(HX_("onEventPushed",94,7d,64,28),::cpp::VirtualArray_obj::__new(4)->init(0, ::Dynamic(subEvent->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic)))->init(1,_hx_tmp)->init(2,_hx_tmp1)->init(3, ::Dynamic(subEvent->__Field(HX_("strumTime",f6,2d,21,f4),::hx::paccDynamic))),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,makeEvent,(void))

void PlayState_obj::generateStaticArrows(int player){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1528_generateStaticArrows)
HXLINE(1529)		Float strumLineX;
HXDLIN(1529)		if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE(1529)			strumLineX = ( (Float)(::states::PlayState_obj::STRUM_X_MIDDLESCROLL) );
            		}
            		else {
HXLINE(1529)			strumLineX = ( (Float)(::states::PlayState_obj::STRUM_X) );
            		}
HXLINE(1530)		Float strumLineY;
HXDLIN(1530)		if (::backend::ClientPrefs_obj::data->downScroll) {
HXLINE(1530)			strumLineY = ( (Float)((::flixel::FlxG_obj::height - 150)) );
            		}
            		else {
HXLINE(1530)			strumLineY = ( (Float)(50) );
            		}
HXLINE(1531)		{
HXLINE(1531)			int _g = 0;
HXDLIN(1531)			while((_g < 4)){
HXLINE(1531)				_g = (_g + 1);
HXDLIN(1531)				int i = (_g - 1);
HXLINE(1534)				Float targetAlpha = ( (Float)(1) );
HXLINE(1535)				if ((player < 1)) {
HXLINE(1537)					if (!(::backend::ClientPrefs_obj::data->opponentStrums)) {
HXLINE(1537)						targetAlpha = ( (Float)(0) );
            					}
            					else {
HXLINE(1538)						if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE(1538)							targetAlpha = ((Float)0.35);
            						}
            					}
            				}
HXLINE(1541)				 ::objects::StrumNote babyArrow =  ::objects::StrumNote_obj::__alloc( HX_CTX ,strumLineX,strumLineY,i,player);
HXLINE(1542)				babyArrow->downScroll = ::backend::ClientPrefs_obj::data->downScroll;
HXLINE(1543)				bool _hx_tmp;
HXDLIN(1543)				if (!(::states::PlayState_obj::isStoryMode)) {
HXLINE(1543)					_hx_tmp = !(this->skipArrowStartTween);
            				}
            				else {
HXLINE(1543)					_hx_tmp = false;
            				}
HXDLIN(1543)				if (_hx_tmp) {
HXLINE(1546)					babyArrow->set_alpha(( (Float)(0) ));
HXLINE(1547)					::flixel::tweens::FlxTween_obj::tween(babyArrow, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),targetAlpha)),1, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("startDelay",c1,af,3d,f3),(((Float)0.5) + (((Float)0.2) * ( (Float)(i) ))))
            						->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
            				}
            				else {
HXLINE(1549)					babyArrow->set_alpha(targetAlpha);
            				}
HXLINE(1551)				if ((player == 1)) {
HXLINE(1552)					this->playerStrums->add(babyArrow).StaticCast<  ::objects::StrumNote >();
            				}
            				else {
HXLINE(1555)					if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE(1557)						babyArrow->set_x((babyArrow->x + 310));
HXLINE(1558)						if ((i > 1)) {
HXLINE(1559)							babyArrow->set_x((babyArrow->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 25)));
            						}
            					}
HXLINE(1562)					this->opponentStrums->add(babyArrow).StaticCast<  ::objects::StrumNote >();
            				}
HXLINE(1565)				this->strumLineNotes->add(babyArrow).StaticCast<  ::objects::StrumNote >();
HXLINE(1566)				babyArrow->playerPosition();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateStaticArrows,(void))

void PlayState_obj::openSubState( ::flixel::FlxSubState SubState){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSubState,SubState) HXARGC(1)
            		void _hx_run( ::backend::BaseStage stage){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_1572_openSubState)
HXLINE(1572)			stage->openSubState(SubState);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1571_openSubState)
HXLINE(1572)		this->stagesFunc( ::Dynamic(new _hx_Closure_0(SubState)));
HXLINE(1573)		if (this->paused) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_STACKFRAME(&_hx_pos_801e532e222627de_1581_openSubState)
HXLINE(1581)				if (!(tmr->finished)) {
HXLINE(1581)					tmr->active = false;
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween twn){
            				HX_STACKFRAME(&_hx_pos_801e532e222627de_1582_openSubState)
HXLINE(1582)				if (!(twn->finished)) {
HXLINE(1582)					twn->set_active(false);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1575)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1577)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1578)				this->vocals->pause();
HXLINE(1579)				this->opponentVocals->pause();
            			}
HXLINE(1581)			::flixel::util::FlxTimer_obj::globalManager->forEach( ::Dynamic(new _hx_Closure_1()));
HXLINE(1582)			::flixel::tweens::FlxTween_obj::globalManager->forEach( ::Dynamic(new _hx_Closure_2()));
            		}
HXLINE(1585)		this->super::openSubState(SubState);
            	}


void PlayState_obj::closeSubState(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::backend::BaseStage stage){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_1593_closeSubState)
HXLINE(1593)			stage->closeSubState();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1590_closeSubState)
HXLINE(1591)		this->super::closeSubState();
HXLINE(1593)		this->stagesFunc( ::Dynamic(new _hx_Closure_0()));
HXLINE(1594)		if (this->paused) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_STACKFRAME(&_hx_pos_801e532e222627de_1600_closeSubState)
HXLINE(1600)				if (!(tmr->finished)) {
HXLINE(1600)					tmr->active = true;
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween twn){
            				HX_STACKFRAME(&_hx_pos_801e532e222627de_1601_closeSubState)
HXLINE(1601)				if (!(twn->finished)) {
HXLINE(1601)					twn->set_active(true);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1596)			bool _hx_tmp;
HXDLIN(1596)			bool _hx_tmp1;
HXDLIN(1596)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1596)				_hx_tmp1 = !(this->startingSong);
            			}
            			else {
HXLINE(1596)				_hx_tmp1 = false;
            			}
HXDLIN(1596)			if (_hx_tmp1) {
HXLINE(1596)				_hx_tmp = this->canResync;
            			}
            			else {
HXLINE(1596)				_hx_tmp = false;
            			}
HXDLIN(1596)			if (_hx_tmp) {
HXLINE(1598)				this->resyncVocals();
            			}
HXLINE(1600)			::flixel::util::FlxTimer_obj::globalManager->forEach( ::Dynamic(new _hx_Closure_1()));
HXLINE(1601)			::flixel::tweens::FlxTween_obj::globalManager->forEach( ::Dynamic(new _hx_Closure_2()));
HXLINE(1603)			this->paused = false;
HXLINE(1604)			this->callOnScripts(HX_("onResume",2c,60,31,e8),null(),null(),null(),null());
HXLINE(1605)			bool _hx_tmp2;
HXDLIN(1605)			if (::hx::IsNotNull( this->startTimer )) {
HXLINE(1605)				_hx_tmp2 = this->startTimer->finished;
            			}
            			else {
HXLINE(1605)				_hx_tmp2 = false;
            			}
HXDLIN(1605)			this->resetRPC(_hx_tmp2);
            		}
            	}


void PlayState_obj::onFocus(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1611_onFocus)
HXLINE(1612)		this->super::onFocus();
HXLINE(1613)		bool _hx_tmp;
HXDLIN(1613)		if (!(this->paused)) {
HXLINE(1613)			_hx_tmp = (this->health > 0);
            		}
            		else {
HXLINE(1613)			_hx_tmp = false;
            		}
HXDLIN(1613)		if (_hx_tmp) {
HXLINE(1615)			this->resetRPC((::backend::Conductor_obj::songPosition > ((Float)0.0)));
            		}
            	}


void PlayState_obj::onFocusLost(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1620_onFocusLost)
HXLINE(1621)		this->super::onFocusLost();
HXLINE(1622)		bool _hx_tmp;
HXDLIN(1622)		bool _hx_tmp1;
HXDLIN(1622)		if (!(this->paused)) {
HXLINE(1622)			_hx_tmp1 = (this->health > 0);
            		}
            		else {
HXLINE(1622)			_hx_tmp1 = false;
            		}
HXDLIN(1622)		if (_hx_tmp1) {
HXLINE(1622)			_hx_tmp = this->autoUpdateRPC;
            		}
            		else {
HXLINE(1622)			_hx_tmp = false;
            		}
HXDLIN(1622)		if (_hx_tmp) {
HXLINE(1624)			::String _hx_tmp2 = this->detailsPausedText;
HXDLIN(1624)			::String _hx_tmp3 = ( (::String)((((::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) );
HXDLIN(1624)			::backend::DiscordClient_obj::changePresence(_hx_tmp2,_hx_tmp3,this->iconP2->getCharacter(),null(),null(),null());
            		}
            	}


void PlayState_obj::resetRPC( ::Dynamic __o_showTime){
            		 ::Dynamic showTime = __o_showTime;
            		if (::hx::IsNull(__o_showTime)) showTime = false;
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1632_resetRPC)
HXLINE(1634)		if (!(this->autoUpdateRPC)) {
HXLINE(1634)			return;
            		}
HXLINE(1636)		if (( (bool)(showTime) )) {
HXLINE(1637)			::String _hx_tmp = this->detailsText;
HXDLIN(1637)			::String _hx_tmp1 = ( (::String)((((::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) );
HXDLIN(1637)			::String _hx_tmp2 = this->iconP2->getCharacter();
HXDLIN(1637)			::backend::DiscordClient_obj::changePresence(_hx_tmp,_hx_tmp1,_hx_tmp2,true,((this->songLength - ::backend::Conductor_obj::songPosition) - ( (Float)(::backend::ClientPrefs_obj::data->noteOffset) )),null());
            		}
            		else {
HXLINE(1639)			::String _hx_tmp3 = this->detailsText;
HXDLIN(1639)			::String _hx_tmp4 = ( (::String)((((::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) );
HXDLIN(1639)			::backend::DiscordClient_obj::changePresence(_hx_tmp3,_hx_tmp4,this->iconP2->getCharacter(),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,resetRPC,(void))

void PlayState_obj::resyncVocals(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1644_resyncVocals)
HXLINE(1645)		if (::hx::IsNotNull( this->finishTimer )) {
HXLINE(1645)			return;
            		}
HXLINE(1647)		::haxe::Log_obj::trace((HX_("resynced vocals at ",de,14,6b,8b) + ::Math_obj::floor(::backend::Conductor_obj::songPosition)),::hx::SourceInfo(HX_("source/states/PlayState.hx",3a,21,29,28),1647,HX_("states.PlayState",31,cd,20,04),HX_("resyncVocals",8c,16,ed,6a)));
HXLINE(1649)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(1650)		::flixel::FlxG_obj::sound->music->set_pitch(this->playbackRate);
HXLINE(1651)		::backend::Conductor_obj::songPosition = (::flixel::FlxG_obj::sound->music->_time + ::backend::Conductor_obj::offset);
HXLINE(1653)		::Array< ::Dynamic> checkVocals = ::Array_obj< ::Dynamic>::__new(2)->init(0,this->vocals)->init(1,this->opponentVocals);
HXLINE(1654)		{
HXLINE(1654)			int _g = 0;
HXDLIN(1654)			while((_g < checkVocals->length)){
HXLINE(1654)				 ::flixel::sound::FlxSound voc = checkVocals->__get(_g).StaticCast<  ::flixel::sound::FlxSound >();
HXDLIN(1654)				_g = (_g + 1);
HXLINE(1656)				if ((::flixel::FlxG_obj::sound->music->_time < this->vocals->_length)) {
HXLINE(1658)					voc->set_time(::flixel::FlxG_obj::sound->music->_time);
HXLINE(1659)					voc->set_pitch(this->playbackRate);
HXLINE(1660)					voc->play(null(),null(),null());
            				}
            				else {
HXLINE(1662)					voc->pause();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resyncVocals,(void))

void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1674_update)
HXLINE(1675)		bool _hx_tmp;
HXDLIN(1675)		bool _hx_tmp1;
HXDLIN(1675)		if (!(this->inCutscene)) {
HXLINE(1675)			_hx_tmp1 = !(this->paused);
            		}
            		else {
HXLINE(1675)			_hx_tmp1 = false;
            		}
HXDLIN(1675)		if (_hx_tmp1) {
HXLINE(1675)			_hx_tmp = !(this->freezeCamera);
            		}
            		else {
HXLINE(1675)			_hx_tmp = false;
            		}
HXDLIN(1675)		if (_hx_tmp) {
HXLINE(1676)			::flixel::FlxG_obj::camera->set_followLerp(((((Float)0.04) * this->cameraSpeed) * this->playbackRate));
HXLINE(1677)			bool idleAnim;
HXDLIN(1677)			bool idleAnim1;
HXDLIN(1677)			if (!(::StringTools_obj::startsWith(this->boyfriend->_lastPlayedAnimation,HX_("idle",14,a7,b3,45)))) {
HXLINE(1677)				idleAnim1 = ::StringTools_obj::startsWith(this->boyfriend->_lastPlayedAnimation,HX_("danceLeft",da,cc,f9,df));
            			}
            			else {
HXLINE(1677)				idleAnim1 = true;
            			}
HXDLIN(1677)			if (!(idleAnim1)) {
HXLINE(1677)				idleAnim = ::StringTools_obj::startsWith(this->boyfriend->_lastPlayedAnimation,HX_("danceRight",a9,7f,a6,91));
            			}
            			else {
HXLINE(1677)				idleAnim = true;
            			}
HXLINE(1678)			bool _hx_tmp2;
HXDLIN(1678)			bool _hx_tmp3;
HXDLIN(1678)			if (!(this->startingSong)) {
HXLINE(1678)				_hx_tmp3 = !(this->endingSong);
            			}
            			else {
HXLINE(1678)				_hx_tmp3 = false;
            			}
HXDLIN(1678)			if (_hx_tmp3) {
HXLINE(1678)				_hx_tmp2 = idleAnim;
            			}
            			else {
HXLINE(1678)				_hx_tmp2 = false;
            			}
HXDLIN(1678)			if (_hx_tmp2) {
HXLINE(1679)				 ::states::PlayState _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1679)				_hx_tmp4->boyfriendIdleTime = (_hx_tmp4->boyfriendIdleTime + elapsed);
HXLINE(1680)				if ((this->boyfriendIdleTime >= ((Float)0.15))) {
HXLINE(1681)					this->boyfriendIdled = true;
            				}
            			}
            			else {
HXLINE(1684)				this->boyfriendIdleTime = ( (Float)(0) );
            			}
            		}
            		else {
HXLINE(1687)			::flixel::FlxG_obj::camera->set_followLerp(( (Float)(0) ));
            		}
HXLINE(1688)		this->callOnScripts(HX_("onUpdate",88,7c,b2,66),::cpp::VirtualArray_obj::__new(1)->init(0,elapsed),null(),null(),null());
HXLINE(1690)		this->super::update(elapsed);
HXLINE(1692)		this->setOnScripts(HX_("curDecStep",8e,a8,37,e3),this->curDecStep,null());
HXLINE(1693)		this->setOnScripts(HX_("curDecBeat",b8,a2,ef,d7),this->curDecBeat,null());
HXLINE(1695)		bool _hx_tmp5;
HXDLIN(1695)		if (::hx::IsNotNull( this->botplayTxt )) {
HXLINE(1695)			_hx_tmp5 = this->botplayTxt->visible;
            		}
            		else {
HXLINE(1695)			_hx_tmp5 = false;
            		}
HXDLIN(1695)		if (_hx_tmp5) {
HXLINE(1696)			 ::states::PlayState _hx_tmp6 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1696)			_hx_tmp6->botplaySine = (_hx_tmp6->botplaySine + (( (Float)(180) ) * elapsed));
HXLINE(1697)			this->botplayTxt->set_alpha((( (Float)(1) ) - ::Math_obj::sin(((::Math_obj::PI * this->botplaySine) / ( (Float)(180) )))));
            		}
HXLINE(1700)		bool _hx_tmp7;
HXDLIN(1700)		bool _hx_tmp8;
HXDLIN(1700)		if (this->get_controls()->get_PAUSE()) {
HXLINE(1700)			_hx_tmp8 = this->startedCountdown;
            		}
            		else {
HXLINE(1700)			_hx_tmp8 = false;
            		}
HXDLIN(1700)		if (_hx_tmp8) {
HXLINE(1700)			_hx_tmp7 = this->canPause;
            		}
            		else {
HXLINE(1700)			_hx_tmp7 = false;
            		}
HXDLIN(1700)		if (_hx_tmp7) {
HXLINE(1702)			 ::Dynamic ret = this->callOnScripts(HX_("onPause",57,75,95,53),null(),true,null(),null());
HXLINE(1703)			if (::hx::IsNotEq( ret,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(1704)				this->openPauseMenu();
            			}
            		}
HXLINE(1708)		bool _hx_tmp9;
HXDLIN(1708)		bool _hx_tmp10;
HXDLIN(1708)		if (!(this->endingSong)) {
HXLINE(1708)			_hx_tmp10 = !(this->inCutscene);
            		}
            		else {
HXLINE(1708)			_hx_tmp10 = false;
            		}
HXDLIN(1708)		if (_hx_tmp10) {
HXLINE(1708)			_hx_tmp9 = this->allowDebugKeys;
            		}
            		else {
HXLINE(1708)			_hx_tmp9 = false;
            		}
HXDLIN(1708)		if (_hx_tmp9) {
HXLINE(1710)			if (this->get_controls()->justPressed(HX_("debug_1",05,20,57,5b))) {
HXLINE(1711)				this->openChartEditor();
            			}
            			else {
HXLINE(1712)				if (this->get_controls()->justPressed(HX_("debug_2",06,20,57,5b))) {
HXLINE(1713)					this->openCharacterEditor();
            				}
            			}
            		}
HXLINE(1716)		bool _hx_tmp11;
HXDLIN(1716)		if (::hx::IsNotNull( this->healthBar->bounds->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic) )) {
HXLINE(1716)			_hx_tmp11 = ::hx::IsGreater( this->health,this->healthBar->bounds->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic) );
            		}
            		else {
HXLINE(1716)			_hx_tmp11 = false;
            		}
HXDLIN(1716)		if (_hx_tmp11) {
HXLINE(1717)			this->set_health(( (Float)(this->healthBar->bounds->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic)) ));
            		}
HXLINE(1719)		this->updateIconsScale(elapsed);
HXLINE(1720)		this->updateIconsPosition();
HXLINE(1722)		bool _hx_tmp12;
HXDLIN(1722)		if (this->startedCountdown) {
HXLINE(1722)			_hx_tmp12 = !(this->paused);
            		}
            		else {
HXLINE(1722)			_hx_tmp12 = false;
            		}
HXDLIN(1722)		if (_hx_tmp12) {
HXLINE(1724)			 ::Dynamic _hx_tmp13 = ::hx::ClassOf< ::backend::Conductor >();
HXDLIN(1724)			::backend::Conductor_obj::songPosition = (::backend::Conductor_obj::songPosition + ((elapsed * ( (Float)(1000) )) * this->playbackRate));
HXLINE(1725)			if ((::backend::Conductor_obj::songPosition >= ::backend::Conductor_obj::offset)) {
HXLINE(1727)				Float a = (::flixel::FlxG_obj::sound->music->_time + ::backend::Conductor_obj::offset);
HXDLIN(1727)				::backend::Conductor_obj::songPosition = (a + (::Math_obj::exp((-(elapsed) * ( (Float)(5) ))) * (::backend::Conductor_obj::songPosition - a)));
HXLINE(1728)				Float timeDiff = ::Math_obj::abs(((::flixel::FlxG_obj::sound->music->_time + ::backend::Conductor_obj::offset) - ::backend::Conductor_obj::songPosition));
HXLINE(1729)				if ((timeDiff > (( (Float)(1000) ) * this->playbackRate))) {
HXLINE(1730)					int _hx_tmp14;
HXDLIN(1730)					if ((timeDiff < 0)) {
HXLINE(1730)						_hx_tmp14 = -1;
            					}
            					else {
HXLINE(1730)						_hx_tmp14 = 1;
            					}
HXDLIN(1730)					::backend::Conductor_obj::songPosition = (::backend::Conductor_obj::songPosition + (1000 * _hx_tmp14));
            				}
            			}
            		}
HXLINE(1734)		if (this->startingSong) {
HXLINE(1736)			bool _hx_tmp15;
HXDLIN(1736)			if (this->startedCountdown) {
HXLINE(1736)				_hx_tmp15 = (::backend::Conductor_obj::songPosition >= ::backend::Conductor_obj::offset);
            			}
            			else {
HXLINE(1736)				_hx_tmp15 = false;
            			}
HXDLIN(1736)			if (_hx_tmp15) {
HXLINE(1737)				this->startSong();
            			}
            			else {
HXLINE(1738)				if (!(this->startedCountdown)) {
HXLINE(1739)					::backend::Conductor_obj::songPosition = ((-(::backend::Conductor_obj::crochet) * ( (Float)(5) )) + ::backend::Conductor_obj::offset);
            				}
            			}
            		}
            		else {
HXLINE(1741)			bool _hx_tmp16;
HXDLIN(1741)			if (!(this->paused)) {
HXLINE(1741)				_hx_tmp16 = this->updateTime;
            			}
            			else {
HXLINE(1741)				_hx_tmp16 = false;
            			}
HXDLIN(1741)			if (_hx_tmp16) {
HXLINE(1743)				Float curTime = ::Math_obj::max(( (Float)(0) ),(::backend::Conductor_obj::songPosition - ( (Float)(::backend::ClientPrefs_obj::data->noteOffset) )));
HXLINE(1744)				this->songPercent = (curTime / this->songLength);
HXLINE(1746)				Float songCalc = (this->songLength - curTime);
HXLINE(1747)				if ((::backend::ClientPrefs_obj::data->timeBarType == HX_("Time Elapsed",29,71,5d,35))) {
HXLINE(1747)					songCalc = curTime;
            				}
HXLINE(1749)				int secondsTotal = ::Math_obj::floor((songCalc / ( (Float)(1000) )));
HXLINE(1750)				if ((secondsTotal < 0)) {
HXLINE(1750)					secondsTotal = 0;
            				}
HXLINE(1752)				if ((::backend::ClientPrefs_obj::data->timeBarType != HX_("Song Name",76,e6,ca,de))) {
HXLINE(1753)					 ::flixel::text::FlxText _hx_tmp17 = this->timeTxt;
HXDLIN(1753)					_hx_tmp17->set_text(::flixel::util::FlxStringUtil_obj::formatTime(( (Float)(secondsTotal) ),false));
            				}
            			}
            		}
HXLINE(1756)		if (this->camZooming) {
HXLINE(1758)			Float a1 = this->defaultCamZoom;
HXDLIN(1758)			::flixel::FlxG_obj::camera->set_zoom((a1 + (::Math_obj::exp((((-(elapsed) * ((Float)3.125)) * this->camZoomingDecay) * this->playbackRate)) * (::flixel::FlxG_obj::camera->zoom - a1))));
HXLINE(1759)			this->camHUD->set_zoom((1 + (::Math_obj::exp((((-(elapsed) * ((Float)3.125)) * this->camZoomingDecay) * this->playbackRate)) * (this->camHUD->zoom - ( (Float)(1) )))));
            		}
HXLINE(1767)		bool _hx_tmp18;
HXDLIN(1767)		bool _hx_tmp19;
HXDLIN(1767)		bool _hx_tmp20;
HXDLIN(1767)		bool _hx_tmp21;
HXDLIN(1767)		bool _hx_tmp22;
HXDLIN(1767)		if (!(::backend::ClientPrefs_obj::data->noReset)) {
HXLINE(1767)			_hx_tmp22 = this->get_controls()->get_RESET();
            		}
            		else {
HXLINE(1767)			_hx_tmp22 = false;
            		}
HXDLIN(1767)		if (_hx_tmp22) {
HXLINE(1767)			_hx_tmp21 = this->canReset;
            		}
            		else {
HXLINE(1767)			_hx_tmp21 = false;
            		}
HXDLIN(1767)		if (_hx_tmp21) {
HXLINE(1767)			_hx_tmp20 = !(this->inCutscene);
            		}
            		else {
HXLINE(1767)			_hx_tmp20 = false;
            		}
HXDLIN(1767)		if (_hx_tmp20) {
HXLINE(1767)			_hx_tmp19 = this->startedCountdown;
            		}
            		else {
HXLINE(1767)			_hx_tmp19 = false;
            		}
HXDLIN(1767)		if (_hx_tmp19) {
HXLINE(1767)			_hx_tmp18 = !(this->endingSong);
            		}
            		else {
HXLINE(1767)			_hx_tmp18 = false;
            		}
HXDLIN(1767)		if (_hx_tmp18) {
HXLINE(1769)			this->set_health(( (Float)(0) ));
HXLINE(1770)			::haxe::Log_obj::trace(HX_("RESET = True",82,e0,2a,fe),::hx::SourceInfo(HX_("source/states/PlayState.hx",3a,21,29,28),1770,HX_("states.PlayState",31,cd,20,04),HX_("update",09,86,05,87)));
            		}
HXLINE(1772)		this->doDeathCheck(null());
HXLINE(1774)		if (::hx::IsNotNull( this->unspawnNotes->__get(0).StaticCast<  ::objects::Note >() )) {
HXLINE(1776)			Float time = (this->spawnTime * this->playbackRate);
HXLINE(1777)			if ((this->songSpeed < 1)) {
HXLINE(1777)				time = (time / this->songSpeed);
            			}
HXLINE(1778)			if ((this->unspawnNotes->__get(0).StaticCast<  ::objects::Note >()->multSpeed < 1)) {
HXLINE(1778)				time = (time / this->unspawnNotes->__get(0).StaticCast<  ::objects::Note >()->multSpeed);
            			}
HXLINE(1780)			while(true){
HXLINE(1780)				bool _hx_tmp23;
HXDLIN(1780)				if ((this->unspawnNotes->length > 0)) {
HXLINE(1780)					_hx_tmp23 = ((this->unspawnNotes->__get(0).StaticCast<  ::objects::Note >()->strumTime - ::backend::Conductor_obj::songPosition) < time);
            				}
            				else {
HXLINE(1780)					_hx_tmp23 = false;
            				}
HXDLIN(1780)				if (!(_hx_tmp23)) {
HXLINE(1780)					goto _hx_goto_119;
            				}
HXLINE(1782)				 ::objects::Note dunceNote = this->unspawnNotes->__get(0).StaticCast<  ::objects::Note >();
HXLINE(1783)				this->notes->insert(0,dunceNote).StaticCast<  ::objects::Note >();
HXLINE(1784)				dunceNote->spawned = true;
HXLINE(1786)				int _hx_tmp24 = this->notes->members->indexOf(dunceNote,null());
HXDLIN(1786)				this->callOnLuas(HX_("onSpawnNote",ae,fe,d7,ca),::cpp::VirtualArray_obj::__new(5)->init(0,_hx_tmp24)->init(1,dunceNote->noteData)->init(2,dunceNote->noteType)->init(3,dunceNote->isSustainNote)->init(4,dunceNote->strumTime),null(),null(),null());
HXLINE(1787)				this->callOnHScript(HX_("onSpawnNote",ae,fe,d7,ca),::cpp::VirtualArray_obj::__new(1)->init(0,dunceNote),null(),null(),null());
HXLINE(1789)				int index = this->unspawnNotes->indexOf(dunceNote,null());
HXLINE(1790)				this->unspawnNotes->removeRange(index,1);
            			}
            			_hx_goto_119:;
            		}
HXLINE(1794)		if (this->generatedMusic) {
HXLINE(1796)			if (!(this->inCutscene)) {
HXLINE(1798)				if (!(this->cpuControlled)) {
HXLINE(1799)					this->keysCheck();
            				}
            				else {
HXLINE(1801)					this->playerDance();
            				}
HXLINE(1803)				if ((this->notes->length > 0)) {
HXLINE(1805)					if (this->startedCountdown) {
HXLINE(1807)						Float fakeCrochet = ((( (Float)(60) ) / ( (Float)(::states::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) )) * ( (Float)(1000) ));
HXLINE(1808)						int i = 0;
HXLINE(1809)						while((i < this->notes->length)){
HXLINE(1811)							 ::objects::Note daNote = Dynamic( this->notes->members->__get(i)).StaticCast<  ::objects::Note >();
HXLINE(1812)							if (::hx::IsNull( daNote )) {
HXLINE(1812)								continue;
            							}
HXLINE(1814)							 ::flixel::group::FlxTypedGroup strumGroup = this->playerStrums;
HXLINE(1815)							if (!(daNote->mustPress)) {
HXLINE(1815)								strumGroup = this->opponentStrums;
            							}
HXLINE(1817)							 ::objects::StrumNote strum = Dynamic( strumGroup->members->__get(daNote->noteData)).StaticCast<  ::objects::StrumNote >();
HXLINE(1818)							daNote->followStrumNote(strum,fakeCrochet,(this->songSpeed / this->playbackRate));
HXLINE(1820)							if (daNote->mustPress) {
HXLINE(1822)								bool _hx_tmp25;
HXDLIN(1822)								bool _hx_tmp26;
HXDLIN(1822)								bool _hx_tmp27;
HXDLIN(1822)								if (this->cpuControlled) {
HXLINE(1822)									_hx_tmp27 = !(daNote->blockHit);
            								}
            								else {
HXLINE(1822)									_hx_tmp27 = false;
            								}
HXDLIN(1822)								if (_hx_tmp27) {
HXLINE(1822)									_hx_tmp26 = daNote->canBeHit;
            								}
            								else {
HXLINE(1822)									_hx_tmp26 = false;
            								}
HXDLIN(1822)								if (_hx_tmp26) {
HXLINE(1822)									if (!(daNote->isSustainNote)) {
HXLINE(1822)										_hx_tmp25 = (daNote->strumTime <= ::backend::Conductor_obj::songPosition);
            									}
            									else {
HXLINE(1822)										_hx_tmp25 = true;
            									}
            								}
            								else {
HXLINE(1822)									_hx_tmp25 = false;
            								}
HXDLIN(1822)								if (_hx_tmp25) {
HXLINE(1823)									this->goodNoteHit(daNote);
            								}
            							}
            							else {
HXLINE(1825)								bool _hx_tmp28;
HXDLIN(1825)								bool _hx_tmp29;
HXDLIN(1825)								if (daNote->wasGoodHit) {
HXLINE(1825)									_hx_tmp29 = !(daNote->hitByOpponent);
            								}
            								else {
HXLINE(1825)									_hx_tmp29 = false;
            								}
HXDLIN(1825)								if (_hx_tmp29) {
HXLINE(1825)									_hx_tmp28 = !(daNote->ignoreNote);
            								}
            								else {
HXLINE(1825)									_hx_tmp28 = false;
            								}
HXDLIN(1825)								if (_hx_tmp28) {
HXLINE(1826)									this->opponentNoteHit(daNote);
            								}
            							}
HXLINE(1828)							bool _hx_tmp30;
HXDLIN(1828)							if (daNote->isSustainNote) {
HXLINE(1828)								_hx_tmp30 = strum->sustainReduce;
            							}
            							else {
HXLINE(1828)								_hx_tmp30 = false;
            							}
HXDLIN(1828)							if (_hx_tmp30) {
HXLINE(1828)								daNote->clipToStrumNote(strum);
            							}
HXLINE(1831)							if (((::backend::Conductor_obj::songPosition - daNote->strumTime) > this->noteKillOffset)) {
HXLINE(1833)								bool _hx_tmp31;
HXDLIN(1833)								bool _hx_tmp32;
HXDLIN(1833)								bool _hx_tmp33;
HXDLIN(1833)								bool _hx_tmp34;
HXDLIN(1833)								if (daNote->mustPress) {
HXLINE(1833)									_hx_tmp34 = !(this->cpuControlled);
            								}
            								else {
HXLINE(1833)									_hx_tmp34 = false;
            								}
HXDLIN(1833)								if (_hx_tmp34) {
HXLINE(1833)									_hx_tmp33 = !(daNote->ignoreNote);
            								}
            								else {
HXLINE(1833)									_hx_tmp33 = false;
            								}
HXDLIN(1833)								if (_hx_tmp33) {
HXLINE(1833)									_hx_tmp32 = !(this->endingSong);
            								}
            								else {
HXLINE(1833)									_hx_tmp32 = false;
            								}
HXDLIN(1833)								if (_hx_tmp32) {
HXLINE(1833)									if (!(daNote->tooLate)) {
HXLINE(1833)										_hx_tmp31 = !(daNote->wasGoodHit);
            									}
            									else {
HXLINE(1833)										_hx_tmp31 = true;
            									}
            								}
            								else {
HXLINE(1833)									_hx_tmp31 = false;
            								}
HXDLIN(1833)								if (_hx_tmp31) {
HXLINE(1834)									this->noteMiss(daNote);
            								}
HXLINE(1836)								daNote->set_active(daNote->set_visible(false));
HXLINE(1837)								this->invalidateNote(daNote);
            							}
HXLINE(1839)							if (daNote->exists) {
HXLINE(1839)								i = (i + 1);
            							}
            						}
            					}
            					else {
            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            						void _hx_run( ::objects::Note daNote){
            							HX_STACKFRAME(&_hx_pos_801e532e222627de_1845_update)
HXLINE(1846)							daNote->canBeHit = false;
HXLINE(1847)							daNote->wasGoodHit = false;
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(1844)						this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0()),null());
            					}
            				}
            			}
HXLINE(1852)			this->checkEventNote();
            		}
HXLINE(1868)		this->setOnScripts(HX_("botPlay",9b,27,83,4c),this->cpuControlled,null());
HXLINE(1869)		this->callOnScripts(HX_("onUpdatePost",08,11,55,db),::cpp::VirtualArray_obj::__new(1)->init(0,elapsed),null(),null(),null());
            	}


HX_BEGIN_DEFAULT_FUNC(__default_updateIconsScale,PlayState_obj)
void _hx_run(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1874___default_updateIconsScale)
HXLINE(1875)		Float mult = (1 + (::Math_obj::exp(((-(elapsed) * ( (Float)(9) )) * ( ( ::states::PlayState)(__this) )->playbackRate)) * (( ( ::states::PlayState)(__this) )->iconP1->scale->x - ( (Float)(1) ))));
HXLINE(1876)		{
HXLINE(1876)			 ::flixel::math::FlxBasePoint this1 = ( ( ::states::PlayState)(__this) )->iconP1->scale;
HXDLIN(1876)			this1->set_x(mult);
HXDLIN(1876)			this1->set_y(mult);
            		}
HXLINE(1877)		( ( ::states::PlayState)(__this) )->iconP1->updateHitbox();
HXLINE(1879)		Float mult1 = (1 + (::Math_obj::exp(((-(elapsed) * ( (Float)(9) )) * ( ( ::states::PlayState)(__this) )->playbackRate)) * (( ( ::states::PlayState)(__this) )->iconP2->scale->x - ( (Float)(1) ))));
HXLINE(1880)		{
HXLINE(1880)			 ::flixel::math::FlxBasePoint this2 = ( ( ::states::PlayState)(__this) )->iconP2->scale;
HXDLIN(1880)			this2->set_x(mult1);
HXDLIN(1880)			this2->set_y(mult1);
            		}
HXLINE(1881)		( ( ::states::PlayState)(__this) )->iconP2->updateHitbox();
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_updateIconsPosition,PlayState_obj)
void _hx_run(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1885___default_updateIconsPosition)
HXLINE(1886)		int iconOffset = 26;
HXLINE(1887)		( ( ::states::PlayState)(__this) )->iconP1->set_x(((( ( ::states::PlayState)(__this) )->healthBar->barCenter + (((( (Float)(150) ) * ( ( ::states::PlayState)(__this) )->iconP1->scale->x) - ( (Float)(150) )) / ( (Float)(2) ))) - ( (Float)(iconOffset) )));
HXLINE(1888)		( ( ::states::PlayState)(__this) )->iconP2->set_x(((( ( ::states::PlayState)(__this) )->healthBar->barCenter - ((( (Float)(150) ) * ( ( ::states::PlayState)(__this) )->iconP2->scale->x) / ( (Float)(2) ))) - ( (Float)((iconOffset * 2)) )));
            	}
HX_END_LOCAL_FUNC0((void))
HX_END_DEFAULT_FUNC

Float PlayState_obj::set_health(Float value){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1893_set_health)
HXLINE(1894)		value = ::flixel::math::FlxMath_obj::roundDecimal(value,5);
HXLINE(1895)		bool _hx_tmp;
HXDLIN(1895)		bool _hx_tmp1;
HXDLIN(1895)		bool _hx_tmp2;
HXDLIN(1895)		if (this->iconsAnimations) {
HXLINE(1895)			_hx_tmp2 = ::hx::IsNull( this->healthBar );
            		}
            		else {
HXLINE(1895)			_hx_tmp2 = true;
            		}
HXDLIN(1895)		if (!(_hx_tmp2)) {
HXLINE(1895)			_hx_tmp1 = !(this->healthBar->enabled);
            		}
            		else {
HXLINE(1895)			_hx_tmp1 = true;
            		}
HXDLIN(1895)		if (!(_hx_tmp1)) {
HXLINE(1895)			_hx_tmp = ::hx::IsNull( this->healthBar->valueFunction );
            		}
            		else {
HXLINE(1895)			_hx_tmp = true;
            		}
HXDLIN(1895)		if (_hx_tmp) {
HXLINE(1897)			this->health = value;
HXLINE(1898)			return this->health;
            		}
HXLINE(1902)		this->health = value;
HXLINE(1903)		Float Value = ( (Float)(this->healthBar->valueFunction()) );
HXDLIN(1903)		 ::Dynamic Min = this->healthBar->bounds->__Field(HX_("min",92,11,53,00),::hx::paccDynamic);
HXDLIN(1903)		 ::Dynamic Max = this->healthBar->bounds->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic);
HXDLIN(1903)		Float lowerBound;
HXDLIN(1903)		bool lowerBound1;
HXDLIN(1903)		if (::hx::IsNotNull( Min )) {
HXLINE(1903)			lowerBound1 = ::hx::IsLess( Value,Min );
            		}
            		else {
HXLINE(1903)			lowerBound1 = false;
            		}
HXDLIN(1903)		if (lowerBound1) {
HXLINE(1903)			lowerBound = ( (Float)(Min) );
            		}
            		else {
HXLINE(1903)			lowerBound = Value;
            		}
HXDLIN(1903)		Float newPercent;
HXDLIN(1903)		bool newPercent1;
HXDLIN(1903)		if (::hx::IsNotNull( Max )) {
HXLINE(1903)			newPercent1 = ::hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE(1903)			newPercent1 = false;
            		}
HXDLIN(1903)		if (newPercent1) {
HXLINE(1903)			newPercent = ( (Float)(Max) );
            		}
            		else {
HXLINE(1903)			newPercent = lowerBound;
            		}
HXDLIN(1903)		 ::Dynamic newPercent2 = ::flixel::math::FlxMath_obj::remapToRange(newPercent,( (Float)(this->healthBar->bounds->__Field(HX_("min",92,11,53,00),::hx::paccDynamic)) ),( (Float)(this->healthBar->bounds->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic)) ),( (Float)(0) ),( (Float)(100) ));
HXLINE(1904)		Float _hx_tmp3;
HXDLIN(1904)		if (::hx::IsNotNull( newPercent2 )) {
HXLINE(1904)			_hx_tmp3 = ( (Float)(newPercent2) );
            		}
            		else {
HXLINE(1904)			_hx_tmp3 = ( (Float)(0) );
            		}
HXDLIN(1904)		this->healthBar->set_percent(_hx_tmp3);
HXLINE(1906)		int _hx_tmp4;
HXDLIN(1906)		if ((this->healthBar->percent < 20)) {
HXLINE(1906)			_hx_tmp4 = 1;
            		}
            		else {
HXLINE(1906)			_hx_tmp4 = 0;
            		}
HXDLIN(1906)		this->iconP1->animation->_curAnim->set_curFrame(_hx_tmp4);
HXLINE(1907)		int _hx_tmp5;
HXDLIN(1907)		if ((this->healthBar->percent > 80)) {
HXLINE(1907)			_hx_tmp5 = 1;
            		}
            		else {
HXLINE(1907)			_hx_tmp5 = 0;
            		}
HXDLIN(1907)		this->iconP2->animation->_curAnim->set_curFrame(_hx_tmp5);
HXLINE(1908)		return this->health;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,set_health,return )

void PlayState_obj::openPauseMenu(){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1912_openPauseMenu)
HXLINE(1913)		::flixel::FlxG_obj::camera->set_followLerp(( (Float)(0) ));
HXLINE(1914)		this->persistentUpdate = false;
HXLINE(1915)		this->persistentDraw = true;
HXLINE(1916)		this->paused = true;
HXLINE(1918)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1919)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(1920)			this->vocals->pause();
HXLINE(1921)			this->opponentVocals->pause();
            		}
HXLINE(1923)		if (!(this->cpuControlled)) {
HXLINE(1925)			 ::Dynamic filter = null();
HXDLIN(1925)			 ::flixel::group::FlxTypedGroupIterator note =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->playerStrums->members,filter);
HXDLIN(1925)			while(note->hasNext()){
HXLINE(1925)				 ::objects::StrumNote note1 = note->next().StaticCast<  ::objects::StrumNote >();
HXLINE(1926)				bool _hx_tmp;
HXDLIN(1926)				if (::hx::IsNotNull( note1->animation->_curAnim )) {
HXLINE(1926)					_hx_tmp = (note1->animation->_curAnim->name != HX_("static",ae,dc,fb,05));
            				}
            				else {
HXLINE(1926)					_hx_tmp = false;
            				}
HXDLIN(1926)				if (_hx_tmp) {
HXLINE(1928)					note1->playAnim(HX_("static",ae,dc,fb,05),null());
HXLINE(1929)					note1->resetAnim = ( (Float)(0) );
            				}
            			}
            		}
HXLINE(1932)		this->openSubState( ::substates::PauseSubState_obj::__alloc( HX_CTX ));
HXLINE(1935)		if (this->autoUpdateRPC) {
HXLINE(1935)			::String _hx_tmp1 = this->detailsPausedText;
HXDLIN(1935)			::String _hx_tmp2 = ( (::String)((((::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) );
HXDLIN(1935)			::backend::DiscordClient_obj::changePresence(_hx_tmp1,_hx_tmp2,this->iconP2->getCharacter(),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,openPauseMenu,(void))

void PlayState_obj::openChartEditor(){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1940_openChartEditor)
HXLINE(1941)		this->canResync = false;
HXLINE(1942)		::flixel::FlxG_obj::camera->set_followLerp(( (Float)(0) ));
HXLINE(1943)		this->persistentUpdate = false;
HXLINE(1944)		::states::PlayState_obj::chartingMode = true;
HXLINE(1945)		this->paused = true;
HXLINE(1947)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1948)			 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1948)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(1949)		if (::hx::IsNotNull( this->vocals )) {
HXLINE(1950)			this->vocals->pause();
            		}
HXLINE(1951)		if (::hx::IsNotNull( this->opponentVocals )) {
HXLINE(1952)			this->opponentVocals->pause();
            		}
HXLINE(1955)		::backend::DiscordClient_obj::changePresence(HX_("Chart Editor",ef,b4,29,e9),null(),null(),true,null(),null());
HXLINE(1956)		::backend::DiscordClient_obj::set_clientID(HX_("863222024192262205",be,6e,40,13));
HXLINE(1959)		::backend::MusicBeatState_obj::switchState( ::states::editors::ChartingState_obj::__alloc( HX_CTX ,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,openChartEditor,(void))

void PlayState_obj::openCharacterEditor(){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1963_openCharacterEditor)
HXLINE(1964)		this->canResync = false;
HXLINE(1965)		::flixel::FlxG_obj::camera->set_followLerp(( (Float)(0) ));
HXLINE(1966)		this->persistentUpdate = false;
HXLINE(1967)		this->paused = true;
HXLINE(1969)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1970)			 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1970)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(1971)		if (::hx::IsNotNull( this->vocals )) {
HXLINE(1972)			this->vocals->pause();
            		}
HXLINE(1973)		if (::hx::IsNotNull( this->opponentVocals )) {
HXLINE(1974)			this->opponentVocals->pause();
            		}
HXLINE(1976)		::backend::DiscordClient_obj::set_clientID(HX_("863222024192262205",be,6e,40,13));
HXLINE(1977)		::backend::MusicBeatState_obj::switchState( ::states::editors::CharacterEditorState_obj::__alloc( HX_CTX ,( (::String)(::states::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,openCharacterEditor,(void))

bool PlayState_obj::doDeathCheck( ::Dynamic __o_skipHealthCheck){
            		 ::Dynamic skipHealthCheck = __o_skipHealthCheck;
            		if (::hx::IsNull(__o_skipHealthCheck)) skipHealthCheck = false;
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_1982_doDeathCheck)
HXDLIN(1982)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1983)		bool _hx_tmp;
HXDLIN(1983)		bool _hx_tmp1;
HXDLIN(1983)		bool _hx_tmp2;
HXDLIN(1983)		bool _hx_tmp3;
HXDLIN(1983)		bool _hx_tmp4;
HXDLIN(1983)		if (( (bool)(skipHealthCheck) )) {
HXLINE(1983)			_hx_tmp4 = this->instakillOnMiss;
            		}
            		else {
HXLINE(1983)			_hx_tmp4 = false;
            		}
HXDLIN(1983)		if (!(_hx_tmp4)) {
HXLINE(1983)			_hx_tmp3 = (this->health <= 0);
            		}
            		else {
HXLINE(1983)			_hx_tmp3 = true;
            		}
HXDLIN(1983)		if (_hx_tmp3) {
HXLINE(1983)			_hx_tmp2 = !(this->practiceMode);
            		}
            		else {
HXLINE(1983)			_hx_tmp2 = false;
            		}
HXDLIN(1983)		if (_hx_tmp2) {
HXLINE(1983)			_hx_tmp1 = !(this->isDead);
            		}
            		else {
HXLINE(1983)			_hx_tmp1 = false;
            		}
HXDLIN(1983)		if (_hx_tmp1) {
HXLINE(1983)			_hx_tmp = ::hx::IsNull( this->gameOverTimer );
            		}
            		else {
HXLINE(1983)			_hx_tmp = false;
            		}
HXDLIN(1983)		if (_hx_tmp) {
HXLINE(1985)			 ::Dynamic ret = this->callOnScripts(HX_("onGameOver",a5,66,95,93),null(),true,null(),null());
HXLINE(1986)			if (::hx::IsNotEq( ret,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(1988)				::flixel::FlxG_obj::animationTimeScale = ( (Float)(1) );
HXLINE(1989)				this->boyfriend->stunned = true;
HXLINE(1990)				::states::PlayState_obj::deathCounter++;
HXLINE(1992)				this->paused = true;
HXLINE(1993)				this->canResync = false;
HXLINE(1994)				this->canPause = false;
HXLINE(2003)				this->persistentUpdate = false;
HXLINE(2004)				this->persistentDraw = false;
HXLINE(2005)				::flixel::util::FlxArrayUtil_obj::clearArray(::flixel::util::FlxTimer_obj::globalManager->_timers,null());
HXLINE(2006)				::flixel::tweens::FlxTween_obj::globalManager->clear();
HXLINE(2007)				::flixel::FlxG_obj::camera->setFilters(::Array_obj< ::Dynamic>::__new(0));
HXLINE(2009)				if ((::substates::GameOverSubstate_obj::deathDelay > 0)) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer _){
            						HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_2012_doDeathCheck)
HXLINE(2013)						{
HXLINE(2013)							 ::flixel::sound::FlxSound _this = _gthis->vocals;
HXDLIN(2013)							_this->cleanup(_this->autoDestroy,true);
            						}
HXLINE(2014)						{
HXLINE(2014)							 ::flixel::sound::FlxSound _this1 = _gthis->opponentVocals;
HXDLIN(2014)							_this1->cleanup(_this1->autoDestroy,true);
            						}
HXLINE(2015)						{
HXLINE(2015)							 ::flixel::sound::FlxSound _this2 = ::flixel::FlxG_obj::sound->music;
HXDLIN(2015)							_this2->cleanup(_this2->autoDestroy,true);
            						}
HXLINE(2016)						 ::states::PlayState _gthis1 = _gthis;
HXDLIN(2016)						_gthis1->openSubState( ::substates::GameOverSubstate_obj::__alloc( HX_CTX ,_gthis->boyfriend));
HXLINE(2017)						_gthis->gameOverTimer = null();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(2011)					this->gameOverTimer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(::substates::GameOverSubstate_obj::deathDelay, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            				}
            				else {
HXLINE(2022)					{
HXLINE(2022)						 ::flixel::sound::FlxSound _this = this->vocals;
HXDLIN(2022)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE(2023)					{
HXLINE(2023)						 ::flixel::sound::FlxSound _this1 = this->opponentVocals;
HXDLIN(2023)						_this1->cleanup(_this1->autoDestroy,true);
            					}
HXLINE(2024)					{
HXLINE(2024)						 ::flixel::sound::FlxSound _this2 = ::flixel::FlxG_obj::sound->music;
HXDLIN(2024)						_this2->cleanup(_this2->autoDestroy,true);
            					}
HXLINE(2025)					this->openSubState( ::substates::GameOverSubstate_obj::__alloc( HX_CTX ,this->boyfriend));
            				}
HXLINE(2032)				if (this->autoUpdateRPC) {
HXLINE(2032)					::String _hx_tmp5 = (HX_("Game Over - ",71,58,c7,c5) + this->detailsText);
HXDLIN(2032)					::String _hx_tmp6 = ( (::String)((((::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) );
HXDLIN(2032)					::backend::DiscordClient_obj::changePresence(_hx_tmp5,_hx_tmp6,this->iconP2->getCharacter(),null(),null(),null());
            				}
HXLINE(2034)				this->isDead = true;
HXLINE(2035)				return true;
            			}
            		}
HXLINE(2038)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,doDeathCheck,return )

void PlayState_obj::checkEventNote(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2042_checkEventNote)
HXDLIN(2042)		while((this->eventNotes->length > 0)){
HXLINE(2043)			Float leStrumTime = ( (Float)(this->eventNotes->__get(0)->__Field(HX_("strumTime",f6,2d,21,f4),::hx::paccDynamic)) );
HXLINE(2044)			if ((::backend::Conductor_obj::songPosition < leStrumTime)) {
HXLINE(2045)				return;
            			}
HXLINE(2048)			::String value1 = HX_("",00,00,00,00);
HXLINE(2049)			if (::hx::IsNotNull( this->eventNotes->__get(0)->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic) )) {
HXLINE(2050)				value1 = ( (::String)(this->eventNotes->__get(0)->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic)) );
            			}
HXLINE(2052)			::String value2 = HX_("",00,00,00,00);
HXLINE(2053)			if (::hx::IsNotNull( this->eventNotes->__get(0)->__Field(HX_("value2",a1,03,b7,4f),::hx::paccDynamic) )) {
HXLINE(2054)				value2 = ( (::String)(this->eventNotes->__get(0)->__Field(HX_("value2",a1,03,b7,4f),::hx::paccDynamic)) );
            			}
HXLINE(2056)			this->triggerEvent(( (::String)(this->eventNotes->__get(0)->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic)) ),value1,value2,leStrumTime);
HXLINE(2057)			this->eventNotes->shift();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,checkEventNote,(void))

void PlayState_obj::triggerEvent(::String eventName,::String value1,::String value2,Float strumTime){
            		HX_BEGIN_LOCAL_FUNC_S6(::hx::LocalFunc,_hx_Closure_1,Float,strumTime,::Array< ::Dynamic>,flValue1,::String,value2,::String,eventName,::String,value1,::Array< ::Dynamic>,flValue2) HXARGC(1)
            		void _hx_run( ::backend::BaseStage stage){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_2303_triggerEvent)
HXLINE(2303)			stage->eventCalled(eventName,value1,value2,flValue1->__get(0),flValue2->__get(0),strumTime);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2061_triggerEvent)
HXDLIN(2061)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2062)		::Array< ::Dynamic> flValue1 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::Std_obj::parseFloat(value1));
HXLINE(2063)		::Array< ::Dynamic> flValue2 = ::Array_obj< ::Dynamic>::__new(1)->init(0,::Std_obj::parseFloat(value2));
HXLINE(2064)		if (::Math_obj::isNaN(( (Float)(flValue1->__get(0)) ))) {
HXLINE(2064)			flValue1[0] = null();
            		}
HXLINE(2065)		if (::Math_obj::isNaN(( (Float)(flValue2->__get(0)) ))) {
HXLINE(2065)			flValue2[0] = null();
            		}
HXLINE(2067)		::String _hx_switch_0 = eventName;
            		if (  (_hx_switch_0==HX_("Add Camera Zoom",cf,55,a6,44)) ){
HXLINE(2101)			bool _hx_tmp;
HXDLIN(2101)			if (::backend::ClientPrefs_obj::data->camZooms) {
HXLINE(2101)				_hx_tmp = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            			}
            			else {
HXLINE(2101)				_hx_tmp = false;
            			}
HXDLIN(2101)			if (_hx_tmp) {
HXLINE(2102)				if (::hx::IsNull( flValue1->__get(0) )) {
HXLINE(2102)					flValue1[0] = ((Float)0.015);
            				}
HXLINE(2103)				if (::hx::IsNull( flValue2->__get(0) )) {
HXLINE(2103)					flValue2[0] = ((Float)0.03);
            				}
HXLINE(2105)				 ::flixel::FlxCamera fh = ::flixel::FlxG_obj::camera;
HXDLIN(2105)				fh->set_zoom((fh->zoom + flValue1->__get(0)));
HXLINE(2106)				 ::flixel::FlxCamera fh1 = this->camHUD;
HXDLIN(2106)				fh1->set_zoom((fh1->zoom + flValue2->__get(0)));
            			}
HXLINE(2101)			goto _hx_goto_134;
            		}
            		if (  (_hx_switch_0==HX_("Alt Idle Animation",2f,00,fa,18)) ){
HXLINE(2146)			 ::objects::Character _hx_char = this->dad;
HXLINE(2147)			::String _hx_switch_1 = ::StringTools_obj::trim(value1.toLowerCase());
            			if (  (_hx_switch_1==HX_("bf",c4,55,00,00)) ||  (_hx_switch_1==HX_("boyfriend",6a,29,b8,e6)) ){
HXLINE(2151)				_hx_char = this->boyfriend;
HXDLIN(2151)				goto _hx_goto_135;
            			}
            			if (  (_hx_switch_1==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_1==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(2149)				_hx_char = this->gf;
HXDLIN(2149)				goto _hx_goto_135;
            			}
            			/* default */{
HXLINE(2153)				int val = ( (int)(::Std_obj::parseInt(value1)) );
HXLINE(2154)				if (::Math_obj::isNaN(( (Float)(val) ))) {
HXLINE(2154)					val = 0;
            				}
HXLINE(2156)				switch((int)(val)){
            					case (int)1: {
HXLINE(2157)						_hx_char = this->boyfriend;
            					}
            					break;
            					case (int)2: {
HXLINE(2158)						_hx_char = this->gf;
            					}
            					break;
            				}
            			}
            			_hx_goto_135:;
HXLINE(2162)			if (::hx::IsNotNull( _hx_char )) {
HXLINE(2164)				_hx_char->idleSuffix = value2;
HXLINE(2165)				_hx_char->recalculateDanceIdle();
            			}
HXLINE(2145)			goto _hx_goto_134;
            		}
            		if (  (_hx_switch_0==HX_("Camera Follow Pos",e0,d4,b1,c4)) ){
HXLINE(2132)			if (::hx::IsNotNull( this->camFollow )) {
HXLINE(2134)				this->isCameraOnForcedPos = false;
HXLINE(2135)				bool _hx_tmp1;
HXDLIN(2135)				if (::hx::IsNull( flValue1->__get(0) )) {
HXLINE(2135)					_hx_tmp1 = ::hx::IsNotNull( flValue2->__get(0) );
            				}
            				else {
HXLINE(2135)					_hx_tmp1 = true;
            				}
HXDLIN(2135)				if (_hx_tmp1) {
HXLINE(2137)					this->isCameraOnForcedPos = true;
HXLINE(2138)					if (::hx::IsNull( flValue1->__get(0) )) {
HXLINE(2138)						flValue1[0] = 0;
            					}
HXLINE(2139)					if (::hx::IsNull( flValue2->__get(0) )) {
HXLINE(2139)						flValue2[0] = 0;
            					}
HXLINE(2140)					this->camFollow->set_x(( (Float)(flValue1->__get(0)) ));
HXLINE(2141)					this->camFollow->set_y(( (Float)(flValue2->__get(0)) ));
            				}
            			}
HXLINE(2132)			goto _hx_goto_134;
            		}
            		if (  (_hx_switch_0==HX_("Change Character",f9,50,ef,9c)) ){
HXLINE(2187)			int charType = 0;
HXLINE(2188)			::String _hx_switch_2 = ::StringTools_obj::trim(value1.toLowerCase());
            			if (  (_hx_switch_2==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_2==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(2190)				charType = 2;
HXDLIN(2190)				goto _hx_goto_136;
            			}
            			if (  (_hx_switch_2==HX_("dad",47,36,4c,00)) ||  (_hx_switch_2==HX_("opponent",9d,b9,b8,f8)) ){
HXLINE(2192)				charType = 1;
HXDLIN(2192)				goto _hx_goto_136;
            			}
            			/* default */{
HXLINE(2194)				charType = ( (int)(::Std_obj::parseInt(value1)) );
HXLINE(2195)				if (::Math_obj::isNaN(( (Float)(charType) ))) {
HXLINE(2195)					charType = 0;
            				}
            			}
            			_hx_goto_136:;
HXLINE(2198)			switch((int)(charType)){
            				case (int)0: {
HXLINE(2200)					if ((this->boyfriend->curCharacter != value2)) {
HXLINE(2201)						if (!(this->boyfriendMap->exists(value2))) {
HXLINE(2202)							this->addCharacterToList(value2,charType);
            						}
HXLINE(2205)						Float lastAlpha = this->boyfriend->alpha;
HXLINE(2206)						this->boyfriend->set_alpha(((Float)0.00001));
HXLINE(2207)						this->boyfriend = ( ( ::objects::Character)(this->boyfriendMap->get(value2)) );
HXLINE(2208)						this->boyfriend->set_alpha(lastAlpha);
HXLINE(2209)						this->iconP1->changeIcon(this->boyfriend->healthIcon,null());
            					}
HXLINE(2211)					this->setOnScripts(HX_("boyfriendName",d5,c4,d2,4c),this->boyfriend->curCharacter,null());
            				}
            				break;
            				case (int)1: {
HXLINE(2214)					if ((this->dad->curCharacter != value2)) {
HXLINE(2215)						if (!(this->dadMap->exists(value2))) {
HXLINE(2216)							this->addCharacterToList(value2,charType);
            						}
HXLINE(2219)						bool wasGf;
HXDLIN(2219)						if (!(::StringTools_obj::startsWith(this->dad->curCharacter,HX_("gf-",2e,81,4e,00)))) {
HXLINE(2219)							wasGf = (this->dad->curCharacter == HX_("gf",1f,5a,00,00));
            						}
            						else {
HXLINE(2219)							wasGf = true;
            						}
HXLINE(2220)						Float lastAlpha1 = this->dad->alpha;
HXLINE(2221)						this->dad->set_alpha(((Float)0.00001));
HXLINE(2222)						this->dad = ( ( ::objects::Character)(this->dadMap->get(value2)) );
HXLINE(2223)						bool _hx_tmp2;
HXDLIN(2223)						if (!(::StringTools_obj::startsWith(this->dad->curCharacter,HX_("gf-",2e,81,4e,00)))) {
HXLINE(2223)							_hx_tmp2 = (this->dad->curCharacter != HX_("gf",1f,5a,00,00));
            						}
            						else {
HXLINE(2223)							_hx_tmp2 = false;
            						}
HXDLIN(2223)						if (_hx_tmp2) {
HXLINE(2224)							bool _hx_tmp3;
HXDLIN(2224)							if (wasGf) {
HXLINE(2224)								_hx_tmp3 = ::hx::IsNotNull( this->gf );
            							}
            							else {
HXLINE(2224)								_hx_tmp3 = false;
            							}
HXDLIN(2224)							if (_hx_tmp3) {
HXLINE(2225)								this->gf->set_visible(true);
            							}
            						}
            						else {
HXLINE(2227)							if (::hx::IsNotNull( this->gf )) {
HXLINE(2228)								this->gf->set_visible(false);
            							}
            						}
HXLINE(2230)						this->dad->set_alpha(lastAlpha1);
HXLINE(2231)						this->iconP2->changeIcon(this->dad->healthIcon,null());
            					}
HXLINE(2233)					this->setOnScripts(HX_("dadName",32,04,eb,ce),this->dad->curCharacter,null());
            				}
            				break;
            				case (int)2: {
HXLINE(2236)					if (::hx::IsNotNull( this->gf )) {
HXLINE(2238)						if ((this->gf->curCharacter != value2)) {
HXLINE(2240)							if (!(this->gfMap->exists(value2))) {
HXLINE(2241)								this->addCharacterToList(value2,charType);
            							}
HXLINE(2244)							Float lastAlpha2 = this->gf->alpha;
HXLINE(2245)							this->gf->set_alpha(((Float)0.00001));
HXLINE(2246)							this->gf = ( ( ::objects::Character)(this->gfMap->get(value2)) );
HXLINE(2247)							this->gf->set_alpha(lastAlpha2);
            						}
HXLINE(2249)						this->setOnScripts(HX_("gfName",0a,f4,79,1d),this->gf->curCharacter,null());
            					}
            				}
            				break;
            			}
HXLINE(2252)			this->reloadHealthBarColors();
HXLINE(2186)			goto _hx_goto_134;
            		}
            		if (  (_hx_switch_0==HX_("Change Scroll Speed",c4,2f,0b,43)) ){
HXLINE(2255)			if ((this->songSpeedType != HX_("constant",64,c1,9d,a5))) {
HXLINE(2257)				if (::hx::IsNull( flValue1->__get(0) )) {
HXLINE(2257)					flValue1[0] = 1;
            				}
HXLINE(2258)				if (::hx::IsNull( flValue2->__get(0) )) {
HXLINE(2258)					flValue2[0] = 0;
            				}
HXLINE(2260)				Float newValue = ( (Float)(::states::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
HXDLIN(2260)				 ::Dynamic defaultValue = null();
HXDLIN(2260)				defaultValue = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
HXDLIN(2260)				 ::Dynamic newValue1;
HXDLIN(2260)				if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("scrollspeed",5a,70,19,38))) {
HXLINE(2260)					newValue1 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
            				}
            				else {
HXLINE(2260)					newValue1 = defaultValue;
            				}
HXDLIN(2260)				Float newValue2 = ((newValue * ( (Float)(newValue1) )) * ( (Float)(flValue1->__get(0)) ));
HXLINE(2261)				if (::hx::IsLessEq( flValue2->__get(0),0 )) {
HXLINE(2262)					this->set_songSpeed(newValue2);
            				}
            				else {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_STACKFRAME(&_hx_pos_801e532e222627de_2267_triggerEvent)
HXLINE(2267)						_gthis->songSpeedTween = null();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(2264)					this->songSpeedTween = ::flixel::tweens::FlxTween_obj::tween(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("songSpeed",72,df,e3,b0),newValue2)),(( (Float)(flValue2->__get(0)) ) / this->playbackRate), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::linear_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            				}
            			}
HXLINE(2255)			goto _hx_goto_134;
            		}
            		if (  (_hx_switch_0==HX_("Hey!",e5,69,e4,2f)) ){
HXLINE(2069)			int value = 2;
HXLINE(2070)			::String _hx_switch_3 = ::StringTools_obj::trim(value1.toLowerCase());
            			if (  (_hx_switch_3==HX_("0",30,00,00,00)) ||  (_hx_switch_3==HX_("bf",c4,55,00,00)) ||  (_hx_switch_3==HX_("boyfriend",6a,29,b8,e6)) ){
HXLINE(2072)				value = 0;
HXDLIN(2072)				goto _hx_goto_137;
            			}
            			if (  (_hx_switch_3==HX_("1",31,00,00,00)) ||  (_hx_switch_3==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_3==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(2074)				value = 1;
HXDLIN(2074)				goto _hx_goto_137;
            			}
            			_hx_goto_137:;
HXLINE(2077)			bool _hx_tmp4;
HXDLIN(2077)			if (::hx::IsNotNull( flValue2->__get(0) )) {
HXLINE(2077)				_hx_tmp4 = ::hx::IsLessEq( flValue2->__get(0),0 );
            			}
            			else {
HXLINE(2077)				_hx_tmp4 = true;
            			}
HXDLIN(2077)			if (_hx_tmp4) {
HXLINE(2077)				flValue2[0] = ((Float)0.6);
            			}
HXLINE(2079)			if ((value != 0)) {
HXLINE(2080)				if (::StringTools_obj::startsWith(this->dad->curCharacter,HX_("gf",1f,5a,00,00))) {
HXLINE(2081)					this->dad->playAnim(HX_("cheer",8d,9a,b6,45),true,null(),null());
HXLINE(2082)					this->dad->specialAnim = true;
HXLINE(2083)					this->dad->heyTimer = ( (Float)(flValue2->__get(0)) );
            				}
            				else {
HXLINE(2084)					if (::hx::IsNotNull( this->gf )) {
HXLINE(2085)						this->gf->playAnim(HX_("cheer",8d,9a,b6,45),true,null(),null());
HXLINE(2086)						this->gf->specialAnim = true;
HXLINE(2087)						this->gf->heyTimer = ( (Float)(flValue2->__get(0)) );
            					}
            				}
            			}
HXLINE(2090)			if ((value != 1)) {
HXLINE(2091)				this->boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
HXLINE(2092)				this->boyfriend->specialAnim = true;
HXLINE(2093)				this->boyfriend->heyTimer = ( (Float)(flValue2->__get(0)) );
            			}
HXLINE(2068)			goto _hx_goto_134;
            		}
            		if (  (_hx_switch_0==HX_("Play Animation",d8,05,5f,0c)) ){
HXLINE(2111)			 ::objects::Character char1 = this->dad;
HXLINE(2112)			::String _hx_switch_4 = ::StringTools_obj::trim(value2.toLowerCase());
            			if (  (_hx_switch_4==HX_("bf",c4,55,00,00)) ||  (_hx_switch_4==HX_("boyfriend",6a,29,b8,e6)) ){
HXLINE(2114)				char1 = this->boyfriend;
HXDLIN(2114)				goto _hx_goto_138;
            			}
            			if (  (_hx_switch_4==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_4==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(2116)				char1 = this->gf;
HXDLIN(2116)				goto _hx_goto_138;
            			}
            			/* default */{
HXLINE(2118)				if (::hx::IsNull( flValue2->__get(0) )) {
HXLINE(2118)					flValue2[0] = 0;
            				}
HXLINE(2119)				switch((int)(::Math_obj::round(( (Float)(flValue2->__get(0)) )))){
            					case (int)1: {
HXLINE(2120)						char1 = this->boyfriend;
            					}
            					break;
            					case (int)2: {
HXLINE(2121)						char1 = this->gf;
            					}
            					break;
            				}
            			}
            			_hx_goto_138:;
HXLINE(2125)			if (::hx::IsNotNull( char1 )) {
HXLINE(2127)				char1->playAnim(value1,true,null(),null());
HXLINE(2128)				char1->specialAnim = true;
            			}
HXLINE(2109)			goto _hx_goto_134;
            		}
            		if (  (_hx_switch_0==HX_("Play Sound",a3,a9,45,48)) ){
HXLINE(2299)			if (::hx::IsNull( flValue2->__get(0) )) {
HXLINE(2299)				flValue2[0] = 1;
            			}
HXLINE(2300)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp5 = ::flixel::FlxG_obj::sound;
HXDLIN(2300)			 ::openfl::media::Sound _hx_tmp6 = ::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + value1),null(),true,null());
HXDLIN(2300)			_hx_tmp5->play(_hx_tmp6,flValue2->__get(0),null(),null(),null(),null());
HXLINE(2298)			goto _hx_goto_134;
            		}
            		if (  (_hx_switch_0==HX_("Screen Shake",12,bb,51,4b)) ){
HXLINE(2169)			::Array< ::String > valuesArray = ::Array_obj< ::String >::__new(2)->init(0,value1)->init(1,value2);
HXLINE(2170)			::Array< ::Dynamic> targetsArray = ::Array_obj< ::Dynamic>::__new(2)->init(0,this->camGame)->init(1,this->camHUD);
HXLINE(2171)			{
HXLINE(2171)				int _g = 0;
HXDLIN(2171)				int _g1 = targetsArray->length;
HXDLIN(2171)				while((_g < _g1)){
HXLINE(2171)					_g = (_g + 1);
HXDLIN(2171)					int i = (_g - 1);
HXLINE(2172)					::Array< ::String > split = valuesArray->__get(i).split(HX_(",",2c,00,00,00));
HXLINE(2173)					Float duration = ( (Float)(0) );
HXLINE(2174)					Float intensity = ( (Float)(0) );
HXLINE(2175)					if (::hx::IsNotNull( split->__get(0) )) {
HXLINE(2175)						duration = ::Std_obj::parseFloat(::StringTools_obj::trim(split->__get(0)));
            					}
HXLINE(2176)					if (::hx::IsNotNull( split->__get(1) )) {
HXLINE(2176)						intensity = ::Std_obj::parseFloat(::StringTools_obj::trim(split->__get(1)));
            					}
HXLINE(2177)					if (::Math_obj::isNaN(duration)) {
HXLINE(2177)						duration = ( (Float)(0) );
            					}
HXLINE(2178)					if (::Math_obj::isNaN(intensity)) {
HXLINE(2178)						intensity = ( (Float)(0) );
            					}
HXLINE(2180)					bool _hx_tmp7;
HXDLIN(2180)					if ((duration > 0)) {
HXLINE(2180)						_hx_tmp7 = (intensity != 0);
            					}
            					else {
HXLINE(2180)						_hx_tmp7 = false;
            					}
HXDLIN(2180)					if (_hx_tmp7) {
HXLINE(2181)						targetsArray->__get(i).StaticCast<  ::flixel::FlxCamera >()->shake(intensity,duration,null(),null(),null());
            					}
            				}
            			}
HXLINE(2168)			goto _hx_goto_134;
            		}
            		if (  (_hx_switch_0==HX_("Set GF Speed",04,ff,9a,c4)) ){
HXLINE(2097)			bool _hx_tmp8;
HXDLIN(2097)			if (::hx::IsNotNull( flValue1->__get(0) )) {
HXLINE(2097)				_hx_tmp8 = ::hx::IsLess( flValue1->__get(0),1 );
            			}
            			else {
HXLINE(2097)				_hx_tmp8 = true;
            			}
HXDLIN(2097)			if (_hx_tmp8) {
HXLINE(2097)				flValue1[0] = 1;
            			}
HXLINE(2098)			this->gfSpeed = ::Math_obj::round(( (Float)(flValue1->__get(0)) ));
HXLINE(2096)			goto _hx_goto_134;
            		}
            		if (  (_hx_switch_0==HX_("Set Property",d3,50,a6,2e)) ){
HXLINE(2273)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(2275)				 ::Dynamic trueValue = ::StringTools_obj::trim(value2);
HXLINE(2276)				bool _hx_tmp9;
HXDLIN(2276)				if (::hx::IsNotEq( trueValue,HX_("true",4e,a7,03,4d) )) {
HXLINE(2276)					_hx_tmp9 = ::hx::IsEq( trueValue,HX_("false",a3,35,4f,fb) );
            				}
            				else {
HXLINE(2276)					_hx_tmp9 = true;
            				}
HXDLIN(2276)				if (_hx_tmp9) {
HXLINE(2276)					trueValue = ::hx::IsEq( trueValue,HX_("true",4e,a7,03,4d) );
            				}
            				else {
HXLINE(2277)					if (::hx::IsNotNull( flValue2->__get(0) )) {
HXLINE(2277)						trueValue = flValue2->__get(0);
            					}
            					else {
HXLINE(2278)						trueValue = value2;
            					}
            				}
HXLINE(2280)				::Array< ::String > split1 = value1.split(HX_(".",2e,00,00,00));
HXLINE(2281)				if ((split1->length > 1)) {
HXLINE(2282)					 ::Dynamic _hx_tmp10 = ::psychlua::LuaUtils_obj::getPropertyLoop(split1,null(),null());
HXDLIN(2282)					::psychlua::LuaUtils_obj::setVarInArray(_hx_tmp10,split1->__get((split1->length - 1)),trueValue,null());
            				}
            				else {
HXLINE(2284)					::psychlua::LuaUtils_obj::setVarInArray(::hx::ObjectPtr<OBJ_>(this),value1,trueValue,null());
            				}
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g2 = _hx_e;
HXLINE(2287)					{
HXLINE(2287)						null();
            					}
HXDLIN(2287)					 ::Dynamic e = _g2;
HXLINE(2288)					{
HXLINE(2289)						int len = ( (int)(( ::Dynamic(e->__Field(HX_("message",c7,35,11,9a),::hx::paccDynamic))->__Field(HX_("indexOf",c9,48,bf,e0),::hx::paccDynamic)(HX_("\n",0a,00,00,00)) + 1)) );
HXLINE(2290)						if ((len <= 0)) {
HXLINE(2290)							len = ( (int)( ::Dynamic(e->__Field(HX_("message",c7,35,11,9a),::hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
            						}
HXLINE(2292)						this->addTextToDebug((HX_("ERROR (\"Set Property\" Event) - ",41,de,a4,7e) + ::Std_obj::string( ::Dynamic(e->__Field(HX_("message",c7,35,11,9a),::hx::paccDynamic))->__Field(HX_("substr",31,ef,0a,9a),::hx::paccDynamic)(0,len))),-65536);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(2273)			goto _hx_goto_134;
            		}
            		_hx_goto_134:;
HXLINE(2303)		this->stagesFunc( ::Dynamic(new _hx_Closure_1(strumTime,flValue1,value2,eventName,value1,flValue2)));
HXLINE(2304)		this->callOnScripts(HX_("onEvent",7b,66,02,0c),::cpp::VirtualArray_obj::__new(4)->init(0,eventName)->init(1,value1)->init(2,value2)->init(3,strumTime),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC4(PlayState_obj,triggerEvent,(void))

void PlayState_obj::moveCameraSection( ::Dynamic sec){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2307_moveCameraSection)
HXLINE(2308)		if (::hx::IsNull( sec )) {
HXLINE(2308)			sec = this->curSection;
            		}
HXLINE(2309)		if (::hx::IsLess( sec,0 )) {
HXLINE(2309)			sec = 0;
            		}
HXLINE(2311)		if (::hx::IsNull(  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(( (int)(sec) )) )) {
HXLINE(2311)			return;
            		}
HXLINE(2313)		bool _hx_tmp;
HXDLIN(2313)		if (::hx::IsNotNull( this->gf )) {
HXLINE(2313)			_hx_tmp = ( (bool)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(( (int)(sec) ))->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(2313)			_hx_tmp = false;
            		}
HXDLIN(2313)		if (_hx_tmp) {
HXLINE(2315)			this->moveCameraToGirlfriend();
HXLINE(2316)			this->callOnScripts(HX_("onMoveCamera",95,62,fe,df),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("gf",1f,5a,00,00)),null(),null(),null());
HXLINE(2317)			return;
            		}
HXLINE(2320)		bool isDad = ::hx::IsNotEq(  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(( (int)(sec) ))->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic),true );
HXLINE(2321)		this->moveCamera(isDad);
HXLINE(2322)		if (isDad) {
HXLINE(2323)			this->callOnScripts(HX_("onMoveCamera",95,62,fe,df),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("dad",47,36,4c,00)),null(),null(),null());
            		}
            		else {
HXLINE(2325)			this->callOnScripts(HX_("onMoveCamera",95,62,fe,df),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("boyfriend",6a,29,b8,e6)),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,moveCameraSection,(void))

void PlayState_obj::moveCameraToGirlfriend(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2329_moveCameraToGirlfriend)
HXLINE(2330)		 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2330)		Float _hx_tmp1 = this->gf->getMidpoint(null())->x;
HXDLIN(2330)		_hx_tmp->setPosition(_hx_tmp1,this->gf->getMidpoint(null())->y);
HXLINE(2331)		 ::flixel::FlxObject fh = this->camFollow;
HXDLIN(2331)		fh->set_x((fh->x + (this->gf->cameraPosition->__get(0) + this->girlfriendCameraOffset->__get(0))));
HXLINE(2332)		 ::flixel::FlxObject fh1 = this->camFollow;
HXDLIN(2332)		fh1->set_y((fh1->y + (this->gf->cameraPosition->__get(1) + this->girlfriendCameraOffset->__get(1))));
HXLINE(2333)		this->tweenCamIn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,moveCameraToGirlfriend,(void))

void PlayState_obj::moveCamera(bool isDad){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2338_moveCamera)
HXDLIN(2338)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2339)		if (isDad) {
HXLINE(2341)			if (::hx::IsNull( this->dad )) {
HXLINE(2341)				return;
            			}
HXLINE(2342)			 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2342)			Float _hx_tmp1 = (this->dad->getMidpoint(null())->x + 150);
HXDLIN(2342)			_hx_tmp->setPosition(_hx_tmp1,(this->dad->getMidpoint(null())->y - ( (Float)(100) )));
HXLINE(2343)			 ::flixel::FlxObject fh = this->camFollow;
HXDLIN(2343)			fh->set_x((fh->x + (this->dad->cameraPosition->__get(0) + this->opponentCameraOffset->__get(0))));
HXLINE(2344)			 ::flixel::FlxObject fh1 = this->camFollow;
HXDLIN(2344)			fh1->set_y((fh1->y + (this->dad->cameraPosition->__get(1) + this->opponentCameraOffset->__get(1))));
HXLINE(2345)			this->tweenCamIn();
            		}
            		else {
HXLINE(2349)			if (::hx::IsNull( this->boyfriend )) {
HXLINE(2349)				return;
            			}
HXLINE(2350)			 ::flixel::FlxObject _hx_tmp2 = this->camFollow;
HXDLIN(2350)			Float _hx_tmp3 = (this->boyfriend->getMidpoint(null())->x - ( (Float)(100) ));
HXDLIN(2350)			_hx_tmp2->setPosition(_hx_tmp3,(this->boyfriend->getMidpoint(null())->y - ( (Float)(100) )));
HXLINE(2351)			 ::flixel::FlxObject fh2 = this->camFollow;
HXDLIN(2351)			fh2->set_x((fh2->x - (this->boyfriend->cameraPosition->__get(0) - this->boyfriendCameraOffset->__get(0))));
HXLINE(2352)			 ::flixel::FlxObject fh3 = this->camFollow;
HXDLIN(2352)			fh3->set_y((fh3->y + (this->boyfriend->cameraPosition->__get(1) + this->boyfriendCameraOffset->__get(1))));
HXLINE(2354)			bool _hx_tmp4;
HXDLIN(2354)			bool _hx_tmp5;
HXDLIN(2354)			if ((this->songName == HX_("tutorial",9e,8f,b5,82))) {
HXLINE(2354)				_hx_tmp5 = ::hx::IsNull( this->cameraTwn );
            			}
            			else {
HXLINE(2354)				_hx_tmp5 = false;
            			}
HXDLIN(2354)			if (_hx_tmp5) {
HXLINE(2354)				_hx_tmp4 = (::flixel::FlxG_obj::camera->zoom != 1);
            			}
            			else {
HXLINE(2354)				_hx_tmp4 = false;
            			}
HXDLIN(2354)			if (_hx_tmp4) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween twn){
            					HX_STACKFRAME(&_hx_pos_801e532e222627de_2359_moveCamera)
HXLINE(2359)					_gthis->cameraTwn = null();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(2356)				this->cameraTwn = ::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("zoom",13,a3,f8,50),1)),((::backend::Conductor_obj::stepCrochet * ( (Float)(4) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::elasticInOut_dyn())
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,moveCamera,(void))

void PlayState_obj::tweenCamIn(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2366_tweenCamIn)
HXDLIN(2366)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2367)		bool _hx_tmp;
HXDLIN(2367)		bool _hx_tmp1;
HXDLIN(2367)		if ((this->songName == HX_("tutorial",9e,8f,b5,82))) {
HXLINE(2367)			_hx_tmp1 = ::hx::IsNull( this->cameraTwn );
            		}
            		else {
HXLINE(2367)			_hx_tmp1 = false;
            		}
HXDLIN(2367)		if (_hx_tmp1) {
HXLINE(2367)			_hx_tmp = (::flixel::FlxG_obj::camera->zoom != ((Float)1.3));
            		}
            		else {
HXLINE(2367)			_hx_tmp = false;
            		}
HXDLIN(2367)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween twn){
            				HX_STACKFRAME(&_hx_pos_801e532e222627de_2370_tweenCamIn)
HXLINE(2370)				_gthis->cameraTwn = null();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2368)			this->cameraTwn = ::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("zoom",13,a3,f8,50),((Float)1.3))),((::backend::Conductor_obj::stepCrochet * ( (Float)(4) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::elasticInOut_dyn())
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,tweenCamIn,(void))

void PlayState_obj::finishSong( ::Dynamic __o_ignoreNoteOffset){
            		 ::Dynamic ignoreNoteOffset = __o_ignoreNoteOffset;
            		if (::hx::IsNull(__o_ignoreNoteOffset)) ignoreNoteOffset = false;
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_2377_finishSong)
HXDLIN(2377)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2378)		this->updateTime = false;
HXLINE(2379)		::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE(2381)		this->vocals->set_volume(( (Float)(0) ));
HXLINE(2382)		this->vocals->pause();
HXLINE(2383)		this->opponentVocals->set_volume(( (Float)(0) ));
HXLINE(2384)		this->opponentVocals->pause();
HXLINE(2386)		bool _hx_tmp;
HXDLIN(2386)		if ((::backend::ClientPrefs_obj::data->noteOffset > 0)) {
HXLINE(2386)			_hx_tmp = ( (bool)(ignoreNoteOffset) );
            		}
            		else {
HXLINE(2386)			_hx_tmp = true;
            		}
HXDLIN(2386)		if (_hx_tmp) {
HXLINE(2387)			this->endCallback();
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_2390_finishSong)
HXLINE(2390)				_gthis->endCallback();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2389)			 ::flixel::util::FlxTimer _hx_tmp1 =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN(2389)			this->finishTimer = _hx_tmp1->start((( (Float)(::backend::ClientPrefs_obj::data->noteOffset) ) / ( (Float)(1000) )), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,finishSong,(void))

bool PlayState_obj::endSong(){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_2398_endSong)
HXDLIN(2398)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2400)		if (!(this->startingSong)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::objects::Note daNote){
            				HX_STACKFRAME(&_hx_pos_801e532e222627de_2404_endSong)
HXLINE(2404)				if ((daNote->strumTime < (_gthis->songLength - ::backend::Conductor_obj::safeZoneOffset))) {
HXLINE(2405)					_gthis->set_health((_gthis->health - (((Float)0.05) * _gthis->healthLoss)));
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2402)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE(2407)			{
HXLINE(2407)				int _g = 0;
HXDLIN(2407)				::Array< ::Dynamic> _g1 = this->unspawnNotes;
HXDLIN(2407)				while((_g < _g1->length)){
HXLINE(2407)					 ::objects::Note daNote = _g1->__get(_g).StaticCast<  ::objects::Note >();
HXDLIN(2407)					_g = (_g + 1);
HXLINE(2409)					bool _hx_tmp;
HXDLIN(2409)					if (::hx::IsNotNull( daNote )) {
HXLINE(2409)						_hx_tmp = (daNote->strumTime < (this->songLength - ::backend::Conductor_obj::safeZoneOffset));
            					}
            					else {
HXLINE(2409)						_hx_tmp = false;
            					}
HXDLIN(2409)					if (_hx_tmp) {
HXLINE(2410)						this->set_health((this->health - (((Float)0.05) * this->healthLoss)));
            					}
            				}
            			}
HXLINE(2413)			if (this->doDeathCheck(null())) {
HXLINE(2414)				return false;
            			}
            		}
HXLINE(2418)		this->timeBar->set_visible(false);
HXLINE(2419)		this->timeTxt->set_visible(false);
HXLINE(2420)		this->canPause = false;
HXLINE(2421)		this->endingSong = true;
HXLINE(2422)		this->camZooming = false;
HXLINE(2423)		this->inCutscene = false;
HXLINE(2424)		this->updateTime = false;
HXLINE(2426)		::states::PlayState_obj::deathCounter = 0;
HXLINE(2427)		::states::PlayState_obj::seenCutscene = false;
HXLINE(2430)		::String weekNoMiss = (::backend::WeekData_obj::getWeekFileName() + HX_("_nomiss",5c,79,8f,9b));
HXLINE(2431)		this->checkForAchievement(::Array_obj< ::String >::__new(6)->init(0,weekNoMiss)->init(1,HX_("ur_bad",a3,4f,85,aa))->init(2,HX_("ur_good",9f,19,79,8d))->init(3,HX_("hype",46,63,1a,45))->init(4,HX_("two_keys",c7,f4,0a,9b))->init(5,HX_("toastie",43,0c,91,5f)));
HXLINE(2434)		 ::Dynamic ret = this->callOnScripts(HX_("onEndSong",f1,95,27,06),null(),true,null(),null());
HXLINE(2435)		bool _hx_tmp1;
HXDLIN(2435)		if (::hx::IsNotEq( ret,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(2435)			_hx_tmp1 = !(this->transitioning);
            		}
            		else {
HXLINE(2435)			_hx_tmp1 = false;
            		}
HXDLIN(2435)		if (_hx_tmp1) {
HXLINE(2438)			Float percent = this->ratingPercent;
HXLINE(2439)			if (::Math_obj::isNaN(percent)) {
HXLINE(2439)				percent = ( (Float)(0) );
            			}
HXLINE(2440)			::backend::Highscore_obj::saveScore(::backend::Song_obj::loadedSongName,this->songScore,::states::PlayState_obj::storyDifficulty,percent);
HXLINE(2442)			this->set_playbackRate(( (Float)(1) ));
HXLINE(2444)			if (::states::PlayState_obj::chartingMode) {
HXLINE(2446)				this->openChartEditor();
HXLINE(2447)				return false;
            			}
HXLINE(2450)			if (::states::PlayState_obj::isStoryMode) {
HXLINE(2452)				 ::Dynamic _hx_tmp2 = ::hx::ClassOf< ::states::PlayState >();
HXDLIN(2452)				::states::PlayState_obj::campaignScore = (::states::PlayState_obj::campaignScore + this->songScore);
HXLINE(2453)				 ::Dynamic _hx_tmp3 = ::hx::ClassOf< ::states::PlayState >();
HXDLIN(2453)				::states::PlayState_obj::campaignMisses = (::states::PlayState_obj::campaignMisses + this->songMisses);
HXLINE(2455)				::states::PlayState_obj::storyPlaylist->remove(::states::PlayState_obj::storyPlaylist->__get(0));
HXLINE(2457)				if ((::states::PlayState_obj::storyPlaylist->length <= 0)) {
HXLINE(2459)					::backend::Mods_obj::loadTopMod();
HXLINE(2460)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp4 = ::flixel::FlxG_obj::sound;
HXDLIN(2460)					_hx_tmp4->playMusic(::backend::Paths_obj::returnSound((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)),null(),true,null()),null(),null(),null());
HXLINE(2461)					::backend::DiscordClient_obj::set_clientID(HX_("863222024192262205",be,6e,40,13));
HXLINE(2463)					this->canResync = false;
HXLINE(2464)					::backend::MusicBeatState_obj::switchState( ::states::StoryMenuState_obj::__alloc( HX_CTX ));
HXLINE(2467)					bool _hx_tmp5;
HXDLIN(2467)					 ::Dynamic defaultValue = null();
HXDLIN(2467)					defaultValue = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("practice",bb,00,e7,a0));
HXDLIN(2467)					 ::Dynamic _hx_tmp6;
HXDLIN(2467)					if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("practice",bb,00,e7,a0))) {
HXLINE(2467)						_hx_tmp6 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("practice",bb,00,e7,a0));
            					}
            					else {
HXLINE(2467)						_hx_tmp6 = defaultValue;
            					}
HXDLIN(2467)					if (!(( (bool)(_hx_tmp6) ))) {
HXLINE(2467)						 ::Dynamic defaultValue1 = null();
HXDLIN(2467)						defaultValue1 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("botplay",7b,fb,a9,61));
HXDLIN(2467)						 ::Dynamic _hx_tmp7;
HXDLIN(2467)						if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("botplay",7b,fb,a9,61))) {
HXLINE(2467)							_hx_tmp7 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("botplay",7b,fb,a9,61));
            						}
            						else {
HXLINE(2467)							_hx_tmp7 = defaultValue1;
            						}
HXDLIN(2467)						_hx_tmp5 = !(( (bool)(_hx_tmp7) ));
            					}
            					else {
HXLINE(2467)						_hx_tmp5 = false;
            					}
HXDLIN(2467)					if (_hx_tmp5) {
HXLINE(2468)						::states::StoryMenuState_obj::weekCompleted->set(::backend::WeekData_obj::weeksList->__get(::states::PlayState_obj::storyWeek),true);
HXLINE(2469)						::String _hx_tmp8 = ::backend::WeekData_obj::getWeekFileName();
HXDLIN(2469)						::backend::Highscore_obj::saveWeekScore(_hx_tmp8,::states::PlayState_obj::campaignScore,::states::PlayState_obj::storyDifficulty);
HXLINE(2471)						::flixel::FlxG_obj::save->data->__SetField(HX_("weekCompleted",f7,82,ec,84),::states::StoryMenuState_obj::weekCompleted,::hx::paccDynamic);
HXLINE(2472)						::flixel::FlxG_obj::save->flush(null());
            					}
HXLINE(2474)					::states::PlayState_obj::changedDifficulty = false;
            				}
            				else {
HXLINE(2478)					 ::Dynamic num = null();
HXDLIN(2478)					if (::hx::IsNull( num )) {
HXLINE(2478)						num = ::states::PlayState_obj::storyDifficulty;
            					}
HXDLIN(2478)					::String filePostfix = ::backend::Difficulty_obj::list->__get(( (int)(num) ));
HXDLIN(2478)					bool _hx_tmp9;
HXDLIN(2478)					if (::hx::IsNotNull( filePostfix )) {
HXLINE(2478)						 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(2478)						 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(2478)						::String _hx_tmp10 = ::StringTools_obj::trim(hideChars->replace(invalidChars->replace(filePostfix,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
HXDLIN(2478)						 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(2478)						 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(2478)						_hx_tmp9 = (_hx_tmp10 != ::StringTools_obj::trim(hideChars1->replace(invalidChars1->replace(::backend::Difficulty_obj::defaultDifficulty,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase());
            					}
            					else {
HXLINE(2478)						_hx_tmp9 = false;
            					}
HXDLIN(2478)					if (_hx_tmp9) {
HXLINE(2478)						filePostfix = (HX_("-",2d,00,00,00) + filePostfix);
            					}
            					else {
HXLINE(2478)						filePostfix = HX_("",00,00,00,00);
            					}
HXDLIN(2478)					 ::EReg invalidChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(2478)					 ::EReg hideChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(2478)					::String difficulty = ::StringTools_obj::trim(hideChars2->replace(invalidChars2->replace(filePostfix,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
HXLINE(2480)					::haxe::Log_obj::trace(HX_("LOADING NEXT SONG",5e,07,d0,ca),::hx::SourceInfo(HX_("source/states/PlayState.hx",3a,21,29,28),2480,HX_("states.PlayState",31,cd,20,04),HX_("endSong",50,dd,7c,2e)));
HXLINE(2481)					 ::Dynamic _hx_tmp11 = ::haxe::Log_obj::trace;
HXDLIN(2481)					::String path = ::states::PlayState_obj::storyPlaylist->__get(0);
HXDLIN(2481)					 ::EReg invalidChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(2481)					 ::EReg hideChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(2481)					::String _hx_tmp12 = (::StringTools_obj::trim(hideChars3->replace(invalidChars3->replace(path,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase() + difficulty);
HXDLIN(2481)					_hx_tmp11(_hx_tmp12,::hx::SourceInfo(HX_("source/states/PlayState.hx",3a,21,29,28),2481,HX_("states.PlayState",31,cd,20,04),HX_("endSong",50,dd,7c,2e)));
HXLINE(2483)					::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE(2484)					::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
HXLINE(2485)					::states::PlayState_obj::prevCamFollow = this->camFollow;
HXLINE(2487)					::backend::Song_obj::loadFromJson((::states::PlayState_obj::storyPlaylist->__get(0) + difficulty),::states::PlayState_obj::storyPlaylist->__get(0));
HXLINE(2488)					{
HXLINE(2488)						 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(2488)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE(2490)					this->canResync = false;
HXLINE(2491)					::states::LoadingState_obj::prepareToSong();
HXLINE(2492)					::backend::MusicBeatState_obj::switchState(::states::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::states::PlayState_obj::__alloc( HX_CTX )) ),false,false));
            				}
            			}
            			else {
HXLINE(2497)				::haxe::Log_obj::trace(HX_("WENT BACK TO FREEPLAY??",58,1b,be,6a),::hx::SourceInfo(HX_("source/states/PlayState.hx",3a,21,29,28),2497,HX_("states.PlayState",31,cd,20,04),HX_("endSong",50,dd,7c,2e)));
HXLINE(2498)				::backend::Mods_obj::loadTopMod();
HXLINE(2499)				::backend::DiscordClient_obj::set_clientID(HX_("863222024192262205",be,6e,40,13));
HXLINE(2501)				this->canResync = false;
HXLINE(2502)				::backend::MusicBeatState_obj::switchState( ::states::FreeplayState_obj::__alloc( HX_CTX ));
HXLINE(2503)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp13 = ::flixel::FlxG_obj::sound;
HXDLIN(2503)				_hx_tmp13->playMusic(::backend::Paths_obj::returnSound((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)),null(),true,null()),null(),null(),null());
HXLINE(2504)				::states::PlayState_obj::changedDifficulty = false;
            			}
HXLINE(2506)			this->transitioning = true;
            		}
HXLINE(2508)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,endSong,return )

void PlayState_obj::KillNotes(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2511_KillNotes)
HXLINE(2512)		while((this->notes->length > 0)){
HXLINE(2513)			 ::objects::Note daNote = Dynamic( this->notes->members->__get(0)).StaticCast<  ::objects::Note >();
HXLINE(2514)			daNote->set_active(false);
HXLINE(2515)			daNote->set_visible(false);
HXLINE(2516)			this->invalidateNote(daNote);
            		}
HXLINE(2518)		this->unspawnNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2519)		this->eventNotes = ::Array_obj< ::Dynamic>::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,KillNotes,(void))

void PlayState_obj::cachePopUpScore(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2537_cachePopUpScore)
HXLINE(2538)		::String uiFolder = HX_("",00,00,00,00);
HXLINE(2539)		if ((::states::PlayState_obj::stageUI != HX_("normal",27,72,69,30))) {
HXLINE(2540)			uiFolder = (::states::PlayState_obj::uiPrefix + HX_("UI/",5b,bf,40,00));
            		}
HXLINE(2542)		{
HXLINE(2542)			int _g = 0;
HXDLIN(2542)			::Array< ::Dynamic> _g1 = this->ratingsData;
HXDLIN(2542)			while((_g < _g1->length)){
HXLINE(2542)				 ::backend::Rating rating = _g1->__get(_g).StaticCast<  ::backend::Rating >();
HXDLIN(2542)				_g = (_g + 1);
HXLINE(2543)				::backend::Paths_obj::image(((uiFolder + rating->image) + ::states::PlayState_obj::uiPostfix),null(),null());
            			}
            		}
HXLINE(2544)		{
HXLINE(2545)			::backend::Paths_obj::image((((uiFolder + HX_("num",46,de,53,00)) + 0) + ::states::PlayState_obj::uiPostfix),null(),null());
HXDLIN(2545)			::backend::Paths_obj::image((((uiFolder + HX_("num",46,de,53,00)) + 1) + ::states::PlayState_obj::uiPostfix),null(),null());
HXDLIN(2545)			::backend::Paths_obj::image((((uiFolder + HX_("num",46,de,53,00)) + 2) + ::states::PlayState_obj::uiPostfix),null(),null());
HXDLIN(2545)			::backend::Paths_obj::image((((uiFolder + HX_("num",46,de,53,00)) + 3) + ::states::PlayState_obj::uiPostfix),null(),null());
HXDLIN(2545)			::backend::Paths_obj::image((((uiFolder + HX_("num",46,de,53,00)) + 4) + ::states::PlayState_obj::uiPostfix),null(),null());
HXDLIN(2545)			::backend::Paths_obj::image((((uiFolder + HX_("num",46,de,53,00)) + 5) + ::states::PlayState_obj::uiPostfix),null(),null());
HXDLIN(2545)			::backend::Paths_obj::image((((uiFolder + HX_("num",46,de,53,00)) + 6) + ::states::PlayState_obj::uiPostfix),null(),null());
HXDLIN(2545)			::backend::Paths_obj::image((((uiFolder + HX_("num",46,de,53,00)) + 7) + ::states::PlayState_obj::uiPostfix),null(),null());
HXDLIN(2545)			::backend::Paths_obj::image((((uiFolder + HX_("num",46,de,53,00)) + 8) + ::states::PlayState_obj::uiPostfix),null(),null());
HXDLIN(2545)			::backend::Paths_obj::image((((uiFolder + HX_("num",46,de,53,00)) + 9) + ::states::PlayState_obj::uiPostfix),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,cachePopUpScore,(void))

void PlayState_obj::popUpScore( ::objects::Note note){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,comboSpr1, ::flixel::FlxSprite,rating) HXARGC(1)
            		void _hx_run( ::flixel::tweens::FlxTween tween){
            			HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_2682_popUpScore)
HXLINE(2683)			comboSpr1->destroy();
HXLINE(2684)			rating->destroy();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_2549_popUpScore)
HXLINE(2550)		Float noteDiff = ::Math_obj::abs(((note->strumTime - ::backend::Conductor_obj::songPosition) + ::backend::ClientPrefs_obj::data->ratingOffset));
HXLINE(2551)		this->vocals->set_volume(( (Float)(1) ));
HXLINE(2553)		bool _hx_tmp;
HXDLIN(2553)		if (!(::backend::ClientPrefs_obj::data->comboStacking)) {
HXLINE(2553)			_hx_tmp = (this->comboGroup->group->members->get_length() > 0);
            		}
            		else {
HXLINE(2553)			_hx_tmp = false;
            		}
HXDLIN(2553)		if (_hx_tmp) {
HXLINE(2555)			 ::Dynamic filter = null();
HXDLIN(2555)			 ::flixel::group::FlxTypedGroupIterator spr =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->comboGroup->group->members,filter);
HXDLIN(2555)			while(spr->hasNext()){
HXLINE(2555)				 ::flixel::FlxSprite spr1 = spr->next().StaticCast<  ::flixel::FlxSprite >();
HXLINE(2557)				if (::hx::IsNull( spr1 )) {
HXLINE(2557)					continue;
            				}
HXLINE(2559)				this->comboGroup->remove(spr1,null()).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2560)				spr1->destroy();
            			}
            		}
HXLINE(2564)		Float placement = (( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.35));
HXLINE(2565)		 ::flixel::FlxSprite rating =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(2566)		int score = 350;
HXLINE(2569)		 ::backend::Rating daRating = ::backend::Conductor_obj::judgeNote(this->ratingsData,(noteDiff / this->playbackRate));
HXLINE(2571)		 ::states::PlayState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2571)		_hx_tmp1->totalNotesHit = (_hx_tmp1->totalNotesHit + daRating->ratingMod);
HXLINE(2572)		note->ratingMod = daRating->ratingMod;
HXLINE(2573)		if (!(note->ratingDisabled)) {
HXLINE(2573)			daRating->hits++;
            		}
HXLINE(2574)		note->rating = daRating->name;
HXLINE(2575)		score = daRating->score;
HXLINE(2577)		bool _hx_tmp2;
HXDLIN(2577)		if (daRating->noteSplash) {
HXLINE(2577)			_hx_tmp2 = !(( (bool)(note->noteSplashData->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE(2577)			_hx_tmp2 = false;
            		}
HXDLIN(2577)		if (_hx_tmp2) {
HXLINE(2578)			this->spawnNoteSplashOnNote(note);
            		}
HXLINE(2580)		if (!(this->cpuControlled)) {
HXLINE(2581)			 ::states::PlayState _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2581)			_hx_tmp3->songScore = (_hx_tmp3->songScore + score);
HXLINE(2582)			if (!(note->ratingDisabled)) {
HXLINE(2584)				this->songHits++;
HXLINE(2585)				this->totalPlayed++;
HXLINE(2586)				this->RecalculateRating(false,null());
            			}
            		}
HXLINE(2590)		::String uiFolder = HX_("",00,00,00,00);
HXLINE(2591)		bool antialias = ::backend::ClientPrefs_obj::data->antialiasing;
HXLINE(2592)		if ((::states::PlayState_obj::stageUI != HX_("normal",27,72,69,30))) {
HXLINE(2594)			uiFolder = (::states::PlayState_obj::uiPrefix + HX_("UI/",5b,bf,40,00));
HXLINE(2595)			antialias = !(::states::PlayState_obj::get_isPixelStage());
            		}
HXLINE(2598)		 ::flixel::FlxSprite rating1 = rating;
HXDLIN(2598)		rating1->loadGraphic(::backend::Paths_obj::image(((uiFolder + daRating->image) + ::states::PlayState_obj::uiPostfix),null(),null()),null(),null(),null(),null(),null());
HXLINE(2599)		{
HXLINE(2599)			int axes = 17;
HXDLIN(2599)			bool _hx_tmp4;
HXDLIN(2599)			if ((axes != 1)) {
HXLINE(2599)				_hx_tmp4 = (axes == 17);
            			}
            			else {
HXLINE(2599)				_hx_tmp4 = true;
            			}
HXDLIN(2599)			if (_hx_tmp4) {
HXLINE(2599)				 ::flixel::FlxSprite rating2 = rating;
HXDLIN(2599)				int _hx_tmp5 = ::flixel::FlxG_obj::width;
HXDLIN(2599)				rating2->set_x(((( (Float)(_hx_tmp5) ) - rating->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(2599)			bool _hx_tmp6;
HXDLIN(2599)			if ((axes != 16)) {
HXLINE(2599)				_hx_tmp6 = (axes == 17);
            			}
            			else {
HXLINE(2599)				_hx_tmp6 = true;
            			}
HXDLIN(2599)			if (_hx_tmp6) {
HXLINE(2599)				 ::flixel::FlxSprite rating3 = rating;
HXDLIN(2599)				int _hx_tmp7 = ::flixel::FlxG_obj::height;
HXDLIN(2599)				rating3->set_y(((( (Float)(_hx_tmp7) ) - rating->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(2600)		rating->set_x((placement - ( (Float)(40) )));
HXLINE(2601)		rating->set_y((rating->y - ( (Float)(60) )));
HXLINE(2602)		rating->acceleration->set_y(((( (Float)(550) ) * this->playbackRate) * this->playbackRate));
HXLINE(2603)		{
HXLINE(2603)			 ::flixel::math::FlxBasePoint this1 = rating->velocity;
HXDLIN(2603)			Float rating4 = rating->velocity->y;
HXDLIN(2603)			int y = ::flixel::FlxG_obj::random->_hx_int(140,175,null());
HXDLIN(2603)			this1->set_y((rating4 - (( (Float)(y) ) * this->playbackRate)));
            		}
HXLINE(2604)		{
HXLINE(2604)			 ::flixel::math::FlxBasePoint this2 = rating->velocity;
HXDLIN(2604)			Float rating5 = rating->velocity->x;
HXDLIN(2604)			int x = ::flixel::FlxG_obj::random->_hx_int(0,10,null());
HXDLIN(2604)			this2->set_x((rating5 - (( (Float)(x) ) * this->playbackRate)));
            		}
HXLINE(2605)		bool _hx_tmp8;
HXDLIN(2605)		if (!(::backend::ClientPrefs_obj::data->hideHud)) {
HXLINE(2605)			_hx_tmp8 = this->showRating;
            		}
            		else {
HXLINE(2605)			_hx_tmp8 = false;
            		}
HXDLIN(2605)		rating->set_visible(_hx_tmp8);
HXLINE(2606)		rating->set_x((rating->x + ::backend::ClientPrefs_obj::data->comboOffset->__get(0)));
HXLINE(2607)		rating->set_y((rating->y - ( (Float)(::backend::ClientPrefs_obj::data->comboOffset->__get(1)) )));
HXLINE(2608)		rating->set_antialiasing(antialias);
HXLINE(2610)		 ::flixel::FlxSprite comboSpr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(2610)		 ::flixel::FlxSprite comboSpr1 = comboSpr->loadGraphic(::backend::Paths_obj::image(((uiFolder + HX_("combo",4e,28,5d,4a)) + ::states::PlayState_obj::uiPostfix),null(),null()),null(),null(),null(),null(),null());
HXLINE(2611)		{
HXLINE(2611)			int axes1 = 17;
HXDLIN(2611)			bool _hx_tmp9;
HXDLIN(2611)			if ((axes1 != 1)) {
HXLINE(2611)				_hx_tmp9 = (axes1 == 17);
            			}
            			else {
HXLINE(2611)				_hx_tmp9 = true;
            			}
HXDLIN(2611)			if (_hx_tmp9) {
HXLINE(2611)				 ::flixel::FlxSprite comboSpr2 = comboSpr1;
HXDLIN(2611)				int _hx_tmp10 = ::flixel::FlxG_obj::width;
HXDLIN(2611)				comboSpr2->set_x(((( (Float)(_hx_tmp10) ) - comboSpr1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(2611)			bool _hx_tmp11;
HXDLIN(2611)			if ((axes1 != 16)) {
HXLINE(2611)				_hx_tmp11 = (axes1 == 17);
            			}
            			else {
HXLINE(2611)				_hx_tmp11 = true;
            			}
HXDLIN(2611)			if (_hx_tmp11) {
HXLINE(2611)				 ::flixel::FlxSprite comboSpr3 = comboSpr1;
HXDLIN(2611)				int _hx_tmp12 = ::flixel::FlxG_obj::height;
HXDLIN(2611)				comboSpr3->set_y(((( (Float)(_hx_tmp12) ) - comboSpr1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(2612)		comboSpr1->set_x(placement);
HXLINE(2613)		{
HXLINE(2613)			 ::flixel::math::FlxBasePoint this3 = comboSpr1->acceleration;
HXDLIN(2613)			int y1 = ::flixel::FlxG_obj::random->_hx_int(200,300,null());
HXDLIN(2613)			this3->set_y(((( (Float)(y1) ) * this->playbackRate) * this->playbackRate));
            		}
HXLINE(2614)		{
HXLINE(2614)			 ::flixel::math::FlxBasePoint this4 = comboSpr1->velocity;
HXDLIN(2614)			Float comboSpr4 = comboSpr1->velocity->y;
HXDLIN(2614)			int y2 = ::flixel::FlxG_obj::random->_hx_int(140,160,null());
HXDLIN(2614)			this4->set_y((comboSpr4 - (( (Float)(y2) ) * this->playbackRate)));
            		}
HXLINE(2615)		bool _hx_tmp13;
HXDLIN(2615)		if (!(::backend::ClientPrefs_obj::data->hideHud)) {
HXLINE(2615)			_hx_tmp13 = this->showCombo;
            		}
            		else {
HXLINE(2615)			_hx_tmp13 = false;
            		}
HXDLIN(2615)		comboSpr1->set_visible(_hx_tmp13);
HXLINE(2616)		comboSpr1->set_x((comboSpr1->x + ::backend::ClientPrefs_obj::data->comboOffset->__get(0)));
HXLINE(2617)		comboSpr1->set_y((comboSpr1->y - ( (Float)(::backend::ClientPrefs_obj::data->comboOffset->__get(1)) )));
HXLINE(2618)		comboSpr1->set_antialiasing(antialias);
HXLINE(2619)		comboSpr1->set_y((comboSpr1->y + 60));
HXLINE(2620)		{
HXLINE(2620)			 ::flixel::math::FlxBasePoint this5 = comboSpr1->velocity;
HXDLIN(2620)			Float comboSpr5 = comboSpr1->velocity->x;
HXDLIN(2620)			int x1 = ::flixel::FlxG_obj::random->_hx_int(1,10,null());
HXDLIN(2620)			this5->set_x((comboSpr5 + (( (Float)(x1) ) * this->playbackRate)));
            		}
HXLINE(2621)		this->comboGroup->add(rating).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2623)		if (!(::states::PlayState_obj::get_isPixelStage())) {
HXLINE(2625)			 ::flixel::FlxSprite rating6 = rating;
HXDLIN(2625)			rating6->setGraphicSize(::Std_obj::_hx_int((rating->get_width() * ((Float)0.7))),null());
HXLINE(2626)			 ::flixel::FlxSprite comboSpr6 = comboSpr1;
HXDLIN(2626)			comboSpr6->setGraphicSize(::Std_obj::_hx_int((comboSpr1->get_width() * ((Float)0.7))),null());
            		}
            		else {
HXLINE(2630)			 ::flixel::FlxSprite rating7 = rating;
HXDLIN(2630)			Float _hx_tmp14 = rating->get_width();
HXDLIN(2630)			rating7->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp14 * ::states::PlayState_obj::daPixelZoom) * ((Float)0.85))),null());
HXLINE(2631)			 ::flixel::FlxSprite comboSpr7 = comboSpr1;
HXDLIN(2631)			Float _hx_tmp15 = comboSpr1->get_width();
HXDLIN(2631)			comboSpr7->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp15 * ::states::PlayState_obj::daPixelZoom) * ((Float)0.85))),null());
            		}
HXLINE(2634)		comboSpr1->updateHitbox();
HXLINE(2635)		rating->updateHitbox();
HXLINE(2637)		int daLoop = 0;
HXLINE(2638)		Float xThing = ( (Float)(0) );
HXLINE(2639)		if (this->showCombo) {
HXLINE(2640)			this->comboGroup->add(comboSpr1).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(2642)		::String separatedScore = ::StringTools_obj::lpad(::Std_obj::string(this->combo),HX_("0",30,00,00,00),3);
HXLINE(2643)		{
HXLINE(2643)			int _g = 0;
HXDLIN(2643)			int _g1 = separatedScore.length;
HXDLIN(2643)			while((_g < _g1)){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,numScore2) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween tween){
            					HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_2667_popUpScore)
HXLINE(2667)					numScore2->destroy();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(2643)				_g = (_g + 1);
HXDLIN(2643)				int i = (_g - 1);
HXLINE(2645)				 ::flixel::FlxSprite numScore =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(2645)				::String numScore1 = ((uiFolder + HX_("num",46,de,53,00)) + ::Std_obj::parseInt(separatedScore.charAt(i)));
HXDLIN(2645)				 ::flixel::FlxSprite numScore2 = numScore->loadGraphic(::backend::Paths_obj::image((numScore1 + ::states::PlayState_obj::uiPostfix),null(),null()),null(),null(),null(),null(),null());
HXLINE(2646)				{
HXLINE(2646)					int axes2 = 17;
HXDLIN(2646)					bool _hx_tmp16;
HXDLIN(2646)					if ((axes2 != 1)) {
HXLINE(2646)						_hx_tmp16 = (axes2 == 17);
            					}
            					else {
HXLINE(2646)						_hx_tmp16 = true;
            					}
HXDLIN(2646)					if (_hx_tmp16) {
HXLINE(2646)						 ::flixel::FlxSprite numScore3 = numScore2;
HXDLIN(2646)						int _hx_tmp17 = ::flixel::FlxG_obj::width;
HXDLIN(2646)						numScore3->set_x(((( (Float)(_hx_tmp17) ) - numScore2->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(2646)					bool _hx_tmp18;
HXDLIN(2646)					if ((axes2 != 16)) {
HXLINE(2646)						_hx_tmp18 = (axes2 == 17);
            					}
            					else {
HXLINE(2646)						_hx_tmp18 = true;
            					}
HXDLIN(2646)					if (_hx_tmp18) {
HXLINE(2646)						 ::flixel::FlxSprite numScore4 = numScore2;
HXDLIN(2646)						int _hx_tmp19 = ::flixel::FlxG_obj::height;
HXDLIN(2646)						numScore4->set_y(((( (Float)(_hx_tmp19) ) - numScore2->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(2647)				numScore2->set_x((((placement + (43 * daLoop)) - ( (Float)(90) )) + ::backend::ClientPrefs_obj::data->comboOffset->__get(2)));
HXLINE(2648)				numScore2->set_y((numScore2->y + (80 - ::backend::ClientPrefs_obj::data->comboOffset->__get(3))));
HXLINE(2650)				if (!(::states::PlayState_obj::get_isPixelStage())) {
HXLINE(2650)					 ::flixel::FlxSprite numScore5 = numScore2;
HXDLIN(2650)					numScore5->setGraphicSize(::Std_obj::_hx_int((numScore2->get_width() * ((Float)0.5))),null());
            				}
            				else {
HXLINE(2651)					 ::flixel::FlxSprite numScore6 = numScore2;
HXDLIN(2651)					Float _hx_tmp20 = numScore2->get_width();
HXDLIN(2651)					numScore6->setGraphicSize(::Std_obj::_hx_int((_hx_tmp20 * ::states::PlayState_obj::daPixelZoom)),null());
            				}
HXLINE(2652)				numScore2->updateHitbox();
HXLINE(2654)				{
HXLINE(2654)					 ::flixel::math::FlxBasePoint this6 = numScore2->acceleration;
HXDLIN(2654)					int y3 = ::flixel::FlxG_obj::random->_hx_int(200,300,null());
HXDLIN(2654)					this6->set_y(((( (Float)(y3) ) * this->playbackRate) * this->playbackRate));
            				}
HXLINE(2655)				{
HXLINE(2655)					 ::flixel::math::FlxBasePoint this7 = numScore2->velocity;
HXDLIN(2655)					Float numScore7 = numScore2->velocity->y;
HXDLIN(2655)					int y4 = ::flixel::FlxG_obj::random->_hx_int(140,160,null());
HXDLIN(2655)					this7->set_y((numScore7 - (( (Float)(y4) ) * this->playbackRate)));
            				}
HXLINE(2656)				{
HXLINE(2656)					 ::flixel::math::FlxBasePoint this8 = numScore2->velocity;
HXDLIN(2656)					Float x2 = ::flixel::FlxG_obj::random->_hx_float(-5,5,null());
HXDLIN(2656)					this8->set_x((x2 * this->playbackRate));
            				}
HXLINE(2657)				numScore2->set_visible(!(::backend::ClientPrefs_obj::data->hideHud));
HXLINE(2658)				numScore2->set_antialiasing(antialias);
HXLINE(2661)				if (this->showComboNum) {
HXLINE(2662)					this->comboGroup->add(numScore2).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE(2664)				::flixel::tweens::FlxTween_obj::tween(numScore2, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(((Float)0.2) / this->playbackRate), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),((::backend::Conductor_obj::crochet * ((Float)0.002)) / this->playbackRate))
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(numScore2)))));
HXLINE(2672)				daLoop = (daLoop + 1);
HXLINE(2673)				if ((numScore2->x > xThing)) {
HXLINE(2673)					xThing = numScore2->x;
            				}
            			}
            		}
HXLINE(2675)		comboSpr1->set_x((xThing + 50));
HXLINE(2676)		::flixel::tweens::FlxTween_obj::tween(rating, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(((Float)0.2) / this->playbackRate), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((::backend::Conductor_obj::crochet * ((Float)0.001)) / this->playbackRate))));
HXLINE(2680)		::flixel::tweens::FlxTween_obj::tween(comboSpr1, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(((Float)0.2) / this->playbackRate), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((::backend::Conductor_obj::crochet * ((Float)0.002)) / this->playbackRate))
            			->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(comboSpr1,rating)))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,popUpScore,(void))

void PlayState_obj::onKeyPress( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2692_onKeyPress)
HXLINE(2694)		int eventKey = event->keyCode;
HXLINE(2695)		int key = ::states::PlayState_obj::getKeyFromEvent(this->keysArray,eventKey);
HXLINE(2697)		if (!(this->get_controls()->controllerMode)) {
HXLINE(2704)			if (::flixel::FlxG_obj::keys->checkStatus(eventKey,2)) {
HXLINE(2704)				this->keyPressed(key);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,onKeyPress,(void))

void PlayState_obj::keyPressed(int key){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2709_keyPressed)
HXDLIN(2709)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2710)		bool _hx_tmp;
HXDLIN(2710)		bool _hx_tmp1;
HXDLIN(2710)		bool _hx_tmp2;
HXDLIN(2710)		bool _hx_tmp3;
HXDLIN(2710)		bool _hx_tmp4;
HXDLIN(2710)		bool _hx_tmp5;
HXDLIN(2710)		bool _hx_tmp6;
HXDLIN(2710)		if (!(this->cpuControlled)) {
HXLINE(2710)			_hx_tmp6 = this->paused;
            		}
            		else {
HXLINE(2710)			_hx_tmp6 = true;
            		}
HXDLIN(2710)		if (!(_hx_tmp6)) {
HXLINE(2710)			_hx_tmp5 = this->inCutscene;
            		}
            		else {
HXLINE(2710)			_hx_tmp5 = true;
            		}
HXDLIN(2710)		if (!(_hx_tmp5)) {
HXLINE(2710)			_hx_tmp4 = (key < 0);
            		}
            		else {
HXLINE(2710)			_hx_tmp4 = true;
            		}
HXDLIN(2710)		if (!(_hx_tmp4)) {
HXLINE(2710)			_hx_tmp3 = (key >= this->playerStrums->length);
            		}
            		else {
HXLINE(2710)			_hx_tmp3 = true;
            		}
HXDLIN(2710)		if (!(_hx_tmp3)) {
HXLINE(2710)			_hx_tmp2 = !(this->generatedMusic);
            		}
            		else {
HXLINE(2710)			_hx_tmp2 = true;
            		}
HXDLIN(2710)		if (!(_hx_tmp2)) {
HXLINE(2710)			_hx_tmp1 = this->endingSong;
            		}
            		else {
HXLINE(2710)			_hx_tmp1 = true;
            		}
HXDLIN(2710)		if (!(_hx_tmp1)) {
HXLINE(2710)			_hx_tmp = this->boyfriend->stunned;
            		}
            		else {
HXLINE(2710)			_hx_tmp = true;
            		}
HXDLIN(2710)		if (_hx_tmp) {
HXLINE(2710)			return;
            		}
HXLINE(2712)		 ::Dynamic ret = this->callOnScripts(HX_("onKeyPressPre",40,32,10,1b),::cpp::VirtualArray_obj::__new(1)->init(0,key),null(),null(),null());
HXLINE(2713)		if (::hx::IsEq( ret,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(2713)			return;
            		}
HXLINE(2716)		Float lastTime = ::backend::Conductor_obj::songPosition;
HXLINE(2717)		if ((::backend::Conductor_obj::songPosition >= 0)) {
HXLINE(2717)			::backend::Conductor_obj::songPosition = (::flixel::FlxG_obj::sound->music->_time + ::backend::Conductor_obj::offset);
            		}
HXLINE(2720)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(2720)		{
HXLINE(2720)			int _g1 = 0;
HXDLIN(2720)			::Array< ::Dynamic> _g2 = this->notes->members;
HXDLIN(2720)			while((_g1 < _g2->length)){
HXLINE(2720)				 ::objects::Note v = _g2->__get(_g1).StaticCast<  ::objects::Note >();
HXDLIN(2720)				_g1 = (_g1 + 1);
HXLINE(2721)				bool canHit;
HXDLIN(2721)				bool canHit1;
HXDLIN(2721)				bool canHit2;
HXDLIN(2721)				bool canHit3;
HXDLIN(2721)				bool canHit4;
HXDLIN(2721)				bool canHit5;
HXDLIN(2721)				if (::hx::IsNotNull( v )) {
HXLINE(2721)					canHit5 = !(_gthis->strumsBlocked->__get(v->noteData));
            				}
            				else {
HXLINE(2721)					canHit5 = false;
            				}
HXDLIN(2721)				if (canHit5) {
HXLINE(2721)					canHit4 = v->canBeHit;
            				}
            				else {
HXLINE(2721)					canHit4 = false;
            				}
HXDLIN(2721)				if (canHit4) {
HXLINE(2721)					canHit3 = v->mustPress;
            				}
            				else {
HXLINE(2721)					canHit3 = false;
            				}
HXDLIN(2721)				if (canHit3) {
HXLINE(2721)					canHit2 = !(v->tooLate);
            				}
            				else {
HXLINE(2721)					canHit2 = false;
            				}
HXDLIN(2721)				if (canHit2) {
HXLINE(2721)					canHit1 = !(v->wasGoodHit);
            				}
            				else {
HXLINE(2721)					canHit1 = false;
            				}
HXDLIN(2721)				if (canHit1) {
HXLINE(2721)					canHit = !(v->blockHit);
            				}
            				else {
HXLINE(2721)					canHit = false;
            				}
HXLINE(2720)				bool _hx_tmp7;
HXLINE(2722)				bool _hx_tmp8;
HXDLIN(2722)				if (canHit) {
HXLINE(2722)					_hx_tmp8 = !(v->isSustainNote);
            				}
            				else {
HXLINE(2722)					_hx_tmp8 = false;
            				}
HXDLIN(2722)				if (_hx_tmp8) {
HXLINE(2720)					_hx_tmp7 = (v->noteData == key);
            				}
            				else {
HXLINE(2720)					_hx_tmp7 = false;
            				}
HXDLIN(2720)				if (_hx_tmp7) {
HXLINE(2720)					_g->push(v);
            				}
            			}
            		}
HXDLIN(2720)		::Array< ::Dynamic> plrInputNotes = _g;
HXLINE(2724)		plrInputNotes->sort(::states::PlayState_obj::sortHitNotes_dyn());
HXLINE(2726)		if ((plrInputNotes->length != 0)) {
HXLINE(2727)			 ::objects::Note funnyNote = plrInputNotes->__get(0).StaticCast<  ::objects::Note >();
HXLINE(2729)			if ((plrInputNotes->length > 1)) {
HXLINE(2730)				 ::objects::Note doubleNote = plrInputNotes->__get(1).StaticCast<  ::objects::Note >();
HXLINE(2732)				if ((doubleNote->noteData == funnyNote->noteData)) {
HXLINE(2734)					if ((::Math_obj::abs((doubleNote->strumTime - funnyNote->strumTime)) < ((Float)1.0))) {
HXLINE(2735)						this->invalidateNote(doubleNote);
            					}
            					else {
HXLINE(2736)						if ((doubleNote->strumTime < funnyNote->strumTime)) {
HXLINE(2739)							funnyNote = doubleNote;
            						}
            					}
            				}
            			}
HXLINE(2743)			this->goodNoteHit(funnyNote);
            		}
            		else {
HXLINE(2747)			if (::backend::ClientPrefs_obj::data->ghostTapping) {
HXLINE(2748)				this->callOnScripts(HX_("onGhostTap",93,92,59,ab),::cpp::VirtualArray_obj::__new(1)->init(0,key),null(),null(),null());
            			}
            			else {
HXLINE(2750)				this->noteMissPress(key);
            			}
            		}
HXLINE(2755)		if (!(this->keysPressed->contains(key))) {
HXLINE(2755)			this->keysPressed->push(key);
            		}
HXLINE(2758)		::backend::Conductor_obj::songPosition = lastTime;
HXLINE(2760)		 ::objects::StrumNote spr = Dynamic( this->playerStrums->members->__get(key)).StaticCast<  ::objects::StrumNote >();
HXLINE(2761)		bool _hx_tmp9;
HXDLIN(2761)		bool _hx_tmp10;
HXDLIN(2761)		if ((this->strumsBlocked->__get(key) != true)) {
HXLINE(2761)			_hx_tmp10 = ::hx::IsNotNull( spr );
            		}
            		else {
HXLINE(2761)			_hx_tmp10 = false;
            		}
HXDLIN(2761)		if (_hx_tmp10) {
HXLINE(2761)			_hx_tmp9 = (spr->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            		}
            		else {
HXLINE(2761)			_hx_tmp9 = false;
            		}
HXDLIN(2761)		if (_hx_tmp9) {
HXLINE(2763)			spr->playAnim(HX_("pressed",a2,d2,e6,39),null());
HXLINE(2764)			spr->resetAnim = ( (Float)(0) );
            		}
HXLINE(2766)		this->callOnScripts(HX_("onKeyPress",a3,cd,a8,ea),::cpp::VirtualArray_obj::__new(1)->init(0,key),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,keyPressed,(void))

void PlayState_obj::onKeyRelease( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2780_onKeyRelease)
HXLINE(2781)		int eventKey = event->keyCode;
HXLINE(2782)		int key = ::states::PlayState_obj::getKeyFromEvent(this->keysArray,eventKey);
HXLINE(2783)		bool _hx_tmp;
HXDLIN(2783)		if (!(this->get_controls()->controllerMode)) {
HXLINE(2783)			_hx_tmp = (key > -1);
            		}
            		else {
HXLINE(2783)			_hx_tmp = false;
            		}
HXDLIN(2783)		if (_hx_tmp) {
HXLINE(2783)			this->keyReleased(key);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,onKeyRelease,(void))

void PlayState_obj::keyReleased(int key){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2787_keyReleased)
HXLINE(2788)		bool _hx_tmp;
HXDLIN(2788)		bool _hx_tmp1;
HXDLIN(2788)		bool _hx_tmp2;
HXDLIN(2788)		bool _hx_tmp3;
HXDLIN(2788)		if (!(this->cpuControlled)) {
HXLINE(2788)			_hx_tmp3 = !(this->startedCountdown);
            		}
            		else {
HXLINE(2788)			_hx_tmp3 = true;
            		}
HXDLIN(2788)		if (!(_hx_tmp3)) {
HXLINE(2788)			_hx_tmp2 = this->paused;
            		}
            		else {
HXLINE(2788)			_hx_tmp2 = true;
            		}
HXDLIN(2788)		if (!(_hx_tmp2)) {
HXLINE(2788)			_hx_tmp1 = (key < 0);
            		}
            		else {
HXLINE(2788)			_hx_tmp1 = true;
            		}
HXDLIN(2788)		if (!(_hx_tmp1)) {
HXLINE(2788)			_hx_tmp = (key >= this->playerStrums->length);
            		}
            		else {
HXLINE(2788)			_hx_tmp = true;
            		}
HXDLIN(2788)		if (_hx_tmp) {
HXLINE(2788)			return;
            		}
HXLINE(2790)		 ::Dynamic ret = this->callOnScripts(HX_("onKeyReleasePre",7c,fa,aa,25),::cpp::VirtualArray_obj::__new(1)->init(0,key),null(),null(),null());
HXLINE(2791)		if (::hx::IsEq( ret,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(2791)			return;
            		}
HXLINE(2793)		 ::objects::StrumNote spr = Dynamic( this->playerStrums->members->__get(key)).StaticCast<  ::objects::StrumNote >();
HXLINE(2794)		if (::hx::IsNotNull( spr )) {
HXLINE(2796)			spr->playAnim(HX_("static",ae,dc,fb,05),null());
HXLINE(2797)			spr->resetAnim = ( (Float)(0) );
            		}
HXLINE(2799)		this->callOnScripts(HX_("onKeyRelease",e7,c7,b8,9f),::cpp::VirtualArray_obj::__new(1)->init(0,key),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,keyReleased,(void))

void PlayState_obj::keysCheck(){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_2819_keysCheck)
HXLINE(2821)		::Array< bool > holdArray = ::Array_obj< bool >::__new(0);
HXLINE(2822)		::Array< bool > pressArray = ::Array_obj< bool >::__new(0);
HXLINE(2823)		::Array< bool > releaseArray = ::Array_obj< bool >::__new(0);
HXLINE(2824)		{
HXLINE(2824)			int _g = 0;
HXDLIN(2824)			::Array< ::String > _g1 = this->keysArray;
HXDLIN(2824)			while((_g < _g1->length)){
HXLINE(2824)				::String key = _g1->__get(_g);
HXDLIN(2824)				_g = (_g + 1);
HXLINE(2826)				holdArray->push(this->get_controls()->pressed(key));
HXLINE(2827)				pressArray->push(this->get_controls()->justPressed(key));
HXLINE(2828)				releaseArray->push(this->get_controls()->justReleased(key));
            			}
            		}
HXLINE(2832)		bool _hx_tmp;
HXDLIN(2832)		if (this->get_controls()->controllerMode) {
HXLINE(2832)			_hx_tmp = pressArray->contains(true);
            		}
            		else {
HXLINE(2832)			_hx_tmp = false;
            		}
HXDLIN(2832)		if (_hx_tmp) {
HXLINE(2833)			int _g2 = 0;
HXDLIN(2833)			int _g3 = pressArray->length;
HXDLIN(2833)			while((_g2 < _g3)){
HXLINE(2833)				_g2 = (_g2 + 1);
HXDLIN(2833)				int i = (_g2 - 1);
HXLINE(2834)				bool _hx_tmp1;
HXDLIN(2834)				if (pressArray->__get(i)) {
HXLINE(2834)					_hx_tmp1 = (this->strumsBlocked->__get(i) != true);
            				}
            				else {
HXLINE(2834)					_hx_tmp1 = false;
            				}
HXDLIN(2834)				if (_hx_tmp1) {
HXLINE(2835)					this->keyPressed(i);
            				}
            			}
            		}
HXLINE(2837)		bool _hx_tmp2;
HXDLIN(2837)		bool _hx_tmp3;
HXDLIN(2837)		bool _hx_tmp4;
HXDLIN(2837)		if (this->startedCountdown) {
HXLINE(2837)			_hx_tmp4 = !(this->inCutscene);
            		}
            		else {
HXLINE(2837)			_hx_tmp4 = false;
            		}
HXDLIN(2837)		if (_hx_tmp4) {
HXLINE(2837)			_hx_tmp3 = !(this->boyfriend->stunned);
            		}
            		else {
HXLINE(2837)			_hx_tmp3 = false;
            		}
HXDLIN(2837)		if (_hx_tmp3) {
HXLINE(2837)			_hx_tmp2 = this->generatedMusic;
            		}
            		else {
HXLINE(2837)			_hx_tmp2 = false;
            		}
HXDLIN(2837)		if (_hx_tmp2) {
HXLINE(2839)			if ((this->notes->length > 0)) {
HXLINE(2840)				 ::Dynamic filter = null();
HXDLIN(2840)				 ::flixel::group::FlxTypedGroupIterator n =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->notes->members,filter);
HXDLIN(2840)				while(n->hasNext()){
HXLINE(2840)					 ::objects::Note n1 = n->next().StaticCast<  ::objects::Note >();
HXLINE(2841)					bool canHit;
HXDLIN(2841)					bool canHit1;
HXDLIN(2841)					bool canHit2;
HXDLIN(2841)					bool canHit3;
HXDLIN(2841)					bool canHit4;
HXDLIN(2841)					bool canHit5;
HXDLIN(2841)					if (::hx::IsNotNull( n1 )) {
HXLINE(2841)						canHit5 = !(this->strumsBlocked->__get(n1->noteData));
            					}
            					else {
HXLINE(2841)						canHit5 = false;
            					}
HXDLIN(2841)					if (canHit5) {
HXLINE(2841)						canHit4 = n1->canBeHit;
            					}
            					else {
HXLINE(2841)						canHit4 = false;
            					}
HXDLIN(2841)					if (canHit4) {
HXLINE(2841)						canHit3 = n1->mustPress;
            					}
            					else {
HXLINE(2841)						canHit3 = false;
            					}
HXDLIN(2841)					if (canHit3) {
HXLINE(2841)						canHit2 = !(n1->tooLate);
            					}
            					else {
HXLINE(2841)						canHit2 = false;
            					}
HXDLIN(2841)					if (canHit2) {
HXLINE(2841)						canHit1 = !(n1->wasGoodHit);
            					}
            					else {
HXLINE(2841)						canHit1 = false;
            					}
HXDLIN(2841)					if (canHit1) {
HXLINE(2841)						canHit = !(n1->blockHit);
            					}
            					else {
HXLINE(2841)						canHit = false;
            					}
HXLINE(2844)					if (this->guitarHeroSustains) {
HXLINE(2845)						bool canHit6;
HXDLIN(2845)						if (canHit) {
HXLINE(2845)							canHit6 = ::hx::IsNotNull( n1->parent );
            						}
            						else {
HXLINE(2845)							canHit6 = false;
            						}
HXDLIN(2845)						if (canHit6) {
HXLINE(2845)							canHit = n1->parent->wasGoodHit;
            						}
            						else {
HXLINE(2845)							canHit = false;
            						}
            					}
HXLINE(2847)					bool _hx_tmp5;
HXDLIN(2847)					if (canHit) {
HXLINE(2847)						_hx_tmp5 = n1->isSustainNote;
            					}
            					else {
HXLINE(2847)						_hx_tmp5 = false;
            					}
HXDLIN(2847)					if (_hx_tmp5) {
HXLINE(2848)						bool released = !(holdArray->__get(n1->noteData));
HXLINE(2850)						if (!(released)) {
HXLINE(2851)							this->goodNoteHit(n1);
            						}
            					}
            				}
            			}
HXLINE(2856)			bool _hx_tmp6;
HXDLIN(2856)			if (holdArray->contains(true)) {
HXLINE(2856)				_hx_tmp6 = this->endingSong;
            			}
            			else {
HXLINE(2856)				_hx_tmp6 = true;
            			}
HXDLIN(2856)			if (_hx_tmp6) {
HXLINE(2857)				this->playerDance();
            			}
            			else {
HXLINE(2860)				this->checkForAchievement(::Array_obj< ::String >::fromData( _hx_array_data_0420cd31_173,1));
            			}
            		}
HXLINE(2865)		bool _hx_tmp7;
HXDLIN(2865)		bool _hx_tmp8;
HXDLIN(2865)		if (!(this->get_controls()->controllerMode)) {
HXLINE(2865)			_hx_tmp8 = this->strumsBlocked->contains(true);
            		}
            		else {
HXLINE(2865)			_hx_tmp8 = true;
            		}
HXDLIN(2865)		if (_hx_tmp8) {
HXLINE(2865)			_hx_tmp7 = releaseArray->contains(true);
            		}
            		else {
HXLINE(2865)			_hx_tmp7 = false;
            		}
HXDLIN(2865)		if (_hx_tmp7) {
HXLINE(2866)			int _g4 = 0;
HXDLIN(2866)			int _g5 = releaseArray->length;
HXDLIN(2866)			while((_g4 < _g5)){
HXLINE(2866)				_g4 = (_g4 + 1);
HXDLIN(2866)				int i1 = (_g4 - 1);
HXLINE(2867)				bool _hx_tmp9;
HXDLIN(2867)				if (!(releaseArray->__get(i1))) {
HXLINE(2867)					_hx_tmp9 = (this->strumsBlocked->__get(i1) == true);
            				}
            				else {
HXLINE(2867)					_hx_tmp9 = true;
            				}
HXDLIN(2867)				if (_hx_tmp9) {
HXLINE(2868)					this->keyReleased(i1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,keysCheck,(void))

void PlayState_obj::noteMiss( ::objects::Note daNote){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::states::PlayState,_gthis, ::objects::Note,daNote) HXARGC(1)
            		void _hx_run( ::objects::Note note){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_2874_noteMiss)
HXLINE(2874)			bool _hx_tmp;
HXDLIN(2874)			bool _hx_tmp1;
HXDLIN(2874)			bool _hx_tmp2;
HXDLIN(2874)			bool _hx_tmp3;
HXDLIN(2874)			if (::hx::IsInstanceNotEq( daNote,note )) {
HXLINE(2874)				_hx_tmp3 = daNote->mustPress;
            			}
            			else {
HXLINE(2874)				_hx_tmp3 = false;
            			}
HXDLIN(2874)			if (_hx_tmp3) {
HXLINE(2874)				_hx_tmp2 = (daNote->noteData == note->noteData);
            			}
            			else {
HXLINE(2874)				_hx_tmp2 = false;
            			}
HXDLIN(2874)			if (_hx_tmp2) {
HXLINE(2874)				_hx_tmp1 = (daNote->isSustainNote == note->isSustainNote);
            			}
            			else {
HXLINE(2874)				_hx_tmp1 = false;
            			}
HXDLIN(2874)			if (_hx_tmp1) {
HXLINE(2874)				_hx_tmp = (::Math_obj::abs((daNote->strumTime - note->strumTime)) < 1);
            			}
            			else {
HXLINE(2874)				_hx_tmp = false;
            			}
HXDLIN(2874)			if (_hx_tmp) {
HXLINE(2875)				_gthis->invalidateNote(note);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::objects::Note,daNote) HXARGC(1)
            		void _hx_run( ::backend::BaseStage stage){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_2879_noteMiss)
HXLINE(2879)			stage->noteMiss(daNote);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2871_noteMiss)
HXDLIN(2871)		 ::states::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2873)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis,daNote)),null());
HXLINE(2878)		this->noteMissCommon(daNote->noteData,daNote);
HXLINE(2879)		this->stagesFunc( ::Dynamic(new _hx_Closure_1(daNote)));
HXLINE(2880)		int result = this->notes->members->indexOf(daNote,null());
HXDLIN(2880)		 ::Dynamic result1 = this->callOnLuas(HX_("noteMiss",0e,78,8f,57),::cpp::VirtualArray_obj::__new(4)->init(0,result)->init(1,daNote->noteData)->init(2,daNote->noteType)->init(3,daNote->isSustainNote),null(),null(),null());
HXLINE(2881)		bool _hx_tmp;
HXDLIN(2881)		bool _hx_tmp1;
HXDLIN(2881)		if (::hx::IsNotEq( result1,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(2881)			_hx_tmp1 = ::hx::IsNotEq( result1,::psychlua::LuaUtils_obj::Function_StopHScript );
            		}
            		else {
HXLINE(2881)			_hx_tmp1 = false;
            		}
HXDLIN(2881)		if (_hx_tmp1) {
HXLINE(2881)			_hx_tmp = ::hx::IsNotEq( result1,::psychlua::LuaUtils_obj::Function_StopAll );
            		}
            		else {
HXLINE(2881)			_hx_tmp = false;
            		}
HXDLIN(2881)		if (_hx_tmp) {
HXLINE(2881)			this->callOnHScript(HX_("noteMiss",0e,78,8f,57),::cpp::VirtualArray_obj::__new(1)->init(0,daNote),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,noteMiss,(void))

void PlayState_obj::noteMissPress(::hx::Null< int >  __o_direction){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,int,direction) HXARGC(1)
            		void _hx_run( ::backend::BaseStage stage){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_2890_noteMissPress)
HXLINE(2890)			stage->noteMissPress(direction);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		int direction = __o_direction.Default(1);
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2885_noteMissPress)
HXLINE(2886)		if (::backend::ClientPrefs_obj::data->ghostTapping) {
HXLINE(2886)			return;
            		}
HXLINE(2888)		this->noteMissCommon(direction,null());
HXLINE(2889)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2889)		::String key = (HX_("missnote",ee,98,f1,e3) + ::flixel::FlxG_obj::random->_hx_int(1,3,null()));
HXDLIN(2889)		 ::Dynamic modsAllowed = true;
HXDLIN(2889)		if (::hx::IsNull( modsAllowed )) {
HXLINE(2889)			modsAllowed = true;
            		}
HXDLIN(2889)		 ::openfl::media::Sound _hx_tmp1 = ::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + key),null(),modsAllowed,null());
HXDLIN(2889)		_hx_tmp->play(_hx_tmp1,::flixel::FlxG_obj::random->_hx_float(((Float)0.1),((Float)0.2),null()),null(),null(),null(),null());
HXLINE(2890)		this->stagesFunc( ::Dynamic(new _hx_Closure_0(direction)));
HXLINE(2891)		this->callOnScripts(HX_("noteMissPress",95,58,12,aa),::cpp::VirtualArray_obj::__new(1)->init(0,direction),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,noteMissPress,(void))

void PlayState_obj::noteMissCommon(int direction, ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2895_noteMissCommon)
HXLINE(2897)		Float subtract = this->pressMissDamage;
HXLINE(2898)		if (::hx::IsNotNull( note )) {
HXLINE(2898)			subtract = note->missHealth;
            		}
HXLINE(2901)		bool _hx_tmp;
HXDLIN(2901)		bool _hx_tmp1;
HXDLIN(2901)		if (::hx::IsNotNull( note )) {
HXLINE(2901)			_hx_tmp1 = this->guitarHeroSustains;
            		}
            		else {
HXLINE(2901)			_hx_tmp1 = false;
            		}
HXDLIN(2901)		if (_hx_tmp1) {
HXLINE(2901)			_hx_tmp = ::hx::IsNull( note->parent );
            		}
            		else {
HXLINE(2901)			_hx_tmp = false;
            		}
HXDLIN(2901)		if (_hx_tmp) {
HXLINE(2902)			if ((note->tail->length > 0)) {
HXLINE(2903)				note->set_alpha(((Float)0.35));
HXLINE(2904)				{
HXLINE(2904)					int _g = 0;
HXDLIN(2904)					::Array< ::Dynamic> _g1 = note->tail;
HXDLIN(2904)					while((_g < _g1->length)){
HXLINE(2904)						 ::objects::Note childNote = _g1->__get(_g).StaticCast<  ::objects::Note >();
HXDLIN(2904)						_g = (_g + 1);
HXLINE(2905)						childNote->set_alpha(note->alpha);
HXLINE(2906)						childNote->missed = true;
HXLINE(2907)						childNote->canBeHit = false;
HXLINE(2908)						childNote->ignoreNote = true;
HXLINE(2909)						childNote->tooLate = true;
            					}
            				}
HXLINE(2911)				note->missed = true;
HXLINE(2912)				note->canBeHit = false;
HXLINE(2916)				subtract = (subtract * ( (Float)((note->tail->length + 1)) ));
            			}
HXLINE(2920)			if (note->missed) {
HXLINE(2921)				return;
            			}
            		}
HXLINE(2923)		bool _hx_tmp2;
HXDLIN(2923)		bool _hx_tmp3;
HXDLIN(2923)		bool _hx_tmp4;
HXDLIN(2923)		if (::hx::IsNotNull( note )) {
HXLINE(2923)			_hx_tmp4 = this->guitarHeroSustains;
            		}
            		else {
HXLINE(2923)			_hx_tmp4 = false;
            		}
HXDLIN(2923)		if (_hx_tmp4) {
HXLINE(2923)			_hx_tmp3 = ::hx::IsNotNull( note->parent );
            		}
            		else {
HXLINE(2923)			_hx_tmp3 = false;
            		}
HXDLIN(2923)		if (_hx_tmp3) {
HXLINE(2923)			_hx_tmp2 = note->isSustainNote;
            		}
            		else {
HXLINE(2923)			_hx_tmp2 = false;
            		}
HXDLIN(2923)		if (_hx_tmp2) {
HXLINE(2924)			if (note->missed) {
HXLINE(2925)				return;
            			}
HXLINE(2927)			 ::objects::Note parentNote = note->parent;
HXLINE(2928)			bool _hx_tmp5;
HXDLIN(2928)			if (parentNote->wasGoodHit) {
HXLINE(2928)				_hx_tmp5 = (parentNote->tail->length > 0);
            			}
            			else {
HXLINE(2928)				_hx_tmp5 = false;
            			}
HXDLIN(2928)			if (_hx_tmp5) {
HXLINE(2929)				int _g2 = 0;
HXDLIN(2929)				::Array< ::Dynamic> _g3 = parentNote->tail;
HXDLIN(2929)				while((_g2 < _g3->length)){
HXLINE(2929)					 ::objects::Note child = _g3->__get(_g2).StaticCast<  ::objects::Note >();
HXDLIN(2929)					_g2 = (_g2 + 1);
HXDLIN(2929)					if (::hx::IsInstanceNotEq( child,note )) {
HXLINE(2930)						child->missed = true;
HXLINE(2931)						child->canBeHit = false;
HXLINE(2932)						child->ignoreNote = true;
HXLINE(2933)						child->tooLate = true;
            					}
            				}
            			}
            		}
HXLINE(2938)		if (this->instakillOnMiss) {
HXLINE(2940)			this->vocals->set_volume(( (Float)(0) ));
HXLINE(2941)			this->opponentVocals->set_volume(( (Float)(0) ));
HXLINE(2942)			this->doDeathCheck(true);
            		}
HXLINE(2945)		int lastCombo = this->combo;
HXLINE(2946)		this->combo = 0;
HXLINE(2948)		this->set_health((this->health - (subtract * this->healthLoss)));
HXLINE(2949)		 ::states::PlayState _hx_tmp6 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2949)		_hx_tmp6->songScore = (_hx_tmp6->songScore - 10);
HXLINE(2950)		if (!(this->endingSong)) {
HXLINE(2950)			this->songMisses++;
            		}
HXLINE(2951)		this->totalPlayed++;
HXLINE(2952)		this->RecalculateRating(true,null());
HXLINE(2955)		 ::objects::Character _hx_char = this->boyfriend;
HXLINE(2956)		bool _hx_tmp7;
HXDLIN(2956)		bool _hx_tmp8;
HXDLIN(2956)		if (::hx::IsNotNull( note )) {
HXLINE(2956)			_hx_tmp8 = note->gfNote;
            		}
            		else {
HXLINE(2956)			_hx_tmp8 = false;
            		}
HXDLIN(2956)		if (!(_hx_tmp8)) {
HXLINE(2956)			if (::hx::IsNotNull(  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection) )) {
HXLINE(2956)				_hx_tmp7 = ( (bool)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(2956)				_hx_tmp7 = false;
            			}
            		}
            		else {
HXLINE(2956)			_hx_tmp7 = true;
            		}
HXDLIN(2956)		if (_hx_tmp7) {
HXLINE(2956)			_hx_char = this->gf;
            		}
HXLINE(2958)		bool _hx_tmp9;
HXDLIN(2958)		bool _hx_tmp10;
HXDLIN(2958)		if (::hx::IsNotNull( _hx_char )) {
HXLINE(2958)			if (::hx::IsNotNull( note )) {
HXLINE(2958)				_hx_tmp10 = !(note->noMissAnimation);
            			}
            			else {
HXLINE(2958)				_hx_tmp10 = true;
            			}
            		}
            		else {
HXLINE(2958)			_hx_tmp10 = false;
            		}
HXDLIN(2958)		if (_hx_tmp10) {
HXLINE(2958)			_hx_tmp9 = _hx_char->hasMissAnimations;
            		}
            		else {
HXLINE(2958)			_hx_tmp9 = false;
            		}
HXDLIN(2958)		if (_hx_tmp9) {
HXLINE(2960)			::String postfix = HX_("",00,00,00,00);
HXLINE(2961)			if (::hx::IsNotNull( note )) {
HXLINE(2961)				postfix = note->animSuffix;
            			}
HXLINE(2963)			::String animToPlay = ((this->singAnimations->__get(::Std_obj::_hx_int(::Math_obj::abs(::Math_obj::min(( (Float)((this->singAnimations->length - 1)) ),( (Float)(direction) ))))) + HX_("miss",fc,52,5c,48)) + postfix);
HXLINE(2964)			_hx_char->playAnim(animToPlay,true,null(),null());
HXLINE(2966)			bool _hx_tmp11;
HXDLIN(2966)			bool _hx_tmp12;
HXDLIN(2966)			bool _hx_tmp13;
HXDLIN(2966)			if (::hx::IsInstanceNotEq( _hx_char,this->gf )) {
HXLINE(2966)				_hx_tmp13 = (lastCombo > 5);
            			}
            			else {
HXLINE(2966)				_hx_tmp13 = false;
            			}
HXDLIN(2966)			if (_hx_tmp13) {
HXLINE(2966)				_hx_tmp12 = ::hx::IsNotNull( this->gf );
            			}
            			else {
HXLINE(2966)				_hx_tmp12 = false;
            			}
HXDLIN(2966)			if (_hx_tmp12) {
HXLINE(2966)				_hx_tmp11 = this->gf->hasAnimation(HX_("sad",16,98,57,00));
            			}
            			else {
HXLINE(2966)				_hx_tmp11 = false;
            			}
HXDLIN(2966)			if (_hx_tmp11) {
HXLINE(2968)				this->gf->playAnim(HX_("sad",16,98,57,00),null(),null(),null());
HXLINE(2969)				this->gf->specialAnim = true;
            			}
            		}
HXLINE(2972)		this->vocals->set_volume(( (Float)(0) ));
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,noteMissCommon,(void))

void PlayState_obj::opponentNoteHit( ::objects::Note note){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::objects::Note,note) HXARGC(1)
            		void _hx_run( ::backend::BaseStage stage){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_3016_opponentNoteHit)
HXLINE(3016)			stage->opponentNoteHit(note);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2976_opponentNoteHit)
HXLINE(2977)		int result = this->notes->members->indexOf(note,null());
HXDLIN(2977)		 ::Dynamic result1 = this->callOnLuas(HX_("opponentNoteHitPre",1f,19,81,be),::cpp::VirtualArray_obj::__new(4)->init(0,result)->init(1,::Math_obj::abs(( (Float)(note->noteData) )))->init(2,note->noteType)->init(3,note->isSustainNote),null(),null(),null());
HXLINE(2978)		bool _hx_tmp;
HXDLIN(2978)		bool _hx_tmp1;
HXDLIN(2978)		if (::hx::IsNotEq( result1,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(2978)			_hx_tmp1 = ::hx::IsNotEq( result1,::psychlua::LuaUtils_obj::Function_StopHScript );
            		}
            		else {
HXLINE(2978)			_hx_tmp1 = false;
            		}
HXDLIN(2978)		if (_hx_tmp1) {
HXLINE(2978)			_hx_tmp = ::hx::IsNotEq( result1,::psychlua::LuaUtils_obj::Function_StopAll );
            		}
            		else {
HXLINE(2978)			_hx_tmp = false;
            		}
HXDLIN(2978)		if (_hx_tmp) {
HXLINE(2978)			result1 = this->callOnHScript(HX_("opponentNoteHitPre",1f,19,81,be),::cpp::VirtualArray_obj::__new(1)->init(0,note),null(),null(),null());
            		}
HXLINE(2980)		if (::hx::IsEq( result1,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(2980)			return;
            		}
HXLINE(2982)		if ((this->songName != HX_("tutorial",9e,8f,b5,82))) {
HXLINE(2983)			this->camZooming = true;
            		}
HXLINE(2985)		bool _hx_tmp2;
HXDLIN(2985)		if ((note->noteType == HX_("Hey!",e5,69,e4,2f))) {
HXLINE(2985)			_hx_tmp2 = this->dad->hasAnimation(HX_("hey",dc,42,4f,00));
            		}
            		else {
HXLINE(2985)			_hx_tmp2 = false;
            		}
HXDLIN(2985)		if (_hx_tmp2) {
HXLINE(2987)			this->dad->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
HXLINE(2988)			this->dad->specialAnim = true;
HXLINE(2989)			this->dad->heyTimer = ((Float)0.6);
            		}
            		else {
HXLINE(2991)			if (!(note->noAnimation)) {
HXLINE(2993)				 ::objects::Character _hx_char = this->dad;
HXLINE(2994)				::String animToPlay = this->singAnimations->__get(::Std_obj::_hx_int(::Math_obj::abs(::Math_obj::min(( (Float)((this->singAnimations->length - 1)) ),( (Float)(note->noteData) )))));
HXDLIN(2994)				::String animToPlay1 = (animToPlay + note->animSuffix);
HXLINE(2995)				if (note->gfNote) {
HXLINE(2995)					_hx_char = this->gf;
            				}
HXLINE(2997)				if (::hx::IsNotNull( _hx_char )) {
HXLINE(2999)					bool canPlay = true;
HXLINE(3000)					if (note->isSustainNote) {
HXLINE(3002)						::String holdAnim = (animToPlay1 + HX_("-hold",ec,e3,1a,2e));
HXLINE(3003)						if (_hx_char->animation->exists(holdAnim)) {
HXLINE(3003)							animToPlay1 = holdAnim;
            						}
HXLINE(3004)						bool _hx_tmp3;
HXDLIN(3004)						if ((_hx_char->_lastPlayedAnimation != holdAnim)) {
HXLINE(3004)							_hx_tmp3 = (_hx_char->_lastPlayedAnimation == (holdAnim + HX_("-loop",11,c1,bf,30)));
            						}
            						else {
HXLINE(3004)							_hx_tmp3 = true;
            						}
HXDLIN(3004)						if (_hx_tmp3) {
HXLINE(3004)							canPlay = false;
            						}
            					}
HXLINE(3007)					if (canPlay) {
HXLINE(3007)						_hx_char->playAnim(animToPlay1,true,null(),null());
            					}
HXLINE(3008)					_hx_char->holdTimer = ( (Float)(0) );
            				}
            			}
            		}
HXLINE(3012)		if ((this->opponentVocals->_length <= 0)) {
HXLINE(3012)			this->vocals->set_volume(( (Float)(1) ));
            		}
HXLINE(3013)		int _hx_tmp4 = ::Std_obj::_hx_int(::Math_obj::abs(( (Float)(note->noteData) )));
HXDLIN(3013)		this->strumPlayAnim(true,_hx_tmp4,(((::backend::Conductor_obj::stepCrochet * ((Float)1.25)) / ( (Float)(1000) )) / this->playbackRate));
HXLINE(3014)		note->hitByOpponent = true;
HXLINE(3016)		this->stagesFunc( ::Dynamic(new _hx_Closure_0(note)));
HXLINE(3017)		int result2 = this->notes->members->indexOf(note,null());
HXDLIN(3017)		 ::Dynamic result3 = this->callOnLuas(HX_("opponentNoteHit",64,75,4c,b1),::cpp::VirtualArray_obj::__new(4)->init(0,result2)->init(1,::Math_obj::abs(( (Float)(note->noteData) )))->init(2,note->noteType)->init(3,note->isSustainNote),null(),null(),null());
HXLINE(3018)		bool _hx_tmp5;
HXDLIN(3018)		bool _hx_tmp6;
HXDLIN(3018)		if (::hx::IsNotEq( result3,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(3018)			_hx_tmp6 = ::hx::IsNotEq( result3,::psychlua::LuaUtils_obj::Function_StopHScript );
            		}
            		else {
HXLINE(3018)			_hx_tmp6 = false;
            		}
HXDLIN(3018)		if (_hx_tmp6) {
HXLINE(3018)			_hx_tmp5 = ::hx::IsNotEq( result3,::psychlua::LuaUtils_obj::Function_StopAll );
            		}
            		else {
HXLINE(3018)			_hx_tmp5 = false;
            		}
HXDLIN(3018)		if (_hx_tmp5) {
HXLINE(3018)			this->callOnHScript(HX_("opponentNoteHit",64,75,4c,b1),::cpp::VirtualArray_obj::__new(1)->init(0,note),null(),null(),null());
            		}
HXLINE(3020)		if (!(note->isSustainNote)) {
HXLINE(3020)			this->invalidateNote(note);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,opponentNoteHit,(void))

void PlayState_obj::goodNoteHit( ::objects::Note note){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::objects::Note,note) HXARGC(1)
            		void _hx_run( ::backend::BaseStage stage){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_3119_goodNoteHit)
HXLINE(3119)			stage->goodNoteHit(note);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3024_goodNoteHit)
HXLINE(3025)		if (note->wasGoodHit) {
HXLINE(3025)			return;
            		}
HXLINE(3026)		bool _hx_tmp;
HXDLIN(3026)		if (this->cpuControlled) {
HXLINE(3026)			_hx_tmp = note->ignoreNote;
            		}
            		else {
HXLINE(3026)			_hx_tmp = false;
            		}
HXDLIN(3026)		if (_hx_tmp) {
HXLINE(3026)			return;
            		}
HXLINE(3028)		bool isSus = note->isSustainNote;
HXLINE(3029)		int leData = ::Math_obj::round(::Math_obj::abs(( (Float)(note->noteData) )));
HXLINE(3030)		::String leType = note->noteType;
HXLINE(3032)		 ::Dynamic result = this->callOnLuas(HX_("goodNoteHitPre",bf,bc,f4,56),::cpp::VirtualArray_obj::__new(4)->init(0,this->notes->members->indexOf(note,null()))->init(1,leData)->init(2,leType)->init(3,isSus),null(),null(),null());
HXLINE(3033)		bool _hx_tmp1;
HXDLIN(3033)		bool _hx_tmp2;
HXDLIN(3033)		if (::hx::IsNotEq( result,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(3033)			_hx_tmp2 = ::hx::IsNotEq( result,::psychlua::LuaUtils_obj::Function_StopHScript );
            		}
            		else {
HXLINE(3033)			_hx_tmp2 = false;
            		}
HXDLIN(3033)		if (_hx_tmp2) {
HXLINE(3033)			_hx_tmp1 = ::hx::IsNotEq( result,::psychlua::LuaUtils_obj::Function_StopAll );
            		}
            		else {
HXLINE(3033)			_hx_tmp1 = false;
            		}
HXDLIN(3033)		if (_hx_tmp1) {
HXLINE(3033)			result = this->callOnHScript(HX_("goodNoteHitPre",bf,bc,f4,56),::cpp::VirtualArray_obj::__new(1)->init(0,note),null(),null(),null());
            		}
HXLINE(3035)		if (::hx::IsEq( result,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(3035)			return;
            		}
HXLINE(3037)		note->wasGoodHit = true;
HXLINE(3039)		bool _hx_tmp3;
HXDLIN(3039)		if ((note->get_hitsoundVolume() > 0)) {
HXLINE(3039)			_hx_tmp3 = !(note->hitsoundDisabled);
            		}
            		else {
HXLINE(3039)			_hx_tmp3 = false;
            		}
HXDLIN(3039)		if (_hx_tmp3) {
HXLINE(3040)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp4 = ::flixel::FlxG_obj::sound;
HXDLIN(3040)			 ::openfl::media::Sound _hx_tmp5 = ::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + note->hitsound),null(),true,null());
HXDLIN(3040)			_hx_tmp4->play(_hx_tmp5,note->get_hitsoundVolume(),null(),null(),null(),null());
            		}
HXLINE(3042)		if (!(note->hitCausesMiss)) {
HXLINE(3044)			if (!(note->noAnimation)) {
HXLINE(3046)				::String animToPlay = this->singAnimations->__get(::Std_obj::_hx_int(::Math_obj::abs(::Math_obj::min(( (Float)((this->singAnimations->length - 1)) ),( (Float)(note->noteData) )))));
HXDLIN(3046)				::String animToPlay1 = (animToPlay + note->animSuffix);
HXLINE(3048)				 ::objects::Character _hx_char = this->boyfriend;
HXLINE(3049)				::String animCheck = HX_("hey",dc,42,4f,00);
HXLINE(3050)				if (note->gfNote) {
HXLINE(3052)					_hx_char = this->gf;
HXLINE(3053)					animCheck = HX_("cheer",8d,9a,b6,45);
            				}
HXLINE(3056)				if (::hx::IsNotNull( _hx_char )) {
HXLINE(3058)					bool canPlay = true;
HXLINE(3059)					if (note->isSustainNote) {
HXLINE(3061)						::String holdAnim = (animToPlay1 + HX_("-hold",ec,e3,1a,2e));
HXLINE(3062)						if (_hx_char->animation->exists(holdAnim)) {
HXLINE(3062)							animToPlay1 = holdAnim;
            						}
HXLINE(3063)						bool _hx_tmp6;
HXDLIN(3063)						if ((_hx_char->_lastPlayedAnimation != holdAnim)) {
HXLINE(3063)							_hx_tmp6 = (_hx_char->_lastPlayedAnimation == (holdAnim + HX_("-loop",11,c1,bf,30)));
            						}
            						else {
HXLINE(3063)							_hx_tmp6 = true;
            						}
HXDLIN(3063)						if (_hx_tmp6) {
HXLINE(3063)							canPlay = false;
            						}
            					}
HXLINE(3066)					if (canPlay) {
HXLINE(3066)						_hx_char->playAnim(animToPlay1,true,null(),null());
            					}
HXLINE(3067)					_hx_char->holdTimer = ( (Float)(0) );
HXLINE(3069)					if ((note->noteType == HX_("Hey!",e5,69,e4,2f))) {
HXLINE(3071)						if (_hx_char->hasAnimation(animCheck)) {
HXLINE(3073)							_hx_char->playAnim(animCheck,true,null(),null());
HXLINE(3074)							_hx_char->specialAnim = true;
HXLINE(3075)							_hx_char->heyTimer = ((Float)0.6);
            						}
            					}
            				}
            			}
HXLINE(3081)			if (!(this->cpuControlled)) {
HXLINE(3083)				 ::objects::StrumNote spr = Dynamic( this->playerStrums->members->__get(note->noteData)).StaticCast<  ::objects::StrumNote >();
HXLINE(3084)				if (::hx::IsNotNull( spr )) {
HXLINE(3084)					spr->playAnim(HX_("confirm",00,9d,39,10),true);
            				}
            			}
            			else {
HXLINE(3086)				int _hx_tmp7 = ::Std_obj::_hx_int(::Math_obj::abs(( (Float)(note->noteData) )));
HXDLIN(3086)				this->strumPlayAnim(false,_hx_tmp7,(((::backend::Conductor_obj::stepCrochet * ((Float)1.25)) / ( (Float)(1000) )) / this->playbackRate));
            			}
HXLINE(3087)			this->vocals->set_volume(( (Float)(1) ));
HXLINE(3089)			if (!(note->isSustainNote)) {
HXLINE(3091)				this->combo++;
HXLINE(3092)				if ((this->combo > 9999)) {
HXLINE(3092)					this->combo = 9999;
            				}
HXLINE(3093)				this->popUpScore(note);
            			}
HXLINE(3095)			bool gainHealth = true;
HXLINE(3096)			bool _hx_tmp8;
HXDLIN(3096)			if (this->guitarHeroSustains) {
HXLINE(3096)				_hx_tmp8 = note->isSustainNote;
            			}
            			else {
HXLINE(3096)				_hx_tmp8 = false;
            			}
HXDLIN(3096)			if (_hx_tmp8) {
HXLINE(3096)				gainHealth = false;
            			}
HXLINE(3097)			if (gainHealth) {
HXLINE(3097)				this->set_health((this->health + (note->hitHealth * this->healthGain)));
            			}
            		}
            		else {
HXLINE(3102)			if (!(note->noMissAnimation)) {
HXLINE(3104)				if ((note->noteType == HX_("Hurt Note",a3,41,9e,fe))) {
HXLINE(3107)					if (this->boyfriend->hasAnimation(HX_("hurt",0f,5c,17,45))) {
HXLINE(3109)						this->boyfriend->playAnim(HX_("hurt",0f,5c,17,45),true,null(),null());
HXLINE(3110)						this->boyfriend->specialAnim = true;
            					}
            				}
            			}
HXLINE(3115)			this->noteMiss(note);
HXLINE(3116)			bool _hx_tmp9;
HXDLIN(3116)			if (!(( (bool)(note->noteSplashData->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) ))) {
HXLINE(3116)				_hx_tmp9 = !(note->isSustainNote);
            			}
            			else {
HXLINE(3116)				_hx_tmp9 = false;
            			}
HXDLIN(3116)			if (_hx_tmp9) {
HXLINE(3116)				this->spawnNoteSplashOnNote(note);
            			}
            		}
HXLINE(3119)		this->stagesFunc( ::Dynamic(new _hx_Closure_0(note)));
HXLINE(3120)		 ::Dynamic result1 = this->callOnLuas(HX_("goodNoteHit",c4,4d,c4,22),::cpp::VirtualArray_obj::__new(4)->init(0,this->notes->members->indexOf(note,null()))->init(1,leData)->init(2,leType)->init(3,isSus),null(),null(),null());
HXLINE(3121)		bool _hx_tmp10;
HXDLIN(3121)		bool _hx_tmp11;
HXDLIN(3121)		if (::hx::IsNotEq( result1,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(3121)			_hx_tmp11 = ::hx::IsNotEq( result1,::psychlua::LuaUtils_obj::Function_StopHScript );
            		}
            		else {
HXLINE(3121)			_hx_tmp11 = false;
            		}
HXDLIN(3121)		if (_hx_tmp11) {
HXLINE(3121)			_hx_tmp10 = ::hx::IsNotEq( result1,::psychlua::LuaUtils_obj::Function_StopAll );
            		}
            		else {
HXLINE(3121)			_hx_tmp10 = false;
            		}
HXDLIN(3121)		if (_hx_tmp10) {
HXLINE(3121)			this->callOnHScript(HX_("goodNoteHit",c4,4d,c4,22),::cpp::VirtualArray_obj::__new(1)->init(0,note),null(),null(),null());
            		}
HXLINE(3122)		if (!(note->isSustainNote)) {
HXLINE(3122)			this->invalidateNote(note);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,goodNoteHit,(void))

void PlayState_obj::invalidateNote( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3125_invalidateNote)
HXLINE(3126)		note->kill();
HXLINE(3127)		this->notes->remove(note,true).StaticCast<  ::objects::Note >();
HXLINE(3128)		note->destroy();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,invalidateNote,(void))

void PlayState_obj::spawnNoteSplashOnNote( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3132_spawnNoteSplashOnNote)
HXDLIN(3132)		if (::hx::IsNotNull( note )) {
HXLINE(3133)			 ::objects::StrumNote strum = Dynamic( this->playerStrums->members->__get(note->noteData)).StaticCast<  ::objects::StrumNote >();
HXLINE(3134)			if (::hx::IsNotNull( strum )) {
HXLINE(3135)				this->spawnNoteSplash(strum->x,strum->y,note->noteData,note,strum);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,spawnNoteSplashOnNote,(void))

void PlayState_obj::spawnNoteSplash(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y, ::Dynamic __o_data, ::objects::Note note, ::objects::StrumNote strum){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            		 ::Dynamic data = __o_data;
            		if (::hx::IsNull(__o_data)) data = 0;
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3139_spawnNoteSplash)
HXLINE(3140)		 ::objects::NoteSplash splash = this->grpNoteSplashes->recycle(::hx::ClassOf< ::objects::NoteSplash >(),null(),null(),null()).StaticCast<  ::objects::NoteSplash >();
HXLINE(3141)		splash->babyArrow = strum;
HXLINE(3142)		splash->spawnSplashNote(x,y,data,note,null());
HXLINE(3143)		this->grpNoteSplashes->add(splash).StaticCast<  ::objects::NoteSplash >();
            	}


HX_DEFINE_DYNAMIC_FUNC5(PlayState_obj,spawnNoteSplash,(void))

void PlayState_obj::destroy(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::backend::BaseStage stage){
            			HX_STACKFRAME(&_hx_pos_801e532e222627de_3173_destroy)
HXLINE(3173)			stage->destroy();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3146_destroy)
HXLINE(3147)		if (::hx::IsNotNull( ::psychlua::CustomSubstate_obj::instance )) {
HXLINE(3149)			this->closeSubState();
HXLINE(3150)			this->resetSubState();
            		}
HXLINE(3154)		{
HXLINE(3154)			int _g = 0;
HXDLIN(3154)			::Array< ::Dynamic> _g1 = this->luaArray;
HXDLIN(3154)			while((_g < _g1->length)){
HXLINE(3154)				 ::psychlua::FunkinLua lua = _g1->__get(_g).StaticCast<  ::psychlua::FunkinLua >();
HXDLIN(3154)				_g = (_g + 1);
HXLINE(3156)				lua->call(HX_("onDestroy",9b,e5,30,fc),::cpp::VirtualArray_obj::__new(0));
HXLINE(3157)				lua->stop();
            			}
            		}
HXLINE(3159)		this->luaArray = null();
HXLINE(3160)		::psychlua::FunkinLua_obj::customFunctions->clear();
HXLINE(3164)		{
HXLINE(3164)			int _g2 = 0;
HXDLIN(3164)			::Array< ::Dynamic> _g3 = this->hscriptArray;
HXDLIN(3164)			while((_g2 < _g3->length)){
HXLINE(3164)				 ::psychlua::HScript script = _g3->__get(_g2).StaticCast<  ::psychlua::HScript >();
HXDLIN(3164)				_g2 = (_g2 + 1);
HXLINE(3165)				if (::hx::IsNotNull( script )) {
HXLINE(3167)					if (script->exists(HX_("onDestroy",9b,e5,30,fc))) {
HXLINE(3167)						script->call(HX_("onDestroy",9b,e5,30,fc),null());
            					}
HXLINE(3168)					script->destroy();
            				}
            			}
            		}
HXLINE(3171)		this->hscriptArray = null();
HXLINE(3173)		this->stagesFunc( ::Dynamic(new _hx_Closure_0()));
HXLINE(3183)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyPress_dyn(),null());
HXLINE(3184)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->onKeyRelease_dyn(),null());
HXLINE(3186)		::flixel::FlxG_obj::camera->setFilters(::Array_obj< ::Dynamic>::__new(0));
HXLINE(3188)		::flixel::FlxG_obj::sound->music->set_pitch(( (Float)(1) ));
HXLINE(3189)		::flixel::FlxG_obj::animationTimeScale = ( (Float)(1) );
HXLINE(3191)		::objects::Note_obj::globalRgbShaders = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3192)		::backend::NoteTypesConfig_obj::clearNoteTypesData();
HXLINE(3194)		::objects::NoteSplash_obj::configs->clear();
HXLINE(3195)		::states::PlayState_obj::instance = null();
HXLINE(3196)		this->super::destroy();
            	}


void PlayState_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3201_stepHit)
HXLINE(3202)		this->super::stepHit();
HXLINE(3204)		if ((this->curStep == this->lastStepHit)) {
HXLINE(3205)			return;
            		}
HXLINE(3208)		this->lastStepHit = this->curStep;
HXLINE(3209)		this->setOnScripts(HX_("curStep",ec,58,71,b7),this->curStep,null());
HXLINE(3210)		this->callOnScripts(HX_("onStepHit",08,67,ec,58),null(),null(),null(),null());
            	}


void PlayState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3216_beatHit)
HXLINE(3217)		if ((this->lastBeatHit >= this->curBeat)) {
HXLINE(3219)			return;
            		}
HXLINE(3222)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,int,a1, ::Dynamic,_g) HXARGC(2)
            			int _hx_run( ::objects::Note a2, ::objects::Note a3){
            				HX_STACKFRAME(&_hx_pos_801e532e222627de_3223_beatHit)
HXLINE(3223)				return ( (int)(_g(a1,a2,a3)) );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(3223)			int order;
HXDLIN(3223)			if (::backend::ClientPrefs_obj::data->downScroll) {
HXLINE(3223)				order = -1;
            			}
            			else {
HXLINE(3223)				order = 1;
            			}
HXDLIN(3223)			 ::Dynamic _g = ::flixel::util::FlxSort_obj::byY_dyn();
HXDLIN(3223)			int a1 = order;
HXDLIN(3223)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(a1,_g));
HXDLIN(3223)			this->notes->members->sort(_hx_tmp);
            		}
HXLINE(3225)		{
HXLINE(3225)			 ::flixel::math::FlxBasePoint this1 = this->iconP1->scale;
HXDLIN(3225)			this1->set_x(((Float)1.2));
HXDLIN(3225)			this1->set_y(((Float)1.2));
            		}
HXLINE(3226)		{
HXLINE(3226)			 ::flixel::math::FlxBasePoint this2 = this->iconP2->scale;
HXDLIN(3226)			this2->set_x(((Float)1.2));
HXDLIN(3226)			this2->set_y(((Float)1.2));
            		}
HXLINE(3228)		this->iconP1->updateHitbox();
HXLINE(3229)		this->iconP2->updateHitbox();
HXLINE(3231)		this->characterBopper(this->curBeat);
HXLINE(3233)		this->super::beatHit();
HXLINE(3234)		this->lastBeatHit = this->curBeat;
HXLINE(3236)		this->setOnScripts(HX_("curBeat",16,53,29,ac),this->curBeat,null());
HXLINE(3237)		this->callOnScripts(HX_("onBeatHit",1e,a3,af,4b),null(),null(),null(),null());
            	}


void PlayState_obj::characterBopper(int beat){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3241_characterBopper)
HXLINE(3242)		bool _hx_tmp;
HXDLIN(3242)		bool _hx_tmp1;
HXDLIN(3242)		bool _hx_tmp2;
HXDLIN(3242)		if (::hx::IsNotNull( this->gf )) {
HXLINE(3242)			_hx_tmp2 = (::hx::Mod(beat,::Math_obj::round(( (Float)((this->gfSpeed * this->gf->danceEveryNumBeats)) ))) == 0);
            		}
            		else {
HXLINE(3242)			_hx_tmp2 = false;
            		}
HXDLIN(3242)		if (_hx_tmp2) {
HXLINE(3242)			_hx_tmp1 = !(::StringTools_obj::startsWith(this->gf->_lastPlayedAnimation,HX_("sing",4f,96,53,4c)));
            		}
            		else {
HXLINE(3242)			_hx_tmp1 = false;
            		}
HXDLIN(3242)		if (_hx_tmp1) {
HXLINE(3242)			_hx_tmp = !(this->gf->stunned);
            		}
            		else {
HXLINE(3242)			_hx_tmp = false;
            		}
HXDLIN(3242)		if (_hx_tmp) {
HXLINE(3243)			this->gf->dance();
            		}
HXLINE(3244)		bool _hx_tmp3;
HXDLIN(3244)		bool _hx_tmp4;
HXDLIN(3244)		bool _hx_tmp5;
HXDLIN(3244)		if (::hx::IsNotNull( this->boyfriend )) {
HXLINE(3244)			_hx_tmp5 = (::hx::Mod(beat,this->boyfriend->danceEveryNumBeats) == 0);
            		}
            		else {
HXLINE(3244)			_hx_tmp5 = false;
            		}
HXDLIN(3244)		if (_hx_tmp5) {
HXLINE(3244)			_hx_tmp4 = !(::StringTools_obj::startsWith(this->boyfriend->_lastPlayedAnimation,HX_("sing",4f,96,53,4c)));
            		}
            		else {
HXLINE(3244)			_hx_tmp4 = false;
            		}
HXDLIN(3244)		if (_hx_tmp4) {
HXLINE(3244)			_hx_tmp3 = !(this->boyfriend->stunned);
            		}
            		else {
HXLINE(3244)			_hx_tmp3 = false;
            		}
HXDLIN(3244)		if (_hx_tmp3) {
HXLINE(3245)			this->boyfriend->dance();
            		}
HXLINE(3246)		bool _hx_tmp6;
HXDLIN(3246)		bool _hx_tmp7;
HXDLIN(3246)		bool _hx_tmp8;
HXDLIN(3246)		if (::hx::IsNotNull( this->dad )) {
HXLINE(3246)			_hx_tmp8 = (::hx::Mod(beat,this->dad->danceEveryNumBeats) == 0);
            		}
            		else {
HXLINE(3246)			_hx_tmp8 = false;
            		}
HXDLIN(3246)		if (_hx_tmp8) {
HXLINE(3246)			_hx_tmp7 = !(::StringTools_obj::startsWith(this->dad->_lastPlayedAnimation,HX_("sing",4f,96,53,4c)));
            		}
            		else {
HXLINE(3246)			_hx_tmp7 = false;
            		}
HXDLIN(3246)		if (_hx_tmp7) {
HXLINE(3246)			_hx_tmp6 = !(this->dad->stunned);
            		}
            		else {
HXLINE(3246)			_hx_tmp6 = false;
            		}
HXDLIN(3246)		if (_hx_tmp6) {
HXLINE(3247)			this->dad->dance();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,characterBopper,(void))

void PlayState_obj::playerDance(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3251_playerDance)
HXLINE(3252)		::String anim = this->boyfriend->_lastPlayedAnimation;
HXLINE(3253)		bool _hx_tmp;
HXDLIN(3253)		bool _hx_tmp1;
HXDLIN(3253)		if ((this->boyfriend->holdTimer > ((::backend::Conductor_obj::stepCrochet * (((Float)0.0011) / ::flixel::FlxG_obj::sound->music->_pitch)) * this->boyfriend->singDuration))) {
HXLINE(3253)			_hx_tmp1 = ::StringTools_obj::startsWith(anim,HX_("sing",4f,96,53,4c));
            		}
            		else {
HXLINE(3253)			_hx_tmp1 = false;
            		}
HXDLIN(3253)		if (_hx_tmp1) {
HXLINE(3253)			_hx_tmp = !(::StringTools_obj::endsWith(anim,HX_("miss",fc,52,5c,48)));
            		}
            		else {
HXLINE(3253)			_hx_tmp = false;
            		}
HXDLIN(3253)		if (_hx_tmp) {
HXLINE(3254)			this->boyfriend->dance();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,playerDance,(void))

void PlayState_obj::sectionHit(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3258_sectionHit)
HXLINE(3259)		if (::hx::IsNotNull(  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection) )) {
HXLINE(3261)			bool _hx_tmp;
HXDLIN(3261)			bool _hx_tmp1;
HXDLIN(3261)			if (this->generatedMusic) {
HXLINE(3261)				_hx_tmp1 = !(this->endingSong);
            			}
            			else {
HXLINE(3261)				_hx_tmp1 = false;
            			}
HXDLIN(3261)			if (_hx_tmp1) {
HXLINE(3261)				_hx_tmp = !(this->isCameraOnForcedPos);
            			}
            			else {
HXLINE(3261)				_hx_tmp = false;
            			}
HXDLIN(3261)			if (_hx_tmp) {
HXLINE(3262)				this->moveCameraSection(null());
            			}
HXLINE(3264)			bool _hx_tmp2;
HXDLIN(3264)			bool _hx_tmp3;
HXDLIN(3264)			if (this->camZooming) {
HXLINE(3264)				_hx_tmp3 = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            			}
            			else {
HXLINE(3264)				_hx_tmp3 = false;
            			}
HXDLIN(3264)			if (_hx_tmp3) {
HXLINE(3264)				_hx_tmp2 = ::backend::ClientPrefs_obj::data->camZooms;
            			}
            			else {
HXLINE(3264)				_hx_tmp2 = false;
            			}
HXDLIN(3264)			if (_hx_tmp2) {
HXLINE(3266)				 ::flixel::FlxCamera fh = ::flixel::FlxG_obj::camera;
HXDLIN(3266)				fh->set_zoom((fh->zoom + (((Float)0.015) * this->camZoomingMult)));
HXLINE(3267)				 ::flixel::FlxCamera fh1 = this->camHUD;
HXDLIN(3267)				fh1->set_zoom((fh1->zoom + (((Float)0.03) * this->camZoomingMult)));
            			}
HXLINE(3270)			if (( (bool)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE(3272)				::backend::Conductor_obj::set_bpm(( (Float)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE(3273)				this->setOnScripts(HX_("curBpm",3f,61,c3,3e),::backend::Conductor_obj::bpm,null());
HXLINE(3274)				this->setOnScripts(HX_("crochet",34,d5,b5,d4),::backend::Conductor_obj::crochet,null());
HXLINE(3275)				this->setOnScripts(HX_("stepCrochet",48,d7,ff,e6),::backend::Conductor_obj::stepCrochet,null());
            			}
HXLINE(3277)			this->setOnScripts(HX_("mustHitSection",3b,5f,87,62), ::Dynamic( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)),null());
HXLINE(3278)			this->setOnScripts(HX_("altAnim",da,f3,f2,e5), ::Dynamic( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)),null());
HXLINE(3279)			this->setOnScripts(HX_("gfSection",86,e5,63,d4), ::Dynamic( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)),null());
            		}
HXLINE(3281)		this->super::sectionHit();
HXLINE(3283)		this->setOnScripts(HX_("curSection",45,58,c1,68),this->curSection,null());
HXLINE(3284)		this->callOnScripts(HX_("onSectionHit",6d,97,11,97),null(),null(),null(),null());
            	}


bool PlayState_obj::startLuasNamed(::String luaFile){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_3289_startLuasNamed)
HXLINE(3291)		::String luaToLoad = ::backend::Paths_obj::modFolders(luaFile);
HXLINE(3292)		if (!(::sys::FileSystem_obj::exists(luaToLoad))) {
HXLINE(3293)			::String file = luaFile;
HXDLIN(3293)			if (::hx::IsNull( file )) {
HXLINE(3293)				file = HX_("",00,00,00,00);
            			}
HXDLIN(3293)			luaToLoad = (HX_("assets/shared/",1e,69,1e,47) + file);
            		}
HXLINE(3295)		if (::sys::FileSystem_obj::exists(luaToLoad)) {
HXLINE(3301)			{
HXLINE(3301)				int _g = 0;
HXDLIN(3301)				::Array< ::Dynamic> _g1 = this->luaArray;
HXDLIN(3301)				while((_g < _g1->length)){
HXLINE(3301)					 ::psychlua::FunkinLua script = _g1->__get(_g).StaticCast<  ::psychlua::FunkinLua >();
HXDLIN(3301)					_g = (_g + 1);
HXLINE(3302)					if ((script->scriptName == luaToLoad)) {
HXLINE(3302)						return false;
            					}
            				}
            			}
HXLINE(3304)			 ::psychlua::FunkinLua_obj::__alloc( HX_CTX ,luaToLoad);
HXLINE(3305)			return true;
            		}
HXLINE(3307)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,startLuasNamed,return )

bool PlayState_obj::startHScriptsNamed(::String scriptFile){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3313_startHScriptsNamed)
HXLINE(3315)		::String scriptToLoad = ::backend::Paths_obj::modFolders(scriptFile);
HXLINE(3316)		if (!(::sys::FileSystem_obj::exists(scriptToLoad))) {
HXLINE(3317)			::String file = scriptFile;
HXDLIN(3317)			if (::hx::IsNull( file )) {
HXLINE(3317)				file = HX_("",00,00,00,00);
            			}
HXDLIN(3317)			scriptToLoad = (HX_("assets/shared/",1e,69,1e,47) + file);
            		}
HXLINE(3322)		if (::sys::FileSystem_obj::exists(scriptToLoad)) {
HXLINE(3324)			if (::crowplexus::iris::Iris_obj::instances->exists(scriptToLoad)) {
HXLINE(3324)				return false;
            			}
HXLINE(3326)			this->initHScript(scriptToLoad);
HXLINE(3327)			return true;
            		}
HXLINE(3329)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,startHScriptsNamed,return )

void PlayState_obj::initHScript(::String file){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_3333_initHScript)
HXLINE(3334)		 ::psychlua::HScript newScript = null();
HXLINE(3335)		try {
            			HX_STACK_CATCHABLE( ::crowplexus::hscript::Error, 0);
            			HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE(3337)			newScript =  ::psychlua::HScript_obj::__alloc( HX_CTX ,null(),file,null(),null());
HXLINE(3338)			if (newScript->exists(HX_("onCreate",7b,5d,bc,5b))) {
HXLINE(3338)				newScript->call(HX_("onCreate",7b,5d,bc,5b),null());
            			}
HXLINE(3339)			::haxe::Log_obj::trace((HX_("initialized hscript interp successfully: ",20,1d,3c,c4) + file),::hx::SourceInfo(HX_("source/states/PlayState.hx",3a,21,29,28),3339,HX_("states.PlayState",31,cd,20,04),HX_("initHScript",63,6f,17,19)));
HXLINE(3340)			this->hscriptArray->push(newScript);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::crowplexus::hscript::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::crowplexus::hscript::Error e1 = _hx_e;
HXLINE(3344)				 ::Dynamic pos1 =  ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("showLine",91,db,39,af),false)
            					->setFixed(1,HX_("fileName",e7,5a,43,62),file));
HXLINE(3345)				 ::Dynamic _hx_tmp = ::crowplexus::iris::Iris_obj::error;
HXDLIN(3345)				_hx_tmp(::crowplexus::hscript::Printer_obj::errorToString(e1,false),pos1);
HXLINE(3346)				 ::psychlua::HScript newScript11 = ::hx::TCast<  ::psychlua::HScript >::cast(( ( ::crowplexus::iris::Iris)(::crowplexus::iris::Iris_obj::instances->get(file)) ));
HXLINE(3347)				if (::hx::IsNotNull( newScript11 )) {
HXLINE(3348)					newScript11->destroy();
            				}
            			}
            			else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::haxe::ValueException _g = _hx_e;
HXLINE(3342)				{
HXLINE(3342)					null();
            				}
HXLINE(3335)				if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::crowplexus::hscript::Error >())) {
HXLINE(3342)					 ::crowplexus::hscript::Error e1 = ( ( ::crowplexus::hscript::Error)(_g->value) );
HXLINE(3343)					{
HXLINE(3344)						 ::Dynamic pos1 =  ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("showLine",91,db,39,af),false)
            							->setFixed(1,HX_("fileName",e7,5a,43,62),file));
HXLINE(3345)						 ::Dynamic _hx_tmp1 = ::crowplexus::iris::Iris_obj::error;
HXDLIN(3345)						_hx_tmp1(::crowplexus::hscript::Printer_obj::errorToString(e1,false),pos1);
HXLINE(3346)						 ::psychlua::HScript newScript11 = ::hx::TCast<  ::psychlua::HScript >::cast(( ( ::crowplexus::iris::Iris)(::crowplexus::iris::Iris_obj::instances->get(file)) ));
HXLINE(3347)						if (::hx::IsNotNull( newScript11 )) {
HXLINE(3348)							newScript11->destroy();
            						}
            					}
            				}
            				else {
HXLINE(3335)					HX_STACK_DO_THROW(_g);
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,initHScript,(void))

 ::Dynamic PlayState_obj::callOnScripts(::String funcToCall,::cpp::VirtualArray args,::hx::Null< bool >  __o_ignoreStops,::Array< ::String > exclusions,::cpp::VirtualArray excludeValues){
            		bool ignoreStops = __o_ignoreStops.Default(false);
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3353_callOnScripts)
HXLINE(3354)		 ::Dynamic returnVal = ::psychlua::LuaUtils_obj::Function_Continue;
HXLINE(3355)		if (::hx::IsNull( args )) {
HXLINE(3355)			args = ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE(3356)		if (::hx::IsNull( exclusions )) {
HXLINE(3356)			exclusions = ::Array_obj< ::String >::__new(0);
            		}
HXLINE(3357)		if (::hx::IsNull( excludeValues )) {
HXLINE(3357)			excludeValues = ::cpp::VirtualArray_obj::__new(1)->init(0,::psychlua::LuaUtils_obj::Function_Continue);
            		}
HXLINE(3359)		 ::Dynamic result = this->callOnLuas(funcToCall,args,ignoreStops,exclusions,excludeValues);
HXLINE(3360)		bool _hx_tmp;
HXDLIN(3360)		if (::hx::IsNotNull( result )) {
HXLINE(3360)			_hx_tmp = excludeValues->contains(result);
            		}
            		else {
HXLINE(3360)			_hx_tmp = true;
            		}
HXDLIN(3360)		if (_hx_tmp) {
HXLINE(3360)			result = this->callOnHScript(funcToCall,args,ignoreStops,exclusions,excludeValues);
            		}
HXLINE(3361)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC5(PlayState_obj,callOnScripts,return )

 ::Dynamic PlayState_obj::callOnLuas(::String funcToCall,::cpp::VirtualArray args,::hx::Null< bool >  __o_ignoreStops,::Array< ::String > exclusions,::cpp::VirtualArray excludeValues){
            		bool ignoreStops = __o_ignoreStops.Default(false);
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3364_callOnLuas)
HXLINE(3365)		 ::Dynamic returnVal = ::psychlua::LuaUtils_obj::Function_Continue;
HXLINE(3367)		if (::hx::IsNull( args )) {
HXLINE(3367)			args = ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE(3368)		if (::hx::IsNull( exclusions )) {
HXLINE(3368)			exclusions = ::Array_obj< ::String >::__new(0);
            		}
HXLINE(3369)		if (::hx::IsNull( excludeValues )) {
HXLINE(3369)			excludeValues = ::cpp::VirtualArray_obj::__new(1)->init(0,::psychlua::LuaUtils_obj::Function_Continue);
            		}
HXLINE(3371)		::Array< ::Dynamic> arr = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3372)		{
HXLINE(3372)			int _g = 0;
HXDLIN(3372)			::Array< ::Dynamic> _g1 = this->luaArray;
HXDLIN(3372)			while((_g < _g1->length)){
HXLINE(3372)				 ::psychlua::FunkinLua script = _g1->__get(_g).StaticCast<  ::psychlua::FunkinLua >();
HXDLIN(3372)				_g = (_g + 1);
HXLINE(3374)				if (script->closed) {
HXLINE(3376)					arr->push(script);
HXLINE(3377)					continue;
            				}
HXLINE(3380)				if (exclusions->contains(script->scriptName)) {
HXLINE(3381)					continue;
            				}
HXLINE(3383)				 ::Dynamic myValue = script->call(funcToCall,args);
HXLINE(3384)				bool _hx_tmp;
HXDLIN(3384)				bool _hx_tmp1;
HXDLIN(3384)				bool _hx_tmp2;
HXDLIN(3384)				if (::hx::IsNotEq( myValue,::psychlua::LuaUtils_obj::Function_StopLua )) {
HXLINE(3384)					_hx_tmp2 = ::hx::IsEq( myValue,::psychlua::LuaUtils_obj::Function_StopAll );
            				}
            				else {
HXLINE(3384)					_hx_tmp2 = true;
            				}
HXDLIN(3384)				if (_hx_tmp2) {
HXLINE(3384)					_hx_tmp1 = !(excludeValues->contains(myValue));
            				}
            				else {
HXLINE(3384)					_hx_tmp1 = false;
            				}
HXDLIN(3384)				if (_hx_tmp1) {
HXLINE(3384)					_hx_tmp = !(ignoreStops);
            				}
            				else {
HXLINE(3384)					_hx_tmp = false;
            				}
HXDLIN(3384)				if (_hx_tmp) {
HXLINE(3386)					returnVal = myValue;
HXLINE(3387)					goto _hx_goto_204;
            				}
HXLINE(3390)				bool _hx_tmp3;
HXDLIN(3390)				if (::hx::IsNotNull( myValue )) {
HXLINE(3390)					_hx_tmp3 = !(excludeValues->contains(myValue));
            				}
            				else {
HXLINE(3390)					_hx_tmp3 = false;
            				}
HXDLIN(3390)				if (_hx_tmp3) {
HXLINE(3391)					returnVal = myValue;
            				}
HXLINE(3393)				if (script->closed) {
HXLINE(3393)					arr->push(script);
            				}
            			}
            			_hx_goto_204:;
            		}
HXLINE(3396)		if ((arr->length > 0)) {
HXLINE(3397)			int _g2 = 0;
HXDLIN(3397)			while((_g2 < arr->length)){
HXLINE(3397)				 ::psychlua::FunkinLua script1 = arr->__get(_g2).StaticCast<  ::psychlua::FunkinLua >();
HXDLIN(3397)				_g2 = (_g2 + 1);
HXLINE(3398)				this->luaArray->remove(script1);
            			}
            		}
HXLINE(3400)		return returnVal;
            	}


HX_DEFINE_DYNAMIC_FUNC5(PlayState_obj,callOnLuas,return )

 ::Dynamic PlayState_obj::callOnHScript(::String funcToCall,::cpp::VirtualArray args, ::Dynamic __o_ignoreStops,::Array< ::String > exclusions,::cpp::VirtualArray excludeValues){
            		 ::Dynamic ignoreStops = __o_ignoreStops;
            		if (::hx::IsNull(__o_ignoreStops)) ignoreStops = false;
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3403_callOnHScript)
HXLINE(3404)		 ::Dynamic returnVal = ::psychlua::LuaUtils_obj::Function_Continue;
HXLINE(3407)		if (::hx::IsNull( exclusions )) {
HXLINE(3407)			exclusions = ::Array_obj< ::String >::__new();
            		}
HXLINE(3408)		if (::hx::IsNull( excludeValues )) {
HXLINE(3408)			excludeValues = ::cpp::VirtualArray_obj::__new();
            		}
HXLINE(3409)		excludeValues->push(::psychlua::LuaUtils_obj::Function_Continue);
HXLINE(3411)		int len = this->hscriptArray->length;
HXLINE(3412)		if ((len < 1)) {
HXLINE(3413)			return returnVal;
            		}
HXLINE(3415)		{
HXLINE(3415)			int _g = 0;
HXDLIN(3415)			::Array< ::Dynamic> _g1 = this->hscriptArray;
HXDLIN(3415)			while((_g < _g1->length)){
HXLINE(3415)				 ::psychlua::HScript script = _g1->__get(_g).StaticCast<  ::psychlua::HScript >();
HXDLIN(3415)				_g = (_g + 1);
HXLINE(3418)				bool _hx_tmp;
HXDLIN(3418)				bool _hx_tmp1;
HXDLIN(3418)				if (::hx::IsNotNull( script )) {
HXLINE(3418)					_hx_tmp1 = !(script->exists(funcToCall));
            				}
            				else {
HXLINE(3418)					_hx_tmp1 = true;
            				}
HXDLIN(3418)				if (!(_hx_tmp1)) {
HXLINE(3418)					_hx_tmp = exclusions->contains(script->origin);
            				}
            				else {
HXLINE(3418)					_hx_tmp = true;
            				}
HXDLIN(3418)				if (_hx_tmp) {
HXLINE(3419)					continue;
            				}
HXLINE(3421)				 ::crowplexus::iris::IrisCall callValue = script->call(funcToCall,args);
HXLINE(3422)				if (::hx::IsNotNull( callValue )) {
HXLINE(3424)					 ::Dynamic myValue = callValue->returnValue;
HXLINE(3426)					bool _hx_tmp2;
HXDLIN(3426)					bool _hx_tmp3;
HXDLIN(3426)					bool _hx_tmp4;
HXDLIN(3426)					if (::hx::IsNotEq( myValue,::psychlua::LuaUtils_obj::Function_StopHScript )) {
HXLINE(3426)						_hx_tmp4 = ::hx::IsEq( myValue,::psychlua::LuaUtils_obj::Function_StopAll );
            					}
            					else {
HXLINE(3426)						_hx_tmp4 = true;
            					}
HXDLIN(3426)					if (_hx_tmp4) {
HXLINE(3426)						_hx_tmp3 = !(excludeValues->contains(myValue));
            					}
            					else {
HXLINE(3426)						_hx_tmp3 = false;
            					}
HXDLIN(3426)					if (_hx_tmp3) {
HXLINE(3426)						_hx_tmp2 = !(( (bool)(ignoreStops) ));
            					}
            					else {
HXLINE(3426)						_hx_tmp2 = false;
            					}
HXDLIN(3426)					if (_hx_tmp2) {
HXLINE(3428)						returnVal = myValue;
HXLINE(3429)						goto _hx_goto_207;
            					}
HXLINE(3432)					bool _hx_tmp5;
HXDLIN(3432)					if (::hx::IsNotNull( myValue )) {
HXLINE(3432)						_hx_tmp5 = !(excludeValues->contains(myValue));
            					}
            					else {
HXLINE(3432)						_hx_tmp5 = false;
            					}
HXDLIN(3432)					if (_hx_tmp5) {
HXLINE(3433)						returnVal = myValue;
            					}
            				}
            			}
            			_hx_goto_207:;
            		}
HXLINE(3438)		return returnVal;
            	}


HX_DEFINE_DYNAMIC_FUNC5(PlayState_obj,callOnHScript,return )

void PlayState_obj::setOnScripts(::String variable, ::Dynamic arg,::Array< ::String > exclusions){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3441_setOnScripts)
HXLINE(3442)		if (::hx::IsNull( exclusions )) {
HXLINE(3442)			exclusions = ::Array_obj< ::String >::__new(0);
            		}
HXLINE(3443)		this->setOnLuas(variable,arg,exclusions);
HXLINE(3444)		this->setOnHScript(variable,arg,exclusions);
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,setOnScripts,(void))

void PlayState_obj::setOnLuas(::String variable, ::Dynamic arg,::Array< ::String > exclusions){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3447_setOnLuas)
HXLINE(3449)		if (::hx::IsNull( exclusions )) {
HXLINE(3449)			exclusions = ::Array_obj< ::String >::__new(0);
            		}
HXLINE(3450)		{
HXLINE(3450)			int _g = 0;
HXDLIN(3450)			::Array< ::Dynamic> _g1 = this->luaArray;
HXDLIN(3450)			while((_g < _g1->length)){
HXLINE(3450)				 ::psychlua::FunkinLua script = _g1->__get(_g).StaticCast<  ::psychlua::FunkinLua >();
HXDLIN(3450)				_g = (_g + 1);
HXLINE(3451)				if (exclusions->contains(script->scriptName)) {
HXLINE(3452)					continue;
            				}
HXLINE(3454)				script->set(variable,arg);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,setOnLuas,(void))

void PlayState_obj::setOnHScript(::String variable, ::Dynamic arg,::Array< ::String > exclusions){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3459_setOnHScript)
HXLINE(3461)		if (::hx::IsNull( exclusions )) {
HXLINE(3461)			exclusions = ::Array_obj< ::String >::__new(0);
            		}
HXLINE(3462)		{
HXLINE(3462)			int _g = 0;
HXDLIN(3462)			::Array< ::Dynamic> _g1 = this->hscriptArray;
HXDLIN(3462)			while((_g < _g1->length)){
HXLINE(3462)				 ::psychlua::HScript script = _g1->__get(_g).StaticCast<  ::psychlua::HScript >();
HXDLIN(3462)				_g = (_g + 1);
HXLINE(3463)				if (exclusions->contains(script->origin)) {
HXLINE(3464)					continue;
            				}
HXLINE(3466)				script->set(variable,arg,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,setOnHScript,(void))

void PlayState_obj::strumPlayAnim(bool isDad,int id,Float time){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3471_strumPlayAnim)
HXLINE(3472)		 ::objects::StrumNote spr = null();
HXLINE(3473)		if (isDad) {
HXLINE(3474)			spr = Dynamic( this->opponentStrums->members->__get(id)).StaticCast<  ::objects::StrumNote >();
            		}
            		else {
HXLINE(3476)			spr = Dynamic( this->playerStrums->members->__get(id)).StaticCast<  ::objects::StrumNote >();
            		}
HXLINE(3479)		if (::hx::IsNotNull( spr )) {
HXLINE(3480)			spr->playAnim(HX_("confirm",00,9d,39,10),true);
HXLINE(3481)			spr->resetAnim = time;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,strumPlayAnim,(void))

void PlayState_obj::RecalculateRating(::hx::Null< bool >  __o_badHit,::hx::Null< bool >  __o_scoreBop){
            		bool badHit = __o_badHit.Default(false);
            		bool scoreBop = __o_scoreBop.Default(true);
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3488_RecalculateRating)
HXLINE(3489)		this->setOnScripts(HX_("score",52,73,d9,78),this->songScore,null());
HXLINE(3490)		this->setOnScripts(HX_("misses",6a,62,54,56),this->songMisses,null());
HXLINE(3491)		this->setOnScripts(HX_("hits",c0,42,0e,45),this->songHits,null());
HXLINE(3492)		this->setOnScripts(HX_("combo",4e,28,5d,4a),this->combo,null());
HXLINE(3494)		 ::Dynamic ret = this->callOnScripts(HX_("onRecalculateRating",b1,37,6a,10),null(),true,null(),null());
HXLINE(3495)		if (::hx::IsNotEq( ret,::psychlua::LuaUtils_obj::Function_Stop )) {
HXLINE(3497)			this->ratingName = HX_("?",3f,00,00,00);
HXLINE(3498)			if ((this->totalPlayed != 0)) {
HXLINE(3501)				this->ratingPercent = ::Math_obj::min(( (Float)(1) ),::Math_obj::max(( (Float)(0) ),(this->totalNotesHit / ( (Float)(this->totalPlayed) ))));
HXLINE(3505)				this->ratingName = ( (::String)(::states::PlayState_obj::ratingStuff->__get((::states::PlayState_obj::ratingStuff->get_length() - 1))->__GetItem(0)) );
HXLINE(3506)				if ((this->ratingPercent < 1)) {
HXLINE(3507)					int _g = 0;
HXDLIN(3507)					int _g1 = (::states::PlayState_obj::ratingStuff->get_length() - 1);
HXDLIN(3507)					while((_g < _g1)){
HXLINE(3507)						_g = (_g + 1);
HXDLIN(3507)						int i = (_g - 1);
HXLINE(3508)						if (::hx::IsLess( this->ratingPercent,::states::PlayState_obj::ratingStuff->__get(i)->__GetItem(1) )) {
HXLINE(3510)							this->ratingName = ( (::String)(::states::PlayState_obj::ratingStuff->__get(i)->__GetItem(0)) );
HXLINE(3511)							goto _hx_goto_215;
            						}
            					}
            					_hx_goto_215:;
            				}
            			}
HXLINE(3514)			this->fullComboFunction();
            		}
HXLINE(3516)		this->setOnScripts(HX_("rating",1d,34,8a,bb),this->ratingPercent,null());
HXLINE(3517)		this->setOnScripts(HX_("ratingName",08,a5,2b,05),this->ratingName,null());
HXLINE(3518)		this->setOnScripts(HX_("ratingFC",9a,72,95,59),this->ratingFC,null());
HXLINE(3519)		this->setOnScripts(HX_("totalPlayed",37,de,ee,fd),this->totalPlayed,null());
HXLINE(3520)		this->setOnScripts(HX_("totalNotesHit",76,f4,57,a6),this->totalNotesHit,null());
HXLINE(3521)		this->updateScore(badHit,scoreBop);
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,RecalculateRating,(void))

void PlayState_obj::checkForAchievement(::Array< ::String > achievesToCheck){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_3526_checkForAchievement)
HXLINE(3527)		if (::states::PlayState_obj::chartingMode) {
HXLINE(3527)			return;
            		}
HXLINE(3529)		bool usedPractice;
HXDLIN(3529)		 ::Dynamic defaultValue = null();
HXDLIN(3529)		defaultValue = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("practice",bb,00,e7,a0));
HXDLIN(3529)		 ::Dynamic usedPractice1;
HXDLIN(3529)		if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("practice",bb,00,e7,a0))) {
HXLINE(3529)			usedPractice1 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("practice",bb,00,e7,a0));
            		}
            		else {
HXLINE(3529)			usedPractice1 = defaultValue;
            		}
HXDLIN(3529)		if (!(( (bool)(usedPractice1) ))) {
HXLINE(3529)			 ::Dynamic defaultValue1 = null();
HXDLIN(3529)			defaultValue1 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("botplay",7b,fb,a9,61));
HXDLIN(3529)			if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("botplay",7b,fb,a9,61))) {
HXLINE(3529)				usedPractice = ::backend::ClientPrefs_obj::data->gameplaySettings->get_bool(HX_("botplay",7b,fb,a9,61));
            			}
            			else {
HXLINE(3529)				usedPractice = ( (bool)(defaultValue1) );
            			}
            		}
            		else {
HXLINE(3529)			usedPractice = true;
            		}
HXLINE(3530)		if (this->cpuControlled) {
HXLINE(3530)			return;
            		}
HXLINE(3532)		{
HXLINE(3532)			int _g = 0;
HXDLIN(3532)			while((_g < achievesToCheck->length)){
HXLINE(3532)				::String name = achievesToCheck->__get(_g);
HXDLIN(3532)				_g = (_g + 1);
HXLINE(3533)				if (!(::backend::Achievements_obj::exists(name))) {
HXLINE(3533)					continue;
            				}
HXLINE(3535)				bool unlock = false;
HXLINE(3536)				if ((name != (::backend::WeekData_obj::getWeekFileName() + HX_("_nomiss",5c,79,8f,9b)))) {
HXLINE(3538)					::String _hx_switch_0 = name;
            					if (  (_hx_switch_0==HX_("hype",46,63,1a,45)) ){
HXLINE(3550)						if (!(this->boyfriendIdled)) {
HXLINE(3550)							unlock = !(usedPractice);
            						}
            						else {
HXLINE(3550)							unlock = false;
            						}
HXDLIN(3550)						goto _hx_goto_218;
            					}
            					if (  (_hx_switch_0==HX_("oversinging",1f,13,8f,78)) ){
HXLINE(3547)						if ((this->boyfriend->holdTimer >= 10)) {
HXLINE(3547)							unlock = !(usedPractice);
            						}
            						else {
HXLINE(3547)							unlock = false;
            						}
HXDLIN(3547)						goto _hx_goto_218;
            					}
            					if (  (_hx_switch_0==HX_("toastie",43,0c,91,5f)) ){
HXLINE(3556)						bool unlock1;
HXDLIN(3556)						bool unlock2;
HXDLIN(3556)						if (!(::backend::ClientPrefs_obj::data->cacheOnGPU)) {
HXLINE(3556)							unlock2 = !(::backend::ClientPrefs_obj::data->shaders);
            						}
            						else {
HXLINE(3556)							unlock2 = false;
            						}
HXDLIN(3556)						if (unlock2) {
HXLINE(3556)							unlock1 = ::backend::ClientPrefs_obj::data->lowQuality;
            						}
            						else {
HXLINE(3556)							unlock1 = false;
            						}
HXDLIN(3556)						if (unlock1) {
HXLINE(3556)							unlock = !(::backend::ClientPrefs_obj::data->antialiasing);
            						}
            						else {
HXLINE(3556)							unlock = false;
            						}
HXDLIN(3556)						goto _hx_goto_218;
            					}
            					if (  (_hx_switch_0==HX_("two_keys",c7,f4,0a,9b)) ){
HXLINE(3553)						if (!(usedPractice)) {
HXLINE(3553)							unlock = (this->keysPressed->length <= 2);
            						}
            						else {
HXLINE(3553)							unlock = false;
            						}
HXDLIN(3553)						goto _hx_goto_218;
            					}
            					if (  (_hx_switch_0==HX_("ur_bad",a3,4f,85,aa)) ){
HXLINE(3541)						if ((this->ratingPercent < ((Float)0.2))) {
HXLINE(3541)							unlock = !(this->practiceMode);
            						}
            						else {
HXLINE(3541)							unlock = false;
            						}
HXDLIN(3541)						goto _hx_goto_218;
            					}
            					if (  (_hx_switch_0==HX_("ur_good",9f,19,79,8d)) ){
HXLINE(3544)						if ((this->ratingPercent >= 1)) {
HXLINE(3544)							unlock = !(usedPractice);
            						}
            						else {
HXLINE(3544)							unlock = false;
            						}
HXDLIN(3544)						goto _hx_goto_218;
            					}
            					_hx_goto_218:;
            				}
            				else {
HXLINE(3566)					bool _hx_tmp;
HXDLIN(3566)					bool _hx_tmp1;
HXDLIN(3566)					bool _hx_tmp2;
HXDLIN(3566)					bool _hx_tmp3;
HXDLIN(3566)					bool _hx_tmp4;
HXDLIN(3566)					if (::states::PlayState_obj::isStoryMode) {
HXLINE(3566)						_hx_tmp4 = ((::states::PlayState_obj::campaignMisses + this->songMisses) < 1);
            					}
            					else {
HXLINE(3566)						_hx_tmp4 = false;
            					}
HXDLIN(3566)					if (_hx_tmp4) {
HXLINE(3566)						 ::Dynamic num = null();
HXDLIN(3566)						 ::Dynamic diffName;
HXDLIN(3566)						if (::hx::IsNull( num )) {
HXLINE(3566)							diffName = ::states::PlayState_obj::storyDifficulty;
            						}
            						else {
HXLINE(3566)							diffName = num;
            						}
HXDLIN(3566)						::String diffName1 = ::backend::Difficulty_obj::list->__get(( (int)(diffName) ));
HXDLIN(3566)						if (::hx::IsNull( diffName1 )) {
HXLINE(  64)							diffName1 = ::backend::Difficulty_obj::defaultDifficulty;
            						}
HXLINE(3566)						::String key = (HX_("difficulty_",c4,25,f6,54) + diffName1);
HXDLIN(3566)						::cpp::VirtualArray values = null();
HXDLIN(3566)						::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(3566)						 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN(3566)						::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(key,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN(3566)						if (::hx::IsNull( str )) {
HXLINE(  62)							str = diffName1;
            						}
HXLINE(3566)						if (::hx::IsNull( str )) {
HXLINE(  68)							str = key;
            						}
HXLINE(3566)						if (::hx::IsNotNull( values )) {
HXLINE(3566)							int _g_current = 0;
HXDLIN(3566)							::cpp::VirtualArray _g_array = values;
HXDLIN(3566)							while((_g_current < _g_array->get_length())){
HXLINE(3566)								 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN(3566)								_g_current = (_g_current + 1);
HXDLIN(3566)								int _g_key = (_g_current - 1);
HXDLIN(3566)								int num1 = _g_key;
HXDLIN(3566)								 ::Dynamic value = _g_value;
HXLINE(  72)								str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num1 + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            							}
            						}
HXLINE(3566)						_hx_tmp3 = (str.toUpperCase() == HX_("HARD",eb,f6,c8,2f));
            					}
            					else {
HXLINE(3566)						_hx_tmp3 = false;
            					}
HXDLIN(3566)					if (_hx_tmp3) {
HXLINE(3566)						_hx_tmp2 = (::states::PlayState_obj::storyPlaylist->length <= 1);
            					}
            					else {
HXLINE(3566)						_hx_tmp2 = false;
            					}
HXDLIN(3566)					if (_hx_tmp2) {
HXLINE(3566)						_hx_tmp1 = !(::states::PlayState_obj::changedDifficulty);
            					}
            					else {
HXLINE(3566)						_hx_tmp1 = false;
            					}
HXDLIN(3566)					if (_hx_tmp1) {
HXLINE(3566)						_hx_tmp = !(usedPractice);
            					}
            					else {
HXLINE(3566)						_hx_tmp = false;
            					}
HXDLIN(3566)					if (_hx_tmp) {
HXLINE(3568)						unlock = true;
            					}
            				}
HXLINE(3571)				if (unlock) {
HXLINE(3571)					::backend::Achievements_obj::unlock(name,null());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,checkForAchievement,(void))

 ::shaders::ErrorHandledRuntimeShader PlayState_obj::createRuntimeShader(::String shaderName){
            	HX_GC_STACKFRAME(&_hx_pos_801e532e222627de_3580_createRuntimeShader)
HXLINE(3582)		if (!(::backend::ClientPrefs_obj::data->shaders)) {
HXLINE(3582)			return  ::shaders::ErrorHandledRuntimeShader_obj::__alloc( HX_CTX ,shaderName,null(),null());
            		}
HXLINE(3584)		bool _hx_tmp;
HXDLIN(3584)		if (!(this->runtimeShaders->exists(shaderName))) {
HXLINE(3584)			_hx_tmp = !(this->initLuaShader(shaderName,null()));
            		}
            		else {
HXLINE(3584)			_hx_tmp = false;
            		}
HXDLIN(3584)		if (_hx_tmp) {
HXLINE(3586)			::flixel::FlxG_obj::log->advanced(((HX_("Shader ",3b,a9,d7,2c) + shaderName) + HX_(" is missing!",d1,64,6b,b3)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE(3587)			return  ::shaders::ErrorHandledRuntimeShader_obj::__alloc( HX_CTX ,shaderName,null(),null());
            		}
HXLINE(3590)		::Array< ::String > arr = ( (::Array< ::String >)(this->runtimeShaders->get(shaderName)) );
HXLINE(3591)		return  ::shaders::ErrorHandledRuntimeShader_obj::__alloc( HX_CTX ,shaderName,arr->__get(0),arr->__get(1));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,createRuntimeShader,return )

bool PlayState_obj::initLuaShader(::String name, ::Dynamic __o_glslVersion){
            		 ::Dynamic glslVersion = __o_glslVersion;
            		if (::hx::IsNull(__o_glslVersion)) glslVersion = 120;
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_3599_initLuaShader)
HXLINE(3600)		if (!(::backend::ClientPrefs_obj::data->shaders)) {
HXLINE(3600)			return false;
            		}
HXLINE(3603)		if (this->runtimeShaders->exists(name)) {
HXLINE(3605)			::flixel::FlxG_obj::log->advanced(((HX_("Shader ",3b,a9,d7,2c) + name) + HX_(" was already initialized!",8c,8e,cf,cf)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE(3606)			return true;
            		}
HXLINE(3609)		{
HXLINE(3609)			int _g = 0;
HXDLIN(3609)			::Array< ::String > foldersToCheck = ::Array_obj< ::String >::__new(0);
HXDLIN(3609)			if (::sys::FileSystem_obj::exists((HX_("assets/shared/",1e,69,1e,47) + HX_("shaders/",c1,f6,2a,36)))) {
HXLINE(3609)				foldersToCheck->push((HX_("assets/shared/",1e,69,1e,47) + HX_("shaders/",c1,f6,2a,36)));
            			}
HXDLIN(3609)			bool _hx_tmp;
HXDLIN(3609)			if (::hx::IsNotNull( ::backend::Paths_obj::currentLevel )) {
HXLINE(3609)				_hx_tmp = (::backend::Paths_obj::currentLevel != HX_("assets/shared/",1e,69,1e,47));
            			}
            			else {
HXLINE(3609)				_hx_tmp = false;
            			}
HXDLIN(3609)			if (_hx_tmp) {
HXLINE(3609)				::String folder = ::backend::Paths_obj::currentLevel;
HXDLIN(3609)				if (::hx::IsNull( folder )) {
HXLINE(3609)					folder = HX_("shared",a5,5e,2b,1d);
            				}
HXDLIN(3609)				::String pth = (((HX_("assets/",4c,2a,dc,36) + folder) + HX_("/",2f,00,00,00)) + HX_("shaders/",c1,f6,2a,36));
HXDLIN(3609)				bool _hx_tmp1;
HXDLIN(3609)				if (!(foldersToCheck->contains(pth))) {
HXLINE(3609)					_hx_tmp1 = ::sys::FileSystem_obj::exists(pth);
            				}
            				else {
HXLINE(3609)					_hx_tmp1 = false;
            				}
HXDLIN(3609)				if (_hx_tmp1) {
HXLINE(3609)					foldersToCheck->push(pth);
            				}
            			}
HXDLIN(3609)			{
HXLINE(3609)				{
HXLINE(3609)					int _g1 = 0;
HXDLIN(3609)					::Array< ::String > _g2 = ::backend::Mods_obj::globalMods;
HXDLIN(3609)					while((_g1 < _g2->length)){
HXLINE(3609)						::String mod = _g2->__get(_g1);
HXDLIN(3609)						_g1 = (_g1 + 1);
HXDLIN(3609)						::String key = ((mod + HX_("/",2f,00,00,00)) + HX_("shaders/",c1,f6,2a,36));
HXDLIN(3609)						if (::hx::IsNull( key )) {
HXLINE(3609)							key = HX_("",00,00,00,00);
            						}
HXDLIN(3609)						::String folder1 = (HX_("mods/",9e,2f,58,0c) + key);
HXDLIN(3609)						bool _hx_tmp2;
HXDLIN(3609)						if (::sys::FileSystem_obj::exists(folder1)) {
HXLINE(3609)							_hx_tmp2 = !(foldersToCheck->contains(folder1));
            						}
            						else {
HXLINE(3609)							_hx_tmp2 = false;
            						}
HXDLIN(3609)						if (_hx_tmp2) {
HXLINE(3609)							foldersToCheck->push(folder1);
            						}
            					}
            				}
HXDLIN(3609)				::String key1 = HX_("shaders/",c1,f6,2a,36);
HXDLIN(3609)				if (::hx::IsNull( key1 )) {
HXLINE(3609)					key1 = HX_("",00,00,00,00);
            				}
HXDLIN(3609)				::String folder2 = (HX_("mods/",9e,2f,58,0c) + key1);
HXDLIN(3609)				bool _hx_tmp3;
HXDLIN(3609)				if (::sys::FileSystem_obj::exists(folder2)) {
HXLINE(3609)					_hx_tmp3 = !(foldersToCheck->contains(folder2));
            				}
            				else {
HXLINE(3609)					_hx_tmp3 = false;
            				}
HXDLIN(3609)				if (_hx_tmp3) {
HXLINE(3609)					::String key2 = HX_("shaders/",c1,f6,2a,36);
HXDLIN(3609)					if (::hx::IsNull( key2 )) {
HXLINE(3609)						key2 = HX_("",00,00,00,00);
            					}
HXDLIN(3609)					foldersToCheck->push((HX_("mods/",9e,2f,58,0c) + key2));
            				}
HXDLIN(3609)				bool _hx_tmp4;
HXDLIN(3609)				if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE(3609)					_hx_tmp4 = (::backend::Mods_obj::currentModDirectory.length > 0);
            				}
            				else {
HXLINE(3609)					_hx_tmp4 = false;
            				}
HXDLIN(3609)				if (_hx_tmp4) {
HXLINE(3609)					::String key3 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + HX_("shaders/",c1,f6,2a,36));
HXDLIN(3609)					if (::hx::IsNull( key3 )) {
HXLINE(3609)						key3 = HX_("",00,00,00,00);
            					}
HXDLIN(3609)					::String folder3 = (HX_("mods/",9e,2f,58,0c) + key3);
HXDLIN(3609)					bool _hx_tmp5;
HXDLIN(3609)					if (::sys::FileSystem_obj::exists(folder3)) {
HXLINE(3609)						_hx_tmp5 = !(foldersToCheck->contains(folder3));
            					}
            					else {
HXLINE(3609)						_hx_tmp5 = false;
            					}
HXDLIN(3609)					if (_hx_tmp5) {
HXLINE(3609)						foldersToCheck->push(folder3);
            					}
            				}
            			}
HXDLIN(3609)			::Array< ::String > _g3 = foldersToCheck;
HXDLIN(3609)			while((_g < _g3->length)){
HXLINE(3609)				::String folder4 = _g3->__get(_g);
HXDLIN(3609)				_g = (_g + 1);
HXLINE(3611)				::String frag = ((folder4 + name) + HX_(".frag",60,48,31,c0));
HXLINE(3612)				::String vert = ((folder4 + name) + HX_(".vert",df,e3,ba,ca));
HXLINE(3613)				bool found = false;
HXLINE(3614)				if (::sys::FileSystem_obj::exists(frag)) {
HXLINE(3616)					frag = ::sys::io::File_obj::getContent(frag);
HXLINE(3617)					found = true;
            				}
            				else {
HXLINE(3619)					frag = null();
            				}
HXLINE(3621)				if (::sys::FileSystem_obj::exists(vert)) {
HXLINE(3623)					vert = ::sys::io::File_obj::getContent(vert);
HXLINE(3624)					found = true;
            				}
            				else {
HXLINE(3626)					vert = null();
            				}
HXLINE(3628)				if (found) {
HXLINE(3630)					this->runtimeShaders->set(name,::Array_obj< ::String >::__new(2)->init(0,frag)->init(1,vert));
HXLINE(3632)					return true;
            				}
            			}
            		}
HXLINE(3636)		this->addTextToDebug(((HX_("Missing shader ",81,62,6c,67) + name) + HX_(" .frag AND .vert files!",d4,1e,ab,6a)),-65536);
HXLINE(3643)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,initLuaShader,return )

int PlayState_obj::STRUM_X;

int PlayState_obj::STRUM_X_MIDDLESCROLL;

::cpp::VirtualArray PlayState_obj::ratingStuff;

::String PlayState_obj::curStage;

::String PlayState_obj::stageUI;

::String PlayState_obj::uiPrefix;

::String PlayState_obj::uiPostfix;

::String PlayState_obj::set_stageUI(::String value){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_128_set_stageUI)
HXLINE( 129)		::states::PlayState_obj::uiPrefix = (::states::PlayState_obj::uiPostfix = HX_("",00,00,00,00));
HXLINE( 130)		if ((value != HX_("normal",27,72,69,30))) {
HXLINE( 132)			::states::PlayState_obj::uiPrefix = ::StringTools_obj::trim(value.split(HX_("-pixel",39,03,b3,c0))->__get(0));
HXLINE( 133)			bool _hx_tmp;
HXDLIN( 133)			if ((value != HX_("pixel",86,c6,a3,c2))) {
HXLINE( 133)				_hx_tmp = ::StringTools_obj::endsWith(value,HX_("-pixel",39,03,b3,c0));
            			}
            			else {
HXLINE( 133)				_hx_tmp = true;
            			}
HXDLIN( 133)			if (_hx_tmp) {
HXLINE( 133)				::states::PlayState_obj::uiPostfix = HX_("-pixel",39,03,b3,c0);
            			}
            		}
HXLINE( 135)		return (::states::PlayState_obj::stageUI = value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,set_stageUI,return )

bool PlayState_obj::get_isPixelStage(){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_140_get_isPixelStage)
HXDLIN( 140)		if ((::states::PlayState_obj::stageUI != HX_("pixel",86,c6,a3,c2))) {
HXDLIN( 140)			return ::StringTools_obj::endsWith(::states::PlayState_obj::stageUI,HX_("-pixel",39,03,b3,c0));
            		}
            		else {
HXDLIN( 140)			return true;
            		}
HXDLIN( 140)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,get_isPixelStage,return )

 ::Dynamic PlayState_obj::SONG;

bool PlayState_obj::isStoryMode;

int PlayState_obj::storyWeek;

::Array< ::String > PlayState_obj::storyPlaylist;

int PlayState_obj::storyDifficulty;

 ::flixel::FlxObject PlayState_obj::prevCamFollow;

bool PlayState_obj::changedDifficulty;

bool PlayState_obj::chartingMode;

int PlayState_obj::campaignScore;

int PlayState_obj::campaignMisses;

bool PlayState_obj::seenCutscene;

int PlayState_obj::deathCounter;

Float PlayState_obj::daPixelZoom;

 ::states::PlayState PlayState_obj::instance;

::String PlayState_obj::_lastLoadedModDirectory;

bool PlayState_obj::nextReloadAll;

Float PlayState_obj::startOnTime;

int PlayState_obj::sortByTime( ::Dynamic Obj1, ::Dynamic Obj2){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_1511_sortByTime)
HXDLIN(1511)		Float Value1 = ( (Float)(Obj1->__Field(HX_("strumTime",f6,2d,21,f4),::hx::paccDynamic)) );
HXDLIN(1511)		Float Value2 = ( (Float)(Obj2->__Field(HX_("strumTime",f6,2d,21,f4),::hx::paccDynamic)) );
HXDLIN(1511)		int result = 0;
HXDLIN(1511)		if ((Value1 < Value2)) {
HXDLIN(1511)			result = -1;
            		}
            		else {
HXDLIN(1511)			if ((Value1 > Value2)) {
HXDLIN(1511)				result = 1;
            			}
            		}
HXDLIN(1511)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,sortByTime,return )

int PlayState_obj::sortHitNotes( ::objects::Note a, ::objects::Note b){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2770_sortHitNotes)
HXLINE(2771)		bool _hx_tmp;
HXDLIN(2771)		if (a->lowPriority) {
HXLINE(2771)			_hx_tmp = !(b->lowPriority);
            		}
            		else {
HXLINE(2771)			_hx_tmp = false;
            		}
HXDLIN(2771)		if (_hx_tmp) {
HXLINE(2772)			return 1;
            		}
            		else {
HXLINE(2773)			bool _hx_tmp1;
HXDLIN(2773)			if (!(a->lowPriority)) {
HXLINE(2773)				_hx_tmp1 = b->lowPriority;
            			}
            			else {
HXLINE(2773)				_hx_tmp1 = false;
            			}
HXDLIN(2773)			if (_hx_tmp1) {
HXLINE(2774)				return -1;
            			}
            		}
HXLINE(2776)		Float Value1 = a->strumTime;
HXDLIN(2776)		Float Value2 = b->strumTime;
HXDLIN(2776)		int result = 0;
HXDLIN(2776)		if ((Value1 < Value2)) {
HXLINE(2776)			result = -1;
            		}
            		else {
HXLINE(2776)			if ((Value1 > Value2)) {
HXLINE(2776)				result = 1;
            			}
            		}
HXDLIN(2776)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,sortHitNotes,return )

int PlayState_obj::getKeyFromEvent(::Array< ::String > arr,int key){
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_2803_getKeyFromEvent)
HXLINE(2804)		if ((key != -1)) {
HXLINE(2806)			int _g = 0;
HXDLIN(2806)			int _g1 = arr->length;
HXDLIN(2806)			while((_g < _g1)){
HXLINE(2806)				_g = (_g + 1);
HXDLIN(2806)				int i = (_g - 1);
HXLINE(2808)				::Array< int > note = ( (::Array< int >)(::backend::Controls_obj::instance->keyboardBinds->get(arr->__get(i))) );
HXLINE(2809)				{
HXLINE(2809)					int _g2 = 0;
HXDLIN(2809)					while((_g2 < note->length)){
HXLINE(2809)						int noteKey = note->__get(_g2);
HXDLIN(2809)						_g2 = (_g2 + 1);
HXLINE(2810)						if ((key == noteKey)) {
HXLINE(2811)							return i;
            						}
            					}
            				}
            			}
            		}
HXLINE(2814)		return -1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,getKeyFromEvent,return )


void PlayState_obj::__alloc_dynamic_functions(::hx::Ctx *_hx_ctx,PlayState_obj *_hx_obj) {
	if (!_hx_obj->updateIconsPosition.mPtr) _hx_obj->updateIconsPosition = new __default_updateIconsPosition(_hx_obj);
	if (!_hx_obj->updateIconsScale.mPtr) _hx_obj->updateIconsScale = new __default_updateIconsScale(_hx_obj);
	if (!_hx_obj->fullComboFunction.mPtr) _hx_obj->fullComboFunction = new __default_fullComboFunction(_hx_obj);
	if (!_hx_obj->updateScoreText.mPtr) _hx_obj->updateScoreText = new __default_updateScoreText(_hx_obj);
	if (!_hx_obj->updateScore.mPtr) _hx_obj->updateScore = new __default_updateScore(_hx_obj);
}
::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new() {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "states.PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	states::PlayState_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct();
	return __this;
}

PlayState_obj::PlayState_obj()
{
	updateIconsPosition = new __default_updateIconsPosition(this);
	updateIconsScale = new __default_updateIconsScale(this);
	fullComboFunction = new __default_fullComboFunction(this);
	updateScoreText = new __default_updateScoreText(this);
	updateScore = new __default_updateScore(this);
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(isCameraOnForcedPos,"isCameraOnForcedPos");
	HX_MARK_MEMBER_NAME(boyfriendMap,"boyfriendMap");
	HX_MARK_MEMBER_NAME(dadMap,"dadMap");
	HX_MARK_MEMBER_NAME(gfMap,"gfMap");
	HX_MARK_MEMBER_NAME(hscriptArray,"hscriptArray");
	HX_MARK_MEMBER_NAME(BF_X,"BF_X");
	HX_MARK_MEMBER_NAME(BF_Y,"BF_Y");
	HX_MARK_MEMBER_NAME(DAD_X,"DAD_X");
	HX_MARK_MEMBER_NAME(DAD_Y,"DAD_Y");
	HX_MARK_MEMBER_NAME(GF_X,"GF_X");
	HX_MARK_MEMBER_NAME(GF_Y,"GF_Y");
	HX_MARK_MEMBER_NAME(songSpeedTween,"songSpeedTween");
	HX_MARK_MEMBER_NAME(songSpeed,"songSpeed");
	HX_MARK_MEMBER_NAME(songSpeedType,"songSpeedType");
	HX_MARK_MEMBER_NAME(noteKillOffset,"noteKillOffset");
	HX_MARK_MEMBER_NAME(playbackRate,"playbackRate");
	HX_MARK_MEMBER_NAME(boyfriendGroup,"boyfriendGroup");
	HX_MARK_MEMBER_NAME(dadGroup,"dadGroup");
	HX_MARK_MEMBER_NAME(gfGroup,"gfGroup");
	HX_MARK_MEMBER_NAME(spawnTime,"spawnTime");
	HX_MARK_MEMBER_NAME(inst,"inst");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(opponentVocals,"opponentVocals");
	HX_MARK_MEMBER_NAME(dad,"dad");
	HX_MARK_MEMBER_NAME(gf,"gf");
	HX_MARK_MEMBER_NAME(boyfriend,"boyfriend");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_MARK_MEMBER_NAME(eventNotes,"eventNotes");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_MARK_MEMBER_NAME(opponentStrums,"opponentStrums");
	HX_MARK_MEMBER_NAME(playerStrums,"playerStrums");
	HX_MARK_MEMBER_NAME(grpNoteSplashes,"grpNoteSplashes");
	HX_MARK_MEMBER_NAME(camZooming,"camZooming");
	HX_MARK_MEMBER_NAME(camZoomingMult,"camZoomingMult");
	HX_MARK_MEMBER_NAME(camZoomingDecay,"camZoomingDecay");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_MARK_MEMBER_NAME(health,"health");
	HX_MARK_MEMBER_NAME(combo,"combo");
	HX_MARK_MEMBER_NAME(healthBar,"healthBar");
	HX_MARK_MEMBER_NAME(timeBar,"timeBar");
	HX_MARK_MEMBER_NAME(songPercent,"songPercent");
	HX_MARK_MEMBER_NAME(ratingsData,"ratingsData");
	HX_MARK_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_MARK_MEMBER_NAME(endingSong,"endingSong");
	HX_MARK_MEMBER_NAME(startingSong,"startingSong");
	HX_MARK_MEMBER_NAME(updateTime,"updateTime");
	HX_MARK_MEMBER_NAME(healthGain,"healthGain");
	HX_MARK_MEMBER_NAME(healthLoss,"healthLoss");
	HX_MARK_MEMBER_NAME(guitarHeroSustains,"guitarHeroSustains");
	HX_MARK_MEMBER_NAME(instakillOnMiss,"instakillOnMiss");
	HX_MARK_MEMBER_NAME(cpuControlled,"cpuControlled");
	HX_MARK_MEMBER_NAME(practiceMode,"practiceMode");
	HX_MARK_MEMBER_NAME(pressMissDamage,"pressMissDamage");
	HX_MARK_MEMBER_NAME(botplaySine,"botplaySine");
	HX_MARK_MEMBER_NAME(botplayTxt,"botplayTxt");
	HX_MARK_MEMBER_NAME(iconP1,"iconP1");
	HX_MARK_MEMBER_NAME(iconP2,"iconP2");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(camGame,"camGame");
	HX_MARK_MEMBER_NAME(camOther,"camOther");
	HX_MARK_MEMBER_NAME(cameraSpeed,"cameraSpeed");
	HX_MARK_MEMBER_NAME(songScore,"songScore");
	HX_MARK_MEMBER_NAME(songHits,"songHits");
	HX_MARK_MEMBER_NAME(songMisses,"songMisses");
	HX_MARK_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_MARK_MEMBER_NAME(timeTxt,"timeTxt");
	HX_MARK_MEMBER_NAME(scoreTxtTween,"scoreTxtTween");
	HX_MARK_MEMBER_NAME(defaultCamZoom,"defaultCamZoom");
	HX_MARK_MEMBER_NAME(singAnimations,"singAnimations");
	HX_MARK_MEMBER_NAME(inCutscene,"inCutscene");
	HX_MARK_MEMBER_NAME(skipCountdown,"skipCountdown");
	HX_MARK_MEMBER_NAME(songLength,"songLength");
	HX_MARK_MEMBER_NAME(boyfriendCameraOffset,"boyfriendCameraOffset");
	HX_MARK_MEMBER_NAME(opponentCameraOffset,"opponentCameraOffset");
	HX_MARK_MEMBER_NAME(girlfriendCameraOffset,"girlfriendCameraOffset");
	HX_MARK_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_MARK_MEMBER_NAME(detailsText,"detailsText");
	HX_MARK_MEMBER_NAME(detailsPausedText,"detailsPausedText");
	HX_MARK_MEMBER_NAME(keysPressed,"keysPressed");
	HX_MARK_MEMBER_NAME(boyfriendIdleTime,"boyfriendIdleTime");
	HX_MARK_MEMBER_NAME(boyfriendIdled,"boyfriendIdled");
	HX_MARK_MEMBER_NAME(luaArray,"luaArray");
	HX_MARK_MEMBER_NAME(luaDebugGroup,"luaDebugGroup");
	HX_MARK_MEMBER_NAME(introSoundsSuffix,"introSoundsSuffix");
	HX_MARK_MEMBER_NAME(keysArray,"keysArray");
	HX_MARK_MEMBER_NAME(songName,"songName");
	HX_MARK_MEMBER_NAME(startCallback,"startCallback");
	HX_MARK_MEMBER_NAME(endCallback,"endCallback");
	HX_MARK_MEMBER_NAME(videoCutscene,"videoCutscene");
	HX_MARK_MEMBER_NAME(dialogueCount,"dialogueCount");
	HX_MARK_MEMBER_NAME(psychDialogue,"psychDialogue");
	HX_MARK_MEMBER_NAME(startTimer,"startTimer");
	HX_MARK_MEMBER_NAME(finishTimer,"finishTimer");
	HX_MARK_MEMBER_NAME(countdownReady,"countdownReady");
	HX_MARK_MEMBER_NAME(countdownSet,"countdownSet");
	HX_MARK_MEMBER_NAME(countdownGo,"countdownGo");
	HX_MARK_MEMBER_NAME(updateScore,"updateScore");
	HX_MARK_MEMBER_NAME(updateScoreText,"updateScoreText");
	HX_MARK_MEMBER_NAME(fullComboFunction,"fullComboFunction");
	HX_MARK_MEMBER_NAME(noteTypes,"noteTypes");
	HX_MARK_MEMBER_NAME(eventsPushed,"eventsPushed");
	HX_MARK_MEMBER_NAME(totalColumns,"totalColumns");
	HX_MARK_MEMBER_NAME(skipArrowStartTween,"skipArrowStartTween");
	HX_MARK_MEMBER_NAME(canResync,"canResync");
	HX_MARK_MEMBER_NAME(autoUpdateRPC,"autoUpdateRPC");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(canReset,"canReset");
	HX_MARK_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_MARK_MEMBER_NAME(canPause,"canPause");
	HX_MARK_MEMBER_NAME(freezeCamera,"freezeCamera");
	HX_MARK_MEMBER_NAME(allowDebugKeys,"allowDebugKeys");
	HX_MARK_MEMBER_NAME(updateIconsScale,"updateIconsScale");
	HX_MARK_MEMBER_NAME(updateIconsPosition,"updateIconsPosition");
	HX_MARK_MEMBER_NAME(iconsAnimations,"iconsAnimations");
	HX_MARK_MEMBER_NAME(isDead,"isDead");
	HX_MARK_MEMBER_NAME(gameOverTimer,"gameOverTimer");
	HX_MARK_MEMBER_NAME(cameraTwn,"cameraTwn");
	HX_MARK_MEMBER_NAME(transitioning,"transitioning");
	HX_MARK_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_MARK_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_MARK_MEMBER_NAME(showCombo,"showCombo");
	HX_MARK_MEMBER_NAME(showComboNum,"showComboNum");
	HX_MARK_MEMBER_NAME(showRating,"showRating");
	HX_MARK_MEMBER_NAME(comboGroup,"comboGroup");
	HX_MARK_MEMBER_NAME(uiGroup,"uiGroup");
	HX_MARK_MEMBER_NAME(noteGroup,"noteGroup");
	HX_MARK_MEMBER_NAME(strumsBlocked,"strumsBlocked");
	HX_MARK_MEMBER_NAME(lastStepHit,"lastStepHit");
	HX_MARK_MEMBER_NAME(lastBeatHit,"lastBeatHit");
	HX_MARK_MEMBER_NAME(ratingName,"ratingName");
	HX_MARK_MEMBER_NAME(ratingPercent,"ratingPercent");
	HX_MARK_MEMBER_NAME(ratingFC,"ratingFC");
	HX_MARK_MEMBER_NAME(runtimeShaders,"runtimeShaders");
	 ::backend::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(isCameraOnForcedPos,"isCameraOnForcedPos");
	HX_VISIT_MEMBER_NAME(boyfriendMap,"boyfriendMap");
	HX_VISIT_MEMBER_NAME(dadMap,"dadMap");
	HX_VISIT_MEMBER_NAME(gfMap,"gfMap");
	HX_VISIT_MEMBER_NAME(hscriptArray,"hscriptArray");
	HX_VISIT_MEMBER_NAME(BF_X,"BF_X");
	HX_VISIT_MEMBER_NAME(BF_Y,"BF_Y");
	HX_VISIT_MEMBER_NAME(DAD_X,"DAD_X");
	HX_VISIT_MEMBER_NAME(DAD_Y,"DAD_Y");
	HX_VISIT_MEMBER_NAME(GF_X,"GF_X");
	HX_VISIT_MEMBER_NAME(GF_Y,"GF_Y");
	HX_VISIT_MEMBER_NAME(songSpeedTween,"songSpeedTween");
	HX_VISIT_MEMBER_NAME(songSpeed,"songSpeed");
	HX_VISIT_MEMBER_NAME(songSpeedType,"songSpeedType");
	HX_VISIT_MEMBER_NAME(noteKillOffset,"noteKillOffset");
	HX_VISIT_MEMBER_NAME(playbackRate,"playbackRate");
	HX_VISIT_MEMBER_NAME(boyfriendGroup,"boyfriendGroup");
	HX_VISIT_MEMBER_NAME(dadGroup,"dadGroup");
	HX_VISIT_MEMBER_NAME(gfGroup,"gfGroup");
	HX_VISIT_MEMBER_NAME(spawnTime,"spawnTime");
	HX_VISIT_MEMBER_NAME(inst,"inst");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(opponentVocals,"opponentVocals");
	HX_VISIT_MEMBER_NAME(dad,"dad");
	HX_VISIT_MEMBER_NAME(gf,"gf");
	HX_VISIT_MEMBER_NAME(boyfriend,"boyfriend");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_VISIT_MEMBER_NAME(eventNotes,"eventNotes");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_VISIT_MEMBER_NAME(opponentStrums,"opponentStrums");
	HX_VISIT_MEMBER_NAME(playerStrums,"playerStrums");
	HX_VISIT_MEMBER_NAME(grpNoteSplashes,"grpNoteSplashes");
	HX_VISIT_MEMBER_NAME(camZooming,"camZooming");
	HX_VISIT_MEMBER_NAME(camZoomingMult,"camZoomingMult");
	HX_VISIT_MEMBER_NAME(camZoomingDecay,"camZoomingDecay");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_VISIT_MEMBER_NAME(health,"health");
	HX_VISIT_MEMBER_NAME(combo,"combo");
	HX_VISIT_MEMBER_NAME(healthBar,"healthBar");
	HX_VISIT_MEMBER_NAME(timeBar,"timeBar");
	HX_VISIT_MEMBER_NAME(songPercent,"songPercent");
	HX_VISIT_MEMBER_NAME(ratingsData,"ratingsData");
	HX_VISIT_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_VISIT_MEMBER_NAME(endingSong,"endingSong");
	HX_VISIT_MEMBER_NAME(startingSong,"startingSong");
	HX_VISIT_MEMBER_NAME(updateTime,"updateTime");
	HX_VISIT_MEMBER_NAME(healthGain,"healthGain");
	HX_VISIT_MEMBER_NAME(healthLoss,"healthLoss");
	HX_VISIT_MEMBER_NAME(guitarHeroSustains,"guitarHeroSustains");
	HX_VISIT_MEMBER_NAME(instakillOnMiss,"instakillOnMiss");
	HX_VISIT_MEMBER_NAME(cpuControlled,"cpuControlled");
	HX_VISIT_MEMBER_NAME(practiceMode,"practiceMode");
	HX_VISIT_MEMBER_NAME(pressMissDamage,"pressMissDamage");
	HX_VISIT_MEMBER_NAME(botplaySine,"botplaySine");
	HX_VISIT_MEMBER_NAME(botplayTxt,"botplayTxt");
	HX_VISIT_MEMBER_NAME(iconP1,"iconP1");
	HX_VISIT_MEMBER_NAME(iconP2,"iconP2");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(camGame,"camGame");
	HX_VISIT_MEMBER_NAME(camOther,"camOther");
	HX_VISIT_MEMBER_NAME(cameraSpeed,"cameraSpeed");
	HX_VISIT_MEMBER_NAME(songScore,"songScore");
	HX_VISIT_MEMBER_NAME(songHits,"songHits");
	HX_VISIT_MEMBER_NAME(songMisses,"songMisses");
	HX_VISIT_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_VISIT_MEMBER_NAME(timeTxt,"timeTxt");
	HX_VISIT_MEMBER_NAME(scoreTxtTween,"scoreTxtTween");
	HX_VISIT_MEMBER_NAME(defaultCamZoom,"defaultCamZoom");
	HX_VISIT_MEMBER_NAME(singAnimations,"singAnimations");
	HX_VISIT_MEMBER_NAME(inCutscene,"inCutscene");
	HX_VISIT_MEMBER_NAME(skipCountdown,"skipCountdown");
	HX_VISIT_MEMBER_NAME(songLength,"songLength");
	HX_VISIT_MEMBER_NAME(boyfriendCameraOffset,"boyfriendCameraOffset");
	HX_VISIT_MEMBER_NAME(opponentCameraOffset,"opponentCameraOffset");
	HX_VISIT_MEMBER_NAME(girlfriendCameraOffset,"girlfriendCameraOffset");
	HX_VISIT_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_VISIT_MEMBER_NAME(detailsText,"detailsText");
	HX_VISIT_MEMBER_NAME(detailsPausedText,"detailsPausedText");
	HX_VISIT_MEMBER_NAME(keysPressed,"keysPressed");
	HX_VISIT_MEMBER_NAME(boyfriendIdleTime,"boyfriendIdleTime");
	HX_VISIT_MEMBER_NAME(boyfriendIdled,"boyfriendIdled");
	HX_VISIT_MEMBER_NAME(luaArray,"luaArray");
	HX_VISIT_MEMBER_NAME(luaDebugGroup,"luaDebugGroup");
	HX_VISIT_MEMBER_NAME(introSoundsSuffix,"introSoundsSuffix");
	HX_VISIT_MEMBER_NAME(keysArray,"keysArray");
	HX_VISIT_MEMBER_NAME(songName,"songName");
	HX_VISIT_MEMBER_NAME(startCallback,"startCallback");
	HX_VISIT_MEMBER_NAME(endCallback,"endCallback");
	HX_VISIT_MEMBER_NAME(videoCutscene,"videoCutscene");
	HX_VISIT_MEMBER_NAME(dialogueCount,"dialogueCount");
	HX_VISIT_MEMBER_NAME(psychDialogue,"psychDialogue");
	HX_VISIT_MEMBER_NAME(startTimer,"startTimer");
	HX_VISIT_MEMBER_NAME(finishTimer,"finishTimer");
	HX_VISIT_MEMBER_NAME(countdownReady,"countdownReady");
	HX_VISIT_MEMBER_NAME(countdownSet,"countdownSet");
	HX_VISIT_MEMBER_NAME(countdownGo,"countdownGo");
	HX_VISIT_MEMBER_NAME(updateScore,"updateScore");
	HX_VISIT_MEMBER_NAME(updateScoreText,"updateScoreText");
	HX_VISIT_MEMBER_NAME(fullComboFunction,"fullComboFunction");
	HX_VISIT_MEMBER_NAME(noteTypes,"noteTypes");
	HX_VISIT_MEMBER_NAME(eventsPushed,"eventsPushed");
	HX_VISIT_MEMBER_NAME(totalColumns,"totalColumns");
	HX_VISIT_MEMBER_NAME(skipArrowStartTween,"skipArrowStartTween");
	HX_VISIT_MEMBER_NAME(canResync,"canResync");
	HX_VISIT_MEMBER_NAME(autoUpdateRPC,"autoUpdateRPC");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(canReset,"canReset");
	HX_VISIT_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_VISIT_MEMBER_NAME(canPause,"canPause");
	HX_VISIT_MEMBER_NAME(freezeCamera,"freezeCamera");
	HX_VISIT_MEMBER_NAME(allowDebugKeys,"allowDebugKeys");
	HX_VISIT_MEMBER_NAME(updateIconsScale,"updateIconsScale");
	HX_VISIT_MEMBER_NAME(updateIconsPosition,"updateIconsPosition");
	HX_VISIT_MEMBER_NAME(iconsAnimations,"iconsAnimations");
	HX_VISIT_MEMBER_NAME(isDead,"isDead");
	HX_VISIT_MEMBER_NAME(gameOverTimer,"gameOverTimer");
	HX_VISIT_MEMBER_NAME(cameraTwn,"cameraTwn");
	HX_VISIT_MEMBER_NAME(transitioning,"transitioning");
	HX_VISIT_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_VISIT_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_VISIT_MEMBER_NAME(showCombo,"showCombo");
	HX_VISIT_MEMBER_NAME(showComboNum,"showComboNum");
	HX_VISIT_MEMBER_NAME(showRating,"showRating");
	HX_VISIT_MEMBER_NAME(comboGroup,"comboGroup");
	HX_VISIT_MEMBER_NAME(uiGroup,"uiGroup");
	HX_VISIT_MEMBER_NAME(noteGroup,"noteGroup");
	HX_VISIT_MEMBER_NAME(strumsBlocked,"strumsBlocked");
	HX_VISIT_MEMBER_NAME(lastStepHit,"lastStepHit");
	HX_VISIT_MEMBER_NAME(lastBeatHit,"lastBeatHit");
	HX_VISIT_MEMBER_NAME(ratingName,"ratingName");
	HX_VISIT_MEMBER_NAME(ratingPercent,"ratingPercent");
	HX_VISIT_MEMBER_NAME(ratingFC,"ratingFC");
	HX_VISIT_MEMBER_NAME(runtimeShaders,"runtimeShaders");
	 ::backend::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { return ::hx::Val( gf ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { return ::hx::Val( dad ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"BF_X") ) { return ::hx::Val( BF_X ); }
		if (HX_FIELD_EQ(inName,"BF_Y") ) { return ::hx::Val( BF_Y ); }
		if (HX_FIELD_EQ(inName,"GF_X") ) { return ::hx::Val( GF_X ); }
		if (HX_FIELD_EQ(inName,"GF_Y") ) { return ::hx::Val( GF_Y ); }
		if (HX_FIELD_EQ(inName,"inst") ) { return ::hx::Val( inst ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"gfMap") ) { return ::hx::Val( gfMap ); }
		if (HX_FIELD_EQ(inName,"DAD_X") ) { return ::hx::Val( DAD_X ); }
		if (HX_FIELD_EQ(inName,"DAD_Y") ) { return ::hx::Val( DAD_Y ); }
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		if (HX_FIELD_EQ(inName,"combo") ) { return ::hx::Val( combo ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"dadMap") ) { return ::hx::Val( dadMap ); }
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"health") ) { return ::hx::Val( health ); }
		if (HX_FIELD_EQ(inName,"iconP1") ) { return ::hx::Val( iconP1 ); }
		if (HX_FIELD_EQ(inName,"iconP2") ) { return ::hx::Val( iconP2 ); }
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return ::hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"isDead") ) { return ::hx::Val( isDead ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfGroup") ) { return ::hx::Val( gfGroup ); }
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { return ::hx::Val( gfSpeed ); }
		if (HX_FIELD_EQ(inName,"timeBar") ) { return ::hx::Val( timeBar ); }
		if (HX_FIELD_EQ(inName,"camGame") ) { return ::hx::Val( camGame ); }
		if (HX_FIELD_EQ(inName,"timeTxt") ) { return ::hx::Val( timeTxt ); }
		if (HX_FIELD_EQ(inName,"onFocus") ) { return ::hx::Val( onFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"endSong") ) { return ::hx::Val( endSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"uiGroup") ) { return ::hx::Val( uiGroup ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dadGroup") ) { return ::hx::Val( dadGroup ); }
		if (HX_FIELD_EQ(inName,"camOther") ) { return ::hx::Val( camOther ); }
		if (HX_FIELD_EQ(inName,"songHits") ) { return ::hx::Val( songHits ); }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { return ::hx::Val( scoreTxt ); }
		if (HX_FIELD_EQ(inName,"luaArray") ) { return ::hx::Val( luaArray ); }
		if (HX_FIELD_EQ(inName,"songName") ) { return ::hx::Val( songName ); }
		if (HX_FIELD_EQ(inName,"resetRPC") ) { return ::hx::Val( resetRPC_dyn() ); }
		if (HX_FIELD_EQ(inName,"canReset") ) { return ::hx::Val( canReset ); }
		if (HX_FIELD_EQ(inName,"canPause") ) { return ::hx::Val( canPause ); }
		if (HX_FIELD_EQ(inName,"noteMiss") ) { return ::hx::Val( noteMiss_dyn() ); }
		if (HX_FIELD_EQ(inName,"ratingFC") ) { return ::hx::Val( ratingFC ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"songSpeed") ) { return ::hx::Val( songSpeed ); }
		if (HX_FIELD_EQ(inName,"spawnTime") ) { return ::hx::Val( spawnTime ); }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { return ::hx::Val( boyfriend ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"healthBar") ) { return ::hx::Val( healthBar ); }
		if (HX_FIELD_EQ(inName,"songScore") ) { return ::hx::Val( songScore ); }
		if (HX_FIELD_EQ(inName,"keysArray") ) { return ::hx::Val( keysArray ); }
		if (HX_FIELD_EQ(inName,"startSong") ) { return ::hx::Val( startSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"noteTypes") ) { return ::hx::Val( noteTypes ); }
		if (HX_FIELD_EQ(inName,"makeEvent") ) { return ::hx::Val( makeEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"canResync") ) { return ::hx::Val( canResync ); }
		if (HX_FIELD_EQ(inName,"cameraTwn") ) { return ::hx::Val( cameraTwn ); }
		if (HX_FIELD_EQ(inName,"KillNotes") ) { return ::hx::Val( KillNotes_dyn() ); }
		if (HX_FIELD_EQ(inName,"showCombo") ) { return ::hx::Val( showCombo ); }
		if (HX_FIELD_EQ(inName,"noteGroup") ) { return ::hx::Val( noteGroup ); }
		if (HX_FIELD_EQ(inName,"keysCheck") ) { return ::hx::Val( keysCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"setOnLuas") ) { return ::hx::Val( setOnLuas_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"eventNotes") ) { return ::hx::Val( eventNotes ); }
		if (HX_FIELD_EQ(inName,"camZooming") ) { return ::hx::Val( camZooming ); }
		if (HX_FIELD_EQ(inName,"endingSong") ) { return ::hx::Val( endingSong ); }
		if (HX_FIELD_EQ(inName,"updateTime") ) { return ::hx::Val( updateTime ); }
		if (HX_FIELD_EQ(inName,"healthGain") ) { return ::hx::Val( healthGain ); }
		if (HX_FIELD_EQ(inName,"healthLoss") ) { return ::hx::Val( healthLoss ); }
		if (HX_FIELD_EQ(inName,"botplayTxt") ) { return ::hx::Val( botplayTxt ); }
		if (HX_FIELD_EQ(inName,"songMisses") ) { return ::hx::Val( songMisses ); }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { return ::hx::Val( inCutscene ); }
		if (HX_FIELD_EQ(inName,"songLength") ) { return ::hx::Val( songLength ); }
		if (HX_FIELD_EQ(inName,"startVideo") ) { return ::hx::Val( startVideo_dyn() ); }
		if (HX_FIELD_EQ(inName,"startTimer") ) { return ::hx::Val( startTimer ); }
		if (HX_FIELD_EQ(inName,"doScoreBop") ) { return ::hx::Val( doScoreBop_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_health") ) { return ::hx::Val( set_health_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveCamera") ) { return ::hx::Val( moveCamera_dyn() ); }
		if (HX_FIELD_EQ(inName,"tweenCamIn") ) { return ::hx::Val( tweenCamIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"finishSong") ) { return ::hx::Val( finishSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"showRating") ) { return ::hx::Val( showRating ); }
		if (HX_FIELD_EQ(inName,"comboGroup") ) { return ::hx::Val( comboGroup ); }
		if (HX_FIELD_EQ(inName,"popUpScore") ) { return ::hx::Val( popUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyPress") ) { return ::hx::Val( onKeyPress_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyPressed") ) { return ::hx::Val( keyPressed_dyn() ); }
		if (HX_FIELD_EQ(inName,"sectionHit") ) { return ::hx::Val( sectionHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"callOnLuas") ) { return ::hx::Val( callOnLuas_dyn() ); }
		if (HX_FIELD_EQ(inName,"ratingName") ) { return ::hx::Val( ratingName ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"songPercent") ) { return ::hx::Val( songPercent ); }
		if (HX_FIELD_EQ(inName,"ratingsData") ) { return ::hx::Val( ratingsData ); }
		if (HX_FIELD_EQ(inName,"botplaySine") ) { return ::hx::Val( botplaySine ); }
		if (HX_FIELD_EQ(inName,"cameraSpeed") ) { return ::hx::Val( cameraSpeed ); }
		if (HX_FIELD_EQ(inName,"detailsText") ) { return ::hx::Val( detailsText ); }
		if (HX_FIELD_EQ(inName,"keysPressed") ) { return ::hx::Val( keysPressed ); }
		if (HX_FIELD_EQ(inName,"endCallback") ) { return ::hx::Val( endCallback ); }
		if (HX_FIELD_EQ(inName,"startAndEnd") ) { return ::hx::Val( startAndEnd_dyn() ); }
		if (HX_FIELD_EQ(inName,"finishTimer") ) { return ::hx::Val( finishTimer ); }
		if (HX_FIELD_EQ(inName,"countdownGo") ) { return ::hx::Val( countdownGo ); }
		if (HX_FIELD_EQ(inName,"addBehindGF") ) { return ::hx::Val( addBehindGF_dyn() ); }
		if (HX_FIELD_EQ(inName,"addBehindBF") ) { return ::hx::Val( addBehindBF_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateScore") ) { return ::hx::Val( updateScore ); }
		if (HX_FIELD_EQ(inName,"setSongTime") ) { return ::hx::Val( setSongTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"eventPushed") ) { return ::hx::Val( eventPushed_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return ::hx::Val( onFocusLost_dyn() ); }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { return ::hx::Val( totalPlayed ); }
		if (HX_FIELD_EQ(inName,"keyReleased") ) { return ::hx::Val( keyReleased_dyn() ); }
		if (HX_FIELD_EQ(inName,"goodNoteHit") ) { return ::hx::Val( goodNoteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"lastStepHit") ) { return ::hx::Val( lastStepHit ); }
		if (HX_FIELD_EQ(inName,"lastBeatHit") ) { return ::hx::Val( lastBeatHit ); }
		if (HX_FIELD_EQ(inName,"playerDance") ) { return ::hx::Val( playerDance_dyn() ); }
		if (HX_FIELD_EQ(inName,"initHScript") ) { return ::hx::Val( initHScript_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"boyfriendMap") ) { return ::hx::Val( boyfriendMap ); }
		if (HX_FIELD_EQ(inName,"hscriptArray") ) { return ::hx::Val( hscriptArray ); }
		if (HX_FIELD_EQ(inName,"playbackRate") ) { return ::hx::Val( playbackRate ); }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { return ::hx::Val( unspawnNotes ); }
		if (HX_FIELD_EQ(inName,"playerStrums") ) { return ::hx::Val( playerStrums ); }
		if (HX_FIELD_EQ(inName,"startingSong") ) { return ::hx::Val( startingSong ); }
		if (HX_FIELD_EQ(inName,"practiceMode") ) { return ::hx::Val( practiceMode ); }
		if (HX_FIELD_EQ(inName,"getLuaObject") ) { return ::hx::Val( getLuaObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"countdownSet") ) { return ::hx::Val( countdownSet ); }
		if (HX_FIELD_EQ(inName,"addBehindDad") ) { return ::hx::Val( addBehindDad_dyn() ); }
		if (HX_FIELD_EQ(inName,"skipDialogue") ) { return ::hx::Val( skipDialogue_dyn() ); }
		if (HX_FIELD_EQ(inName,"eventsPushed") ) { return ::hx::Val( eventsPushed ); }
		if (HX_FIELD_EQ(inName,"totalColumns") ) { return ::hx::Val( totalColumns ); }
		if (HX_FIELD_EQ(inName,"generateSong") ) { return ::hx::Val( generateSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"openSubState") ) { return ::hx::Val( openSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"resyncVocals") ) { return ::hx::Val( resyncVocals_dyn() ); }
		if (HX_FIELD_EQ(inName,"freezeCamera") ) { return ::hx::Val( freezeCamera ); }
		if (HX_FIELD_EQ(inName,"doDeathCheck") ) { return ::hx::Val( doDeathCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"triggerEvent") ) { return ::hx::Val( triggerEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"showComboNum") ) { return ::hx::Val( showComboNum ); }
		if (HX_FIELD_EQ(inName,"onKeyRelease") ) { return ::hx::Val( onKeyRelease_dyn() ); }
		if (HX_FIELD_EQ(inName,"setOnScripts") ) { return ::hx::Val( setOnScripts_dyn() ); }
		if (HX_FIELD_EQ(inName,"setOnHScript") ) { return ::hx::Val( setOnHScript_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"songSpeedType") ) { return ::hx::Val( songSpeedType ); }
		if (HX_FIELD_EQ(inName,"cpuControlled") ) { return ::hx::Val( cpuControlled ); }
		if (HX_FIELD_EQ(inName,"scoreTxtTween") ) { return ::hx::Val( scoreTxtTween ); }
		if (HX_FIELD_EQ(inName,"skipCountdown") ) { return ::hx::Val( skipCountdown ); }
		if (HX_FIELD_EQ(inName,"luaDebugGroup") ) { return ::hx::Val( luaDebugGroup ); }
		if (HX_FIELD_EQ(inName,"startCallback") ) { return ::hx::Val( startCallback ); }
		if (HX_FIELD_EQ(inName,"set_songSpeed") ) { return ::hx::Val( set_songSpeed_dyn() ); }
		if (HX_FIELD_EQ(inName,"videoCutscene") ) { return ::hx::Val( videoCutscene ); }
		if (HX_FIELD_EQ(inName,"dialogueCount") ) { return ::hx::Val( dialogueCount ); }
		if (HX_FIELD_EQ(inName,"psychDialogue") ) { return ::hx::Val( psychDialogue ); }
		if (HX_FIELD_EQ(inName,"startDialogue") ) { return ::hx::Val( startDialogue_dyn() ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"autoUpdateRPC") ) { return ::hx::Val( autoUpdateRPC ); }
		if (HX_FIELD_EQ(inName,"openPauseMenu") ) { return ::hx::Val( openPauseMenu_dyn() ); }
		if (HX_FIELD_EQ(inName,"gameOverTimer") ) { return ::hx::Val( gameOverTimer ); }
		if (HX_FIELD_EQ(inName,"transitioning") ) { return ::hx::Val( transitioning ); }
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { return ::hx::Val( totalNotesHit ); }
		if (HX_FIELD_EQ(inName,"strumsBlocked") ) { return ::hx::Val( strumsBlocked ); }
		if (HX_FIELD_EQ(inName,"noteMissPress") ) { return ::hx::Val( noteMissPress_dyn() ); }
		if (HX_FIELD_EQ(inName,"callOnScripts") ) { return ::hx::Val( callOnScripts_dyn() ); }
		if (HX_FIELD_EQ(inName,"callOnHScript") ) { return ::hx::Val( callOnHScript_dyn() ); }
		if (HX_FIELD_EQ(inName,"strumPlayAnim") ) { return ::hx::Val( strumPlayAnim_dyn() ); }
		if (HX_FIELD_EQ(inName,"ratingPercent") ) { return ::hx::Val( ratingPercent ); }
		if (HX_FIELD_EQ(inName,"initLuaShader") ) { return ::hx::Val( initLuaShader_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"songSpeedTween") ) { return ::hx::Val( songSpeedTween ); }
		if (HX_FIELD_EQ(inName,"noteKillOffset") ) { return ::hx::Val( noteKillOffset ); }
		if (HX_FIELD_EQ(inName,"boyfriendGroup") ) { return ::hx::Val( boyfriendGroup ); }
		if (HX_FIELD_EQ(inName,"opponentVocals") ) { return ::hx::Val( opponentVocals ); }
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { return ::hx::Val( strumLineNotes ); }
		if (HX_FIELD_EQ(inName,"opponentStrums") ) { return ::hx::Val( opponentStrums ); }
		if (HX_FIELD_EQ(inName,"camZoomingMult") ) { return ::hx::Val( camZoomingMult ); }
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { return ::hx::Val( generatedMusic ); }
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { return ::hx::Val( defaultCamZoom ); }
		if (HX_FIELD_EQ(inName,"singAnimations") ) { return ::hx::Val( singAnimations ); }
		if (HX_FIELD_EQ(inName,"boyfriendIdled") ) { return ::hx::Val( boyfriendIdled ); }
		if (HX_FIELD_EQ(inName,"addTextToDebug") ) { return ::hx::Val( addTextToDebug_dyn() ); }
		if (HX_FIELD_EQ(inName,"countdownReady") ) { return ::hx::Val( countdownReady ); }
		if (HX_FIELD_EQ(inName,"cacheCountdown") ) { return ::hx::Val( cacheCountdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"startCountdown") ) { return ::hx::Val( startCountdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"allowDebugKeys") ) { return ::hx::Val( allowDebugKeys ); }
		if (HX_FIELD_EQ(inName,"checkEventNote") ) { return ::hx::Val( checkEventNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"noteMissCommon") ) { return ::hx::Val( noteMissCommon_dyn() ); }
		if (HX_FIELD_EQ(inName,"invalidateNote") ) { return ::hx::Val( invalidateNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"startLuasNamed") ) { return ::hx::Val( startLuasNamed_dyn() ); }
		if (HX_FIELD_EQ(inName,"runtimeShaders") ) { return ::hx::Val( runtimeShaders ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"grpNoteSplashes") ) { return ::hx::Val( grpNoteSplashes ); }
		if (HX_FIELD_EQ(inName,"camZoomingDecay") ) { return ::hx::Val( camZoomingDecay ); }
		if (HX_FIELD_EQ(inName,"instakillOnMiss") ) { return ::hx::Val( instakillOnMiss ); }
		if (HX_FIELD_EQ(inName,"pressMissDamage") ) { return ::hx::Val( pressMissDamage ); }
		if (HX_FIELD_EQ(inName,"updateScoreText") ) { return ::hx::Val( updateScoreText ); }
		if (HX_FIELD_EQ(inName,"iconsAnimations") ) { return ::hx::Val( iconsAnimations ); }
		if (HX_FIELD_EQ(inName,"openChartEditor") ) { return ::hx::Val( openChartEditor_dyn() ); }
		if (HX_FIELD_EQ(inName,"cachePopUpScore") ) { return ::hx::Val( cachePopUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"opponentNoteHit") ) { return ::hx::Val( opponentNoteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"spawnNoteSplash") ) { return ::hx::Val( spawnNoteSplash_dyn() ); }
		if (HX_FIELD_EQ(inName,"characterBopper") ) { return ::hx::Val( characterBopper_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"set_playbackRate") ) { return ::hx::Val( set_playbackRate_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearNotesBefore") ) { return ::hx::Val( clearNotesBefore_dyn() ); }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { return ::hx::Val( startedCountdown ); }
		if (HX_FIELD_EQ(inName,"updateIconsScale") ) { return ::hx::Val( updateIconsScale ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { return ::hx::Val( detailsPausedText ); }
		if (HX_FIELD_EQ(inName,"boyfriendIdleTime") ) { return ::hx::Val( boyfriendIdleTime ); }
		if (HX_FIELD_EQ(inName,"introSoundsSuffix") ) { return ::hx::Val( introSoundsSuffix ); }
		if (HX_FIELD_EQ(inName,"startCharacterPos") ) { return ::hx::Val( startCharacterPos_dyn() ); }
		if (HX_FIELD_EQ(inName,"fullComboFunction") ) { return ::hx::Val( fullComboFunction ); }
		if (HX_FIELD_EQ(inName,"startNextDialogue") ) { return ::hx::Val( startNextDialogue_dyn() ); }
		if (HX_FIELD_EQ(inName,"eventPushedUnique") ) { return ::hx::Val( eventPushedUnique_dyn() ); }
		if (HX_FIELD_EQ(inName,"eventEarlyTrigger") ) { return ::hx::Val( eventEarlyTrigger_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveCameraSection") ) { return ::hx::Val( moveCameraSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"RecalculateRating") ) { return ::hx::Val( RecalculateRating_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"guitarHeroSustains") ) { return ::hx::Val( guitarHeroSustains ); }
		if (HX_FIELD_EQ(inName,"addCharacterToList") ) { return ::hx::Val( addCharacterToList_dyn() ); }
		if (HX_FIELD_EQ(inName,"startHScriptsNamed") ) { return ::hx::Val( startHScriptsNamed_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"isCameraOnForcedPos") ) { return ::hx::Val( isCameraOnForcedPos ); }
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { return ::hx::Val( storyDifficultyText ); }
		if (HX_FIELD_EQ(inName,"skipArrowStartTween") ) { return ::hx::Val( skipArrowStartTween ); }
		if (HX_FIELD_EQ(inName,"updateIconsPosition") ) { return ::hx::Val( updateIconsPosition ); }
		if (HX_FIELD_EQ(inName,"openCharacterEditor") ) { return ::hx::Val( openCharacterEditor_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkForAchievement") ) { return ::hx::Val( checkForAchievement_dyn() ); }
		if (HX_FIELD_EQ(inName,"createRuntimeShader") ) { return ::hx::Val( createRuntimeShader_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"opponentCameraOffset") ) { return ::hx::Val( opponentCameraOffset ); }
		if (HX_FIELD_EQ(inName,"generateStaticArrows") ) { return ::hx::Val( generateStaticArrows_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"boyfriendCameraOffset") ) { return ::hx::Val( boyfriendCameraOffset ); }
		if (HX_FIELD_EQ(inName,"reloadHealthBarColors") ) { return ::hx::Val( reloadHealthBarColors_dyn() ); }
		if (HX_FIELD_EQ(inName,"startCharacterScripts") ) { return ::hx::Val( startCharacterScripts_dyn() ); }
		if (HX_FIELD_EQ(inName,"createCountdownSprite") ) { return ::hx::Val( createCountdownSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"spawnNoteSplashOnNote") ) { return ::hx::Val( spawnNoteSplashOnNote_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"girlfriendCameraOffset") ) { return ::hx::Val( girlfriendCameraOffset ); }
		if (HX_FIELD_EQ(inName,"moveCameraToGirlfriend") ) { return ::hx::Val( moveCameraToGirlfriend_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { outValue = ( SONG ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"STRUM_X") ) { outValue = ( STRUM_X ); return true; }
		if (HX_FIELD_EQ(inName,"stageUI") ) { outValue = ( stageUI ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curStage") ) { outValue = ( curStage ); return true; }
		if (HX_FIELD_EQ(inName,"uiPrefix") ) { outValue = ( uiPrefix ); return true; }
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"uiPostfix") ) { outValue = ( uiPostfix ); return true; }
		if (HX_FIELD_EQ(inName,"storyWeek") ) { outValue = ( storyWeek ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sortByTime") ) { outValue = sortByTime_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"ratingStuff") ) { outValue = ( ratingStuff ); return true; }
		if (HX_FIELD_EQ(inName,"set_stageUI") ) { outValue = set_stageUI_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { outValue = ( isStoryMode ); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { outValue = ( daPixelZoom ); return true; }
		if (HX_FIELD_EQ(inName,"startOnTime") ) { outValue = ( startOnTime ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isPixelStage") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_isPixelStage() ); return true; } }
		if (HX_FIELD_EQ(inName,"chartingMode") ) { outValue = ( chartingMode ); return true; }
		if (HX_FIELD_EQ(inName,"seenCutscene") ) { outValue = ( seenCutscene ); return true; }
		if (HX_FIELD_EQ(inName,"deathCounter") ) { outValue = ( deathCounter ); return true; }
		if (HX_FIELD_EQ(inName,"sortHitNotes") ) { outValue = sortHitNotes_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { outValue = ( storyPlaylist ); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { outValue = ( prevCamFollow ); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { outValue = ( campaignScore ); return true; }
		if (HX_FIELD_EQ(inName,"nextReloadAll") ) { outValue = ( nextReloadAll ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"campaignMisses") ) { outValue = ( campaignMisses ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { outValue = ( storyDifficulty ); return true; }
		if (HX_FIELD_EQ(inName,"getKeyFromEvent") ) { outValue = getKeyFromEvent_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_isPixelStage") ) { outValue = get_isPixelStage_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"changedDifficulty") ) { outValue = ( changedDifficulty ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"STRUM_X_MIDDLESCROLL") ) { outValue = ( STRUM_X_MIDDLESCROLL ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"_lastLoadedModDirectory") ) { outValue = ( _lastLoadedModDirectory ); return true; }
	}
	return false;
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { gf=inValue.Cast<  ::objects::Character >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { dad=inValue.Cast<  ::objects::Character >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"BF_X") ) { BF_X=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BF_Y") ) { BF_Y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GF_X") ) { GF_X=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GF_Y") ) { GF_Y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inst") ) { inst=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"gfMap") ) { gfMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DAD_X") ) { DAD_X=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DAD_Y") ) { DAD_Y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"combo") ) { combo=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"dadMap") ) { dadMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"health") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_health(inValue.Cast< Float >()) );health=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP1") ) { iconP1=inValue.Cast<  ::objects::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP2") ) { iconP2=inValue.Cast<  ::objects::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isDead") ) { isDead=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfGroup") ) { gfGroup=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { gfSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeBar") ) { timeBar=inValue.Cast<  ::objects::Bar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeTxt") ) { timeTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uiGroup") ) { uiGroup=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dadGroup") ) { dadGroup=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camOther") ) { camOther=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songHits") ) { songHits=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { scoreTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"luaArray") ) { luaArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songName") ) { songName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canReset") ) { canReset=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canPause") ) { canPause=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratingFC") ) { ratingFC=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"songSpeed") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_songSpeed(inValue.Cast< Float >()) );songSpeed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spawnTime") ) { spawnTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { boyfriend=inValue.Cast<  ::objects::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBar") ) { healthBar=inValue.Cast<  ::objects::Bar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songScore") ) { songScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysArray") ) { keysArray=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteTypes") ) { noteTypes=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canResync") ) { canResync=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cameraTwn") ) { cameraTwn=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showCombo") ) { showCombo=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteGroup") ) { noteGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"eventNotes") ) { eventNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camZooming") ) { camZooming=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endingSong") ) { endingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateTime") ) { updateTime=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthGain") ) { healthGain=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthLoss") ) { healthLoss=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"botplayTxt") ) { botplayTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songMisses") ) { songMisses=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { inCutscene=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songLength") ) { songLength=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startTimer") ) { startTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showRating") ) { showRating=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboGroup") ) { comboGroup=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratingName") ) { ratingName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"songPercent") ) { songPercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratingsData") ) { ratingsData=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"botplaySine") ) { botplaySine=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cameraSpeed") ) { cameraSpeed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"detailsText") ) { detailsText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysPressed") ) { keysPressed=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endCallback") ) { endCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"finishTimer") ) { finishTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"countdownGo") ) { countdownGo=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateScore") ) { updateScore=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { totalPlayed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastStepHit") ) { lastStepHit=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastBeatHit") ) { lastBeatHit=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"boyfriendMap") ) { boyfriendMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hscriptArray") ) { hscriptArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playbackRate") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_playbackRate(inValue.Cast< Float >()) );playbackRate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { unspawnNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playerStrums") ) { playerStrums=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startingSong") ) { startingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"practiceMode") ) { practiceMode=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"countdownSet") ) { countdownSet=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventsPushed") ) { eventsPushed=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalColumns") ) { totalColumns=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"freezeCamera") ) { freezeCamera=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showComboNum") ) { showComboNum=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"songSpeedType") ) { songSpeedType=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cpuControlled") ) { cpuControlled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreTxtTween") ) { scoreTxtTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipCountdown") ) { skipCountdown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"luaDebugGroup") ) { luaDebugGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startCallback") ) { startCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"videoCutscene") ) { videoCutscene=inValue.Cast<  ::objects::VideoSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogueCount") ) { dialogueCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"psychDialogue") ) { psychDialogue=inValue.Cast<  ::cutscenes::DialogueBoxPsych >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoUpdateRPC") ) { autoUpdateRPC=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gameOverTimer") ) { gameOverTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"transitioning") ) { transitioning=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { totalNotesHit=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumsBlocked") ) { strumsBlocked=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratingPercent") ) { ratingPercent=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"songSpeedTween") ) { songSpeedTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteKillOffset") ) { noteKillOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boyfriendGroup") ) { boyfriendGroup=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opponentVocals") ) { opponentVocals=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { strumLineNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opponentStrums") ) { opponentStrums=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camZoomingMult") ) { camZoomingMult=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { generatedMusic=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { defaultCamZoom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"singAnimations") ) { singAnimations=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boyfriendIdled") ) { boyfriendIdled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"countdownReady") ) { countdownReady=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowDebugKeys") ) { allowDebugKeys=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"runtimeShaders") ) { runtimeShaders=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"grpNoteSplashes") ) { grpNoteSplashes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camZoomingDecay") ) { camZoomingDecay=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"instakillOnMiss") ) { instakillOnMiss=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pressMissDamage") ) { pressMissDamage=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateScoreText") ) { updateScoreText=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconsAnimations") ) { iconsAnimations=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { startedCountdown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateIconsScale") ) { updateIconsScale=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { detailsPausedText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boyfriendIdleTime") ) { boyfriendIdleTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"introSoundsSuffix") ) { introSoundsSuffix=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fullComboFunction") ) { fullComboFunction=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"guitarHeroSustains") ) { guitarHeroSustains=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"isCameraOnForcedPos") ) { isCameraOnForcedPos=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { storyDifficultyText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipArrowStartTween") ) { skipArrowStartTween=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateIconsPosition") ) { updateIconsPosition=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"opponentCameraOffset") ) { opponentCameraOffset=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"boyfriendCameraOffset") ) { boyfriendCameraOffset=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"girlfriendCameraOffset") ) { girlfriendCameraOffset=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { SONG=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"STRUM_X") ) { STRUM_X=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"stageUI") ) { if (inCallProp == ::hx::paccAlways)  ioValue = ( set_stageUI(ioValue.Cast< ::String >()) ); else stageUI=ioValue.Cast< ::String >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curStage") ) { curStage=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"uiPrefix") ) { uiPrefix=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::states::PlayState >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"uiPostfix") ) { uiPostfix=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"storyWeek") ) { storyWeek=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"ratingStuff") ) { ratingStuff=ioValue.Cast< ::cpp::VirtualArray >(); return true; }
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { isStoryMode=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { daPixelZoom=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"startOnTime") ) { startOnTime=ioValue.Cast< Float >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"chartingMode") ) { chartingMode=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"seenCutscene") ) { seenCutscene=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"deathCounter") ) { deathCounter=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { storyPlaylist=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { prevCamFollow=ioValue.Cast<  ::flixel::FlxObject >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { campaignScore=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"nextReloadAll") ) { nextReloadAll=ioValue.Cast< bool >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"campaignMisses") ) { campaignMisses=ioValue.Cast< int >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { storyDifficulty=ioValue.Cast< int >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"changedDifficulty") ) { changedDifficulty=ioValue.Cast< bool >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"STRUM_X_MIDDLESCROLL") ) { STRUM_X_MIDDLESCROLL=ioValue.Cast< int >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"_lastLoadedModDirectory") ) { _lastLoadedModDirectory=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("isCameraOnForcedPos",ed,e7,4d,ae));
	outFields->push(HX_("boyfriendMap",52,d7,52,7c));
	outFields->push(HX_("dadMap",95,72,e2,17));
	outFields->push(HX_("gfMap",bd,45,ec,91));
	outFields->push(HX_("hscriptArray",26,50,33,a7));
	outFields->push(HX_("BF_X",dd,85,d5,2b));
	outFields->push(HX_("BF_Y",de,85,d5,2b));
	outFields->push(HX_("DAD_X",00,3d,6a,52));
	outFields->push(HX_("DAD_Y",01,3d,6a,52));
	outFields->push(HX_("GF_X",f8,96,23,2f));
	outFields->push(HX_("GF_Y",f9,96,23,2f));
	outFields->push(HX_("songSpeedTween",99,fd,00,0f));
	outFields->push(HX_("songSpeed",72,df,e3,b0));
	outFields->push(HX_("songSpeedType",4c,9f,4f,95));
	outFields->push(HX_("noteKillOffset",63,b4,6d,a3));
	outFields->push(HX_("playbackRate",9b,3a,8b,c0));
	outFields->push(HX_("boyfriendGroup",75,99,09,ef));
	outFields->push(HX_("dadGroup",78,cb,28,42));
	outFields->push(HX_("gfGroup",a0,b8,ab,b0));
	outFields->push(HX_("spawnTime",e8,cf,87,ac));
	outFields->push(HX_("inst",c6,43,bb,45));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("opponentVocals",db,d1,18,64));
	outFields->push(HX_("dad",47,36,4c,00));
	outFields->push(HX_("gf",1f,5a,00,00));
	outFields->push(HX_("boyfriend",6a,29,b8,e6));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("unspawnNotes",9f,67,f2,45));
	outFields->push(HX_("eventNotes",c7,e5,25,1c));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("strumLineNotes",24,f1,48,a4));
	outFields->push(HX_("opponentStrums",87,04,01,1c));
	outFields->push(HX_("playerStrums",4b,e1,2a,0d));
	outFields->push(HX_("grpNoteSplashes",2c,f3,de,7b));
	outFields->push(HX_("camZooming",60,3b,bf,d6));
	outFields->push(HX_("camZoomingMult",70,ff,2e,c0));
	outFields->push(HX_("camZoomingDecay",ba,fb,ba,2f));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("gfSpeed",e8,9c,20,98));
	outFields->push(HX_("health",9c,28,06,fd));
	outFields->push(HX_("combo",4e,28,5d,4a));
	outFields->push(HX_("healthBar",97,8a,92,42));
	outFields->push(HX_("timeBar",c6,e3,d4,d8));
	outFields->push(HX_("songPercent",70,03,67,31));
	outFields->push(HX_("ratingsData",00,fb,a3,bb));
	outFields->push(HX_("generatedMusic",96,8a,5d,71));
	outFields->push(HX_("endingSong",5c,73,d7,67));
	outFields->push(HX_("startingSong",b5,31,61,33));
	outFields->push(HX_("updateTime",b6,b6,b1,05));
	outFields->push(HX_("healthGain",3b,c3,f4,00));
	outFields->push(HX_("healthLoss",9f,7c,4d,04));
	outFields->push(HX_("guitarHeroSustains",74,ae,d8,47));
	outFields->push(HX_("instakillOnMiss",94,43,20,66));
	outFields->push(HX_("cpuControlled",d6,1f,47,9e));
	outFields->push(HX_("practiceMode",be,79,8f,7f));
	outFields->push(HX_("pressMissDamage",ee,b5,cf,de));
	outFields->push(HX_("botplaySine",68,97,39,87));
	outFields->push(HX_("botplayTxt",b5,49,12,88));
	outFields->push(HX_("iconP1",9a,bd,d6,45));
	outFields->push(HX_("iconP2",9b,bd,d6,45));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("camGame",a1,47,50,cf));
	outFields->push(HX_("camOther",41,4c,ae,3e));
	outFields->push(HX_("cameraSpeed",a2,8a,af,75));
	outFields->push(HX_("songScore",3d,bb,53,a8));
	outFields->push(HX_("songHits",35,a1,e6,32));
	outFields->push(HX_("songMisses",1f,08,d9,b1));
	outFields->push(HX_("scoreTxt",3e,12,c4,0e));
	outFields->push(HX_("timeTxt",63,a0,e2,d8));
	outFields->push(HX_("scoreTxtTween",4d,27,f9,cd));
	outFields->push(HX_("defaultCamZoom",01,50,2a,0b));
	outFields->push(HX_("singAnimations",1e,68,5b,a3));
	outFields->push(HX_("inCutscene",8f,21,01,56));
	outFields->push(HX_("skipCountdown",32,d2,d1,d7));
	outFields->push(HX_("songLength",9b,3a,8c,fa));
	outFields->push(HX_("boyfriendCameraOffset",a2,48,c6,c1));
	outFields->push(HX_("opponentCameraOffset",55,d9,b7,ff));
	outFields->push(HX_("girlfriendCameraOffset",f2,e8,79,8a));
	outFields->push(HX_("storyDifficultyText",5d,4b,db,c2));
	outFields->push(HX_("detailsText",8f,5e,84,21));
	outFields->push(HX_("detailsPausedText",dd,4f,70,44));
	outFields->push(HX_("keysPressed",0e,ff,53,27));
	outFields->push(HX_("boyfriendIdleTime",cb,18,1d,7c));
	outFields->push(HX_("boyfriendIdled",06,71,93,0c));
	outFields->push(HX_("luaArray",c1,48,f2,a3));
	outFields->push(HX_("luaDebugGroup",c4,37,82,dd));
	outFields->push(HX_("introSoundsSuffix",41,f3,b4,4c));
	outFields->push(HX_("keysArray",05,67,3a,17));
	outFields->push(HX_("songName",c0,d0,d7,36));
	outFields->push(HX_("videoCutscene",25,60,e8,9c));
	outFields->push(HX_("dialogueCount",97,10,4a,e5));
	outFields->push(HX_("psychDialogue",73,c5,7a,86));
	outFields->push(HX_("startTimer",03,98,4c,2c));
	outFields->push(HX_("finishTimer",72,e2,3a,37));
	outFields->push(HX_("countdownReady",f2,9d,1b,12));
	outFields->push(HX_("countdownSet",71,c7,ba,2b));
	outFields->push(HX_("countdownGo",39,dd,2f,3e));
	outFields->push(HX_("noteTypes",27,bb,58,58));
	outFields->push(HX_("eventsPushed",b2,b0,e9,17));
	outFields->push(HX_("totalColumns",79,41,58,9c));
	outFields->push(HX_("skipArrowStartTween",13,8e,1f,fa));
	outFields->push(HX_("canResync",be,c7,cd,5a));
	outFields->push(HX_("autoUpdateRPC",ed,be,35,64));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("canReset",9f,8b,5b,55));
	outFields->push(HX_("startedCountdown",30,57,28,9b));
	outFields->push(HX_("canPause",c6,18,eb,2b));
	outFields->push(HX_("freezeCamera",5c,20,14,42));
	outFields->push(HX_("allowDebugKeys",1e,68,d7,fc));
	outFields->push(HX_("iconsAnimations",69,b0,aa,40));
	outFields->push(HX_("isDead",ae,13,cd,5f));
	outFields->push(HX_("gameOverTimer",7f,2b,da,cb));
	outFields->push(HX_("cameraTwn",e6,d3,33,3a));
	outFields->push(HX_("transitioning",6d,6a,93,94));
	outFields->push(HX_("totalPlayed",37,de,ee,fd));
	outFields->push(HX_("totalNotesHit",76,f4,57,a6));
	outFields->push(HX_("showCombo",11,8e,c1,78));
	outFields->push(HX_("showComboNum",b5,68,a3,9d));
	outFields->push(HX_("showRating",fa,d8,fe,24));
	outFields->push(HX_("comboGroup",11,20,ea,a7));
	outFields->push(HX_("uiGroup",4b,4c,ea,29));
	outFields->push(HX_("noteGroup",ed,fd,81,d7));
	outFields->push(HX_("strumsBlocked",02,35,0d,fa));
	outFields->push(HX_("lastStepHit",b1,62,ed,35));
	outFields->push(HX_("lastBeatHit",c7,9e,b0,28));
	outFields->push(HX_("ratingName",08,a5,2b,05));
	outFields->push(HX_("ratingPercent",28,0c,c7,29));
	outFields->push(HX_("ratingFC",9a,72,95,59));
	outFields->push(HX_("runtimeShaders",b6,bf,45,a4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(PlayState_obj,isCameraOnForcedPos),HX_("isCameraOnForcedPos",ed,e7,4d,ae)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,boyfriendMap),HX_("boyfriendMap",52,d7,52,7c)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,dadMap),HX_("dadMap",95,72,e2,17)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,gfMap),HX_("gfMap",bd,45,ec,91)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,hscriptArray),HX_("hscriptArray",26,50,33,a7)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,BF_X),HX_("BF_X",dd,85,d5,2b)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,BF_Y),HX_("BF_Y",de,85,d5,2b)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,DAD_X),HX_("DAD_X",00,3d,6a,52)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,DAD_Y),HX_("DAD_Y",01,3d,6a,52)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,GF_X),HX_("GF_X",f8,96,23,2f)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,GF_Y),HX_("GF_Y",f9,96,23,2f)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,songSpeedTween),HX_("songSpeedTween",99,fd,00,0f)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songSpeed),HX_("songSpeed",72,df,e3,b0)},
	{::hx::fsString,(int)offsetof(PlayState_obj,songSpeedType),HX_("songSpeedType",4c,9f,4f,95)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,noteKillOffset),HX_("noteKillOffset",63,b4,6d,a3)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,playbackRate),HX_("playbackRate",9b,3a,8b,c0)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(PlayState_obj,boyfriendGroup),HX_("boyfriendGroup",75,99,09,ef)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(PlayState_obj,dadGroup),HX_("dadGroup",78,cb,28,42)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(PlayState_obj,gfGroup),HX_("gfGroup",a0,b8,ab,b0)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,spawnTime),HX_("spawnTime",e8,cf,87,ac)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(PlayState_obj,inst),HX_("inst",c6,43,bb,45)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(PlayState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(PlayState_obj,opponentVocals),HX_("opponentVocals",db,d1,18,64)},
	{::hx::fsObject /*  ::objects::Character */ ,(int)offsetof(PlayState_obj,dad),HX_("dad",47,36,4c,00)},
	{::hx::fsObject /*  ::objects::Character */ ,(int)offsetof(PlayState_obj,gf),HX_("gf",1f,5a,00,00)},
	{::hx::fsObject /*  ::objects::Character */ ,(int)offsetof(PlayState_obj,boyfriend),HX_("boyfriend",6a,29,b8,e6)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,unspawnNotes),HX_("unspawnNotes",9f,67,f2,45)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,eventNotes),HX_("eventNotes",c7,e5,25,1c)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(PlayState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,strumLineNotes),HX_("strumLineNotes",24,f1,48,a4)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,opponentStrums),HX_("opponentStrums",87,04,01,1c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,playerStrums),HX_("playerStrums",4b,e1,2a,0d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,grpNoteSplashes),HX_("grpNoteSplashes",2c,f3,de,7b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,camZooming),HX_("camZooming",60,3b,bf,d6)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,camZoomingMult),HX_("camZoomingMult",70,ff,2e,c0)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,camZoomingDecay),HX_("camZoomingDecay",ba,fb,ba,2f)},
	{::hx::fsString,(int)offsetof(PlayState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,gfSpeed),HX_("gfSpeed",e8,9c,20,98)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,health),HX_("health",9c,28,06,fd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,combo),HX_("combo",4e,28,5d,4a)},
	{::hx::fsObject /*  ::objects::Bar */ ,(int)offsetof(PlayState_obj,healthBar),HX_("healthBar",97,8a,92,42)},
	{::hx::fsObject /*  ::objects::Bar */ ,(int)offsetof(PlayState_obj,timeBar),HX_("timeBar",c6,e3,d4,d8)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songPercent),HX_("songPercent",70,03,67,31)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,ratingsData),HX_("ratingsData",00,fb,a3,bb)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,generatedMusic),HX_("generatedMusic",96,8a,5d,71)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,endingSong),HX_("endingSong",5c,73,d7,67)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startingSong),HX_("startingSong",b5,31,61,33)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,updateTime),HX_("updateTime",b6,b6,b1,05)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,healthGain),HX_("healthGain",3b,c3,f4,00)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,healthLoss),HX_("healthLoss",9f,7c,4d,04)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,guitarHeroSustains),HX_("guitarHeroSustains",74,ae,d8,47)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,instakillOnMiss),HX_("instakillOnMiss",94,43,20,66)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,cpuControlled),HX_("cpuControlled",d6,1f,47,9e)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,practiceMode),HX_("practiceMode",be,79,8f,7f)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,pressMissDamage),HX_("pressMissDamage",ee,b5,cf,de)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,botplaySine),HX_("botplaySine",68,97,39,87)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,botplayTxt),HX_("botplayTxt",b5,49,12,88)},
	{::hx::fsObject /*  ::objects::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP1),HX_("iconP1",9a,bd,d6,45)},
	{::hx::fsObject /*  ::objects::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP2),HX_("iconP2",9b,bd,d6,45)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camGame),HX_("camGame",a1,47,50,cf)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camOther),HX_("camOther",41,4c,ae,3e)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,cameraSpeed),HX_("cameraSpeed",a2,8a,af,75)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songScore),HX_("songScore",3d,bb,53,a8)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songHits),HX_("songHits",35,a1,e6,32)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songMisses),HX_("songMisses",1f,08,d9,b1)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,scoreTxt),HX_("scoreTxt",3e,12,c4,0e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,timeTxt),HX_("timeTxt",63,a0,e2,d8)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,scoreTxtTween),HX_("scoreTxtTween",4d,27,f9,cd)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,defaultCamZoom),HX_("defaultCamZoom",01,50,2a,0b)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,singAnimations),HX_("singAnimations",1e,68,5b,a3)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,inCutscene),HX_("inCutscene",8f,21,01,56)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,skipCountdown),HX_("skipCountdown",32,d2,d1,d7)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songLength),HX_("songLength",9b,3a,8c,fa)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PlayState_obj,boyfriendCameraOffset),HX_("boyfriendCameraOffset",a2,48,c6,c1)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PlayState_obj,opponentCameraOffset),HX_("opponentCameraOffset",55,d9,b7,ff)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PlayState_obj,girlfriendCameraOffset),HX_("girlfriendCameraOffset",f2,e8,79,8a)},
	{::hx::fsString,(int)offsetof(PlayState_obj,storyDifficultyText),HX_("storyDifficultyText",5d,4b,db,c2)},
	{::hx::fsString,(int)offsetof(PlayState_obj,detailsText),HX_("detailsText",8f,5e,84,21)},
	{::hx::fsString,(int)offsetof(PlayState_obj,detailsPausedText),HX_("detailsPausedText",dd,4f,70,44)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(PlayState_obj,keysPressed),HX_("keysPressed",0e,ff,53,27)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,boyfriendIdleTime),HX_("boyfriendIdleTime",cb,18,1d,7c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,boyfriendIdled),HX_("boyfriendIdled",06,71,93,0c)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,luaArray),HX_("luaArray",c1,48,f2,a3)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,luaDebugGroup),HX_("luaDebugGroup",c4,37,82,dd)},
	{::hx::fsString,(int)offsetof(PlayState_obj,introSoundsSuffix),HX_("introSoundsSuffix",41,f3,b4,4c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,keysArray),HX_("keysArray",05,67,3a,17)},
	{::hx::fsString,(int)offsetof(PlayState_obj,songName),HX_("songName",c0,d0,d7,36)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,startCallback),HX_("startCallback",47,fc,c1,83)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,endCallback),HX_("endCallback",c0,2c,c5,36)},
	{::hx::fsObject /*  ::objects::VideoSprite */ ,(int)offsetof(PlayState_obj,videoCutscene),HX_("videoCutscene",25,60,e8,9c)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,dialogueCount),HX_("dialogueCount",97,10,4a,e5)},
	{::hx::fsObject /*  ::cutscenes::DialogueBoxPsych */ ,(int)offsetof(PlayState_obj,psychDialogue),HX_("psychDialogue",73,c5,7a,86)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(PlayState_obj,startTimer),HX_("startTimer",03,98,4c,2c)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(PlayState_obj,finishTimer),HX_("finishTimer",72,e2,3a,37)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,countdownReady),HX_("countdownReady",f2,9d,1b,12)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,countdownSet),HX_("countdownSet",71,c7,ba,2b)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,countdownGo),HX_("countdownGo",39,dd,2f,3e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,updateScore),HX_("updateScore",89,dc,71,5e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,updateScoreText),HX_("updateScoreText",d6,4d,48,2c)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,fullComboFunction),HX_("fullComboFunction",77,e6,b6,d4)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,noteTypes),HX_("noteTypes",27,bb,58,58)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,eventsPushed),HX_("eventsPushed",b2,b0,e9,17)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,totalColumns),HX_("totalColumns",79,41,58,9c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,skipArrowStartTween),HX_("skipArrowStartTween",13,8e,1f,fa)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canResync),HX_("canResync",be,c7,cd,5a)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,autoUpdateRPC),HX_("autoUpdateRPC",ed,be,35,64)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,paused),HX_("paused",ae,40,84,ef)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canReset),HX_("canReset",9f,8b,5b,55)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedCountdown),HX_("startedCountdown",30,57,28,9b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canPause),HX_("canPause",c6,18,eb,2b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,freezeCamera),HX_("freezeCamera",5c,20,14,42)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,allowDebugKeys),HX_("allowDebugKeys",1e,68,d7,fc)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,updateIconsScale),HX_("updateIconsScale",b9,d4,f1,6d)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,updateIconsPosition),HX_("updateIconsPosition",da,61,10,84)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,iconsAnimations),HX_("iconsAnimations",69,b0,aa,40)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,isDead),HX_("isDead",ae,13,cd,5f)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(PlayState_obj,gameOverTimer),HX_("gameOverTimer",7f,2b,da,cb)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,cameraTwn),HX_("cameraTwn",e6,d3,33,3a)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,transitioning),HX_("transitioning",6d,6a,93,94)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,totalPlayed),HX_("totalPlayed",37,de,ee,fd)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,totalNotesHit),HX_("totalNotesHit",76,f4,57,a6)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,showCombo),HX_("showCombo",11,8e,c1,78)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,showComboNum),HX_("showComboNum",b5,68,a3,9d)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,showRating),HX_("showRating",fa,d8,fe,24)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(PlayState_obj,comboGroup),HX_("comboGroup",11,20,ea,a7)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(PlayState_obj,uiGroup),HX_("uiGroup",4b,4c,ea,29)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,noteGroup),HX_("noteGroup",ed,fd,81,d7)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(PlayState_obj,strumsBlocked),HX_("strumsBlocked",02,35,0d,fa)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lastStepHit),HX_("lastStepHit",b1,62,ed,35)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lastBeatHit),HX_("lastBeatHit",c7,9e,b0,28)},
	{::hx::fsString,(int)offsetof(PlayState_obj,ratingName),HX_("ratingName",08,a5,2b,05)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,ratingPercent),HX_("ratingPercent",28,0c,c7,29)},
	{::hx::fsString,(int)offsetof(PlayState_obj,ratingFC),HX_("ratingFC",9a,72,95,59)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,runtimeShaders),HX_("runtimeShaders",b6,bf,45,a4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &PlayState_obj::STRUM_X,HX_("STRUM_X",82,44,b5,80)},
	{::hx::fsInt,(void *) &PlayState_obj::STRUM_X_MIDDLESCROLL,HX_("STRUM_X_MIDDLESCROLL",3f,d6,d5,06)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(void *) &PlayState_obj::ratingStuff,HX_("ratingStuff",97,c9,9a,6e)},
	{::hx::fsString,(void *) &PlayState_obj::curStage,HX_("curStage",1e,65,b9,cb)},
	{::hx::fsString,(void *) &PlayState_obj::stageUI,HX_("stageUI",92,60,ca,2d)},
	{::hx::fsString,(void *) &PlayState_obj::uiPrefix,HX_("uiPrefix",06,2b,a7,15)},
	{::hx::fsString,(void *) &PlayState_obj::uiPostfix,HX_("uiPostfix",81,2d,67,c2)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &PlayState_obj::SONG,HX_("SONG",d5,eb,18,37)},
	{::hx::fsBool,(void *) &PlayState_obj::isStoryMode,HX_("isStoryMode",ae,68,02,07)},
	{::hx::fsInt,(void *) &PlayState_obj::storyWeek,HX_("storyWeek",89,3e,16,2f)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::storyPlaylist,HX_("storyPlaylist",67,a1,89,7c)},
	{::hx::fsInt,(void *) &PlayState_obj::storyDifficulty,HX_("storyDifficulty",90,ca,a7,d0)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(void *) &PlayState_obj::prevCamFollow,HX_("prevCamFollow",6d,99,a3,09)},
	{::hx::fsBool,(void *) &PlayState_obj::changedDifficulty,HX_("changedDifficulty",4f,3c,c6,3f)},
	{::hx::fsBool,(void *) &PlayState_obj::chartingMode,HX_("chartingMode",47,00,06,09)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignScore,HX_("campaignScore",22,22,d6,07)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignMisses,HX_("campaignMisses",9a,a9,70,e4)},
	{::hx::fsBool,(void *) &PlayState_obj::seenCutscene,HX_("seenCutscene",25,d1,95,b5)},
	{::hx::fsInt,(void *) &PlayState_obj::deathCounter,HX_("deathCounter",28,56,4b,1f)},
	{::hx::fsFloat,(void *) &PlayState_obj::daPixelZoom,HX_("daPixelZoom",7c,81,6e,df)},
	{::hx::fsObject /*  ::states::PlayState */ ,(void *) &PlayState_obj::instance,HX_("instance",95,1f,e1,59)},
	{::hx::fsString,(void *) &PlayState_obj::_lastLoadedModDirectory,HX_("_lastLoadedModDirectory",85,d6,a7,eb)},
	{::hx::fsBool,(void *) &PlayState_obj::nextReloadAll,HX_("nextReloadAll",d5,df,4b,9e)},
	{::hx::fsFloat,(void *) &PlayState_obj::startOnTime,HX_("startOnTime",ce,32,6d,67)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("isCameraOnForcedPos",ed,e7,4d,ae),
	HX_("boyfriendMap",52,d7,52,7c),
	HX_("dadMap",95,72,e2,17),
	HX_("gfMap",bd,45,ec,91),
	HX_("hscriptArray",26,50,33,a7),
	HX_("BF_X",dd,85,d5,2b),
	HX_("BF_Y",de,85,d5,2b),
	HX_("DAD_X",00,3d,6a,52),
	HX_("DAD_Y",01,3d,6a,52),
	HX_("GF_X",f8,96,23,2f),
	HX_("GF_Y",f9,96,23,2f),
	HX_("songSpeedTween",99,fd,00,0f),
	HX_("songSpeed",72,df,e3,b0),
	HX_("songSpeedType",4c,9f,4f,95),
	HX_("noteKillOffset",63,b4,6d,a3),
	HX_("playbackRate",9b,3a,8b,c0),
	HX_("boyfriendGroup",75,99,09,ef),
	HX_("dadGroup",78,cb,28,42),
	HX_("gfGroup",a0,b8,ab,b0),
	HX_("spawnTime",e8,cf,87,ac),
	HX_("inst",c6,43,bb,45),
	HX_("vocals",5e,10,51,59),
	HX_("opponentVocals",db,d1,18,64),
	HX_("dad",47,36,4c,00),
	HX_("gf",1f,5a,00,00),
	HX_("boyfriend",6a,29,b8,e6),
	HX_("notes",41,dc,ca,9f),
	HX_("unspawnNotes",9f,67,f2,45),
	HX_("eventNotes",c7,e5,25,1c),
	HX_("camFollow",e0,6e,47,22),
	HX_("strumLineNotes",24,f1,48,a4),
	HX_("opponentStrums",87,04,01,1c),
	HX_("playerStrums",4b,e1,2a,0d),
	HX_("grpNoteSplashes",2c,f3,de,7b),
	HX_("camZooming",60,3b,bf,d6),
	HX_("camZoomingMult",70,ff,2e,c0),
	HX_("camZoomingDecay",ba,fb,ba,2f),
	HX_("curSong",75,95,6d,b7),
	HX_("gfSpeed",e8,9c,20,98),
	HX_("health",9c,28,06,fd),
	HX_("combo",4e,28,5d,4a),
	HX_("healthBar",97,8a,92,42),
	HX_("timeBar",c6,e3,d4,d8),
	HX_("songPercent",70,03,67,31),
	HX_("ratingsData",00,fb,a3,bb),
	HX_("generatedMusic",96,8a,5d,71),
	HX_("endingSong",5c,73,d7,67),
	HX_("startingSong",b5,31,61,33),
	HX_("updateTime",b6,b6,b1,05),
	HX_("healthGain",3b,c3,f4,00),
	HX_("healthLoss",9f,7c,4d,04),
	HX_("guitarHeroSustains",74,ae,d8,47),
	HX_("instakillOnMiss",94,43,20,66),
	HX_("cpuControlled",d6,1f,47,9e),
	HX_("practiceMode",be,79,8f,7f),
	HX_("pressMissDamage",ee,b5,cf,de),
	HX_("botplaySine",68,97,39,87),
	HX_("botplayTxt",b5,49,12,88),
	HX_("iconP1",9a,bd,d6,45),
	HX_("iconP2",9b,bd,d6,45),
	HX_("camHUD",e8,2b,76,b7),
	HX_("camGame",a1,47,50,cf),
	HX_("camOther",41,4c,ae,3e),
	HX_("cameraSpeed",a2,8a,af,75),
	HX_("songScore",3d,bb,53,a8),
	HX_("songHits",35,a1,e6,32),
	HX_("songMisses",1f,08,d9,b1),
	HX_("scoreTxt",3e,12,c4,0e),
	HX_("timeTxt",63,a0,e2,d8),
	HX_("scoreTxtTween",4d,27,f9,cd),
	HX_("defaultCamZoom",01,50,2a,0b),
	HX_("singAnimations",1e,68,5b,a3),
	HX_("inCutscene",8f,21,01,56),
	HX_("skipCountdown",32,d2,d1,d7),
	HX_("songLength",9b,3a,8c,fa),
	HX_("boyfriendCameraOffset",a2,48,c6,c1),
	HX_("opponentCameraOffset",55,d9,b7,ff),
	HX_("girlfriendCameraOffset",f2,e8,79,8a),
	HX_("storyDifficultyText",5d,4b,db,c2),
	HX_("detailsText",8f,5e,84,21),
	HX_("detailsPausedText",dd,4f,70,44),
	HX_("keysPressed",0e,ff,53,27),
	HX_("boyfriendIdleTime",cb,18,1d,7c),
	HX_("boyfriendIdled",06,71,93,0c),
	HX_("luaArray",c1,48,f2,a3),
	HX_("luaDebugGroup",c4,37,82,dd),
	HX_("introSoundsSuffix",41,f3,b4,4c),
	HX_("keysArray",05,67,3a,17),
	HX_("songName",c0,d0,d7,36),
	HX_("startCallback",47,fc,c1,83),
	HX_("endCallback",c0,2c,c5,36),
	HX_("create",fc,66,0f,7c),
	HX_("set_songSpeed",55,95,4d,b7),
	HX_("set_playbackRate",98,14,6c,1b),
	HX_("addTextToDebug",0a,a1,fa,14),
	HX_("reloadHealthBarColors",4e,b0,fa,fc),
	HX_("addCharacterToList",e1,1e,4c,45),
	HX_("startCharacterScripts",e1,b3,f6,2e),
	HX_("getLuaObject",21,03,b3,3c),
	HX_("startCharacterPos",ed,f4,a6,c5),
	HX_("videoCutscene",25,60,e8,9c),
	HX_("startVideo",b9,ec,12,53),
	HX_("startAndEnd",46,3f,e6,d8),
	HX_("dialogueCount",97,10,4a,e5),
	HX_("psychDialogue",73,c5,7a,86),
	HX_("startDialogue",9a,8f,4f,ac),
	HX_("startTimer",03,98,4c,2c),
	HX_("finishTimer",72,e2,3a,37),
	HX_("countdownReady",f2,9d,1b,12),
	HX_("countdownSet",71,c7,ba,2b),
	HX_("countdownGo",39,dd,2f,3e),
	HX_("cacheCountdown",0f,3e,43,67),
	HX_("startCountdown",ef,1f,f0,88),
	HX_("createCountdownSprite",fa,97,3a,9e),
	HX_("addBehindGF",9a,c8,d5,d1),
	HX_("addBehindBF",3f,c4,d5,d1),
	HX_("addBehindDad",4c,8f,37,c9),
	HX_("clearNotesBefore",13,f3,9b,ac),
	HX_("updateScore",89,dc,71,5e),
	HX_("updateScoreText",d6,4d,48,2c),
	HX_("fullComboFunction",77,e6,b6,d4),
	HX_("doScoreBop",7c,78,2b,7c),
	HX_("setSongTime",44,f4,35,6b),
	HX_("startNextDialogue",ad,e4,be,ee),
	HX_("skipDialogue",b7,16,64,0f),
	HX_("startSong",57,9d,4b,05),
	HX_("noteTypes",27,bb,58,58),
	HX_("eventsPushed",b2,b0,e9,17),
	HX_("totalColumns",79,41,58,9c),
	HX_("generateSong",aa,ed,2b,1f),
	HX_("eventPushed",73,60,7a,c5),
	HX_("eventPushedUnique",e4,bf,cd,6f),
	HX_("eventEarlyTrigger",0f,d2,46,ab),
	HX_("makeEvent",4c,3f,5d,49),
	HX_("skipArrowStartTween",13,8e,1f,fa),
	HX_("generateStaticArrows",ad,44,90,42),
	HX_("openSubState",5b,66,48,37),
	HX_("canResync",be,c7,cd,5a),
	HX_("closeSubState",49,18,32,04),
	HX_("onFocus",39,fe,c6,9a),
	HX_("onFocusLost",bd,e4,85,41),
	HX_("autoUpdateRPC",ed,be,35,64),
	HX_("resetRPC",56,00,dd,4f),
	HX_("resyncVocals",8c,16,ed,6a),
	HX_("paused",ae,40,84,ef),
	HX_("canReset",9f,8b,5b,55),
	HX_("startedCountdown",30,57,28,9b),
	HX_("canPause",c6,18,eb,2b),
	HX_("freezeCamera",5c,20,14,42),
	HX_("allowDebugKeys",1e,68,d7,fc),
	HX_("update",09,86,05,87),
	HX_("updateIconsScale",b9,d4,f1,6d),
	HX_("updateIconsPosition",da,61,10,84),
	HX_("iconsAnimations",69,b0,aa,40),
	HX_("set_health",d9,36,0b,f1),
	HX_("openPauseMenu",8b,0e,89,68),
	HX_("openChartEditor",81,41,b3,10),
	HX_("openCharacterEditor",8c,0d,19,93),
	HX_("isDead",ae,13,cd,5f),
	HX_("gameOverTimer",7f,2b,da,cb),
	HX_("doDeathCheck",5f,34,16,ce),
	HX_("checkEventNote",44,0f,ce,5e),
	HX_("triggerEvent",c2,f7,5a,f4),
	HX_("moveCameraSection",ef,4b,d5,47),
	HX_("moveCameraToGirlfriend",cb,58,de,f5),
	HX_("cameraTwn",e6,d3,33,3a),
	HX_("moveCamera",96,c0,ba,07),
	HX_("tweenCamIn",69,37,60,f8),
	HX_("finishSong",c8,b5,92,d8),
	HX_("transitioning",6d,6a,93,94),
	HX_("endSong",50,dd,7c,2e),
	HX_("KillNotes",a3,ef,fb,2e),
	HX_("totalPlayed",37,de,ee,fd),
	HX_("totalNotesHit",76,f4,57,a6),
	HX_("showCombo",11,8e,c1,78),
	HX_("showComboNum",b5,68,a3,9d),
	HX_("showRating",fa,d8,fe,24),
	HX_("comboGroup",11,20,ea,a7),
	HX_("uiGroup",4b,4c,ea,29),
	HX_("noteGroup",ed,fd,81,d7),
	HX_("cachePopUpScore",48,66,94,1e),
	HX_("popUpScore",66,a1,f2,3f),
	HX_("strumsBlocked",02,35,0d,fa),
	HX_("onKeyPress",a3,cd,a8,ea),
	HX_("keyPressed",c3,72,6e,a8),
	HX_("onKeyRelease",e7,c7,b8,9f),
	HX_("keyReleased",7c,05,0c,bf),
	HX_("keysCheck",34,92,61,37),
	HX_("noteMiss",0e,78,8f,57),
	HX_("noteMissPress",95,58,12,aa),
	HX_("noteMissCommon",d9,df,68,3e),
	HX_("opponentNoteHit",64,75,4c,b1),
	HX_("goodNoteHit",c4,4d,c4,22),
	HX_("invalidateNote",0d,37,d7,6e),
	HX_("spawnNoteSplashOnNote",e5,04,43,52),
	HX_("spawnNoteSplash",14,69,b8,ca),
	HX_("destroy",fa,2c,86,24),
	HX_("lastStepHit",b1,62,ed,35),
	HX_("stepHit",67,ae,41,81),
	HX_("lastBeatHit",c7,9e,b0,28),
	HX_("beatHit",7d,ea,04,74),
	HX_("characterBopper",43,ef,38,dc),
	HX_("playerDance",12,28,62,db),
	HX_("sectionHit",6e,f5,cd,be),
	HX_("startLuasNamed",3c,c1,7f,27),
	HX_("startHScriptsNamed",57,f5,22,8f),
	HX_("initHScript",63,6f,17,19),
	HX_("callOnScripts",2b,78,9a,06),
	HX_("callOnLuas",b8,07,76,15),
	HX_("callOnHScript",b6,7c,63,3a),
	HX_("setOnScripts",a7,74,de,28),
	HX_("setOnLuas",bc,a5,ed,49),
	HX_("setOnHScript",32,79,a7,5c),
	HX_("strumPlayAnim",8e,f4,4a,40),
	HX_("ratingName",08,a5,2b,05),
	HX_("ratingPercent",28,0c,c7,29),
	HX_("ratingFC",9a,72,95,59),
	HX_("RecalculateRating",b0,cb,cd,f8),
	HX_("checkForAchievement",ce,c6,ae,67),
	HX_("runtimeShaders",b6,bf,45,a4),
	HX_("createRuntimeShader",81,55,08,17),
	HX_("initLuaShader",cd,69,3d,b0),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::STRUM_X,"STRUM_X");
	HX_MARK_MEMBER_NAME(PlayState_obj::STRUM_X_MIDDLESCROLL,"STRUM_X_MIDDLESCROLL");
	HX_MARK_MEMBER_NAME(PlayState_obj::ratingStuff,"ratingStuff");
	HX_MARK_MEMBER_NAME(PlayState_obj::curStage,"curStage");
	HX_MARK_MEMBER_NAME(PlayState_obj::stageUI,"stageUI");
	HX_MARK_MEMBER_NAME(PlayState_obj::uiPrefix,"uiPrefix");
	HX_MARK_MEMBER_NAME(PlayState_obj::uiPostfix,"uiPostfix");
	HX_MARK_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_MARK_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_MARK_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_MARK_MEMBER_NAME(PlayState_obj::changedDifficulty,"changedDifficulty");
	HX_MARK_MEMBER_NAME(PlayState_obj::chartingMode,"chartingMode");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignMisses,"campaignMisses");
	HX_MARK_MEMBER_NAME(PlayState_obj::seenCutscene,"seenCutscene");
	HX_MARK_MEMBER_NAME(PlayState_obj::deathCounter,"deathCounter");
	HX_MARK_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_MARK_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(PlayState_obj::_lastLoadedModDirectory,"_lastLoadedModDirectory");
	HX_MARK_MEMBER_NAME(PlayState_obj::nextReloadAll,"nextReloadAll");
	HX_MARK_MEMBER_NAME(PlayState_obj::startOnTime,"startOnTime");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::STRUM_X,"STRUM_X");
	HX_VISIT_MEMBER_NAME(PlayState_obj::STRUM_X_MIDDLESCROLL,"STRUM_X_MIDDLESCROLL");
	HX_VISIT_MEMBER_NAME(PlayState_obj::ratingStuff,"ratingStuff");
	HX_VISIT_MEMBER_NAME(PlayState_obj::curStage,"curStage");
	HX_VISIT_MEMBER_NAME(PlayState_obj::stageUI,"stageUI");
	HX_VISIT_MEMBER_NAME(PlayState_obj::uiPrefix,"uiPrefix");
	HX_VISIT_MEMBER_NAME(PlayState_obj::uiPostfix,"uiPostfix");
	HX_VISIT_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_VISIT_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_VISIT_MEMBER_NAME(PlayState_obj::changedDifficulty,"changedDifficulty");
	HX_VISIT_MEMBER_NAME(PlayState_obj::chartingMode,"chartingMode");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignMisses,"campaignMisses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::seenCutscene,"seenCutscene");
	HX_VISIT_MEMBER_NAME(PlayState_obj::deathCounter,"deathCounter");
	HX_VISIT_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_VISIT_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(PlayState_obj::_lastLoadedModDirectory,"_lastLoadedModDirectory");
	HX_VISIT_MEMBER_NAME(PlayState_obj::nextReloadAll,"nextReloadAll");
	HX_VISIT_MEMBER_NAME(PlayState_obj::startOnTime,"startOnTime");
};

#endif

::hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_("STRUM_X",82,44,b5,80),
	HX_("STRUM_X_MIDDLESCROLL",3f,d6,d5,06),
	HX_("ratingStuff",97,c9,9a,6e),
	HX_("curStage",1e,65,b9,cb),
	HX_("stageUI",92,60,ca,2d),
	HX_("uiPrefix",06,2b,a7,15),
	HX_("uiPostfix",81,2d,67,c2),
	HX_("set_stageUI",b5,c7,31,be),
	HX_("get_isPixelStage",6b,c3,b7,f9),
	HX_("SONG",d5,eb,18,37),
	HX_("isStoryMode",ae,68,02,07),
	HX_("storyWeek",89,3e,16,2f),
	HX_("storyPlaylist",67,a1,89,7c),
	HX_("storyDifficulty",90,ca,a7,d0),
	HX_("prevCamFollow",6d,99,a3,09),
	HX_("changedDifficulty",4f,3c,c6,3f),
	HX_("chartingMode",47,00,06,09),
	HX_("campaignScore",22,22,d6,07),
	HX_("campaignMisses",9a,a9,70,e4),
	HX_("seenCutscene",25,d1,95,b5),
	HX_("deathCounter",28,56,4b,1f),
	HX_("daPixelZoom",7c,81,6e,df),
	HX_("instance",95,1f,e1,59),
	HX_("_lastLoadedModDirectory",85,d6,a7,eb),
	HX_("nextReloadAll",d5,df,4b,9e),
	HX_("startOnTime",ce,32,6d,67),
	HX_("sortByTime",82,fb,30,6f),
	HX_("sortHitNotes",6c,aa,d7,58),
	HX_("getKeyFromEvent",67,b2,00,25),
	::String(null())
};

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.PlayState",31,cd,20,04);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_76_boot)
HXDLIN(  76)		STRUM_X = 42;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_77_boot)
HXDLIN(  77)		STRUM_X_MIDDLESCROLL = -278;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_79_boot)
HXDLIN(  79)		ratingStuff = ::cpp::VirtualArray_obj::__new(10)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("You Suck!",d6,67,6b,07))->init(1,((Float)0.2)))->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Shit",e0,fb,2b,37))->init(1,((Float)0.4)))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Bad",a5,69,32,00))->init(1,((Float)0.5)))->init(3,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Bruh",43,fc,f6,2b))->init(1,((Float)0.6)))->init(4,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Meh",f0,c5,3a,00))->init(1,((Float)0.69)))->init(5,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Nice",bd,a7,de,33))->init(1,((Float)0.7)))->init(6,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Good",5d,c1,42,2f))->init(1,((Float)0.8)))->init(7,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Great",2d,7b,1a,2d))->init(1,((Float)0.9)))->init(8,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Sick!",83,09,f5,0f))->init(1,1))->init(9,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Perfect!!",0d,5f,8e,32))->init(1,1));
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_120_boot)
HXDLIN( 120)		curStage = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_121_boot)
HXDLIN( 121)		stageUI = HX_("normal",27,72,69,30);
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_122_boot)
HXDLIN( 122)		uiPrefix = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_123_boot)
HXDLIN( 123)		uiPostfix = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_142_boot)
HXDLIN( 142)		SONG = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_143_boot)
HXDLIN( 143)		isStoryMode = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_144_boot)
HXDLIN( 144)		storyWeek = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_145_boot)
HXDLIN( 145)		storyPlaylist = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_146_boot)
HXDLIN( 146)		storyDifficulty = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_189_boot)
HXDLIN( 189)		changedDifficulty = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_190_boot)
HXDLIN( 190)		chartingMode = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_219_boot)
HXDLIN( 219)		campaignScore = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_220_boot)
HXDLIN( 220)		campaignMisses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_221_boot)
HXDLIN( 221)		seenCutscene = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_222_boot)
HXDLIN( 222)		deathCounter = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_227_boot)
HXDLIN( 227)		daPixelZoom = ((Float)6);
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_267_boot)
HXDLIN( 267)		_lastLoadedModDirectory = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_268_boot)
HXDLIN( 268)		nextReloadAll = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_801e532e222627de_936_boot)
HXDLIN( 936)		startOnTime = ((Float)0);
            	}
}

} // end namespace states
