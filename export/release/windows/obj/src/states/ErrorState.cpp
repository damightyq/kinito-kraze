// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_states_ErrorState
#include <states/ErrorState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c165ffff73ee1fcf_3_new,"states.ErrorState","new",0xe8867867,"states.ErrorState.new","states/ErrorState.hx",3,0xd8622448)
HX_LOCAL_STACK_FRAME(_hx_pos_c165ffff73ee1fcf_21_create,"states.ErrorState","create",0x4f963d55,"states.ErrorState.create","states/ErrorState.hx",21,0xd8622448)
HX_LOCAL_STACK_FRAME(_hx_pos_c165ffff73ee1fcf_38_update,"states.ErrorState","update",0x5a8c5c62,"states.ErrorState.update","states/ErrorState.hx",38,0xd8622448)
namespace states{

void ErrorState_obj::__construct(::String error, ::Dynamic accept, ::Dynamic back){
            	HX_STACKFRAME(&_hx_pos_c165ffff73ee1fcf_3_new)
HXLINE(  18)		this->errorSine = ((Float)0);
HXLINE(  11)		this->errorMsg = error;
HXLINE(  12)		this->acceptCallback = accept;
HXLINE(  13)		this->backCallback = back;
HXLINE(  15)		super::__construct();
            	}

Dynamic ErrorState_obj::__CreateEmpty() { return new ErrorState_obj; }

void *ErrorState_obj::_hx_vtable = 0;

Dynamic ErrorState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ErrorState_obj > _hx_result = new ErrorState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ErrorState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x53aaab8a) {
			if (inClassId<=(int)0x17c5230b) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x17c5230b;
			} else {
				return inClassId==(int)0x53aaab8a;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void ErrorState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_c165ffff73ee1fcf_21_create)
HXLINE(  22)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  22)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::backend::Paths_obj::image(HX_("menuDesat",26,91,04,72),null(),null()),null(),null(),null(),null(),null());
HXLINE(  23)		bg1->set_color(-8355712);
HXLINE(  24)		bg1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  25)		this->add(bg1);
HXLINE(  26)		{
HXLINE(  26)			int axes = 17;
HXDLIN(  26)			bool _hx_tmp;
HXDLIN(  26)			if ((axes != 1)) {
HXLINE(  26)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(  26)				_hx_tmp = true;
            			}
HXDLIN(  26)			if (_hx_tmp) {
HXLINE(  26)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  26)				bg1->set_x(((( (Float)(_hx_tmp1) ) - bg1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  26)			bool _hx_tmp2;
HXDLIN(  26)			if ((axes != 16)) {
HXLINE(  26)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  26)				_hx_tmp2 = true;
            			}
HXDLIN(  26)			if (_hx_tmp2) {
HXLINE(  26)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  26)				bg1->set_y(((( (Float)(_hx_tmp3) ) - bg1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  28)		this->errorText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,(::flixel::FlxG_obj::width - 300),this->errorMsg,32,null());
HXLINE(  29)		 ::flixel::text::FlxText _hx_tmp4 = this->errorText;
HXDLIN(  29)		::String key = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN(  29)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(  29)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXDLIN(  29)		if (::hx::IsNotNull( str )) {
HXLINE(  29)			key = str;
            		}
HXDLIN(  29)		::String folderKey = key;
HXDLIN(  29)		::String file = ::backend::Paths_obj::modFolders(folderKey);
HXDLIN(  29)		::String _hx_tmp5;
HXDLIN(  29)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE(  29)			_hx_tmp5 = file;
            		}
            		else {
HXLINE(  29)			_hx_tmp5 = (HX_("assets/",4c,2a,dc,36) + folderKey);
            		}
HXDLIN(  29)		_hx_tmp4->setFormat(_hx_tmp5,32,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  30)		{
HXLINE(  30)			 ::flixel::math::FlxBasePoint this2 = this->errorText->scrollFactor;
HXDLIN(  30)			this2->set_x(( (Float)(0) ));
HXDLIN(  30)			this2->set_y(( (Float)(0) ));
            		}
HXLINE(  31)		this->errorText->set_borderSize(( (Float)(2) ));
HXLINE(  32)		{
HXLINE(  32)			 ::flixel::text::FlxText _this = this->errorText;
HXDLIN(  32)			int axes1 = 17;
HXDLIN(  32)			bool _hx_tmp6;
HXDLIN(  32)			if ((axes1 != 1)) {
HXLINE(  32)				_hx_tmp6 = (axes1 == 17);
            			}
            			else {
HXLINE(  32)				_hx_tmp6 = true;
            			}
HXDLIN(  32)			if (_hx_tmp6) {
HXLINE(  32)				int _hx_tmp7 = ::flixel::FlxG_obj::width;
HXDLIN(  32)				_this->set_x(((( (Float)(_hx_tmp7) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  32)			bool _hx_tmp8;
HXDLIN(  32)			if ((axes1 != 16)) {
HXLINE(  32)				_hx_tmp8 = (axes1 == 17);
            			}
            			else {
HXLINE(  32)				_hx_tmp8 = true;
            			}
HXDLIN(  32)			if (_hx_tmp8) {
HXLINE(  32)				int _hx_tmp9 = ::flixel::FlxG_obj::height;
HXDLIN(  32)				_this->set_y(((( (Float)(_hx_tmp9) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  33)		this->add(this->errorText);
HXLINE(  34)		this->super::create();
            	}


void ErrorState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_c165ffff73ee1fcf_38_update)
HXLINE(  39)		 ::states::ErrorState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  39)		_hx_tmp->errorSine = (_hx_tmp->errorSine + (( (Float)(180) ) * elapsed));
HXLINE(  40)		this->errorText->set_alpha((( (Float)(1) ) - ::Math_obj::sin(((::Math_obj::PI * this->errorSine) / ( (Float)(180) )))));
HXLINE(  42)		bool _hx_tmp1;
HXDLIN(  42)		if (this->get_controls()->get_ACCEPT()) {
HXLINE(  42)			_hx_tmp1 = ::hx::IsNotNull( this->acceptCallback );
            		}
            		else {
HXLINE(  42)			_hx_tmp1 = false;
            		}
HXDLIN(  42)		if (_hx_tmp1) {
HXLINE(  43)			this->acceptCallback();
            		}
            		else {
HXLINE(  44)			bool _hx_tmp2;
HXDLIN(  44)			if (this->get_controls()->get_BACK()) {
HXLINE(  44)				_hx_tmp2 = ::hx::IsNotNull( this->backCallback );
            			}
            			else {
HXLINE(  44)				_hx_tmp2 = false;
            			}
HXDLIN(  44)			if (_hx_tmp2) {
HXLINE(  45)				this->backCallback();
            			}
            		}
HXLINE(  47)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< ErrorState_obj > ErrorState_obj::__new(::String error, ::Dynamic accept, ::Dynamic back) {
	::hx::ObjectPtr< ErrorState_obj > __this = new ErrorState_obj();
	__this->__construct(error,accept,back);
	return __this;
}

::hx::ObjectPtr< ErrorState_obj > ErrorState_obj::__alloc(::hx::Ctx *_hx_ctx,::String error, ::Dynamic accept, ::Dynamic back) {
	ErrorState_obj *__this = (ErrorState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ErrorState_obj), true, "states.ErrorState"));
	*(void **)__this = ErrorState_obj::_hx_vtable;
	__this->__construct(error,accept,back);
	return __this;
}

ErrorState_obj::ErrorState_obj()
{
}

void ErrorState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ErrorState);
	HX_MARK_MEMBER_NAME(acceptCallback,"acceptCallback");
	HX_MARK_MEMBER_NAME(backCallback,"backCallback");
	HX_MARK_MEMBER_NAME(errorMsg,"errorMsg");
	HX_MARK_MEMBER_NAME(errorSine,"errorSine");
	HX_MARK_MEMBER_NAME(errorText,"errorText");
	 ::backend::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ErrorState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(acceptCallback,"acceptCallback");
	HX_VISIT_MEMBER_NAME(backCallback,"backCallback");
	HX_VISIT_MEMBER_NAME(errorMsg,"errorMsg");
	HX_VISIT_MEMBER_NAME(errorSine,"errorSine");
	HX_VISIT_MEMBER_NAME(errorText,"errorText");
	 ::backend::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ErrorState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"errorMsg") ) { return ::hx::Val( errorMsg ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"errorSine") ) { return ::hx::Val( errorSine ); }
		if (HX_FIELD_EQ(inName,"errorText") ) { return ::hx::Val( errorText ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"backCallback") ) { return ::hx::Val( backCallback ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"acceptCallback") ) { return ::hx::Val( acceptCallback ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ErrorState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"errorMsg") ) { errorMsg=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"errorSine") ) { errorSine=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"errorText") ) { errorText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"backCallback") ) { backCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"acceptCallback") ) { acceptCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ErrorState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("errorMsg",59,93,34,df));
	outFields->push(HX_("errorSine",35,12,bc,72));
	outFields->push(HX_("errorText",95,48,62,73));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ErrorState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ErrorState_obj,acceptCallback),HX_("acceptCallback",ed,30,95,10)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ErrorState_obj,backCallback),HX_("backCallback",0c,2f,fa,df)},
	{::hx::fsString,(int)offsetof(ErrorState_obj,errorMsg),HX_("errorMsg",59,93,34,df)},
	{::hx::fsFloat,(int)offsetof(ErrorState_obj,errorSine),HX_("errorSine",35,12,bc,72)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ErrorState_obj,errorText),HX_("errorText",95,48,62,73)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ErrorState_obj_sStaticStorageInfo = 0;
#endif

static ::String ErrorState_obj_sMemberFields[] = {
	HX_("acceptCallback",ed,30,95,10),
	HX_("backCallback",0c,2f,fa,df),
	HX_("errorMsg",59,93,34,df),
	HX_("errorSine",35,12,bc,72),
	HX_("errorText",95,48,62,73),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class ErrorState_obj::__mClass;

void ErrorState_obj::__register()
{
	ErrorState_obj _hx_dummy;
	ErrorState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.ErrorState",f5,b8,e2,e4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ErrorState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ErrorState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ErrorState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ErrorState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
