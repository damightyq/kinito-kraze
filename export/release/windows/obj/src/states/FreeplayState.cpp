// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_BeCI
#include <backend/BeCI.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_CoolUtil
#include <backend/CoolUtil.h>
#endif
#ifndef INCLUDED_backend_Difficulty
#include <backend/Difficulty.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_Highscore
#include <backend/Highscore.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_backend_Song
#include <backend/Song.h>
#endif
#ifndef INCLUDED_backend_WeekData
#include <backend/WeekData.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_ColorTween
#include <flixel/tweens/misc/ColorTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_lime_utils_Assets
#include <lime/utils/Assets.h>
#endif
#ifndef INCLUDED_objects_Alphabet
#include <objects/Alphabet.h>
#endif
#ifndef INCLUDED_objects_CDSprite
#include <objects/CDSprite.h>
#endif
#ifndef INCLUDED_objects_HealthIcon
#include <objects/HealthIcon.h>
#endif
#ifndef INCLUDED_objects_MusicPlayer
#include <objects/MusicPlayer.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_states_FreeplayState
#include <states/FreeplayState.h>
#endif
#ifndef INCLUDED_states_LoadingState
#include <states/LoadingState.h>
#endif
#ifndef INCLUDED_states_MainMenuState
#include <states/MainMenuState.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_states_SongMetadata
#include <states/SongMetadata.h>
#endif
#ifndef INCLUDED_states_StoryMenuState
#include <states/StoryMenuState.h>
#endif
#ifndef INCLUDED_substates_GameplayChangersSubstate
#include <substates/GameplayChangersSubstate.h>
#endif
#ifndef INCLUDED_substates_ResetScoreSubState
#include <substates/ResetScoreSubState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_22e2030ae3401175_28_new,"states.FreeplayState","new",0x9acf2c77,"states.FreeplayState.new","states/FreeplayState.hx",28,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_420_create,"states.FreeplayState","create",0x3f497345,"states.FreeplayState.create","states/FreeplayState.hx",420,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_148_create,"states.FreeplayState","create",0x3f497345,"states.FreeplayState.create","states/FreeplayState.hx",148,0x1b2e20da)
static const int _hx_array_data_c99c2505_12[] = {
	(int)146,(int)113,(int)253,
};
static const int _hx_array_data_c99c2505_13[] = {
	(int)0,(int)0,(int)1,(int)1,(int)2,(int)2,(int)3,(int)3,
};
static const int _hx_array_data_c99c2505_14[] = {
	(int)0,(int)0,(int)1,(int)1,(int)2,(int)2,(int)3,(int)3,
};
static const int _hx_array_data_c99c2505_15[] = {
	(int)0,(int)0,(int)0,(int)1,(int)1,(int)1,(int)2,(int)2,(int)2,(int)3,(int)3,(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_479_traceScore,"states.FreeplayState","traceScore",0xffabf756,"states.FreeplayState.traceScore","states/FreeplayState.hx",479,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_493_closeSubState,"states.FreeplayState","closeSubState",0x28f41720,"states.FreeplayState.closeSubState","states/FreeplayState.hx",493,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_501_addSong,"states.FreeplayState","addSong",0x98261a2d,"states.FreeplayState.addSong","states/FreeplayState.hx",501,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_504_weekIsLocked,"states.FreeplayState","weekIsLocked",0xc3d0b9b1,"states.FreeplayState.weekIsLocked","states/FreeplayState.hx",504,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_514_update,"states.FreeplayState","update",0x4a3f9252,"states.FreeplayState.update","states/FreeplayState.hx",514,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_764_getVocalFromCharacter,"states.FreeplayState","getVocalFromCharacter",0x3753dd37,"states.FreeplayState.getVocalFromCharacter","states/FreeplayState.hx",764,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_779_chooseSong,"states.FreeplayState","chooseSong",0xfcb1c715,"states.FreeplayState.chooseSong","states/FreeplayState.hx",779,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_821_shiftLeft,"states.FreeplayState","shiftLeft",0x6e7f9100,"states.FreeplayState.shiftLeft","states/FreeplayState.hx",821,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_839_shiftRight,"states.FreeplayState","shiftRight",0xb82c5cc3,"states.FreeplayState.shiftRight","states/FreeplayState.hx",839,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_857_shiftDown,"states.FreeplayState","shiftDown",0x693d815b,"states.FreeplayState.shiftDown","states/FreeplayState.hx",857,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_870_shiftDown,"states.FreeplayState","shiftDown",0x693d815b,"states.FreeplayState.shiftDown","states/FreeplayState.hx",870,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_872_shiftDown,"states.FreeplayState","shiftDown",0x693d815b,"states.FreeplayState.shiftDown","states/FreeplayState.hx",872,0x1b2e20da)
static const bool _hx_array_data_c99c2505_34[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_895_updatePositions,"states.FreeplayState","updatePositions",0x783d66f8,"states.FreeplayState.updatePositions","states/FreeplayState.hx",895,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_896_updatePositions,"states.FreeplayState","updatePositions",0x783d66f8,"states.FreeplayState.updatePositions","states/FreeplayState.hx",896,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_884_updatePositions,"states.FreeplayState","updatePositions",0x783d66f8,"states.FreeplayState.updatePositions","states/FreeplayState.hx",884,0x1b2e20da)
static const int _hx_array_data_c99c2505_40[] = {
	(int)0,
};
static const bool _hx_array_data_c99c2505_41[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_909_updatePositions,"states.FreeplayState","updatePositions",0x783d66f8,"states.FreeplayState.updatePositions","states/FreeplayState.hx",909,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_910_updatePositions,"states.FreeplayState","updatePositions",0x783d66f8,"states.FreeplayState.updatePositions","states/FreeplayState.hx",910,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_920_updateHeight,"states.FreeplayState","updateHeight",0xc9f997d9,"states.FreeplayState.updateHeight","states/FreeplayState.hx",920,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_941_updateHeight,"states.FreeplayState","updateHeight",0xc9f997d9,"states.FreeplayState.updateHeight","states/FreeplayState.hx",941,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_947_updateSize,"states.FreeplayState","updateSize",0xc478f033,"states.FreeplayState.updateSize","states/FreeplayState.hx",947,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_969_updateBump,"states.FreeplayState","updateBump",0xb9455f68,"states.FreeplayState.updateBump","states/FreeplayState.hx",969,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_976_updateBump,"states.FreeplayState","updateBump",0xb9455f68,"states.FreeplayState.updateBump","states/FreeplayState.hx",976,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_990_getName,"states.FreeplayState","getName",0x2b12d598,"states.FreeplayState.getName","states/FreeplayState.hx",990,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_996_updateCDSpin,"states.FreeplayState","updateCDSpin",0xbb73c8d5,"states.FreeplayState.updateCDSpin","states/FreeplayState.hx",996,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_1020_checkHover,"states.FreeplayState","checkHover",0xfac54c9d,"states.FreeplayState.checkHover","states/FreeplayState.hx",1020,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_1059_changeDiff,"states.FreeplayState","changeDiff",0xdc22f65e,"states.FreeplayState.changeDiff","states/FreeplayState.hx",1059,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_1087_changeSelection,"states.FreeplayState","changeSelection",0xa1163b53,"states.FreeplayState.changeSelection","states/FreeplayState.hx",1087,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_1110_changeSelection,"states.FreeplayState","changeSelection",0xa1163b53,"states.FreeplayState.changeSelection","states/FreeplayState.hx",1110,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_1155__updateSongLastDifficulty,"states.FreeplayState","_updateSongLastDifficulty",0x0aebf205,"states.FreeplayState._updateSongLastDifficulty","states/FreeplayState.hx",1155,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_1158_positionHighscore,"states.FreeplayState","positionHighscore",0xc04a511e,"states.FreeplayState.positionHighscore","states/FreeplayState.hx",1158,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_1169_updateTexts,"states.FreeplayState","updateTexts",0xb6197f74,"states.FreeplayState.updateTexts","states/FreeplayState.hx",1169,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_1194_destroy,"states.FreeplayState","destroy",0x3416e091,"states.FreeplayState.destroy","states/FreeplayState.hx",1194,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_117_loadBPMData,"states.FreeplayState","loadBPMData",0xfe610a3a,"states.FreeplayState.loadBPMData","states/FreeplayState.hx",117,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_1049_destroyFreeplayVocals,"states.FreeplayState","destroyFreeplayVocals",0x905c3d8f,"states.FreeplayState.destroyFreeplayVocals","states/FreeplayState.hx",1049,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_33_boot,"states.FreeplayState","boot",0xd290bc3b,"states.FreeplayState.boot","states/FreeplayState.hx",33,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_36_boot,"states.FreeplayState","boot",0xd290bc3b,"states.FreeplayState.boot","states/FreeplayState.hx",36,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_510_boot,"states.FreeplayState","boot",0xd290bc3b,"states.FreeplayState.boot","states/FreeplayState.hx",510,0x1b2e20da)
HX_LOCAL_STACK_FRAME(_hx_pos_22e2030ae3401175_511_boot,"states.FreeplayState","boot",0xd290bc3b,"states.FreeplayState.boot","states/FreeplayState.hx",511,0x1b2e20da)
namespace states{

void FreeplayState_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_22e2030ae3401175_28_new)
HXLINE(1167)		this->_lastVisibles = ::Array_obj< int >::__new(0);
HXLINE(1166)		this->_drawDistance = 4;
HXLINE( 967)		this->idleTimer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXLINE( 819)		this->isBusy = false;
HXLINE( 512)		this->holdTime = ((Float)0);
HXLINE( 509)		this->instPlaying = -1;
HXLINE( 109)		this->positions = ::Array_obj< Float >::__new(5)->init(0,-355)->init(1,((Float)142.5))->init(2,((Float)477.5))->init(3,((Float)921.5))->init(4,(::flixel::FlxG_obj::width + 355));
HXLINE( 108)		this->cds = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 106)		this->sprites = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  48)		this->iconArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  46)		this->curPlaying = false;
HXLINE(  43)		this->intendedRating = ((Float)0);
HXLINE(  42)		this->intendedScore = 0;
HXLINE(  41)		this->lerpRating = ((Float)0);
HXLINE(  40)		this->lerpScore = 0;
HXLINE(  35)		this->curDifficulty = -1;
HXLINE(  34)		this->lerpSelected = ((Float)0);
HXLINE(  30)		this->songs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  28)		super::__construct();
            	}

Dynamic FreeplayState_obj::__CreateEmpty() { return new FreeplayState_obj; }

void *FreeplayState_obj::_hx_vtable = 0;

Dynamic FreeplayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FreeplayState_obj > _hx_result = new FreeplayState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FreeplayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x53aaab8a) {
			if (inClassId<=(int)0x2f22acaf) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x2f22acaf;
			} else {
				return inClassId==(int)0x53aaab8a;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void FreeplayState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::FreeplayState,_gthis) HXARGC(1)
            		void _hx_run( ::Dynamic coisas){
            			HX_GC_STACKFRAME(&_hx_pos_22e2030ae3401175_420_create)
HXLINE( 421)			coisas->__SetField(HX_("antialiasing",f4,16,b3,48),false,::hx::paccDynamic);
HXLINE( 422)			 ::Dynamic(coisas->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic))->__Field(HX_("set",a2,9b,57,00),::hx::paccDynamic)(((Float)0.5),((Float)0.5));
HXLINE( 423)			coisas->__Field(HX_("updateHitbox",81,94,eb,56),::hx::paccDynamic)();
HXLINE( 425)			if (::Std_obj::isOfType(coisas,( ( ::Dynamic)(::hx::ClassOf< ::flixel::FlxSprite >()) ))) {
HXLINE( 426)				bool _hx_tmp;
HXDLIN( 426)				bool _hx_tmp1;
HXDLIN( 426)				if (::hx::IsInstanceNotEq( coisas,_gthis->base )) {
HXLINE( 426)					_hx_tmp1 = ::hx::IsInstanceEq( coisas,_gthis->ref );
            				}
            				else {
HXLINE( 426)					_hx_tmp1 = true;
            				}
HXDLIN( 426)				if (!(_hx_tmp1)) {
HXLINE( 426)					_hx_tmp = ::hx::IsInstanceEq( coisas,_gthis->checked );
            				}
            				else {
HXLINE( 426)					_hx_tmp = true;
            				}
HXDLIN( 426)				if (_hx_tmp) {
HXLINE( 427)					coisas->__Field(HX_("screenCenter",61,2e,f9,e2),::hx::paccDynamic)();
            				}
HXLINE( 429)				if (::hx::IsInstanceEq( coisas,_gthis->play )) {
HXLINE( 430)					coisas->__SetField(HX_("x",78,00,00,00),((Float)567.5),::hx::paccDynamic);
HXLINE( 431)					coisas->__SetField(HX_("y",79,00,00,00),((Float)542.5),::hx::paccDynamic);
            				}
HXLINE( 433)				bool _hx_tmp2;
HXDLIN( 433)				if (::hx::IsInstanceNotEq( coisas,_gthis->left )) {
HXLINE( 433)					_hx_tmp2 = ::hx::IsInstanceEq( coisas,_gthis->right );
            				}
            				else {
HXLINE( 433)					_hx_tmp2 = true;
            				}
HXDLIN( 433)				if (_hx_tmp2) {
HXLINE( 434)					coisas->__SetField(HX_("y",79,00,00,00),((Float)283.5),::hx::paccDynamic);
            				}
HXLINE( 436)				if (::hx::IsInstanceEq( coisas,_gthis->left )) {
HXLINE( 437)					coisas->__SetField(HX_("x",78,00,00,00),((Float)412.),::hx::paccDynamic);
            				}
HXLINE( 439)				if (::hx::IsInstanceEq( coisas,_gthis->right )) {
HXLINE( 440)					coisas->__SetField(HX_("x",78,00,00,00),((Float)820.5),::hx::paccDynamic);
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_22e2030ae3401175_148_create)
HXDLIN( 148)		 ::states::FreeplayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 152)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 154)		this->musicBPM = ::states::FreeplayState_obj::loadBPMData();
HXLINE( 156)		this->freeplay =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 158)		this->persistentUpdate = true;
HXLINE( 159)		::states::PlayState_obj::isStoryMode = false;
HXLINE( 160)		::backend::WeekData_obj::reloadWeekFiles(false);
HXLINE( 164)		::backend::DiscordClient_obj::changePresence(HX_("In the Menus",0a,c1,ad,c6),null(),null(),null(),null(),null());
HXLINE( 167)		{
HXLINE( 167)			int _g = 0;
HXDLIN( 167)			int _g1 = ::backend::WeekData_obj::weeksList->length;
HXDLIN( 167)			while((_g < _g1)){
HXLINE( 167)				_g = (_g + 1);
HXDLIN( 167)				int i = (_g - 1);
HXLINE( 168)				if (this->weekIsLocked(::backend::WeekData_obj::weeksList->__get(i))) {
HXLINE( 168)					continue;
            				}
HXLINE( 170)				 ::backend::WeekData leWeek = ( ( ::backend::WeekData)(::backend::WeekData_obj::weeksLoaded->get(::backend::WeekData_obj::weeksList->__get(i))) );
HXLINE( 171)				::Array< ::String > leSongs = ::Array_obj< ::String >::__new(0);
HXLINE( 172)				::Array< ::String > leChars = ::Array_obj< ::String >::__new(0);
HXLINE( 174)				{
HXLINE( 174)					int _g2 = 0;
HXDLIN( 174)					int _g3 = leWeek->songs->get_length();
HXDLIN( 174)					while((_g2 < _g3)){
HXLINE( 174)						_g2 = (_g2 + 1);
HXDLIN( 174)						int j = (_g2 - 1);
HXLINE( 176)						leSongs->push(leWeek->songs->__get(j)->__GetItem(0));
HXLINE( 177)						leChars->push(leWeek->songs->__get(j)->__GetItem(1));
            					}
            				}
HXLINE( 180)				::backend::WeekData_obj::setDirectoryFromWeek(leWeek);
HXLINE( 181)				{
HXLINE( 181)					int _g4 = 0;
HXDLIN( 181)					::cpp::VirtualArray _g5 = leWeek->songs;
HXDLIN( 181)					while((_g4 < _g5->get_length())){
HXLINE( 181)						 ::Dynamic song = _g5->__get(_g4);
HXDLIN( 181)						_g4 = (_g4 + 1);
HXLINE( 183)						::Array< int > colors = ( (::Array< int >)(song->__GetItem(2)) );
HXLINE( 184)						bool _hx_tmp;
HXDLIN( 184)						if (::hx::IsNotNull( colors )) {
HXLINE( 184)							_hx_tmp = (colors->length < 3);
            						}
            						else {
HXLINE( 184)							_hx_tmp = true;
            						}
HXDLIN( 184)						if (_hx_tmp) {
HXLINE( 186)							colors = ::Array_obj< int >::fromData( _hx_array_data_c99c2505_12,3);
            						}
HXLINE( 188)						::String song1 = ( (::String)(song->__GetItem(0)) );
HXDLIN( 188)						::String song2 = ( (::String)(song->__GetItem(1)) );
HXDLIN( 188)						int Red = colors->__get(0);
HXDLIN( 188)						int Green = colors->__get(1);
HXDLIN( 188)						int Blue = colors->__get(2);
HXDLIN( 188)						int Alpha = 255;
HXDLIN( 188)						int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 188)						{
HXLINE( 188)							color = (color & -16711681);
HXDLIN( 188)							int color1;
HXDLIN( 188)							if ((Red > 255)) {
HXLINE( 188)								color1 = 255;
            							}
            							else {
HXLINE( 188)								if ((Red < 0)) {
HXLINE( 188)									color1 = 0;
            								}
            								else {
HXLINE( 188)									color1 = Red;
            								}
            							}
HXDLIN( 188)							color = (color | (color1 << 16));
            						}
HXDLIN( 188)						{
HXLINE( 188)							color = (color & -65281);
HXDLIN( 188)							int color2;
HXDLIN( 188)							if ((Green > 255)) {
HXLINE( 188)								color2 = 255;
            							}
            							else {
HXLINE( 188)								if ((Green < 0)) {
HXLINE( 188)									color2 = 0;
            								}
            								else {
HXLINE( 188)									color2 = Green;
            								}
            							}
HXDLIN( 188)							color = (color | (color2 << 8));
            						}
HXDLIN( 188)						{
HXLINE( 188)							color = (color & -256);
HXDLIN( 188)							int color3;
HXDLIN( 188)							if ((Blue > 255)) {
HXLINE( 188)								color3 = 255;
            							}
            							else {
HXLINE( 188)								if ((Blue < 0)) {
HXLINE( 188)									color3 = 0;
            								}
            								else {
HXLINE( 188)									color3 = Blue;
            								}
            							}
HXDLIN( 188)							color = (color | color3);
            						}
HXDLIN( 188)						{
HXLINE( 188)							color = (color & 16777215);
HXDLIN( 188)							int color4;
HXDLIN( 188)							if ((Alpha > 255)) {
HXLINE( 188)								color4 = 255;
            							}
            							else {
HXLINE( 188)								if ((Alpha < 0)) {
HXLINE( 188)									color4 = 0;
            								}
            								else {
HXLINE( 188)									color4 = Alpha;
            								}
            							}
HXDLIN( 188)							color = (color | (color4 << 24));
            						}
HXDLIN( 188)						this->addSong(song1,i,song2,color);
            					}
            				}
            			}
            		}
HXLINE( 191)		::backend::Mods_obj::loadTopMod();
HXLINE( 193)		 ::flixel::FlxSprite _hx_tmp1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 193)		this->bg = _hx_tmp1->loadGraphic(::backend::Paths_obj::image(HX_("menuDesat",26,91,04,72),null(),null()),null(),null(),null(),null(),null());
HXLINE( 194)		this->bg->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 195)		this->add(this->bg);
HXLINE( 196)		{
HXLINE( 196)			 ::flixel::FlxSprite _this = this->bg;
HXDLIN( 196)			int axes = 17;
HXDLIN( 196)			bool _hx_tmp2;
HXDLIN( 196)			if ((axes != 1)) {
HXLINE( 196)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE( 196)				_hx_tmp2 = true;
            			}
HXDLIN( 196)			if (_hx_tmp2) {
HXLINE( 196)				int _hx_tmp3 = ::flixel::FlxG_obj::width;
HXDLIN( 196)				_this->set_x(((( (Float)(_hx_tmp3) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 196)			bool _hx_tmp4;
HXDLIN( 196)			if ((axes != 16)) {
HXLINE( 196)				_hx_tmp4 = (axes == 17);
            			}
            			else {
HXLINE( 196)				_hx_tmp4 = true;
            			}
HXDLIN( 196)			if (_hx_tmp4) {
HXLINE( 196)				int _hx_tmp5 = ::flixel::FlxG_obj::height;
HXDLIN( 196)				_this->set_y(((( (Float)(_hx_tmp5) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 198)		this->grpSongs =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 199)		this->add(this->grpSongs);
HXLINE( 201)		{
HXLINE( 201)			int _g6 = 0;
HXDLIN( 201)			int _g7 = this->songs->length;
HXDLIN( 201)			while((_g6 < _g7)){
HXLINE( 201)				_g6 = (_g6 + 1);
HXDLIN( 201)				int i1 = (_g6 - 1);
HXLINE( 203)				 ::objects::Alphabet songText =  ::objects::Alphabet_obj::__alloc( HX_CTX ,( (Float)(90) ),( (Float)(320) ),this->songs->__get(i1).StaticCast<  ::states::SongMetadata >()->songName,true);
HXLINE( 204)				songText->targetY = i1;
HXLINE( 205)				this->grpSongs->add(songText).StaticCast<  ::objects::Alphabet >();
HXLINE( 207)				songText->set_scaleX(::Math_obj::min(( (Float)(1) ),(( (Float)(980) ) / songText->get_width())));
HXLINE( 208)				songText->snapToPosition();
HXLINE( 210)				::backend::Mods_obj::currentModDirectory = this->songs->__get(i1).StaticCast<  ::states::SongMetadata >()->folder;
HXLINE( 211)				 ::objects::HealthIcon icon =  ::objects::HealthIcon_obj::__alloc( HX_CTX ,this->songs->__get(i1).StaticCast<  ::states::SongMetadata >()->songCharacter,null(),null());
HXLINE( 212)				icon->sprTracker = songText;
HXLINE( 216)				songText->set_visible(songText->set_active((songText->isMenuItem = false)));
HXLINE( 217)				icon->set_visible(icon->set_active(false));
HXLINE( 220)				this->iconArray->push(icon);
HXLINE( 221)				this->add(icon);
            			}
            		}
HXLINE( 227)		::backend::WeekData_obj::setDirectoryFromWeek(null());
HXLINE( 230)		this->missingTextBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE( 231)		this->missingTextBG->set_alpha(((Float)0.6));
HXLINE( 232)		this->missingTextBG->set_visible(false);
HXLINE( 233)		this->add(this->missingTextBG);
HXLINE( 235)		this->missingText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,50,0,(::flixel::FlxG_obj::width - 100),HX_("",00,00,00,00),24,null());
HXLINE( 236)		 ::flixel::text::FlxText _hx_tmp6 = this->missingText;
HXDLIN( 236)		::String key = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 236)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 236)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXDLIN( 236)		if (::hx::IsNotNull( str )) {
HXLINE( 236)			key = str;
            		}
HXDLIN( 236)		::String folderKey = key;
HXDLIN( 236)		::String file = ::backend::Paths_obj::modFolders(folderKey);
HXDLIN( 236)		::String _hx_tmp7;
HXDLIN( 236)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 236)			_hx_tmp7 = file;
            		}
            		else {
HXLINE( 236)			_hx_tmp7 = (HX_("assets/",4c,2a,dc,36) + folderKey);
            		}
HXDLIN( 236)		_hx_tmp6->setFormat(_hx_tmp7,24,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 237)		{
HXLINE( 237)			 ::flixel::math::FlxBasePoint this2 = this->missingText->scrollFactor;
HXDLIN( 237)			this2->set_x(( (Float)(0) ));
HXDLIN( 237)			this2->set_y(( (Float)(0) ));
            		}
HXLINE( 238)		this->missingText->set_visible(false);
HXLINE( 239)		this->add(this->missingText);
HXLINE( 241)		if ((::states::FreeplayState_obj::curSelected >= this->songs->length)) {
HXLINE( 241)			::states::FreeplayState_obj::curSelected = 0;
            		}
HXLINE( 242)		this->bg->set_color(this->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->color);
HXLINE( 243)		this->intendedColor = this->bg->color;
HXLINE( 244)		this->lerpSelected = ( (Float)(::states::FreeplayState_obj::curSelected) );
HXLINE( 246)		this->curDifficulty = ::Math_obj::round(::Math_obj::max(( (Float)(0) ),( (Float)(::backend::Difficulty_obj::defaultList->indexOf(::states::FreeplayState_obj::lastDifficultyName,null())) )));
HXLINE( 248)		this->bottomBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(::flixel::FlxG_obj::height - 26),null())->makeGraphic(::flixel::FlxG_obj::width,26,-16777216,null(),null());
HXLINE( 249)		this->bottomBG->set_alpha(((Float)0.6));
HXLINE( 250)		this->add(this->bottomBG);
HXLINE( 252)		::String leText = HX_("Press SPACE to listen to the Song / Press CTRL to open the Gameplay Changers Menu / Press RESET to Reset your Score and Accuracy.",41,9b,c5,ec);
HXLINE( 253)		this->bottomString = leText;
HXLINE( 254)		int size = 16;
HXLINE( 255)		this->bottomText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->bottomBG->x,(this->bottomBG->y + 4),::flixel::FlxG_obj::width,leText,size,null());
HXLINE( 256)		 ::flixel::text::FlxText _hx_tmp8 = this->bottomText;
HXDLIN( 256)		::String key1 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 256)		::Dynamic this3 = ::backend::Language_obj::phrases;
HXDLIN( 256)		::String str1 = ( ( ::haxe::ds::StringMap)(this3) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN( 256)		if (::hx::IsNotNull( str1 )) {
HXLINE( 256)			key1 = str1;
            		}
HXDLIN( 256)		::String folderKey1 = key1;
HXDLIN( 256)		::String file1 = ::backend::Paths_obj::modFolders(folderKey1);
HXDLIN( 256)		::String _hx_tmp9;
HXDLIN( 256)		if (::sys::FileSystem_obj::exists(file1)) {
HXLINE( 256)			_hx_tmp9 = file1;
            		}
            		else {
HXLINE( 256)			_hx_tmp9 = (HX_("assets/",4c,2a,dc,36) + folderKey1);
            		}
HXDLIN( 256)		_hx_tmp8->setFormat(_hx_tmp9,size,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 257)		{
HXLINE( 257)			 ::flixel::math::FlxBasePoint this4 = this->bottomText->scrollFactor;
HXDLIN( 257)			this4->set_x(( (Float)(0) ));
HXDLIN( 257)			this4->set_y(( (Float)(0) ));
            		}
HXLINE( 258)		this->add(this->bottomText);
HXLINE( 262)		this->back =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE( 263)		this->back->set_visible(true);
HXLINE( 264)		this->add(this->back);
HXLINE( 266)		this->checked =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,::backend::Paths_obj::image(HX_("freeplay/bg",14,93,d9,4d),null(),null()),1,null(),null());
HXLINE( 267)		this->checked->velocity->set_x(( (Float)(64) ));
HXLINE( 268)		this->add(this->checked);
HXLINE( 271)		::Array< ::String > musicas = ::Array_obj< ::String >::__new(0);
HXLINE( 274)		{
HXLINE( 274)			int _g8 = 0;
HXDLIN( 274)			int _g9 = ::backend::WeekData_obj::weeksList->length;
HXDLIN( 274)			while((_g8 < _g9)){
HXLINE( 274)				_g8 = (_g8 + 1);
HXDLIN( 274)				int i2 = (_g8 - 1);
HXLINE( 275)				if (this->weekIsLocked(::backend::WeekData_obj::weeksList->__get(i2))) {
HXLINE( 275)					continue;
            				}
HXLINE( 276)				 ::backend::WeekData leWeek1 = ( ( ::backend::WeekData)(::backend::WeekData_obj::weeksLoaded->get(::backend::WeekData_obj::weeksList->__get(i2))) );
HXLINE( 278)				{
HXLINE( 278)					int _g10 = 0;
HXDLIN( 278)					::cpp::VirtualArray _g11 = leWeek1->songs;
HXDLIN( 278)					while((_g10 < _g11->get_length())){
HXLINE( 278)						 ::Dynamic song3 = _g11->__get(_g10);
HXDLIN( 278)						_g10 = (_g10 + 1);
HXLINE( 279)						musicas->push(song3->__GetItem(0)->__Field(HX_("toLowerCase",56,4c,64,b8),::hx::paccDynamic)());
            					}
            				}
            			}
            		}
HXLINE( 283)		if ((musicas->length > this->positions->length)) {
HXLINE( 284)			Float lastPos = this->positions->__get((this->positions->length - 1));
HXLINE( 285)			while((this->positions->length < musicas->length)){
HXLINE( 286)				this->positions->push(lastPos);
            			}
            		}
HXLINE( 291)		{
HXLINE( 291)			int _g12 = 0;
HXDLIN( 291)			int _g13 = musicas->length;
HXDLIN( 291)			while((_g12 < _g13)){
HXLINE( 291)				_g12 = (_g12 + 1);
HXDLIN( 291)				int i3 = (_g12 - 1);
HXLINE( 292)				int posIndex = 0;
HXLINE( 294)				if ((i3 == 0)) {
HXLINE( 294)					posIndex = 2;
            				}
            				else {
HXLINE( 295)					if ((i3 == 1)) {
HXLINE( 295)						posIndex = 3;
            					}
            					else {
HXLINE( 296)						if ((i3 == 2)) {
HXLINE( 296)							posIndex = 4;
            						}
            						else {
HXLINE( 297)							if ((i3 == (musicas->length - 1))) {
HXLINE( 297)								posIndex = 1;
            							}
            						}
            					}
            				}
HXLINE( 299)				 ::objects::CDSprite cd =  ::objects::CDSprite_obj::__alloc( HX_CTX ,this->positions->__get(posIndex),( (Float)(162) ),musicas->__get(i3));
HXLINE( 300)				this->cds->push(cd);
HXLINE( 301)				this->add(cd);
            			}
            		}
HXLINE( 304)		 ::flixel::FlxSprite _hx_tmp10 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 304)		this->base = _hx_tmp10->loadGraphic(::backend::Paths_obj::image(HX_("freeplay/base",20,57,af,a5),null(),null()),null(),null(),null(),null(),null());
HXLINE( 305)		this->add(this->base);
HXLINE( 307)		 ::flixel::FlxSprite _hx_tmp11 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 307)		this->outlineLeft = _hx_tmp11->loadGraphic(::backend::Paths_obj::image(HX_("freeplay/arrowLeftOutline",81,70,c2,7c),null(),null()),null(),null(),null(),null(),null());
HXLINE( 308)		this->outlineLeft->set_color(-1);
HXLINE( 309)		{
HXLINE( 309)			 ::flixel::math::FlxBasePoint this5 = this->outlineLeft->scale;
HXDLIN( 309)			this5->set_x(((Float)0.6));
HXDLIN( 309)			this5->set_y(((Float)0.6));
            		}
HXLINE( 310)		this->outlineLeft->set_alpha(((Float)0.95));
HXLINE( 311)		this->add(this->outlineLeft);
HXLINE( 313)		 ::flixel::FlxSprite _hx_tmp12 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 313)		this->left = _hx_tmp12->loadGraphic(::backend::Paths_obj::image(HX_("freeplay/arrowLeft",01,61,5d,be),null(),null()),null(),null(),null(),null(),null());
HXLINE( 314)		this->add(this->left);
HXLINE( 316)		 ::flixel::FlxSprite _hx_tmp13 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 316)		this->outlineRight = _hx_tmp13->loadGraphic(::backend::Paths_obj::image(HX_("freeplay/arrowRightOutline",00,8a,f2,33),null(),null()),null(),null(),null(),null(),null());
HXLINE( 317)		this->outlineRight->set_color(-1);
HXLINE( 318)		{
HXLINE( 318)			 ::flixel::math::FlxBasePoint this6 = this->outlineRight->scale;
HXDLIN( 318)			this6->set_x(((Float)0.6));
HXDLIN( 318)			this6->set_y(((Float)0.6));
            		}
HXLINE( 319)		this->outlineRight->set_alpha(((Float)0.95));
HXLINE( 320)		this->add(this->outlineRight);
HXLINE( 322)		 ::flixel::FlxSprite _hx_tmp14 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 322)		this->right = _hx_tmp14->loadGraphic(::backend::Paths_obj::image(HX_("freeplay/arrowRight",a2,8d,64,4a),null(),null()),null(),null(),null(),null(),null());
HXLINE( 323)		this->add(this->right);
HXLINE( 325)		 ::flixel::FlxSprite _hx_tmp15 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 325)		this->outlinePlay = _hx_tmp15->loadGraphic(::backend::Paths_obj::image(HX_("freeplay/playButtonOutline",ad,6c,3e,32),null(),null()),null(),null(),null(),null(),null());
HXLINE( 326)		this->outlinePlay->set_color(-1);
HXLINE( 327)		{
HXLINE( 327)			 ::flixel::math::FlxBasePoint this7 = this->outlinePlay->scale;
HXDLIN( 327)			this7->set_x(((Float)0.6));
HXDLIN( 327)			this7->set_y(((Float)0.6));
            		}
HXLINE( 328)		this->outlinePlay->set_alpha(((Float)0.95));
HXLINE( 329)		this->add(this->outlinePlay);
HXLINE( 331)		 ::flixel::FlxSprite _hx_tmp16 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 331)		this->play = _hx_tmp16->loadGraphic(::backend::Paths_obj::image(HX_("freeplay/playButton",55,97,01,6e),null(),null()),null(),null(),null(),null(),null());
HXLINE( 332)		this->add(this->play);
HXLINE( 334)		this->songNameText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,55,::flixel::FlxG_obj::width,HX_("",00,00,00,00),48,null());
HXLINE( 335)		 ::flixel::text::FlxText _hx_tmp17 = this->songNameText;
HXDLIN( 335)		::String key2 = (HX_("fonts/",eb,13,ef,fa) + HX_("kongtext.ttf",82,76,76,11));
HXDLIN( 335)		::Dynamic this8 = ::backend::Language_obj::phrases;
HXDLIN( 335)		::String str2 = ( ( ::haxe::ds::StringMap)(this8) )->get_string(::StringTools_obj::trim(key2).toLowerCase());
HXDLIN( 335)		if (::hx::IsNotNull( str2 )) {
HXLINE( 335)			key2 = str2;
            		}
HXDLIN( 335)		::String folderKey2 = key2;
HXDLIN( 335)		::String file2 = ::backend::Paths_obj::modFolders(folderKey2);
HXDLIN( 335)		::String _hx_tmp18;
HXDLIN( 335)		if (::sys::FileSystem_obj::exists(file2)) {
HXLINE( 335)			_hx_tmp18 = file2;
            		}
            		else {
HXLINE( 335)			_hx_tmp18 = (HX_("assets/",4c,2a,dc,36) + folderKey2);
            		}
HXDLIN( 335)		_hx_tmp17->setFormat(_hx_tmp18,48,2960418,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 337)		this->songNameShadow =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->songNameText->x + 2),(this->songNameText->y + 2),::flixel::FlxG_obj::width,HX_("",00,00,00,00),48,null());
HXLINE( 338)		 ::flixel::text::FlxText _hx_tmp19 = this->songNameShadow;
HXDLIN( 338)		::String key3 = (HX_("fonts/",eb,13,ef,fa) + HX_("kongtext.ttf",82,76,76,11));
HXDLIN( 338)		::Dynamic this9 = ::backend::Language_obj::phrases;
HXDLIN( 338)		::String str3 = ( ( ::haxe::ds::StringMap)(this9) )->get_string(::StringTools_obj::trim(key3).toLowerCase());
HXDLIN( 338)		if (::hx::IsNotNull( str3 )) {
HXLINE( 338)			key3 = str3;
            		}
HXDLIN( 338)		::String folderKey3 = key3;
HXDLIN( 338)		::String file3 = ::backend::Paths_obj::modFolders(folderKey3);
HXDLIN( 338)		::String _hx_tmp20;
HXDLIN( 338)		if (::sys::FileSystem_obj::exists(file3)) {
HXLINE( 338)			_hx_tmp20 = file3;
            		}
            		else {
HXLINE( 338)			_hx_tmp20 = (HX_("assets/",4c,2a,dc,36) + folderKey3);
            		}
HXDLIN( 338)		_hx_tmp19->setFormat(_hx_tmp20,48,10066068,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 340)		this->scoreText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,1035,110,0,HX_("",00,00,00,00),32,null());
HXLINE( 341)		 ::flixel::text::FlxText _hx_tmp21 = this->scoreText;
HXDLIN( 341)		::String key4 = (HX_("fonts/",eb,13,ef,fa) + HX_("kongtext.ttf",82,76,76,11));
HXDLIN( 341)		::Dynamic this10 = ::backend::Language_obj::phrases;
HXDLIN( 341)		::String str4 = ( ( ::haxe::ds::StringMap)(this10) )->get_string(::StringTools_obj::trim(key4).toLowerCase());
HXDLIN( 341)		if (::hx::IsNotNull( str4 )) {
HXLINE( 341)			key4 = str4;
            		}
HXDLIN( 341)		::String folderKey4 = key4;
HXDLIN( 341)		::String file4 = ::backend::Paths_obj::modFolders(folderKey4);
HXDLIN( 341)		::String _hx_tmp22;
HXDLIN( 341)		if (::sys::FileSystem_obj::exists(file4)) {
HXLINE( 341)			_hx_tmp22 = file4;
            		}
            		else {
HXLINE( 341)			_hx_tmp22 = (HX_("assets/",4c,2a,dc,36) + folderKey4);
            		}
HXDLIN( 341)		_hx_tmp21->setFormat(_hx_tmp22,24,2960418,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 343)		this->scoreTextShadow =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->scoreText->x + 2),(this->scoreText->y + 2),0,HX_("",00,00,00,00),16,null());
HXLINE( 344)		 ::flixel::text::FlxText _hx_tmp23 = this->scoreTextShadow;
HXDLIN( 344)		::String key5 = (HX_("fonts/",eb,13,ef,fa) + HX_("kongtext.ttf",82,76,76,11));
HXDLIN( 344)		::Dynamic this11 = ::backend::Language_obj::phrases;
HXDLIN( 344)		::String str5 = ( ( ::haxe::ds::StringMap)(this11) )->get_string(::StringTools_obj::trim(key5).toLowerCase());
HXDLIN( 344)		if (::hx::IsNotNull( str5 )) {
HXLINE( 344)			key5 = str5;
            		}
HXDLIN( 344)		::String folderKey5 = key5;
HXDLIN( 344)		::String file5 = ::backend::Paths_obj::modFolders(folderKey5);
HXDLIN( 344)		::String _hx_tmp24;
HXDLIN( 344)		if (::sys::FileSystem_obj::exists(file5)) {
HXLINE( 344)			_hx_tmp24 = file5;
            		}
            		else {
HXLINE( 344)			_hx_tmp24 = (HX_("assets/",4c,2a,dc,36) + folderKey5);
            		}
HXDLIN( 344)		_hx_tmp23->setFormat(_hx_tmp24,24,10066068,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 346)		this->highscore =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->scoreText->x + 20),72,0,HX_("HIGHSCORE:",aa,d5,bd,c2),32,null());
HXLINE( 347)		 ::flixel::text::FlxText _hx_tmp25 = this->highscore;
HXDLIN( 347)		::String key6 = (HX_("fonts/",eb,13,ef,fa) + HX_("kongtext.ttf",82,76,76,11));
HXDLIN( 347)		::Dynamic this12 = ::backend::Language_obj::phrases;
HXDLIN( 347)		::String str6 = ( ( ::haxe::ds::StringMap)(this12) )->get_string(::StringTools_obj::trim(key6).toLowerCase());
HXDLIN( 347)		if (::hx::IsNotNull( str6 )) {
HXLINE( 347)			key6 = str6;
            		}
HXDLIN( 347)		::String folderKey6 = key6;
HXDLIN( 347)		::String file6 = ::backend::Paths_obj::modFolders(folderKey6);
HXDLIN( 347)		::String _hx_tmp26;
HXDLIN( 347)		if (::sys::FileSystem_obj::exists(file6)) {
HXLINE( 347)			_hx_tmp26 = file6;
            		}
            		else {
HXLINE( 347)			_hx_tmp26 = (HX_("assets/",4c,2a,dc,36) + folderKey6);
            		}
HXDLIN( 347)		_hx_tmp25->setFormat(_hx_tmp26,16,2960418,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 349)		this->highscoreShadow =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->highscore->x + 2),(this->highscore->y + 2),0,HX_("HIGHSCORE",90,a8,35,ec),16,null());
HXLINE( 350)		 ::flixel::text::FlxText _hx_tmp27 = this->highscoreShadow;
HXDLIN( 350)		::String key7 = (HX_("fonts/",eb,13,ef,fa) + HX_("kongtext.ttf",82,76,76,11));
HXDLIN( 350)		::Dynamic this13 = ::backend::Language_obj::phrases;
HXDLIN( 350)		::String str7 = ( ( ::haxe::ds::StringMap)(this13) )->get_string(::StringTools_obj::trim(key7).toLowerCase());
HXDLIN( 350)		if (::hx::IsNotNull( str7 )) {
HXLINE( 350)			key7 = str7;
            		}
HXDLIN( 350)		::String folderKey7 = key7;
HXDLIN( 350)		::String file7 = ::backend::Paths_obj::modFolders(folderKey7);
HXDLIN( 350)		::String _hx_tmp28;
HXDLIN( 350)		if (::sys::FileSystem_obj::exists(file7)) {
HXLINE( 350)			_hx_tmp28 = file7;
            		}
            		else {
HXLINE( 350)			_hx_tmp28 = (HX_("assets/",4c,2a,dc,36) + folderKey7);
            		}
HXDLIN( 350)		_hx_tmp27->setFormat(_hx_tmp28,16,10066068,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 352)		this->scoreBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->scoreText->x - ( (Float)(6) )),0,null())->makeGraphic(1,66,-16777216,null(),null());
HXLINE( 353)		this->scoreBG->set_alpha(( (Float)(0) ));
HXLINE( 354)		this->add(this->scoreBG);
HXLINE( 356)		this->diffText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->scoreText->x,(this->scoreText->y + 36),0,HX_("",00,00,00,00),24,null());
HXLINE( 357)		this->diffText->set_font(this->scoreText->_font);
HXLINE( 358)		this->diffText->set_alpha(( (Float)(0) ));
HXLINE( 359)		this->add(this->diffText);
HXLINE( 362)		this->add(this->scoreTextShadow);
HXLINE( 363)		this->add(this->scoreText);
HXLINE( 365)		this->add(this->highscoreShadow);
HXLINE( 366)		this->add(this->highscore);
HXLINE( 369)		this->add(this->songNameShadow);
HXLINE( 370)		this->add(this->songNameText);
HXLINE( 374)		 ::flixel::FlxSprite _hx_tmp29 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 374)		this->ref = _hx_tmp29->loadGraphic(::backend::Paths_obj::image(HX_("freeplay/ref",24,41,93,d0),null(),null()),null(),null(),null(),null(),null());
HXLINE( 375)		this->ref->set_alpha(((Float)0.75));
HXLINE( 376)		this->add(this->ref);
HXLINE( 378)		this->sam =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)1075.5),((Float)353.5),null());
HXLINE( 380)		 ::flixel::FlxSprite _hx_tmp30 = this->sam;
HXDLIN( 380)		::String parentFolder = null();
HXDLIN( 380)		if ((HX_("freeplay/samSwag",9a,0e,62,ab).indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE( 380)			::haxe::Log_obj::trace(HX_("freeplay/samSwag",9a,0e,62,ab), ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder)->init(1,true))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            		}
HXDLIN( 380)		 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(HX_("freeplay/samSwag",9a,0e,62,ab),parentFolder,true);
HXDLIN( 380)		bool xmlExists = false;
HXDLIN( 380)		::String xml = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("freeplay/samSwag",9a,0e,62,ab)) + HX_(".xml",69,3e,c3,1e)));
HXDLIN( 380)		if (::sys::FileSystem_obj::exists(xml)) {
HXLINE( 380)			xmlExists = true;
            		}
HXDLIN( 380)		 ::Dynamic _hx_tmp31;
HXDLIN( 380)		if (xmlExists) {
HXLINE( 380)			_hx_tmp31 = ::sys::io::File_obj::getContent(xml);
            		}
            		else {
HXLINE( 380)			::String key8 = (HX_("images/",77,50,74,c1) + HX_("freeplay/samSwag",9a,0e,62,ab));
HXDLIN( 380)			::Dynamic this14 = ::backend::Language_obj::phrases;
HXDLIN( 380)			::String str8 = ( ( ::haxe::ds::StringMap)(this14) )->get_string(::StringTools_obj::trim(key8).toLowerCase());
HXDLIN( 380)			if (::hx::IsNotNull( str8 )) {
HXLINE( 380)				key8 = str8;
            			}
HXDLIN( 380)			_hx_tmp31 = ::backend::Paths_obj::getPath((key8 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder,null());
            		}
HXDLIN( 380)		_hx_tmp30->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded,_hx_tmp31));
HXLINE( 381)		this->sam->animation->addByIndices(HX_("I",49,00,00,00),HX_("samSwag I0",3e,71,60,d7),::Array_obj< int >::fromData( _hx_array_data_c99c2505_13,8),HX_("",00,00,00,00),3,false,null(),null());
HXLINE( 382)		{
HXLINE( 382)			 ::flixel::math::FlxBasePoint this15 = this->sam->scale;
HXDLIN( 382)			this15->set_x(((Float)0.5));
HXDLIN( 382)			this15->set_y(((Float)0.5));
            		}
HXLINE( 383)		this->sam->updateHitbox();
HXLINE( 384)		this->sam->set_alpha(( (Float)(1) ));
HXLINE( 386)		this->jade =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)-38.5),((Float)379.),null());
HXLINE( 388)		 ::flixel::FlxSprite _hx_tmp32 = this->jade;
HXDLIN( 388)		::String parentFolder1 = null();
HXDLIN( 388)		if ((HX_("freeplay/jadeSwag",31,e5,e9,f3).indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE( 388)			::haxe::Log_obj::trace(HX_("freeplay/jadeSwag",31,e5,e9,f3), ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder1)->init(1,true))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            		}
HXDLIN( 388)		 ::flixel::graphics::FlxGraphic imageLoaded1 = ::backend::Paths_obj::image(HX_("freeplay/jadeSwag",31,e5,e9,f3),parentFolder1,true);
HXDLIN( 388)		bool xmlExists1 = false;
HXDLIN( 388)		::String xml1 = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("freeplay/jadeSwag",31,e5,e9,f3)) + HX_(".xml",69,3e,c3,1e)));
HXDLIN( 388)		if (::sys::FileSystem_obj::exists(xml1)) {
HXLINE( 388)			xmlExists1 = true;
            		}
HXDLIN( 388)		 ::Dynamic _hx_tmp33;
HXDLIN( 388)		if (xmlExists1) {
HXLINE( 388)			_hx_tmp33 = ::sys::io::File_obj::getContent(xml1);
            		}
            		else {
HXLINE( 388)			::String key9 = (HX_("images/",77,50,74,c1) + HX_("freeplay/jadeSwag",31,e5,e9,f3));
HXDLIN( 388)			::Dynamic this16 = ::backend::Language_obj::phrases;
HXDLIN( 388)			::String str9 = ( ( ::haxe::ds::StringMap)(this16) )->get_string(::StringTools_obj::trim(key9).toLowerCase());
HXDLIN( 388)			if (::hx::IsNotNull( str9 )) {
HXLINE( 388)				key9 = str9;
            			}
HXDLIN( 388)			_hx_tmp33 = ::backend::Paths_obj::getPath((key9 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder1,null());
            		}
HXDLIN( 388)		_hx_tmp32->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded1,_hx_tmp33));
HXLINE( 389)		this->jade->animation->addByIndices(HX_("I",49,00,00,00),HX_("jadeSwag I0",85,16,7d,5d),::Array_obj< int >::fromData( _hx_array_data_c99c2505_14,8),HX_("",00,00,00,00),3,false,null(),null());
HXLINE( 390)		{
HXLINE( 390)			 ::flixel::math::FlxBasePoint this17 = this->jade->scale;
HXDLIN( 390)			this17->set_x(((Float)0.5));
HXDLIN( 390)			this17->set_y(((Float)0.5));
            		}
HXLINE( 391)		this->jade->updateHitbox();
HXLINE( 392)		this->jade->set_alpha(( (Float)(1) ));
HXLINE( 396)		this->kinito =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)338.5),((Float)392.),null());
HXLINE( 398)		 ::flixel::FlxSprite _hx_tmp34 = this->kinito;
HXDLIN( 398)		::String parentFolder2 = null();
HXDLIN( 398)		if ((HX_("freeplay/kinitoSwag",0d,24,94,f5).indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE( 398)			::haxe::Log_obj::trace(HX_("freeplay/kinitoSwag",0d,24,94,f5), ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder2)->init(1,true))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            		}
HXDLIN( 398)		 ::flixel::graphics::FlxGraphic imageLoaded2 = ::backend::Paths_obj::image(HX_("freeplay/kinitoSwag",0d,24,94,f5),parentFolder2,true);
HXDLIN( 398)		bool xmlExists2 = false;
HXDLIN( 398)		::String xml2 = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("freeplay/kinitoSwag",0d,24,94,f5)) + HX_(".xml",69,3e,c3,1e)));
HXDLIN( 398)		if (::sys::FileSystem_obj::exists(xml2)) {
HXLINE( 398)			xmlExists2 = true;
            		}
HXDLIN( 398)		 ::Dynamic _hx_tmp35;
HXDLIN( 398)		if (xmlExists2) {
HXLINE( 398)			_hx_tmp35 = ::sys::io::File_obj::getContent(xml2);
            		}
            		else {
HXLINE( 398)			::String key10 = (HX_("images/",77,50,74,c1) + HX_("freeplay/kinitoSwag",0d,24,94,f5));
HXDLIN( 398)			::Dynamic this18 = ::backend::Language_obj::phrases;
HXDLIN( 398)			::String str10 = ( ( ::haxe::ds::StringMap)(this18) )->get_string(::StringTools_obj::trim(key10).toLowerCase());
HXDLIN( 398)			if (::hx::IsNotNull( str10 )) {
HXLINE( 398)				key10 = str10;
            			}
HXDLIN( 398)			_hx_tmp35 = ::backend::Paths_obj::getPath((key10 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder2,null());
            		}
HXDLIN( 398)		_hx_tmp34->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded2,_hx_tmp35));
HXLINE( 399)		this->kinito->animation->addByIndices(HX_("I",49,00,00,00),HX_("kinitoSwag I0",e9,f2,51,ed),::Array_obj< int >::fromData( _hx_array_data_c99c2505_15,12),HX_("",00,00,00,00),3,true,null(),null());
HXLINE( 400)		{
HXLINE( 400)			 ::flixel::math::FlxBasePoint this19 = this->kinito->scale;
HXDLIN( 400)			this19->set_x(((Float)0.5));
HXDLIN( 400)			this19->set_y(((Float)0.5));
            		}
HXLINE( 401)		this->kinito->updateHitbox();
HXLINE( 402)		this->kinito->set_alpha(( (Float)(1) ));
HXLINE( 404)		this->sam->animation->play(HX_("I",49,00,00,00),null(),null(),null());
HXLINE( 405)		this->jade->animation->play(HX_("I",49,00,00,00),null(),null(),null());
HXLINE( 406)		this->kinito->animation->play(HX_("I",49,00,00,00),true,null(),null());
HXLINE( 408)		this->freeplay->add(this->checked).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 409)		this->freeplay->add(this->base).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 410)		this->freeplay->add(this->left).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 411)		this->freeplay->add(this->right).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 412)		this->freeplay->add(this->play).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 414)		this->freeplay->add(this->ref).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 416)		this->add(this->sam);
HXLINE( 417)		this->add(this->jade);
HXLINE( 418)		this->add(this->kinito);
HXLINE( 420)		this->freeplay->forEach( ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE( 446)		 ::flixel::FlxSprite _hx_tmp36 = this->outlineLeft;
HXDLIN( 446)		Float _hx_tmp37 = this->left->x;
HXDLIN( 446)		Float _hx_tmp38 = this->outlineLeft->get_width();
HXDLIN( 446)		Float _hx_tmp39 = (_hx_tmp37 - ((_hx_tmp38 - this->left->get_width()) / ( (Float)(2) )));
HXLINE( 447)		Float _hx_tmp40 = this->left->y;
HXDLIN( 447)		Float _hx_tmp41 = this->outlineLeft->get_height();
HXLINE( 446)		_hx_tmp36->setPosition(_hx_tmp39,(_hx_tmp40 - ((_hx_tmp41 - this->left->get_height()) / ( (Float)(2) ))));
HXLINE( 449)		 ::flixel::FlxSprite _hx_tmp42 = this->outlineRight;
HXDLIN( 449)		Float _hx_tmp43 = this->right->x;
HXDLIN( 449)		Float _hx_tmp44 = this->outlineRight->get_width();
HXDLIN( 449)		Float _hx_tmp45 = (_hx_tmp43 - ((_hx_tmp44 - this->right->get_width()) / ( (Float)(2) )));
HXLINE( 450)		Float _hx_tmp46 = this->right->y;
HXDLIN( 450)		Float _hx_tmp47 = this->outlineRight->get_height();
HXLINE( 449)		_hx_tmp42->setPosition(_hx_tmp45,(_hx_tmp46 - ((_hx_tmp47 - this->right->get_height()) / ( (Float)(2) ))));
HXLINE( 452)		 ::flixel::FlxSprite _hx_tmp48 = this->outlinePlay;
HXDLIN( 452)		Float _hx_tmp49 = this->play->x;
HXDLIN( 452)		Float _hx_tmp50 = this->outlinePlay->get_width();
HXDLIN( 452)		Float _hx_tmp51 = (_hx_tmp49 - ((_hx_tmp50 - this->play->get_width()) / ( (Float)(2) )));
HXLINE( 453)		Float _hx_tmp52 = this->play->y;
HXDLIN( 453)		Float _hx_tmp53 = this->outlinePlay->get_height();
HXLINE( 452)		_hx_tmp48->setPosition(_hx_tmp51,(_hx_tmp52 - ((_hx_tmp53 - this->play->get_height()) / ( (Float)(2) ))));
HXLINE( 457)		this->shiftRight();
HXLINE( 460)		{
HXLINE( 460)			int _g14 = 0;
HXDLIN( 460)			::Array< ::Dynamic> _g15 = this->cds;
HXDLIN( 460)			while((_g14 < _g15->length)){
HXLINE( 460)				 ::objects::CDSprite cd1 = _g15->__get(_g14).StaticCast<  ::objects::CDSprite >();
HXDLIN( 460)				_g14 = (_g14 + 1);
HXLINE( 461)				cd1->updateCover();
HXLINE( 462)				if ((cd1->x == this->positions->__get(1))) {
HXLINE( 463)					::String _hx_tmp54 = cd1->getTrueName();
HXDLIN( 463)					this->intendedScore = ::backend::Highscore_obj::getScore(_hx_tmp54,this->curDifficulty);
HXLINE( 464)					::String _hx_tmp55 = cd1->getTrueName();
HXDLIN( 464)					this->intendedRating = ::backend::Highscore_obj::getRating(_hx_tmp55,this->curDifficulty);
            				}
            			}
            		}
HXLINE( 471)		this->player =  ::objects::MusicPlayer_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 472)		this->add(this->player);
HXLINE( 474)		this->changeSelection(null(),null());
HXLINE( 475)		this->updateTexts(null());
HXLINE( 476)		this->super::create();
            	}


void FreeplayState_obj::traceScore(){
            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_479_traceScore)
HXLINE( 480)		::haxe::Log_obj::trace((HX_("intendedScore: ",0d,28,f5,a0) + this->intendedScore),::hx::SourceInfo(HX_("source/states/FreeplayState.hx",66,70,4c,e9),480,HX_("states.FreeplayState",05,25,9c,c9),HX_("traceScore",8d,92,3b,40)));
HXLINE( 481)		::haxe::Log_obj::trace((HX_("intendedRating: ",ce,40,73,80) + this->intendedRating),::hx::SourceInfo(HX_("source/states/FreeplayState.hx",66,70,4c,e9),481,HX_("states.FreeplayState",05,25,9c,c9),HX_("traceScore",8d,92,3b,40)));
HXLINE( 483)		{
HXLINE( 483)			int _g = 0;
HXDLIN( 483)			::Array< ::Dynamic> _g1 = this->cds;
HXDLIN( 483)			while((_g < _g1->length)){
HXLINE( 483)				 ::objects::CDSprite cd = _g1->__get(_g).StaticCast<  ::objects::CDSprite >();
HXDLIN( 483)				_g = (_g + 1);
HXLINE( 484)				cd->updateCover();
HXLINE( 485)				if ((cd->x == this->positions->__get(1))) {
HXLINE( 486)					::String _hx_tmp = cd->getTrueName();
HXDLIN( 486)					this->intendedScore = ::backend::Highscore_obj::getScore(_hx_tmp,this->curDifficulty);
HXLINE( 487)					 ::Dynamic _hx_tmp1 = ::haxe::Log_obj::trace;
HXDLIN( 487)					::String _hx_tmp2 = cd->getTrueName();
HXDLIN( 487)					::String _hx_tmp3 = (HX_("alguma coisa: ",be,f9,d3,b5) + ::backend::Highscore_obj::getScore(_hx_tmp2,this->curDifficulty));
HXDLIN( 487)					_hx_tmp1(_hx_tmp3,::hx::SourceInfo(HX_("source/states/FreeplayState.hx",66,70,4c,e9),487,HX_("states.FreeplayState",05,25,9c,c9),HX_("traceScore",8d,92,3b,40)));
HXLINE( 488)					::String _hx_tmp4 = cd->getTrueName();
HXDLIN( 488)					this->intendedRating = ::backend::Highscore_obj::getRating(_hx_tmp4,this->curDifficulty);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FreeplayState_obj,traceScore,(void))

void FreeplayState_obj::closeSubState(){
            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_493_closeSubState)
HXLINE( 494)		this->changeSelection(0,false);
HXLINE( 495)		this->persistentUpdate = true;
HXLINE( 496)		this->super::closeSubState();
            	}


void FreeplayState_obj::addSong(::String songName,int weekNum,::String songCharacter,int color){
            	HX_GC_STACKFRAME(&_hx_pos_22e2030ae3401175_501_addSong)
HXDLIN( 501)		::Array< ::Dynamic> _hx_tmp = this->songs;
HXDLIN( 501)		_hx_tmp->push( ::states::SongMetadata_obj::__alloc( HX_CTX ,songName,weekNum,songCharacter,color));
            	}


HX_DEFINE_DYNAMIC_FUNC4(FreeplayState_obj,addSong,(void))

bool FreeplayState_obj::weekIsLocked(::String name){
            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_504_weekIsLocked)
HXLINE( 505)		 ::backend::WeekData leWeek = ( ( ::backend::WeekData)(::backend::WeekData_obj::weeksLoaded->get(name)) );
HXLINE( 506)		bool _hx_tmp;
HXDLIN( 506)		if (!(leWeek->startUnlocked)) {
HXLINE( 506)			_hx_tmp = (leWeek->weekBefore.length > 0);
            		}
            		else {
HXLINE( 506)			_hx_tmp = false;
            		}
HXDLIN( 506)		if (_hx_tmp) {
HXLINE( 506)			if (::states::StoryMenuState_obj::weekCompleted->exists(leWeek->weekBefore)) {
HXLINE( 506)				return !(::states::StoryMenuState_obj::weekCompleted->get_bool(leWeek->weekBefore));
            			}
            			else {
HXLINE( 506)				return true;
            			}
            		}
            		else {
HXLINE( 506)			return false;
            		}
HXDLIN( 506)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FreeplayState_obj,weekIsLocked,return )

void FreeplayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_22e2030ae3401175_514_update)
HXLINE( 515)		if ((::flixel::FlxG_obj::sound->music->_volume < ((Float)0.7))) {
HXLINE( 517)			 ::flixel::sound::FlxSound fh = ::flixel::FlxG_obj::sound->music;
HXDLIN( 517)			fh->set_volume((fh->_volume + (((Float)0.5) * ::flixel::FlxG_obj::elapsed)));
            		}
HXLINE( 519)		Float a = ( (Float)(this->intendedScore) );
HXDLIN( 519)		this->lerpScore = ::Math_obj::floor((a + (::Math_obj::exp((-(elapsed) * ((Float)13.9))) * (( (Float)(this->lerpScore) ) - a))));
HXLINE( 520)		Float a1 = this->intendedRating;
HXDLIN( 520)		this->lerpRating = (a1 + (::Math_obj::exp((-(elapsed) * ((Float)6.9))) * (this->lerpRating - a1)));
HXLINE( 522)		if ((::Math_obj::abs(( (Float)((this->lerpScore - this->intendedScore)) )) <= 10)) {
HXLINE( 523)			this->lerpScore = this->intendedScore;
            		}
HXLINE( 524)		if ((::Math_obj::abs((this->lerpRating - this->intendedRating)) <= ((Float)0.01))) {
HXLINE( 525)			this->lerpRating = this->intendedRating;
            		}
HXLINE( 527)		::Array< ::String > ratingSplit = ::Std_obj::string(::backend::CoolUtil_obj::floorDecimal((this->lerpRating * ( (Float)(100) )),2)).split(HX_(".",2e,00,00,00));
HXLINE( 528)		if ((ratingSplit->length < 2)) {
HXLINE( 529)			ratingSplit->push(HX_("",00,00,00,00));
            		}
HXLINE( 532)		while((ratingSplit->__get(1).length < 2)){
HXLINE( 533)			::Array< ::String > ratingSplit1 = ratingSplit;
HXDLIN( 533)			int _hx_tmp = 1;
HXDLIN( 533)			ratingSplit1[_hx_tmp] = (ratingSplit1->__get(_hx_tmp) + HX_("0",30,00,00,00));
            		}
HXLINE( 536)		int shiftMult = 1;
HXLINE( 537)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 537)		if (_this->keyManager->checkStatusUnsafe(16,_this->status)) {
HXLINE( 537)			shiftMult = 3;
            		}
HXLINE( 539)		 ::flixel::FlxSprite _hx_tmp1 = this->ref;
HXDLIN( 539)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 539)		_hx_tmp1->set_visible(_this1->keyManager->checkStatusUnsafe(36,_this1->status));
HXLINE( 543)		 ::flixel::text::FlxText _hx_tmp2 = this->scoreText;
HXDLIN( 543)		::String _hx_tmp3 = ((HX_("",00,00,00,00) + this->lerpScore) + HX_("\n(",de,08,00,00));
HXDLIN( 543)		_hx_tmp2->set_text(((_hx_tmp3 + ratingSplit->join(HX_(".",2e,00,00,00))) + HX_("%)",64,20,00,00)));
HXLINE( 544)		 ::flixel::text::FlxText _hx_tmp4 = this->scoreTextShadow;
HXDLIN( 544)		::String _hx_tmp5 = ((HX_("",00,00,00,00) + this->lerpScore) + HX_("\n(",de,08,00,00));
HXDLIN( 544)		_hx_tmp4->set_text(((_hx_tmp5 + ratingSplit->join(HX_(".",2e,00,00,00))) + HX_("%)",64,20,00,00)));
HXLINE( 600)		this->checkHover(this->left,this->outlineLeft,HX_("freeplay/arrowLeft",01,61,5d,be));
HXLINE( 601)		this->checkHover(this->right,this->outlineRight,HX_("freeplay/arrowRight",a2,8d,64,4a));
HXLINE( 602)		this->checkHover(this->play,this->outlinePlay,HX_("freeplay/playButton",55,97,01,6e));
HXLINE( 604)		if (this->get_controls()->get_BACK()) {
HXLINE( 606)			if (this->player->playingMusic) {
HXLINE( 608)				{
HXLINE( 608)					 ::flixel::sound::FlxSound _this2 = ::flixel::FlxG_obj::sound->music;
HXDLIN( 608)					_this2->cleanup(_this2->autoDestroy,true);
            				}
HXLINE( 609)				::states::FreeplayState_obj::destroyFreeplayVocals();
HXLINE( 610)				::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE( 611)				this->instPlaying = -1;
HXLINE( 613)				this->player->playingMusic = false;
HXLINE( 614)				this->player->switchPlayMusic();
HXLINE( 616)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp6 = ::flixel::FlxG_obj::sound;
HXDLIN( 616)				_hx_tmp6->playMusic(::backend::Paths_obj::returnSound((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)),null(),true,null()),0,null(),null());
HXLINE( 617)				::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::sound->music, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("volume",da,29,53,5f),1)),1,null());
            			}
            			else {
HXLINE( 621)				this->persistentUpdate = false;
HXLINE( 622)				if (::hx::IsNotNull( this->colorTween )) {
HXLINE( 623)					this->colorTween->cancel();
            				}
HXLINE( 625)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp7 = ::flixel::FlxG_obj::sound;
HXDLIN( 625)				_hx_tmp7->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("cancelMenu",39,a4,43,b7)),null(),true,null()),null(),null(),null(),null(),null());
HXLINE( 626)				::backend::MusicBeatState_obj::switchState( ::states::MainMenuState_obj::__alloc( HX_CTX ));
            			}
            		}
HXLINE( 630)		bool _hx_tmp8;
HXDLIN( 630)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 630)		if (_this3->keyManager->checkStatusUnsafe(17,_this3->status)) {
HXLINE( 630)			_hx_tmp8 = !(this->player->playingMusic);
            		}
            		else {
HXLINE( 630)			_hx_tmp8 = false;
            		}
HXDLIN( 630)		if (_hx_tmp8) {
HXLINE( 632)			this->persistentUpdate = false;
HXLINE( 633)			this->openSubState( ::substates::GameplayChangersSubstate_obj::__alloc( HX_CTX ));
            		}
            		else {
HXLINE( 635)			 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 635)			if (_this4->keyManager->checkStatusUnsafe(32,_this4->status)) {
HXLINE( 637)				bool _hx_tmp9;
HXDLIN( 637)				if ((this->instPlaying != ::states::FreeplayState_obj::curSelected)) {
HXLINE( 637)					_hx_tmp9 = !(this->player->playingMusic);
            				}
            				else {
HXLINE( 637)					_hx_tmp9 = false;
            				}
HXDLIN( 637)				if (_hx_tmp9) {
HXLINE( 639)					::states::FreeplayState_obj::destroyFreeplayVocals();
HXLINE( 640)					::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE( 642)					::backend::Mods_obj::currentModDirectory = this->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->folder;
HXLINE( 643)					::String poop = this->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->songName.toLowerCase();
HXDLIN( 643)					::String poop1 = ::backend::Highscore_obj::formatSong(poop,this->curDifficulty);
HXLINE( 644)					::backend::Song_obj::loadFromJson(poop1,this->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->songName.toLowerCase());
HXLINE( 645)					if (( (bool)(::states::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE( 647)						::states::FreeplayState_obj::vocals =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXLINE( 648)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 650)							::String playerVocals = this->getVocalFromCharacter(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 651)							::String song = ( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN( 651)							::String postfix;
HXDLIN( 651)							bool postfix1;
HXDLIN( 651)							if (::hx::IsNotNull( playerVocals )) {
HXLINE( 651)								postfix1 = (playerVocals.length > 0);
            							}
            							else {
HXLINE( 651)								postfix1 = false;
            							}
HXDLIN( 651)							if (postfix1) {
HXLINE( 651)								postfix = playerVocals;
            							}
            							else {
HXLINE( 651)								postfix = HX_("Player",81,5f,4d,6c);
            							}
HXDLIN( 651)							 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 651)							 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 651)							::String songKey = ((HX_("",00,00,00,00) + ::StringTools_obj::trim(hideChars->replace(invalidChars->replace(song,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase()) + HX_("/Voices",10,18,4f,34));
HXDLIN( 651)							if (::hx::IsNotNull( postfix )) {
HXLINE( 651)								songKey = (songKey + (HX_("-",2d,00,00,00) + postfix));
            							}
HXDLIN( 651)							 ::openfl::media::Sound loadedVocals = ::backend::Paths_obj::returnSound(songKey,HX_("songs",fe,36,c7,80),true,false);
HXLINE( 652)							if (::hx::IsNull( loadedVocals )) {
HXLINE( 652)								::String song1 = ( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN( 652)								::String postfix2 = null();
HXDLIN( 652)								 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 652)								 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 652)								::String songKey1 = ((HX_("",00,00,00,00) + ::StringTools_obj::trim(hideChars1->replace(invalidChars1->replace(song1,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase()) + HX_("/Voices",10,18,4f,34));
HXDLIN( 652)								if (::hx::IsNotNull( postfix2 )) {
HXLINE( 652)									songKey1 = (songKey1 + (HX_("-",2d,00,00,00) + postfix2));
            								}
HXDLIN( 652)								loadedVocals = ::backend::Paths_obj::returnSound(songKey1,HX_("songs",fe,36,c7,80),true,false);
            							}
HXLINE( 654)							bool _hx_tmp10;
HXDLIN( 654)							if (::hx::IsNotNull( loadedVocals )) {
HXLINE( 654)								_hx_tmp10 = (( (Float)(loadedVocals->get_length()) ) > 0);
            							}
            							else {
HXLINE( 654)								_hx_tmp10 = false;
            							}
HXDLIN( 654)							if (_hx_tmp10) {
HXLINE( 656)								::states::FreeplayState_obj::vocals->loadEmbedded(loadedVocals,null(),null(),null());
HXLINE( 657)								::flixel::FlxG_obj::sound->list->add(::states::FreeplayState_obj::vocals).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE( 658)								::states::FreeplayState_obj::vocals->persist = (::states::FreeplayState_obj::vocals->looped = true);
HXLINE( 659)								::states::FreeplayState_obj::vocals->set_volume(((Float)0.8));
HXLINE( 660)								::states::FreeplayState_obj::vocals->play(null(),null(),null());
HXLINE( 661)								::states::FreeplayState_obj::vocals->pause();
            							}
            							else {
HXLINE( 663)								::states::FreeplayState_obj::vocals = ( ( ::flixel::sound::FlxSound)(::flixel::util::FlxDestroyUtil_obj::destroy(::states::FreeplayState_obj::vocals)) );
            							}
            						} catch( ::Dynamic _hx_e) {
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic _g = _hx_e;
HXLINE( 665)								{
HXLINE( 665)									null();
            								}
HXLINE( 667)								::states::FreeplayState_obj::vocals = ( ( ::flixel::sound::FlxSound)(::flixel::util::FlxDestroyUtil_obj::destroy(::states::FreeplayState_obj::vocals)) );
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
HXLINE( 670)						::states::FreeplayState_obj::opponentVocals =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXLINE( 671)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 674)							::String oppVocals = this->getVocalFromCharacter(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 675)							::String song2 = ( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN( 675)							::String postfix3;
HXDLIN( 675)							bool postfix4;
HXDLIN( 675)							if (::hx::IsNotNull( oppVocals )) {
HXLINE( 675)								postfix4 = (oppVocals.length > 0);
            							}
            							else {
HXLINE( 675)								postfix4 = false;
            							}
HXDLIN( 675)							if (postfix4) {
HXLINE( 675)								postfix3 = oppVocals;
            							}
            							else {
HXLINE( 675)								postfix3 = HX_("Opponent",bd,75,6a,d2);
            							}
HXDLIN( 675)							 ::EReg invalidChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 675)							 ::EReg hideChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 675)							::String songKey2 = ((HX_("",00,00,00,00) + ::StringTools_obj::trim(hideChars2->replace(invalidChars2->replace(song2,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase()) + HX_("/Voices",10,18,4f,34));
HXDLIN( 675)							if (::hx::IsNotNull( postfix3 )) {
HXLINE( 675)								songKey2 = (songKey2 + (HX_("-",2d,00,00,00) + postfix3));
            							}
HXDLIN( 675)							 ::openfl::media::Sound loadedVocals1 = ::backend::Paths_obj::returnSound(songKey2,HX_("songs",fe,36,c7,80),true,false);
HXLINE( 677)							bool _hx_tmp11;
HXDLIN( 677)							if (::hx::IsNotNull( loadedVocals1 )) {
HXLINE( 677)								_hx_tmp11 = (( (Float)(loadedVocals1->get_length()) ) > 0);
            							}
            							else {
HXLINE( 677)								_hx_tmp11 = false;
            							}
HXDLIN( 677)							if (_hx_tmp11) {
HXLINE( 679)								::states::FreeplayState_obj::opponentVocals->loadEmbedded(loadedVocals1,null(),null(),null());
HXLINE( 680)								::flixel::FlxG_obj::sound->list->add(::states::FreeplayState_obj::opponentVocals).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE( 681)								::states::FreeplayState_obj::opponentVocals->persist = (::states::FreeplayState_obj::opponentVocals->looped = true);
HXLINE( 682)								::states::FreeplayState_obj::opponentVocals->set_volume(((Float)0.8));
HXLINE( 683)								::states::FreeplayState_obj::opponentVocals->play(null(),null(),null());
HXLINE( 684)								::states::FreeplayState_obj::opponentVocals->pause();
            							}
            							else {
HXLINE( 687)								::states::FreeplayState_obj::opponentVocals = ( ( ::flixel::sound::FlxSound)(::flixel::util::FlxDestroyUtil_obj::destroy(::states::FreeplayState_obj::opponentVocals)) );
            							}
            						} catch( ::Dynamic _hx_e) {
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic _g1 = _hx_e;
HXLINE( 689)								{
HXLINE( 689)									null();
            								}
HXLINE( 692)								::states::FreeplayState_obj::opponentVocals = ( ( ::flixel::sound::FlxSound)(::flixel::util::FlxDestroyUtil_obj::destroy(::states::FreeplayState_obj::opponentVocals)) );
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
            					}
HXLINE( 696)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp12 = ::flixel::FlxG_obj::sound;
HXDLIN( 696)					::String song3 = ( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN( 696)					 ::EReg invalidChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 696)					 ::EReg hideChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 696)					_hx_tmp12->playMusic(::backend::Paths_obj::returnSound(((HX_("",00,00,00,00) + ::StringTools_obj::trim(hideChars3->replace(invalidChars3->replace(song3,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase()) + HX_("/Inst",95,b3,69,40)),HX_("songs",fe,36,c7,80),true,null()),((Float)0.8),null(),null());
HXLINE( 697)					::flixel::FlxG_obj::sound->music->pause();
HXLINE( 698)					this->instPlaying = ::states::FreeplayState_obj::curSelected;
HXLINE( 700)					this->player->playingMusic = true;
HXLINE( 701)					this->player->curTime = ( (Float)(0) );
HXLINE( 702)					this->player->switchPlayMusic();
HXLINE( 703)					this->player->pauseOrResume(true);
            				}
            				else {
HXLINE( 705)					bool _hx_tmp13;
HXDLIN( 705)					if ((this->instPlaying == ::states::FreeplayState_obj::curSelected)) {
HXLINE( 705)						_hx_tmp13 = this->player->playingMusic;
            					}
            					else {
HXLINE( 705)						_hx_tmp13 = false;
            					}
HXDLIN( 705)					if (_hx_tmp13) {
HXLINE( 707)						 ::objects::MusicPlayer _hx_tmp14 = this->player;
HXDLIN( 707)						_hx_tmp14->pauseOrResume(!(this->player->get_playing()));
            					}
            				}
            			}
            			else {
HXLINE( 710)				bool _hx_tmp15;
HXDLIN( 710)				if (this->get_controls()->get_ACCEPT()) {
HXLINE( 710)					_hx_tmp15 = !(this->player->playingMusic);
            				}
            				else {
HXLINE( 710)					_hx_tmp15 = false;
            				}
HXDLIN( 710)				if (_hx_tmp15) {
HXLINE( 712)					this->persistentUpdate = false;
HXLINE( 713)					::String path = this->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->songName;
HXDLIN( 713)					 ::EReg invalidChars4 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 713)					 ::EReg hideChars4 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 713)					::String songLowercase = ::StringTools_obj::trim(hideChars4->replace(invalidChars4->replace(path,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
HXLINE( 714)					::String poop2 = ::backend::Highscore_obj::formatSong(songLowercase,this->curDifficulty);
HXLINE( 715)					::haxe::Log_obj::trace(poop2,::hx::SourceInfo(HX_("source/states/FreeplayState.hx",66,70,4c,e9),715,HX_("states.FreeplayState",05,25,9c,c9),HX_("update",09,86,05,87)));
HXLINE( 716)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 718)						::states::PlayState_obj::SONG = ::backend::Song_obj::loadFromJson(poop2,songLowercase);
HXLINE( 719)						::states::PlayState_obj::isStoryMode = false;
HXLINE( 720)						::states::PlayState_obj::storyDifficulty = this->curDifficulty;
HXLINE( 722)						 ::Dynamic _hx_tmp16 = ::haxe::Log_obj::trace;
HXDLIN( 722)						::String _hx_tmp17 = (HX_("CURRENT WEEK: ",c1,cc,39,35) + ::backend::WeekData_obj::getWeekFileName());
HXDLIN( 722)						_hx_tmp16(_hx_tmp17,::hx::SourceInfo(HX_("source/states/FreeplayState.hx",66,70,4c,e9),722,HX_("states.FreeplayState",05,25,9c,c9),HX_("update",09,86,05,87)));
HXLINE( 723)						if (::hx::IsNotNull( this->colorTween )) {
HXLINE( 724)							this->colorTween->cancel();
            						}
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g2 = _hx_e;
HXLINE( 727)							{
HXLINE( 727)								null();
            							}
HXDLIN( 727)							 ::Dynamic e = _g2;
HXLINE( 729)							 ::Dynamic _hx_tmp18 = ::haxe::Log_obj::trace;
HXDLIN( 729)							::String _hx_tmp19 = (HX_("ERROR! ",87,5a,de,69) + ::Std_obj::string(e));
HXDLIN( 729)							_hx_tmp18(_hx_tmp19,::hx::SourceInfo(HX_("source/states/FreeplayState.hx",66,70,4c,e9),729,HX_("states.FreeplayState",05,25,9c,c9),HX_("update",09,86,05,87)));
HXLINE( 731)							::String errorStr = ( (::String)(e->toString()) );
HXLINE( 732)							if (::StringTools_obj::startsWith(errorStr,HX_("[file_contents,assets/data/",a3,60,54,a0))) {
HXLINE( 732)								errorStr = (HX_("Missing file: ",bc,9d,68,d4) + errorStr.substring(34,(errorStr.length - 1)));
            							}
HXLINE( 733)							this->missingText->set_text((HX_("ERROR WHILE LOADING CHART:\n",03,b4,d7,53) + errorStr));
HXLINE( 734)							{
HXLINE( 734)								 ::flixel::text::FlxText _this5 = this->missingText;
HXDLIN( 734)								int axes = 16;
HXDLIN( 734)								bool _hx_tmp20;
HXDLIN( 734)								if ((axes != 1)) {
HXLINE( 734)									_hx_tmp20 = (axes == 17);
            								}
            								else {
HXLINE( 734)									_hx_tmp20 = true;
            								}
HXDLIN( 734)								if (_hx_tmp20) {
HXLINE( 734)									int _hx_tmp21 = ::flixel::FlxG_obj::width;
HXDLIN( 734)									_this5->set_x(((( (Float)(_hx_tmp21) ) - _this5->get_width()) / ( (Float)(2) )));
            								}
HXDLIN( 734)								bool _hx_tmp22;
HXDLIN( 734)								if ((axes != 16)) {
HXLINE( 734)									_hx_tmp22 = (axes == 17);
            								}
            								else {
HXLINE( 734)									_hx_tmp22 = true;
            								}
HXDLIN( 734)								if (_hx_tmp22) {
HXLINE( 734)									int _hx_tmp23 = ::flixel::FlxG_obj::height;
HXDLIN( 734)									_this5->set_y(((( (Float)(_hx_tmp23) ) - _this5->get_height()) / ( (Float)(2) )));
            								}
            							}
HXLINE( 735)							this->missingText->set_visible(true);
HXLINE( 736)							this->missingTextBG->set_visible(true);
HXLINE( 737)							 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp24 = ::flixel::FlxG_obj::sound;
HXDLIN( 737)							_hx_tmp24->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("cancelMenu",39,a4,43,b7)),null(),true,null()),null(),null(),null(),null(),null());
HXLINE( 739)							this->updateTexts(elapsed);
HXLINE( 740)							this->super::update(elapsed);
HXLINE( 741)							return;
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXLINE( 743)					::backend::MusicBeatState_obj::switchState(::states::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::states::PlayState_obj::__alloc( HX_CTX )) ),false,true));
HXLINE( 745)					::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE( 747)					::states::FreeplayState_obj::destroyFreeplayVocals();
HXLINE( 749)					::backend::DiscordClient_obj::loadModRPC();
            				}
            				else {
HXLINE( 752)					bool _hx_tmp25;
HXDLIN( 752)					if (this->get_controls()->get_RESET()) {
HXLINE( 752)						_hx_tmp25 = !(this->player->playingMusic);
            					}
            					else {
HXLINE( 752)						_hx_tmp25 = false;
            					}
HXDLIN( 752)					if (_hx_tmp25) {
HXLINE( 754)						this->persistentUpdate = false;
HXLINE( 755)						this->openSubState( ::substates::ResetScoreSubState_obj::__alloc( HX_CTX ,this->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->songName,this->curDifficulty,this->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->songCharacter,null()));
HXLINE( 756)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp26 = ::flixel::FlxG_obj::sound;
HXDLIN( 756)						_hx_tmp26->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("scrollMenu",4c,d4,18,06)),null(),true,null()),null(),null(),null(),null(),null());
            					}
            				}
            			}
            		}
HXLINE( 759)		this->updateTexts(elapsed);
HXLINE( 760)		this->super::update(elapsed);
            	}


::String FreeplayState_obj::getVocalFromCharacter(::String _hx_char){
            	HX_GC_STACKFRAME(&_hx_pos_22e2030ae3401175_764_getVocalFromCharacter)
HXLINE( 765)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 767)			::String path = ::backend::Paths_obj::getPath(((HX_("characters/",45,3c,bf,be) + _hx_char) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),null(),null());
HXLINE( 769)			 ::Dynamic character =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,::sys::io::File_obj::getContent(path))->doParse();
HXLINE( 773)			return ( (::String)(character->__Field(HX_("vocals_file",3d,c5,2d,83),::hx::paccDynamic)) );
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 775)				{
HXLINE( 775)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 776)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FreeplayState_obj,getVocalFromCharacter,return )

void FreeplayState_obj::chooseSong(::String leSong){
            	HX_GC_STACKFRAME(&_hx_pos_22e2030ae3401175_779_chooseSong)
HXLINE( 780)		this->persistentUpdate = false;
HXLINE( 781)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 781)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 781)		::String songLowercase = ::StringTools_obj::trim(hideChars->replace(invalidChars->replace(leSong,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
HXLINE( 782)		::String poop = ::backend::Highscore_obj::formatSong(songLowercase,1);
HXLINE( 783)		::haxe::Log_obj::trace(poop,::hx::SourceInfo(HX_("source/states/FreeplayState.hx",66,70,4c,e9),783,HX_("states.FreeplayState",05,25,9c,c9),HX_("chooseSong",4c,62,41,3d)));
HXLINE( 784)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 786)			::states::PlayState_obj::SONG = ::backend::Song_obj::loadFromJson(poop,songLowercase);
HXLINE( 787)			::states::PlayState_obj::isStoryMode = false;
HXLINE( 788)			::states::PlayState_obj::storyDifficulty = this->curDifficulty;
HXLINE( 790)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 790)			::String _hx_tmp1 = (HX_("CURRENT WEEK: ",c1,cc,39,35) + ::backend::WeekData_obj::getWeekFileName());
HXDLIN( 790)			_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/states/FreeplayState.hx",66,70,4c,e9),790,HX_("states.FreeplayState",05,25,9c,c9),HX_("chooseSong",4c,62,41,3d)));
HXLINE( 791)			if (::hx::IsNotNull( this->colorTween )) {
HXLINE( 792)				this->colorTween->cancel();
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 795)				{
HXLINE( 795)					null();
            				}
HXDLIN( 795)				 ::Dynamic e = _g;
HXLINE( 797)				 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN( 797)				::String _hx_tmp3 = (HX_("ERROR! ",87,5a,de,69) + ::Std_obj::string(e));
HXDLIN( 797)				_hx_tmp2(_hx_tmp3,::hx::SourceInfo(HX_("source/states/FreeplayState.hx",66,70,4c,e9),797,HX_("states.FreeplayState",05,25,9c,c9),HX_("chooseSong",4c,62,41,3d)));
HXLINE( 799)				::String errorStr = ( (::String)(e->toString()) );
HXLINE( 800)				if (::StringTools_obj::startsWith(errorStr,HX_("[file_contents,assets/data/",a3,60,54,a0))) {
HXLINE( 800)					errorStr = (HX_("Missing file: ",bc,9d,68,d4) + errorStr.substring(34,(errorStr.length - 1)));
            				}
HXLINE( 801)				this->missingText->set_text((HX_("ERROR WHILE LOADING CHART:\n",03,b4,d7,53) + errorStr));
HXLINE( 802)				{
HXLINE( 802)					 ::flixel::text::FlxText _this = this->missingText;
HXDLIN( 802)					int axes = 16;
HXDLIN( 802)					bool _hx_tmp4;
HXDLIN( 802)					if ((axes != 1)) {
HXLINE( 802)						_hx_tmp4 = (axes == 17);
            					}
            					else {
HXLINE( 802)						_hx_tmp4 = true;
            					}
HXDLIN( 802)					if (_hx_tmp4) {
HXLINE( 802)						int _hx_tmp5 = ::flixel::FlxG_obj::width;
HXDLIN( 802)						_this->set_x(((( (Float)(_hx_tmp5) ) - _this->get_width()) / ( (Float)(2) )));
            					}
HXDLIN( 802)					bool _hx_tmp6;
HXDLIN( 802)					if ((axes != 16)) {
HXLINE( 802)						_hx_tmp6 = (axes == 17);
            					}
            					else {
HXLINE( 802)						_hx_tmp6 = true;
            					}
HXDLIN( 802)					if (_hx_tmp6) {
HXLINE( 802)						int _hx_tmp7 = ::flixel::FlxG_obj::height;
HXDLIN( 802)						_this->set_y(((( (Float)(_hx_tmp7) ) - _this->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE( 803)				this->missingText->set_visible(true);
HXLINE( 804)				this->missingTextBG->set_visible(true);
HXLINE( 805)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp8 = ::flixel::FlxG_obj::sound;
HXDLIN( 805)				_hx_tmp8->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("cancelMenu",39,a4,43,b7)),null(),true,null()),null(),null(),null(),null(),null());
HXLINE( 807)				return;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 809)		::backend::MusicBeatState_obj::switchState(::states::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::states::PlayState_obj::__alloc( HX_CTX )) ),false,true));
HXLINE( 811)		::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE( 813)		::states::FreeplayState_obj::destroyFreeplayVocals();
HXLINE( 815)		::backend::DiscordClient_obj::loadModRPC();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FreeplayState_obj,chooseSong,(void))

void FreeplayState_obj::shiftLeft(){
            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_821_shiftLeft)
HXLINE( 822)		if (this->isBusy) {
HXLINE( 822)			return;
            		}
HXLINE( 824)		 ::objects::CDSprite first = this->cds->shift().StaticCast<  ::objects::CDSprite >();
HXLINE( 825)		this->cds->push(first);
HXLINE( 826)		::haxe::Log_obj::trace(HX_("shifting left...",c7,c7,d3,e4),::hx::SourceInfo(HX_("source/states/FreeplayState.hx",66,70,4c,e9),826,HX_("states.FreeplayState",05,25,9c,c9),HX_("shiftLeft",a9,89,a9,d2)));
HXLINE( 828)		{
HXLINE( 828)			int _g = 0;
HXDLIN( 828)			int _g1 = this->cds->length;
HXDLIN( 828)			while((_g < _g1)){
HXLINE( 828)				_g = (_g + 1);
HXDLIN( 828)				int i = (_g - 1);
HXLINE( 829)				 ::objects::CDSprite cd = this->cds->__get(i).StaticCast<  ::objects::CDSprite >();
HXLINE( 830)				if ((cd->x == this->positions->__get(1))) {
HXLINE( 831)					::String _hx_tmp = cd->getTrueName();
HXDLIN( 831)					this->intendedScore = ::backend::Highscore_obj::getScore(_hx_tmp,this->curDifficulty);
HXLINE( 832)					::String _hx_tmp1 = cd->getTrueName();
HXDLIN( 832)					this->intendedRating = ::backend::Highscore_obj::getRating(_hx_tmp1,this->curDifficulty);
            				}
            			}
            		}
HXLINE( 836)		this->updatePositions();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FreeplayState_obj,shiftLeft,(void))

void FreeplayState_obj::shiftRight(){
            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_839_shiftRight)
HXLINE( 840)		if (this->isBusy) {
HXLINE( 840)			return;
            		}
HXLINE( 842)		 ::objects::CDSprite last = this->cds->pop().StaticCast<  ::objects::CDSprite >();
HXLINE( 843)		this->cds->unshift(last);
HXLINE( 844)		::haxe::Log_obj::trace(HX_("shifting right...",12,e4,d0,fd),::hx::SourceInfo(HX_("source/states/FreeplayState.hx",66,70,4c,e9),844,HX_("states.FreeplayState",05,25,9c,c9),HX_("shiftRight",fa,f7,bb,f8)));
HXLINE( 846)		{
HXLINE( 846)			int _g = 0;
HXDLIN( 846)			int _g1 = this->cds->length;
HXDLIN( 846)			while((_g < _g1)){
HXLINE( 846)				_g = (_g + 1);
HXDLIN( 846)				int i = (_g - 1);
HXLINE( 847)				 ::objects::CDSprite cd = this->cds->__get(i).StaticCast<  ::objects::CDSprite >();
HXLINE( 848)				if ((cd->x == this->positions->__get(3))) {
HXLINE( 849)					::String _hx_tmp = cd->getTrueName();
HXDLIN( 849)					this->intendedScore = ::backend::Highscore_obj::getScore(_hx_tmp,this->curDifficulty);
HXLINE( 850)					::String _hx_tmp1 = cd->getTrueName();
HXDLIN( 850)					this->intendedRating = ::backend::Highscore_obj::getRating(_hx_tmp1,this->curDifficulty);
            				}
            			}
            		}
HXLINE( 854)		this->updatePositions();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FreeplayState_obj,shiftRight,(void))

void FreeplayState_obj::shiftDown(){
            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_857_shiftDown)
HXDLIN( 857)		 ::states::FreeplayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 858)		if (this->isBusy) {
HXLINE( 858)			return;
            		}
HXLINE( 860)		this->isBusy = true;
HXLINE( 861)		int activeTweens = 0;
HXLINE( 863)		{
HXLINE( 863)			int _g = 0;
HXDLIN( 863)			int _g1 = this->cds->length;
HXDLIN( 863)			while((_g < _g1)){
HXLINE( 863)				_g = (_g + 1);
HXDLIN( 863)				int i = (_g - 1);
HXLINE( 864)				 ::objects::CDSprite cd = this->cds->__get(i).StaticCast<  ::objects::CDSprite >();
HXLINE( 865)				if ((cd->x == this->positions->__get(2))) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::objects::CDSprite,cd) HXARGC(1)
            					void _hx_run(Float val){
            						HX_STACKFRAME(&_hx_pos_22e2030ae3401175_870_shiftDown)
HXLINE( 870)						cd->setY(val);
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::objects::CDSprite,cd) HXARGC(1)
            					void _hx_run(Float val){
            						HX_STACKFRAME(&_hx_pos_22e2030ae3401175_870_shiftDown)
HXLINE( 870)						cd->setY(val);
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_2, ::states::FreeplayState,_gthis, ::objects::CDSprite,cd,::Array< bool >,tweenCompleted) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween _){
            						HX_STACKFRAME(&_hx_pos_22e2030ae3401175_872_shiftDown)
HXLINE( 872)						if (!(tweenCompleted->__get(0))) {
HXLINE( 873)							tweenCompleted[0] = true;
HXLINE( 874)							_gthis->isBusy = true;
HXLINE( 875)							 ::states::FreeplayState _gthis1 = _gthis;
HXDLIN( 875)							_gthis1->chooseSong(cd->getTrueName());
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 866)					activeTweens = (activeTweens + 1);
HXLINE( 867)					::Array< bool > tweenCompleted = ::Array_obj< bool >::fromData( _hx_array_data_c99c2505_34,1);
HXLINE( 869)					::flixel::tweens::FlxTween_obj::num(cd->y,( (Float)(564) ),1, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())), ::Dynamic(new _hx_Closure_1(cd)))->onComplete =  ::Dynamic(new _hx_Closure_2(_gthis,cd,tweenCompleted));
HXLINE( 879)					goto _hx_goto_29;
            				}
            			}
            			_hx_goto_29:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FreeplayState_obj,shiftDown,(void))

void FreeplayState_obj::updatePositions(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(Float _){
            			HX_STACKFRAME(&_hx_pos_22e2030ae3401175_895_updatePositions)
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run(Float _){
            			HX_STACKFRAME(&_hx_pos_22e2030ae3401175_895_updatePositions)
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::states::FreeplayState,_gthis,::Array< bool >,tweenCompleted) HXARGC(1)
            		void _hx_run( ::flixel::tweens::FlxTween _){
            			HX_STACKFRAME(&_hx_pos_22e2030ae3401175_896_updatePositions)
HXLINE( 896)			if (!(tweenCompleted->__get(0))) {
HXLINE( 897)				tweenCompleted[0] = true;
HXLINE( 898)				_gthis->updateCDSpin();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_884_updatePositions)
HXDLIN( 884)		 ::states::FreeplayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 885)		if (this->isBusy) {
HXLINE( 885)			return;
            		}
HXLINE( 887)		this->isBusy = true;
HXLINE( 888)		::Array< int > activeTweens = ::Array_obj< int >::fromData( _hx_array_data_c99c2505_40,1);
HXLINE( 889)		::Array< bool > tweenCompleted = ::Array_obj< bool >::fromData( _hx_array_data_c99c2505_41,1);
HXLINE( 891)		this->updateHeight();
HXLINE( 892)		this->updateSize();
HXLINE( 893)		this->updateBump();
HXLINE( 895)		::flixel::tweens::FlxTween_obj::num(( (Float)(0) ),( (Float)(1) ),((Float)0.33), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::sineInOut_dyn())), ::Dynamic(new _hx_Closure_1()))->onComplete =  ::Dynamic(new _hx_Closure_2(_gthis,tweenCompleted));
HXLINE( 902)		{
HXLINE( 902)			int _g = 0;
HXDLIN( 902)			int _g1 = this->cds->length;
HXDLIN( 902)			while((_g < _g1)){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::objects::CDSprite,cd) HXARGC(1)
            				void _hx_run(Float val){
            					HX_STACKFRAME(&_hx_pos_22e2030ae3401175_909_updatePositions)
HXLINE( 909)					cd->setX(val);
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::objects::CDSprite,cd) HXARGC(1)
            				void _hx_run(Float val){
            					HX_STACKFRAME(&_hx_pos_22e2030ae3401175_909_updatePositions)
HXLINE( 909)					cd->setX(val);
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_5,::Array< int >,activeTweens, ::states::FreeplayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween _){
            					HX_STACKFRAME(&_hx_pos_22e2030ae3401175_910_updatePositions)
HXLINE( 911)					activeTweens[0]--;
HXLINE( 912)					if ((activeTweens->__get(0) == 0)) {
HXLINE( 913)						_gthis->isBusy = false;
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 902)				_g = (_g + 1);
HXDLIN( 902)				int i = (_g - 1);
HXLINE( 903)				 ::objects::CDSprite cd = this->cds->__get(i).StaticCast<  ::objects::CDSprite >();
HXLINE( 904)				Float targetX = this->positions->__get(::hx::Mod(i,this->positions->length));
HXLINE( 906)				activeTweens[0]++;
HXLINE( 908)				::flixel::tweens::FlxTween_obj::num(cd->x,targetX,((Float)0.33), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::sineInOut_dyn())), ::Dynamic(new _hx_Closure_4(cd)))->onComplete =  ::Dynamic(new _hx_Closure_5(activeTweens,_gthis));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FreeplayState_obj,updatePositions,(void))

void FreeplayState_obj::updateHeight(){
            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_920_updateHeight)
HXDLIN( 920)		int _g = 0;
HXDLIN( 920)		int _g1 = this->cds->length;
HXDLIN( 920)		while((_g < _g1)){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::objects::CDSprite,cd) HXARGC(1)
            			void _hx_run(Float val){
            				HX_STACKFRAME(&_hx_pos_22e2030ae3401175_941_updateHeight)
HXLINE( 941)				cd->setY(val);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXDLIN( 920)			_g = (_g + 1);
HXDLIN( 920)			int i = (_g - 1);
HXLINE( 921)			 ::objects::CDSprite cd = this->cds->__get(i).StaticCast<  ::objects::CDSprite >();
HXLINE( 922)			int prevIndex = ::hx::Mod((i + 1),this->positions->length);
HXLINE( 923)			Float from = this->positions->__get(prevIndex);
HXLINE( 924)			Float to = this->positions->__get(i);
HXLINE( 926)			Float targetY = cd->y;
HXLINE( 928)			bool _hx_tmp;
HXDLIN( 928)			bool _hx_tmp1;
HXDLIN( 928)			if ((from == this->positions->__get(0))) {
HXLINE( 928)				_hx_tmp1 = (to == this->positions->__get(1));
            			}
            			else {
HXLINE( 928)				_hx_tmp1 = false;
            			}
HXDLIN( 928)			if (!(_hx_tmp1)) {
HXLINE( 928)				if ((from == this->positions->__get(4))) {
HXLINE( 928)					_hx_tmp = (to == this->positions->__get(3));
            				}
            				else {
HXLINE( 928)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 928)				_hx_tmp = true;
            			}
HXDLIN( 928)			if (_hx_tmp) {
HXLINE( 929)				targetY = ( (Float)(275) );
            			}
            			else {
HXLINE( 930)				bool _hx_tmp2;
HXDLIN( 930)				bool _hx_tmp3;
HXDLIN( 930)				if ((from == this->positions->__get(1))) {
HXLINE( 930)					_hx_tmp3 = (to == this->positions->__get(2));
            				}
            				else {
HXLINE( 930)					_hx_tmp3 = false;
            				}
HXDLIN( 930)				if (!(_hx_tmp3)) {
HXLINE( 930)					if ((from == this->positions->__get(3))) {
HXLINE( 930)						_hx_tmp2 = (to == this->positions->__get(2));
            					}
            					else {
HXLINE( 930)						_hx_tmp2 = false;
            					}
            				}
            				else {
HXLINE( 930)					_hx_tmp2 = true;
            				}
HXDLIN( 930)				if (_hx_tmp2) {
HXLINE( 931)					targetY = ( (Float)(162) );
            				}
            				else {
HXLINE( 932)					bool _hx_tmp4;
HXDLIN( 932)					bool _hx_tmp5;
HXDLIN( 932)					if ((from == this->positions->__get(3))) {
HXLINE( 932)						_hx_tmp5 = (to == this->positions->__get(2));
            					}
            					else {
HXLINE( 932)						_hx_tmp5 = false;
            					}
HXDLIN( 932)					if (!(_hx_tmp5)) {
HXLINE( 932)						if ((from == this->positions->__get(2))) {
HXLINE( 932)							_hx_tmp4 = (to == this->positions->__get(1));
            						}
            						else {
HXLINE( 932)							_hx_tmp4 = false;
            						}
            					}
            					else {
HXLINE( 932)						_hx_tmp4 = true;
            					}
HXDLIN( 932)					if (_hx_tmp4) {
HXLINE( 933)						targetY = ( (Float)(275) );
            					}
            					else {
HXLINE( 934)						bool _hx_tmp6;
HXDLIN( 934)						bool _hx_tmp7;
HXDLIN( 934)						if ((from == this->positions->__get(3))) {
HXLINE( 934)							_hx_tmp7 = (to == this->positions->__get(4));
            						}
            						else {
HXLINE( 934)							_hx_tmp7 = false;
            						}
HXDLIN( 934)						if (!(_hx_tmp7)) {
HXLINE( 934)							if ((from == this->positions->__get(1))) {
HXLINE( 934)								_hx_tmp6 = (to == this->positions->__get(0));
            							}
            							else {
HXLINE( 934)								_hx_tmp6 = false;
            							}
            						}
            						else {
HXLINE( 934)							_hx_tmp6 = true;
            						}
HXDLIN( 934)						if (_hx_tmp6) {
HXLINE( 935)							targetY = ( (Float)(::flixel::FlxG_obj::height) );
            						}
            						else {
HXLINE( 936)							bool _hx_tmp8;
HXDLIN( 936)							bool _hx_tmp9;
HXDLIN( 936)							if ((from == this->positions->__get(0))) {
HXLINE( 936)								_hx_tmp9 = (to == this->positions->__get(4));
            							}
            							else {
HXLINE( 936)								_hx_tmp9 = false;
            							}
HXDLIN( 936)							if (!(_hx_tmp9)) {
HXLINE( 936)								if ((from == this->positions->__get(4))) {
HXLINE( 936)									_hx_tmp8 = (to == this->positions->__get(0));
            								}
            								else {
HXLINE( 936)									_hx_tmp8 = false;
            								}
            							}
            							else {
HXLINE( 936)								_hx_tmp8 = true;
            							}
HXDLIN( 936)							if (_hx_tmp8) {
HXLINE( 937)								targetY = ( (Float)(::flixel::FlxG_obj::height) );
            							}
            						}
            					}
            				}
            			}
HXLINE( 940)			::flixel::tweens::FlxTween_obj::num(cd->y,targetY,((Float)0.33), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::sineInOut_dyn())), ::Dynamic(new _hx_Closure_0(cd)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FreeplayState_obj,updateHeight,(void))

void FreeplayState_obj::updateSize(){
            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_947_updateSize)
HXDLIN( 947)		int _g = 0;
HXDLIN( 947)		int _g1 = this->cds->length;
HXDLIN( 947)		while((_g < _g1)){
HXDLIN( 947)			_g = (_g + 1);
HXDLIN( 947)			int i = (_g - 1);
HXLINE( 948)			 ::objects::CDSprite cd = this->cds->__get(i).StaticCast<  ::objects::CDSprite >();
HXLINE( 949)			int prevIndex = ::hx::Mod((i + 1),this->positions->length);
HXLINE( 950)			Float from = this->positions->__get(prevIndex);
HXLINE( 951)			Float to = this->positions->__get(i);
HXLINE( 953)			bool _hx_tmp;
HXDLIN( 953)			bool _hx_tmp1;
HXDLIN( 953)			if ((from == this->positions->__get(0))) {
HXLINE( 953)				_hx_tmp1 = (to == this->positions->__get(1));
            			}
            			else {
HXLINE( 953)				_hx_tmp1 = false;
            			}
HXDLIN( 953)			if (!(_hx_tmp1)) {
HXLINE( 953)				if ((from == this->positions->__get(4))) {
HXLINE( 953)					_hx_tmp = (to == this->positions->__get(3));
            				}
            				else {
HXLINE( 953)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 953)				_hx_tmp = true;
            			}
HXDLIN( 953)			if (_hx_tmp) {
HXLINE( 954)				cd->tweenScale(true);
            			}
            			else {
HXLINE( 955)				bool _hx_tmp2;
HXDLIN( 955)				bool _hx_tmp3;
HXDLIN( 955)				if ((from == this->positions->__get(1))) {
HXLINE( 955)					_hx_tmp3 = (to == this->positions->__get(2));
            				}
            				else {
HXLINE( 955)					_hx_tmp3 = false;
            				}
HXDLIN( 955)				if (!(_hx_tmp3)) {
HXLINE( 955)					if ((from == this->positions->__get(3))) {
HXLINE( 955)						_hx_tmp2 = (to == this->positions->__get(2));
            					}
            					else {
HXLINE( 955)						_hx_tmp2 = false;
            					}
            				}
            				else {
HXLINE( 955)					_hx_tmp2 = true;
            				}
HXDLIN( 955)				if (_hx_tmp2) {
HXLINE( 956)					cd->tweenScale(null());
            				}
            				else {
HXLINE( 957)					bool _hx_tmp4;
HXDLIN( 957)					bool _hx_tmp5;
HXDLIN( 957)					if ((from == this->positions->__get(3))) {
HXLINE( 957)						_hx_tmp5 = (to == this->positions->__get(2));
            					}
            					else {
HXLINE( 957)						_hx_tmp5 = false;
            					}
HXDLIN( 957)					if (!(_hx_tmp5)) {
HXLINE( 957)						if ((from == this->positions->__get(2))) {
HXLINE( 957)							_hx_tmp4 = (to == this->positions->__get(1));
            						}
            						else {
HXLINE( 957)							_hx_tmp4 = false;
            						}
            					}
            					else {
HXLINE( 957)						_hx_tmp4 = true;
            					}
HXDLIN( 957)					if (_hx_tmp4) {
HXLINE( 958)						cd->tweenScale(true);
            					}
            					else {
HXLINE( 959)						bool _hx_tmp6;
HXDLIN( 959)						bool _hx_tmp7;
HXDLIN( 959)						if ((from == this->positions->__get(3))) {
HXLINE( 959)							_hx_tmp7 = (to == this->positions->__get(4));
            						}
            						else {
HXLINE( 959)							_hx_tmp7 = false;
            						}
HXDLIN( 959)						if (!(_hx_tmp7)) {
HXLINE( 959)							if ((from == this->positions->__get(1))) {
HXLINE( 959)								_hx_tmp6 = (to == this->positions->__get(0));
            							}
            							else {
HXLINE( 959)								_hx_tmp6 = false;
            							}
            						}
            						else {
HXLINE( 959)							_hx_tmp6 = true;
            						}
HXDLIN( 959)						if (_hx_tmp6) {
HXLINE( 960)							cd->tweenScale(true);
            						}
            						else {
HXLINE( 961)							bool _hx_tmp8;
HXDLIN( 961)							bool _hx_tmp9;
HXDLIN( 961)							if ((from == this->positions->__get(0))) {
HXLINE( 961)								_hx_tmp9 = (to == this->positions->__get(4));
            							}
            							else {
HXLINE( 961)								_hx_tmp9 = false;
            							}
HXDLIN( 961)							if (!(_hx_tmp9)) {
HXLINE( 961)								if ((from == this->positions->__get(4))) {
HXLINE( 961)									_hx_tmp8 = (to == this->positions->__get(0));
            								}
            								else {
HXLINE( 961)									_hx_tmp8 = false;
            								}
            							}
            							else {
HXLINE( 961)								_hx_tmp8 = true;
            							}
HXDLIN( 961)							if (_hx_tmp8) {
HXLINE( 962)								cd->tweenScale(true);
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FreeplayState_obj,updateSize,(void))

void FreeplayState_obj::updateBump(){
            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_969_updateBump)
HXDLIN( 969)		 ::states::FreeplayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 970)		{
HXLINE( 970)			int _g = 0;
HXDLIN( 970)			::Array< ::Dynamic> _g1 = this->cds;
HXDLIN( 970)			while((_g < _g1->length)){
HXLINE( 970)				 ::objects::CDSprite cd = _g1->__get(_g).StaticCast<  ::objects::CDSprite >();
HXDLIN( 970)				_g = (_g + 1);
HXLINE( 971)				::String leSongName = cd->getName();
HXLINE( 972)				 ::Dynamic bpm;
HXDLIN( 972)				if (this->musicBPM->exists(leSongName)) {
HXLINE( 972)					bpm = this->musicBPM->get(leSongName);
            				}
            				else {
HXLINE( 972)					bpm = this->musicBPM->get(HX_("default",c1,d8,c3,9b));
            				}
HXLINE( 974)				if ((cd->x == this->positions->__get(2))) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::FreeplayState,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer _){
            						HX_STACKFRAME(&_hx_pos_22e2030ae3401175_976_updateBump)
HXLINE( 977)						_gthis->sam->animation->play(HX_("I",49,00,00,00),null(),null(),null());
HXLINE( 978)						_gthis->jade->animation->play(HX_("I",49,00,00,00),null(),null(),null());
HXLINE( 979)						_gthis->updateBump();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 975)					this->idleTimer->cancel();
HXLINE( 976)					 ::flixel::util::FlxTimer _hx_tmp = this->idleTimer;
HXDLIN( 976)					_hx_tmp->start(::backend::BeCI_obj::bpm(( (Float)(1) ),( (int)(bpm) )), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FreeplayState_obj,updateBump,(void))

void FreeplayState_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_990_getName)
HXDLIN( 990)		int _g = 0;
HXDLIN( 990)		::Array< ::Dynamic> _g1 = this->cds;
HXDLIN( 990)		while((_g < _g1->length)){
HXDLIN( 990)			 ::objects::CDSprite cd = _g1->__get(_g).StaticCast<  ::objects::CDSprite >();
HXDLIN( 990)			_g = (_g + 1);
HXLINE( 991)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 991)			::String _hx_tmp1 = ((HX_("CD -> x: ",8e,ec,ac,5f) + cd->x) + HX_(", visible: ",a4,96,12,3f));
HXDLIN( 991)			::String _hx_tmp2 = ((_hx_tmp1 + ::Std_obj::string(cd->visible)) + HX_(", name: ",25,83,d3,24));
HXDLIN( 991)			::String _hx_tmp3 = ((_hx_tmp2 + cd->getName()) + HX_(", True name: ",2f,c2,8b,68));
HXDLIN( 991)			::String _hx_tmp4 = (_hx_tmp3 + cd->getTrueName());
HXDLIN( 991)			_hx_tmp(_hx_tmp4,::hx::SourceInfo(HX_("source/states/FreeplayState.hx",66,70,4c,e9),991,HX_("states.FreeplayState",05,25,9c,c9),HX_("getName",01,22,82,1b)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FreeplayState_obj,getName,(void))

void FreeplayState_obj::updateCDSpin(){
            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_996_updateCDSpin)
HXDLIN( 996)		int _g = 0;
HXDLIN( 996)		::Array< ::Dynamic> _g1 = this->cds;
HXDLIN( 996)		while((_g < _g1->length)){
HXDLIN( 996)			 ::objects::CDSprite cd = _g1->__get(_g).StaticCast<  ::objects::CDSprite >();
HXDLIN( 996)			_g = (_g + 1);
HXLINE( 997)			::String leSongName = cd->getName();
HXLINE( 998)			 ::Dynamic bpm;
HXDLIN( 998)			if (this->musicBPM->exists(leSongName)) {
HXLINE( 998)				bpm = this->musicBPM->get(leSongName);
            			}
            			else {
HXLINE( 998)				bpm = this->musicBPM->get(HX_("default",c1,d8,c3,9b));
            			}
HXLINE(1000)			if ((cd->x == this->positions->__get(2))) {
HXLINE(1001)				cd->spinCD(::backend::BeCI_obj::bpm(( (Float)(8) ),( (int)(bpm) )));
HXLINE(1002)				this->songNameText->set_text((HX_("",00,00,00,00) + leSongName));
HXLINE(1003)				this->songNameShadow->set_text((HX_("",00,00,00,00) + leSongName));
            			}
            			else {
HXLINE(1006)				cd->stopSpinCD();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FreeplayState_obj,updateCDSpin,(void))

void FreeplayState_obj::checkHover( ::flixel::FlxSprite sprite, ::flixel::FlxSprite outline,::String normal){
            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_1020_checkHover)
HXDLIN(1020)		if (sprite->overlapsPoint(::flixel::FlxG_obj::mouse->getScreenPosition(null(),null()),null(),null())) {
HXLINE(1021)			outline->set_visible(true);
HXLINE(1023)			if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE(1024)				sprite->loadGraphic(::backend::Paths_obj::image((normal + HX_("Press",63,c3,b5,5b)),null(),null()),null(),null(),null(),null(),null());
HXLINE(1025)				outline->loadGraphic(::backend::Paths_obj::image(((normal + HX_("Outline",62,3f,0f,af)) + HX_("Press",63,c3,b5,5b)),null(),null()),null(),null(),null(),null(),null());
HXLINE(1026)				if (::hx::IsInstanceEq( sprite,this->left )) {
HXLINE(1028)					this->shiftRight();
            				}
HXLINE(1030)				if (::hx::IsInstanceEq( sprite,this->right )) {
HXLINE(1032)					this->shiftLeft();
            				}
HXLINE(1034)				if (::hx::IsInstanceEq( sprite,this->play )) {
HXLINE(1036)					this->getName();
HXLINE(1037)					this->shiftDown();
            				}
            			}
            			else {
HXLINE(1040)				sprite->loadGraphic(::backend::Paths_obj::image(normal,null(),null()),null(),null(),null(),null(),null());
HXLINE(1041)				outline->loadGraphic(::backend::Paths_obj::image((normal + HX_("Outline",62,3f,0f,af)),null(),null()),null(),null(),null(),null(),null());
            			}
            		}
            		else {
HXLINE(1044)			outline->set_visible(false);
HXLINE(1045)			sprite->loadGraphic(::backend::Paths_obj::image(normal,null(),null()),null(),null(),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FreeplayState_obj,checkHover,(void))

void FreeplayState_obj::changeDiff(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_22e2030ae3401175_1059_changeDiff)
HXLINE(1060)		if (this->player->playingMusic) {
HXLINE(1061)			return;
            		}
HXLINE(1063)		 ::states::FreeplayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1063)		_hx_tmp->curDifficulty = (_hx_tmp->curDifficulty + change);
HXLINE(1065)		if ((this->curDifficulty < 0)) {
HXLINE(1066)			this->curDifficulty = (::backend::Difficulty_obj::list->length - 1);
            		}
HXLINE(1067)		if ((this->curDifficulty >= ::backend::Difficulty_obj::list->length)) {
HXLINE(1068)			this->curDifficulty = 0;
            		}
HXLINE(1071)		this->intendedScore = ::backend::Highscore_obj::getScore(this->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->songName,this->curDifficulty);
HXLINE(1072)		this->intendedRating = ::backend::Highscore_obj::getRating(this->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->songName,this->curDifficulty);
HXLINE(1075)		 ::Dynamic num = this->curDifficulty;
HXDLIN(1075)		 ::Dynamic diffName;
HXDLIN(1075)		if (::hx::IsNull( num )) {
HXLINE(1075)			diffName = ::states::PlayState_obj::storyDifficulty;
            		}
            		else {
HXLINE(1075)			diffName = num;
            		}
HXDLIN(1075)		::String diffName1 = ::backend::Difficulty_obj::list->__get(( (int)(diffName) ));
HXDLIN(1075)		if (::hx::IsNull( diffName1 )) {
HXLINE(  64)			diffName1 = ::backend::Difficulty_obj::defaultDifficulty;
            		}
HXLINE(1075)		::String key = (HX_("difficulty_",c4,25,f6,54) + diffName1);
HXDLIN(1075)		::cpp::VirtualArray values = null();
HXDLIN(1075)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(1075)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN(1075)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(key,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN(1075)		if (::hx::IsNull( str )) {
HXLINE(  62)			str = diffName1;
            		}
HXLINE(1075)		if (::hx::IsNull( str )) {
HXLINE(  68)			str = key;
            		}
HXLINE(1075)		if (::hx::IsNotNull( values )) {
HXLINE(1075)			int _g_current = 0;
HXDLIN(1075)			::cpp::VirtualArray _g_array = values;
HXDLIN(1075)			while((_g_current < _g_array->get_length())){
HXLINE(1075)				 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN(1075)				_g_current = (_g_current + 1);
HXDLIN(1075)				int _g_key = (_g_current - 1);
HXDLIN(1075)				int num1 = _g_key;
HXDLIN(1075)				 ::Dynamic value = _g_value;
HXLINE(  72)				str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num1 + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            			}
            		}
HXLINE(1075)		::states::FreeplayState_obj::lastDifficultyName = str;
HXLINE(1076)		if ((::backend::Difficulty_obj::list->length > 1)) {
HXLINE(1077)			 ::flixel::text::FlxText _hx_tmp1 = this->diffText;
HXDLIN(1077)			_hx_tmp1->set_text(((HX_("< ",64,34,00,00) + ::states::FreeplayState_obj::lastDifficultyName.toUpperCase()) + HX_(" >",1e,1c,00,00)));
            		}
            		else {
HXLINE(1079)			 ::flixel::text::FlxText _hx_tmp2 = this->diffText;
HXDLIN(1079)			_hx_tmp2->set_text(::states::FreeplayState_obj::lastDifficultyName.toUpperCase());
            		}
HXLINE(1081)		this->positionHighscore();
HXLINE(1082)		this->missingText->set_visible(false);
HXLINE(1083)		this->missingTextBG->set_visible(false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FreeplayState_obj,changeDiff,(void))

void FreeplayState_obj::changeSelection(::hx::Null< int >  __o_change,::hx::Null< bool >  __o_playSound){
            		int change = __o_change.Default(0);
            		bool playSound = __o_playSound.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_22e2030ae3401175_1087_changeSelection)
HXDLIN(1087)		 ::states::FreeplayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1088)		if (this->player->playingMusic) {
HXLINE(1089)			return;
            		}
HXLINE(1091)		 ::Dynamic num = this->curDifficulty;
HXDLIN(1091)		 ::Dynamic diffName;
HXDLIN(1091)		if (::hx::IsNull( num )) {
HXLINE(1091)			diffName = ::states::PlayState_obj::storyDifficulty;
            		}
            		else {
HXLINE(1091)			diffName = num;
            		}
HXDLIN(1091)		::String diffName1 = ::backend::Difficulty_obj::list->__get(( (int)(diffName) ));
HXDLIN(1091)		if (::hx::IsNull( diffName1 )) {
HXLINE(  64)			diffName1 = ::backend::Difficulty_obj::defaultDifficulty;
            		}
HXLINE(1091)		::String key = (HX_("difficulty_",c4,25,f6,54) + diffName1);
HXDLIN(1091)		::cpp::VirtualArray values = null();
HXDLIN(1091)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(1091)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN(1091)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(key,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN(1091)		if (::hx::IsNull( str )) {
HXLINE(  62)			str = diffName1;
            		}
HXLINE(1091)		if (::hx::IsNull( str )) {
HXLINE(  68)			str = key;
            		}
HXLINE(1091)		if (::hx::IsNotNull( values )) {
HXLINE(1091)			int _g_current = 0;
HXDLIN(1091)			::cpp::VirtualArray _g_array = values;
HXDLIN(1091)			while((_g_current < _g_array->get_length())){
HXLINE(1091)				 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN(1091)				_g_current = (_g_current + 1);
HXDLIN(1091)				int _g_key = (_g_current - 1);
HXDLIN(1091)				int num1 = _g_key;
HXDLIN(1091)				 ::Dynamic value = _g_value;
HXLINE(  72)				str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num1 + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            			}
            		}
HXLINE(1091)		this->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->lastDifficulty = str;
HXLINE(1092)		if (playSound) {
HXLINE(1092)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1092)			_hx_tmp->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("scrollMenu",4c,d4,18,06)),null(),true,null()),((Float)0.4),null(),null(),null(),null());
            		}
HXLINE(1094)		::Array< ::String > lastList = ::backend::Difficulty_obj::list;
HXLINE(1095)		 ::Dynamic _hx_tmp1 = ::hx::ClassOf< ::states::FreeplayState >();
HXDLIN(1095)		::states::FreeplayState_obj::curSelected = (::states::FreeplayState_obj::curSelected + change);
HXLINE(1097)		if ((::states::FreeplayState_obj::curSelected < 0)) {
HXLINE(1098)			::states::FreeplayState_obj::curSelected = (this->songs->length - 1);
            		}
HXLINE(1099)		if ((::states::FreeplayState_obj::curSelected >= this->songs->length)) {
HXLINE(1100)			::states::FreeplayState_obj::curSelected = 0;
            		}
HXLINE(1102)		int newColor = this->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->color;
HXLINE(1103)		if ((newColor != this->intendedColor)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::FreeplayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween twn){
            				HX_GC_STACKFRAME(&_hx_pos_22e2030ae3401175_1110_changeSelection)
HXLINE(1110)				_gthis->colorTween = null();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1104)			if (::hx::IsNotNull( this->colorTween )) {
HXLINE(1105)				this->colorTween->cancel();
            			}
HXLINE(1107)			this->intendedColor = newColor;
HXLINE(1108)			this->colorTween = ::flixel::tweens::FlxTween_obj::color(this->bg,1,this->bg->color,this->intendedColor, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            		}
HXLINE(1117)		int bullShit = 0;
HXLINE(1119)		{
HXLINE(1119)			int _g = 0;
HXDLIN(1119)			int _g1 = this->iconArray->length;
HXDLIN(1119)			while((_g < _g1)){
HXLINE(1119)				_g = (_g + 1);
HXDLIN(1119)				int i = (_g - 1);
HXLINE(1121)				this->iconArray->__get(i).StaticCast<  ::objects::HealthIcon >()->set_alpha(((Float)0.6));
            			}
            		}
HXLINE(1124)		this->iconArray->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::objects::HealthIcon >()->set_alpha(( (Float)(1) ));
HXLINE(1126)		{
HXLINE(1126)			int _g2 = 0;
HXDLIN(1126)			::Array< ::Dynamic> _g3 = this->grpSongs->members;
HXDLIN(1126)			while((_g2 < _g3->length)){
HXLINE(1126)				 ::objects::Alphabet item = _g3->__get(_g2).StaticCast<  ::objects::Alphabet >();
HXDLIN(1126)				_g2 = (_g2 + 1);
HXLINE(1128)				bullShit = (bullShit + 1);
HXLINE(1129)				item->set_alpha(((Float)0.6));
HXLINE(1130)				if ((item->targetY == ::states::FreeplayState_obj::curSelected)) {
HXLINE(1131)					item->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
HXLINE(1134)		::backend::Mods_obj::currentModDirectory = this->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->folder;
HXLINE(1135)		::states::PlayState_obj::storyWeek = this->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->week;
HXLINE(1136)		{
HXLINE(1136)			 ::backend::WeekData week = null();
HXDLIN(1136)			if (::hx::IsNull( week )) {
HXLINE(  28)				week = ::backend::WeekData_obj::getCurrentWeek();
            			}
HXLINE(1136)			::String diffStr = week->difficulties;
HXDLIN(1136)			bool _hx_tmp2;
HXDLIN(1136)			if (::hx::IsNotNull( diffStr )) {
HXLINE(1136)				_hx_tmp2 = (diffStr.length > 0);
            			}
            			else {
HXLINE(1136)				_hx_tmp2 = false;
            			}
HXDLIN(1136)			if (_hx_tmp2) {
HXLINE(1136)				::Array< ::String > diffs = ::StringTools_obj::trim(diffStr).split(HX_(",",2c,00,00,00));
HXDLIN(1136)				int i1 = (diffs->length - 1);
HXDLIN(1136)				while((i1 > 0)){
HXLINE(1136)					if (::hx::IsNotNull( diffs->__get(i1) )) {
HXLINE(1136)						diffs[i1] = ::StringTools_obj::trim(diffs->__get(i1));
HXDLIN(1136)						if ((diffs->__get(i1).length < 1)) {
HXLINE(1136)							diffs->remove(diffs->__get(i1));
            						}
            					}
HXDLIN(1136)					i1 = (i1 - 1);
            				}
HXDLIN(1136)				bool _hx_tmp3;
HXDLIN(1136)				if ((diffs->length > 0)) {
HXLINE(1136)					_hx_tmp3 = (diffs->__get(0).length > 0);
            				}
            				else {
HXLINE(1136)					_hx_tmp3 = false;
            				}
HXDLIN(1136)				if (_hx_tmp3) {
HXLINE(1136)					::backend::Difficulty_obj::list = diffs;
            				}
            			}
            			else {
HXLINE(1136)				::backend::Difficulty_obj::list = ::backend::Difficulty_obj::defaultList->copy();
            			}
            		}
HXLINE(1138)		::String savedDiff = this->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->lastDifficulty;
HXLINE(1139)		int lastDiff = ::backend::Difficulty_obj::list->indexOf(::states::FreeplayState_obj::lastDifficultyName,null());
HXLINE(1140)		bool _hx_tmp4;
HXDLIN(1140)		bool _hx_tmp5;
HXDLIN(1140)		if (::hx::IsNotNull( savedDiff )) {
HXLINE(1140)			_hx_tmp5 = !(lastList->contains(savedDiff));
            		}
            		else {
HXLINE(1140)			_hx_tmp5 = false;
            		}
HXDLIN(1140)		if (_hx_tmp5) {
HXLINE(1140)			_hx_tmp4 = ::backend::Difficulty_obj::list->contains(savedDiff);
            		}
            		else {
HXLINE(1140)			_hx_tmp4 = false;
            		}
HXDLIN(1140)		if (_hx_tmp4) {
HXLINE(1141)			this->curDifficulty = ::Math_obj::round(::Math_obj::max(( (Float)(0) ),( (Float)(::backend::Difficulty_obj::list->indexOf(savedDiff,null())) )));
            		}
            		else {
HXLINE(1142)			if ((lastDiff > -1)) {
HXLINE(1143)				this->curDifficulty = lastDiff;
            			}
            			else {
HXLINE(1144)				if (::backend::Difficulty_obj::list->contains(::backend::Difficulty_obj::defaultDifficulty)) {
HXLINE(1145)					this->curDifficulty = ::Math_obj::round(::Math_obj::max(( (Float)(0) ),( (Float)(::backend::Difficulty_obj::defaultList->indexOf(::backend::Difficulty_obj::defaultDifficulty,null())) )));
            				}
            				else {
HXLINE(1147)					this->curDifficulty = 0;
            				}
            			}
            		}
HXLINE(1149)		this->changeDiff(null());
HXLINE(1150)		 ::Dynamic num2 = this->curDifficulty;
HXDLIN(1150)		 ::Dynamic diffName2;
HXDLIN(1150)		if (::hx::IsNull( num2 )) {
HXLINE(1150)			diffName2 = ::states::PlayState_obj::storyDifficulty;
            		}
            		else {
HXLINE(1150)			diffName2 = num2;
            		}
HXDLIN(1150)		::String diffName3 = ::backend::Difficulty_obj::list->__get(( (int)(diffName2) ));
HXDLIN(1150)		if (::hx::IsNull( diffName3 )) {
HXLINE(  64)			diffName3 = ::backend::Difficulty_obj::defaultDifficulty;
            		}
HXLINE(1150)		::String key1 = (HX_("difficulty_",c4,25,f6,54) + diffName3);
HXDLIN(1150)		::cpp::VirtualArray values1 = null();
HXDLIN(1150)		::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN(1150)		 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN(1150)		::String str1 = ( ( ::haxe::ds::StringMap)(this2) )->get_string(::StringTools_obj::trim(hideChars1->replace(::StringTools_obj::replace(key1,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN(1150)		if (::hx::IsNull( str1 )) {
HXLINE(  62)			str1 = diffName3;
            		}
HXLINE(1150)		if (::hx::IsNull( str1 )) {
HXLINE(  68)			str1 = key1;
            		}
HXLINE(1150)		if (::hx::IsNotNull( values1 )) {
HXLINE(1150)			int _g_current1 = 0;
HXDLIN(1150)			::cpp::VirtualArray _g_array1 = values1;
HXDLIN(1150)			while((_g_current1 < _g_array1->get_length())){
HXLINE(1150)				 ::Dynamic _g_value1 = _g_array1->__get(_g_current1);
HXDLIN(1150)				_g_current1 = (_g_current1 + 1);
HXDLIN(1150)				int _g_key1 = (_g_current1 - 1);
HXDLIN(1150)				int num3 = _g_key1;
HXDLIN(1150)				 ::Dynamic value1 = _g_value1;
HXLINE(  72)				str1 = ::StringTools_obj::replace(str1,((HX_("{",7b,00,00,00) + (num3 + 1)) + HX_("}",7d,00,00,00)),( (::String)(value1) ));
            			}
            		}
HXLINE(1150)		this->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->lastDifficulty = str1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FreeplayState_obj,changeSelection,(void))

void FreeplayState_obj::_updateSongLastDifficulty(){
            	HX_GC_STACKFRAME(&_hx_pos_22e2030ae3401175_1155__updateSongLastDifficulty)
HXDLIN(1155)		 ::Dynamic num = this->curDifficulty;
HXDLIN(1155)		 ::Dynamic diffName;
HXDLIN(1155)		if (::hx::IsNull( num )) {
HXDLIN(1155)			diffName = ::states::PlayState_obj::storyDifficulty;
            		}
            		else {
HXDLIN(1155)			diffName = num;
            		}
HXDLIN(1155)		::String diffName1 = ::backend::Difficulty_obj::list->__get(( (int)(diffName) ));
HXDLIN(1155)		if (::hx::IsNull( diffName1 )) {
HXLINE(  64)			diffName1 = ::backend::Difficulty_obj::defaultDifficulty;
            		}
HXLINE(1155)		::String key = (HX_("difficulty_",c4,25,f6,54) + diffName1);
HXDLIN(1155)		::cpp::VirtualArray values = null();
HXDLIN(1155)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(1155)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN(1155)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(key,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN(1155)		if (::hx::IsNull( str )) {
HXLINE(  62)			str = diffName1;
            		}
HXLINE(1155)		if (::hx::IsNull( str )) {
HXLINE(  68)			str = key;
            		}
HXLINE(1155)		if (::hx::IsNotNull( values )) {
HXDLIN(1155)			int _g_current = 0;
HXDLIN(1155)			::cpp::VirtualArray _g_array = values;
HXDLIN(1155)			while((_g_current < _g_array->get_length())){
HXDLIN(1155)				 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN(1155)				_g_current = (_g_current + 1);
HXDLIN(1155)				int _g_key = (_g_current - 1);
HXDLIN(1155)				int num1 = _g_key;
HXDLIN(1155)				 ::Dynamic value = _g_value;
HXLINE(  72)				str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num1 + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            			}
            		}
HXLINE(1155)		this->songs->__get(::states::FreeplayState_obj::curSelected).StaticCast<  ::states::SongMetadata >()->lastDifficulty = str;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FreeplayState_obj,_updateSongLastDifficulty,(void))

void FreeplayState_obj::positionHighscore(){
            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_1158_positionHighscore)
            	}


HX_DEFINE_DYNAMIC_FUNC0(FreeplayState_obj,positionHighscore,(void))

void FreeplayState_obj::updateTexts(::hx::Null< Float >  __o_elapsed){
            		Float elapsed = __o_elapsed.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_1169_updateTexts)
HXLINE(1170)		Float a = ( (Float)(::states::FreeplayState_obj::curSelected) );
HXDLIN(1170)		this->lerpSelected = (a + (::Math_obj::exp((-(elapsed) * ((Float)9.6))) * (this->lerpSelected - a)));
HXLINE(1171)		{
HXLINE(1171)			int _g = 0;
HXDLIN(1171)			::Array< int > _g1 = this->_lastVisibles;
HXDLIN(1171)			while((_g < _g1->length)){
HXLINE(1171)				int i = _g1->__get(_g);
HXDLIN(1171)				_g = (_g + 1);
HXLINE(1173)				 ::objects::Alphabet _hx_tmp = Dynamic( this->grpSongs->members->__get(i)).StaticCast<  ::objects::Alphabet >();
HXDLIN(1173)				_hx_tmp->set_visible(Dynamic( this->grpSongs->members->__get(i)).StaticCast<  ::objects::Alphabet >()->set_active(false));
HXLINE(1174)				 ::objects::HealthIcon _hx_tmp1 = this->iconArray->__get(i).StaticCast<  ::objects::HealthIcon >();
HXDLIN(1174)				_hx_tmp1->set_visible(this->iconArray->__get(i).StaticCast<  ::objects::HealthIcon >()->set_active(false));
            			}
            		}
HXLINE(1176)		this->_lastVisibles = ::Array_obj< int >::__new(0);
HXLINE(1178)		int min = ::Math_obj::round(::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(this->songs->length) ),(this->lerpSelected - ( (Float)(this->_drawDistance) )))));
HXLINE(1179)		int max = ::Math_obj::round(::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(this->songs->length) ),(this->lerpSelected + this->_drawDistance))));
HXLINE(1180)		{
HXLINE(1180)			int _g2 = min;
HXDLIN(1180)			int _g3 = max;
HXDLIN(1180)			while((_g2 < _g3)){
HXLINE(1180)				_g2 = (_g2 + 1);
HXDLIN(1180)				int i1 = (_g2 - 1);
HXLINE(1182)				 ::objects::Alphabet item = Dynamic( this->grpSongs->members->__get(i1)).StaticCast<  ::objects::Alphabet >();
HXLINE(1183)				item->set_visible(item->set_active(true));
HXLINE(1184)				item->set_x((((( (Float)(item->targetY) ) - this->lerpSelected) * item->distancePerItem->x) + item->startPosition->x));
HXLINE(1185)				item->set_y(((((( (Float)(item->targetY) ) - this->lerpSelected) * ((Float)1.3)) * item->distancePerItem->y) + item->startPosition->y));
HXLINE(1187)				 ::objects::HealthIcon icon = this->iconArray->__get(i1).StaticCast<  ::objects::HealthIcon >();
HXLINE(1188)				icon->set_visible(icon->set_active(true));
HXLINE(1189)				this->_lastVisibles->push(i1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FreeplayState_obj,updateTexts,(void))

void FreeplayState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_1194_destroy)
HXLINE(1195)		this->super::destroy();
HXLINE(1197)		::flixel::FlxG_obj::autoPause = ::backend::ClientPrefs_obj::data->autoPause;
HXLINE(1198)		if (::hx::IsNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(1199)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1199)			_hx_tmp->playMusic(::backend::Paths_obj::returnSound((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)),null(),true,null()),null(),null(),null());
            		}
            	}


int FreeplayState_obj::curSelected;

::String FreeplayState_obj::lastDifficultyName;

 ::haxe::ds::StringMap FreeplayState_obj::loadBPMData(){
            	HX_GC_STACKFRAME(&_hx_pos_22e2030ae3401175_117_loadBPMData)
HXLINE( 118)		::String rawJson = null();
HXLINE( 119)		 ::haxe::ds::StringMap bpmMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 121)		if (::hx::IsNull( rawJson )) {
HXLINE( 122)			::String folder = null();
HXDLIN( 122)			::String path = ::backend::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("bpmData",a9,9c,19,a3)) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),folder,true);
HXLINE( 124)			if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 125)				rawJson = ::StringTools_obj::trim(::sys::io::File_obj::getContent(path));
            			}
            			else {
HXLINE( 128)				::String folder1 = null();
HXDLIN( 128)				rawJson = ::StringTools_obj::trim(::lime::utils::Assets_obj::getText(::backend::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("bpmData",a9,9c,19,a3)) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),folder1,true)));
            			}
            		}
HXLINE( 131)		 ::Dynamic data =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,rawJson)->doParse();
HXLINE( 133)		::cpp::VirtualArray bpmList = ( (::cpp::VirtualArray)(data->__Field(HX_("bpmMap",fd,58,21,f4),::hx::paccDynamic)) );
HXLINE( 134)		{
HXLINE( 134)			int _g = 0;
HXDLIN( 134)			while((_g < bpmList->get_length())){
HXLINE( 134)				 ::Dynamic entry = bpmList->__get(_g);
HXDLIN( 134)				_g = (_g + 1);
HXLINE( 135)				::String name = ( (::String)(entry->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
HXLINE( 136)				int bpm = ( (int)(entry->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 137)				bpmMap->set(name,bpm);
            			}
            		}
HXLINE( 140)		return bpmMap;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FreeplayState_obj,loadBPMData,return )

 ::flixel::sound::FlxSound FreeplayState_obj::vocals;

 ::flixel::sound::FlxSound FreeplayState_obj::opponentVocals;

void FreeplayState_obj::destroyFreeplayVocals(){
            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_1049_destroyFreeplayVocals)
HXLINE(1050)		if (::hx::IsNotNull( ::states::FreeplayState_obj::vocals )) {
HXLINE(1050)			 ::flixel::sound::FlxSound _this = ::states::FreeplayState_obj::vocals;
HXDLIN(1050)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(1051)		::states::FreeplayState_obj::vocals = ( ( ::flixel::sound::FlxSound)(::flixel::util::FlxDestroyUtil_obj::destroy(::states::FreeplayState_obj::vocals)) );
HXLINE(1053)		if (::hx::IsNotNull( ::states::FreeplayState_obj::opponentVocals )) {
HXLINE(1053)			 ::flixel::sound::FlxSound _this1 = ::states::FreeplayState_obj::opponentVocals;
HXDLIN(1053)			_this1->cleanup(_this1->autoDestroy,true);
            		}
HXLINE(1054)		::states::FreeplayState_obj::opponentVocals = ( ( ::flixel::sound::FlxSound)(::flixel::util::FlxDestroyUtil_obj::destroy(::states::FreeplayState_obj::opponentVocals)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FreeplayState_obj,destroyFreeplayVocals,(void))


::hx::ObjectPtr< FreeplayState_obj > FreeplayState_obj::__new() {
	::hx::ObjectPtr< FreeplayState_obj > __this = new FreeplayState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< FreeplayState_obj > FreeplayState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	FreeplayState_obj *__this = (FreeplayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FreeplayState_obj), true, "states.FreeplayState"));
	*(void **)__this = FreeplayState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FreeplayState_obj::FreeplayState_obj()
{
}

void FreeplayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FreeplayState);
	HX_MARK_MEMBER_NAME(songs,"songs");
	HX_MARK_MEMBER_NAME(selector,"selector");
	HX_MARK_MEMBER_NAME(lerpSelected,"lerpSelected");
	HX_MARK_MEMBER_NAME(curDifficulty,"curDifficulty");
	HX_MARK_MEMBER_NAME(scoreBG,"scoreBG");
	HX_MARK_MEMBER_NAME(diffText,"diffText");
	HX_MARK_MEMBER_NAME(lerpScore,"lerpScore");
	HX_MARK_MEMBER_NAME(lerpRating,"lerpRating");
	HX_MARK_MEMBER_NAME(intendedScore,"intendedScore");
	HX_MARK_MEMBER_NAME(intendedRating,"intendedRating");
	HX_MARK_MEMBER_NAME(grpSongs,"grpSongs");
	HX_MARK_MEMBER_NAME(curPlaying,"curPlaying");
	HX_MARK_MEMBER_NAME(iconArray,"iconArray");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(intendedColor,"intendedColor");
	HX_MARK_MEMBER_NAME(colorTween,"colorTween");
	HX_MARK_MEMBER_NAME(missingTextBG,"missingTextBG");
	HX_MARK_MEMBER_NAME(missingText,"missingText");
	HX_MARK_MEMBER_NAME(bottomString,"bottomString");
	HX_MARK_MEMBER_NAME(bottomText,"bottomText");
	HX_MARK_MEMBER_NAME(bottomBG,"bottomBG");
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(freeplay,"freeplay");
	HX_MARK_MEMBER_NAME(cd,"cd");
	HX_MARK_MEMBER_NAME(notcd,"notcd");
	HX_MARK_MEMBER_NAME(back,"back");
	HX_MARK_MEMBER_NAME(checked,"checked");
	HX_MARK_MEMBER_NAME(base,"base");
	HX_MARK_MEMBER_NAME(outlineLeft,"outlineLeft");
	HX_MARK_MEMBER_NAME(outlineRight,"outlineRight");
	HX_MARK_MEMBER_NAME(left,"left");
	HX_MARK_MEMBER_NAME(right,"right");
	HX_MARK_MEMBER_NAME(outlinePlay,"outlinePlay");
	HX_MARK_MEMBER_NAME(play,"play");
	HX_MARK_MEMBER_NAME(artist,"artist");
	HX_MARK_MEMBER_NAME(artistName,"artistName");
	HX_MARK_MEMBER_NAME(composer,"composer");
	HX_MARK_MEMBER_NAME(composerName,"composerName");
	HX_MARK_MEMBER_NAME(songNameText,"songNameText");
	HX_MARK_MEMBER_NAME(songNameShadow,"songNameShadow");
	HX_MARK_MEMBER_NAME(scoreText,"scoreText");
	HX_MARK_MEMBER_NAME(scoreTextShadow,"scoreTextShadow");
	HX_MARK_MEMBER_NAME(highscore,"highscore");
	HX_MARK_MEMBER_NAME(highscoreShadow,"highscoreShadow");
	HX_MARK_MEMBER_NAME(ref,"ref");
	HX_MARK_MEMBER_NAME(jade,"jade");
	HX_MARK_MEMBER_NAME(sam,"sam");
	HX_MARK_MEMBER_NAME(kinito,"kinito");
	HX_MARK_MEMBER_NAME(sprites,"sprites");
	HX_MARK_MEMBER_NAME(cds,"cds");
	HX_MARK_MEMBER_NAME(positions,"positions");
	HX_MARK_MEMBER_NAME(musicBPM,"musicBPM");
	HX_MARK_MEMBER_NAME(instPlaying,"instPlaying");
	HX_MARK_MEMBER_NAME(holdTime,"holdTime");
	HX_MARK_MEMBER_NAME(isBusy,"isBusy");
	HX_MARK_MEMBER_NAME(idleTimer,"idleTimer");
	HX_MARK_MEMBER_NAME(_drawDistance,"_drawDistance");
	HX_MARK_MEMBER_NAME(_lastVisibles,"_lastVisibles");
	 ::backend::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FreeplayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(songs,"songs");
	HX_VISIT_MEMBER_NAME(selector,"selector");
	HX_VISIT_MEMBER_NAME(lerpSelected,"lerpSelected");
	HX_VISIT_MEMBER_NAME(curDifficulty,"curDifficulty");
	HX_VISIT_MEMBER_NAME(scoreBG,"scoreBG");
	HX_VISIT_MEMBER_NAME(diffText,"diffText");
	HX_VISIT_MEMBER_NAME(lerpScore,"lerpScore");
	HX_VISIT_MEMBER_NAME(lerpRating,"lerpRating");
	HX_VISIT_MEMBER_NAME(intendedScore,"intendedScore");
	HX_VISIT_MEMBER_NAME(intendedRating,"intendedRating");
	HX_VISIT_MEMBER_NAME(grpSongs,"grpSongs");
	HX_VISIT_MEMBER_NAME(curPlaying,"curPlaying");
	HX_VISIT_MEMBER_NAME(iconArray,"iconArray");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(intendedColor,"intendedColor");
	HX_VISIT_MEMBER_NAME(colorTween,"colorTween");
	HX_VISIT_MEMBER_NAME(missingTextBG,"missingTextBG");
	HX_VISIT_MEMBER_NAME(missingText,"missingText");
	HX_VISIT_MEMBER_NAME(bottomString,"bottomString");
	HX_VISIT_MEMBER_NAME(bottomText,"bottomText");
	HX_VISIT_MEMBER_NAME(bottomBG,"bottomBG");
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(freeplay,"freeplay");
	HX_VISIT_MEMBER_NAME(cd,"cd");
	HX_VISIT_MEMBER_NAME(notcd,"notcd");
	HX_VISIT_MEMBER_NAME(back,"back");
	HX_VISIT_MEMBER_NAME(checked,"checked");
	HX_VISIT_MEMBER_NAME(base,"base");
	HX_VISIT_MEMBER_NAME(outlineLeft,"outlineLeft");
	HX_VISIT_MEMBER_NAME(outlineRight,"outlineRight");
	HX_VISIT_MEMBER_NAME(left,"left");
	HX_VISIT_MEMBER_NAME(right,"right");
	HX_VISIT_MEMBER_NAME(outlinePlay,"outlinePlay");
	HX_VISIT_MEMBER_NAME(play,"play");
	HX_VISIT_MEMBER_NAME(artist,"artist");
	HX_VISIT_MEMBER_NAME(artistName,"artistName");
	HX_VISIT_MEMBER_NAME(composer,"composer");
	HX_VISIT_MEMBER_NAME(composerName,"composerName");
	HX_VISIT_MEMBER_NAME(songNameText,"songNameText");
	HX_VISIT_MEMBER_NAME(songNameShadow,"songNameShadow");
	HX_VISIT_MEMBER_NAME(scoreText,"scoreText");
	HX_VISIT_MEMBER_NAME(scoreTextShadow,"scoreTextShadow");
	HX_VISIT_MEMBER_NAME(highscore,"highscore");
	HX_VISIT_MEMBER_NAME(highscoreShadow,"highscoreShadow");
	HX_VISIT_MEMBER_NAME(ref,"ref");
	HX_VISIT_MEMBER_NAME(jade,"jade");
	HX_VISIT_MEMBER_NAME(sam,"sam");
	HX_VISIT_MEMBER_NAME(kinito,"kinito");
	HX_VISIT_MEMBER_NAME(sprites,"sprites");
	HX_VISIT_MEMBER_NAME(cds,"cds");
	HX_VISIT_MEMBER_NAME(positions,"positions");
	HX_VISIT_MEMBER_NAME(musicBPM,"musicBPM");
	HX_VISIT_MEMBER_NAME(instPlaying,"instPlaying");
	HX_VISIT_MEMBER_NAME(holdTime,"holdTime");
	HX_VISIT_MEMBER_NAME(isBusy,"isBusy");
	HX_VISIT_MEMBER_NAME(idleTimer,"idleTimer");
	HX_VISIT_MEMBER_NAME(_drawDistance,"_drawDistance");
	HX_VISIT_MEMBER_NAME(_lastVisibles,"_lastVisibles");
	 ::backend::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FreeplayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		if (HX_FIELD_EQ(inName,"cd") ) { return ::hx::Val( cd ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"ref") ) { return ::hx::Val( ref ); }
		if (HX_FIELD_EQ(inName,"sam") ) { return ::hx::Val( sam ); }
		if (HX_FIELD_EQ(inName,"cds") ) { return ::hx::Val( cds ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"back") ) { return ::hx::Val( back ); }
		if (HX_FIELD_EQ(inName,"base") ) { return ::hx::Val( base ); }
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left ); }
		if (HX_FIELD_EQ(inName,"play") ) { return ::hx::Val( play ); }
		if (HX_FIELD_EQ(inName,"jade") ) { return ::hx::Val( jade ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"songs") ) { return ::hx::Val( songs ); }
		if (HX_FIELD_EQ(inName,"notcd") ) { return ::hx::Val( notcd ); }
		if (HX_FIELD_EQ(inName,"right") ) { return ::hx::Val( right ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { return ::hx::Val( player ); }
		if (HX_FIELD_EQ(inName,"artist") ) { return ::hx::Val( artist ); }
		if (HX_FIELD_EQ(inName,"kinito") ) { return ::hx::Val( kinito ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"isBusy") ) { return ::hx::Val( isBusy ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scoreBG") ) { return ::hx::Val( scoreBG ); }
		if (HX_FIELD_EQ(inName,"checked") ) { return ::hx::Val( checked ); }
		if (HX_FIELD_EQ(inName,"sprites") ) { return ::hx::Val( sprites ); }
		if (HX_FIELD_EQ(inName,"addSong") ) { return ::hx::Val( addSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"getName") ) { return ::hx::Val( getName_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selector") ) { return ::hx::Val( selector ); }
		if (HX_FIELD_EQ(inName,"diffText") ) { return ::hx::Val( diffText ); }
		if (HX_FIELD_EQ(inName,"grpSongs") ) { return ::hx::Val( grpSongs ); }
		if (HX_FIELD_EQ(inName,"bottomBG") ) { return ::hx::Val( bottomBG ); }
		if (HX_FIELD_EQ(inName,"freeplay") ) { return ::hx::Val( freeplay ); }
		if (HX_FIELD_EQ(inName,"composer") ) { return ::hx::Val( composer ); }
		if (HX_FIELD_EQ(inName,"musicBPM") ) { return ::hx::Val( musicBPM ); }
		if (HX_FIELD_EQ(inName,"holdTime") ) { return ::hx::Val( holdTime ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lerpScore") ) { return ::hx::Val( lerpScore ); }
		if (HX_FIELD_EQ(inName,"iconArray") ) { return ::hx::Val( iconArray ); }
		if (HX_FIELD_EQ(inName,"scoreText") ) { return ::hx::Val( scoreText ); }
		if (HX_FIELD_EQ(inName,"highscore") ) { return ::hx::Val( highscore ); }
		if (HX_FIELD_EQ(inName,"positions") ) { return ::hx::Val( positions ); }
		if (HX_FIELD_EQ(inName,"shiftLeft") ) { return ::hx::Val( shiftLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"shiftDown") ) { return ::hx::Val( shiftDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"idleTimer") ) { return ::hx::Val( idleTimer ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lerpRating") ) { return ::hx::Val( lerpRating ); }
		if (HX_FIELD_EQ(inName,"curPlaying") ) { return ::hx::Val( curPlaying ); }
		if (HX_FIELD_EQ(inName,"colorTween") ) { return ::hx::Val( colorTween ); }
		if (HX_FIELD_EQ(inName,"bottomText") ) { return ::hx::Val( bottomText ); }
		if (HX_FIELD_EQ(inName,"artistName") ) { return ::hx::Val( artistName ); }
		if (HX_FIELD_EQ(inName,"traceScore") ) { return ::hx::Val( traceScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"chooseSong") ) { return ::hx::Val( chooseSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"shiftRight") ) { return ::hx::Val( shiftRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateSize") ) { return ::hx::Val( updateSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateBump") ) { return ::hx::Val( updateBump_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkHover") ) { return ::hx::Val( checkHover_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeDiff") ) { return ::hx::Val( changeDiff_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"missingText") ) { return ::hx::Val( missingText ); }
		if (HX_FIELD_EQ(inName,"outlineLeft") ) { return ::hx::Val( outlineLeft ); }
		if (HX_FIELD_EQ(inName,"outlinePlay") ) { return ::hx::Val( outlinePlay ); }
		if (HX_FIELD_EQ(inName,"instPlaying") ) { return ::hx::Val( instPlaying ); }
		if (HX_FIELD_EQ(inName,"updateTexts") ) { return ::hx::Val( updateTexts_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lerpSelected") ) { return ::hx::Val( lerpSelected ); }
		if (HX_FIELD_EQ(inName,"bottomString") ) { return ::hx::Val( bottomString ); }
		if (HX_FIELD_EQ(inName,"outlineRight") ) { return ::hx::Val( outlineRight ); }
		if (HX_FIELD_EQ(inName,"composerName") ) { return ::hx::Val( composerName ); }
		if (HX_FIELD_EQ(inName,"songNameText") ) { return ::hx::Val( songNameText ); }
		if (HX_FIELD_EQ(inName,"weekIsLocked") ) { return ::hx::Val( weekIsLocked_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateHeight") ) { return ::hx::Val( updateHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateCDSpin") ) { return ::hx::Val( updateCDSpin_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { return ::hx::Val( curDifficulty ); }
		if (HX_FIELD_EQ(inName,"intendedScore") ) { return ::hx::Val( intendedScore ); }
		if (HX_FIELD_EQ(inName,"intendedColor") ) { return ::hx::Val( intendedColor ); }
		if (HX_FIELD_EQ(inName,"missingTextBG") ) { return ::hx::Val( missingTextBG ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"_drawDistance") ) { return ::hx::Val( _drawDistance ); }
		if (HX_FIELD_EQ(inName,"_lastVisibles") ) { return ::hx::Val( _lastVisibles ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"intendedRating") ) { return ::hx::Val( intendedRating ); }
		if (HX_FIELD_EQ(inName,"songNameShadow") ) { return ::hx::Val( songNameShadow ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"scoreTextShadow") ) { return ::hx::Val( scoreTextShadow ); }
		if (HX_FIELD_EQ(inName,"highscoreShadow") ) { return ::hx::Val( highscoreShadow ); }
		if (HX_FIELD_EQ(inName,"updatePositions") ) { return ::hx::Val( updatePositions_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"positionHighscore") ) { return ::hx::Val( positionHighscore_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getVocalFromCharacter") ) { return ::hx::Val( getVocalFromCharacter_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"_updateSongLastDifficulty") ) { return ::hx::Val( _updateSongLastDifficulty_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FreeplayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { outValue = ( vocals ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
		if (HX_FIELD_EQ(inName,"loadBPMData") ) { outValue = loadBPMData_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"opponentVocals") ) { outValue = ( opponentVocals ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lastDifficultyName") ) { outValue = ( lastDifficultyName ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"destroyFreeplayVocals") ) { outValue = destroyFreeplayVocals_dyn(); return true; }
	}
	return false;
}

::hx::Val FreeplayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cd") ) { cd=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"ref") ) { ref=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sam") ) { sam=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cds") ) { cds=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"back") ) { back=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"base") ) { base=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"play") ) { play=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"jade") ) { jade=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"songs") ) { songs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"notcd") ) { notcd=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"right") ) { right=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::objects::MusicPlayer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"artist") ) { artist=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"kinito") ) { kinito=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isBusy") ) { isBusy=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scoreBG") ) { scoreBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"checked") ) { checked=inValue.Cast<  ::flixel::addons::display::FlxBackdrop >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sprites") ) { sprites=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selector") ) { selector=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diffText") ) { diffText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpSongs") ) { grpSongs=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomBG") ) { bottomBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"freeplay") ) { freeplay=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"composer") ) { composer=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"musicBPM") ) { musicBPM=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdTime") ) { holdTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lerpScore") ) { lerpScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconArray") ) { iconArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreText") ) { scoreText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"highscore") ) { highscore=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"positions") ) { positions=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"idleTimer") ) { idleTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lerpRating") ) { lerpRating=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curPlaying") ) { curPlaying=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colorTween") ) { colorTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomText") ) { bottomText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"artistName") ) { artistName=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"missingText") ) { missingText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"outlineLeft") ) { outlineLeft=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"outlinePlay") ) { outlinePlay=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"instPlaying") ) { instPlaying=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lerpSelected") ) { lerpSelected=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomString") ) { bottomString=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"outlineRight") ) { outlineRight=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"composerName") ) { composerName=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songNameText") ) { songNameText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { curDifficulty=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"intendedScore") ) { intendedScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"intendedColor") ) { intendedColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"missingTextBG") ) { missingTextBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_drawDistance") ) { _drawDistance=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lastVisibles") ) { _lastVisibles=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"intendedRating") ) { intendedRating=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songNameShadow") ) { songNameShadow=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"scoreTextShadow") ) { scoreTextShadow=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"highscoreShadow") ) { highscoreShadow=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FreeplayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=ioValue.Cast<  ::flixel::sound::FlxSound >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"opponentVocals") ) { opponentVocals=ioValue.Cast<  ::flixel::sound::FlxSound >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lastDifficultyName") ) { lastDifficultyName=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void FreeplayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("songs",fe,36,c7,80));
	outFields->push(HX_("selector",1f,33,6d,b1));
	outFields->push(HX_("lerpSelected",f2,c7,68,0a));
	outFields->push(HX_("curDifficulty",db,b7,38,a7));
	outFields->push(HX_("scoreBG",97,a5,9a,78));
	outFields->push(HX_("diffText",52,3b,1b,21));
	outFields->push(HX_("lerpScore",5b,81,4d,e7));
	outFields->push(HX_("lerpRating",f4,6d,a2,f2));
	outFields->push(HX_("intendedScore",a7,fd,7c,89));
	outFields->push(HX_("intendedRating",28,b4,ff,39));
	outFields->push(HX_("grpSongs",d9,dc,c7,63));
	outFields->push(HX_("curPlaying",ce,61,01,95));
	outFields->push(HX_("iconArray",60,3f,53,5f));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("intendedColor",b8,fb,ff,5a));
	outFields->push(HX_("colorTween",08,c2,dc,3d));
	outFields->push(HX_("missingTextBG",b8,0f,c8,d0));
	outFields->push(HX_("missingText",33,63,02,c1));
	outFields->push(HX_("bottomString",1c,06,22,8a));
	outFields->push(HX_("bottomText",38,31,e1,31));
	outFields->push(HX_("bottomBG",70,f1,b0,62));
	outFields->push(HX_("player",61,eb,b8,37));
	outFields->push(HX_("freeplay",a0,90,86,22));
	outFields->push(HX_("cd",a1,56,00,00));
	outFields->push(HX_("notcd",74,da,ca,9f));
	outFields->push(HX_("back",27,da,10,41));
	outFields->push(HX_("checked",27,b3,24,13));
	outFields->push(HX_("base",11,e8,10,41));
	outFields->push(HX_("outlineLeft",a9,34,b6,dc));
	outFields->push(HX_("outlineRight",fa,ec,c4,b9));
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("right",dc,0b,64,e9));
	outFields->push(HX_("outlinePlay",96,5a,60,df));
	outFields->push(HX_("play",f4,2d,5a,4a));
	outFields->push(HX_("artist",c7,f2,48,b9));
	outFields->push(HX_("artistName",b2,00,40,be));
	outFields->push(HX_("composer",20,37,ce,81));
	outFields->push(HX_("composerName",8b,e5,60,2b));
	outFields->push(HX_("songNameText",8d,29,c2,0b));
	outFields->push(HX_("songNameShadow",c0,1c,62,64));
	outFields->push(HX_("scoreText",1f,7d,bd,dc));
	outFields->push(HX_("scoreTextShadow",5f,da,47,de));
	outFields->push(HX_("highscore",b0,38,dd,f0));
	outFields->push(HX_("highscoreShadow",b0,18,0e,0f));
	outFields->push(HX_("ref",53,d9,56,00));
	outFields->push(HX_("jade",f8,8f,5a,46));
	outFields->push(HX_("sam",1f,98,57,00));
	outFields->push(HX_("kinito",14,0f,48,86));
	outFields->push(HX_("sprites",ce,a8,8a,5f));
	outFields->push(HX_("cds",b2,76,4b,00));
	outFields->push(HX_("positions",aa,f3,51,d0));
	outFields->push(HX_("musicBPM",3a,bf,89,0d));
	outFields->push(HX_("instPlaying",48,98,f0,7f));
	outFields->push(HX_("holdTime",ec,cc,bf,3e));
	outFields->push(HX_("isBusy",43,da,86,5e));
	outFields->push(HX_("idleTimer",11,60,35,6d));
	outFields->push(HX_("_drawDistance",38,b2,5b,24));
	outFields->push(HX_("_lastVisibles",16,8b,c5,60));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FreeplayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FreeplayState_obj,songs),HX_("songs",fe,36,c7,80)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,selector),HX_("selector",1f,33,6d,b1)},
	{::hx::fsFloat,(int)offsetof(FreeplayState_obj,lerpSelected),HX_("lerpSelected",f2,c7,68,0a)},
	{::hx::fsInt,(int)offsetof(FreeplayState_obj,curDifficulty),HX_("curDifficulty",db,b7,38,a7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,scoreBG),HX_("scoreBG",97,a5,9a,78)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,diffText),HX_("diffText",52,3b,1b,21)},
	{::hx::fsInt,(int)offsetof(FreeplayState_obj,lerpScore),HX_("lerpScore",5b,81,4d,e7)},
	{::hx::fsFloat,(int)offsetof(FreeplayState_obj,lerpRating),HX_("lerpRating",f4,6d,a2,f2)},
	{::hx::fsInt,(int)offsetof(FreeplayState_obj,intendedScore),HX_("intendedScore",a7,fd,7c,89)},
	{::hx::fsFloat,(int)offsetof(FreeplayState_obj,intendedRating),HX_("intendedRating",28,b4,ff,39)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(FreeplayState_obj,grpSongs),HX_("grpSongs",d9,dc,c7,63)},
	{::hx::fsBool,(int)offsetof(FreeplayState_obj,curPlaying),HX_("curPlaying",ce,61,01,95)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FreeplayState_obj,iconArray),HX_("iconArray",60,3f,53,5f)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsInt,(int)offsetof(FreeplayState_obj,intendedColor),HX_("intendedColor",b8,fb,ff,5a)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(FreeplayState_obj,colorTween),HX_("colorTween",08,c2,dc,3d)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,missingTextBG),HX_("missingTextBG",b8,0f,c8,d0)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,missingText),HX_("missingText",33,63,02,c1)},
	{::hx::fsString,(int)offsetof(FreeplayState_obj,bottomString),HX_("bottomString",1c,06,22,8a)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,bottomText),HX_("bottomText",38,31,e1,31)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,bottomBG),HX_("bottomBG",70,f1,b0,62)},
	{::hx::fsObject /*  ::objects::MusicPlayer */ ,(int)offsetof(FreeplayState_obj,player),HX_("player",61,eb,b8,37)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(FreeplayState_obj,freeplay),HX_("freeplay",a0,90,86,22)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(FreeplayState_obj,cd),HX_("cd",a1,56,00,00)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(FreeplayState_obj,notcd),HX_("notcd",74,da,ca,9f)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,back),HX_("back",27,da,10,41)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxBackdrop */ ,(int)offsetof(FreeplayState_obj,checked),HX_("checked",27,b3,24,13)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,base),HX_("base",11,e8,10,41)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,outlineLeft),HX_("outlineLeft",a9,34,b6,dc)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,outlineRight),HX_("outlineRight",fa,ec,c4,b9)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,left),HX_("left",07,08,b0,47)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,right),HX_("right",dc,0b,64,e9)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,outlinePlay),HX_("outlinePlay",96,5a,60,df)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,play),HX_("play",f4,2d,5a,4a)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,artist),HX_("artist",c7,f2,48,b9)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,artistName),HX_("artistName",b2,00,40,be)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,composer),HX_("composer",20,37,ce,81)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,composerName),HX_("composerName",8b,e5,60,2b)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,songNameText),HX_("songNameText",8d,29,c2,0b)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,songNameShadow),HX_("songNameShadow",c0,1c,62,64)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,scoreText),HX_("scoreText",1f,7d,bd,dc)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,scoreTextShadow),HX_("scoreTextShadow",5f,da,47,de)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,highscore),HX_("highscore",b0,38,dd,f0)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(FreeplayState_obj,highscoreShadow),HX_("highscoreShadow",b0,18,0e,0f)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,ref),HX_("ref",53,d9,56,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,jade),HX_("jade",f8,8f,5a,46)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,sam),HX_("sam",1f,98,57,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FreeplayState_obj,kinito),HX_("kinito",14,0f,48,86)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FreeplayState_obj,sprites),HX_("sprites",ce,a8,8a,5f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FreeplayState_obj,cds),HX_("cds",b2,76,4b,00)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(FreeplayState_obj,positions),HX_("positions",aa,f3,51,d0)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FreeplayState_obj,musicBPM),HX_("musicBPM",3a,bf,89,0d)},
	{::hx::fsInt,(int)offsetof(FreeplayState_obj,instPlaying),HX_("instPlaying",48,98,f0,7f)},
	{::hx::fsFloat,(int)offsetof(FreeplayState_obj,holdTime),HX_("holdTime",ec,cc,bf,3e)},
	{::hx::fsBool,(int)offsetof(FreeplayState_obj,isBusy),HX_("isBusy",43,da,86,5e)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(FreeplayState_obj,idleTimer),HX_("idleTimer",11,60,35,6d)},
	{::hx::fsInt,(int)offsetof(FreeplayState_obj,_drawDistance),HX_("_drawDistance",38,b2,5b,24)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(FreeplayState_obj,_lastVisibles),HX_("_lastVisibles",16,8b,c5,60)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FreeplayState_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &FreeplayState_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsString,(void *) &FreeplayState_obj::lastDifficultyName,HX_("lastDifficultyName",1c,ef,d1,9b)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(void *) &FreeplayState_obj::vocals,HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(void *) &FreeplayState_obj::opponentVocals,HX_("opponentVocals",db,d1,18,64)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FreeplayState_obj_sMemberFields[] = {
	HX_("songs",fe,36,c7,80),
	HX_("selector",1f,33,6d,b1),
	HX_("lerpSelected",f2,c7,68,0a),
	HX_("curDifficulty",db,b7,38,a7),
	HX_("scoreBG",97,a5,9a,78),
	HX_("diffText",52,3b,1b,21),
	HX_("lerpScore",5b,81,4d,e7),
	HX_("lerpRating",f4,6d,a2,f2),
	HX_("intendedScore",a7,fd,7c,89),
	HX_("intendedRating",28,b4,ff,39),
	HX_("grpSongs",d9,dc,c7,63),
	HX_("curPlaying",ce,61,01,95),
	HX_("iconArray",60,3f,53,5f),
	HX_("bg",c5,55,00,00),
	HX_("intendedColor",b8,fb,ff,5a),
	HX_("colorTween",08,c2,dc,3d),
	HX_("missingTextBG",b8,0f,c8,d0),
	HX_("missingText",33,63,02,c1),
	HX_("bottomString",1c,06,22,8a),
	HX_("bottomText",38,31,e1,31),
	HX_("bottomBG",70,f1,b0,62),
	HX_("player",61,eb,b8,37),
	HX_("freeplay",a0,90,86,22),
	HX_("cd",a1,56,00,00),
	HX_("notcd",74,da,ca,9f),
	HX_("back",27,da,10,41),
	HX_("checked",27,b3,24,13),
	HX_("base",11,e8,10,41),
	HX_("outlineLeft",a9,34,b6,dc),
	HX_("outlineRight",fa,ec,c4,b9),
	HX_("left",07,08,b0,47),
	HX_("right",dc,0b,64,e9),
	HX_("outlinePlay",96,5a,60,df),
	HX_("play",f4,2d,5a,4a),
	HX_("artist",c7,f2,48,b9),
	HX_("artistName",b2,00,40,be),
	HX_("composer",20,37,ce,81),
	HX_("composerName",8b,e5,60,2b),
	HX_("songNameText",8d,29,c2,0b),
	HX_("songNameShadow",c0,1c,62,64),
	HX_("scoreText",1f,7d,bd,dc),
	HX_("scoreTextShadow",5f,da,47,de),
	HX_("highscore",b0,38,dd,f0),
	HX_("highscoreShadow",b0,18,0e,0f),
	HX_("ref",53,d9,56,00),
	HX_("jade",f8,8f,5a,46),
	HX_("sam",1f,98,57,00),
	HX_("kinito",14,0f,48,86),
	HX_("sprites",ce,a8,8a,5f),
	HX_("cds",b2,76,4b,00),
	HX_("positions",aa,f3,51,d0),
	HX_("musicBPM",3a,bf,89,0d),
	HX_("create",fc,66,0f,7c),
	HX_("traceScore",8d,92,3b,40),
	HX_("closeSubState",49,18,32,04),
	HX_("addSong",96,66,95,88),
	HX_("weekIsLocked",a8,d0,e6,fb),
	HX_("instPlaying",48,98,f0,7f),
	HX_("holdTime",ec,cc,bf,3e),
	HX_("update",09,86,05,87),
	HX_("getVocalFromCharacter",60,af,a4,3a),
	HX_("chooseSong",4c,62,41,3d),
	HX_("isBusy",43,da,86,5e),
	HX_("shiftLeft",a9,89,a9,d2),
	HX_("shiftRight",fa,f7,bb,f8),
	HX_("shiftDown",04,7a,67,cd),
	HX_("updatePositions",61,c4,dc,1f),
	HX_("updateHeight",d0,ae,0f,02),
	HX_("updateSize",6a,8b,08,05),
	HX_("idleTimer",11,60,35,6d),
	HX_("updateBump",9f,fa,d4,f9),
	HX_("getName",01,22,82,1b),
	HX_("updateCDSpin",cc,df,89,f3),
	HX_("checkHover",d4,e7,54,3b),
	HX_("changeDiff",95,91,b2,1c),
	HX_("changeSelection",bc,98,b5,48),
	HX_("_updateSongLastDifficulty",ae,8c,7b,b7),
	HX_("positionHighscore",c7,9a,8a,14),
	HX_("_drawDistance",38,b2,5b,24),
	HX_("_lastVisibles",16,8b,c5,60),
	HX_("updateTexts",5d,b4,31,f3),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

static void FreeplayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FreeplayState_obj::curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(FreeplayState_obj::lastDifficultyName,"lastDifficultyName");
	HX_MARK_MEMBER_NAME(FreeplayState_obj::vocals,"vocals");
	HX_MARK_MEMBER_NAME(FreeplayState_obj::opponentVocals,"opponentVocals");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FreeplayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FreeplayState_obj::curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(FreeplayState_obj::lastDifficultyName,"lastDifficultyName");
	HX_VISIT_MEMBER_NAME(FreeplayState_obj::vocals,"vocals");
	HX_VISIT_MEMBER_NAME(FreeplayState_obj::opponentVocals,"opponentVocals");
};

#endif

::hx::Class FreeplayState_obj::__mClass;

static ::String FreeplayState_obj_sStaticFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	HX_("lastDifficultyName",1c,ef,d1,9b),
	HX_("loadBPMData",23,3f,79,3b),
	HX_("vocals",5e,10,51,59),
	HX_("opponentVocals",db,d1,18,64),
	HX_("destroyFreeplayVocals",b8,0f,ad,93),
	::String(null())
};

void FreeplayState_obj::__register()
{
	FreeplayState_obj _hx_dummy;
	FreeplayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.FreeplayState",05,25,9c,c9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FreeplayState_obj::__GetStatic;
	__mClass->mSetStaticField = &FreeplayState_obj::__SetStatic;
	__mClass->mMarkFunc = FreeplayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FreeplayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FreeplayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FreeplayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FreeplayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FreeplayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FreeplayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FreeplayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_33_boot)
HXDLIN(  33)		curSelected = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_36_boot)
HXDLIN(  36)		lastDifficultyName = ::backend::Difficulty_obj::defaultDifficulty;
            	}
{
            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_510_boot)
HXDLIN( 510)		vocals = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_22e2030ae3401175_511_boot)
HXDLIN( 511)		opponentVocals = null();
            	}
}

} // end namespace states
