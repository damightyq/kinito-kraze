// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_states_FlashingState
#include <states/FlashingState.h>
#endif
#ifndef INCLUDED_states_TitleState
#include <states/TitleState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3121e6e564aa22cb_8_new,"states.FlashingState","new",0x540715a5,"states.FlashingState.new","states/FlashingState.hx",8,0xc151f76c)
HX_LOCAL_STACK_FRAME(_hx_pos_3121e6e564aa22cb_45_create,"states.FlashingState","create",0x0390fad7,"states.FlashingState.create","states/FlashingState.hx",45,0xc151f76c)
HX_LOCAL_STACK_FRAME(_hx_pos_3121e6e564aa22cb_17_create,"states.FlashingState","create",0x0390fad7,"states.FlashingState.create","states/FlashingState.hx",17,0xc151f76c)
static const ::String _hx_array_data_66c05f33_4[] = {
	HX_("Yes",07,e1,43,00),HX_("No",61,44,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_3121e6e564aa22cb_50_update,"states.FlashingState","update",0x0e8719e4,"states.FlashingState.update","states/FlashingState.hx",50,0xc151f76c)
HX_LOCAL_STACK_FRAME(_hx_pos_3121e6e564aa22cb_73_update,"states.FlashingState","update",0x0e8719e4,"states.FlashingState.update","states/FlashingState.hx",73,0xc151f76c)
HX_LOCAL_STACK_FRAME(_hx_pos_3121e6e564aa22cb_72_update,"states.FlashingState","update",0x0e8719e4,"states.FlashingState.update","states/FlashingState.hx",72,0xc151f76c)
HX_LOCAL_STACK_FRAME(_hx_pos_3121e6e564aa22cb_71_update,"states.FlashingState","update",0x0e8719e4,"states.FlashingState.update","states/FlashingState.hx",71,0xc151f76c)
HX_LOCAL_STACK_FRAME(_hx_pos_3121e6e564aa22cb_80_update,"states.FlashingState","update",0x0e8719e4,"states.FlashingState.update","states/FlashingState.hx",80,0xc151f76c)
HX_LOCAL_STACK_FRAME(_hx_pos_3121e6e564aa22cb_87_updateItems,"states.FlashingState","updateItems",0x52b6a77c,"states.FlashingState.updateItems","states/FlashingState.hx",87,0xc151f76c)
HX_LOCAL_STACK_FRAME(_hx_pos_3121e6e564aa22cb_10_boot,"states.FlashingState","boot",0x2a44db4d,"states.FlashingState.boot","states/FlashingState.hx",10,0xc151f76c)
namespace states{

void FlashingState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_3121e6e564aa22cb_8_new)
HXLINE(  12)		this->isYes = true;
HXLINE(   8)		super::__construct();
            	}

Dynamic FlashingState_obj::__CreateEmpty() { return new FlashingState_obj; }

void *FlashingState_obj::_hx_vtable = 0;

Dynamic FlashingState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlashingState_obj > _hx_result = new FlashingState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlashingState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x53aaab8a) {
			if (inClassId<=(int)0x140e72f9) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x140e72f9;
			} else {
				return inClassId==(int)0x53aaab8a;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void FlashingState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::FlashingState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::tweens::FlxTween _){
            			HX_GC_STACKFRAME(&_hx_pos_3121e6e564aa22cb_45_create)
HXLINE(  45)			_gthis->updateItems();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_3121e6e564aa22cb_17_create)
HXDLIN(  17)		 ::states::FlashingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  18)		this->super::create();
HXLINE(  20)		this->bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE(  21)		this->add(this->bg);
HXLINE(  23)		this->texts =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  24)		this->texts->set_alpha(((Float)0.0));
HXLINE(  25)		this->add(this->texts);
HXLINE(  27)		 ::flixel::text::FlxText warnText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,::flixel::FlxG_obj::width,HX_("Hey, watch out!\n\n\t\t\tThis Mod contains some flashing lights!\n\n\t\t\tDo you wish to disable them?",26,80,ea,ca),null(),null());
HXLINE(  31)		::String key = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN(  31)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(  31)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXDLIN(  31)		if (::hx::IsNotNull( str )) {
HXLINE(  31)			key = str;
            		}
HXDLIN(  31)		::String folderKey = key;
HXDLIN(  31)		::String file = ::backend::Paths_obj::modFolders(folderKey);
HXDLIN(  31)		::String _hx_tmp;
HXDLIN(  31)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE(  31)			_hx_tmp = file;
            		}
            		else {
HXLINE(  31)			_hx_tmp = (HX_("assets/",4c,2a,dc,36) + folderKey);
            		}
HXDLIN(  31)		warnText->setFormat(_hx_tmp,32,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  32)		{
HXLINE(  32)			int axes = 16;
HXDLIN(  32)			bool _hx_tmp1;
HXDLIN(  32)			if ((axes != 1)) {
HXLINE(  32)				_hx_tmp1 = (axes == 17);
            			}
            			else {
HXLINE(  32)				_hx_tmp1 = true;
            			}
HXDLIN(  32)			if (_hx_tmp1) {
HXLINE(  32)				int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN(  32)				warnText->set_x(((( (Float)(_hx_tmp2) ) - warnText->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  32)			bool _hx_tmp3;
HXDLIN(  32)			if ((axes != 16)) {
HXLINE(  32)				_hx_tmp3 = (axes == 17);
            			}
            			else {
HXLINE(  32)				_hx_tmp3 = true;
            			}
HXDLIN(  32)			if (_hx_tmp3) {
HXLINE(  32)				int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN(  32)				warnText->set_y(((( (Float)(_hx_tmp4) ) - warnText->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  33)		this->texts->add(warnText).StaticCast<  ::flixel::text::FlxText >();
HXLINE(  35)		::Array< ::String > keys = ::Array_obj< ::String >::fromData( _hx_array_data_66c05f33_4,2);
HXLINE(  36)		{
HXLINE(  36)			int _g = 0;
HXDLIN(  36)			int _g1 = keys->length;
HXDLIN(  36)			while((_g < _g1)){
HXLINE(  36)				_g = (_g + 1);
HXDLIN(  36)				int i = (_g - 1);
HXLINE(  37)				 ::flixel::text::FlxText button =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,::flixel::FlxG_obj::width,keys->__get(i),null(),null());
HXLINE(  38)				::String key1 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN(  38)				::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN(  38)				::String str1 = ( ( ::haxe::ds::StringMap)(this2) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN(  38)				if (::hx::IsNotNull( str1 )) {
HXLINE(  38)					key1 = str1;
            				}
HXDLIN(  38)				::String folderKey1 = key1;
HXDLIN(  38)				::String file1 = ::backend::Paths_obj::modFolders(folderKey1);
HXDLIN(  38)				::String _hx_tmp5;
HXDLIN(  38)				if (::sys::FileSystem_obj::exists(file1)) {
HXLINE(  38)					_hx_tmp5 = file1;
            				}
            				else {
HXLINE(  38)					_hx_tmp5 = (HX_("assets/",4c,2a,dc,36) + folderKey1);
            				}
HXDLIN(  38)				button->setFormat(_hx_tmp5,32,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  39)				Float warnText1 = warnText->y;
HXDLIN(  39)				button->set_y(((warnText1 + warnText->get_height()) + 24));
HXLINE(  40)				button->set_x((button->x + ((128 * i) - 80)));
HXLINE(  41)				this->texts->add(button).StaticCast<  ::flixel::text::FlxText >();
            			}
            		}
HXLINE(  44)		::flixel::tweens::FlxTween_obj::tween(this->texts, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)1.0))),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            	}


void FlashingState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_3121e6e564aa22cb_50_update)
HXDLIN(  50)		 ::states::FlashingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  51)		if (::states::FlashingState_obj::leftState) {
HXLINE(  52)			this->super::update(elapsed);
HXLINE(  53)			return;
            		}
HXLINE(  55)		bool back = this->get_controls()->get_BACK();
HXLINE(  56)		bool _hx_tmp;
HXDLIN(  56)		if (!(this->get_controls()->get_UI_LEFT_P())) {
HXLINE(  56)			_hx_tmp = this->get_controls()->get_UI_RIGHT_P();
            		}
            		else {
HXLINE(  56)			_hx_tmp = true;
            		}
HXDLIN(  56)		if (_hx_tmp) {
HXLINE(  57)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(  57)			_hx_tmp1->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("scrollMenu",4c,d4,18,06)),null(),true,null()),((Float)0.7),null(),null(),null(),null());
HXLINE(  58)			this->isYes = !(this->isYes);
HXLINE(  59)			this->updateItems();
            		}
HXLINE(  61)		bool _hx_tmp2;
HXDLIN(  61)		if (!(this->get_controls()->get_ACCEPT())) {
HXLINE(  61)			_hx_tmp2 = back;
            		}
            		else {
HXLINE(  61)			_hx_tmp2 = true;
            		}
HXDLIN(  61)		if (_hx_tmp2) {
HXLINE(  62)			::states::FlashingState_obj::leftState = true;
HXLINE(  63)			::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE(  64)			::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
HXLINE(  65)			if (!(back)) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::FlashingState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::effects::FlxFlicker flk){
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::FlashingState,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween _){
            							HX_GC_STACKFRAME(&_hx_pos_3121e6e564aa22cb_73_update)
HXLINE(  73)							::backend::MusicBeatState_obj::switchState( ::states::TitleState_obj::__alloc( HX_CTX ));
            						}
            						HX_END_LOCAL_FUNC1((void))

            						HX_GC_STACKFRAME(&_hx_pos_3121e6e564aa22cb_72_update)
HXLINE(  72)						::flixel::tweens::FlxTween_obj::tween(_gthis->texts, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0()))));
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_GC_STACKFRAME(&_hx_pos_3121e6e564aa22cb_71_update)
HXLINE(  71)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.5), ::Dynamic(new _hx_Closure_1(_gthis)),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(  66)				::backend::ClientPrefs_obj::data->flashing = !(this->isYes);
HXLINE(  67)				::backend::ClientPrefs_obj::saveSettings();
HXLINE(  68)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::sound;
HXDLIN(  68)				_hx_tmp3->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("confirmMenu",bf,8e,fe,3c)),null(),true,null()),null(),null(),null(),null(),null());
HXLINE(  69)				int button;
HXDLIN(  69)				if (this->isYes) {
HXLINE(  69)					button = 1;
            				}
            				else {
HXLINE(  69)					button = 2;
            				}
HXDLIN(  69)				 ::flixel::text::FlxText button1 = Dynamic( this->texts->group->members->__get(button)).StaticCast<  ::flixel::text::FlxText >();
HXLINE(  70)				::flixel::effects::FlxFlicker_obj::flicker(button1,1,((Float)0.1),false,true, ::Dynamic(new _hx_Closure_2(_gthis)),null());
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween _){
            					HX_GC_STACKFRAME(&_hx_pos_3121e6e564aa22cb_80_update)
HXLINE(  80)					::backend::MusicBeatState_obj::switchState( ::states::TitleState_obj::__alloc( HX_CTX ));
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(  78)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp4 = ::flixel::FlxG_obj::sound;
HXDLIN(  78)				_hx_tmp4->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("cancelMenu",39,a4,43,b7)),null(),true,null()),null(),null(),null(),null(),null());
HXLINE(  79)				::flixel::tweens::FlxTween_obj::tween(this->texts, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_3()))));
            			}
            		}
HXLINE(  84)		this->super::update(elapsed);
            	}


void FlashingState_obj::updateItems(){
            	HX_STACKFRAME(&_hx_pos_3121e6e564aa22cb_87_updateItems)
HXLINE(  89)		Float _hx_tmp;
HXDLIN(  89)		if (this->isYes) {
HXLINE(  89)			_hx_tmp = ((Float)1.0);
            		}
            		else {
HXLINE(  89)			_hx_tmp = ((Float)0.6);
            		}
HXDLIN(  89)		Dynamic( this->texts->group->members->__get(1)).StaticCast<  ::flixel::text::FlxText >()->set_alpha(_hx_tmp);
HXLINE(  90)		Float _hx_tmp1;
HXDLIN(  90)		if (this->isYes) {
HXLINE(  90)			_hx_tmp1 = ((Float)0.6);
            		}
            		else {
HXLINE(  90)			_hx_tmp1 = ((Float)1.0);
            		}
HXDLIN(  90)		Dynamic( this->texts->group->members->__get(2)).StaticCast<  ::flixel::text::FlxText >()->set_alpha(_hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlashingState_obj,updateItems,(void))

bool FlashingState_obj::leftState;


::hx::ObjectPtr< FlashingState_obj > FlashingState_obj::__new() {
	::hx::ObjectPtr< FlashingState_obj > __this = new FlashingState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< FlashingState_obj > FlashingState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	FlashingState_obj *__this = (FlashingState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlashingState_obj), true, "states.FlashingState"));
	*(void **)__this = FlashingState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlashingState_obj::FlashingState_obj()
{
}

void FlashingState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlashingState);
	HX_MARK_MEMBER_NAME(isYes,"isYes");
	HX_MARK_MEMBER_NAME(texts,"texts");
	HX_MARK_MEMBER_NAME(bg,"bg");
	 ::backend::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlashingState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(isYes,"isYes");
	HX_VISIT_MEMBER_NAME(texts,"texts");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	 ::backend::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlashingState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"isYes") ) { return ::hx::Val( isYes ); }
		if (HX_FIELD_EQ(inName,"texts") ) { return ::hx::Val( texts ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"updateItems") ) { return ::hx::Val( updateItems_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlashingState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"leftState") ) { outValue = ( leftState ); return true; }
	}
	return false;
}

::hx::Val FlashingState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"isYes") ) { isYes=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texts") ) { texts=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlashingState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"leftState") ) { leftState=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void FlashingState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("isYes",5d,53,5a,c1));
	outFields->push(HX_("texts",26,4b,99,0d));
	outFields->push(HX_("bg",c5,55,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlashingState_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(FlashingState_obj,isYes),HX_("isYes",5d,53,5a,c1)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(FlashingState_obj,texts),HX_("texts",26,4b,99,0d)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(FlashingState_obj,bg),HX_("bg",c5,55,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FlashingState_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &FlashingState_obj::leftState,HX_("leftState",8a,64,eb,98)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FlashingState_obj_sMemberFields[] = {
	HX_("isYes",5d,53,5a,c1),
	HX_("texts",26,4b,99,0d),
	HX_("bg",c5,55,00,00),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("updateItems",37,15,a5,a7),
	::String(null()) };

static void FlashingState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlashingState_obj::leftState,"leftState");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlashingState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlashingState_obj::leftState,"leftState");
};

#endif

::hx::Class FlashingState_obj::__mClass;

static ::String FlashingState_obj_sStaticFields[] = {
	HX_("leftState",8a,64,eb,98),
	::String(null())
};

void FlashingState_obj::__register()
{
	FlashingState_obj _hx_dummy;
	FlashingState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.FlashingState",33,5f,c0,66);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlashingState_obj::__GetStatic;
	__mClass->mSetStaticField = &FlashingState_obj::__SetStatic;
	__mClass->mMarkFunc = FlashingState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlashingState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlashingState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlashingState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlashingState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlashingState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlashingState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlashingState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_3121e6e564aa22cb_10_boot)
HXDLIN(  10)		leftState = false;
            	}
}

} // end namespace states
