// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_ColorTween
#include <flixel/tweens/misc/ColorTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_objects_Alignment
#include <objects/Alignment.h>
#endif
#ifndef INCLUDED_objects_Alphabet
#include <objects/Alphabet.h>
#endif
#ifndef INCLUDED_objects_AttachedSprite
#include <objects/AttachedSprite.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_states_CreditsState
#include <states/CreditsState.h>
#endif
#ifndef INCLUDED_states_MainMenuState
#include <states/MainMenuState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_178cfd7cdc100066_5_new,"states.CreditsState","new",0x880b66d5,"states.CreditsState.new","states/CreditsState.hx",5,0xc8f2335a)
HX_LOCAL_STACK_FRAME(_hx_pos_178cfd7cdc100066_21_create,"states.CreditsState","create",0xd40f87a7,"states.CreditsState.create","states/CreditsState.hx",21,0xc8f2335a)
static const ::String _hx_array_data_79985863_7[] = {
	HX_("Psych Engine Team",36,ef,98,3e),
};
static const ::String _hx_array_data_79985863_8[] = {
	HX_("Shadow Mario",c4,01,05,71),HX_("shadowmario",24,76,c0,e6),HX_("Main Programmer and Head of Psych Engine",dc,9d,47,32),HX_("https://ko-fi.com/shadowmario",05,5e,89,68),HX_("444444",80,a8,eb,dd),
};
static const ::String _hx_array_data_79985863_9[] = {
	HX_("Riveren",55,c6,ba,81),HX_("riveren",75,9e,69,b4),HX_("Main Artist/Animator of Psych Engine",f8,d1,00,db),HX_("https://x.com/riverennn",02,ed,bb,b3),HX_("14967B",ab,2b,29,ae),
};
static const ::String _hx_array_data_79985863_10[] = {
	HX_("",00,00,00,00),
};
static const ::String _hx_array_data_79985863_11[] = {
	HX_("Former Engine Members",ea,4a,f3,b3),
};
static const ::String _hx_array_data_79985863_12[] = {
	HX_("bb-panzu",cb,ef,e8,8b),HX_("bb",c0,55,00,00),HX_("Ex-Programmer of Psych Engine",c0,17,f3,40),HX_("https://x.com/bbsub3",46,fb,43,fd),HX_("3E813A",99,bb,02,44),
};
static const ::String _hx_array_data_79985863_13[] = {
	HX_("",00,00,00,00),
};
static const ::String _hx_array_data_79985863_14[] = {
	HX_("Engine Contributors",56,17,70,dc),
};
static const ::String _hx_array_data_79985863_15[] = {
	HX_("crowplexus",64,de,03,a8),HX_("crowplexus",64,de,03,a8),HX_("Linux Support, HScript Iris, Input System v3, and Other PRs",57,f0,14,29),HX_("https://twitter.com/IamMorwen",2d,94,03,c6),HX_("CFCFCF",29,6c,74,44),
};
static const ::String _hx_array_data_79985863_16[] = {
	HX_("Kamizeta",6a,bc,53,de),HX_("kamizeta",4a,00,a2,04),HX_("Creator of Pessy, Psych Engine's mascot.",fb,89,1a,15),HX_("https://www.instagram.com/cewweey/",88,1c,92,e6),HX_("D21C11",c0,00,e4,1a),
};
static const ::String _hx_array_data_79985863_17[] = {
	HX_("MaxNeton",98,d1,fd,1c),HX_("maxneton",98,a5,1e,b0),HX_("Loading Screen Easter Egg Artist/Animator.",00,1e,0b,27),HX_("https://bsky.app/profile/maxneton.bsky.social",5a,78,cb,34),HX_("3C2E4E",d4,78,4d,19),
};
static const ::String _hx_array_data_79985863_18[] = {
	HX_("Keoiki",f2,5f,eb,6d),HX_("keoiki",d2,eb,56,39),HX_("Note Splash Animations and Latin Alphabet",9e,ce,cd,a6),HX_("https://x.com/Keoiki_",fa,6d,5a,bf),HX_("D2D2D2",ca,38,66,27),
};
static const ::String _hx_array_data_79985863_19[] = {
	HX_("SqirraRNG",35,93,90,2a),HX_("sqirra",76,57,10,51),HX_("Crash Handler and Base code for\nChart Editor's Waveform",45,eb,fb,39),HX_("https://x.com/gedehari",22,59,c1,3b),HX_("E1843A",f6,e6,6d,f2),
};
static const ::String _hx_array_data_79985863_20[] = {
	HX_("EliteMasterEric",1c,c5,50,08),HX_("mastereric",29,e3,63,9f),HX_("Runtime Shaders support and Other PRs",ed,f6,c6,90),HX_("https://x.com/EliteMasterEric",e9,b3,f4,cd),HX_("FFBD40",fe,b8,db,76),
};
static const ::String _hx_array_data_79985863_21[] = {
	HX_("MAJigsaw77",35,78,e3,a2),HX_("majigsaw",b5,50,70,37),HX_(".MP4 Video Loader Library (hxvlc)",84,b3,40,7b),HX_("https://x.com/MAJigsaw77",88,fc,ff,42),HX_("5F5F5F",13,56,34,a2),
};
static const ::String _hx_array_data_79985863_22[] = {
	HX_("iFlicky",97,81,42,80),HX_("flicky",4e,58,60,3d),HX_("Composer of Psync and Tea Time\nAnd some sound effects",f4,27,32,9a),HX_("https://x.com/flicky_i",8b,94,ae,00),HX_("9E29CF",16,be,35,a6),
};
static const ::String _hx_array_data_79985863_23[] = {
	HX_("KadeDev",5e,4b,70,ce),HX_("kade",97,c6,03,47),HX_("Fixed some issues on Chart Editor and Other PRs",62,bf,23,f7),HX_("https://x.com/kade0912",d4,c0,12,55),HX_("64A250",aa,a3,38,b3),
};
static const ::String _hx_array_data_79985863_24[] = {
	HX_("superpowers04",cd,26,a9,a5),HX_("superpowers04",cd,26,a9,a5),HX_("LUA JIT Fork",35,fe,5d,15),HX_("https://x.com/superpowers04",5a,d8,13,76),HX_("B957ED",78,28,97,58),
};
static const ::String _hx_array_data_79985863_25[] = {
	HX_("CheemsAndFriends",29,ef,a1,57),HX_("cheems",eb,9c,10,ba),HX_("Creator of FlxAnimate",44,44,ca,26),HX_("https://x.com/CheemsnFriendos",f2,4d,90,c7),HX_("E1E1E1",e4,75,03,fb),
};
static const ::String _hx_array_data_79985863_26[] = {
	HX_("",00,00,00,00),
};
static const ::String _hx_array_data_79985863_27[] = {
	HX_("Funkin' Crew",ab,00,2d,30),
};
static const ::String _hx_array_data_79985863_28[] = {
	HX_("ninjamuffin99",f7,4c,e5,00),HX_("ninjamuffin99",f7,4c,e5,00),HX_("Programmer of Friday Night Funkin'",2c,f9,c3,b2),HX_("https://x.com/ninja_muffin99",55,c4,4f,b4),HX_("CF2D2D",47,38,36,39),
};
static const ::String _hx_array_data_79985863_29[] = {
	HX_("PhantomArcade",9d,2d,b3,ef),HX_("phantomarcade",9d,69,2e,73),HX_("Animator of Friday Night Funkin'",7d,a9,23,e4),HX_("https://x.com/PhantomArcade3K",62,aa,b3,6a),HX_("FADC45",7b,7d,2c,97),
};
static const ::String _hx_array_data_79985863_30[] = {
	HX_("evilsk8r",66,38,e0,32),HX_("evilsk8r",66,38,e0,32),HX_("Artist of Friday Night Funkin'",dd,f8,e7,48),HX_("https://x.com/evilsk8r",f9,f1,2c,9b),HX_("5ABD4B",3c,b0,c9,c9),
};
static const ::String _hx_array_data_79985863_31[] = {
	HX_("kawaisprite",0e,de,66,45),HX_("kawaisprite",0e,de,66,45),HX_("Composer of Friday Night Funkin'",36,08,52,24),HX_("https://x.com/kawaisprite",5b,22,3e,be),HX_("378FC7",c6,99,76,34),
};
static const ::String _hx_array_data_79985863_32[] = {
	HX_("",00,00,00,00),
};
static const ::String _hx_array_data_79985863_33[] = {
	HX_("Psych Engine Discord",b3,e8,1c,65),
};
static const ::String _hx_array_data_79985863_34[] = {
	HX_("Join the Psych Ward!",3b,1f,de,56),HX_("discord",ac,b9,b4,b2),HX_("",00,00,00,00),HX_("https://discord.gg/2ka77eMXDv",b8,f0,c0,20),HX_("5165F6",8b,86,66,8b),
};
HX_LOCAL_STACK_FRAME(_hx_pos_178cfd7cdc100066_136_update,"states.CreditsState","update",0xdf05a6b4,"states.CreditsState.update","states/CreditsState.hx",136,0xc8f2335a)
HX_LOCAL_STACK_FRAME(_hx_pos_178cfd7cdc100066_209_changeSelection,"states.CreditsState","changeSelection",0xb16f8ab1,"states.CreditsState.changeSelection","states/CreditsState.hx",209,0xc8f2335a)
HX_LOCAL_STACK_FRAME(_hx_pos_178cfd7cdc100066_254_pushModCreditsToList,"states.CreditsState","pushModCreditsToList",0xbcc6d8f6,"states.CreditsState.pushModCreditsToList","states/CreditsState.hx",254,0xc8f2335a)
static const ::String _hx_array_data_79985863_42[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_178cfd7cdc100066_277_unselectableCheck,"states.CreditsState","unselectableCheck",0x9a60714e,"states.CreditsState.unselectableCheck","states/CreditsState.hx",277,0xc8f2335a)
namespace states{

void CreditsState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_178cfd7cdc100066_5_new)
HXLINE( 207)		this->moveTween = null();
HXLINE( 134)		this->holdTime = ((Float)0);
HXLINE( 133)		this->quitting = false;
HXLINE(  18)		this->offsetThing = ((Float)-75);
HXLINE(  11)		this->creditsStuff = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  10)		this->iconArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(   7)		this->curSelected = -1;
HXLINE(   5)		super::__construct();
            	}

Dynamic CreditsState_obj::__CreateEmpty() { return new CreditsState_obj; }

void *CreditsState_obj::_hx_vtable = 0;

Dynamic CreditsState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CreditsState_obj > _hx_result = new CreditsState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CreditsState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x53aaab8a) {
			if (inClassId<=(int)0x0d505f5d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0d505f5d;
			} else {
				return inClassId==(int)0x53aaab8a;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void CreditsState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_178cfd7cdc100066_21_create)
HXLINE(  24)		::backend::DiscordClient_obj::changePresence(HX_("In the Menus",0a,c1,ad,c6),null(),null(),null(),null(),null());
HXLINE(  27)		this->persistentUpdate = true;
HXLINE(  28)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  28)		this->bg = _hx_tmp->loadGraphic(::backend::Paths_obj::image(HX_("menuDesat",26,91,04,72),null(),null()),null(),null(),null(),null(),null());
HXLINE(  29)		this->bg->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  30)		this->add(this->bg);
HXLINE(  31)		{
HXLINE(  31)			 ::flixel::FlxSprite _this = this->bg;
HXDLIN(  31)			int axes = 17;
HXDLIN(  31)			bool _hx_tmp1;
HXDLIN(  31)			if ((axes != 1)) {
HXLINE(  31)				_hx_tmp1 = (axes == 17);
            			}
            			else {
HXLINE(  31)				_hx_tmp1 = true;
            			}
HXDLIN(  31)			if (_hx_tmp1) {
HXLINE(  31)				int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN(  31)				_this->set_x(((( (Float)(_hx_tmp2) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  31)			bool _hx_tmp3;
HXDLIN(  31)			if ((axes != 16)) {
HXLINE(  31)				_hx_tmp3 = (axes == 17);
            			}
            			else {
HXLINE(  31)				_hx_tmp3 = true;
            			}
HXDLIN(  31)			if (_hx_tmp3) {
HXLINE(  31)				int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN(  31)				_this->set_y(((( (Float)(_hx_tmp4) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  33)		this->grpOptions =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  34)		this->add(this->grpOptions);
HXLINE(  37)		{
HXLINE(  37)			int _g = 0;
HXDLIN(  37)			if (!(::backend::Mods_obj::updatedOnState)) {
HXLINE(  37)				::backend::Mods_obj::updateModList();
            			}
HXDLIN(  37)			::Array< ::String > list_enabled = ::Array_obj< ::String >::__new(0);
HXDLIN(  37)			::Array< ::String > list_disabled = ::Array_obj< ::String >::__new(0);
HXDLIN(  37)			::Array< ::String > list_all = ::Array_obj< ::String >::__new(0);
HXDLIN(  37)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  37)				int _g1 = 0;
HXDLIN(  37)				::String daList = null();
HXDLIN(  37)				if (::sys::FileSystem_obj::exists(HX_("modsList.txt",f1,ca,08,ac))) {
HXLINE(  48)					daList = ::sys::io::File_obj::getContent(HX_("modsList.txt",f1,ca,08,ac));
            				}
HXLINE(  37)				::Array< ::String > _g2;
HXDLIN(  37)				if (::hx::IsNotNull( daList )) {
HXLINE(  37)					::Array< ::String > daList1 = ::Array_obj< ::String >::__new(0);
HXLINE(  69)					daList1 = ::StringTools_obj::trim(daList).split(HX_("\n",0a,00,00,00));
HXLINE(  37)					{
HXLINE(  37)						int _g3 = 0;
HXDLIN(  37)						int _g4 = daList1->length;
HXDLIN(  37)						while((_g3 < _g4)){
HXLINE(  37)							_g3 = (_g3 + 1);
HXDLIN(  37)							int i = (_g3 - 1);
HXDLIN(  37)							daList1[i] = ::StringTools_obj::trim(daList1->__get(i));
            						}
            					}
HXDLIN(  37)					_g2 = daList1;
            				}
            				else {
HXLINE(  37)					_g2 = ::Array_obj< ::String >::__new(0);
            				}
HXDLIN(  37)				while((_g1 < _g2->length)){
HXLINE(  37)					::String mod = _g2->__get(_g1);
HXDLIN(  37)					_g1 = (_g1 + 1);
HXDLIN(  37)					if ((::StringTools_obj::trim(mod).length < 1)) {
HXLINE(  37)						continue;
            					}
HXDLIN(  37)					::Array< ::String > dat = mod.split(HX_("|",7c,00,00,00));
HXDLIN(  37)					list_all->push(dat->__get(0));
HXDLIN(  37)					if ((dat->__get(1) == HX_("1",31,00,00,00))) {
HXLINE(  37)						list_enabled->push(dat->__get(0));
            					}
            					else {
HXLINE(  37)						list_disabled->push(dat->__get(0));
            					}
            				}
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g5 = _hx_e;
HXLINE( 175)					 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g5);
HXLINE(  37)					::haxe::Log_obj::trace(e,::hx::SourceInfo(HX_("source/backend/Mods.hx",1e,5b,8b,ff),176,HX_("backend.Mods",2b,aa,ba,a1),HX_("parseList",31,6e,59,cf)));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXDLIN(  37)			::Array< ::String > _g6 = list_enabled;
HXDLIN(  37)			while((_g < _g6->length)){
HXLINE(  37)				::String mod1 = _g6->__get(_g);
HXDLIN(  37)				_g = (_g + 1);
HXDLIN(  37)				this->pushModCreditsToList(mod1);
            			}
            		}
HXLINE(  40)		::Array< ::Dynamic> defaultList = ::Array_obj< ::Dynamic>::__new(28)->init(0,::Array_obj< ::String >::fromData( _hx_array_data_79985863_7,1))->init(1,::Array_obj< ::String >::fromData( _hx_array_data_79985863_8,5))->init(2,::Array_obj< ::String >::fromData( _hx_array_data_79985863_9,5))->init(3,::Array_obj< ::String >::fromData( _hx_array_data_79985863_10,1))->init(4,::Array_obj< ::String >::fromData( _hx_array_data_79985863_11,1))->init(5,::Array_obj< ::String >::fromData( _hx_array_data_79985863_12,5))->init(6,::Array_obj< ::String >::fromData( _hx_array_data_79985863_13,1))->init(7,::Array_obj< ::String >::fromData( _hx_array_data_79985863_14,1))->init(8,::Array_obj< ::String >::fromData( _hx_array_data_79985863_15,5))->init(9,::Array_obj< ::String >::fromData( _hx_array_data_79985863_16,5))->init(10,::Array_obj< ::String >::fromData( _hx_array_data_79985863_17,5))->init(11,::Array_obj< ::String >::fromData( _hx_array_data_79985863_18,5))->init(12,::Array_obj< ::String >::fromData( _hx_array_data_79985863_19,5))->init(13,::Array_obj< ::String >::fromData( _hx_array_data_79985863_20,5))->init(14,::Array_obj< ::String >::fromData( _hx_array_data_79985863_21,5))->init(15,::Array_obj< ::String >::fromData( _hx_array_data_79985863_22,5))->init(16,::Array_obj< ::String >::fromData( _hx_array_data_79985863_23,5))->init(17,::Array_obj< ::String >::fromData( _hx_array_data_79985863_24,5))->init(18,::Array_obj< ::String >::fromData( _hx_array_data_79985863_25,5))->init(19,::Array_obj< ::String >::fromData( _hx_array_data_79985863_26,1))->init(20,::Array_obj< ::String >::fromData( _hx_array_data_79985863_27,1))->init(21,::Array_obj< ::String >::fromData( _hx_array_data_79985863_28,5))->init(22,::Array_obj< ::String >::fromData( _hx_array_data_79985863_29,5))->init(23,::Array_obj< ::String >::fromData( _hx_array_data_79985863_30,5))->init(24,::Array_obj< ::String >::fromData( _hx_array_data_79985863_31,5))->init(25,::Array_obj< ::String >::fromData( _hx_array_data_79985863_32,1))->init(26,::Array_obj< ::String >::fromData( _hx_array_data_79985863_33,1))->init(27,::Array_obj< ::String >::fromData( _hx_array_data_79985863_34,5));
HXLINE(  71)		{
HXLINE(  71)			int _g7 = 0;
HXDLIN(  71)			while((_g7 < defaultList->length)){
HXLINE(  71)				::Array< ::String > i1 = defaultList->__get(_g7).StaticCast< ::Array< ::String > >();
HXDLIN(  71)				_g7 = (_g7 + 1);
HXLINE(  72)				this->creditsStuff->push(i1);
            			}
            		}
HXLINE(  74)		{
HXLINE(  74)			int _g_current = 0;
HXDLIN(  74)			::Array< ::Dynamic> _g_array = this->creditsStuff;
HXDLIN(  74)			while((_g_current < _g_array->length)){
HXLINE(  74)				::Array< ::String > _g_value = _g_array->__get(_g_current).StaticCast< ::Array< ::String > >();
HXDLIN(  74)				_g_current = (_g_current + 1);
HXDLIN(  74)				int _g_key = (_g_current - 1);
HXDLIN(  74)				int i2 = _g_key;
HXDLIN(  74)				::Array< ::String > credit = _g_value;
HXLINE(  75)				{
HXLINE(  76)					bool isSelectable = !(this->unselectableCheck(i2));
HXLINE(  77)					 ::objects::Alphabet optionText =  ::objects::Alphabet_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )),( (Float)(300) ),credit->__get(0),!(isSelectable));
HXLINE(  78)					optionText->isMenuItem = true;
HXLINE(  79)					optionText->targetY = i2;
HXLINE(  80)					optionText->changeX = false;
HXLINE(  81)					optionText->snapToPosition();
HXLINE(  82)					this->grpOptions->add(optionText).StaticCast<  ::objects::Alphabet >();
HXLINE(  84)					if (isSelectable) {
HXLINE(  86)						if (::hx::IsNotNull( credit->__get(5) )) {
HXLINE(  87)							::backend::Mods_obj::currentModDirectory = credit->__get(5);
            						}
HXLINE(  89)						::String str = HX_("credits/missing_icon",87,66,74,31);
HXLINE(  90)						bool _hx_tmp5;
HXDLIN(  90)						if (::hx::IsNotNull( credit->__get(1) )) {
HXLINE(  90)							_hx_tmp5 = (credit->__get(1).length > 0);
            						}
            						else {
HXLINE(  90)							_hx_tmp5 = false;
            						}
HXDLIN(  90)						if (_hx_tmp5) {
HXLINE(  92)							::String fileName = (HX_("credits/",d5,48,ee,de) + credit->__get(1));
HXLINE(  93)							if (::backend::Paths_obj::fileExists(((HX_("images/",77,50,74,c1) + fileName) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),null(),null())) {
HXLINE(  93)								str = fileName;
            							}
            							else {
HXLINE(  94)								if (::backend::Paths_obj::fileExists(((HX_("images/",77,50,74,c1) + fileName) + HX_("-pixel.png",f4,c0,84,ba)),HX_("IMAGE",3b,57,57,3b),null(),null())) {
HXLINE(  94)									str = (fileName + HX_("-pixel",39,03,b3,c0));
            								}
            							}
            						}
HXLINE(  97)						 ::objects::AttachedSprite icon =  ::objects::AttachedSprite_obj::__alloc( HX_CTX ,str,null(),null(),null());
HXLINE(  98)						if (::StringTools_obj::endsWith(str,HX_("-pixel",39,03,b3,c0))) {
HXLINE(  98)							icon->set_antialiasing(false);
            						}
HXLINE(  99)						icon->xAdd = (optionText->get_width() + 10);
HXLINE( 100)						icon->sprTracker = optionText;
HXLINE( 103)						this->iconArray->push(icon);
HXLINE( 104)						this->add(icon);
HXLINE( 105)						::backend::Mods_obj::currentModDirectory = HX_("",00,00,00,00);
HXLINE( 107)						if ((this->curSelected == -1)) {
HXLINE( 107)							this->curSelected = i2;
            						}
            					}
            					else {
HXLINE( 109)						optionText->set_alignment(::objects::Alignment_obj::CENTERED_dyn());
            					}
            				}
            			}
            		}
HXLINE( 112)		this->descBox =  ::objects::AttachedSprite_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 113)		this->descBox->makeGraphic(1,1,-16777216,null(),null());
HXLINE( 114)		this->descBox->xAdd = ( (Float)(-10) );
HXLINE( 115)		this->descBox->yAdd = ( (Float)(-10) );
HXLINE( 116)		this->descBox->alphaMult = ((Float)0.6);
HXLINE( 117)		this->descBox->set_alpha(((Float)0.6));
HXLINE( 118)		this->add(this->descBox);
HXLINE( 120)		this->descText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,50,((::flixel::FlxG_obj::height + this->offsetThing) - ( (Float)(25) )),1180,HX_("",00,00,00,00),32,null());
HXLINE( 121)		 ::flixel::text::FlxText _hx_tmp6 = this->descText;
HXDLIN( 121)		::String key = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 121)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 121)		::String str1 = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXDLIN( 121)		if (::hx::IsNotNull( str1 )) {
HXLINE(  82)			key = str1;
            		}
HXLINE( 121)		::String folderKey = key;
HXDLIN( 121)		::String file = ::backend::Paths_obj::modFolders(folderKey);
HXDLIN( 121)		::String _hx_tmp7;
HXDLIN( 121)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 121)			_hx_tmp7 = file;
            		}
            		else {
HXLINE( 121)			_hx_tmp7 = (HX_("assets/",4c,2a,dc,36) + folderKey);
            		}
HXDLIN( 121)		_hx_tmp6->setFormat(_hx_tmp7,32,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 122)		{
HXLINE( 122)			 ::flixel::math::FlxBasePoint this2 = this->descText->scrollFactor;
HXDLIN( 122)			this2->set_x(( (Float)(0) ));
HXDLIN( 122)			this2->set_y(( (Float)(0) ));
            		}
HXLINE( 124)		this->descBox->sprTracker = this->descText;
HXLINE( 125)		this->add(this->descText);
HXLINE( 127)		 ::flixel::FlxSprite _hx_tmp8 = this->bg;
HXDLIN( 127)		::String color = this->creditsStuff->__get(this->curSelected).StaticCast< ::Array< ::String > >()->__get(4);
HXDLIN( 127)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN( 127)		::String color1 = ::StringTools_obj::trim(hideChars->split(color)->join(HX_("",00,00,00,00)));
HXDLIN( 127)		if (::StringTools_obj::startsWith(color1,HX_("0x",48,2a,00,00))) {
HXLINE(  59)			color1 = color1.substring((color1.length - 6),null());
            		}
HXLINE( 127)		 ::Dynamic colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color1);
HXDLIN( 127)		if (::hx::IsNull( colorNum )) {
HXLINE(  62)			colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color1));
            		}
HXLINE( 127)		int _hx_tmp9;
HXDLIN( 127)		if (::hx::IsNotNull( colorNum )) {
HXLINE( 127)			_hx_tmp9 = ( (int)(colorNum) );
            		}
            		else {
HXLINE( 127)			_hx_tmp9 = -1;
            		}
HXDLIN( 127)		_hx_tmp8->set_color(_hx_tmp9);
HXLINE( 128)		this->intendedColor = this->bg->color;
HXLINE( 129)		this->changeSelection(null());
HXLINE( 130)		this->super::create();
            	}


void CreditsState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_178cfd7cdc100066_136_update)
HXLINE( 137)		if ((::flixel::FlxG_obj::sound->music->_volume < ((Float)0.7))) {
HXLINE( 139)			 ::flixel::sound::FlxSound fh = ::flixel::FlxG_obj::sound->music;
HXDLIN( 139)			fh->set_volume((fh->_volume + (((Float)0.5) * elapsed)));
            		}
HXLINE( 142)		if (!(this->quitting)) {
HXLINE( 144)			if ((this->creditsStuff->length > 1)) {
HXLINE( 146)				int shiftMult = 1;
HXLINE( 147)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 147)				if (_this->keyManager->checkStatusUnsafe(16,_this->status)) {
HXLINE( 147)					shiftMult = 3;
            				}
HXLINE( 149)				bool upP = this->get_controls()->get_UI_UP_P();
HXLINE( 150)				bool downP = this->get_controls()->get_UI_DOWN_P();
HXLINE( 152)				if (upP) {
HXLINE( 154)					this->changeSelection(-(shiftMult));
HXLINE( 155)					this->holdTime = ( (Float)(0) );
            				}
HXLINE( 157)				if (downP) {
HXLINE( 159)					this->changeSelection(shiftMult);
HXLINE( 160)					this->holdTime = ( (Float)(0) );
            				}
HXLINE( 163)				bool _hx_tmp;
HXDLIN( 163)				if (!(this->get_controls()->get_UI_DOWN())) {
HXLINE( 163)					_hx_tmp = this->get_controls()->get_UI_UP();
            				}
            				else {
HXLINE( 163)					_hx_tmp = true;
            				}
HXDLIN( 163)				if (_hx_tmp) {
HXLINE( 165)					int checkLastHold = ::Math_obj::floor(((this->holdTime - ((Float)0.5)) * ( (Float)(10) )));
HXLINE( 166)					 ::states::CreditsState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 166)					_hx_tmp1->holdTime = (_hx_tmp1->holdTime + elapsed);
HXLINE( 167)					int checkNewHold = ::Math_obj::floor(((this->holdTime - ((Float)0.5)) * ( (Float)(10) )));
HXLINE( 169)					bool _hx_tmp2;
HXDLIN( 169)					if ((this->holdTime > ((Float)0.5))) {
HXLINE( 169)						_hx_tmp2 = ((checkNewHold - checkLastHold) > 0);
            					}
            					else {
HXLINE( 169)						_hx_tmp2 = false;
            					}
HXDLIN( 169)					if (_hx_tmp2) {
HXLINE( 171)						int _hx_tmp3;
HXDLIN( 171)						if (this->get_controls()->get_UI_UP()) {
HXLINE( 171)							_hx_tmp3 = -(shiftMult);
            						}
            						else {
HXLINE( 171)							_hx_tmp3 = shiftMult;
            						}
HXDLIN( 171)						this->changeSelection(((checkNewHold - checkLastHold) * _hx_tmp3));
            					}
            				}
            			}
HXLINE( 176)			bool _hx_tmp4;
HXDLIN( 176)			if (this->get_controls()->get_ACCEPT()) {
HXLINE( 176)				if (::hx::IsNotNull( this->creditsStuff->__get(this->curSelected).StaticCast< ::Array< ::String > >()->__get(3) )) {
HXLINE( 176)					_hx_tmp4 = (this->creditsStuff->__get(this->curSelected).StaticCast< ::Array< ::String > >()->__get(3).length > 4);
            				}
            				else {
HXLINE( 176)					_hx_tmp4 = true;
            				}
            			}
            			else {
HXLINE( 176)				_hx_tmp4 = false;
            			}
HXDLIN( 176)			if (_hx_tmp4) {
HXLINE( 177)				::String url = this->creditsStuff->__get(this->curSelected).StaticCast< ::Array< ::String > >()->__get(3);
HXDLIN( 177)				if (!( ::EReg_obj::__alloc( HX_CTX ,HX_("^.\\w+?:/*",16,3c,ef,2d),HX_("",00,00,00,00))->match(url))) {
HXLINE( 177)					url = (HX_("https://",cf,b4,ae,3e) + url);
            				}
HXDLIN( 177)				::openfl::Lib_obj::getURL( ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,url),HX_("_blank",95,26,d9,b0));
            			}
HXLINE( 179)			if (this->get_controls()->get_BACK()) {
HXLINE( 181)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp5 = ::flixel::FlxG_obj::sound;
HXDLIN( 181)				_hx_tmp5->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("cancelMenu",39,a4,43,b7)),null(),true,null()),null(),null(),null(),null(),null());
HXLINE( 182)				::backend::MusicBeatState_obj::switchState( ::states::MainMenuState_obj::__alloc( HX_CTX ));
HXLINE( 183)				this->quitting = true;
            			}
            		}
HXLINE( 187)		{
HXLINE( 187)			int _g = 0;
HXDLIN( 187)			::Array< ::Dynamic> _g1 = this->grpOptions->members;
HXDLIN( 187)			while((_g < _g1->length)){
HXLINE( 187)				 ::objects::Alphabet item = _g1->__get(_g).StaticCast<  ::objects::Alphabet >();
HXDLIN( 187)				_g = (_g + 1);
HXLINE( 189)				if (!(item->bold)) {
HXLINE( 191)					Float lerpVal = ::Math_obj::exp((-(elapsed) * ( (Float)(12) )));
HXLINE( 192)					if ((item->targetY == 0)) {
HXLINE( 194)						Float lastX = item->x;
HXLINE( 195)						{
HXLINE( 195)							int axes = 1;
HXDLIN( 195)							bool _hx_tmp6;
HXDLIN( 195)							if ((axes != 1)) {
HXLINE( 195)								_hx_tmp6 = (axes == 17);
            							}
            							else {
HXLINE( 195)								_hx_tmp6 = true;
            							}
HXDLIN( 195)							if (_hx_tmp6) {
HXLINE( 195)								int _hx_tmp7 = ::flixel::FlxG_obj::width;
HXDLIN( 195)								item->set_x(((( (Float)(_hx_tmp7) ) - item->get_width()) / ( (Float)(2) )));
            							}
HXDLIN( 195)							bool _hx_tmp8;
HXDLIN( 195)							if ((axes != 16)) {
HXLINE( 195)								_hx_tmp8 = (axes == 17);
            							}
            							else {
HXLINE( 195)								_hx_tmp8 = true;
            							}
HXDLIN( 195)							if (_hx_tmp8) {
HXLINE( 195)								int _hx_tmp9 = ::flixel::FlxG_obj::height;
HXDLIN( 195)								item->set_y(((( (Float)(_hx_tmp9) ) - item->get_height()) / ( (Float)(2) )));
            							}
            						}
HXLINE( 196)						Float a = (item->x - ( (Float)(70) ));
HXDLIN( 196)						item->set_x((a + (lerpVal * (lastX - a))));
            					}
            					else {
HXLINE( 200)						Float a1 = (200 + (( (Float)(-40) ) * ::Math_obj::abs(( (Float)(item->targetY) ))));
HXDLIN( 200)						item->set_x((a1 + (lerpVal * (item->x - a1))));
            					}
            				}
            			}
            		}
HXLINE( 204)		this->super::update(elapsed);
            	}


void CreditsState_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_178cfd7cdc100066_209_changeSelection)
HXLINE( 210)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 210)		_hx_tmp->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("scrollMenu",4c,d4,18,06)),null(),true,null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 211)		do {
HXLINE( 213)			this->curSelected = ::flixel::math::FlxMath_obj::wrap((this->curSelected + change),0,(this->creditsStuff->length - 1));
            		} while(this->unselectableCheck(this->curSelected));
;
HXLINE( 217)		::String color = this->creditsStuff->__get(this->curSelected).StaticCast< ::Array< ::String > >()->__get(4);
HXDLIN( 217)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN( 217)		::String color1 = ::StringTools_obj::trim(hideChars->split(color)->join(HX_("",00,00,00,00)));
HXDLIN( 217)		if (::StringTools_obj::startsWith(color1,HX_("0x",48,2a,00,00))) {
HXLINE(  59)			color1 = color1.substring((color1.length - 6),null());
            		}
HXLINE( 217)		 ::Dynamic colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color1);
HXDLIN( 217)		if (::hx::IsNull( colorNum )) {
HXLINE(  62)			colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color1));
            		}
HXLINE( 217)		int newColor;
HXDLIN( 217)		if (::hx::IsNotNull( colorNum )) {
HXLINE( 217)			newColor = ( (int)(colorNum) );
            		}
            		else {
HXLINE( 217)			newColor = -1;
            		}
HXLINE( 219)		if ((newColor != this->intendedColor)) {
HXLINE( 221)			this->intendedColor = newColor;
HXLINE( 222)			::flixel::tweens::FlxTween_obj::cancelTweensOf(this->bg,null());
HXLINE( 223)			::flixel::tweens::FlxTween_obj::color(this->bg,1,this->bg->color,this->intendedColor,null());
            		}
HXLINE( 226)		{
HXLINE( 226)			int _g_current = 0;
HXDLIN( 226)			::Array< ::Dynamic> _g_array = this->grpOptions->members;
HXDLIN( 226)			while((_g_current < _g_array->length)){
HXLINE( 226)				 ::objects::Alphabet _g_value = _g_array->__get(_g_current).StaticCast<  ::objects::Alphabet >();
HXDLIN( 226)				_g_current = (_g_current + 1);
HXDLIN( 226)				int _g_key = (_g_current - 1);
HXDLIN( 226)				int num = _g_key;
HXDLIN( 226)				 ::objects::Alphabet item = _g_value;
HXLINE( 227)				{
HXLINE( 228)					item->targetY = (num - this->curSelected);
HXLINE( 229)					if (!(this->unselectableCheck(num))) {
HXLINE( 230)						item->set_alpha(((Float)0.6));
HXLINE( 231)						if ((item->targetY == 0)) {
HXLINE( 232)							item->set_alpha(( (Float)(1) ));
            						}
            					}
            				}
            			}
            		}
HXLINE( 237)		this->descText->set_text(this->creditsStuff->__get(this->curSelected).StaticCast< ::Array< ::String > >()->__get(2));
HXLINE( 238)		if ((::StringTools_obj::trim(this->descText->text).length > 0)) {
HXLINE( 240)			 ::flixel::text::FlxText _hx_tmp1 = this->descText;
HXDLIN( 240)			_hx_tmp1->set_visible(this->descBox->set_visible(true));
HXLINE( 241)			 ::flixel::text::FlxText _hx_tmp2 = this->descText;
HXDLIN( 241)			int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 241)			Float _hx_tmp4 = (( (Float)(_hx_tmp3) ) - this->descText->get_height());
HXDLIN( 241)			_hx_tmp2->set_y(((_hx_tmp4 + this->offsetThing) - ( (Float)(60) )));
HXLINE( 243)			if (::hx::IsNotNull( this->moveTween )) {
HXLINE( 243)				this->moveTween->cancel();
            			}
HXLINE( 244)			this->moveTween = ::flixel::tweens::FlxTween_obj::tween(this->descText, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("y",79,00,00,00),(this->descText->y + 75))),((Float)0.25), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::sineOut_dyn())));
HXLINE( 246)			 ::objects::AttachedSprite _hx_tmp5 = this->descBox;
HXDLIN( 246)			int _hx_tmp6 = ::Std_obj::_hx_int((this->descText->get_width() + 20));
HXDLIN( 246)			_hx_tmp5->setGraphicSize(_hx_tmp6,::Std_obj::_hx_int((this->descText->get_height() + 25)));
HXLINE( 247)			this->descBox->updateHitbox();
            		}
            		else {
HXLINE( 249)			 ::flixel::text::FlxText _hx_tmp7 = this->descText;
HXDLIN( 249)			_hx_tmp7->set_visible(this->descBox->set_visible(false));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CreditsState_obj,changeSelection,(void))

void CreditsState_obj::pushModCreditsToList(::String folder){
            	HX_STACKFRAME(&_hx_pos_178cfd7cdc100066_254_pushModCreditsToList)
HXLINE( 255)		::String key = (folder + HX_("/data/credits.txt",a6,fd,31,d1));
HXDLIN( 255)		if (::hx::IsNull( key )) {
HXLINE( 255)			key = HX_("",00,00,00,00);
            		}
HXDLIN( 255)		::String creditsFile = (HX_("mods/",9e,2f,58,0c) + key);
HXLINE( 259)		::String key1 = (folder + ((HX_("/data/credits-",09,73,cc,c0) + ::backend::ClientPrefs_obj::data->language) + HX_(".txt",02,3f,c0,1e)));
HXDLIN( 259)		if (::hx::IsNull( key1 )) {
HXLINE( 259)			key1 = HX_("",00,00,00,00);
            		}
HXDLIN( 259)		::String translatedCredits = (HX_("mods/",9e,2f,58,0c) + key1);
HXLINE( 262)		bool _hx_tmp;
HXDLIN( 262)		bool _hx_tmp1;
HXDLIN( 262)		if (::sys::FileSystem_obj::exists(translatedCredits)) {
HXLINE( 262)			creditsFile = translatedCredits;
HXDLIN( 262)			_hx_tmp1 = (creditsFile == translatedCredits);
            		}
            		else {
HXLINE( 262)			_hx_tmp1 = false;
            		}
HXDLIN( 262)		if (!(_hx_tmp1)) {
HXLINE( 262)			_hx_tmp = ::sys::FileSystem_obj::exists(creditsFile);
            		}
            		else {
HXLINE( 262)			_hx_tmp = true;
            		}
HXDLIN( 262)		if (_hx_tmp) {
HXLINE( 264)			::Array< ::String > firstarray = ::sys::io::File_obj::getContent(creditsFile).split(HX_("\n",0a,00,00,00));
HXLINE( 265)			{
HXLINE( 265)				int _g = 0;
HXDLIN( 265)				while((_g < firstarray->length)){
HXLINE( 265)					::String i = firstarray->__get(_g);
HXDLIN( 265)					_g = (_g + 1);
HXLINE( 267)					::Array< ::String > arr = ::StringTools_obj::replace(i,HX_("\\n",92,50,00,00),HX_("\n",0a,00,00,00)).split(HX_("::",c0,32,00,00));
HXLINE( 268)					if ((arr->length >= 5)) {
HXLINE( 268)						arr->push(folder);
            					}
HXLINE( 269)					this->creditsStuff->push(arr);
            				}
            			}
HXLINE( 271)			this->creditsStuff->push(::Array_obj< ::String >::fromData( _hx_array_data_79985863_42,1));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CreditsState_obj,pushModCreditsToList,(void))

bool CreditsState_obj::unselectableCheck(int num){
            	HX_STACKFRAME(&_hx_pos_178cfd7cdc100066_277_unselectableCheck)
HXDLIN( 277)		return (this->creditsStuff->__get(num).StaticCast< ::Array< ::String > >()->length <= 1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CreditsState_obj,unselectableCheck,return )


::hx::ObjectPtr< CreditsState_obj > CreditsState_obj::__new() {
	::hx::ObjectPtr< CreditsState_obj > __this = new CreditsState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< CreditsState_obj > CreditsState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	CreditsState_obj *__this = (CreditsState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CreditsState_obj), true, "states.CreditsState"));
	*(void **)__this = CreditsState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CreditsState_obj::CreditsState_obj()
{
}

void CreditsState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CreditsState);
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(grpOptions,"grpOptions");
	HX_MARK_MEMBER_NAME(iconArray,"iconArray");
	HX_MARK_MEMBER_NAME(creditsStuff,"creditsStuff");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(descText,"descText");
	HX_MARK_MEMBER_NAME(intendedColor,"intendedColor");
	HX_MARK_MEMBER_NAME(descBox,"descBox");
	HX_MARK_MEMBER_NAME(offsetThing,"offsetThing");
	HX_MARK_MEMBER_NAME(quitting,"quitting");
	HX_MARK_MEMBER_NAME(holdTime,"holdTime");
	HX_MARK_MEMBER_NAME(moveTween,"moveTween");
	 ::backend::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CreditsState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(grpOptions,"grpOptions");
	HX_VISIT_MEMBER_NAME(iconArray,"iconArray");
	HX_VISIT_MEMBER_NAME(creditsStuff,"creditsStuff");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(descText,"descText");
	HX_VISIT_MEMBER_NAME(intendedColor,"intendedColor");
	HX_VISIT_MEMBER_NAME(descBox,"descBox");
	HX_VISIT_MEMBER_NAME(offsetThing,"offsetThing");
	HX_VISIT_MEMBER_NAME(quitting,"quitting");
	HX_VISIT_MEMBER_NAME(holdTime,"holdTime");
	HX_VISIT_MEMBER_NAME(moveTween,"moveTween");
	 ::backend::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CreditsState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"descBox") ) { return ::hx::Val( descBox ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"descText") ) { return ::hx::Val( descText ); }
		if (HX_FIELD_EQ(inName,"quitting") ) { return ::hx::Val( quitting ); }
		if (HX_FIELD_EQ(inName,"holdTime") ) { return ::hx::Val( holdTime ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"iconArray") ) { return ::hx::Val( iconArray ); }
		if (HX_FIELD_EQ(inName,"moveTween") ) { return ::hx::Val( moveTween ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpOptions") ) { return ::hx::Val( grpOptions ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		if (HX_FIELD_EQ(inName,"offsetThing") ) { return ::hx::Val( offsetThing ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"creditsStuff") ) { return ::hx::Val( creditsStuff ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"intendedColor") ) { return ::hx::Val( intendedColor ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"unselectableCheck") ) { return ::hx::Val( unselectableCheck_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"pushModCreditsToList") ) { return ::hx::Val( pushModCreditsToList_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CreditsState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"descBox") ) { descBox=inValue.Cast<  ::objects::AttachedSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"descText") ) { descText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"quitting") ) { quitting=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdTime") ) { holdTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"iconArray") ) { iconArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"moveTween") ) { moveTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpOptions") ) { grpOptions=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetThing") ) { offsetThing=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"creditsStuff") ) { creditsStuff=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"intendedColor") ) { intendedColor=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CreditsState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("grpOptions",f9,45,d8,00));
	outFields->push(HX_("iconArray",60,3f,53,5f));
	outFields->push(HX_("creditsStuff",7a,9a,7e,73));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("descText",9e,53,35,f3));
	outFields->push(HX_("intendedColor",b8,fb,ff,5a));
	outFields->push(HX_("descBox",3a,20,25,19));
	outFields->push(HX_("offsetThing",5b,0b,0a,a8));
	outFields->push(HX_("quitting",3d,a0,84,53));
	outFields->push(HX_("holdTime",ec,cc,bf,3e));
	outFields->push(HX_("moveTween",9a,79,37,d7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CreditsState_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(CreditsState_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(CreditsState_obj,grpOptions),HX_("grpOptions",f9,45,d8,00)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(CreditsState_obj,iconArray),HX_("iconArray",60,3f,53,5f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(CreditsState_obj,creditsStuff),HX_("creditsStuff",7a,9a,7e,73)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CreditsState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CreditsState_obj,descText),HX_("descText",9e,53,35,f3)},
	{::hx::fsInt,(int)offsetof(CreditsState_obj,intendedColor),HX_("intendedColor",b8,fb,ff,5a)},
	{::hx::fsObject /*  ::objects::AttachedSprite */ ,(int)offsetof(CreditsState_obj,descBox),HX_("descBox",3a,20,25,19)},
	{::hx::fsFloat,(int)offsetof(CreditsState_obj,offsetThing),HX_("offsetThing",5b,0b,0a,a8)},
	{::hx::fsBool,(int)offsetof(CreditsState_obj,quitting),HX_("quitting",3d,a0,84,53)},
	{::hx::fsFloat,(int)offsetof(CreditsState_obj,holdTime),HX_("holdTime",ec,cc,bf,3e)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(CreditsState_obj,moveTween),HX_("moveTween",9a,79,37,d7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CreditsState_obj_sStaticStorageInfo = 0;
#endif

static ::String CreditsState_obj_sMemberFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	HX_("grpOptions",f9,45,d8,00),
	HX_("iconArray",60,3f,53,5f),
	HX_("creditsStuff",7a,9a,7e,73),
	HX_("bg",c5,55,00,00),
	HX_("descText",9e,53,35,f3),
	HX_("intendedColor",b8,fb,ff,5a),
	HX_("descBox",3a,20,25,19),
	HX_("offsetThing",5b,0b,0a,a8),
	HX_("create",fc,66,0f,7c),
	HX_("quitting",3d,a0,84,53),
	HX_("holdTime",ec,cc,bf,3e),
	HX_("update",09,86,05,87),
	HX_("moveTween",9a,79,37,d7),
	HX_("changeSelection",bc,98,b5,48),
	HX_("pushModCreditsToList",0b,03,bb,6c),
	HX_("unselectableCheck",19,58,ce,19),
	::String(null()) };

::hx::Class CreditsState_obj::__mClass;

void CreditsState_obj::__register()
{
	CreditsState_obj _hx_dummy;
	CreditsState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.CreditsState",63,58,98,79);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CreditsState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CreditsState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CreditsState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CreditsState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
