// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_backend_BaseStage
#include <backend/BaseStage.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Conductor
#include <backend/Conductor.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_objects_BGSprite
#include <objects/BGSprite.h>
#endif
#ifndef INCLUDED_objects_Character
#include <objects/Character.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_stages_Philly
#include <states/stages/Philly.h>
#endif
#ifndef INCLUDED_states_stages_objects_PhillyGlowGradient
#include <states/stages/objects/PhillyGlowGradient.h>
#endif
#ifndef INCLUDED_states_stages_objects_PhillyGlowParticle
#include <states/stages/objects/PhillyGlowParticle.h>
#endif
#ifndef INCLUDED_states_stages_objects_PhillyTrain
#include <states/stages/objects/PhillyTrain.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_88dd6f0b2f15fde5_6_new,"states.stages.Philly","new",0xa76921e7,"states.stages.Philly.new","states/stages/Philly.hx",6,0xe4b62149)
HX_LOCAL_STACK_FRAME(_hx_pos_88dd6f0b2f15fde5_22_create,"states.stages.Philly","create",0x939e83d5,"states.stages.Philly.create","states/stages/Philly.hx",22,0xe4b62149)
static const int _hx_array_data_efd2a275_2[] = {
	(int)-13524227,(int)-13501044,(int)-314379,(int)-178895,(int)-285133,
};
HX_LOCAL_STACK_FRAME(_hx_pos_88dd6f0b2f15fde5_53_eventPushed,"states.stages.Philly","eventPushed",0xa91710fa,"states.stages.Philly.eventPushed","states/stages/Philly.hx",53,0xe4b62149)
HX_LOCAL_STACK_FRAME(_hx_pos_88dd6f0b2f15fde5_79_update,"states.stages.Philly","update",0x9e94a2e2,"states.stages.Philly.update","states/stages/Philly.hx",79,0xe4b62149)
HX_LOCAL_STACK_FRAME(_hx_pos_88dd6f0b2f15fde5_85_update,"states.stages.Philly","update",0x9e94a2e2,"states.stages.Philly.update","states/stages/Philly.hx",85,0xe4b62149)
HX_LOCAL_STACK_FRAME(_hx_pos_88dd6f0b2f15fde5_92_beatHit,"states.stages.Philly","beatHit",0xf9af0b84,"states.stages.Philly.beatHit","states/stages/Philly.hx",92,0xe4b62149)
HX_LOCAL_STACK_FRAME(_hx_pos_88dd6f0b2f15fde5_104_eventCalled,"states.stages.Philly","eventCalled",0xedd250be,"states.stages.Philly.eventCalled","states/stages/Philly.hx",104,0xe4b62149)
HX_LOCAL_STACK_FRAME(_hx_pos_88dd6f0b2f15fde5_172_eventCalled,"states.stages.Philly","eventCalled",0xedd250be,"states.stages.Philly.eventCalled","states/stages/Philly.hx",172,0xe4b62149)
HX_LOCAL_STACK_FRAME(_hx_pos_88dd6f0b2f15fde5_205_doFlash,"states.stages.Philly","doFlash",0xbb63372c,"states.stages.Philly.doFlash","states/stages/Philly.hx",205,0xe4b62149)
namespace states{
namespace stages{

void Philly_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_88dd6f0b2f15fde5_6_new)
HXLINE(  19)		this->curLightEvent = -1;
HXLINE(  12)		this->curLight = -1;
HXLINE(   6)		super::__construct();
            	}

Dynamic Philly_obj::__CreateEmpty() { return new Philly_obj; }

void *Philly_obj::_hx_vtable = 0;

Dynamic Philly_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Philly_obj > _hx_result = new Philly_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Philly_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x463de9bf) {
		if (inClassId<=(int)0x230cab9d) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x230cab9d;
		} else {
			return inClassId==(int)0x463de9bf;
		}
	} else {
		return inClassId==(int)0x7ccf8994;
	}
}

void Philly_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_88dd6f0b2f15fde5_22_create)
HXLINE(  23)		if (!(::backend::ClientPrefs_obj::data->lowQuality)) {
HXLINE(  24)			 ::objects::BGSprite bg =  ::objects::BGSprite_obj::__alloc( HX_CTX ,HX_("philly/sky",3a,d3,d5,cc),-100,0,((Float)0.1),((Float)0.1),null(),null());
HXLINE(  25)			this->add(bg);
            		}
HXLINE(  28)		 ::objects::BGSprite city =  ::objects::BGSprite_obj::__alloc( HX_CTX ,HX_("philly/city",32,0d,ae,63),-10,0,((Float)0.3),((Float)0.3),null(),null());
HXLINE(  29)		city->setGraphicSize(::Std_obj::_hx_int((city->get_width() * ((Float)0.85))),null());
HXLINE(  30)		city->updateHitbox();
HXLINE(  31)		this->add(city);
HXLINE(  33)		this->phillyLightsColors = ::Array_obj< int >::fromData( _hx_array_data_efd2a275_2,5);
HXLINE(  34)		this->phillyWindow =  ::objects::BGSprite_obj::__alloc( HX_CTX ,HX_("philly/window",37,9f,4d,30),city->x,city->y,((Float)0.3),((Float)0.3),null(),null());
HXLINE(  35)		 ::objects::BGSprite _hx_tmp = this->phillyWindow;
HXDLIN(  35)		_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->phillyWindow->get_width() * ((Float)0.85))),null());
HXLINE(  36)		this->phillyWindow->updateHitbox();
HXLINE(  37)		this->add(this->phillyWindow);
HXLINE(  38)		this->phillyWindow->set_alpha(( (Float)(0) ));
HXLINE(  40)		if (!(::backend::ClientPrefs_obj::data->lowQuality)) {
HXLINE(  41)			 ::objects::BGSprite streetBehind =  ::objects::BGSprite_obj::__alloc( HX_CTX ,HX_("philly/behindTrain",07,a4,6d,d4),-40,50,null(),null(),null(),null());
HXLINE(  42)			this->add(streetBehind);
            		}
HXLINE(  45)		this->phillyTrain =  ::states::stages::objects::PhillyTrain_obj::__alloc( HX_CTX ,2000,360,null(),null());
HXLINE(  46)		this->add(this->phillyTrain);
HXLINE(  48)		this->phillyStreet =  ::objects::BGSprite_obj::__alloc( HX_CTX ,HX_("philly/street",4a,23,ee,ee),-40,50,null(),null(),null(),null());
HXLINE(  49)		this->add(this->phillyStreet);
            	}


void Philly_obj::eventPushed( ::Dynamic event){
            	HX_GC_STACKFRAME(&_hx_pos_88dd6f0b2f15fde5_53_eventPushed)
HXDLIN(  53)		if (::hx::IsEq( event->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic),HX_("Philly Glow",85,3a,5e,92) )) {
HXLINE(  56)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)-0.5)),(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)-0.5)),null());
HXDLIN(  56)			int _hx_tmp1 = ::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::width * 2)) ));
HXDLIN(  56)			this->blammedLightsBlack = _hx_tmp->makeGraphic(_hx_tmp1,::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::height * 2)) )),-16777216,null(),null());
HXLINE(  57)			this->blammedLightsBlack->set_visible(false);
HXLINE(  58)			int _hx_tmp2 = ( (::Array< ::Dynamic>)(::flixel::FlxG_obj::game->_state->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic)) )->indexOf(this->phillyStreet,null());
HXDLIN(  58)			this->insert(_hx_tmp2,this->blammedLightsBlack);
HXLINE(  60)			this->phillyWindowEvent =  ::objects::BGSprite_obj::__alloc( HX_CTX ,HX_("philly/window",37,9f,4d,30),this->phillyWindow->x,this->phillyWindow->y,((Float)0.3),((Float)0.3),null(),null());
HXLINE(  61)			 ::objects::BGSprite _hx_tmp3 = this->phillyWindowEvent;
HXDLIN(  61)			_hx_tmp3->setGraphicSize(::Std_obj::_hx_int((this->phillyWindowEvent->get_width() * ((Float)0.85))),null());
HXLINE(  62)			this->phillyWindowEvent->updateHitbox();
HXLINE(  63)			this->phillyWindowEvent->set_visible(false);
HXLINE(  64)			int _hx_tmp4 = (( (::Array< ::Dynamic>)(::flixel::FlxG_obj::game->_state->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic)) )->indexOf(this->blammedLightsBlack,null()) + 1);
HXDLIN(  64)			this->insert(_hx_tmp4,this->phillyWindowEvent);
HXLINE(  66)			this->phillyGlowGradient =  ::states::stages::objects::PhillyGlowGradient_obj::__alloc( HX_CTX ,( (Float)(-400) ),( (Float)(225) ));
HXLINE(  67)			this->phillyGlowGradient->set_visible(false);
HXLINE(  68)			int _hx_tmp5 = (( (::Array< ::Dynamic>)(::flixel::FlxG_obj::game->_state->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic)) )->indexOf(this->blammedLightsBlack,null()) + 1);
HXDLIN(  68)			this->insert(_hx_tmp5,this->phillyGlowGradient);
HXLINE(  69)			if (!(::backend::ClientPrefs_obj::data->flashing)) {
HXLINE(  69)				this->phillyGlowGradient->intendedAlpha = ((Float)0.7);
            			}
HXLINE(  71)			::backend::Paths_obj::image(HX_("philly/particle",4d,e9,20,05),null(),null());
HXLINE(  72)			this->phillyGlowParticles =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  73)			this->phillyGlowParticles->set_visible(false);
HXLINE(  74)			int _hx_tmp6 = (( (::Array< ::Dynamic>)(::flixel::FlxG_obj::game->_state->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic)) )->indexOf(this->phillyGlowGradient,null()) + 1);
HXDLIN(  74)			this->insert(_hx_tmp6,this->phillyGlowParticles);
            		}
            	}


void Philly_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_88dd6f0b2f15fde5_79_update)
HXLINE(  80)		 ::objects::BGSprite fh = this->phillyWindow;
HXDLIN(  80)		fh->set_alpha((fh->alpha - (((::backend::Conductor_obj::crochet / ( (Float)(1000) )) * elapsed) * ((Float)1.5))));
HXLINE(  81)		if (::hx::IsNotNull( this->phillyGlowParticles )) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::states::stages::objects::PhillyGlowParticle particle){
            				HX_STACKFRAME(&_hx_pos_88dd6f0b2f15fde5_85_update)
HXLINE(  85)				if ((particle->alpha <= 0)) {
HXLINE(  86)					particle->kill();
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  83)			this->phillyGlowParticles->forEachAlive( ::Dynamic(new _hx_Closure_0()),null());
            		}
            	}


void Philly_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_88dd6f0b2f15fde5_92_beatHit)
HXLINE(  93)		this->phillyTrain->beatHit(this->curBeat);
HXLINE(  94)		if ((::hx::Mod(this->curBeat,4) == 0)) {
HXLINE(  96)			this->curLight = ::flixel::FlxG_obj::random->_hx_int(0,(this->phillyLightsColors->length - 1),::Array_obj< int >::__new(1)->init(0,this->curLight));
HXLINE(  97)			this->phillyWindow->set_color(this->phillyLightsColors->__get(this->curLight));
HXLINE(  98)			this->phillyWindow->set_alpha(( (Float)(1) ));
            		}
            	}


void Philly_obj::eventCalled(::String eventName,::String value1,::String value2, ::Dynamic flValue1, ::Dynamic flValue2,Float strumTime){
            	HX_STACKFRAME(&_hx_pos_88dd6f0b2f15fde5_104_eventCalled)
HXDLIN( 104)		if ((eventName == HX_("Philly Glow",85,3a,5e,92))) {
HXLINE( 107)			bool _hx_tmp;
HXDLIN( 107)			if (::hx::IsNotNull( flValue1 )) {
HXLINE( 107)				_hx_tmp = ::hx::IsLessEq( flValue1,0 );
            			}
            			else {
HXLINE( 107)				_hx_tmp = true;
            			}
HXDLIN( 107)			if (_hx_tmp) {
HXLINE( 107)				flValue1 = 0;
            			}
HXLINE( 108)			int lightId = ::Math_obj::round(( (Float)(flValue1) ));
HXLINE( 110)			::Array< ::Dynamic> chars = ::Array_obj< ::Dynamic>::__new(3)->init(0,( ( ::objects::Character)(::flixel::FlxG_obj::game->_state->__Field(HX_("boyfriend",6a,29,b8,e6),::hx::paccDynamic)) ))->init(1,( ( ::objects::Character)(::flixel::FlxG_obj::game->_state->__Field(HX_("gf",1f,5a,00,00),::hx::paccDynamic)) ))->init(2,( ( ::objects::Character)(::flixel::FlxG_obj::game->_state->__Field(HX_("dad",47,36,4c,00),::hx::paccDynamic)) ));
HXLINE( 111)			switch((int)(lightId)){
            				case (int)0: {
HXLINE( 114)					if (this->phillyGlowGradient->visible) {
HXLINE( 116)						this->doFlash();
HXLINE( 117)						if (::backend::ClientPrefs_obj::data->camZooms) {
HXLINE( 119)							 ::flixel::FlxCamera fh = ::flixel::FlxG_obj::camera;
HXDLIN( 119)							fh->set_zoom((fh->zoom + ((Float)0.5)));
HXLINE( 120)							 ::flixel::FlxCamera fh1 = ( ( ::flixel::FlxCamera)(::flixel::FlxG_obj::game->_state->__Field(HX_("camHUD",e8,2b,76,b7),::hx::paccDynamic)) );
HXDLIN( 120)							fh1->set_zoom((fh1->zoom + ((Float)0.1)));
            						}
HXLINE( 123)						this->blammedLightsBlack->set_visible(false);
HXLINE( 124)						this->phillyWindowEvent->set_visible(false);
HXLINE( 125)						this->phillyGlowGradient->set_visible(false);
HXLINE( 126)						this->phillyGlowParticles->set_visible(false);
HXLINE( 127)						this->curLightEvent = -1;
HXLINE( 129)						{
HXLINE( 129)							int _g = 0;
HXDLIN( 129)							while((_g < chars->length)){
HXLINE( 129)								 ::objects::Character who = chars->__get(_g).StaticCast<  ::objects::Character >();
HXDLIN( 129)								_g = (_g + 1);
HXLINE( 131)								who->set_color(-1);
            							}
            						}
HXLINE( 133)						this->phillyStreet->set_color(-1);
            					}
            				}
            				break;
            				case (int)1: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::Array< int >,color) HXARGC(1)
            					void _hx_run( ::states::stages::objects::PhillyGlowParticle particle){
            						HX_STACKFRAME(&_hx_pos_88dd6f0b2f15fde5_172_eventCalled)
HXLINE( 172)						particle->set_color(color->__get(0));
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 137)					this->curLightEvent = ::flixel::FlxG_obj::random->_hx_int(0,(this->phillyLightsColors->length - 1),::Array_obj< int >::__new(1)->init(0,this->curLightEvent));
HXLINE( 138)					::Array< int > color = ::Array_obj< int >::__new(1)->init(0,this->phillyLightsColors->__get(this->curLightEvent));
HXLINE( 140)					if (!(this->phillyGlowGradient->visible)) {
HXLINE( 142)						this->doFlash();
HXLINE( 143)						if (::backend::ClientPrefs_obj::data->camZooms) {
HXLINE( 145)							 ::flixel::FlxCamera fh2 = ::flixel::FlxG_obj::camera;
HXDLIN( 145)							fh2->set_zoom((fh2->zoom + ((Float)0.5)));
HXLINE( 146)							 ::flixel::FlxCamera fh3 = ( ( ::flixel::FlxCamera)(::flixel::FlxG_obj::game->_state->__Field(HX_("camHUD",e8,2b,76,b7),::hx::paccDynamic)) );
HXDLIN( 146)							fh3->set_zoom((fh3->zoom + ((Float)0.1)));
            						}
HXLINE( 149)						this->blammedLightsBlack->set_visible(true);
HXLINE( 150)						this->blammedLightsBlack->set_alpha(( (Float)(1) ));
HXLINE( 151)						this->phillyWindowEvent->set_visible(true);
HXLINE( 152)						this->phillyGlowGradient->set_visible(true);
HXLINE( 153)						this->phillyGlowParticles->set_visible(true);
            					}
            					else {
HXLINE( 155)						if (::backend::ClientPrefs_obj::data->flashing) {
HXLINE( 157)							int colorButLower = color->__get(0);
HXLINE( 158)							{
HXLINE( 158)								int Value = ::Math_obj::round(((Float)63.75));
HXDLIN( 158)								colorButLower = (colorButLower & 16777215);
HXDLIN( 158)								int colorButLower1;
HXDLIN( 158)								if ((Value > 255)) {
HXLINE( 158)									colorButLower1 = 255;
            								}
            								else {
HXLINE( 158)									if ((Value < 0)) {
HXLINE( 158)										colorButLower1 = 0;
            									}
            									else {
HXLINE( 158)										colorButLower1 = Value;
            									}
            								}
HXDLIN( 158)								colorButLower = (colorButLower | (colorButLower1 << 24));
            							}
HXLINE( 159)							::flixel::FlxG_obj::camera->flash(colorButLower,((Float)0.5),null(),true);
            						}
            					}
HXLINE( 162)					int charColor = color->__get(0);
HXLINE( 163)					if (!(::backend::ClientPrefs_obj::data->flashing)) {
HXLINE( 163)						Float Value1 = (((::Math_obj::max((( (Float)(((charColor >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((charColor >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((charColor & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((charColor >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((charColor >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((charColor & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((charColor >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((charColor >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((charColor & 255)) ) / ( (Float)(255) ))))) * ((Float)0.5));
HXDLIN( 163)						{
HXLINE( 163)							Float Hue = ::flixel::util::_FlxColor::FlxColor_Impl__obj::get_hue(charColor);
HXDLIN( 163)							Float Brightness = ::Math_obj::max((( (Float)(((charColor >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((charColor >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((charColor & 255)) ) / ( (Float)(255) ))));
HXDLIN( 163)							Float Alpha = (( (Float)(((charColor >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 163)							Float chroma = (Brightness * Value1);
HXDLIN( 163)							Float match = (Brightness - chroma);
HXDLIN( 163)							{
HXLINE( 163)								Float Hue1 = Hue;
HXDLIN( 163)								Float Chroma = chroma;
HXDLIN( 163)								Hue1 = ::hx::Mod(Hue1,360);
HXDLIN( 163)								Float hueD = (Hue1 / ( (Float)(60) ));
HXDLIN( 163)								Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN( 163)								Chroma = (Chroma + match);
HXDLIN( 163)								switch((int)(::Std_obj::_hx_int(hueD))){
            									case (int)0: {
HXLINE( 163)										{
HXLINE( 163)											int Value2 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & -16711681);
HXDLIN( 163)											int charColor1;
HXDLIN( 163)											if ((Value2 > 255)) {
HXLINE( 163)												charColor1 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value2 < 0)) {
HXLINE( 163)													charColor1 = 0;
            												}
            												else {
HXLINE( 163)													charColor1 = Value2;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | (charColor1 << 16));
            										}
HXDLIN( 163)										{
HXLINE( 163)											int Value3 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & -65281);
HXDLIN( 163)											int charColor2;
HXDLIN( 163)											if ((Value3 > 255)) {
HXLINE( 163)												charColor2 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value3 < 0)) {
HXLINE( 163)													charColor2 = 0;
            												}
            												else {
HXLINE( 163)													charColor2 = Value3;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | (charColor2 << 8));
            										}
HXDLIN( 163)										{
HXLINE( 163)											int Value4 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & -256);
HXDLIN( 163)											int charColor3;
HXDLIN( 163)											if ((Value4 > 255)) {
HXLINE( 163)												charColor3 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value4 < 0)) {
HXLINE( 163)													charColor3 = 0;
            												}
            												else {
HXLINE( 163)													charColor3 = Value4;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | charColor3);
            										}
HXDLIN( 163)										{
HXLINE( 163)											int Value5 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & 16777215);
HXDLIN( 163)											int charColor4;
HXDLIN( 163)											if ((Value5 > 255)) {
HXLINE( 163)												charColor4 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value5 < 0)) {
HXLINE( 163)													charColor4 = 0;
            												}
            												else {
HXLINE( 163)													charColor4 = Value5;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | (charColor4 << 24));
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 163)										{
HXLINE( 163)											int Value6 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & -16711681);
HXDLIN( 163)											int charColor5;
HXDLIN( 163)											if ((Value6 > 255)) {
HXLINE( 163)												charColor5 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value6 < 0)) {
HXLINE( 163)													charColor5 = 0;
            												}
            												else {
HXLINE( 163)													charColor5 = Value6;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | (charColor5 << 16));
            										}
HXDLIN( 163)										{
HXLINE( 163)											int Value7 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & -65281);
HXDLIN( 163)											int charColor6;
HXDLIN( 163)											if ((Value7 > 255)) {
HXLINE( 163)												charColor6 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value7 < 0)) {
HXLINE( 163)													charColor6 = 0;
            												}
            												else {
HXLINE( 163)													charColor6 = Value7;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | (charColor6 << 8));
            										}
HXDLIN( 163)										{
HXLINE( 163)											int Value8 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & -256);
HXDLIN( 163)											int charColor7;
HXDLIN( 163)											if ((Value8 > 255)) {
HXLINE( 163)												charColor7 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value8 < 0)) {
HXLINE( 163)													charColor7 = 0;
            												}
            												else {
HXLINE( 163)													charColor7 = Value8;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | charColor7);
            										}
HXDLIN( 163)										{
HXLINE( 163)											int Value9 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & 16777215);
HXDLIN( 163)											int charColor8;
HXDLIN( 163)											if ((Value9 > 255)) {
HXLINE( 163)												charColor8 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value9 < 0)) {
HXLINE( 163)													charColor8 = 0;
            												}
            												else {
HXLINE( 163)													charColor8 = Value9;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | (charColor8 << 24));
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 163)										{
HXLINE( 163)											int Value10 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & -16711681);
HXDLIN( 163)											int charColor9;
HXDLIN( 163)											if ((Value10 > 255)) {
HXLINE( 163)												charColor9 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value10 < 0)) {
HXLINE( 163)													charColor9 = 0;
            												}
            												else {
HXLINE( 163)													charColor9 = Value10;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | (charColor9 << 16));
            										}
HXDLIN( 163)										{
HXLINE( 163)											int Value11 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & -65281);
HXDLIN( 163)											int charColor10;
HXDLIN( 163)											if ((Value11 > 255)) {
HXLINE( 163)												charColor10 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value11 < 0)) {
HXLINE( 163)													charColor10 = 0;
            												}
            												else {
HXLINE( 163)													charColor10 = Value11;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | (charColor10 << 8));
            										}
HXDLIN( 163)										{
HXLINE( 163)											int Value12 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & -256);
HXDLIN( 163)											int charColor11;
HXDLIN( 163)											if ((Value12 > 255)) {
HXLINE( 163)												charColor11 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value12 < 0)) {
HXLINE( 163)													charColor11 = 0;
            												}
            												else {
HXLINE( 163)													charColor11 = Value12;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | charColor11);
            										}
HXDLIN( 163)										{
HXLINE( 163)											int Value13 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & 16777215);
HXDLIN( 163)											int charColor12;
HXDLIN( 163)											if ((Value13 > 255)) {
HXLINE( 163)												charColor12 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value13 < 0)) {
HXLINE( 163)													charColor12 = 0;
            												}
            												else {
HXLINE( 163)													charColor12 = Value13;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | (charColor12 << 24));
            										}
            									}
            									break;
            									case (int)3: {
HXLINE( 163)										{
HXLINE( 163)											int Value14 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & -16711681);
HXDLIN( 163)											int charColor13;
HXDLIN( 163)											if ((Value14 > 255)) {
HXLINE( 163)												charColor13 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value14 < 0)) {
HXLINE( 163)													charColor13 = 0;
            												}
            												else {
HXLINE( 163)													charColor13 = Value14;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | (charColor13 << 16));
            										}
HXDLIN( 163)										{
HXLINE( 163)											int Value15 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & -65281);
HXDLIN( 163)											int charColor14;
HXDLIN( 163)											if ((Value15 > 255)) {
HXLINE( 163)												charColor14 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value15 < 0)) {
HXLINE( 163)													charColor14 = 0;
            												}
            												else {
HXLINE( 163)													charColor14 = Value15;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | (charColor14 << 8));
            										}
HXDLIN( 163)										{
HXLINE( 163)											int Value16 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & -256);
HXDLIN( 163)											int charColor15;
HXDLIN( 163)											if ((Value16 > 255)) {
HXLINE( 163)												charColor15 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value16 < 0)) {
HXLINE( 163)													charColor15 = 0;
            												}
            												else {
HXLINE( 163)													charColor15 = Value16;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | charColor15);
            										}
HXDLIN( 163)										{
HXLINE( 163)											int Value17 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & 16777215);
HXDLIN( 163)											int charColor16;
HXDLIN( 163)											if ((Value17 > 255)) {
HXLINE( 163)												charColor16 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value17 < 0)) {
HXLINE( 163)													charColor16 = 0;
            												}
            												else {
HXLINE( 163)													charColor16 = Value17;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | (charColor16 << 24));
            										}
            									}
            									break;
            									case (int)4: {
HXLINE( 163)										{
HXLINE( 163)											int Value18 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & -16711681);
HXDLIN( 163)											int charColor17;
HXDLIN( 163)											if ((Value18 > 255)) {
HXLINE( 163)												charColor17 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value18 < 0)) {
HXLINE( 163)													charColor17 = 0;
            												}
            												else {
HXLINE( 163)													charColor17 = Value18;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | (charColor17 << 16));
            										}
HXDLIN( 163)										{
HXLINE( 163)											int Value19 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & -65281);
HXDLIN( 163)											int charColor18;
HXDLIN( 163)											if ((Value19 > 255)) {
HXLINE( 163)												charColor18 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value19 < 0)) {
HXLINE( 163)													charColor18 = 0;
            												}
            												else {
HXLINE( 163)													charColor18 = Value19;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | (charColor18 << 8));
            										}
HXDLIN( 163)										{
HXLINE( 163)											int Value20 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & -256);
HXDLIN( 163)											int charColor19;
HXDLIN( 163)											if ((Value20 > 255)) {
HXLINE( 163)												charColor19 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value20 < 0)) {
HXLINE( 163)													charColor19 = 0;
            												}
            												else {
HXLINE( 163)													charColor19 = Value20;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | charColor19);
            										}
HXDLIN( 163)										{
HXLINE( 163)											int Value21 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & 16777215);
HXDLIN( 163)											int charColor20;
HXDLIN( 163)											if ((Value21 > 255)) {
HXLINE( 163)												charColor20 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value21 < 0)) {
HXLINE( 163)													charColor20 = 0;
            												}
            												else {
HXLINE( 163)													charColor20 = Value21;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | (charColor20 << 24));
            										}
            									}
            									break;
            									case (int)5: {
HXLINE( 163)										{
HXLINE( 163)											int Value22 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & -16711681);
HXDLIN( 163)											int charColor21;
HXDLIN( 163)											if ((Value22 > 255)) {
HXLINE( 163)												charColor21 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value22 < 0)) {
HXLINE( 163)													charColor21 = 0;
            												}
            												else {
HXLINE( 163)													charColor21 = Value22;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | (charColor21 << 16));
            										}
HXDLIN( 163)										{
HXLINE( 163)											int Value23 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & -65281);
HXDLIN( 163)											int charColor22;
HXDLIN( 163)											if ((Value23 > 255)) {
HXLINE( 163)												charColor22 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value23 < 0)) {
HXLINE( 163)													charColor22 = 0;
            												}
            												else {
HXLINE( 163)													charColor22 = Value23;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | (charColor22 << 8));
            										}
HXDLIN( 163)										{
HXLINE( 163)											int Value24 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & -256);
HXDLIN( 163)											int charColor23;
HXDLIN( 163)											if ((Value24 > 255)) {
HXLINE( 163)												charColor23 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value24 < 0)) {
HXLINE( 163)													charColor23 = 0;
            												}
            												else {
HXLINE( 163)													charColor23 = Value24;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | charColor23);
            										}
HXDLIN( 163)										{
HXLINE( 163)											int Value25 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN( 163)											charColor = (charColor & 16777215);
HXDLIN( 163)											int charColor24;
HXDLIN( 163)											if ((Value25 > 255)) {
HXLINE( 163)												charColor24 = 255;
            											}
            											else {
HXLINE( 163)												if ((Value25 < 0)) {
HXLINE( 163)													charColor24 = 0;
            												}
            												else {
HXLINE( 163)													charColor24 = Value25;
            												}
            											}
HXDLIN( 163)											charColor = (charColor | (charColor24 << 24));
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            					else {
HXLINE( 164)						Float Value26 = (((::Math_obj::max((( (Float)(((charColor >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((charColor >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((charColor & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((charColor >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((charColor >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((charColor & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((charColor >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((charColor >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((charColor & 255)) ) / ( (Float)(255) ))))) * ((Float)0.75));
HXDLIN( 164)						{
HXLINE( 164)							Float Hue2 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::get_hue(charColor);
HXDLIN( 164)							Float Brightness1 = ::Math_obj::max((( (Float)(((charColor >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((charColor >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((charColor & 255)) ) / ( (Float)(255) ))));
HXDLIN( 164)							Float Alpha1 = (( (Float)(((charColor >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 164)							Float chroma1 = (Brightness1 * Value26);
HXDLIN( 164)							Float match1 = (Brightness1 - chroma1);
HXDLIN( 164)							{
HXLINE( 164)								Float Hue3 = Hue2;
HXDLIN( 164)								Float Chroma1 = chroma1;
HXDLIN( 164)								Hue3 = ::hx::Mod(Hue3,360);
HXDLIN( 164)								Float hueD1 = (Hue3 / ( (Float)(60) ));
HXDLIN( 164)								Float mid1 = ((Chroma1 * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD1,2) - ( (Float)(1) ))))) + match1);
HXDLIN( 164)								Chroma1 = (Chroma1 + match1);
HXDLIN( 164)								switch((int)(::Std_obj::_hx_int(hueD1))){
            									case (int)0: {
HXLINE( 164)										{
HXLINE( 164)											int Value27 = ::Math_obj::round((Chroma1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & -16711681);
HXDLIN( 164)											int charColor25;
HXDLIN( 164)											if ((Value27 > 255)) {
HXLINE( 164)												charColor25 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value27 < 0)) {
HXLINE( 164)													charColor25 = 0;
            												}
            												else {
HXLINE( 164)													charColor25 = Value27;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | (charColor25 << 16));
            										}
HXDLIN( 164)										{
HXLINE( 164)											int Value28 = ::Math_obj::round((mid1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & -65281);
HXDLIN( 164)											int charColor26;
HXDLIN( 164)											if ((Value28 > 255)) {
HXLINE( 164)												charColor26 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value28 < 0)) {
HXLINE( 164)													charColor26 = 0;
            												}
            												else {
HXLINE( 164)													charColor26 = Value28;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | (charColor26 << 8));
            										}
HXDLIN( 164)										{
HXLINE( 164)											int Value29 = ::Math_obj::round((match1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & -256);
HXDLIN( 164)											int charColor27;
HXDLIN( 164)											if ((Value29 > 255)) {
HXLINE( 164)												charColor27 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value29 < 0)) {
HXLINE( 164)													charColor27 = 0;
            												}
            												else {
HXLINE( 164)													charColor27 = Value29;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | charColor27);
            										}
HXDLIN( 164)										{
HXLINE( 164)											int Value30 = ::Math_obj::round((Alpha1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & 16777215);
HXDLIN( 164)											int charColor28;
HXDLIN( 164)											if ((Value30 > 255)) {
HXLINE( 164)												charColor28 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value30 < 0)) {
HXLINE( 164)													charColor28 = 0;
            												}
            												else {
HXLINE( 164)													charColor28 = Value30;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | (charColor28 << 24));
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 164)										{
HXLINE( 164)											int Value31 = ::Math_obj::round((mid1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & -16711681);
HXDLIN( 164)											int charColor29;
HXDLIN( 164)											if ((Value31 > 255)) {
HXLINE( 164)												charColor29 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value31 < 0)) {
HXLINE( 164)													charColor29 = 0;
            												}
            												else {
HXLINE( 164)													charColor29 = Value31;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | (charColor29 << 16));
            										}
HXDLIN( 164)										{
HXLINE( 164)											int Value32 = ::Math_obj::round((Chroma1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & -65281);
HXDLIN( 164)											int charColor30;
HXDLIN( 164)											if ((Value32 > 255)) {
HXLINE( 164)												charColor30 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value32 < 0)) {
HXLINE( 164)													charColor30 = 0;
            												}
            												else {
HXLINE( 164)													charColor30 = Value32;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | (charColor30 << 8));
            										}
HXDLIN( 164)										{
HXLINE( 164)											int Value33 = ::Math_obj::round((match1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & -256);
HXDLIN( 164)											int charColor31;
HXDLIN( 164)											if ((Value33 > 255)) {
HXLINE( 164)												charColor31 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value33 < 0)) {
HXLINE( 164)													charColor31 = 0;
            												}
            												else {
HXLINE( 164)													charColor31 = Value33;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | charColor31);
            										}
HXDLIN( 164)										{
HXLINE( 164)											int Value34 = ::Math_obj::round((Alpha1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & 16777215);
HXDLIN( 164)											int charColor32;
HXDLIN( 164)											if ((Value34 > 255)) {
HXLINE( 164)												charColor32 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value34 < 0)) {
HXLINE( 164)													charColor32 = 0;
            												}
            												else {
HXLINE( 164)													charColor32 = Value34;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | (charColor32 << 24));
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 164)										{
HXLINE( 164)											int Value35 = ::Math_obj::round((match1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & -16711681);
HXDLIN( 164)											int charColor33;
HXDLIN( 164)											if ((Value35 > 255)) {
HXLINE( 164)												charColor33 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value35 < 0)) {
HXLINE( 164)													charColor33 = 0;
            												}
            												else {
HXLINE( 164)													charColor33 = Value35;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | (charColor33 << 16));
            										}
HXDLIN( 164)										{
HXLINE( 164)											int Value36 = ::Math_obj::round((Chroma1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & -65281);
HXDLIN( 164)											int charColor34;
HXDLIN( 164)											if ((Value36 > 255)) {
HXLINE( 164)												charColor34 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value36 < 0)) {
HXLINE( 164)													charColor34 = 0;
            												}
            												else {
HXLINE( 164)													charColor34 = Value36;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | (charColor34 << 8));
            										}
HXDLIN( 164)										{
HXLINE( 164)											int Value37 = ::Math_obj::round((mid1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & -256);
HXDLIN( 164)											int charColor35;
HXDLIN( 164)											if ((Value37 > 255)) {
HXLINE( 164)												charColor35 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value37 < 0)) {
HXLINE( 164)													charColor35 = 0;
            												}
            												else {
HXLINE( 164)													charColor35 = Value37;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | charColor35);
            										}
HXDLIN( 164)										{
HXLINE( 164)											int Value38 = ::Math_obj::round((Alpha1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & 16777215);
HXDLIN( 164)											int charColor36;
HXDLIN( 164)											if ((Value38 > 255)) {
HXLINE( 164)												charColor36 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value38 < 0)) {
HXLINE( 164)													charColor36 = 0;
            												}
            												else {
HXLINE( 164)													charColor36 = Value38;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | (charColor36 << 24));
            										}
            									}
            									break;
            									case (int)3: {
HXLINE( 164)										{
HXLINE( 164)											int Value39 = ::Math_obj::round((match1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & -16711681);
HXDLIN( 164)											int charColor37;
HXDLIN( 164)											if ((Value39 > 255)) {
HXLINE( 164)												charColor37 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value39 < 0)) {
HXLINE( 164)													charColor37 = 0;
            												}
            												else {
HXLINE( 164)													charColor37 = Value39;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | (charColor37 << 16));
            										}
HXDLIN( 164)										{
HXLINE( 164)											int Value40 = ::Math_obj::round((mid1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & -65281);
HXDLIN( 164)											int charColor38;
HXDLIN( 164)											if ((Value40 > 255)) {
HXLINE( 164)												charColor38 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value40 < 0)) {
HXLINE( 164)													charColor38 = 0;
            												}
            												else {
HXLINE( 164)													charColor38 = Value40;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | (charColor38 << 8));
            										}
HXDLIN( 164)										{
HXLINE( 164)											int Value41 = ::Math_obj::round((Chroma1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & -256);
HXDLIN( 164)											int charColor39;
HXDLIN( 164)											if ((Value41 > 255)) {
HXLINE( 164)												charColor39 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value41 < 0)) {
HXLINE( 164)													charColor39 = 0;
            												}
            												else {
HXLINE( 164)													charColor39 = Value41;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | charColor39);
            										}
HXDLIN( 164)										{
HXLINE( 164)											int Value42 = ::Math_obj::round((Alpha1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & 16777215);
HXDLIN( 164)											int charColor40;
HXDLIN( 164)											if ((Value42 > 255)) {
HXLINE( 164)												charColor40 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value42 < 0)) {
HXLINE( 164)													charColor40 = 0;
            												}
            												else {
HXLINE( 164)													charColor40 = Value42;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | (charColor40 << 24));
            										}
            									}
            									break;
            									case (int)4: {
HXLINE( 164)										{
HXLINE( 164)											int Value43 = ::Math_obj::round((mid1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & -16711681);
HXDLIN( 164)											int charColor41;
HXDLIN( 164)											if ((Value43 > 255)) {
HXLINE( 164)												charColor41 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value43 < 0)) {
HXLINE( 164)													charColor41 = 0;
            												}
            												else {
HXLINE( 164)													charColor41 = Value43;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | (charColor41 << 16));
            										}
HXDLIN( 164)										{
HXLINE( 164)											int Value44 = ::Math_obj::round((match1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & -65281);
HXDLIN( 164)											int charColor42;
HXDLIN( 164)											if ((Value44 > 255)) {
HXLINE( 164)												charColor42 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value44 < 0)) {
HXLINE( 164)													charColor42 = 0;
            												}
            												else {
HXLINE( 164)													charColor42 = Value44;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | (charColor42 << 8));
            										}
HXDLIN( 164)										{
HXLINE( 164)											int Value45 = ::Math_obj::round((Chroma1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & -256);
HXDLIN( 164)											int charColor43;
HXDLIN( 164)											if ((Value45 > 255)) {
HXLINE( 164)												charColor43 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value45 < 0)) {
HXLINE( 164)													charColor43 = 0;
            												}
            												else {
HXLINE( 164)													charColor43 = Value45;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | charColor43);
            										}
HXDLIN( 164)										{
HXLINE( 164)											int Value46 = ::Math_obj::round((Alpha1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & 16777215);
HXDLIN( 164)											int charColor44;
HXDLIN( 164)											if ((Value46 > 255)) {
HXLINE( 164)												charColor44 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value46 < 0)) {
HXLINE( 164)													charColor44 = 0;
            												}
            												else {
HXLINE( 164)													charColor44 = Value46;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | (charColor44 << 24));
            										}
            									}
            									break;
            									case (int)5: {
HXLINE( 164)										{
HXLINE( 164)											int Value47 = ::Math_obj::round((Chroma1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & -16711681);
HXDLIN( 164)											int charColor45;
HXDLIN( 164)											if ((Value47 > 255)) {
HXLINE( 164)												charColor45 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value47 < 0)) {
HXLINE( 164)													charColor45 = 0;
            												}
            												else {
HXLINE( 164)													charColor45 = Value47;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | (charColor45 << 16));
            										}
HXDLIN( 164)										{
HXLINE( 164)											int Value48 = ::Math_obj::round((match1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & -65281);
HXDLIN( 164)											int charColor46;
HXDLIN( 164)											if ((Value48 > 255)) {
HXLINE( 164)												charColor46 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value48 < 0)) {
HXLINE( 164)													charColor46 = 0;
            												}
            												else {
HXLINE( 164)													charColor46 = Value48;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | (charColor46 << 8));
            										}
HXDLIN( 164)										{
HXLINE( 164)											int Value49 = ::Math_obj::round((mid1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & -256);
HXDLIN( 164)											int charColor47;
HXDLIN( 164)											if ((Value49 > 255)) {
HXLINE( 164)												charColor47 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value49 < 0)) {
HXLINE( 164)													charColor47 = 0;
            												}
            												else {
HXLINE( 164)													charColor47 = Value49;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | charColor47);
            										}
HXDLIN( 164)										{
HXLINE( 164)											int Value50 = ::Math_obj::round((Alpha1 * ( (Float)(255) )));
HXDLIN( 164)											charColor = (charColor & 16777215);
HXDLIN( 164)											int charColor48;
HXDLIN( 164)											if ((Value50 > 255)) {
HXLINE( 164)												charColor48 = 255;
            											}
            											else {
HXLINE( 164)												if ((Value50 < 0)) {
HXLINE( 164)													charColor48 = 0;
            												}
            												else {
HXLINE( 164)													charColor48 = Value50;
            												}
            											}
HXDLIN( 164)											charColor = (charColor | (charColor48 << 24));
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
HXLINE( 166)					{
HXLINE( 166)						int _g1 = 0;
HXDLIN( 166)						while((_g1 < chars->length)){
HXLINE( 166)							 ::objects::Character who1 = chars->__get(_g1).StaticCast<  ::objects::Character >();
HXDLIN( 166)							_g1 = (_g1 + 1);
HXLINE( 168)							who1->set_color(charColor);
            						}
            					}
HXLINE( 170)					this->phillyGlowParticles->forEachAlive( ::Dynamic(new _hx_Closure_0(color)),null());
HXLINE( 174)					this->phillyGlowGradient->set_color(color->__get(0));
HXLINE( 175)					this->phillyWindowEvent->set_color(color->__get(0));
HXLINE( 177)					{
HXLINE( 177)						Float Value51 = (::Math_obj::max((( (Float)(((color->__get(0) >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((color->__get(0) >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((color->__get(0) & 255)) ) / ( (Float)(255) )))) * ((Float)0.5));
HXDLIN( 177)						{
HXLINE( 177)							Float Hue4 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::get_hue(color->__get(0));
HXDLIN( 177)							Float Alpha2 = (( (Float)(((color->__get(0) >> 24) & 255)) ) / ( (Float)(255) ));
HXDLIN( 177)							Float chroma2 = (Value51 * ((::Math_obj::max((( (Float)(((color->__get(0) >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((color->__get(0) >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((color->__get(0) & 255)) ) / ( (Float)(255) )))) - ::Math_obj::min((( (Float)(((color->__get(0) >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::min((( (Float)(((color->__get(0) >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((color->__get(0) & 255)) ) / ( (Float)(255) ))))) / ::Math_obj::max((( (Float)(((color->__get(0) >> 16) & 255)) ) / ( (Float)(255) )),::Math_obj::max((( (Float)(((color->__get(0) >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((color->__get(0) & 255)) ) / ( (Float)(255) ))))));
HXDLIN( 177)							Float match2 = (Value51 - chroma2);
HXDLIN( 177)							{
HXLINE( 177)								Float Hue5 = Hue4;
HXDLIN( 177)								Float Chroma2 = chroma2;
HXDLIN( 177)								Hue5 = ::hx::Mod(Hue5,360);
HXDLIN( 177)								Float hueD2 = (Hue5 / ( (Float)(60) ));
HXDLIN( 177)								Float mid2 = ((Chroma2 * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD2,2) - ( (Float)(1) ))))) + match2);
HXDLIN( 177)								Chroma2 = (Chroma2 + match2);
HXDLIN( 177)								switch((int)(::Std_obj::_hx_int(hueD2))){
            									case (int)0: {
HXLINE( 177)										{
HXLINE( 177)											int Value52 = ::Math_obj::round((Chroma2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color1 = color;
HXDLIN( 177)											int _hx_tmp1 = 0;
HXDLIN( 177)											color1[_hx_tmp1] = (color1->__get(_hx_tmp1) & -16711681);
HXDLIN( 177)											::Array< int > color2 = color;
HXDLIN( 177)											int _hx_tmp2 = 0;
HXDLIN( 177)											int _hx_tmp3;
HXDLIN( 177)											if ((Value52 > 255)) {
HXLINE( 177)												_hx_tmp3 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value52 < 0)) {
HXLINE( 177)													_hx_tmp3 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp3 = Value52;
            												}
            											}
HXDLIN( 177)											color2[_hx_tmp2] = (color2->__get(_hx_tmp2) | (_hx_tmp3 << 16));
            										}
HXDLIN( 177)										{
HXLINE( 177)											int Value53 = ::Math_obj::round((mid2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color3 = color;
HXDLIN( 177)											int _hx_tmp4 = 0;
HXDLIN( 177)											color3[_hx_tmp4] = (color3->__get(_hx_tmp4) & -65281);
HXDLIN( 177)											::Array< int > color4 = color;
HXDLIN( 177)											int _hx_tmp5 = 0;
HXDLIN( 177)											int _hx_tmp6;
HXDLIN( 177)											if ((Value53 > 255)) {
HXLINE( 177)												_hx_tmp6 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value53 < 0)) {
HXLINE( 177)													_hx_tmp6 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp6 = Value53;
            												}
            											}
HXDLIN( 177)											color4[_hx_tmp5] = (color4->__get(_hx_tmp5) | (_hx_tmp6 << 8));
            										}
HXDLIN( 177)										{
HXLINE( 177)											int Value54 = ::Math_obj::round((match2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color5 = color;
HXDLIN( 177)											int _hx_tmp7 = 0;
HXDLIN( 177)											color5[_hx_tmp7] = (color5->__get(_hx_tmp7) & -256);
HXDLIN( 177)											::Array< int > color6 = color;
HXDLIN( 177)											int _hx_tmp8 = 0;
HXDLIN( 177)											int _hx_tmp9;
HXDLIN( 177)											if ((Value54 > 255)) {
HXLINE( 177)												_hx_tmp9 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value54 < 0)) {
HXLINE( 177)													_hx_tmp9 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp9 = Value54;
            												}
            											}
HXDLIN( 177)											color6[_hx_tmp8] = (color6->__get(_hx_tmp8) | _hx_tmp9);
            										}
HXDLIN( 177)										{
HXLINE( 177)											int Value55 = ::Math_obj::round((Alpha2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color7 = color;
HXDLIN( 177)											int _hx_tmp10 = 0;
HXDLIN( 177)											color7[_hx_tmp10] = (color7->__get(_hx_tmp10) & 16777215);
HXDLIN( 177)											::Array< int > color8 = color;
HXDLIN( 177)											int _hx_tmp11 = 0;
HXDLIN( 177)											int _hx_tmp12;
HXDLIN( 177)											if ((Value55 > 255)) {
HXLINE( 177)												_hx_tmp12 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value55 < 0)) {
HXLINE( 177)													_hx_tmp12 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp12 = Value55;
            												}
            											}
HXDLIN( 177)											color8[_hx_tmp11] = (color8->__get(_hx_tmp11) | (_hx_tmp12 << 24));
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 177)										{
HXLINE( 177)											int Value56 = ::Math_obj::round((mid2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color9 = color;
HXDLIN( 177)											int _hx_tmp13 = 0;
HXDLIN( 177)											color9[_hx_tmp13] = (color9->__get(_hx_tmp13) & -16711681);
HXDLIN( 177)											::Array< int > color10 = color;
HXDLIN( 177)											int _hx_tmp14 = 0;
HXDLIN( 177)											int _hx_tmp15;
HXDLIN( 177)											if ((Value56 > 255)) {
HXLINE( 177)												_hx_tmp15 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value56 < 0)) {
HXLINE( 177)													_hx_tmp15 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp15 = Value56;
            												}
            											}
HXDLIN( 177)											color10[_hx_tmp14] = (color10->__get(_hx_tmp14) | (_hx_tmp15 << 16));
            										}
HXDLIN( 177)										{
HXLINE( 177)											int Value57 = ::Math_obj::round((Chroma2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color11 = color;
HXDLIN( 177)											int _hx_tmp16 = 0;
HXDLIN( 177)											color11[_hx_tmp16] = (color11->__get(_hx_tmp16) & -65281);
HXDLIN( 177)											::Array< int > color12 = color;
HXDLIN( 177)											int _hx_tmp17 = 0;
HXDLIN( 177)											int _hx_tmp18;
HXDLIN( 177)											if ((Value57 > 255)) {
HXLINE( 177)												_hx_tmp18 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value57 < 0)) {
HXLINE( 177)													_hx_tmp18 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp18 = Value57;
            												}
            											}
HXDLIN( 177)											color12[_hx_tmp17] = (color12->__get(_hx_tmp17) | (_hx_tmp18 << 8));
            										}
HXDLIN( 177)										{
HXLINE( 177)											int Value58 = ::Math_obj::round((match2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color13 = color;
HXDLIN( 177)											int _hx_tmp19 = 0;
HXDLIN( 177)											color13[_hx_tmp19] = (color13->__get(_hx_tmp19) & -256);
HXDLIN( 177)											::Array< int > color14 = color;
HXDLIN( 177)											int _hx_tmp20 = 0;
HXDLIN( 177)											int _hx_tmp21;
HXDLIN( 177)											if ((Value58 > 255)) {
HXLINE( 177)												_hx_tmp21 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value58 < 0)) {
HXLINE( 177)													_hx_tmp21 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp21 = Value58;
            												}
            											}
HXDLIN( 177)											color14[_hx_tmp20] = (color14->__get(_hx_tmp20) | _hx_tmp21);
            										}
HXDLIN( 177)										{
HXLINE( 177)											int Value59 = ::Math_obj::round((Alpha2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color15 = color;
HXDLIN( 177)											int _hx_tmp22 = 0;
HXDLIN( 177)											color15[_hx_tmp22] = (color15->__get(_hx_tmp22) & 16777215);
HXDLIN( 177)											::Array< int > color16 = color;
HXDLIN( 177)											int _hx_tmp23 = 0;
HXDLIN( 177)											int _hx_tmp24;
HXDLIN( 177)											if ((Value59 > 255)) {
HXLINE( 177)												_hx_tmp24 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value59 < 0)) {
HXLINE( 177)													_hx_tmp24 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp24 = Value59;
            												}
            											}
HXDLIN( 177)											color16[_hx_tmp23] = (color16->__get(_hx_tmp23) | (_hx_tmp24 << 24));
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 177)										{
HXLINE( 177)											int Value60 = ::Math_obj::round((match2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color17 = color;
HXDLIN( 177)											int _hx_tmp25 = 0;
HXDLIN( 177)											color17[_hx_tmp25] = (color17->__get(_hx_tmp25) & -16711681);
HXDLIN( 177)											::Array< int > color18 = color;
HXDLIN( 177)											int _hx_tmp26 = 0;
HXDLIN( 177)											int _hx_tmp27;
HXDLIN( 177)											if ((Value60 > 255)) {
HXLINE( 177)												_hx_tmp27 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value60 < 0)) {
HXLINE( 177)													_hx_tmp27 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp27 = Value60;
            												}
            											}
HXDLIN( 177)											color18[_hx_tmp26] = (color18->__get(_hx_tmp26) | (_hx_tmp27 << 16));
            										}
HXDLIN( 177)										{
HXLINE( 177)											int Value61 = ::Math_obj::round((Chroma2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color19 = color;
HXDLIN( 177)											int _hx_tmp28 = 0;
HXDLIN( 177)											color19[_hx_tmp28] = (color19->__get(_hx_tmp28) & -65281);
HXDLIN( 177)											::Array< int > color20 = color;
HXDLIN( 177)											int _hx_tmp29 = 0;
HXDLIN( 177)											int _hx_tmp30;
HXDLIN( 177)											if ((Value61 > 255)) {
HXLINE( 177)												_hx_tmp30 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value61 < 0)) {
HXLINE( 177)													_hx_tmp30 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp30 = Value61;
            												}
            											}
HXDLIN( 177)											color20[_hx_tmp29] = (color20->__get(_hx_tmp29) | (_hx_tmp30 << 8));
            										}
HXDLIN( 177)										{
HXLINE( 177)											int Value62 = ::Math_obj::round((mid2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color21 = color;
HXDLIN( 177)											int _hx_tmp31 = 0;
HXDLIN( 177)											color21[_hx_tmp31] = (color21->__get(_hx_tmp31) & -256);
HXDLIN( 177)											::Array< int > color22 = color;
HXDLIN( 177)											int _hx_tmp32 = 0;
HXDLIN( 177)											int _hx_tmp33;
HXDLIN( 177)											if ((Value62 > 255)) {
HXLINE( 177)												_hx_tmp33 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value62 < 0)) {
HXLINE( 177)													_hx_tmp33 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp33 = Value62;
            												}
            											}
HXDLIN( 177)											color22[_hx_tmp32] = (color22->__get(_hx_tmp32) | _hx_tmp33);
            										}
HXDLIN( 177)										{
HXLINE( 177)											int Value63 = ::Math_obj::round((Alpha2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color23 = color;
HXDLIN( 177)											int _hx_tmp34 = 0;
HXDLIN( 177)											color23[_hx_tmp34] = (color23->__get(_hx_tmp34) & 16777215);
HXDLIN( 177)											::Array< int > color24 = color;
HXDLIN( 177)											int _hx_tmp35 = 0;
HXDLIN( 177)											int _hx_tmp36;
HXDLIN( 177)											if ((Value63 > 255)) {
HXLINE( 177)												_hx_tmp36 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value63 < 0)) {
HXLINE( 177)													_hx_tmp36 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp36 = Value63;
            												}
            											}
HXDLIN( 177)											color24[_hx_tmp35] = (color24->__get(_hx_tmp35) | (_hx_tmp36 << 24));
            										}
            									}
            									break;
            									case (int)3: {
HXLINE( 177)										{
HXLINE( 177)											int Value64 = ::Math_obj::round((match2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color25 = color;
HXDLIN( 177)											int _hx_tmp37 = 0;
HXDLIN( 177)											color25[_hx_tmp37] = (color25->__get(_hx_tmp37) & -16711681);
HXDLIN( 177)											::Array< int > color26 = color;
HXDLIN( 177)											int _hx_tmp38 = 0;
HXDLIN( 177)											int _hx_tmp39;
HXDLIN( 177)											if ((Value64 > 255)) {
HXLINE( 177)												_hx_tmp39 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value64 < 0)) {
HXLINE( 177)													_hx_tmp39 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp39 = Value64;
            												}
            											}
HXDLIN( 177)											color26[_hx_tmp38] = (color26->__get(_hx_tmp38) | (_hx_tmp39 << 16));
            										}
HXDLIN( 177)										{
HXLINE( 177)											int Value65 = ::Math_obj::round((mid2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color27 = color;
HXDLIN( 177)											int _hx_tmp40 = 0;
HXDLIN( 177)											color27[_hx_tmp40] = (color27->__get(_hx_tmp40) & -65281);
HXDLIN( 177)											::Array< int > color28 = color;
HXDLIN( 177)											int _hx_tmp41 = 0;
HXDLIN( 177)											int _hx_tmp42;
HXDLIN( 177)											if ((Value65 > 255)) {
HXLINE( 177)												_hx_tmp42 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value65 < 0)) {
HXLINE( 177)													_hx_tmp42 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp42 = Value65;
            												}
            											}
HXDLIN( 177)											color28[_hx_tmp41] = (color28->__get(_hx_tmp41) | (_hx_tmp42 << 8));
            										}
HXDLIN( 177)										{
HXLINE( 177)											int Value66 = ::Math_obj::round((Chroma2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color29 = color;
HXDLIN( 177)											int _hx_tmp43 = 0;
HXDLIN( 177)											color29[_hx_tmp43] = (color29->__get(_hx_tmp43) & -256);
HXDLIN( 177)											::Array< int > color30 = color;
HXDLIN( 177)											int _hx_tmp44 = 0;
HXDLIN( 177)											int _hx_tmp45;
HXDLIN( 177)											if ((Value66 > 255)) {
HXLINE( 177)												_hx_tmp45 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value66 < 0)) {
HXLINE( 177)													_hx_tmp45 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp45 = Value66;
            												}
            											}
HXDLIN( 177)											color30[_hx_tmp44] = (color30->__get(_hx_tmp44) | _hx_tmp45);
            										}
HXDLIN( 177)										{
HXLINE( 177)											int Value67 = ::Math_obj::round((Alpha2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color31 = color;
HXDLIN( 177)											int _hx_tmp46 = 0;
HXDLIN( 177)											color31[_hx_tmp46] = (color31->__get(_hx_tmp46) & 16777215);
HXDLIN( 177)											::Array< int > color32 = color;
HXDLIN( 177)											int _hx_tmp47 = 0;
HXDLIN( 177)											int _hx_tmp48;
HXDLIN( 177)											if ((Value67 > 255)) {
HXLINE( 177)												_hx_tmp48 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value67 < 0)) {
HXLINE( 177)													_hx_tmp48 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp48 = Value67;
            												}
            											}
HXDLIN( 177)											color32[_hx_tmp47] = (color32->__get(_hx_tmp47) | (_hx_tmp48 << 24));
            										}
            									}
            									break;
            									case (int)4: {
HXLINE( 177)										{
HXLINE( 177)											int Value68 = ::Math_obj::round((mid2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color33 = color;
HXDLIN( 177)											int _hx_tmp49 = 0;
HXDLIN( 177)											color33[_hx_tmp49] = (color33->__get(_hx_tmp49) & -16711681);
HXDLIN( 177)											::Array< int > color34 = color;
HXDLIN( 177)											int _hx_tmp50 = 0;
HXDLIN( 177)											int _hx_tmp51;
HXDLIN( 177)											if ((Value68 > 255)) {
HXLINE( 177)												_hx_tmp51 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value68 < 0)) {
HXLINE( 177)													_hx_tmp51 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp51 = Value68;
            												}
            											}
HXDLIN( 177)											color34[_hx_tmp50] = (color34->__get(_hx_tmp50) | (_hx_tmp51 << 16));
            										}
HXDLIN( 177)										{
HXLINE( 177)											int Value69 = ::Math_obj::round((match2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color35 = color;
HXDLIN( 177)											int _hx_tmp52 = 0;
HXDLIN( 177)											color35[_hx_tmp52] = (color35->__get(_hx_tmp52) & -65281);
HXDLIN( 177)											::Array< int > color36 = color;
HXDLIN( 177)											int _hx_tmp53 = 0;
HXDLIN( 177)											int _hx_tmp54;
HXDLIN( 177)											if ((Value69 > 255)) {
HXLINE( 177)												_hx_tmp54 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value69 < 0)) {
HXLINE( 177)													_hx_tmp54 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp54 = Value69;
            												}
            											}
HXDLIN( 177)											color36[_hx_tmp53] = (color36->__get(_hx_tmp53) | (_hx_tmp54 << 8));
            										}
HXDLIN( 177)										{
HXLINE( 177)											int Value70 = ::Math_obj::round((Chroma2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color37 = color;
HXDLIN( 177)											int _hx_tmp55 = 0;
HXDLIN( 177)											color37[_hx_tmp55] = (color37->__get(_hx_tmp55) & -256);
HXDLIN( 177)											::Array< int > color38 = color;
HXDLIN( 177)											int _hx_tmp56 = 0;
HXDLIN( 177)											int _hx_tmp57;
HXDLIN( 177)											if ((Value70 > 255)) {
HXLINE( 177)												_hx_tmp57 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value70 < 0)) {
HXLINE( 177)													_hx_tmp57 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp57 = Value70;
            												}
            											}
HXDLIN( 177)											color38[_hx_tmp56] = (color38->__get(_hx_tmp56) | _hx_tmp57);
            										}
HXDLIN( 177)										{
HXLINE( 177)											int Value71 = ::Math_obj::round((Alpha2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color39 = color;
HXDLIN( 177)											int _hx_tmp58 = 0;
HXDLIN( 177)											color39[_hx_tmp58] = (color39->__get(_hx_tmp58) & 16777215);
HXDLIN( 177)											::Array< int > color40 = color;
HXDLIN( 177)											int _hx_tmp59 = 0;
HXDLIN( 177)											int _hx_tmp60;
HXDLIN( 177)											if ((Value71 > 255)) {
HXLINE( 177)												_hx_tmp60 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value71 < 0)) {
HXLINE( 177)													_hx_tmp60 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp60 = Value71;
            												}
            											}
HXDLIN( 177)											color40[_hx_tmp59] = (color40->__get(_hx_tmp59) | (_hx_tmp60 << 24));
            										}
            									}
            									break;
            									case (int)5: {
HXLINE( 177)										{
HXLINE( 177)											int Value72 = ::Math_obj::round((Chroma2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color41 = color;
HXDLIN( 177)											int _hx_tmp61 = 0;
HXDLIN( 177)											color41[_hx_tmp61] = (color41->__get(_hx_tmp61) & -16711681);
HXDLIN( 177)											::Array< int > color42 = color;
HXDLIN( 177)											int _hx_tmp62 = 0;
HXDLIN( 177)											int _hx_tmp63;
HXDLIN( 177)											if ((Value72 > 255)) {
HXLINE( 177)												_hx_tmp63 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value72 < 0)) {
HXLINE( 177)													_hx_tmp63 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp63 = Value72;
            												}
            											}
HXDLIN( 177)											color42[_hx_tmp62] = (color42->__get(_hx_tmp62) | (_hx_tmp63 << 16));
            										}
HXDLIN( 177)										{
HXLINE( 177)											int Value73 = ::Math_obj::round((match2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color43 = color;
HXDLIN( 177)											int _hx_tmp64 = 0;
HXDLIN( 177)											color43[_hx_tmp64] = (color43->__get(_hx_tmp64) & -65281);
HXDLIN( 177)											::Array< int > color44 = color;
HXDLIN( 177)											int _hx_tmp65 = 0;
HXDLIN( 177)											int _hx_tmp66;
HXDLIN( 177)											if ((Value73 > 255)) {
HXLINE( 177)												_hx_tmp66 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value73 < 0)) {
HXLINE( 177)													_hx_tmp66 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp66 = Value73;
            												}
            											}
HXDLIN( 177)											color44[_hx_tmp65] = (color44->__get(_hx_tmp65) | (_hx_tmp66 << 8));
            										}
HXDLIN( 177)										{
HXLINE( 177)											int Value74 = ::Math_obj::round((mid2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color45 = color;
HXDLIN( 177)											int _hx_tmp67 = 0;
HXDLIN( 177)											color45[_hx_tmp67] = (color45->__get(_hx_tmp67) & -256);
HXDLIN( 177)											::Array< int > color46 = color;
HXDLIN( 177)											int _hx_tmp68 = 0;
HXDLIN( 177)											int _hx_tmp69;
HXDLIN( 177)											if ((Value74 > 255)) {
HXLINE( 177)												_hx_tmp69 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value74 < 0)) {
HXLINE( 177)													_hx_tmp69 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp69 = Value74;
            												}
            											}
HXDLIN( 177)											color46[_hx_tmp68] = (color46->__get(_hx_tmp68) | _hx_tmp69);
            										}
HXDLIN( 177)										{
HXLINE( 177)											int Value75 = ::Math_obj::round((Alpha2 * ( (Float)(255) )));
HXDLIN( 177)											::Array< int > color47 = color;
HXDLIN( 177)											int _hx_tmp70 = 0;
HXDLIN( 177)											color47[_hx_tmp70] = (color47->__get(_hx_tmp70) & 16777215);
HXDLIN( 177)											::Array< int > color48 = color;
HXDLIN( 177)											int _hx_tmp71 = 0;
HXDLIN( 177)											int _hx_tmp72;
HXDLIN( 177)											if ((Value75 > 255)) {
HXLINE( 177)												_hx_tmp72 = 255;
            											}
            											else {
HXLINE( 177)												if ((Value75 < 0)) {
HXLINE( 177)													_hx_tmp72 = 0;
            												}
            												else {
HXLINE( 177)													_hx_tmp72 = Value75;
            												}
            											}
HXDLIN( 177)											color48[_hx_tmp71] = (color48->__get(_hx_tmp71) | (_hx_tmp72 << 24));
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
HXLINE( 178)					this->phillyStreet->set_color(color->__get(0));
            				}
            				break;
            				case (int)2: {
HXLINE( 181)					if (!(::backend::ClientPrefs_obj::data->lowQuality)) {
HXLINE( 183)						int particlesNum = ::flixel::FlxG_obj::random->_hx_int(8,12,null());
HXLINE( 184)						Float width = (( (Float)(2000) ) / ( (Float)(particlesNum) ));
HXLINE( 185)						int color49 = this->phillyLightsColors->__get(this->curLightEvent);
HXLINE( 186)						{
HXLINE( 188)							{
HXLINE( 188)								int _g2 = 0;
HXDLIN( 188)								int _g3 = particlesNum;
HXDLIN( 188)								while((_g2 < _g3)){
HXLINE( 188)									_g2 = (_g2 + 1);
HXDLIN( 188)									int i = (_g2 - 1);
HXLINE( 190)									 ::states::stages::objects::PhillyGlowParticle particle = this->phillyGlowParticles->recycle(::hx::ClassOf< ::states::stages::objects::PhillyGlowParticle >(),null(),null(),null()).StaticCast<  ::states::stages::objects::PhillyGlowParticle >();
HXLINE( 191)									particle->set_x(((-400 + (width * ( (Float)(i) ))) + ::flixel::FlxG_obj::random->_hx_float((-(width) / ( (Float)(5) )),(width / ( (Float)(5) )),null())));
HXLINE( 192)									Float _hx_tmp73 = (this->phillyGlowGradient->originalY + 200);
HXDLIN( 192)									particle->set_y((_hx_tmp73 + ::flixel::FlxG_obj::random->_hx_float(0,125,null())));
HXLINE( 193)									particle->set_color(color49);
HXLINE( 194)									particle->start();
HXLINE( 195)									this->phillyGlowParticles->add(particle).StaticCast<  ::states::stages::objects::PhillyGlowParticle >();
            								}
            							}
HXLINE( 188)							{
HXLINE( 188)								int _g4 = 0;
HXDLIN( 188)								int _g5 = particlesNum;
HXDLIN( 188)								while((_g4 < _g5)){
HXLINE( 188)									_g4 = (_g4 + 1);
HXDLIN( 188)									int i1 = (_g4 - 1);
HXLINE( 190)									 ::states::stages::objects::PhillyGlowParticle particle1 = this->phillyGlowParticles->recycle(::hx::ClassOf< ::states::stages::objects::PhillyGlowParticle >(),null(),null(),null()).StaticCast<  ::states::stages::objects::PhillyGlowParticle >();
HXLINE( 191)									particle1->set_x(((-400 + (width * ( (Float)(i1) ))) + ::flixel::FlxG_obj::random->_hx_float((-(width) / ( (Float)(5) )),(width / ( (Float)(5) )),null())));
HXLINE( 192)									Float _hx_tmp74 = (this->phillyGlowGradient->originalY + 200);
HXDLIN( 192)									particle1->set_y((_hx_tmp74 + (::flixel::FlxG_obj::random->_hx_float(0,125,null()) + 40)));
HXLINE( 193)									particle1->set_color(color49);
HXLINE( 194)									particle1->start();
HXLINE( 195)									this->phillyGlowParticles->add(particle1).StaticCast<  ::states::stages::objects::PhillyGlowParticle >();
            								}
            							}
HXLINE( 188)							{
HXLINE( 188)								int _g6 = 0;
HXDLIN( 188)								int _g7 = particlesNum;
HXDLIN( 188)								while((_g6 < _g7)){
HXLINE( 188)									_g6 = (_g6 + 1);
HXDLIN( 188)									int i2 = (_g6 - 1);
HXLINE( 190)									 ::states::stages::objects::PhillyGlowParticle particle2 = this->phillyGlowParticles->recycle(::hx::ClassOf< ::states::stages::objects::PhillyGlowParticle >(),null(),null(),null()).StaticCast<  ::states::stages::objects::PhillyGlowParticle >();
HXLINE( 191)									particle2->set_x(((-400 + (width * ( (Float)(i2) ))) + ::flixel::FlxG_obj::random->_hx_float((-(width) / ( (Float)(5) )),(width / ( (Float)(5) )),null())));
HXLINE( 192)									Float _hx_tmp75 = (this->phillyGlowGradient->originalY + 200);
HXDLIN( 192)									particle2->set_y((_hx_tmp75 + (::flixel::FlxG_obj::random->_hx_float(0,125,null()) + 80)));
HXLINE( 193)									particle2->set_color(color49);
HXLINE( 194)									particle2->start();
HXLINE( 195)									this->phillyGlowParticles->add(particle2).StaticCast<  ::states::stages::objects::PhillyGlowParticle >();
            								}
            							}
            						}
            					}
HXLINE( 199)					this->phillyGlowGradient->bop();
            				}
            				break;
            			}
            		}
            	}


void Philly_obj::doFlash(){
            	HX_STACKFRAME(&_hx_pos_88dd6f0b2f15fde5_205_doFlash)
HXLINE( 206)		int color = -1;
HXLINE( 207)		if (!(::backend::ClientPrefs_obj::data->flashing)) {
HXLINE( 207)			int Value = ::Math_obj::round(((Float)127.5));
HXDLIN( 207)			color = (color & 16777215);
HXDLIN( 207)			int color1;
HXDLIN( 207)			if ((Value > 255)) {
HXLINE( 207)				color1 = 255;
            			}
            			else {
HXLINE( 207)				if ((Value < 0)) {
HXLINE( 207)					color1 = 0;
            				}
            				else {
HXLINE( 207)					color1 = Value;
            				}
            			}
HXDLIN( 207)			color = (color | (color1 << 24));
            		}
HXLINE( 209)		::flixel::FlxG_obj::camera->flash(color,((Float)0.15),null(),true);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Philly_obj,doFlash,(void))


::hx::ObjectPtr< Philly_obj > Philly_obj::__new() {
	::hx::ObjectPtr< Philly_obj > __this = new Philly_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Philly_obj > Philly_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Philly_obj *__this = (Philly_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Philly_obj), true, "states.stages.Philly"));
	*(void **)__this = Philly_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Philly_obj::Philly_obj()
{
}

void Philly_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Philly);
	HX_MARK_MEMBER_NAME(phillyLightsColors,"phillyLightsColors");
	HX_MARK_MEMBER_NAME(phillyWindow,"phillyWindow");
	HX_MARK_MEMBER_NAME(phillyStreet,"phillyStreet");
	HX_MARK_MEMBER_NAME(phillyTrain,"phillyTrain");
	HX_MARK_MEMBER_NAME(curLight,"curLight");
	HX_MARK_MEMBER_NAME(blammedLightsBlack,"blammedLightsBlack");
	HX_MARK_MEMBER_NAME(phillyGlowGradient,"phillyGlowGradient");
	HX_MARK_MEMBER_NAME(phillyGlowParticles,"phillyGlowParticles");
	HX_MARK_MEMBER_NAME(phillyWindowEvent,"phillyWindowEvent");
	HX_MARK_MEMBER_NAME(curLightEvent,"curLightEvent");
	 ::flixel::FlxBasic_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Philly_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(phillyLightsColors,"phillyLightsColors");
	HX_VISIT_MEMBER_NAME(phillyWindow,"phillyWindow");
	HX_VISIT_MEMBER_NAME(phillyStreet,"phillyStreet");
	HX_VISIT_MEMBER_NAME(phillyTrain,"phillyTrain");
	HX_VISIT_MEMBER_NAME(curLight,"curLight");
	HX_VISIT_MEMBER_NAME(blammedLightsBlack,"blammedLightsBlack");
	HX_VISIT_MEMBER_NAME(phillyGlowGradient,"phillyGlowGradient");
	HX_VISIT_MEMBER_NAME(phillyGlowParticles,"phillyGlowParticles");
	HX_VISIT_MEMBER_NAME(phillyWindowEvent,"phillyWindowEvent");
	HX_VISIT_MEMBER_NAME(curLightEvent,"curLightEvent");
	 ::flixel::FlxBasic_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Philly_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"doFlash") ) { return ::hx::Val( doFlash_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curLight") ) { return ::hx::Val( curLight ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"phillyTrain") ) { return ::hx::Val( phillyTrain ); }
		if (HX_FIELD_EQ(inName,"eventPushed") ) { return ::hx::Val( eventPushed_dyn() ); }
		if (HX_FIELD_EQ(inName,"eventCalled") ) { return ::hx::Val( eventCalled_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"phillyWindow") ) { return ::hx::Val( phillyWindow ); }
		if (HX_FIELD_EQ(inName,"phillyStreet") ) { return ::hx::Val( phillyStreet ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curLightEvent") ) { return ::hx::Val( curLightEvent ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"phillyWindowEvent") ) { return ::hx::Val( phillyWindowEvent ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"phillyLightsColors") ) { return ::hx::Val( phillyLightsColors ); }
		if (HX_FIELD_EQ(inName,"blammedLightsBlack") ) { return ::hx::Val( blammedLightsBlack ); }
		if (HX_FIELD_EQ(inName,"phillyGlowGradient") ) { return ::hx::Val( phillyGlowGradient ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"phillyGlowParticles") ) { return ::hx::Val( phillyGlowParticles ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Philly_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"curLight") ) { curLight=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"phillyTrain") ) { phillyTrain=inValue.Cast<  ::states::stages::objects::PhillyTrain >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"phillyWindow") ) { phillyWindow=inValue.Cast<  ::objects::BGSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"phillyStreet") ) { phillyStreet=inValue.Cast<  ::objects::BGSprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curLightEvent") ) { curLightEvent=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"phillyWindowEvent") ) { phillyWindowEvent=inValue.Cast<  ::objects::BGSprite >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"phillyLightsColors") ) { phillyLightsColors=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blammedLightsBlack") ) { blammedLightsBlack=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"phillyGlowGradient") ) { phillyGlowGradient=inValue.Cast<  ::states::stages::objects::PhillyGlowGradient >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"phillyGlowParticles") ) { phillyGlowParticles=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Philly_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("phillyLightsColors",b5,47,fb,e8));
	outFields->push(HX_("phillyWindow",38,4d,8d,4a));
	outFields->push(HX_("phillyStreet",4b,d1,2d,09));
	outFields->push(HX_("phillyTrain",80,9b,65,bb));
	outFields->push(HX_("curLight",36,8b,aa,bc));
	outFields->push(HX_("blammedLightsBlack",ac,aa,1b,a0));
	outFields->push(HX_("phillyGlowGradient",e5,f8,27,f1));
	outFields->push(HX_("phillyGlowParticles",d8,96,43,d7));
	outFields->push(HX_("phillyWindowEvent",c2,ff,09,3e));
	outFields->push(HX_("curLightEvent",04,49,75,56));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Philly_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Philly_obj,phillyLightsColors),HX_("phillyLightsColors",b5,47,fb,e8)},
	{::hx::fsObject /*  ::objects::BGSprite */ ,(int)offsetof(Philly_obj,phillyWindow),HX_("phillyWindow",38,4d,8d,4a)},
	{::hx::fsObject /*  ::objects::BGSprite */ ,(int)offsetof(Philly_obj,phillyStreet),HX_("phillyStreet",4b,d1,2d,09)},
	{::hx::fsObject /*  ::states::stages::objects::PhillyTrain */ ,(int)offsetof(Philly_obj,phillyTrain),HX_("phillyTrain",80,9b,65,bb)},
	{::hx::fsInt,(int)offsetof(Philly_obj,curLight),HX_("curLight",36,8b,aa,bc)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Philly_obj,blammedLightsBlack),HX_("blammedLightsBlack",ac,aa,1b,a0)},
	{::hx::fsObject /*  ::states::stages::objects::PhillyGlowGradient */ ,(int)offsetof(Philly_obj,phillyGlowGradient),HX_("phillyGlowGradient",e5,f8,27,f1)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Philly_obj,phillyGlowParticles),HX_("phillyGlowParticles",d8,96,43,d7)},
	{::hx::fsObject /*  ::objects::BGSprite */ ,(int)offsetof(Philly_obj,phillyWindowEvent),HX_("phillyWindowEvent",c2,ff,09,3e)},
	{::hx::fsInt,(int)offsetof(Philly_obj,curLightEvent),HX_("curLightEvent",04,49,75,56)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Philly_obj_sStaticStorageInfo = 0;
#endif

static ::String Philly_obj_sMemberFields[] = {
	HX_("phillyLightsColors",b5,47,fb,e8),
	HX_("phillyWindow",38,4d,8d,4a),
	HX_("phillyStreet",4b,d1,2d,09),
	HX_("phillyTrain",80,9b,65,bb),
	HX_("curLight",36,8b,aa,bc),
	HX_("blammedLightsBlack",ac,aa,1b,a0),
	HX_("phillyGlowGradient",e5,f8,27,f1),
	HX_("phillyGlowParticles",d8,96,43,d7),
	HX_("phillyWindowEvent",c2,ff,09,3e),
	HX_("curLightEvent",04,49,75,56),
	HX_("create",fc,66,0f,7c),
	HX_("eventPushed",73,60,7a,c5),
	HX_("update",09,86,05,87),
	HX_("beatHit",7d,ea,04,74),
	HX_("eventCalled",37,a0,35,0a),
	HX_("doFlash",25,16,b9,35),
	::String(null()) };

::hx::Class Philly_obj::__mClass;

void Philly_obj::__register()
{
	Philly_obj _hx_dummy;
	Philly_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.stages.Philly",75,a2,d2,ef);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Philly_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Philly_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Philly_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Philly_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace stages
