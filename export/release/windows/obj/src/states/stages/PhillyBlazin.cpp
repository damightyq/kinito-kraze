// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_BaseStage
#include <backend/BaseStage.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxStrip
#include <flixel/FlxStrip.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxTiledSprite
#include <flixel/addons/display/FlxTiledSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_ColorTween
#include <flixel/tweens/misc/ColorTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_objects_BGSprite
#include <objects/BGSprite.h>
#endif
#ifndef INCLUDED_objects_Character
#include <objects/Character.h>
#endif
#ifndef INCLUDED_objects_Note
#include <objects/Note.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ShaderFilter
#include <openfl/filters/ShaderFilter.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_shaders_RainShader
#include <shaders/RainShader.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_states_stages_PhillyBlazin
#include <states/stages/PhillyBlazin.h>
#endif
#ifndef INCLUDED_states_stages_objects_ABotSpeaker
#include <states/stages/objects/ABotSpeaker.h>
#endif
#ifndef INCLUDED_states_stages_objects_DarnellBlazinHandler
#include <states/stages/objects/DarnellBlazinHandler.h>
#endif
#ifndef INCLUDED_states_stages_objects_PicoBlazinHandler
#include <states/stages/objects/PicoBlazinHandler.h>
#endif
#ifndef INCLUDED_substates_GameOverSubstate
#include <substates/GameOverSubstate.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e9608c0a820d531c_13_new,"states.stages.PhillyBlazin","new",0xce8383af,"states.stages.PhillyBlazin.new","states/stages/PhillyBlazin.hx",13,0x99d1b881)
HX_LOCAL_STACK_FRAME(_hx_pos_e9608c0a820d531c_32_create,"states.stages.PhillyBlazin","create",0xfaa96f0d,"states.stages.PhillyBlazin.create","states/stages/PhillyBlazin.hx",32,0x99d1b881)
HX_LOCAL_STACK_FRAME(_hx_pos_e9608c0a820d531c_29_create,"states.stages.PhillyBlazin","create",0xfaa96f0d,"states.stages.PhillyBlazin.create","states/stages/PhillyBlazin.hx",29,0x99d1b881)
static const ::String _hx_array_data_0316803d_3[] = {
	HX_("lightning0",e6,af,a7,89),
};
HX_LOCAL_STACK_FRAME(_hx_pos_e9608c0a820d531c_100_create,"states.stages.PhillyBlazin","create",0xfaa96f0d,"states.stages.PhillyBlazin.create","states/stages/PhillyBlazin.hx",100,0x99d1b881)
HX_LOCAL_STACK_FRAME(_hx_pos_e9608c0a820d531c_114_createPost,"states.stages.PhillyBlazin","createPost",0x2ef82a0d,"states.stages.PhillyBlazin.createPost","states/stages/PhillyBlazin.hx",114,0x99d1b881)
HX_LOCAL_STACK_FRAME(_hx_pos_e9608c0a820d531c_149_beatHit,"states.stages.PhillyBlazin","beatHit",0xbc31f14c,"states.stages.PhillyBlazin.beatHit","states/stages/PhillyBlazin.hx",149,0x99d1b881)
HX_LOCAL_STACK_FRAME(_hx_pos_e9608c0a820d531c_155_startSong,"states.stages.PhillyBlazin","startSong",0x77e335e6,"states.stages.PhillyBlazin.startSong","states/stages/PhillyBlazin.hx",155,0x99d1b881)
HX_LOCAL_STACK_FRAME(_hx_pos_e9608c0a820d531c_159_setupRainShader,"states.stages.PhillyBlazin","setupRainShader",0xe638b245,"states.stages.PhillyBlazin.setupRainShader","states/stages/PhillyBlazin.hx",159,0x99d1b881)
HX_LOCAL_STACK_FRAME(_hx_pos_e9608c0a820d531c_168_precache,"states.stages.PhillyBlazin","precache",0x0cf9c990,"states.stages.PhillyBlazin.precache","states/stages/PhillyBlazin.hx",168,0x99d1b881)
HX_LOCAL_STACK_FRAME(_hx_pos_e9608c0a820d531c_175_update,"states.stages.PhillyBlazin","update",0x059f8e1a,"states.stages.PhillyBlazin.update","states/stages/PhillyBlazin.hx",175,0x99d1b881)
HX_LOCAL_STACK_FRAME(_hx_pos_e9608c0a820d531c_203_applyLightning,"states.stages.PhillyBlazin","applyLightning",0xfbb276cd,"states.stages.PhillyBlazin.applyLightning","states/stages/PhillyBlazin.hx",203,0x99d1b881)
HX_LOCAL_STACK_FRAME(_hx_pos_e9608c0a820d531c_194_applyLightning,"states.stages.PhillyBlazin","applyLightning",0xfbb276cd,"states.stages.PhillyBlazin.applyLightning","states/stages/PhillyBlazin.hx",194,0x99d1b881)
HX_LOCAL_STACK_FRAME(_hx_pos_e9608c0a820d531c_240_goodNoteHit,"states.stages.PhillyBlazin","goodNoteHit",0x1cde6813,"states.stages.PhillyBlazin.goodNoteHit","states/stages/PhillyBlazin.hx",240,0x99d1b881)
HX_LOCAL_STACK_FRAME(_hx_pos_e9608c0a820d531c_247_noteMiss,"states.stages.PhillyBlazin","noteMiss",0x36c8665f,"states.stages.PhillyBlazin.noteMiss","states/stages/PhillyBlazin.hx",247,0x99d1b881)
HX_LOCAL_STACK_FRAME(_hx_pos_e9608c0a820d531c_254_noteMissPress,"states.stages.PhillyBlazin","noteMissPress",0xf2a2e4a4,"states.stages.PhillyBlazin.noteMissPress","states/stages/PhillyBlazin.hx",254,0x99d1b881)
HX_LOCAL_STACK_FRAME(_hx_pos_e9608c0a820d531c_262_opponentNoteHit,"states.stages.PhillyBlazin","opponentNoteHit",0xa8236333,"states.stages.PhillyBlazin.opponentNoteHit","states/stages/PhillyBlazin.hx",262,0x99d1b881)
namespace states{
namespace stages{

void PhillyBlazin_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e9608c0a820d531c_13_new)
HXLINE( 238)		this->darnellFight =  ::states::stages::objects::DarnellBlazinHandler_obj::__alloc( HX_CTX );
HXLINE( 237)		this->picoFight =  ::states::stages::objects::PicoBlazinHandler_obj::__alloc( HX_CTX );
HXLINE(  24)		this->lightningTimer = ((Float)3.0);
HXLINE(  16)		this->rainTimeScale = ((Float)1);
HXLINE(  13)		super::__construct();
            	}

Dynamic PhillyBlazin_obj::__CreateEmpty() { return new PhillyBlazin_obj; }

void *PhillyBlazin_obj::_hx_vtable = 0;

Dynamic PhillyBlazin_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PhillyBlazin_obj > _hx_result = new PhillyBlazin_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PhillyBlazin_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x230cab9d) {
		if (inClassId<=(int)0x1bebca6b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1bebca6b;
		} else {
			return inClassId==(int)0x230cab9d;
		}
	} else {
		return inClassId==(int)0x7ccf8994;
	}
}

void PhillyBlazin_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::objects::BGSprite spr){
            			HX_STACKFRAME(&_hx_pos_e9608c0a820d531c_32_create)
HXLINE(  33)			{
HXLINE(  33)				 ::flixel::math::FlxBasePoint this1 = spr->scale;
HXDLIN(  33)				this1->set_x(((Float)1.75));
HXDLIN(  33)				this1->set_y(((Float)1.75));
            			}
HXLINE(  34)			spr->updateHitbox();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_e9608c0a820d531c_29_create)
HXDLIN(  29)		 ::states::stages::PhillyBlazin _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  30)		::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
HXLINE(  31)		 ::Dynamic setupScale =  ::Dynamic(new _hx_Closure_0());
HXLINE(  37)		if (!(::backend::ClientPrefs_obj::data->lowQuality)) {
HXLINE(  39)			 ::flixel::graphics::FlxGraphic skyImage = ::backend::Paths_obj::image(HX_("phillyBlazin/skyBlur",09,95,29,58),null(),null());
HXLINE(  40)			int _hx_tmp = (::Std_obj::_hx_int((( (Float)(skyImage->width) ) * ((Float)1.1))) + 475);
HXDLIN(  40)			this->scrollingSky =  ::flixel::addons::display::FlxTiledSprite_obj::__alloc( HX_CTX ,skyImage,( (Float)(_hx_tmp) ),( (Float)(::Std_obj::_hx_int((( (Float)(skyImage->height) ) / ((Float)1.1)))) ),true,false);
HXLINE(  41)			this->scrollingSky->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  42)			this->scrollingSky->setPosition(-500,-120);
HXLINE(  43)			{
HXLINE(  43)				 ::flixel::math::FlxBasePoint this1 = this->scrollingSky->scrollFactor;
HXDLIN(  43)				this1->set_x(( (Float)(0) ));
HXDLIN(  43)				this1->set_y(( (Float)(0) ));
            			}
HXLINE(  44)			this->add(this->scrollingSky);
HXLINE(  46)			this->skyAdditive =  ::objects::BGSprite_obj::__alloc( HX_CTX ,HX_("phillyBlazin/skyBlur",09,95,29,58),-600,-175,((Float)0.0),((Float)0.0),null(),null());
HXLINE(  47)			setupScale(this->skyAdditive);
HXLINE(  48)			this->skyAdditive->set_visible(false);
HXLINE(  49)			this->add(this->skyAdditive);
HXLINE(  51)			this->lightning =  ::objects::BGSprite_obj::__alloc( HX_CTX ,HX_("phillyBlazin/lightning",2b,f4,1b,8a),-50,-300,((Float)0.0),((Float)0.0),::Array_obj< ::String >::fromData( _hx_array_data_0316803d_3,1),false);
HXLINE(  52)			setupScale(this->lightning);
HXLINE(  53)			this->lightning->set_visible(false);
HXLINE(  54)			this->add(this->lightning);
            		}
HXLINE(  57)		 ::objects::BGSprite phillyForegroundCity =  ::objects::BGSprite_obj::__alloc( HX_CTX ,HX_("phillyBlazin/streetBlur",09,46,71,f4),-600,-175,((Float)0.0),((Float)0.0),null(),null());
HXLINE(  58)		setupScale(phillyForegroundCity);
HXLINE(  59)		this->add(phillyForegroundCity);
HXLINE(  61)		if (!(::backend::ClientPrefs_obj::data->lowQuality)) {
HXLINE(  63)			this->foregroundMultiply =  ::objects::BGSprite_obj::__alloc( HX_CTX ,HX_("phillyBlazin/streetBlur",09,46,71,f4),-600,-175,((Float)0.0),((Float)0.0),null(),null());
HXLINE(  64)			setupScale(this->foregroundMultiply);
HXLINE(  65)			this->foregroundMultiply->set_blend(9);
HXLINE(  66)			this->foregroundMultiply->set_visible(false);
HXLINE(  67)			this->add(this->foregroundMultiply);
HXLINE(  69)			this->additionalLighten =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-600,-175,null())->makeGraphic(1,1,-1,null(),null());
HXLINE(  70)			{
HXLINE(  70)				 ::flixel::math::FlxBasePoint this2 = this->additionalLighten->scrollFactor;
HXDLIN(  70)				this2->set_x(( (Float)(0) ));
HXDLIN(  70)				this2->set_y(( (Float)(0) ));
            			}
HXLINE(  71)			{
HXLINE(  71)				 ::flixel::math::FlxBasePoint this3 = this->additionalLighten->scale;
HXDLIN(  71)				this3->set_x(( (Float)(2500) ));
HXDLIN(  71)				this3->set_y(( (Float)(2500) ));
            			}
HXLINE(  72)			this->additionalLighten->updateHitbox();
HXLINE(  73)			this->additionalLighten->set_blend(0);
HXLINE(  74)			this->additionalLighten->set_visible(false);
HXLINE(  75)			this->add(this->additionalLighten);
            		}
HXLINE(  78)		this->abot =  ::states::stages::objects::ABotSpeaker_obj::__alloc( HX_CTX ,( ( ::flixel::group::FlxTypedSpriteGroup)(::flixel::FlxG_obj::game->_state->__Field(HX_("gfGroup",a0,b8,ab,b0),::hx::paccDynamic)) )->x,(( ( ::flixel::group::FlxTypedSpriteGroup)(::flixel::FlxG_obj::game->_state->__Field(HX_("gfGroup",a0,b8,ab,b0),::hx::paccDynamic)) )->y + 550));
HXLINE(  79)		this->add(this->abot);
HXLINE(  81)		if (::backend::ClientPrefs_obj::data->shaders) {
HXLINE(  82)			this->setupRainShader();
            		}
HXLINE(  84)		 ::Dynamic _song = ::states::PlayState_obj::SONG;
HXLINE(  85)		bool _hx_tmp1;
HXDLIN(  85)		if (::hx::IsNotNull( _song->__Field(HX_("gameOverSound",89,f8,70,3c),::hx::paccDynamic) )) {
HXLINE(  85)			_hx_tmp1 = (::StringTools_obj::trim(( (::String)(_song->__Field(HX_("gameOverSound",89,f8,70,3c),::hx::paccDynamic)) )).length < 1);
            		}
            		else {
HXLINE(  85)			_hx_tmp1 = true;
            		}
HXDLIN(  85)		if (_hx_tmp1) {
HXLINE(  85)			::substates::GameOverSubstate_obj::deathSoundName = HX_("fnf_loss_sfx-pico-gutpunch",ad,14,50,e8);
            		}
HXLINE(  86)		bool _hx_tmp2;
HXDLIN(  86)		if (::hx::IsNotNull( _song->__Field(HX_("gameOverLoop",ea,8f,ff,6a),::hx::paccDynamic) )) {
HXLINE(  86)			_hx_tmp2 = (::StringTools_obj::trim(( (::String)(_song->__Field(HX_("gameOverLoop",ea,8f,ff,6a),::hx::paccDynamic)) )).length < 1);
            		}
            		else {
HXLINE(  86)			_hx_tmp2 = true;
            		}
HXDLIN(  86)		if (_hx_tmp2) {
HXLINE(  86)			::substates::GameOverSubstate_obj::loopSoundName = HX_("gameOver-pico",6c,ff,d6,5b);
            		}
HXLINE(  87)		bool _hx_tmp3;
HXDLIN(  87)		if (::hx::IsNotNull( _song->__Field(HX_("gameOverEnd",15,2d,a9,8d),::hx::paccDynamic) )) {
HXLINE(  87)			_hx_tmp3 = (::StringTools_obj::trim(( (::String)(_song->__Field(HX_("gameOverEnd",15,2d,a9,8d),::hx::paccDynamic)) )).length < 1);
            		}
            		else {
HXLINE(  87)			_hx_tmp3 = true;
            		}
HXDLIN(  87)		if (_hx_tmp3) {
HXLINE(  87)			::substates::GameOverSubstate_obj::endSoundName = HX_("gameOverEnd-pico",5d,4a,d2,f5);
            		}
HXLINE(  88)		bool _hx_tmp4;
HXDLIN(  88)		if (::hx::IsNotNull( _song->__Field(HX_("gameOverChar",5c,48,07,65),::hx::paccDynamic) )) {
HXLINE(  88)			_hx_tmp4 = (::StringTools_obj::trim(( (::String)(_song->__Field(HX_("gameOverChar",5c,48,07,65),::hx::paccDynamic)) )).length < 1);
            		}
            		else {
HXLINE(  88)			_hx_tmp4 = true;
            		}
HXDLIN(  88)		if (_hx_tmp4) {
HXLINE(  88)			::substates::GameOverSubstate_obj::characterName = HX_("pico-blazin",90,b1,15,8e);
            		}
HXLINE(  89)		::substates::GameOverSubstate_obj::deathDelay = ((Float)0.15);
HXLINE(  91)		this->setDefaultGF(HX_("nene",2e,7c,02,49));
HXLINE(  92)		this->precache();
HXLINE(  94)		if (::states::PlayState_obj::isStoryMode) {
HXLINE(  96)			if ((( (::String)(::flixel::FlxG_obj::game->_state->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic)) ) == HX_("blazin",e8,a3,ba,9e))) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_e9608c0a820d531c_100_create)
HXLINE( 101)					::flixel::FlxG_obj::game->_state->__SetField(HX_("endingSong",5c,73,d7,67),true,::hx::paccDynamic);
HXLINE( 102)					::flixel::FlxG_obj::game->_state->__SetField(HX_("inCutscene",8f,21,01,56),true,::hx::paccDynamic);
HXLINE( 103)					::flixel::FlxG_obj::game->_state->__SetField(HX_("canPause",c6,18,eb,2b),false,::hx::paccDynamic);
HXLINE( 104)					::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE( 105)					::flixel::FlxG_obj::camera->set_visible(false);
HXLINE( 106)					( ( ::flixel::FlxCamera)(::flixel::FlxG_obj::game->_state->__Field(HX_("camHUD",e8,2b,76,b7),::hx::paccDynamic)) )->set_visible(false);
HXLINE( 107)					::flixel::FlxG_obj::game->_state->__Field(HX_("startVideo",b9,ec,12,53),::hx::paccDynamic)(HX_("blazinCutscene",92,a4,17,9d));
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(  99)				this->setEndCallback( ::Dynamic(new _hx_Closure_1()));
            			}
            		}
            	}


void PhillyBlazin_obj::createPost(){
            	HX_STACKFRAME(&_hx_pos_e9608c0a820d531c_114_createPost)
HXLINE( 115)		{
HXLINE( 115)			 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN( 115)			 ::flixel::math::FlxBasePoint point = ( ( ::flixel::FlxObject)(::flixel::FlxG_obj::game->_state->__Field(HX_("camFollow",e0,6e,47,22),::hx::paccDynamic)) )->getPosition(null());
HXDLIN( 115)			{
HXLINE( 115)				 ::flixel::math::FlxBasePoint this1 = _this->scroll;
HXDLIN( 115)				Float y = (point->y - (( (Float)(_this->height) ) * ((Float)0.5)));
HXDLIN( 115)				this1->set_x((point->x - (( (Float)(_this->width) ) * ((Float)0.5))));
HXDLIN( 115)				this1->set_y(y);
            			}
HXDLIN( 115)			{
HXLINE( 115)				 ::flixel::math::FlxBasePoint _this1 = point;
HXDLIN( 115)				if (_this1->_weak) {
HXLINE( 115)					_this1->put();
            				}
            			}
            		}
HXLINE( 116)		::flixel::FlxG_obj::camera->fade(-16777216,((Float)1.5),true,null(),true);
HXLINE( 118)		{
HXLINE( 118)			int _g = 0;
HXDLIN( 118)			::Array< ::Dynamic> _g1 = ( ( ::flixel::group::FlxTypedSpriteGroup)(::flixel::FlxG_obj::game->_state->__Field(HX_("boyfriendGroup",75,99,09,ef),::hx::paccDynamic)) )->group->members;
HXDLIN( 118)			while((_g < _g1->length)){
HXLINE( 118)				 ::flixel::FlxSprite character = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 118)				_g = (_g + 1);
HXLINE( 120)				if (::hx::IsNull( character )) {
HXLINE( 120)					continue;
            				}
HXLINE( 121)				character->set_color(-2171170);
            			}
            		}
HXLINE( 123)		{
HXLINE( 123)			int _g2 = 0;
HXDLIN( 123)			::Array< ::Dynamic> _g3 = ( ( ::flixel::group::FlxTypedSpriteGroup)(::flixel::FlxG_obj::game->_state->__Field(HX_("dadGroup",78,cb,28,42),::hx::paccDynamic)) )->group->members;
HXDLIN( 123)			while((_g2 < _g3->length)){
HXLINE( 123)				 ::flixel::FlxSprite character1 = _g3->__get(_g2).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 123)				_g2 = (_g2 + 1);
HXLINE( 125)				if (::hx::IsNull( character1 )) {
HXLINE( 125)					continue;
            				}
HXLINE( 126)				character1->set_color(-2171170);
            			}
            		}
HXLINE( 128)		{
HXLINE( 128)			int _g4 = 0;
HXDLIN( 128)			::Array< ::Dynamic> _g5 = ( ( ::flixel::group::FlxTypedSpriteGroup)(::flixel::FlxG_obj::game->_state->__Field(HX_("gfGroup",a0,b8,ab,b0),::hx::paccDynamic)) )->group->members;
HXDLIN( 128)			while((_g4 < _g5->length)){
HXLINE( 128)				 ::flixel::FlxSprite character2 = _g5->__get(_g4).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 128)				_g4 = (_g4 + 1);
HXLINE( 130)				if (::hx::IsNull( character2 )) {
HXLINE( 130)					continue;
            				}
HXLINE( 131)				character2->set_color(-7829368);
            			}
            		}
HXLINE( 133)		this->abot->set_color(-7829368);
HXLINE( 135)		::Array< ::Dynamic> unspawnNotes = ( (::Array< ::Dynamic>)(::flixel::FlxG_obj::game->_state->__Field(HX_("unspawnNotes",9f,67,f2,45),::hx::paccDynamic)) );
HXLINE( 136)		{
HXLINE( 136)			int _g6 = 0;
HXDLIN( 136)			while((_g6 < unspawnNotes->length)){
HXLINE( 136)				 ::objects::Note note = unspawnNotes->__get(_g6).StaticCast<  ::objects::Note >();
HXDLIN( 136)				_g6 = (_g6 + 1);
HXLINE( 138)				if (::hx::IsNull( note )) {
HXLINE( 138)					continue;
            				}
HXLINE( 141)				note->noAnimation = true;
HXLINE( 142)				note->noMissAnimation = true;
            			}
            		}
HXLINE( 144)		this->remove(( ( ::flixel::group::FlxTypedSpriteGroup)(::flixel::FlxG_obj::game->_state->__Field(HX_("dadGroup",78,cb,28,42),::hx::paccDynamic)) ),true);
HXLINE( 145)		this->addBehindBF(( ( ::flixel::group::FlxTypedSpriteGroup)(::flixel::FlxG_obj::game->_state->__Field(HX_("dadGroup",78,cb,28,42),::hx::paccDynamic)) ));
            	}


void PhillyBlazin_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_e9608c0a820d531c_149_beatHit)
            	}


void PhillyBlazin_obj::startSong(){
            	HX_STACKFRAME(&_hx_pos_e9608c0a820d531c_155_startSong)
HXDLIN( 155)		this->abot->set_snd(::flixel::FlxG_obj::sound->music);
            	}


void PhillyBlazin_obj::setupRainShader(){
            	HX_GC_STACKFRAME(&_hx_pos_e9608c0a820d531c_159_setupRainShader)
HXLINE( 160)		this->rainShader =  ::shaders::RainShader_obj::__alloc( HX_CTX );
HXLINE( 161)		this->rainShader->set_scale((( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(200) )));
HXLINE( 162)		this->rainShader->set_intensity(((Float)0.5));
HXLINE( 163)		 ::flixel::FlxCamera _hx_tmp = ::flixel::FlxG_obj::camera;
HXDLIN( 163)		_hx_tmp->setFilters(::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::filters::ShaderFilter_obj::__alloc( HX_CTX ,this->rainShader)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PhillyBlazin_obj,setupRainShader,(void))

void PhillyBlazin_obj::precache(){
            	HX_STACKFRAME(&_hx_pos_e9608c0a820d531c_168_precache)
HXLINE( 170)		::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + (HX_("lightning/Lightning",65,c4,24,ed) + 1)),null(),true,null());
HXDLIN( 170)		::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + (HX_("lightning/Lightning",65,c4,24,ed) + 2)),null(),true,null());
HXDLIN( 170)		::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + (HX_("lightning/Lightning",65,c4,24,ed) + 3)),null(),true,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PhillyBlazin_obj,precache,(void))

void PhillyBlazin_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_e9608c0a820d531c_175_update)
HXLINE( 176)		if (::hx::IsNotNull( this->scrollingSky )) {
HXLINE( 176)			 ::flixel::addons::display::FlxTiledSprite fh = this->scrollingSky;
HXDLIN( 176)			fh->set_scrollX((fh->scrollX - (elapsed * ( (Float)(35) ))));
            		}
HXLINE( 178)		if (::hx::IsNotNull( this->rainShader )) {
HXLINE( 180)			this->rainShader->updateViewInfo(( (Float)(::flixel::FlxG_obj::width) ),( (Float)(::flixel::FlxG_obj::height) ),::flixel::FlxG_obj::camera);
HXLINE( 181)			this->rainShader->update((elapsed * this->rainTimeScale));
HXLINE( 182)			this->rainTimeScale = (((Float)0.02) + (::Math_obj::exp((-(elapsed) / ((Float)0.33333333333333331))) * (::Math_obj::min(( (Float)(1) ),this->rainTimeScale) - ((Float)0.02))));
            		}
HXLINE( 185)		 ::states::stages::PhillyBlazin _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 185)		_hx_tmp->lightningTimer = (_hx_tmp->lightningTimer - elapsed);
HXLINE( 186)		if ((this->lightningTimer <= 0)) {
HXLINE( 188)			this->applyLightning();
HXLINE( 189)			this->lightningTimer = ::flixel::FlxG_obj::random->_hx_float(7,15,null());
            		}
            	}


void PhillyBlazin_obj::applyLightning(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::stages::PhillyBlazin,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::tweens::FlxTween _){
            			HX_STACKFRAME(&_hx_pos_e9608c0a820d531c_203_applyLightning)
HXLINE( 204)			_gthis->skyAdditive->set_visible(false);
HXLINE( 205)			_gthis->lightning->set_visible(false);
HXLINE( 206)			_gthis->foregroundMultiply->set_visible(false);
HXLINE( 207)			_gthis->additionalLighten->set_visible(false);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_e9608c0a820d531c_194_applyLightning)
HXDLIN( 194)		 ::states::stages::PhillyBlazin _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 195)		bool _hx_tmp;
HXDLIN( 195)		if (!(::backend::ClientPrefs_obj::data->lowQuality)) {
HXLINE( 195)			_hx_tmp = ( (bool)(::flixel::FlxG_obj::game->_state->__Field(HX_("endingSong",5c,73,d7,67),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 195)			_hx_tmp = true;
            		}
HXDLIN( 195)		if (_hx_tmp) {
HXLINE( 195)			return;
            		}
HXLINE( 197)		Float LIGHTNING_FULL_DURATION = ((Float)1.5);
HXLINE( 198)		Float LIGHTNING_FADE_DURATION = ((Float)0.3);
HXLINE( 200)		this->skyAdditive->set_visible(true);
HXLINE( 201)		this->skyAdditive->set_alpha(((Float)0.7));
HXLINE( 202)		::flixel::tweens::FlxTween_obj::tween(this->skyAdditive, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)0.0))),LIGHTNING_FULL_DURATION, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
HXLINE( 210)		this->foregroundMultiply->set_visible(true);
HXLINE( 211)		this->foregroundMultiply->set_alpha(((Float)0.64));
HXLINE( 212)		::flixel::tweens::FlxTween_obj::tween(this->foregroundMultiply, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)0.0))),LIGHTNING_FULL_DURATION,null());
HXLINE( 214)		this->additionalLighten->set_visible(true);
HXLINE( 215)		this->additionalLighten->set_alpha(((Float)0.3));
HXLINE( 216)		::flixel::tweens::FlxTween_obj::tween(this->additionalLighten, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)0.0))),LIGHTNING_FADE_DURATION,null());
HXLINE( 218)		this->lightning->set_visible(true);
HXLINE( 219)		this->lightning->animation->play(HX_("lightning0",e6,af,a7,89),true,null(),null());
HXLINE( 221)		if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 65)) {
HXLINE( 222)			 ::objects::BGSprite _hx_tmp1 = this->lightning;
HXDLIN( 222)			_hx_tmp1->set_x(( (Float)(::flixel::FlxG_obj::random->_hx_int(-250,280,null())) ));
            		}
            		else {
HXLINE( 224)			 ::objects::BGSprite _hx_tmp2 = this->lightning;
HXDLIN( 224)			_hx_tmp2->set_x(( (Float)(::flixel::FlxG_obj::random->_hx_int(780,900,null())) ));
            		}
HXLINE( 227)		::flixel::tweens::FlxTween_obj::color(( ( ::objects::Character)(::flixel::FlxG_obj::game->_state->__Field(HX_("boyfriend",6a,29,b8,e6),::hx::paccDynamic)) ),LIGHTNING_FADE_DURATION,-10461088,-2171170,null());
HXLINE( 228)		::flixel::tweens::FlxTween_obj::color(( ( ::objects::Character)(::flixel::FlxG_obj::game->_state->__Field(HX_("dad",47,36,4c,00),::hx::paccDynamic)) ),LIGHTNING_FADE_DURATION,-10461088,-2171170,null());
HXLINE( 229)		::flixel::tweens::FlxTween_obj::color(( ( ::objects::Character)(::flixel::FlxG_obj::game->_state->__Field(HX_("gf",1f,5a,00,00),::hx::paccDynamic)) ),LIGHTNING_FADE_DURATION,-10461088,-7829368,null());
HXLINE( 230)		::flixel::tweens::FlxTween_obj::color(this->abot,LIGHTNING_FADE_DURATION,-10461088,-7829368,null());
HXLINE( 233)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::sound;
HXDLIN( 233)		::String key = (HX_("lightning/Lightning",65,c4,24,ed) + ::flixel::FlxG_obj::random->_hx_int(1,3,null()));
HXDLIN( 233)		 ::Dynamic modsAllowed = true;
HXDLIN( 233)		if (::hx::IsNull( modsAllowed )) {
HXLINE( 233)			modsAllowed = true;
            		}
HXDLIN( 233)		_hx_tmp3->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + key),null(),modsAllowed,null()),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PhillyBlazin_obj,applyLightning,(void))

void PhillyBlazin_obj::goodNoteHit( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_e9608c0a820d531c_240_goodNoteHit)
HXLINE( 242)		 ::states::stages::PhillyBlazin _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 242)		_hx_tmp->rainTimeScale = (_hx_tmp->rainTimeScale + ((Float)0.7));
HXLINE( 243)		this->picoFight->noteHit(note);
HXLINE( 244)		this->darnellFight->noteHit(note);
            	}


void PhillyBlazin_obj::noteMiss( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_e9608c0a820d531c_247_noteMiss)
HXLINE( 249)		this->picoFight->noteMiss(note);
HXLINE( 250)		this->darnellFight->noteMiss(note);
            	}


void PhillyBlazin_obj::noteMissPress(int direction){
            	HX_STACKFRAME(&_hx_pos_e9608c0a820d531c_254_noteMissPress)
HXLINE( 256)		this->picoFight->noteMissPress(direction);
HXLINE( 257)		this->darnellFight->noteMissPress(direction);
            	}


void PhillyBlazin_obj::opponentNoteHit( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_e9608c0a820d531c_262_opponentNoteHit)
HXLINE( 264)		this->picoFight->noteMiss(note);
HXLINE( 265)		this->darnellFight->noteMiss(note);
            	}



::hx::ObjectPtr< PhillyBlazin_obj > PhillyBlazin_obj::__new() {
	::hx::ObjectPtr< PhillyBlazin_obj > __this = new PhillyBlazin_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< PhillyBlazin_obj > PhillyBlazin_obj::__alloc(::hx::Ctx *_hx_ctx) {
	PhillyBlazin_obj *__this = (PhillyBlazin_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PhillyBlazin_obj), true, "states.stages.PhillyBlazin"));
	*(void **)__this = PhillyBlazin_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

PhillyBlazin_obj::PhillyBlazin_obj()
{
}

void PhillyBlazin_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PhillyBlazin);
	HX_MARK_MEMBER_NAME(rainShader,"rainShader");
	HX_MARK_MEMBER_NAME(rainTimeScale,"rainTimeScale");
	HX_MARK_MEMBER_NAME(scrollingSky,"scrollingSky");
	HX_MARK_MEMBER_NAME(skyAdditive,"skyAdditive");
	HX_MARK_MEMBER_NAME(lightning,"lightning");
	HX_MARK_MEMBER_NAME(foregroundMultiply,"foregroundMultiply");
	HX_MARK_MEMBER_NAME(additionalLighten,"additionalLighten");
	HX_MARK_MEMBER_NAME(lightningTimer,"lightningTimer");
	HX_MARK_MEMBER_NAME(abot,"abot");
	HX_MARK_MEMBER_NAME(picoFight,"picoFight");
	HX_MARK_MEMBER_NAME(darnellFight,"darnellFight");
	 ::flixel::FlxBasic_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PhillyBlazin_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(rainShader,"rainShader");
	HX_VISIT_MEMBER_NAME(rainTimeScale,"rainTimeScale");
	HX_VISIT_MEMBER_NAME(scrollingSky,"scrollingSky");
	HX_VISIT_MEMBER_NAME(skyAdditive,"skyAdditive");
	HX_VISIT_MEMBER_NAME(lightning,"lightning");
	HX_VISIT_MEMBER_NAME(foregroundMultiply,"foregroundMultiply");
	HX_VISIT_MEMBER_NAME(additionalLighten,"additionalLighten");
	HX_VISIT_MEMBER_NAME(lightningTimer,"lightningTimer");
	HX_VISIT_MEMBER_NAME(abot,"abot");
	HX_VISIT_MEMBER_NAME(picoFight,"picoFight");
	HX_VISIT_MEMBER_NAME(darnellFight,"darnellFight");
	 ::flixel::FlxBasic_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PhillyBlazin_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"abot") ) { return ::hx::Val( abot ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"precache") ) { return ::hx::Val( precache_dyn() ); }
		if (HX_FIELD_EQ(inName,"noteMiss") ) { return ::hx::Val( noteMiss_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lightning") ) { return ::hx::Val( lightning ); }
		if (HX_FIELD_EQ(inName,"startSong") ) { return ::hx::Val( startSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"picoFight") ) { return ::hx::Val( picoFight ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rainShader") ) { return ::hx::Val( rainShader ); }
		if (HX_FIELD_EQ(inName,"createPost") ) { return ::hx::Val( createPost_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"skyAdditive") ) { return ::hx::Val( skyAdditive ); }
		if (HX_FIELD_EQ(inName,"goodNoteHit") ) { return ::hx::Val( goodNoteHit_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"scrollingSky") ) { return ::hx::Val( scrollingSky ); }
		if (HX_FIELD_EQ(inName,"darnellFight") ) { return ::hx::Val( darnellFight ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"rainTimeScale") ) { return ::hx::Val( rainTimeScale ); }
		if (HX_FIELD_EQ(inName,"noteMissPress") ) { return ::hx::Val( noteMissPress_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"lightningTimer") ) { return ::hx::Val( lightningTimer ); }
		if (HX_FIELD_EQ(inName,"applyLightning") ) { return ::hx::Val( applyLightning_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setupRainShader") ) { return ::hx::Val( setupRainShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"opponentNoteHit") ) { return ::hx::Val( opponentNoteHit_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"additionalLighten") ) { return ::hx::Val( additionalLighten ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"foregroundMultiply") ) { return ::hx::Val( foregroundMultiply ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PhillyBlazin_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"abot") ) { abot=inValue.Cast<  ::states::stages::objects::ABotSpeaker >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lightning") ) { lightning=inValue.Cast<  ::objects::BGSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"picoFight") ) { picoFight=inValue.Cast<  ::states::stages::objects::PicoBlazinHandler >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rainShader") ) { rainShader=inValue.Cast<  ::shaders::RainShader >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"skyAdditive") ) { skyAdditive=inValue.Cast<  ::objects::BGSprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"scrollingSky") ) { scrollingSky=inValue.Cast<  ::flixel::addons::display::FlxTiledSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"darnellFight") ) { darnellFight=inValue.Cast<  ::states::stages::objects::DarnellBlazinHandler >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"rainTimeScale") ) { rainTimeScale=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"lightningTimer") ) { lightningTimer=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"additionalLighten") ) { additionalLighten=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"foregroundMultiply") ) { foregroundMultiply=inValue.Cast<  ::objects::BGSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PhillyBlazin_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("rainShader",99,33,41,34));
	outFields->push(HX_("rainTimeScale",49,6f,0c,44));
	outFields->push(HX_("scrollingSky",ec,e4,0e,b9));
	outFields->push(HX_("skyAdditive",0d,19,16,79));
	outFields->push(HX_("lightning",0a,39,4a,d7));
	outFields->push(HX_("foregroundMultiply",07,b2,e8,db));
	outFields->push(HX_("additionalLighten",98,74,b6,81));
	outFields->push(HX_("lightningTimer",5b,f2,fb,76));
	outFields->push(HX_("abot",46,70,68,40));
	outFields->push(HX_("picoFight",ab,3e,7b,c9));
	outFields->push(HX_("darnellFight",e4,92,34,a6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PhillyBlazin_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::shaders::RainShader */ ,(int)offsetof(PhillyBlazin_obj,rainShader),HX_("rainShader",99,33,41,34)},
	{::hx::fsFloat,(int)offsetof(PhillyBlazin_obj,rainTimeScale),HX_("rainTimeScale",49,6f,0c,44)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxTiledSprite */ ,(int)offsetof(PhillyBlazin_obj,scrollingSky),HX_("scrollingSky",ec,e4,0e,b9)},
	{::hx::fsObject /*  ::objects::BGSprite */ ,(int)offsetof(PhillyBlazin_obj,skyAdditive),HX_("skyAdditive",0d,19,16,79)},
	{::hx::fsObject /*  ::objects::BGSprite */ ,(int)offsetof(PhillyBlazin_obj,lightning),HX_("lightning",0a,39,4a,d7)},
	{::hx::fsObject /*  ::objects::BGSprite */ ,(int)offsetof(PhillyBlazin_obj,foregroundMultiply),HX_("foregroundMultiply",07,b2,e8,db)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PhillyBlazin_obj,additionalLighten),HX_("additionalLighten",98,74,b6,81)},
	{::hx::fsFloat,(int)offsetof(PhillyBlazin_obj,lightningTimer),HX_("lightningTimer",5b,f2,fb,76)},
	{::hx::fsObject /*  ::states::stages::objects::ABotSpeaker */ ,(int)offsetof(PhillyBlazin_obj,abot),HX_("abot",46,70,68,40)},
	{::hx::fsObject /*  ::states::stages::objects::PicoBlazinHandler */ ,(int)offsetof(PhillyBlazin_obj,picoFight),HX_("picoFight",ab,3e,7b,c9)},
	{::hx::fsObject /*  ::states::stages::objects::DarnellBlazinHandler */ ,(int)offsetof(PhillyBlazin_obj,darnellFight),HX_("darnellFight",e4,92,34,a6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PhillyBlazin_obj_sStaticStorageInfo = 0;
#endif

static ::String PhillyBlazin_obj_sMemberFields[] = {
	HX_("rainShader",99,33,41,34),
	HX_("rainTimeScale",49,6f,0c,44),
	HX_("scrollingSky",ec,e4,0e,b9),
	HX_("skyAdditive",0d,19,16,79),
	HX_("lightning",0a,39,4a,d7),
	HX_("foregroundMultiply",07,b2,e8,db),
	HX_("additionalLighten",98,74,b6,81),
	HX_("lightningTimer",5b,f2,fb,76),
	HX_("abot",46,70,68,40),
	HX_("create",fc,66,0f,7c),
	HX_("createPost",7c,45,ea,5c),
	HX_("beatHit",7d,ea,04,74),
	HX_("startSong",57,9d,4b,05),
	HX_("setupRainShader",76,c4,61,ef),
	HX_("precache",3f,db,c0,2d),
	HX_("update",09,86,05,87),
	HX_("applyLightning",bc,75,c8,c5),
	HX_("picoFight",ab,3e,7b,c9),
	HX_("darnellFight",e4,92,34,a6),
	HX_("goodNoteHit",c4,4d,c4,22),
	HX_("noteMiss",0e,78,8f,57),
	HX_("noteMissPress",95,58,12,aa),
	HX_("opponentNoteHit",64,75,4c,b1),
	::String(null()) };

::hx::Class PhillyBlazin_obj::__mClass;

void PhillyBlazin_obj::__register()
{
	PhillyBlazin_obj _hx_dummy;
	PhillyBlazin_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.stages.PhillyBlazin",3d,80,16,03);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PhillyBlazin_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PhillyBlazin_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PhillyBlazin_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PhillyBlazin_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace stages
