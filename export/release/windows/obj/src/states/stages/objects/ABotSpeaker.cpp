// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flxanimate_FlxAnimate
#include <flxanimate/FlxAnimate.h>
#endif
#ifndef INCLUDED_flxanimate_PsychFlxAnimate
#include <flxanimate/PsychFlxAnimate.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxAnim
#include <flxanimate/animate/FlxAnim.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_states_stages_objects_ABotSpeaker
#include <states/stages/objects/ABotSpeaker.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cb82bdab7b5f4ce1_7_new,"states.stages.objects.ABotSpeaker","new",0x9085f964,"states.stages.objects.ABotSpeaker.new","states/stages/objects/ABotSpeaker.hx",7,0xa981e86d)
static const Float _hx_array_data_6ff4b772_2[] = {
	(Float)0,(Float)-8,-3.5,-0.4,0.5,4.7,(Float)7,
};
static const Float _hx_array_data_6ff4b772_3[] = {
	(Float)0,(Float)59,(Float)56,(Float)66,(Float)54,(Float)52,(Float)51,
};
static const int _hx_array_data_6ff4b772_4[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,(int)14,(int)15,(int)16,(int)17,
};
static const int _hx_array_data_6ff4b772_5[] = {
	(int)18,(int)19,(int)20,(int)21,(int)22,(int)23,(int)24,(int)25,(int)26,(int)27,(int)28,(int)29,(int)30,(int)31,(int)32,(int)33,(int)34,(int)35,
};
HX_LOCAL_STACK_FRAME(_hx_pos_cb82bdab7b5f4ce1_26_set_snd,"states.stages.objects.ABotSpeaker","set_snd",0x6662f810,"states.stages.objects.ABotSpeaker.set_snd","states/stages/objects/ABotSpeaker.hx",26,0xa981e86d)
HX_LOCAL_STACK_FRAME(_hx_pos_cb82bdab7b5f4ce1_117_beatHit,"states.stages.objects.ABotSpeaker","beatHit",0xc099e581,"states.stages.objects.ABotSpeaker.beatHit","states/stages/objects/ABotSpeaker.hx",117,0xa981e86d)
HX_LOCAL_STACK_FRAME(_hx_pos_cb82bdab7b5f4ce1_136_lookLeft,"states.stages.objects.ABotSpeaker","lookLeft",0x0ee39e82,"states.stages.objects.ABotSpeaker.lookLeft","states/stages/objects/ABotSpeaker.hx",136,0xa981e86d)
HX_LOCAL_STACK_FRAME(_hx_pos_cb82bdab7b5f4ce1_141_lookRight,"states.stages.objects.ABotSpeaker","lookRight",0x6f542101,"states.stages.objects.ABotSpeaker.lookRight","states/stages/objects/ABotSpeaker.hx",141,0xa981e86d)
namespace states{
namespace stages{
namespace objects{

void ABotSpeaker_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_cb82bdab7b5f4ce1_7_new)
HXLINE( 134)		this->lookingAtRight = true;
HXLINE(  22)		this->volumes = ::Array_obj< Float >::__new(0);
HXLINE(  14)		this->vizSprites = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  11)		this->VIZ_POS_Y = ::Array_obj< Float >::fromData( _hx_array_data_6ff4b772_2,7);
HXLINE(  10)		this->VIZ_POS_X = ::Array_obj< Float >::fromData( _hx_array_data_6ff4b772_3,7);
HXLINE(   9)		this->VIZ_MAX = 7;
HXLINE(  36)		super::__construct(x,y,null());
HXLINE(  38)		bool antialias = ::backend::ClientPrefs_obj::data->antialiasing;
HXLINE(  40)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,90,20,null());
HXDLIN(  40)		this->bg = _hx_tmp->loadGraphic(::backend::Paths_obj::image(HX_("abot/stereoBG",26,45,ec,27),null(),null()),null(),null(),null(),null(),null());
HXLINE(  41)		this->bg->set_antialiasing(antialias);
HXLINE(  42)		this->add(this->bg);
HXLINE(  44)		Float vizX = ( (Float)(0) );
HXLINE(  45)		Float vizY = ( (Float)(0) );
HXLINE(  46)		::String parentFolder = null();
HXDLIN(  46)		if ((HX_("abot/aBotViz",58,ab,36,10).indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE(  46)			::haxe::Log_obj::trace(HX_("abot/aBotViz",58,ab,36,10), ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder)->init(1,true))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            		}
HXDLIN(  46)		 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(HX_("abot/aBotViz",58,ab,36,10),parentFolder,true);
HXDLIN(  46)		bool xmlExists = false;
HXDLIN(  46)		::String xml = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("abot/aBotViz",58,ab,36,10)) + HX_(".xml",69,3e,c3,1e)));
HXDLIN(  46)		if (::sys::FileSystem_obj::exists(xml)) {
HXLINE(  46)			xmlExists = true;
            		}
HXDLIN(  46)		 ::Dynamic vizFrames;
HXDLIN(  46)		if (xmlExists) {
HXLINE(  46)			vizFrames = ::sys::io::File_obj::getContent(xml);
            		}
            		else {
HXLINE(  46)			::String key = (HX_("images/",77,50,74,c1) + HX_("abot/aBotViz",58,ab,36,10));
HXDLIN(  46)			::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(  46)			::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXDLIN(  46)			if (::hx::IsNotNull( str )) {
HXLINE(  46)				key = str;
            			}
HXDLIN(  46)			vizFrames = ::backend::Paths_obj::getPath((key + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder,null());
            		}
HXDLIN(  46)		 ::flixel::graphics::frames::FlxAtlasFrames vizFrames1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded,vizFrames);
HXLINE(  47)		{
HXLINE(  47)			int _g = 1;
HXDLIN(  47)			int _g1 = (this->VIZ_MAX + 1);
HXDLIN(  47)			while((_g < _g1)){
HXLINE(  47)				_g = (_g + 1);
HXDLIN(  47)				int i = (_g - 1);
HXLINE(  49)				this->volumes->push(((Float)0.0));
HXLINE(  50)				vizX = (vizX + this->VIZ_POS_X->__get((i - 1)));
HXLINE(  51)				vizY = (vizY + this->VIZ_POS_Y->__get((i - 1)));
HXLINE(  52)				 ::flixel::FlxSprite viz =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(vizX + 140),(vizY + 74),null());
HXLINE(  53)				viz->set_frames(vizFrames1);
HXLINE(  54)				viz->animation->addByPrefix(HX_("VIZ",c7,81,41,00),(HX_("viz",e7,e5,59,00) + i),0,null(),null(),null());
HXLINE(  55)				viz->animation->play(HX_("VIZ",c7,81,41,00),true,null(),null());
HXLINE(  56)				viz->animation->_curAnim->finish();
HXLINE(  57)				viz->set_antialiasing(antialias);
HXLINE(  58)				this->vizSprites->push(viz);
HXLINE(  59)				viz->updateHitbox();
HXLINE(  60)				viz->centerOffsets(null());
HXLINE(  61)				this->add(viz);
            			}
            		}
HXLINE(  64)		this->eyeBg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-30,215,null())->makeGraphic(1,1,-1,null(),null());
HXLINE(  65)		{
HXLINE(  65)			 ::flixel::math::FlxBasePoint this2 = this->eyeBg->scale;
HXDLIN(  65)			this2->set_x(( (Float)(160) ));
HXDLIN(  65)			this2->set_y(( (Float)(60) ));
            		}
HXLINE(  66)		this->eyeBg->updateHitbox();
HXLINE(  67)		this->add(this->eyeBg);
HXLINE(  69)		this->eyes =  ::flxanimate::PsychFlxAnimate_obj::__alloc( HX_CTX ,-10,230,null(),null());
HXLINE(  70)		::backend::Paths_obj::loadAnimateAtlas(this->eyes,HX_("abot/systemEyes",da,56,5d,9d),null(),null());
HXLINE(  71)		this->eyes->anim->addBySymbolIndices(HX_("lookleft",e6,c9,43,6e),HX_("a bot eyes lookin",2a,b1,47,03),::Array_obj< int >::fromData( _hx_array_data_6ff4b772_4,18),24,false,null(),null());
HXLINE(  72)		this->eyes->anim->addBySymbolIndices(HX_("lookright",1d,ed,19,84),HX_("a bot eyes lookin",2a,b1,47,03),::Array_obj< int >::fromData( _hx_array_data_6ff4b772_5,18),24,false,null(),null());
HXLINE(  73)		this->eyes->anim->play(HX_("lookright",1d,ed,19,84),true,null(),null());
HXLINE(  74)		 ::flxanimate::animate::FlxAnim _hx_tmp1 = this->eyes->anim;
HXDLIN(  74)		_hx_tmp1->set_curFrame((this->eyes->anim->get_length() - 1));
HXLINE(  75)		this->add(this->eyes);
HXLINE(  77)		this->speaker =  ::flxanimate::PsychFlxAnimate_obj::__alloc( HX_CTX ,-65,-10,null(),null());
HXLINE(  78)		::backend::Paths_obj::loadAnimateAtlas(this->speaker,HX_("abot/abotSystem",3e,2e,6d,14),null(),null());
HXLINE(  79)		this->speaker->anim->addBySymbol(HX_("anim",11,86,71,40),HX_("Abot System",89,3f,a9,10),24,false,null(),null());
HXLINE(  80)		this->speaker->anim->play(HX_("anim",11,86,71,40),true,null(),null());
HXLINE(  81)		 ::flxanimate::animate::FlxAnim _hx_tmp2 = this->speaker->anim;
HXDLIN(  81)		_hx_tmp2->set_curFrame((this->speaker->anim->get_length() - 1));
HXLINE(  82)		this->speaker->set_antialiasing(antialias);
HXLINE(  83)		this->add(this->speaker);
            	}

Dynamic ABotSpeaker_obj::__CreateEmpty() { return new ABotSpeaker_obj; }

void *ABotSpeaker_obj::_hx_vtable = 0;

Dynamic ABotSpeaker_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ABotSpeaker_obj > _hx_result = new ABotSpeaker_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ABotSpeaker_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5e80c5fc) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x288ce903) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x288ce903;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x5e80c5fc;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

 ::flixel::sound::FlxSound ABotSpeaker_obj::set_snd( ::flixel::sound::FlxSound changed){
            	HX_STACKFRAME(&_hx_pos_cb82bdab7b5f4ce1_26_set_snd)
HXLINE(  27)		this->snd = changed;
HXLINE(  31)		return this->snd;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ABotSpeaker_obj,set_snd,return )

void ABotSpeaker_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_cb82bdab7b5f4ce1_117_beatHit)
HXDLIN( 117)		this->speaker->anim->play(HX_("anim",11,86,71,40),true,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ABotSpeaker_obj,beatHit,(void))

void ABotSpeaker_obj::lookLeft(){
            	HX_STACKFRAME(&_hx_pos_cb82bdab7b5f4ce1_136_lookLeft)
HXLINE( 137)		if (this->lookingAtRight) {
HXLINE( 137)			this->eyes->anim->play(HX_("lookleft",e6,c9,43,6e),true,null(),null());
            		}
HXLINE( 138)		this->lookingAtRight = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ABotSpeaker_obj,lookLeft,(void))

void ABotSpeaker_obj::lookRight(){
            	HX_STACKFRAME(&_hx_pos_cb82bdab7b5f4ce1_141_lookRight)
HXLINE( 142)		if (!(this->lookingAtRight)) {
HXLINE( 142)			this->eyes->anim->play(HX_("lookright",1d,ed,19,84),true,null(),null());
            		}
HXLINE( 143)		this->lookingAtRight = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ABotSpeaker_obj,lookRight,(void))


::hx::ObjectPtr< ABotSpeaker_obj > ABotSpeaker_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
	::hx::ObjectPtr< ABotSpeaker_obj > __this = new ABotSpeaker_obj();
	__this->__construct(__o_x,__o_y);
	return __this;
}

::hx::ObjectPtr< ABotSpeaker_obj > ABotSpeaker_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
	ABotSpeaker_obj *__this = (ABotSpeaker_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ABotSpeaker_obj), true, "states.stages.objects.ABotSpeaker"));
	*(void **)__this = ABotSpeaker_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y);
	return __this;
}

ABotSpeaker_obj::ABotSpeaker_obj()
{
}

void ABotSpeaker_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ABotSpeaker);
	HX_MARK_MEMBER_NAME(VIZ_MAX,"VIZ_MAX");
	HX_MARK_MEMBER_NAME(VIZ_POS_X,"VIZ_POS_X");
	HX_MARK_MEMBER_NAME(VIZ_POS_Y,"VIZ_POS_Y");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(vizSprites,"vizSprites");
	HX_MARK_MEMBER_NAME(eyeBg,"eyeBg");
	HX_MARK_MEMBER_NAME(eyes,"eyes");
	HX_MARK_MEMBER_NAME(speaker,"speaker");
	HX_MARK_MEMBER_NAME(volumes,"volumes");
	HX_MARK_MEMBER_NAME(snd,"snd");
	HX_MARK_MEMBER_NAME(lookingAtRight,"lookingAtRight");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ABotSpeaker_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(VIZ_MAX,"VIZ_MAX");
	HX_VISIT_MEMBER_NAME(VIZ_POS_X,"VIZ_POS_X");
	HX_VISIT_MEMBER_NAME(VIZ_POS_Y,"VIZ_POS_Y");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(vizSprites,"vizSprites");
	HX_VISIT_MEMBER_NAME(eyeBg,"eyeBg");
	HX_VISIT_MEMBER_NAME(eyes,"eyes");
	HX_VISIT_MEMBER_NAME(speaker,"speaker");
	HX_VISIT_MEMBER_NAME(volumes,"volumes");
	HX_VISIT_MEMBER_NAME(snd,"snd");
	HX_VISIT_MEMBER_NAME(lookingAtRight,"lookingAtRight");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ABotSpeaker_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"snd") ) { return ::hx::Val( snd ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"eyes") ) { return ::hx::Val( eyes ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"eyeBg") ) { return ::hx::Val( eyeBg ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"VIZ_MAX") ) { return ::hx::Val( VIZ_MAX ); }
		if (HX_FIELD_EQ(inName,"speaker") ) { return ::hx::Val( speaker ); }
		if (HX_FIELD_EQ(inName,"volumes") ) { return ::hx::Val( volumes ); }
		if (HX_FIELD_EQ(inName,"set_snd") ) { return ::hx::Val( set_snd_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lookLeft") ) { return ::hx::Val( lookLeft_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"VIZ_POS_X") ) { return ::hx::Val( VIZ_POS_X ); }
		if (HX_FIELD_EQ(inName,"VIZ_POS_Y") ) { return ::hx::Val( VIZ_POS_Y ); }
		if (HX_FIELD_EQ(inName,"lookRight") ) { return ::hx::Val( lookRight_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"vizSprites") ) { return ::hx::Val( vizSprites ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"lookingAtRight") ) { return ::hx::Val( lookingAtRight ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ABotSpeaker_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"snd") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_snd(inValue.Cast<  ::flixel::sound::FlxSound >()) );snd=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"eyes") ) { eyes=inValue.Cast<  ::flxanimate::PsychFlxAnimate >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"eyeBg") ) { eyeBg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"VIZ_MAX") ) { VIZ_MAX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speaker") ) { speaker=inValue.Cast<  ::flxanimate::PsychFlxAnimate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"volumes") ) { volumes=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"VIZ_POS_X") ) { VIZ_POS_X=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VIZ_POS_Y") ) { VIZ_POS_Y=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"vizSprites") ) { vizSprites=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"lookingAtRight") ) { lookingAtRight=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ABotSpeaker_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("VIZ_MAX",cc,5c,59,39));
	outFields->push(HX_("VIZ_POS_X",d5,69,74,0b));
	outFields->push(HX_("VIZ_POS_Y",d6,69,74,0b));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("vizSprites",a7,85,3d,96));
	outFields->push(HX_("eyeBg",96,45,c0,77));
	outFields->push(HX_("eyes",e2,b5,1e,43));
	outFields->push(HX_("speaker",ff,94,04,de));
	outFields->push(HX_("volumes",59,75,71,09));
	outFields->push(HX_("snd",69,a3,57,00));
	outFields->push(HX_("lookingAtRight",46,a4,09,b1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ABotSpeaker_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(ABotSpeaker_obj,VIZ_MAX),HX_("VIZ_MAX",cc,5c,59,39)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(ABotSpeaker_obj,VIZ_POS_X),HX_("VIZ_POS_X",d5,69,74,0b)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(ABotSpeaker_obj,VIZ_POS_Y),HX_("VIZ_POS_Y",d6,69,74,0b)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ABotSpeaker_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ABotSpeaker_obj,vizSprites),HX_("vizSprites",a7,85,3d,96)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ABotSpeaker_obj,eyeBg),HX_("eyeBg",96,45,c0,77)},
	{::hx::fsObject /*  ::flxanimate::PsychFlxAnimate */ ,(int)offsetof(ABotSpeaker_obj,eyes),HX_("eyes",e2,b5,1e,43)},
	{::hx::fsObject /*  ::flxanimate::PsychFlxAnimate */ ,(int)offsetof(ABotSpeaker_obj,speaker),HX_("speaker",ff,94,04,de)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(ABotSpeaker_obj,volumes),HX_("volumes",59,75,71,09)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(ABotSpeaker_obj,snd),HX_("snd",69,a3,57,00)},
	{::hx::fsBool,(int)offsetof(ABotSpeaker_obj,lookingAtRight),HX_("lookingAtRight",46,a4,09,b1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ABotSpeaker_obj_sStaticStorageInfo = 0;
#endif

static ::String ABotSpeaker_obj_sMemberFields[] = {
	HX_("VIZ_MAX",cc,5c,59,39),
	HX_("VIZ_POS_X",d5,69,74,0b),
	HX_("VIZ_POS_Y",d6,69,74,0b),
	HX_("bg",c5,55,00,00),
	HX_("vizSprites",a7,85,3d,96),
	HX_("eyeBg",96,45,c0,77),
	HX_("eyes",e2,b5,1e,43),
	HX_("speaker",ff,94,04,de),
	HX_("volumes",59,75,71,09),
	HX_("snd",69,a3,57,00),
	HX_("set_snd",0c,fd,cd,19),
	HX_("beatHit",7d,ea,04,74),
	HX_("lookingAtRight",46,a4,09,b1),
	HX_("lookLeft",06,f6,1c,59),
	HX_("lookRight",fd,5c,47,17),
	::String(null()) };

::hx::Class ABotSpeaker_obj::__mClass;

void ABotSpeaker_obj::__register()
{
	ABotSpeaker_obj _hx_dummy;
	ABotSpeaker_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.stages.objects.ABotSpeaker",72,b7,f4,6f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ABotSpeaker_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ABotSpeaker_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ABotSpeaker_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ABotSpeaker_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace stages
} // end namespace objects
