// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_objects_Character
#include <objects/Character.h>
#endif
#ifndef INCLUDED_objects_Note
#include <objects/Note.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_states_stages_objects_DarnellBlazinHandler
#include <states/stages/objects/DarnellBlazinHandler.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_6_new,"states.stages.objects.DarnellBlazinHandler","new",0x5bc53c2f,"states.stages.objects.DarnellBlazinHandler.new","states/stages/objects/DarnellBlazinHandler.hx",6,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_12_noteHit,"states.stages.objects.DarnellBlazinHandler","noteHit",0xc53fe8d0,"states.stages.objects.DarnellBlazinHandler.noteHit","states/stages/objects/DarnellBlazinHandler.hx",12,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_102_noteMiss,"states.stages.objects.DarnellBlazinHandler","noteMiss",0xd5f9dddf,"states.stages.objects.DarnellBlazinHandler.noteMiss","states/stages/objects/DarnellBlazinHandler.hx",102,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_198_noteMissPress,"states.stages.objects.DarnellBlazinHandler","noteMissPress",0x47703d24,"states.stages.objects.DarnellBlazinHandler.noteMissPress","states/stages/objects/DarnellBlazinHandler.hx",198,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_213_doAlternate,"states.stages.objects.DarnellBlazinHandler","doAlternate",0xbabadafe,"states.stages.objects.DarnellBlazinHandler.doAlternate","states/stages/objects/DarnellBlazinHandler.hx",213,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_219_playBlockAnim,"states.stages.objects.DarnellBlazinHandler","playBlockAnim",0x7da389f9,"states.stages.objects.DarnellBlazinHandler.playBlockAnim","states/stages/objects/DarnellBlazinHandler.hx",219,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_226_playCringeAnim,"states.stages.objects.DarnellBlazinHandler","playCringeAnim",0x98ea2a48,"states.stages.objects.DarnellBlazinHandler.playCringeAnim","states/stages/objects/DarnellBlazinHandler.hx",226,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_232_playDodgeAnim,"states.stages.objects.DarnellBlazinHandler","playDodgeAnim",0x2ab78e83,"states.stages.objects.DarnellBlazinHandler.playDodgeAnim","states/stages/objects/DarnellBlazinHandler.hx",232,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_238_playIdleAnim,"states.stages.objects.DarnellBlazinHandler","playIdleAnim",0x8bba93aa,"states.stages.objects.DarnellBlazinHandler.playIdleAnim","states/stages/objects/DarnellBlazinHandler.hx",238,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_244_playFakeoutAnim,"states.stages.objects.DarnellBlazinHandler","playFakeoutAnim",0x86d72f85,"states.stages.objects.DarnellBlazinHandler.playFakeoutAnim","states/stages/objects/DarnellBlazinHandler.hx",244,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_251_playPissedConditionalAnim,"states.stages.objects.DarnellBlazinHandler","playPissedConditionalAnim",0x78a2645a,"states.stages.objects.DarnellBlazinHandler.playPissedConditionalAnim","states/stages/objects/DarnellBlazinHandler.hx",251,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_258_playPissedAnim,"states.stages.objects.DarnellBlazinHandler","playPissedAnim",0x9dfc094e,"states.stages.objects.DarnellBlazinHandler.playPissedAnim","states/stages/objects/DarnellBlazinHandler.hx",258,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_264_playUppercutPrepAnim,"states.stages.objects.DarnellBlazinHandler","playUppercutPrepAnim",0x28ce8a83,"states.stages.objects.DarnellBlazinHandler.playUppercutPrepAnim","states/stages/objects/DarnellBlazinHandler.hx",264,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_270_playUppercutAnim,"states.stages.objects.DarnellBlazinHandler","playUppercutAnim",0x034b8e76,"states.stages.objects.DarnellBlazinHandler.playUppercutAnim","states/stages/objects/DarnellBlazinHandler.hx",270,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_276_playUppercutHitAnim,"states.stages.objects.DarnellBlazinHandler","playUppercutHitAnim",0x63d4a2bf,"states.stages.objects.DarnellBlazinHandler.playUppercutHitAnim","states/stages/objects/DarnellBlazinHandler.hx",276,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_282_playHitHighAnim,"states.stages.objects.DarnellBlazinHandler","playHitHighAnim",0xff5ebcc1,"states.stages.objects.DarnellBlazinHandler.playHitHighAnim","states/stages/objects/DarnellBlazinHandler.hx",282,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_289_playHitLowAnim,"states.stages.objects.DarnellBlazinHandler","playHitLowAnim",0x6f444657,"states.stages.objects.DarnellBlazinHandler.playHitLowAnim","states/stages/objects/DarnellBlazinHandler.hx",289,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_296_playPunchHighAnim,"states.stages.objects.DarnellBlazinHandler","playPunchHighAnim",0x33fa6bdc,"states.stages.objects.DarnellBlazinHandler.playPunchHighAnim","states/stages/objects/DarnellBlazinHandler.hx",296,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_302_playPunchLowAnim,"states.stages.objects.DarnellBlazinHandler","playPunchLowAnim",0x7418339c,"states.stages.objects.DarnellBlazinHandler.playPunchLowAnim","states/stages/objects/DarnellBlazinHandler.hx",302,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_308_playSpinAnim,"states.stages.objects.DarnellBlazinHandler","playSpinAnim",0xb63dbd58,"states.stages.objects.DarnellBlazinHandler.playSpinAnim","states/stages/objects/DarnellBlazinHandler.hx",308,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_316_willMissBeLethal,"states.stages.objects.DarnellBlazinHandler","willMissBeLethal",0x731b249a,"states.stages.objects.DarnellBlazinHandler.willMissBeLethal","states/stages/objects/DarnellBlazinHandler.hx",316,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_321_wasNoteHitPoorly,"states.stages.objects.DarnellBlazinHandler","wasNoteHitPoorly",0xc262d838,"states.stages.objects.DarnellBlazinHandler.wasNoteHitPoorly","states/stages/objects/DarnellBlazinHandler.hx",321,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_326_isPlayerLowHealth,"states.stages.objects.DarnellBlazinHandler","isPlayerLowHealth",0x8fc513f4,"states.stages.objects.DarnellBlazinHandler.isPlayerLowHealth","states/stages/objects/DarnellBlazinHandler.hx",326,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_330_moveToBack,"states.stages.objects.DarnellBlazinHandler","moveToBack",0x8124fb44,"states.stages.objects.DarnellBlazinHandler.moveToBack","states/stages/objects/DarnellBlazinHandler.hx",330,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_340_moveToFront,"states.stages.objects.DarnellBlazinHandler","moveToFront",0xd816f0ec,"states.stages.objects.DarnellBlazinHandler.moveToFront","states/stages/objects/DarnellBlazinHandler.hx",340,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_353_get_boyfriend,"states.stages.objects.DarnellBlazinHandler","get_boyfriend",0x4579e1d0,"states.stages.objects.DarnellBlazinHandler.get_boyfriend","states/stages/objects/DarnellBlazinHandler.hx",353,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_354_get_dad,"states.stages.objects.DarnellBlazinHandler","get_dad",0x9eb5fe2d,"states.stages.objects.DarnellBlazinHandler.get_dad","states/stages/objects/DarnellBlazinHandler.hx",354,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_355_get_boyfriendGroup,"states.stages.objects.DarnellBlazinHandler","get_boyfriendGroup",0xe773af4f,"states.stages.objects.DarnellBlazinHandler.get_boyfriendGroup","states/stages/objects/DarnellBlazinHandler.hx",355,0xae533020)
HX_LOCAL_STACK_FRAME(_hx_pos_40c86ffad0eb94e9_356_get_dadGroup,"states.stages.objects.DarnellBlazinHandler","get_dadGroup",0xc202a1d2,"states.stages.objects.DarnellBlazinHandler.get_dadGroup","states/stages/objects/DarnellBlazinHandler.hx",356,0xae533020)
namespace states{
namespace stages{
namespace objects{

void DarnellBlazinHandler_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_6_new)
HXLINE( 211)		this->alternate = false;
HXLINE(  10)		this->cantUppercut = false;
            	}

Dynamic DarnellBlazinHandler_obj::__CreateEmpty() { return new DarnellBlazinHandler_obj; }

void *DarnellBlazinHandler_obj::_hx_vtable = 0;

Dynamic DarnellBlazinHandler_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DarnellBlazinHandler_obj > _hx_result = new DarnellBlazinHandler_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DarnellBlazinHandler_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5898c8f3;
}

void DarnellBlazinHandler_obj::noteHit( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_12_noteHit)
HXLINE(  16)		bool _hx_tmp;
HXDLIN(  16)		bool _hx_tmp1;
HXDLIN(  16)		if (this->wasNoteHitPoorly(note->rating)) {
HXLINE(  16)			_hx_tmp1 = this->isPlayerLowHealth();
            		}
            		else {
HXLINE(  16)			_hx_tmp1 = false;
            		}
HXDLIN(  16)		if (_hx_tmp1) {
HXLINE(  16)			_hx_tmp = (::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 30);
            		}
            		else {
HXLINE(  16)			_hx_tmp = false;
            		}
HXDLIN(  16)		if (_hx_tmp) {
HXLINE(  18)			this->playUppercutPrepAnim();
HXLINE(  19)			return;
            		}
HXLINE(  22)		if (this->cantUppercut) {
HXLINE(  24)			this->playPunchHighAnim();
HXLINE(  25)			return;
            		}
HXLINE(  29)		::String _hx_switch_0 = note->noteType;
            		if (  (_hx_switch_0==HX_("weekend-1-blockhigh",ad,48,d9,98)) ){
HXLINE(  51)			this->playPunchHighAnim();
HXDLIN(  51)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-blocklow",a9,35,2c,2b)) ){
HXLINE(  53)			this->playPunchLowAnim();
HXDLIN(  53)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-blockspin",0d,f3,23,a0)) ){
HXLINE(  55)			this->playPunchHighAnim();
HXDLIN(  55)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-darnelluppercut",aa,c4,4c,f3)) ){
HXLINE(  84)			this->playUppercutAnim();
HXDLIN(  84)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-darnelluppercutprep",97,20,7c,3f)) ){
HXLINE(  82)			this->playUppercutPrepAnim();
HXDLIN(  82)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-dodgehigh",37,4d,ed,45)) ){
HXLINE(  59)			this->playPunchHighAnim();
HXDLIN(  59)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-dodgelow",5f,90,07,fe)) ){
HXLINE(  61)			this->playPunchLowAnim();
HXDLIN(  61)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-dodgespin",97,f7,37,4d)) ){
HXLINE(  63)			this->playPunchHighAnim();
HXDLIN(  63)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-fakeout",17,06,70,2b)) ){
HXLINE(  89)			this->playCringeAnim();
HXDLIN(  89)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-hithigh",33,19,08,e2)) ){
HXLINE(  67)			this->playPunchHighAnim();
HXDLIN(  67)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-hitlow",e3,57,3b,6f)) ){
HXLINE(  69)			this->playPunchLowAnim();
HXDLIN(  69)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-hitspin",93,c3,52,e9)) ){
HXLINE(  71)			this->playPunchHighAnim();
HXDLIN(  71)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-idle",56,a6,4f,bf)) ){
HXLINE(  87)			this->playIdleAnim();
HXDLIN(  87)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-picouppercut",87,dc,6b,e9)) ){
HXLINE(  78)			this->playUppercutHitAnim();
HXDLIN(  78)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-picouppercutprep",f4,ea,00,a8)) ){
HXLINE(  74)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-punchhigh",8e,d5,09,41)) ){
HXLINE(  41)			this->playHitHighAnim();
HXDLIN(  41)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-punchhighblocked",1e,93,04,da)) ){
HXLINE(  43)			this->playBlockAnim();
HXDLIN(  43)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-punchhighdodged",bb,c3,11,c2)) ){
HXLINE(  45)			this->playDodgeAnim();
HXDLIN(  45)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-punchhighspin",50,96,57,62)) ){
HXLINE(  47)			this->playSpinAnim();
HXDLIN(  47)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-punchlow",e8,9f,d8,59)) ){
HXLINE(  32)			this->playHitLowAnim();
HXDLIN(  32)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-punchlowblocked",04,28,bf,80)) ){
HXLINE(  34)			this->playBlockAnim();
HXDLIN(  34)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-punchlowdodged",95,cd,9f,f7)) ){
HXLINE(  36)			this->playDodgeAnim();
HXDLIN(  36)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-punchlowspin",aa,95,63,bd)) ){
HXLINE(  38)			this->playSpinAnim();
HXDLIN(  38)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-reversefakeout",f9,04,4b,f9)) ){
HXLINE(  95)			this->playFakeoutAnim();
HXDLIN(  95)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-taunt",2c,7f,d5,f9)) ){
HXLINE(  91)			this->playPissedConditionalAnim();
HXDLIN(  91)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-tauntforce",3f,b3,26,31)) ){
HXLINE(  93)			this->playPissedAnim();
HXDLIN(  93)			goto _hx_goto_1;
            		}
            		_hx_goto_1:;
HXLINE(  98)		this->cantUppercut = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DarnellBlazinHandler_obj,noteHit,(void))

void DarnellBlazinHandler_obj::noteMiss( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_102_noteMiss)
HXLINE( 104)		if ((this->get_dad()->_lastPlayedAnimation == HX_("uppercutPrep",6d,10,57,1c))) {
HXLINE( 106)			this->playUppercutAnim();
HXLINE( 107)			return;
            		}
HXLINE( 110)		if (this->willMissBeLethal()) {
HXLINE( 112)			this->playPunchLowAnim();
HXLINE( 113)			return;
            		}
HXLINE( 116)		if (this->cantUppercut) {
HXLINE( 118)			this->playPunchHighAnim();
HXLINE( 119)			return;
            		}
HXLINE( 123)		::String _hx_switch_0 = note->noteType;
            		if (  (_hx_switch_0==HX_("weekend-1-blockhigh",ad,48,d9,98)) ){
HXLINE( 147)			this->playPunchHighAnim();
HXDLIN( 147)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-blocklow",a9,35,2c,2b)) ){
HXLINE( 149)			this->playPunchLowAnim();
HXDLIN( 149)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-blockspin",0d,f3,23,a0)) ){
HXLINE( 151)			this->playPunchHighAnim();
HXDLIN( 151)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-darnelluppercut",aa,c4,4c,f3)) ){
HXLINE( 180)			this->playUppercutAnim();
HXDLIN( 180)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-darnelluppercutprep",97,20,7c,3f)) ){
HXLINE( 178)			this->playUppercutPrepAnim();
HXDLIN( 178)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-dodgehigh",37,4d,ed,45)) ){
HXLINE( 155)			this->playPunchHighAnim();
HXDLIN( 155)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-dodgelow",5f,90,07,fe)) ){
HXLINE( 157)			this->playPunchLowAnim();
HXDLIN( 157)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-dodgespin",97,f7,37,4d)) ){
HXLINE( 159)			this->playPunchHighAnim();
HXDLIN( 159)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-fakeout",17,06,70,2b)) ){
HXLINE( 185)			this->playCringeAnim();
HXDLIN( 185)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-hithigh",33,19,08,e2)) ){
HXLINE( 163)			this->playPunchHighAnim();
HXDLIN( 163)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-hitlow",e3,57,3b,6f)) ){
HXLINE( 165)			this->playPunchLowAnim();
HXDLIN( 165)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-hitspin",93,c3,52,e9)) ){
HXLINE( 167)			this->playPunchHighAnim();
HXDLIN( 167)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-idle",56,a6,4f,bf)) ){
HXLINE( 183)			this->playIdleAnim();
HXDLIN( 183)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-picouppercut",87,dc,6b,e9)) ){
HXLINE( 174)			this->playDodgeAnim();
HXDLIN( 174)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-picouppercutprep",f4,ea,00,a8)) ){
HXLINE( 171)			this->playHitHighAnim();
HXLINE( 172)			this->cantUppercut = true;
HXLINE( 170)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-punchhigh",8e,d5,09,41)) ){
HXLINE( 137)			this->playPunchHighAnim();
HXDLIN( 137)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-punchhighblocked",1e,93,04,da)) ){
HXLINE( 139)			this->playPunchHighAnim();
HXDLIN( 139)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-punchhighdodged",bb,c3,11,c2)) ){
HXLINE( 141)			this->playPunchHighAnim();
HXDLIN( 141)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-punchhighspin",50,96,57,62)) ){
HXLINE( 143)			this->playPunchHighAnim();
HXDLIN( 143)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-punchlow",e8,9f,d8,59)) ){
HXLINE( 127)			this->playPunchLowAnim();
HXDLIN( 127)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-punchlowblocked",04,28,bf,80)) ){
HXLINE( 129)			this->playPunchLowAnim();
HXDLIN( 129)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-punchlowdodged",95,cd,9f,f7)) ){
HXLINE( 131)			this->playPunchLowAnim();
HXDLIN( 131)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-punchlowspin",aa,95,63,bd)) ){
HXLINE( 133)			this->playPunchLowAnim();
HXDLIN( 133)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-reversefakeout",f9,04,4b,f9)) ){
HXLINE( 191)			this->playFakeoutAnim();
HXDLIN( 191)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-taunt",2c,7f,d5,f9)) ){
HXLINE( 187)			this->playPissedConditionalAnim();
HXDLIN( 187)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("weekend-1-tauntforce",3f,b3,26,31)) ){
HXLINE( 189)			this->playPissedAnim();
HXDLIN( 189)			goto _hx_goto_3;
            		}
            		_hx_goto_3:;
HXLINE( 193)		this->cantUppercut = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DarnellBlazinHandler_obj,noteMiss,(void))

void DarnellBlazinHandler_obj::noteMissPress(int direction){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_198_noteMissPress)
HXDLIN( 198)		if (this->willMissBeLethal()) {
HXLINE( 199)			this->playPunchLowAnim();
            		}
            		else {
HXLINE( 203)			bool shouldDodge = (::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 50);
HXLINE( 204)			if (shouldDodge) {
HXLINE( 205)				this->playDodgeAnim();
            			}
            			else {
HXLINE( 207)				this->playBlockAnim();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DarnellBlazinHandler_obj,noteMissPress,(void))

::String DarnellBlazinHandler_obj::doAlternate(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_213_doAlternate)
HXLINE( 214)		this->alternate = !(this->alternate);
HXLINE( 215)		if (this->alternate) {
HXLINE( 215)			return HX_("1",31,00,00,00);
            		}
            		else {
HXLINE( 215)			return HX_("2",32,00,00,00);
            		}
HXDLIN( 215)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,doAlternate,return )

void DarnellBlazinHandler_obj::playBlockAnim(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_219_playBlockAnim)
HXLINE( 220)		this->get_dad()->playAnim(HX_("block",4d,75,fc,b4),true,null(),null());
HXLINE( 221)		::states::PlayState_obj::instance->camGame->shake(((Float)0.002),((Float)0.1),null(),null(),null());
HXLINE( 222)		this->moveToBack();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,playBlockAnim,(void))

void DarnellBlazinHandler_obj::playCringeAnim(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_226_playCringeAnim)
HXLINE( 227)		this->get_dad()->playAnim(HX_("cringe",72,13,be,7e),true,null(),null());
HXLINE( 228)		this->moveToBack();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,playCringeAnim,(void))

void DarnellBlazinHandler_obj::playDodgeAnim(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_232_playDodgeAnim)
HXLINE( 233)		this->get_dad()->playAnim(HX_("dodge",d7,ec,bc,dd),true,false,null());
HXLINE( 234)		this->moveToBack();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,playDodgeAnim,(void))

void DarnellBlazinHandler_obj::playIdleAnim(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_238_playIdleAnim)
HXLINE( 239)		this->get_dad()->playAnim(HX_("idle",14,a7,b3,45),false,null(),null());
HXLINE( 240)		this->moveToBack();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,playIdleAnim,(void))

void DarnellBlazinHandler_obj::playFakeoutAnim(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_244_playFakeoutAnim)
HXLINE( 245)		this->get_dad()->playAnim(HX_("fakeout",19,90,22,39),true,null(),null());
HXLINE( 246)		this->moveToBack();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,playFakeoutAnim,(void))

void DarnellBlazinHandler_obj::playPissedConditionalAnim(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_251_playPissedConditionalAnim)
HXDLIN( 251)		if ((this->get_dad()->_lastPlayedAnimation == HX_("cringe",72,13,be,7e))) {
HXLINE( 252)			this->playPissedAnim();
            		}
            		else {
HXLINE( 254)			this->playIdleAnim();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,playPissedConditionalAnim,(void))

void DarnellBlazinHandler_obj::playPissedAnim(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_258_playPissedAnim)
HXLINE( 259)		this->get_dad()->playAnim(HX_("pissed",78,77,66,89),true,null(),null());
HXLINE( 260)		this->moveToBack();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,playPissedAnim,(void))

void DarnellBlazinHandler_obj::playUppercutPrepAnim(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_264_playUppercutPrepAnim)
HXLINE( 265)		this->get_dad()->playAnim(HX_("uppercutPrep",6d,10,57,1c),true,null(),null());
HXLINE( 266)		this->moveToFront();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,playUppercutPrepAnim,(void))

void DarnellBlazinHandler_obj::playUppercutAnim(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_270_playUppercutAnim)
HXLINE( 271)		this->get_dad()->playAnim(HX_("uppercut",60,f5,88,90),true,null(),null());
HXLINE( 272)		this->moveToFront();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,playUppercutAnim,(void))

void DarnellBlazinHandler_obj::playUppercutHitAnim(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_276_playUppercutHitAnim)
HXLINE( 277)		this->get_dad()->playAnim(HX_("uppercutHit",d3,a4,69,a5),true,null(),null());
HXLINE( 278)		this->moveToBack();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,playUppercutHitAnim,(void))

void DarnellBlazinHandler_obj::playHitHighAnim(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_282_playHitHighAnim)
HXLINE( 283)		this->get_dad()->playAnim(HX_("hitHigh",55,cf,93,da),true,null(),null());
HXLINE( 284)		::states::PlayState_obj::instance->camGame->shake(((Float)0.0025),((Float)0.15),null(),null(),null());
HXLINE( 285)		this->moveToBack();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,playHitHighAnim,(void))

void DarnellBlazinHandler_obj::playHitLowAnim(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_289_playHitLowAnim)
HXLINE( 290)		this->get_dad()->playAnim(HX_("hitLow",01,3c,17,57),true,null(),null());
HXLINE( 291)		::states::PlayState_obj::instance->camGame->shake(((Float)0.0025),((Float)0.15),null(),null(),null());
HXLINE( 292)		this->moveToBack();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,playHitLowAnim,(void))

void DarnellBlazinHandler_obj::playPunchHighAnim(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_296_playPunchHighAnim)
HXLINE( 297)		 ::objects::Character _hx_tmp = this->get_dad();
HXDLIN( 297)		_hx_tmp->playAnim((HX_("punchHigh",30,90,cd,f2) + this->doAlternate()),true,null(),null());
HXLINE( 298)		this->moveToFront();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,playPunchHighAnim,(void))

void DarnellBlazinHandler_obj::playPunchLowAnim(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_302_playPunchLowAnim)
HXLINE( 303)		 ::objects::Character _hx_tmp = this->get_dad();
HXDLIN( 303)		_hx_tmp->playAnim((HX_("punchLow",86,8f,46,48) + this->doAlternate()),true,null(),null());
HXLINE( 304)		this->moveToFront();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,playPunchLowAnim,(void))

void DarnellBlazinHandler_obj::playSpinAnim(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_308_playSpinAnim)
HXLINE( 309)		this->get_dad()->playAnim(HX_("hitSpin",b5,79,de,e1),true,null(),null());
HXLINE( 310)		::states::PlayState_obj::instance->camGame->shake(((Float)0.0025),((Float)0.15),null(),null(),null());
HXLINE( 311)		this->moveToBack();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,playSpinAnim,(void))

bool DarnellBlazinHandler_obj::willMissBeLethal(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_316_willMissBeLethal)
HXDLIN( 316)		if ((::states::PlayState_obj::instance->health <= ((Float)0.0))) {
HXDLIN( 316)			return !(::states::PlayState_obj::instance->practiceMode);
            		}
            		else {
HXDLIN( 316)			return false;
            		}
HXDLIN( 316)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,willMissBeLethal,return )

bool DarnellBlazinHandler_obj::wasNoteHitPoorly(::String rating){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_321_wasNoteHitPoorly)
HXDLIN( 321)		if ((rating != HX_("bad",c5,b1,4a,00))) {
HXDLIN( 321)			return (rating == HX_("shit",c0,cf,52,4c));
            		}
            		else {
HXDLIN( 321)			return true;
            		}
HXDLIN( 321)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DarnellBlazinHandler_obj,wasNoteHitPoorly,return )

bool DarnellBlazinHandler_obj::isPlayerLowHealth(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_326_isPlayerLowHealth)
HXDLIN( 326)		return (::states::PlayState_obj::instance->health <= ((Float)0.6));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,isPlayerLowHealth,return )

void DarnellBlazinHandler_obj::moveToBack(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_330_moveToBack)
HXLINE( 331)		::Array< ::Dynamic> dadPos = ::flixel::FlxG_obj::game->_state->members;
HXDLIN( 331)		int dadPos1 = dadPos->indexOf(this->get_dadGroup(),null());
HXLINE( 332)		::Array< ::Dynamic> bfPos = ::flixel::FlxG_obj::game->_state->members;
HXDLIN( 332)		int bfPos1 = bfPos->indexOf(this->get_boyfriendGroup(),null());
HXLINE( 333)		if ((dadPos1 < bfPos1)) {
HXLINE( 333)			return;
            		}
HXLINE( 335)		::flixel::FlxG_obj::game->_state->members->set(bfPos1,this->get_dadGroup());
HXLINE( 336)		::flixel::FlxG_obj::game->_state->members->set(dadPos1,this->get_boyfriendGroup());
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,moveToBack,(void))

void DarnellBlazinHandler_obj::moveToFront(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_340_moveToFront)
HXLINE( 341)		::Array< ::Dynamic> dadPos = ::flixel::FlxG_obj::game->_state->members;
HXDLIN( 341)		int dadPos1 = dadPos->indexOf(this->get_dadGroup(),null());
HXLINE( 342)		::Array< ::Dynamic> bfPos = ::flixel::FlxG_obj::game->_state->members;
HXDLIN( 342)		int bfPos1 = bfPos->indexOf(this->get_boyfriendGroup(),null());
HXLINE( 343)		if ((dadPos1 > bfPos1)) {
HXLINE( 343)			return;
            		}
HXLINE( 345)		::flixel::FlxG_obj::game->_state->members->set(bfPos1,this->get_dadGroup());
HXLINE( 346)		::flixel::FlxG_obj::game->_state->members->set(dadPos1,this->get_boyfriendGroup());
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,moveToFront,(void))

 ::objects::Character DarnellBlazinHandler_obj::get_boyfriend(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_353_get_boyfriend)
HXDLIN( 353)		return ::states::PlayState_obj::instance->boyfriend;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,get_boyfriend,return )

 ::objects::Character DarnellBlazinHandler_obj::get_dad(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_354_get_dad)
HXDLIN( 354)		return ::states::PlayState_obj::instance->dad;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,get_dad,return )

 ::flixel::group::FlxTypedSpriteGroup DarnellBlazinHandler_obj::get_boyfriendGroup(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_355_get_boyfriendGroup)
HXDLIN( 355)		return ::states::PlayState_obj::instance->boyfriendGroup;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,get_boyfriendGroup,return )

 ::flixel::group::FlxTypedSpriteGroup DarnellBlazinHandler_obj::get_dadGroup(){
            	HX_STACKFRAME(&_hx_pos_40c86ffad0eb94e9_356_get_dadGroup)
HXDLIN( 356)		return ::states::PlayState_obj::instance->dadGroup;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DarnellBlazinHandler_obj,get_dadGroup,return )


::hx::ObjectPtr< DarnellBlazinHandler_obj > DarnellBlazinHandler_obj::__new() {
	::hx::ObjectPtr< DarnellBlazinHandler_obj > __this = new DarnellBlazinHandler_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< DarnellBlazinHandler_obj > DarnellBlazinHandler_obj::__alloc(::hx::Ctx *_hx_ctx) {
	DarnellBlazinHandler_obj *__this = (DarnellBlazinHandler_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DarnellBlazinHandler_obj), false, "states.stages.objects.DarnellBlazinHandler"));
	*(void **)__this = DarnellBlazinHandler_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DarnellBlazinHandler_obj::DarnellBlazinHandler_obj()
{
}

::hx::Val DarnellBlazinHandler_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_dad() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"noteHit") ) { return ::hx::Val( noteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_dad") ) { return ::hx::Val( get_dad_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"noteMiss") ) { return ::hx::Val( noteMiss_dyn() ); }
		if (HX_FIELD_EQ(inName,"dadGroup") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_dadGroup() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"alternate") ) { return ::hx::Val( alternate ); }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_boyfriend() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"moveToBack") ) { return ::hx::Val( moveToBack_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"doAlternate") ) { return ::hx::Val( doAlternate_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveToFront") ) { return ::hx::Val( moveToFront_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cantUppercut") ) { return ::hx::Val( cantUppercut ); }
		if (HX_FIELD_EQ(inName,"playIdleAnim") ) { return ::hx::Val( playIdleAnim_dyn() ); }
		if (HX_FIELD_EQ(inName,"playSpinAnim") ) { return ::hx::Val( playSpinAnim_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_dadGroup") ) { return ::hx::Val( get_dadGroup_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"noteMissPress") ) { return ::hx::Val( noteMissPress_dyn() ); }
		if (HX_FIELD_EQ(inName,"playBlockAnim") ) { return ::hx::Val( playBlockAnim_dyn() ); }
		if (HX_FIELD_EQ(inName,"playDodgeAnim") ) { return ::hx::Val( playDodgeAnim_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_boyfriend") ) { return ::hx::Val( get_boyfriend_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"playCringeAnim") ) { return ::hx::Val( playCringeAnim_dyn() ); }
		if (HX_FIELD_EQ(inName,"playPissedAnim") ) { return ::hx::Val( playPissedAnim_dyn() ); }
		if (HX_FIELD_EQ(inName,"playHitLowAnim") ) { return ::hx::Val( playHitLowAnim_dyn() ); }
		if (HX_FIELD_EQ(inName,"boyfriendGroup") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_boyfriendGroup() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"playFakeoutAnim") ) { return ::hx::Val( playFakeoutAnim_dyn() ); }
		if (HX_FIELD_EQ(inName,"playHitHighAnim") ) { return ::hx::Val( playHitHighAnim_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"playUppercutAnim") ) { return ::hx::Val( playUppercutAnim_dyn() ); }
		if (HX_FIELD_EQ(inName,"playPunchLowAnim") ) { return ::hx::Val( playPunchLowAnim_dyn() ); }
		if (HX_FIELD_EQ(inName,"willMissBeLethal") ) { return ::hx::Val( willMissBeLethal_dyn() ); }
		if (HX_FIELD_EQ(inName,"wasNoteHitPoorly") ) { return ::hx::Val( wasNoteHitPoorly_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"playPunchHighAnim") ) { return ::hx::Val( playPunchHighAnim_dyn() ); }
		if (HX_FIELD_EQ(inName,"isPlayerLowHealth") ) { return ::hx::Val( isPlayerLowHealth_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_boyfriendGroup") ) { return ::hx::Val( get_boyfriendGroup_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"playUppercutHitAnim") ) { return ::hx::Val( playUppercutHitAnim_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"playUppercutPrepAnim") ) { return ::hx::Val( playUppercutPrepAnim_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"playPissedConditionalAnim") ) { return ::hx::Val( playPissedConditionalAnim_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val DarnellBlazinHandler_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"alternate") ) { alternate=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cantUppercut") ) { cantUppercut=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DarnellBlazinHandler_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("cantUppercut",e4,cf,eb,e0));
	outFields->push(HX_("alternate",3a,c9,33,35));
	outFields->push(HX_("boyfriend",6a,29,b8,e6));
	outFields->push(HX_("dad",47,36,4c,00));
	outFields->push(HX_("boyfriendGroup",75,99,09,ef));
	outFields->push(HX_("dadGroup",78,cb,28,42));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DarnellBlazinHandler_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(DarnellBlazinHandler_obj,cantUppercut),HX_("cantUppercut",e4,cf,eb,e0)},
	{::hx::fsBool,(int)offsetof(DarnellBlazinHandler_obj,alternate),HX_("alternate",3a,c9,33,35)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *DarnellBlazinHandler_obj_sStaticStorageInfo = 0;
#endif

static ::String DarnellBlazinHandler_obj_sMemberFields[] = {
	HX_("cantUppercut",e4,cf,eb,e0),
	HX_("noteHit",81,e9,4a,4d),
	HX_("noteMiss",0e,78,8f,57),
	HX_("noteMissPress",95,58,12,aa),
	HX_("alternate",3a,c9,33,35),
	HX_("doAlternate",2f,88,32,8e),
	HX_("playBlockAnim",6a,a5,45,e0),
	HX_("playCringeAnim",b7,11,20,84),
	HX_("playDodgeAnim",f4,a9,59,8d),
	HX_("playIdleAnim",59,71,fa,c0),
	HX_("playFakeoutAnim",36,c9,cb,6a),
	HX_("playPissedConditionalAnim",4b,65,78,5d),
	HX_("playPissedAnim",bd,f0,31,89),
	HX_("playUppercutPrepAnim",32,2f,ba,cf),
	HX_("playUppercutAnim",a5,6f,5d,95),
	HX_("playUppercutHitAnim",f0,68,76,8a),
	HX_("playHitHighAnim",72,56,53,e3),
	HX_("playHitLowAnim",c6,2d,7a,5a),
	HX_("playPunchHighAnim",cd,93,8d,71),
	HX_("playPunchLowAnim",cb,14,2a,06),
	HX_("playSpinAnim",07,9b,7d,eb),
	HX_("willMissBeLethal",c9,05,2d,05),
	HX_("wasNoteHitPoorly",67,b9,74,54),
	HX_("isPlayerLowHealth",e5,3b,58,cd),
	HX_("moveToBack",33,bf,f8,c6),
	HX_("moveToFront",1d,9e,8e,ab),
	HX_("get_boyfriend",41,fd,1b,a8),
	HX_("get_dad",de,fe,c0,26),
	HX_("get_boyfriendGroup",3e,7a,a3,8a),
	HX_("get_dadGroup",81,7f,42,f7),
	::String(null()) };

::hx::Class DarnellBlazinHandler_obj::__mClass;

void DarnellBlazinHandler_obj::__register()
{
	DarnellBlazinHandler_obj _hx_dummy;
	DarnellBlazinHandler_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.stages.objects.DarnellBlazinHandler",bd,f8,f1,bd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DarnellBlazinHandler_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DarnellBlazinHandler_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DarnellBlazinHandler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DarnellBlazinHandler_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace stages
} // end namespace objects
