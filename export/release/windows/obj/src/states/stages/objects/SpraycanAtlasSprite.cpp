// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_flxanimate_FlxAnimate
#include <flxanimate/FlxAnimate.h>
#endif
#ifndef INCLUDED_flxanimate_PsychFlxAnimate
#include <flxanimate/PsychFlxAnimate.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxAnim
#include <flxanimate/animate/FlxAnim.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_states_stages_objects_SpraycanAtlasSprite
#include <states/stages/objects/SpraycanAtlasSprite.h>
#endif
#ifndef INCLUDED_states_stages_objects_SpraycanState
#include <states/stages/objects/SpraycanState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3ad34bcb66487319_34_new,"states.stages.objects.SpraycanAtlasSprite","new",0x51021a98,"states.stages.objects.SpraycanAtlasSprite.new","states/stages/objects/SpraycanAtlasSprite.hx",34,0xe1e532b9)
HX_DEFINE_STACK_FRAME(_hx_pos_3ad34bcb66487319_11_new,"states.stages.objects.SpraycanAtlasSprite","new",0x51021a98,"states.stages.objects.SpraycanAtlasSprite.new","states/stages/objects/SpraycanAtlasSprite.hx",11,0xe1e532b9)
static const int _hx_array_data_69932ea6_2[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,(int)14,(int)15,(int)16,(int)17,(int)18,
};
static const int _hx_array_data_69932ea6_3[] = {
	(int)19,(int)20,(int)21,(int)22,(int)23,(int)24,(int)25,
};
static const int _hx_array_data_69932ea6_4[] = {
	(int)26,(int)27,(int)28,(int)29,(int)30,(int)31,(int)32,(int)33,(int)34,(int)35,(int)36,(int)37,(int)38,(int)39,(int)40,(int)41,(int)42,
};
HX_LOCAL_STACK_FRAME(_hx_pos_3ad34bcb66487319_43_finishCanAnimation,"states.stages.objects.SpraycanAtlasSprite","finishCanAnimation",0x3dad8a8f,"states.stages.objects.SpraycanAtlasSprite.finishCanAnimation","states/stages/objects/SpraycanAtlasSprite.hx",43,0xe1e532b9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ad34bcb66487319_58_playHitExplosion,"states.stages.objects.SpraycanAtlasSprite","playHitExplosion",0x80b9d59e,"states.stages.objects.SpraycanAtlasSprite.playHitExplosion","states/stages/objects/SpraycanAtlasSprite.hx",58,0xe1e532b9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ad34bcb66487319_64_playCanStart,"states.stages.objects.SpraycanAtlasSprite","playCanStart",0x3eba630e,"states.stages.objects.SpraycanAtlasSprite.playCanStart","states/stages/objects/SpraycanAtlasSprite.hx",64,0xe1e532b9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ad34bcb66487319_71_playCanShot,"states.stages.objects.SpraycanAtlasSprite","playCanShot",0x4add5fce,"states.stages.objects.SpraycanAtlasSprite.playCanShot","states/stages/objects/SpraycanAtlasSprite.hx",71,0xe1e532b9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ad34bcb66487319_77_playHitPico,"states.stages.objects.SpraycanAtlasSprite","playHitPico",0xc010237c,"states.stages.objects.SpraycanAtlasSprite.playHitPico","states/stages/objects/SpraycanAtlasSprite.hx",77,0xe1e532b9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ad34bcb66487319_84_playAnimation,"states.stages.objects.SpraycanAtlasSprite","playAnimation",0x975082a8,"states.stages.objects.SpraycanAtlasSprite.playAnimation","states/stages/objects/SpraycanAtlasSprite.hx",84,0xe1e532b9)
namespace states{
namespace stages{
namespace objects{

void SpraycanAtlasSprite_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::stages::objects::SpraycanAtlasSprite,_gthis) HXARGC(1)
            		void _hx_run(::String name){
            			HX_GC_STACKFRAME(&_hx_pos_3ad34bcb66487319_34_new)
HXLINE(  34)			 ::flixel::FlxSprite _gthis1 = _gthis->explosion;
HXDLIN(  34)			_gthis1->set_visible(_gthis->explosion->set_active(false));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_3ad34bcb66487319_11_new)
HXLINE(  40)		this->cutscene = false;
HXLINE(  13)		this->currentState = ::states::stages::objects::SpraycanState_obj::WAITING_dyn();
HXLINE(  18)		 ::states::stages::objects::SpraycanAtlasSprite _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  19)		super::__construct(null(),null(),null());
HXLINE(  21)		this->canAtlas =  ::flxanimate::PsychFlxAnimate_obj::__alloc( HX_CTX ,x,y,null(),null());
HXLINE(  22)		::backend::Paths_obj::loadAnimateAtlas(this->canAtlas,HX_("spraycanAtlas",88,b5,06,a2),null(),null());
HXLINE(  23)		this->canAtlas->anim->addBySymbolIndices(HX_("Can Start",12,30,29,a2),HX_("Can with Labels",c9,72,bc,3a),::Array_obj< int >::fromData( _hx_array_data_69932ea6_2,19),24,false,null(),null());
HXLINE(  24)		this->canAtlas->anim->addBySymbolIndices(HX_("Hit Pico",12,4e,e7,27),HX_("Can with Labels",c9,72,bc,3a),::Array_obj< int >::fromData( _hx_array_data_69932ea6_3,7),null(),false,null(),null());
HXLINE(  25)		this->canAtlas->anim->addBySymbolIndices(HX_("Can Shot",4a,1f,16,59),HX_("Can with Labels",c9,72,bc,3a),::Array_obj< int >::fromData( _hx_array_data_69932ea6_4,17),24,false,null(),null());
HXLINE(  26)		this->canAtlas->anim->onComplete->add(this->finishCanAnimation_dyn());
HXLINE(  27)		 ::flxanimate::PsychFlxAnimate _hx_tmp = this->canAtlas;
HXDLIN(  27)		_hx_tmp->set_visible(this->canAtlas->set_active(false));
HXLINE(  28)		this->canAtlas->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  29)		this->add(this->canAtlas);
HXLINE(  31)		this->explosion =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(x - ( (Float)(25) )),(y - ( (Float)(450) )),null());
HXLINE(  32)		 ::flixel::FlxSprite _hx_tmp1 = this->explosion;
HXDLIN(  32)		::String parentFolder = null();
HXDLIN(  32)		if ((HX_("spraypaintExplosionEZ",b9,a3,49,79).indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE(  32)			::haxe::Log_obj::trace(HX_("spraypaintExplosionEZ",b9,a3,49,79), ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder)->init(1,true))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            		}
HXDLIN(  32)		 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(HX_("spraypaintExplosionEZ",b9,a3,49,79),parentFolder,true);
HXDLIN(  32)		bool xmlExists = false;
HXDLIN(  32)		::String xml = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("spraypaintExplosionEZ",b9,a3,49,79)) + HX_(".xml",69,3e,c3,1e)));
HXDLIN(  32)		if (::sys::FileSystem_obj::exists(xml)) {
HXLINE(  32)			xmlExists = true;
            		}
HXDLIN(  32)		 ::Dynamic _hx_tmp2;
HXDLIN(  32)		if (xmlExists) {
HXLINE(  32)			_hx_tmp2 = ::sys::io::File_obj::getContent(xml);
            		}
            		else {
HXLINE(  32)			::String key = (HX_("images/",77,50,74,c1) + HX_("spraypaintExplosionEZ",b9,a3,49,79));
HXDLIN(  32)			::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(  32)			::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXDLIN(  32)			if (::hx::IsNotNull( str )) {
HXLINE(  32)				key = str;
            			}
HXDLIN(  32)			_hx_tmp2 = ::backend::Paths_obj::getPath((key + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder,null());
            		}
HXDLIN(  32)		_hx_tmp1->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded,_hx_tmp2));
HXLINE(  33)		this->explosion->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("explosion round 1 short0",80,3a,7c,38),24,false,null(),null());
HXLINE(  34)		this->explosion->animation->finishCallback =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE(  35)		 ::flixel::FlxSprite _hx_tmp3 = this->explosion;
HXDLIN(  35)		_hx_tmp3->set_visible(this->explosion->set_active(false));
HXLINE(  36)		this->explosion->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  37)		this->add(this->explosion);
            	}

Dynamic SpraycanAtlasSprite_obj::__CreateEmpty() { return new SpraycanAtlasSprite_obj; }

void *SpraycanAtlasSprite_obj::_hx_vtable = 0;

Dynamic SpraycanAtlasSprite_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SpraycanAtlasSprite_obj > _hx_result = new SpraycanAtlasSprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool SpraycanAtlasSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7749b4c0) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x288ce903) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x288ce903;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x7749b4c0;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void SpraycanAtlasSprite_obj::finishCanAnimation(){
            	HX_STACKFRAME(&_hx_pos_3ad34bcb66487319_43_finishCanAnimation)
HXDLIN(  43)		::String _hx_switch_0 = this->playingAnim;
            		if (  (_hx_switch_0==HX_("Can Shot",4a,1f,16,59)) ){
HXLINE(  48)			 ::flxanimate::PsychFlxAnimate _hx_tmp = this->canAtlas;
HXDLIN(  48)			_hx_tmp->set_visible(this->canAtlas->set_active(false));
HXLINE(  49)			this->currentState = ::states::stages::objects::SpraycanState_obj::WAITING_dyn();
HXLINE(  47)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==HX_("Can Start",12,30,29,a2)) ){
HXLINE(  46)			this->playHitPico();
HXDLIN(  46)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==HX_("Hit Pico",12,4e,e7,27)) ){
HXLINE(  51)			if (!(this->cutscene)) {
HXLINE(  51)				this->playHitExplosion();
            			}
HXLINE(  52)			 ::flxanimate::PsychFlxAnimate _hx_tmp1 = this->canAtlas;
HXDLIN(  52)			_hx_tmp1->set_visible(this->canAtlas->set_active(false));
HXLINE(  53)			this->currentState = ::states::stages::objects::SpraycanState_obj::WAITING_dyn();
HXLINE(  50)			goto _hx_goto_5;
            		}
            		_hx_goto_5:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SpraycanAtlasSprite_obj,finishCanAnimation,(void))

void SpraycanAtlasSprite_obj::playHitExplosion(){
            	HX_STACKFRAME(&_hx_pos_3ad34bcb66487319_58_playHitExplosion)
HXLINE(  59)		 ::flixel::FlxSprite _hx_tmp = this->explosion;
HXDLIN(  59)		_hx_tmp->set_visible(this->explosion->set_active(true));
HXLINE(  60)		this->explosion->animation->play(HX_("idle",14,a7,b3,45),true,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(SpraycanAtlasSprite_obj,playHitExplosion,(void))

void SpraycanAtlasSprite_obj::playCanStart(){
            	HX_STACKFRAME(&_hx_pos_3ad34bcb66487319_64_playCanStart)
HXLINE(  65)		this->playAnimation(HX_("Can Start",12,30,29,a2));
HXLINE(  66)		 ::flxanimate::PsychFlxAnimate _hx_tmp = this->canAtlas;
HXDLIN(  66)		_hx_tmp->set_visible(this->canAtlas->set_active(true));
HXLINE(  67)		this->currentState = ::states::stages::objects::SpraycanState_obj::ARCING_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SpraycanAtlasSprite_obj,playCanStart,(void))

void SpraycanAtlasSprite_obj::playCanShot(){
            	HX_STACKFRAME(&_hx_pos_3ad34bcb66487319_71_playCanShot)
HXLINE(  72)		this->playAnimation(HX_("Can Shot",4a,1f,16,59));
HXLINE(  73)		this->currentState = ::states::stages::objects::SpraycanState_obj::SHOT_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SpraycanAtlasSprite_obj,playCanShot,(void))

void SpraycanAtlasSprite_obj::playHitPico(){
            	HX_STACKFRAME(&_hx_pos_3ad34bcb66487319_77_playHitPico)
HXLINE(  78)		this->playAnimation(HX_("Hit Pico",12,4e,e7,27));
HXLINE(  79)		this->currentState = ::states::stages::objects::SpraycanState_obj::IMPACTED_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SpraycanAtlasSprite_obj,playHitPico,(void))

void SpraycanAtlasSprite_obj::playAnimation(::String name){
            	HX_STACKFRAME(&_hx_pos_3ad34bcb66487319_84_playAnimation)
HXLINE(  85)		this->canAtlas->anim->play(name,true,null(),null());
HXLINE(  86)		this->playingAnim = name;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SpraycanAtlasSprite_obj,playAnimation,(void))


::hx::ObjectPtr< SpraycanAtlasSprite_obj > SpraycanAtlasSprite_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
	::hx::ObjectPtr< SpraycanAtlasSprite_obj > __this = new SpraycanAtlasSprite_obj();
	__this->__construct(__o_x,__o_y);
	return __this;
}

::hx::ObjectPtr< SpraycanAtlasSprite_obj > SpraycanAtlasSprite_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
	SpraycanAtlasSprite_obj *__this = (SpraycanAtlasSprite_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SpraycanAtlasSprite_obj), true, "states.stages.objects.SpraycanAtlasSprite"));
	*(void **)__this = SpraycanAtlasSprite_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y);
	return __this;
}

SpraycanAtlasSprite_obj::SpraycanAtlasSprite_obj()
{
}

void SpraycanAtlasSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SpraycanAtlasSprite);
	HX_MARK_MEMBER_NAME(currentState,"currentState");
	HX_MARK_MEMBER_NAME(canAtlas,"canAtlas");
	HX_MARK_MEMBER_NAME(explosion,"explosion");
	HX_MARK_MEMBER_NAME(cutscene,"cutscene");
	HX_MARK_MEMBER_NAME(playingAnim,"playingAnim");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SpraycanAtlasSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(currentState,"currentState");
	HX_VISIT_MEMBER_NAME(canAtlas,"canAtlas");
	HX_VISIT_MEMBER_NAME(explosion,"explosion");
	HX_VISIT_MEMBER_NAME(cutscene,"cutscene");
	HX_VISIT_MEMBER_NAME(playingAnim,"playingAnim");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val SpraycanAtlasSprite_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"canAtlas") ) { return ::hx::Val( canAtlas ); }
		if (HX_FIELD_EQ(inName,"cutscene") ) { return ::hx::Val( cutscene ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"explosion") ) { return ::hx::Val( explosion ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"playCanShot") ) { return ::hx::Val( playCanShot_dyn() ); }
		if (HX_FIELD_EQ(inName,"playHitPico") ) { return ::hx::Val( playHitPico_dyn() ); }
		if (HX_FIELD_EQ(inName,"playingAnim") ) { return ::hx::Val( playingAnim ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentState") ) { return ::hx::Val( currentState ); }
		if (HX_FIELD_EQ(inName,"playCanStart") ) { return ::hx::Val( playCanStart_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"playAnimation") ) { return ::hx::Val( playAnimation_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"playHitExplosion") ) { return ::hx::Val( playHitExplosion_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"finishCanAnimation") ) { return ::hx::Val( finishCanAnimation_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SpraycanAtlasSprite_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"canAtlas") ) { canAtlas=inValue.Cast<  ::flxanimate::PsychFlxAnimate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cutscene") ) { cutscene=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"explosion") ) { explosion=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"playingAnim") ) { playingAnim=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentState") ) { currentState=inValue.Cast<  ::states::stages::objects::SpraycanState >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SpraycanAtlasSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("currentState",18,5b,17,cb));
	outFields->push(HX_("canAtlas",1b,8f,70,95));
	outFields->push(HX_("explosion",95,d3,a0,9e));
	outFields->push(HX_("cutscene",8a,1c,09,fa));
	outFields->push(HX_("playingAnim",9f,10,2a,fa));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SpraycanAtlasSprite_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::states::stages::objects::SpraycanState */ ,(int)offsetof(SpraycanAtlasSprite_obj,currentState),HX_("currentState",18,5b,17,cb)},
	{::hx::fsObject /*  ::flxanimate::PsychFlxAnimate */ ,(int)offsetof(SpraycanAtlasSprite_obj,canAtlas),HX_("canAtlas",1b,8f,70,95)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(SpraycanAtlasSprite_obj,explosion),HX_("explosion",95,d3,a0,9e)},
	{::hx::fsBool,(int)offsetof(SpraycanAtlasSprite_obj,cutscene),HX_("cutscene",8a,1c,09,fa)},
	{::hx::fsString,(int)offsetof(SpraycanAtlasSprite_obj,playingAnim),HX_("playingAnim",9f,10,2a,fa)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SpraycanAtlasSprite_obj_sStaticStorageInfo = 0;
#endif

static ::String SpraycanAtlasSprite_obj_sMemberFields[] = {
	HX_("currentState",18,5b,17,cb),
	HX_("canAtlas",1b,8f,70,95),
	HX_("explosion",95,d3,a0,9e),
	HX_("cutscene",8a,1c,09,fa),
	HX_("finishCanAnimation",c7,95,2f,1c),
	HX_("playHitExplosion",d6,22,24,76),
	HX_("playCanStart",46,b4,37,7e),
	HX_("playCanShot",96,1d,06,af),
	HX_("playHitPico",44,e1,38,24),
	HX_("playingAnim",9f,10,2a,fa),
	HX_("playAnimation",70,42,7a,e5),
	::String(null()) };

::hx::Class SpraycanAtlasSprite_obj::__mClass;

void SpraycanAtlasSprite_obj::__register()
{
	SpraycanAtlasSprite_obj _hx_dummy;
	SpraycanAtlasSprite_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.stages.objects.SpraycanAtlasSprite",a6,2e,93,69);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SpraycanAtlasSprite_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SpraycanAtlasSprite_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SpraycanAtlasSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SpraycanAtlasSprite_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace stages
} // end namespace objects
