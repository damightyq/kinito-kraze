// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_Achievements
#include <backend/Achievements.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_CoolUtil
#include <backend/CoolUtil.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_objects_Bar
#include <objects/Bar.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_states_AchievementsMenuState
#include <states/AchievementsMenuState.h>
#endif
#ifndef INCLUDED_states_MainMenuState
#include <states/MainMenuState.h>
#endif
#ifndef INCLUDED_states_ResetAchievementSubstate
#include <states/ResetAchievementSubstate.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_04e68d0d1b786c83_8_new,"states.AchievementsMenuState","new",0x8b29fbd4,"states.AchievementsMenuState.new","states/AchievementsMenuState.hx",8,0xe610951d)
HX_LOCAL_STACK_FRAME(_hx_pos_04e68d0d1b786c83_24_create,"states.AchievementsMenuState","create",0x93d2dc08,"states.AchievementsMenuState.create","states/AchievementsMenuState.hx",24,0xe610951d)
HX_LOCAL_STACK_FRAME(_hx_pos_04e68d0d1b786c83_132_makeAchievement,"states.AchievementsMenuState","makeAchievement",0xf1dd3295,"states.AchievementsMenuState.makeAchievement","states/AchievementsMenuState.hx",132,0xe610951d)
HX_LOCAL_STACK_FRAME(_hx_pos_04e68d0d1b786c83_149_update,"states.AchievementsMenuState","update",0x9ec8fb15,"states.AchievementsMenuState.update","states/AchievementsMenuState.hx",149,0xe610951d)
HX_LOCAL_STACK_FRAME(_hx_pos_04e68d0d1b786c83_246__changeSelection,"states.AchievementsMenuState","_changeSelection",0x6e899749,"states.AchievementsMenuState._changeSelection","states/AchievementsMenuState.hx",246,0xe610951d)
HX_LOCAL_STACK_FRAME(_hx_pos_04e68d0d1b786c83_216__changeSelection,"states.AchievementsMenuState","_changeSelection",0x6e899749,"states.AchievementsMenuState._changeSelection","states/AchievementsMenuState.hx",216,0xe610951d)
HX_LOCAL_STACK_FRAME(_hx_pos_04e68d0d1b786c83_232__changeSelection,"states.AchievementsMenuState","_changeSelection",0x6e899749,"states.AchievementsMenuState._changeSelection","states/AchievementsMenuState.hx",232,0xe610951d)
HX_LOCAL_STACK_FRAME(_hx_pos_04e68d0d1b786c83_233__changeSelection,"states.AchievementsMenuState","_changeSelection",0x6e899749,"states.AchievementsMenuState._changeSelection","states/AchievementsMenuState.hx",233,0xe610951d)
HX_LOCAL_STACK_FRAME(_hx_pos_04e68d0d1b786c83_146_sortByID,"states.AchievementsMenuState","sortByID",0x6bf223fc,"states.AchievementsMenuState.sortByID","states/AchievementsMenuState.hx",146,0xe610951d)
namespace states{

void AchievementsMenuState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_04e68d0d1b786c83_8_new)
HXLINE( 214)		this->barTween = null();
HXLINE( 148)		this->goingBack = false;
HXLINE(  21)		this->MAX_PER_ROW = 4;
HXLINE(  12)		this->options = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  10)		this->curSelected = 0;
HXLINE(   8)		super::__construct();
            	}

Dynamic AchievementsMenuState_obj::__CreateEmpty() { return new AchievementsMenuState_obj; }

void *AchievementsMenuState_obj::_hx_vtable = 0;

Dynamic AchievementsMenuState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AchievementsMenuState_obj > _hx_result = new AchievementsMenuState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AchievementsMenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7c795c9f) {
		if (inClassId<=(int)0x62817b24) {
			if (inClassId<=(int)0x53aaab8a) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x53aaab8a;
			} else {
				return inClassId==(int)0x62817b24;
			}
		} else {
			return inClassId==(int)0x7c795c9f;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7f34bcf4;
	}
}

void AchievementsMenuState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_04e68d0d1b786c83_24_create)
HXLINE(  25)		::backend::Paths_obj::clearStoredMemory();
HXLINE(  26)		::backend::Paths_obj::clearUnusedMemory();
HXLINE(  29)		::backend::DiscordClient_obj::changePresence(HX_("Achievements Menu",1b,7e,30,71),null(),null(),null(),null(),null());
HXLINE(  33)		{
HXLINE(  33)			::Dynamic map = ::backend::Achievements_obj::achievements;
HXDLIN(  33)			::Dynamic _g_map = map;
HXDLIN(  33)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN(  33)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  33)				::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  33)				 ::Dynamic _g_value = ::haxe::IMap_obj::get(_g_map,key);
HXDLIN(  33)				::String _g_key = key;
HXDLIN(  33)				::String achievement = _g_key;
HXDLIN(  33)				 ::Dynamic data = _g_value;
HXLINE(  34)				{
HXLINE(  35)					bool unlocked = ::backend::Achievements_obj::achievementsUnlocked->contains(achievement);
HXLINE(  36)					bool _hx_tmp;
HXDLIN(  36)					if (::hx::IsEq( data->__Field(HX_("hidden",6a,ff,95,4c),::hx::paccDynamic),true )) {
HXLINE(  36)						_hx_tmp = unlocked;
            					}
            					else {
HXLINE(  36)						_hx_tmp = true;
            					}
HXDLIN(  36)					if (_hx_tmp) {
HXLINE(  37)						::cpp::VirtualArray _hx_tmp1 = this->options;
HXDLIN(  37)						_hx_tmp1->push(this->makeAchievement(achievement,data,unlocked,( (::String)(data->__Field(HX_("mod",c2,16,53,00),::hx::paccDynamic)) )));
            					}
            				}
            			}
            		}
HXLINE(  40)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE(  41)		this->add(this->camFollow);
HXLINE(  43)		 ::flixel::FlxSprite menuBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  43)		 ::flixel::FlxSprite menuBG1 = menuBG->loadGraphic(::backend::Paths_obj::image(HX_("menuBGBlue",de,35,e3,1e),null(),null()),null(),null(),null(),null(),null());
HXLINE(  44)		menuBG1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  45)		menuBG1->setGraphicSize(::Std_obj::_hx_int((menuBG1->get_width() * ((Float)1.1))),null());
HXLINE(  46)		menuBG1->updateHitbox();
HXLINE(  47)		{
HXLINE(  47)			int axes = 17;
HXDLIN(  47)			bool _hx_tmp2;
HXDLIN(  47)			if ((axes != 1)) {
HXLINE(  47)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  47)				_hx_tmp2 = true;
            			}
HXDLIN(  47)			if (_hx_tmp2) {
HXLINE(  47)				int _hx_tmp3 = ::flixel::FlxG_obj::width;
HXDLIN(  47)				menuBG1->set_x(((( (Float)(_hx_tmp3) ) - menuBG1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  47)			bool _hx_tmp4;
HXDLIN(  47)			if ((axes != 16)) {
HXLINE(  47)				_hx_tmp4 = (axes == 17);
            			}
            			else {
HXLINE(  47)				_hx_tmp4 = true;
            			}
HXDLIN(  47)			if (_hx_tmp4) {
HXLINE(  47)				int _hx_tmp5 = ::flixel::FlxG_obj::height;
HXDLIN(  47)				menuBG1->set_y(((( (Float)(_hx_tmp5) ) - menuBG1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  48)		{
HXLINE(  48)			 ::flixel::math::FlxBasePoint this1 = menuBG1->scrollFactor;
HXDLIN(  48)			this1->set_x(( (Float)(0) ));
HXDLIN(  48)			this1->set_y(( (Float)(0) ));
            		}
HXLINE(  49)		this->add(menuBG1);
HXLINE(  51)		this->grpOptions =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  52)		this->grpOptions->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  54)		this->options->sort(::states::AchievementsMenuState_obj::sortByID_dyn());
HXLINE(  55)		{
HXLINE(  55)			int _g = 0;
HXDLIN(  55)			::cpp::VirtualArray _g1 = this->options;
HXDLIN(  55)			while((_g < _g1->get_length())){
HXLINE(  55)				 ::Dynamic option = _g1->__get(_g);
HXDLIN(  55)				_g = (_g + 1);
HXLINE(  57)				bool hasAntialias = ::backend::ClientPrefs_obj::data->antialiasing;
HXLINE(  58)				 ::flixel::graphics::FlxGraphic graphic = null();
HXLINE(  59)				if (( (bool)(option->__Field(HX_("unlocked",23,34,0e,5c),::hx::paccDynamic)) )) {
HXLINE(  61)					::backend::Mods_obj::currentModDirectory = ( (::String)(option->__Field(HX_("mod",c2,16,53,00),::hx::paccDynamic)) );
HXLINE(  62)					::String image = (HX_("achievements/",8b,5e,c1,17) + ::Std_obj::string( ::Dynamic(option->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic))));
HXLINE(  63)					if (::backend::Paths_obj::fileExists(((HX_("images/",77,50,74,c1) + image) + HX_("-pixel.png",f4,c0,84,ba)),HX_("IMAGE",3b,57,57,3b),null(),null())) {
HXLINE(  65)						graphic = ::backend::Paths_obj::image(((HX_("",00,00,00,00) + image) + HX_("-pixel",39,03,b3,c0)),null(),null());
HXLINE(  66)						hasAntialias = false;
            					}
            					else {
HXLINE(  68)						graphic = ::backend::Paths_obj::image(image,null(),null());
            					}
HXLINE(  70)					if (::hx::IsNull( graphic )) {
HXLINE(  70)						graphic = ::backend::Paths_obj::image(HX_("unknownMod",58,fd,4e,7b),null(),null());
            					}
            				}
            				else {
HXLINE(  72)					graphic = ::backend::Paths_obj::image(HX_("achievements/lockedachievement",ba,b8,0b,f8),null(),null());
            				}
HXLINE(  74)				 ::flixel::FlxSprite spr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(::Math_obj::floor((( (Float)(this->grpOptions->group->members->get_length()) ) / ( (Float)(this->MAX_PER_ROW) ))) * 180),null())->loadGraphic(graphic,null(),null(),null(),null(),null());
HXLINE(  75)				spr->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  76)				{
HXLINE(  76)					int axes1 = 1;
HXDLIN(  76)					bool _hx_tmp6;
HXDLIN(  76)					if ((axes1 != 1)) {
HXLINE(  76)						_hx_tmp6 = (axes1 == 17);
            					}
            					else {
HXLINE(  76)						_hx_tmp6 = true;
            					}
HXDLIN(  76)					if (_hx_tmp6) {
HXLINE(  76)						int _hx_tmp7 = ::flixel::FlxG_obj::width;
HXDLIN(  76)						spr->set_x(((( (Float)(_hx_tmp7) ) - spr->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(  76)					bool _hx_tmp8;
HXDLIN(  76)					if ((axes1 != 16)) {
HXLINE(  76)						_hx_tmp8 = (axes1 == 17);
            					}
            					else {
HXLINE(  76)						_hx_tmp8 = true;
            					}
HXDLIN(  76)					if (_hx_tmp8) {
HXLINE(  76)						int _hx_tmp9 = ::flixel::FlxG_obj::height;
HXDLIN(  76)						spr->set_y(((( (Float)(_hx_tmp9) ) - spr->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(  77)				Float spr1 = spr->x;
HXDLIN(  77)				Float _hx_tmp10 = (( (Float)(180) ) * (( (Float)(::hx::Mod(this->grpOptions->group->members->get_length(),this->MAX_PER_ROW)) ) - (( (Float)(this->MAX_PER_ROW) ) / ( (Float)(2) ))));
HXDLIN(  77)				spr->set_x((spr1 + ((_hx_tmp10 + (spr->get_width() / ( (Float)(2) ))) + 15)));
HXLINE(  78)				spr->ID = this->grpOptions->group->members->get_length();
HXLINE(  79)				spr->set_antialiasing(hasAntialias);
HXLINE(  80)				this->grpOptions->add(spr).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
HXLINE(  82)		::backend::Mods_obj::loadTopMod();
HXLINE(  84)		 ::flixel::FlxSprite box =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,-30,null())->makeGraphic(1,1,-16777216,null(),null());
HXLINE(  85)		{
HXLINE(  85)			 ::flixel::math::FlxBasePoint this2 = box->scale;
HXDLIN(  85)			Float x = (this->grpOptions->get_width() + 60);
HXDLIN(  85)			Float y = (this->grpOptions->get_height() + 60);
HXDLIN(  85)			this2->set_x(x);
HXDLIN(  85)			this2->set_y(y);
            		}
HXLINE(  86)		box->updateHitbox();
HXLINE(  87)		box->set_alpha(((Float)0.6));
HXLINE(  88)		box->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  89)		{
HXLINE(  89)			int axes2 = 1;
HXDLIN(  89)			bool _hx_tmp11;
HXDLIN(  89)			if ((axes2 != 1)) {
HXLINE(  89)				_hx_tmp11 = (axes2 == 17);
            			}
            			else {
HXLINE(  89)				_hx_tmp11 = true;
            			}
HXDLIN(  89)			if (_hx_tmp11) {
HXLINE(  89)				int _hx_tmp12 = ::flixel::FlxG_obj::width;
HXDLIN(  89)				box->set_x(((( (Float)(_hx_tmp12) ) - box->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  89)			bool _hx_tmp13;
HXDLIN(  89)			if ((axes2 != 16)) {
HXLINE(  89)				_hx_tmp13 = (axes2 == 17);
            			}
            			else {
HXLINE(  89)				_hx_tmp13 = true;
            			}
HXDLIN(  89)			if (_hx_tmp13) {
HXLINE(  89)				int _hx_tmp14 = ::flixel::FlxG_obj::height;
HXDLIN(  89)				box->set_y(((( (Float)(_hx_tmp14) ) - box->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  90)		this->add(box);
HXLINE(  91)		this->add(this->grpOptions);
HXLINE(  93)		 ::flixel::FlxSprite box1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,570,null())->makeGraphic(1,1,-16777216,null(),null());
HXLINE(  94)		{
HXLINE(  94)			 ::flixel::math::FlxBasePoint this3 = box1->scale;
HXDLIN(  94)			Float y1 = (( (Float)(::flixel::FlxG_obj::height) ) - box1->y);
HXDLIN(  94)			this3->set_x(( (Float)(::flixel::FlxG_obj::width) ));
HXDLIN(  94)			this3->set_y(y1);
            		}
HXLINE(  95)		box1->updateHitbox();
HXLINE(  96)		box1->set_alpha(((Float)0.6));
HXLINE(  97)		{
HXLINE(  97)			 ::flixel::math::FlxBasePoint this4 = box1->scrollFactor;
HXDLIN(  97)			this4->set_x(( (Float)(0) ));
HXDLIN(  97)			this4->set_y(( (Float)(0) ));
            		}
HXLINE(  98)		this->add(box1);
HXLINE( 100)		this->nameText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,50,(box1->y + 10),(::flixel::FlxG_obj::width - 100),HX_("",00,00,00,00),32,null());
HXLINE( 101)		 ::flixel::text::FlxText _hx_tmp15 = this->nameText;
HXDLIN( 101)		::String key1 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 101)		::Dynamic this5 = ::backend::Language_obj::phrases;
HXDLIN( 101)		::String str = ( ( ::haxe::ds::StringMap)(this5) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN( 101)		if (::hx::IsNotNull( str )) {
HXLINE(  82)			key1 = str;
            		}
HXLINE( 101)		::String folderKey = key1;
HXDLIN( 101)		::String file = ::backend::Paths_obj::modFolders(folderKey);
HXDLIN( 101)		::String _hx_tmp16;
HXDLIN( 101)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 101)			_hx_tmp16 = file;
            		}
            		else {
HXLINE( 101)			_hx_tmp16 = (HX_("assets/",4c,2a,dc,36) + folderKey);
            		}
HXDLIN( 101)		_hx_tmp15->setFormat(_hx_tmp16,32,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 102)		{
HXLINE( 102)			 ::flixel::math::FlxBasePoint this6 = this->nameText->scrollFactor;
HXDLIN( 102)			this6->set_x(( (Float)(0) ));
HXDLIN( 102)			this6->set_y(( (Float)(0) ));
            		}
HXLINE( 104)		this->descText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,50,(this->nameText->y + 38),(::flixel::FlxG_obj::width - 100),HX_("",00,00,00,00),24,null());
HXLINE( 105)		 ::flixel::text::FlxText _hx_tmp17 = this->descText;
HXDLIN( 105)		::String key2 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 105)		::Dynamic this7 = ::backend::Language_obj::phrases;
HXDLIN( 105)		::String str1 = ( ( ::haxe::ds::StringMap)(this7) )->get_string(::StringTools_obj::trim(key2).toLowerCase());
HXDLIN( 105)		if (::hx::IsNotNull( str1 )) {
HXLINE(  82)			key2 = str1;
            		}
HXLINE( 105)		::String folderKey1 = key2;
HXDLIN( 105)		::String file1 = ::backend::Paths_obj::modFolders(folderKey1);
HXDLIN( 105)		::String _hx_tmp18;
HXDLIN( 105)		if (::sys::FileSystem_obj::exists(file1)) {
HXLINE( 105)			_hx_tmp18 = file1;
            		}
            		else {
HXLINE( 105)			_hx_tmp18 = (HX_("assets/",4c,2a,dc,36) + folderKey1);
            		}
HXDLIN( 105)		_hx_tmp17->setFormat(_hx_tmp18,24,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 106)		{
HXLINE( 106)			 ::flixel::math::FlxBasePoint this8 = this->descText->scrollFactor;
HXDLIN( 106)			this8->set_x(( (Float)(0) ));
HXDLIN( 106)			this8->set_y(( (Float)(0) ));
            		}
HXLINE( 108)		this->progressBar =  ::objects::Bar_obj::__alloc( HX_CTX ,( (Float)(0) ),(this->descText->y + 52),null(),null(),null(),null());
HXLINE( 109)		{
HXLINE( 109)			 ::objects::Bar _this = this->progressBar;
HXDLIN( 109)			int axes3 = 1;
HXDLIN( 109)			bool _hx_tmp19;
HXDLIN( 109)			if ((axes3 != 1)) {
HXLINE( 109)				_hx_tmp19 = (axes3 == 17);
            			}
            			else {
HXLINE( 109)				_hx_tmp19 = true;
            			}
HXDLIN( 109)			if (_hx_tmp19) {
HXLINE( 109)				int _hx_tmp20 = ::flixel::FlxG_obj::width;
HXDLIN( 109)				_this->set_x(((( (Float)(_hx_tmp20) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 109)			bool _hx_tmp21;
HXDLIN( 109)			if ((axes3 != 16)) {
HXLINE( 109)				_hx_tmp21 = (axes3 == 17);
            			}
            			else {
HXLINE( 109)				_hx_tmp21 = true;
            			}
HXDLIN( 109)			if (_hx_tmp21) {
HXLINE( 109)				int _hx_tmp22 = ::flixel::FlxG_obj::height;
HXDLIN( 109)				_this->set_y(((( (Float)(_hx_tmp22) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 110)		{
HXLINE( 110)			 ::flixel::math::FlxBasePoint this9 = this->progressBar->scrollFactor;
HXDLIN( 110)			this9->set_x(( (Float)(0) ));
HXDLIN( 110)			this9->set_y(( (Float)(0) ));
            		}
HXLINE( 111)		this->progressBar->enabled = false;
HXLINE( 113)		this->progressTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,50,(this->progressBar->y - ( (Float)(6) )),(::flixel::FlxG_obj::width - 100),HX_("",00,00,00,00),32,null());
HXLINE( 114)		 ::flixel::text::FlxText _hx_tmp23 = this->progressTxt;
HXDLIN( 114)		::String key3 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 114)		::Dynamic this10 = ::backend::Language_obj::phrases;
HXDLIN( 114)		::String str2 = ( ( ::haxe::ds::StringMap)(this10) )->get_string(::StringTools_obj::trim(key3).toLowerCase());
HXDLIN( 114)		if (::hx::IsNotNull( str2 )) {
HXLINE(  82)			key3 = str2;
            		}
HXLINE( 114)		::String folderKey2 = key3;
HXDLIN( 114)		::String file2 = ::backend::Paths_obj::modFolders(folderKey2);
HXDLIN( 114)		::String _hx_tmp24;
HXDLIN( 114)		if (::sys::FileSystem_obj::exists(file2)) {
HXLINE( 114)			_hx_tmp24 = file2;
            		}
            		else {
HXLINE( 114)			_hx_tmp24 = (HX_("assets/",4c,2a,dc,36) + folderKey2);
            		}
HXDLIN( 114)		_hx_tmp23->setFormat(_hx_tmp24,32,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 115)		{
HXLINE( 115)			 ::flixel::math::FlxBasePoint this11 = this->progressTxt->scrollFactor;
HXDLIN( 115)			this11->set_x(( (Float)(0) ));
HXDLIN( 115)			this11->set_y(( (Float)(0) ));
            		}
HXLINE( 116)		this->progressTxt->set_borderSize(( (Float)(2) ));
HXLINE( 118)		this->add(this->progressBar);
HXLINE( 119)		this->add(this->progressTxt);
HXLINE( 120)		this->add(this->descText);
HXLINE( 121)		this->add(this->nameText);
HXLINE( 123)		this->_changeSelection();
HXLINE( 124)		this->super::create();
HXLINE( 126)		::flixel::FlxG_obj::camera->follow(this->camFollow,null(),((Float)0.15));
HXLINE( 127)		::flixel::FlxG_obj::camera->scroll->set_y(( (Float)(-(::flixel::FlxG_obj::height)) ));
            	}


 ::Dynamic AchievementsMenuState_obj::makeAchievement(::String achievement, ::Dynamic data,bool unlocked,::String mod){
            	HX_GC_STACKFRAME(&_hx_pos_04e68d0d1b786c83_132_makeAchievement)
HXLINE( 134)		::String _hx_tmp;
HXDLIN( 134)		if (unlocked) {
HXLINE( 134)			::String key = (HX_("achievement_",10,a1,6b,86) + achievement);
HXDLIN( 134)			::String defaultPhrase = ( (::String)(data->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
HXDLIN( 134)			::cpp::VirtualArray values = null();
HXDLIN( 134)			::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 134)			 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN( 134)			::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(key,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN( 134)			if (::hx::IsNull( str )) {
HXLINE(  62)				str = defaultPhrase;
            			}
HXLINE( 134)			if (::hx::IsNull( str )) {
HXLINE(  68)				str = key;
            			}
HXLINE( 134)			if (::hx::IsNotNull( values )) {
HXLINE( 134)				int _g_current = 0;
HXDLIN( 134)				::cpp::VirtualArray _g_array = values;
HXDLIN( 134)				while((_g_current < _g_array->get_length())){
HXLINE( 134)					 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN( 134)					_g_current = (_g_current + 1);
HXDLIN( 134)					int _g_key = (_g_current - 1);
HXDLIN( 134)					int num = _g_key;
HXDLIN( 134)					 ::Dynamic value = _g_value;
HXLINE(  72)					str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            				}
            			}
HXLINE( 134)			_hx_tmp = str;
            		}
            		else {
HXLINE( 134)			_hx_tmp = HX_("???",1f,05,30,00);
            		}
HXLINE( 135)		::String key1 = (HX_("description_",e3,d3,4a,da) + achievement);
HXDLIN( 135)		::String defaultPhrase1 = ( (::String)(data->__Field(HX_("description",fc,08,1d,5f),::hx::paccDynamic)) );
HXDLIN( 135)		::cpp::VirtualArray values1 = null();
HXDLIN( 135)		::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN( 135)		 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN( 135)		::String str1 = ( ( ::haxe::ds::StringMap)(this2) )->get_string(::StringTools_obj::trim(hideChars1->replace(::StringTools_obj::replace(key1,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN( 135)		if (::hx::IsNull( str1 )) {
HXLINE(  62)			str1 = defaultPhrase1;
            		}
HXLINE( 135)		if (::hx::IsNull( str1 )) {
HXLINE(  68)			str1 = key1;
            		}
HXLINE( 135)		if (::hx::IsNotNull( values1 )) {
HXLINE( 135)			int _g_current1 = 0;
HXDLIN( 135)			::cpp::VirtualArray _g_array1 = values1;
HXDLIN( 135)			while((_g_current1 < _g_array1->get_length())){
HXLINE( 135)				 ::Dynamic _g_value1 = _g_array1->__get(_g_current1);
HXDLIN( 135)				_g_current1 = (_g_current1 + 1);
HXDLIN( 135)				int _g_key1 = (_g_current1 - 1);
HXDLIN( 135)				int num1 = _g_key1;
HXDLIN( 135)				 ::Dynamic value1 = _g_value1;
HXLINE(  72)				str1 = ::StringTools_obj::replace(str1,((HX_("{",7b,00,00,00) + (num1 + 1)) + HX_("}",7d,00,00,00)),( (::String)(value1) ));
            			}
            		}
HXLINE( 136)		Float _hx_tmp1;
HXDLIN( 136)		if (::hx::IsGreater( data->__Field(HX_("maxScore",0e,c6,f6,22),::hx::paccDynamic),0 )) {
HXLINE( 136)			_hx_tmp1 = ::backend::Achievements_obj::getScore(achievement);
            		}
            		else {
HXLINE( 136)			_hx_tmp1 = ( (Float)(0) );
            		}
HXLINE( 137)		 ::Dynamic _hx_tmp2;
HXDLIN( 137)		if (::hx::IsGreater( data->__Field(HX_("maxScore",0e,c6,f6,22),::hx::paccDynamic),0 )) {
HXLINE( 137)			_hx_tmp2 = data->__Field(HX_("maxScore",0e,c6,f6,22),::hx::paccDynamic);
            		}
            		else {
HXLINE( 137)			_hx_tmp2 = 0;
            		}
HXLINE( 138)		 ::Dynamic _hx_tmp3;
HXDLIN( 138)		if (::hx::IsGreater( data->__Field(HX_("maxScore",0e,c6,f6,22),::hx::paccDynamic),0 )) {
HXLINE( 138)			_hx_tmp3 = data->__Field(HX_("maxDecimals",86,55,30,88),::hx::paccDynamic);
            		}
            		else {
HXLINE( 138)			_hx_tmp3 = 0;
            		}
HXLINE( 132)		return  ::Dynamic(::hx::Anon_obj::Create(9)
            			->setFixed(0,HX_("maxProgress",71,02,f1,fb),_hx_tmp2)
            			->setFixed(1,HX_("ID",db,3f,00,00), ::Dynamic(data->__Field(HX_("ID",db,3f,00,00),::hx::paccDynamic)))
            			->setFixed(2,HX_("mod",c2,16,53,00),mod)
            			->setFixed(3,HX_("curProgress",4d,b9,69,07),_hx_tmp1)
            			->setFixed(4,HX_("decProgress",8f,7f,7b,27),_hx_tmp3)
            			->setFixed(5,HX_("displayName",ad,11,f2,30),_hx_tmp)
            			->setFixed(6,HX_("name",4b,72,ff,48),achievement)
            			->setFixed(7,HX_("unlocked",23,34,0e,5c),unlocked)
            			->setFixed(8,HX_("description",fc,08,1d,5f),str1));
            	}


HX_DEFINE_DYNAMIC_FUNC4(AchievementsMenuState_obj,makeAchievement,return )

void AchievementsMenuState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_04e68d0d1b786c83_149_update)
HXLINE( 150)		bool _hx_tmp;
HXDLIN( 150)		if (!(this->goingBack)) {
HXLINE( 150)			_hx_tmp = (this->options->get_length() > 1);
            		}
            		else {
HXLINE( 150)			_hx_tmp = false;
            		}
HXDLIN( 150)		if (_hx_tmp) {
HXLINE( 152)			int add = 0;
HXLINE( 153)			if (this->get_controls()->get_UI_LEFT_P()) {
HXLINE( 153)				add = -1;
            			}
            			else {
HXLINE( 154)				if (this->get_controls()->get_UI_RIGHT_P()) {
HXLINE( 154)					add = 1;
            				}
            			}
HXLINE( 156)			if ((add != 0)) {
HXLINE( 158)				int oldRow = ::Math_obj::floor((( (Float)(this->curSelected) ) / ( (Float)(this->MAX_PER_ROW) )));
HXLINE( 159)				int rowSize = ::Std_obj::_hx_int(::Math_obj::min(( (Float)(this->MAX_PER_ROW) ),( (Float)((this->options->get_length() - (oldRow * this->MAX_PER_ROW))) )));
HXLINE( 161)				 ::states::AchievementsMenuState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 161)				_hx_tmp1->curSelected = (_hx_tmp1->curSelected + add);
HXLINE( 162)				int curRow = ::Math_obj::floor((( (Float)(this->curSelected) ) / ( (Float)(this->MAX_PER_ROW) )));
HXLINE( 163)				if ((this->curSelected >= this->options->get_length())) {
HXLINE( 163)					curRow = (curRow + 1);
            				}
HXLINE( 165)				if ((curRow != oldRow)) {
HXLINE( 167)					if ((curRow < oldRow)) {
HXLINE( 167)						 ::states::AchievementsMenuState _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 167)						_hx_tmp2->curSelected = (_hx_tmp2->curSelected + rowSize);
            					}
            					else {
HXLINE( 168)						 ::states::AchievementsMenuState _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 168)						_hx_tmp3->curSelected = (_hx_tmp3->curSelected - rowSize);
HXDLIN( 168)						this->curSelected = _hx_tmp3->curSelected;
            					}
            				}
HXLINE( 170)				this->_changeSelection();
            			}
HXLINE( 173)			if ((this->options->get_length() > this->MAX_PER_ROW)) {
HXLINE( 175)				int add1 = 0;
HXLINE( 176)				if (this->get_controls()->get_UI_UP_P()) {
HXLINE( 176)					add1 = -1;
            				}
            				else {
HXLINE( 177)					if (this->get_controls()->get_UI_DOWN_P()) {
HXLINE( 177)						add1 = 1;
            					}
            				}
HXLINE( 179)				if ((add1 != 0)) {
HXLINE( 181)					int diff = (this->curSelected - (::Math_obj::floor((( (Float)(this->curSelected) ) / ( (Float)(this->MAX_PER_ROW) ))) * this->MAX_PER_ROW));
HXLINE( 182)					 ::states::AchievementsMenuState _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 182)					_hx_tmp4->curSelected = (_hx_tmp4->curSelected + (add1 * this->MAX_PER_ROW));
HXLINE( 184)					if ((this->curSelected < 0)) {
HXLINE( 186)						 ::states::AchievementsMenuState _hx_tmp5 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 186)						_hx_tmp5->curSelected = (_hx_tmp5->curSelected + (::Math_obj::ceil((( (Float)(this->options->get_length()) ) / ( (Float)(this->MAX_PER_ROW) ))) * this->MAX_PER_ROW));
HXLINE( 187)						if ((this->curSelected >= this->options->get_length())) {
HXLINE( 187)							 ::states::AchievementsMenuState _hx_tmp6 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 187)							_hx_tmp6->curSelected = (_hx_tmp6->curSelected - this->MAX_PER_ROW);
            						}
            					}
HXLINE( 190)					if ((this->curSelected >= this->options->get_length())) {
HXLINE( 192)						this->curSelected = diff;
            					}
HXLINE( 196)					this->_changeSelection();
            				}
            			}
HXLINE( 200)			bool _hx_tmp7;
HXDLIN( 200)			if (this->get_controls()->get_RESET()) {
HXLINE( 200)				if (!(( (bool)(this->options->__get(this->curSelected)->__Field(HX_("unlocked",23,34,0e,5c),::hx::paccDynamic)) ))) {
HXLINE( 200)					_hx_tmp7 = ::hx::IsGreater( this->options->__get(this->curSelected)->__Field(HX_("curProgress",4d,b9,69,07),::hx::paccDynamic),0 );
            				}
            				else {
HXLINE( 200)					_hx_tmp7 = true;
            				}
            			}
            			else {
HXLINE( 200)				_hx_tmp7 = false;
            			}
HXDLIN( 200)			if (_hx_tmp7) {
HXLINE( 202)				this->openSubState( ::states::ResetAchievementSubstate_obj::__alloc( HX_CTX ));
            			}
            		}
HXLINE( 206)		if (this->get_controls()->get_BACK()) {
HXLINE( 207)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp8 = ::flixel::FlxG_obj::sound;
HXDLIN( 207)			_hx_tmp8->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("cancelMenu",39,a4,43,b7)),null(),true,null()),null(),null(),null(),null(),null());
HXLINE( 208)			::backend::MusicBeatState_obj::switchState( ::states::MainMenuState_obj::__alloc( HX_CTX ));
HXLINE( 209)			this->goingBack = true;
            		}
HXLINE( 211)		this->super::update(elapsed);
            	}


void AchievementsMenuState_obj::_changeSelection(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::AchievementsMenuState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_04e68d0d1b786c83_246__changeSelection)
HXLINE( 247)			spr->set_alpha(((Float)0.6));
HXLINE( 248)			if ((spr->ID == _gthis->curSelected)) {
HXLINE( 248)				spr->set_alpha(( (Float)(1) ));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_04e68d0d1b786c83_216__changeSelection)
HXDLIN( 216)		 ::states::AchievementsMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 217)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 217)		_hx_tmp->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("scrollMenu",4c,d4,18,06)),null(),true,null()),null(),null(),null(),null(),null());
HXLINE( 218)		bool hasProgress = ::hx::IsGreater( this->options->__get(this->curSelected)->__Field(HX_("maxProgress",71,02,f1,fb),::hx::paccDynamic),0 );
HXLINE( 219)		this->nameText->set_text(( (::String)(this->options->__get(this->curSelected)->__Field(HX_("displayName",ad,11,f2,30),::hx::paccDynamic)) ));
HXLINE( 220)		this->descText->set_text(( (::String)(this->options->__get(this->curSelected)->__Field(HX_("description",fc,08,1d,5f),::hx::paccDynamic)) ));
HXLINE( 221)		 ::flixel::text::FlxText _hx_tmp1 = this->progressTxt;
HXDLIN( 221)		_hx_tmp1->set_visible(this->progressBar->set_visible(hasProgress));
HXLINE( 223)		if (::hx::IsNotNull( this->barTween )) {
HXLINE( 223)			this->barTween->cancel();
            		}
HXLINE( 225)		if (hasProgress) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::AchievementsMenuState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween twn){
            				HX_STACKFRAME(&_hx_pos_04e68d0d1b786c83_232__changeSelection)
HXLINE( 232)				_gthis->progressBar->updateBar();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::AchievementsMenuState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween twn){
            				HX_STACKFRAME(&_hx_pos_04e68d0d1b786c83_233__changeSelection)
HXLINE( 233)				_gthis->progressBar->updateBar();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 227)			Float val1 = ( (Float)(this->options->__get(this->curSelected)->__Field(HX_("curProgress",4d,b9,69,07),::hx::paccDynamic)) );
HXLINE( 228)			Float val2 = ( (Float)(this->options->__get(this->curSelected)->__Field(HX_("maxProgress",71,02,f1,fb),::hx::paccDynamic)) );
HXLINE( 229)			 ::flixel::text::FlxText _hx_tmp2 = this->progressTxt;
HXDLIN( 229)			::String _hx_tmp3 = (::backend::CoolUtil_obj::floorDecimal(val1,( (int)(this->options->__get(this->curSelected)->__Field(HX_("decProgress",8f,7f,7b,27),::hx::paccDynamic)) )) + HX_(" / ",31,71,18,00));
HXDLIN( 229)			_hx_tmp2->set_text((_hx_tmp3 + ::backend::CoolUtil_obj::floorDecimal(val2,( (int)(this->options->__get(this->curSelected)->__Field(HX_("decProgress",8f,7f,7b,27),::hx::paccDynamic)) ))));
HXLINE( 231)			this->barTween = ::flixel::tweens::FlxTween_obj::tween(this->progressBar, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("percent",c5,aa,da,78),((val1 / val2) * ( (Float)(100) )))),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))
            				->setFixed(2,HX_("onUpdate",88,7c,b2,66), ::Dynamic(new _hx_Closure_1(_gthis)))));
            		}
            		else {
HXLINE( 236)			this->progressBar->set_percent(( (Float)(0) ));
            		}
HXLINE( 238)		int maxRows = ::Math_obj::floor((( (Float)(this->grpOptions->group->members->get_length()) ) / ( (Float)(this->MAX_PER_ROW) )));
HXLINE( 239)		if ((maxRows > 0)) {
HXLINE( 241)			Float camY = (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) ));
HXDLIN( 241)			Float camY1 = (( (Float)(::Math_obj::floor((( (Float)(this->curSelected) ) / ( (Float)(this->MAX_PER_ROW) )))) ) / ( (Float)(maxRows) ));
HXDLIN( 241)			Float camY2 = this->grpOptions->get_height();
HXDLIN( 241)			Float camY3 = ((camY + (camY1 * ::Math_obj::max(( (Float)(0) ),((camY2 - (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) ))) - ( (Float)(50) ))))) - ( (Float)(100) ));
HXLINE( 242)			this->camFollow->setPosition(0,camY3);
            		}
            		else {
HXLINE( 244)			 ::flixel::FlxObject _hx_tmp4 = this->camFollow;
HXDLIN( 244)			_hx_tmp4->setPosition(0,(Dynamic( this->grpOptions->group->members->__get(this->curSelected)).StaticCast<  ::flixel::FlxSprite >()->getGraphicMidpoint(null())->y - ( (Float)(100) )));
            		}
HXLINE( 246)		this->grpOptions->group->forEach( ::Dynamic(new _hx_Closure_2(_gthis)),false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(AchievementsMenuState_obj,_changeSelection,(void))

int AchievementsMenuState_obj::sortByID( ::Dynamic Obj1, ::Dynamic Obj2){
            	HX_STACKFRAME(&_hx_pos_04e68d0d1b786c83_146_sortByID)
HXDLIN( 146)		Float Value1 = ( (Float)(Obj1->__Field(HX_("ID",db,3f,00,00),::hx::paccDynamic)) );
HXDLIN( 146)		Float Value2 = ( (Float)(Obj2->__Field(HX_("ID",db,3f,00,00),::hx::paccDynamic)) );
HXDLIN( 146)		int result = 0;
HXDLIN( 146)		if ((Value1 < Value2)) {
HXDLIN( 146)			result = -1;
            		}
            		else {
HXDLIN( 146)			if ((Value1 > Value2)) {
HXDLIN( 146)				result = 1;
            			}
            		}
HXDLIN( 146)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AchievementsMenuState_obj,sortByID,return )


::hx::ObjectPtr< AchievementsMenuState_obj > AchievementsMenuState_obj::__new() {
	::hx::ObjectPtr< AchievementsMenuState_obj > __this = new AchievementsMenuState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< AchievementsMenuState_obj > AchievementsMenuState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	AchievementsMenuState_obj *__this = (AchievementsMenuState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AchievementsMenuState_obj), true, "states.AchievementsMenuState"));
	*(void **)__this = AchievementsMenuState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

AchievementsMenuState_obj::AchievementsMenuState_obj()
{
}

void AchievementsMenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AchievementsMenuState);
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(options,"options");
	HX_MARK_MEMBER_NAME(grpOptions,"grpOptions");
	HX_MARK_MEMBER_NAME(nameText,"nameText");
	HX_MARK_MEMBER_NAME(descText,"descText");
	HX_MARK_MEMBER_NAME(progressTxt,"progressTxt");
	HX_MARK_MEMBER_NAME(progressBar,"progressBar");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(MAX_PER_ROW,"MAX_PER_ROW");
	HX_MARK_MEMBER_NAME(goingBack,"goingBack");
	HX_MARK_MEMBER_NAME(barTween,"barTween");
	 ::backend::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AchievementsMenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(options,"options");
	HX_VISIT_MEMBER_NAME(grpOptions,"grpOptions");
	HX_VISIT_MEMBER_NAME(nameText,"nameText");
	HX_VISIT_MEMBER_NAME(descText,"descText");
	HX_VISIT_MEMBER_NAME(progressTxt,"progressTxt");
	HX_VISIT_MEMBER_NAME(progressBar,"progressBar");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(MAX_PER_ROW,"MAX_PER_ROW");
	HX_VISIT_MEMBER_NAME(goingBack,"goingBack");
	HX_VISIT_MEMBER_NAME(barTween,"barTween");
	 ::backend::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val AchievementsMenuState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { return ::hx::Val( options ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"nameText") ) { return ::hx::Val( nameText ); }
		if (HX_FIELD_EQ(inName,"descText") ) { return ::hx::Val( descText ); }
		if (HX_FIELD_EQ(inName,"barTween") ) { return ::hx::Val( barTween ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"goingBack") ) { return ::hx::Val( goingBack ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpOptions") ) { return ::hx::Val( grpOptions ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		if (HX_FIELD_EQ(inName,"progressTxt") ) { return ::hx::Val( progressTxt ); }
		if (HX_FIELD_EQ(inName,"progressBar") ) { return ::hx::Val( progressBar ); }
		if (HX_FIELD_EQ(inName,"MAX_PER_ROW") ) { return ::hx::Val( MAX_PER_ROW ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"makeAchievement") ) { return ::hx::Val( makeAchievement_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_changeSelection") ) { return ::hx::Val( _changeSelection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool AchievementsMenuState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"sortByID") ) { outValue = sortByID_dyn(); return true; }
	}
	return false;
}

::hx::Val AchievementsMenuState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { options=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"nameText") ) { nameText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"descText") ) { descText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"barTween") ) { barTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"goingBack") ) { goingBack=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpOptions") ) { grpOptions=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"progressTxt") ) { progressTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"progressBar") ) { progressBar=inValue.Cast<  ::objects::Bar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MAX_PER_ROW") ) { MAX_PER_ROW=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AchievementsMenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("options",5e,33,fe,df));
	outFields->push(HX_("grpOptions",f9,45,d8,00));
	outFields->push(HX_("nameText",98,ec,80,49));
	outFields->push(HX_("descText",9e,53,35,f3));
	outFields->push(HX_("progressTxt",c3,78,63,e6));
	outFields->push(HX_("progressBar",26,bc,55,e6));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("MAX_PER_ROW",3d,7a,bd,5d));
	outFields->push(HX_("goingBack",01,e7,bf,2f));
	outFields->push(HX_("barTween",98,eb,3e,e8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AchievementsMenuState_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(AchievementsMenuState_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(AchievementsMenuState_obj,options),HX_("options",5e,33,fe,df)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(AchievementsMenuState_obj,grpOptions),HX_("grpOptions",f9,45,d8,00)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(AchievementsMenuState_obj,nameText),HX_("nameText",98,ec,80,49)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(AchievementsMenuState_obj,descText),HX_("descText",9e,53,35,f3)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(AchievementsMenuState_obj,progressTxt),HX_("progressTxt",c3,78,63,e6)},
	{::hx::fsObject /*  ::objects::Bar */ ,(int)offsetof(AchievementsMenuState_obj,progressBar),HX_("progressBar",26,bc,55,e6)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(AchievementsMenuState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsInt,(int)offsetof(AchievementsMenuState_obj,MAX_PER_ROW),HX_("MAX_PER_ROW",3d,7a,bd,5d)},
	{::hx::fsBool,(int)offsetof(AchievementsMenuState_obj,goingBack),HX_("goingBack",01,e7,bf,2f)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(AchievementsMenuState_obj,barTween),HX_("barTween",98,eb,3e,e8)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AchievementsMenuState_obj_sStaticStorageInfo = 0;
#endif

static ::String AchievementsMenuState_obj_sMemberFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	HX_("options",5e,33,fe,df),
	HX_("grpOptions",f9,45,d8,00),
	HX_("nameText",98,ec,80,49),
	HX_("descText",9e,53,35,f3),
	HX_("progressTxt",c3,78,63,e6),
	HX_("progressBar",26,bc,55,e6),
	HX_("camFollow",e0,6e,47,22),
	HX_("MAX_PER_ROW",3d,7a,bd,5d),
	HX_("create",fc,66,0f,7c),
	HX_("makeAchievement",21,a9,b9,8d),
	HX_("goingBack",01,e7,bf,2f),
	HX_("update",09,86,05,87),
	HX_("barTween",98,eb,3e,e8),
	HX_("_changeSelection",3d,db,94,33),
	::String(null()) };

::hx::Class AchievementsMenuState_obj::__mClass;

static ::String AchievementsMenuState_obj_sStaticFields[] = {
	HX_("sortByID",f0,53,9e,44),
	::String(null())
};

void AchievementsMenuState_obj::__register()
{
	AchievementsMenuState_obj _hx_dummy;
	AchievementsMenuState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.AchievementsMenuState",e2,c1,ea,38);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AchievementsMenuState_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(AchievementsMenuState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AchievementsMenuState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AchievementsMenuState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AchievementsMenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AchievementsMenuState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
