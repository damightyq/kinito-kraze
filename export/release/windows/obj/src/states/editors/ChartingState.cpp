// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_DateTools
#include <DateTools.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Conductor
#include <backend/Conductor.h>
#endif
#ifndef INCLUDED_backend_Difficulty
#include <backend/Difficulty.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_NoteTypesConfig
#include <backend/NoteTypesConfig.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_PsychCamera
#include <backend/PsychCamera.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_backend_Song
#include <backend/Song.h>
#endif
#ifndef INCLUDED_backend_StageData
#include <backend/StageData.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIBox
#include <backend/ui/PsychUIBox.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIButton
#include <backend/ui/PsychUIButton.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUICheckBox
#include <backend/ui/PsychUICheckBox.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIDropDownMenu
#include <backend/ui/PsychUIDropDownMenu.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIEvent
#include <backend/ui/PsychUIEvent.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIInputText
#include <backend/ui/PsychUIInputText.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUINumericStepper
#include <backend/ui/PsychUINumericStepper.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIRadioGroup
#include <backend/ui/PsychUIRadioGroup.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUISlider
#include <backend/ui/PsychUISlider.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUITab
#include <backend/ui/PsychUITab.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe__CallStack_CallStack_Impl_
#include <haxe/_CallStack/CallStack_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_AssetCache
#include <lime/utils/AssetCache.h>
#endif
#ifndef INCLUDED_lime_utils_Assets
#include <lime/utils/Assets.h>
#endif
#ifndef INCLUDED_objects_HealthIcon
#include <objects/HealthIcon.h>
#endif
#ifndef INCLUDED_objects_Note
#include <objects/Note.h>
#endif
#ifndef INCLUDED_objects_StrumNote
#include <objects/StrumNote.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_net_FileFilter
#include <openfl/net/FileFilter.h>
#endif
#ifndef INCLUDED_shaders_RGBPalette
#include <shaders/RGBPalette.h>
#endif
#ifndef INCLUDED_shaders_RGBShaderReference
#include <shaders/RGBShaderReference.h>
#endif
#ifndef INCLUDED_states_LoadingState
#include <states/LoadingState.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_states_editors_ChartingState
#include <states/editors/ChartingState.h>
#endif
#ifndef INCLUDED_states_editors_MasterEditorMenu
#include <states/editors/MasterEditorMenu.h>
#endif
#ifndef INCLUDED_states_editors_content_BasePrompt
#include <states/editors/content/BasePrompt.h>
#endif
#ifndef INCLUDED_states_editors_content_ChartingGridSprite
#include <states/editors/content/ChartingGridSprite.h>
#endif
#ifndef INCLUDED_states_editors_content_EditorPlayState
#include <states/editors/content/EditorPlayState.h>
#endif
#ifndef INCLUDED_states_editors_content_EventMetaNote
#include <states/editors/content/EventMetaNote.h>
#endif
#ifndef INCLUDED_states_editors_content_FileDialogHandler
#include <states/editors/content/FileDialogHandler.h>
#endif
#ifndef INCLUDED_states_editors_content_MetaNote
#include <states/editors/content/MetaNote.h>
#endif
#ifndef INCLUDED_states_editors_content_Prompt
#include <states/editors/content/Prompt.h>
#endif
#ifndef INCLUDED_states_editors_content_PsychJsonPrinter
#include <states/editors/content/PsychJsonPrinter.h>
#endif
#ifndef INCLUDED_states_editors_content_VSlice
#include <states/editors/content/VSlice.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_27e1ce861cc941c0_67_new,"states.editors.ChartingState","new",0x459b218b,"states.editors.ChartingState.new","states/editors/ChartingState.hx",67,0x0f29a547)
static const Float _hx_array_data_f85b0019_1[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_2[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_3[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_4[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_5[] = {
	0.25,0.5,(Float)1,(Float)2,(Float)3,(Float)4,(Float)6,(Float)8,(Float)12,(Float)16,(Float)24,
};
static const int _hx_array_data_f85b0019_6[] = {
	(int)-2162688,(int)-12566321,(int)-5308241,(int)-20736,(int)-1,(int)-24321,(int)-40912,(int)-16724017,(int)-16724224,(int)-6316129,(int)-12632257,
};
static const int _hx_array_data_f85b0019_7[] = {
	(int)4,(int)8,(int)12,(int)16,(int)20,(int)24,(int)32,(int)48,(int)64,(int)96,(int)192,
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_125_set_curQuant,"states.editors.ChartingState","set_curQuant",0xa5f101d5,"states.editors.ChartingState.set_curQuant","states/editors/ChartingState.hx",125,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_131_updateVortexColor,"states.editors.ChartingState","updateVortexColor",0x3d417cf7,"states.editors.ChartingState.updateVortexColor","states/editors/ChartingState.hx",131,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_467_create,"states.editors.ChartingState","create",0x23dce2b1,"states.editors.ChartingState.create","states/editors/ChartingState.hx",467,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_220_create,"states.editors.ChartingState","create",0x23dce2b1,"states.editors.ChartingState.create","states/editors/ChartingState.hx",220,0x0f29a547)
static const ::String _hx_array_data_f85b0019_15[] = {
	HX_("Information",4c,b2,cb,78),
};
static const ::String _hx_array_data_f85b0019_16[] = {
	HX_("Charting",e4,0a,35,96),HX_("Data",4a,82,3c,2d),HX_("Events",39,c3,fe,ca),HX_("Note",12,44,e3,33),HX_("Section",c5,2d,29,2b),HX_("Song",f5,4f,31,37),
};
static const ::String _hx_array_data_f85b0019_17[] = {
	HX_("File",9c,fa,94,2e),HX_("Edit",2a,f6,e7,2d),HX_("View",85,5e,28,39),
};
static const ::String _hx_array_data_f85b0019_18[] = {
	HX_("W/S/Mouse Wheel - Move Conductor's Time",22,f7,0d,e1),HX_("A/D - Change Sections",c1,52,37,68),HX_("Q/E - Decrease/Increase Note Sustain Length",f8,b7,4a,ed),HX_("Hold Shift/Alt to Increase/Decrease move by 4x",d3,9b,22,8f),HX_("",00,00,00,00),HX_("F12 - Preview Chart",da,69,69,82),HX_("Enter - Playtest Chart",3f,24,1e,f5),HX_("Space - Stop/Resume song",e8,9e,68,97),HX_("",00,00,00,00),HX_("Alt + Click - Select Note(s)",7f,5b,3d,13),HX_("Shift + Click - Select/Unselect Note(s)",36,42,ca,24),HX_("Right Click - Selection Box",68,7d,b6,f2),HX_("",00,00,00,00),HX_("R - Reset Section",53,db,58,4e),HX_("Shift + R - Go Back to the Start of the Song",10,71,b2,0b),HX_("Z/X - Zoom in/out",41,7a,c0,c5),HX_("Left/Right - Change Snap",fb,29,8a,6d),HX_("Left Bracket / Right Bracket - Change Song Playback Rate",39,6a,2a,ca),HX_("ALT + Left Bracket / Right Bracket - Reset Song Playback Rate",70,09,83,55),HX_("",00,00,00,00),HX_("Ctrl + Z - Undo",e7,19,2b,b9),HX_("Ctrl + Y - Redo",a2,2f,f6,7d),HX_("Ctrl + X - Cut Selected Notes",df,ef,f8,81),HX_("Ctrl + C - Copy Selected Notes",0d,53,dd,74),HX_("Ctrl + V - Paste Copied Notes",d9,94,81,e0),HX_("Ctrl + A - Select all in current Section",aa,ee,79,97),HX_("Ctrl + S - Quicksave",80,47,93,bb),
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_538_changeTheme,"states.editors.ChartingState","changeTheme",0x6a591aa4,"states.editors.ChartingState.changeTheme","states/editors/ChartingState.hx",538,0x0f29a547)
static const int _hx_array_data_f85b0019_21[] = {
	(int)-12632257,(int)-13684945,
};
static const int _hx_array_data_f85b0019_22[] = {
	(int)-14737633,(int)-15658735,
};
static const int _hx_array_data_f85b0019_23[] = {
	(int)-2105377,(int)-4210753,
};
static const int _hx_array_data_f85b0019_24[] = {
	(int)-10526881,(int)-11908534,
};
static const int _hx_array_data_f85b0019_25[] = {
	(int)-3092272,(int)-5263441,
};
static const int _hx_array_data_f85b0019_26[] = {
	(int)-10921639,(int)-12171706,
};
static const int _hx_array_data_f85b0019_27[] = {
	(int)-2105377,(int)-4210753,
};
static const int _hx_array_data_f85b0019_28[] = {
	(int)-10526881,(int)-11908534,
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_592_openNewChart,"states.editors.ChartingState","openNewChart",0xdd642bbd,"states.editors.ChartingState.openNewChart","states/editors/ChartingState.hx",592,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_613_prepareReload,"states.editors.ChartingState","prepareReload",0x13784d2b,"states.editors.ChartingState.prepareReload","states/editors/ChartingState.hx",613,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_629_onChartLoaded,"states.editors.ChartingState","onChartLoaded",0x6b2e058f,"states.editors.ChartingState.onChartLoaded","states/editors/ChartingState.hx",629,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_674_update,"states.editors.ChartingState","update",0x2ed301be,"states.editors.ChartingState.update","states/editors/ChartingState.hx",674,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_756_update,"states.editors.ChartingState","update",0x2ed301be,"states.editors.ChartingState.update","states/editors/ChartingState.hx",756,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_740_update,"states.editors.ChartingState","update",0x2ed301be,"states.editors.ChartingState.update","states/editors/ChartingState.hx",740,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1016_update,"states.editors.ChartingState","update",0x2ed301be,"states.editors.ChartingState.update","states/editors/ChartingState.hx",1016,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1320_update,"states.editors.ChartingState","update",0x2ed301be,"states.editors.ChartingState.update","states/editors/ChartingState.hx",1320,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1534_moveSelectedNotes,"states.editors.ChartingState","moveSelectedNotes",0x6f63b480,"states.editors.ChartingState.moveSelectedNotes","states/editors/ChartingState.hx",1534,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1570_moveSelectedNotes,"states.editors.ChartingState","moveSelectedNotes",0x6f63b480,"states.editors.ChartingState.moveSelectedNotes","states/editors/ChartingState.hx",1570,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1581_stopMovingNotes,"states.editors.ChartingState","stopMovingNotes",0x6cb5bf9c,"states.editors.ChartingState.stopMovingNotes","states/editors/ChartingState.hx",1581,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1576_stopMovingNotes,"states.editors.ChartingState","stopMovingNotes",0x6cb5bf9c,"states.editors.ChartingState.stopMovingNotes","states/editors/ChartingState.hx",1576,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1600_makeNoteDataCopy,"states.editors.ChartingState","makeNoteDataCopy",0x09be7414,"states.editors.ChartingState.makeNoteDataCopy","states/editors/ChartingState.hx",1600,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1614_updateScrollY,"states.editors.ChartingState","updateScrollY",0x45992d8e,"states.editors.ChartingState.updateScrollY","states/editors/ChartingState.hx",1614,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1624_updateSelectionBox,"states.editors.ChartingState","updateSelectionBox",0xca3ea7fd,"states.editors.ChartingState.updateSelectionBox","states/editors/ChartingState.hx",1624,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1644_showOutput,"states.editors.ChartingState","showOutput",0x0923ae13,"states.editors.ChartingState.showOutput","states/editors/ChartingState.hx",1644,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1662_resetSelectedNotes,"states.editors.ChartingState","resetSelectedNotes",0xa5d43fcc,"states.editors.ChartingState.resetSelectedNotes","states/editors/ChartingState.hx",1662,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1676_onSelectNote,"states.editors.ChartingState","onSelectNote",0xc631e082,"states.editors.ChartingState.onSelectNote","states/editors/ChartingState.hx",1676,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1715_updateSelectedEventText,"states.editors.ChartingState","updateSelectedEventText",0x085cd06e,"states.editors.ChartingState.updateSelectedEventText","states/editors/ChartingState.hx",1715,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1742_createGrids,"states.editors.ChartingState","createGrids",0xf878427c,"states.editors.ChartingState.createGrids","states/editors/ChartingState.hx",1742,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1786_loadChart,"states.editors.ChartingState","loadChart",0x9c1fec43,"states.editors.ChartingState.loadChart","states/editors/ChartingState.hx",1786,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1793_loadMusic,"states.editors.ChartingState","loadMusic",0x66c7200a,"states.editors.ChartingState.loadMusic","states/editors/ChartingState.hx",1793,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1823_loadMusic,"states.editors.ChartingState","loadMusic",0x66c7200a,"states.editors.ChartingState.loadMusic","states/editors/ChartingState.hx",1823,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1867_onSongComplete,"states.editors.ChartingState","onSongComplete",0x4ae85622,"states.editors.ChartingState.onSongComplete","states/editors/ChartingState.hx",1867,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1876_updateAudioVolume,"states.editors.ChartingState","updateAudioVolume",0x89c3ee32,"states.editors.ChartingState.updateAudioVolume","states/editors/ChartingState.hx",1876,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1887_setPitch,"states.editors.ChartingState","setPitch",0x23c0b7b3,"states.editors.ChartingState.setPitch","states/editors/ChartingState.hx",1887,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1897_setSongPlaying,"states.editors.ChartingState","setSongPlaying",0xc9525c4c,"states.editors.ChartingState.setSongPlaying","states/editors/ChartingState.hx",1897,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1929_reloadNotes,"states.editors.ChartingState","reloadNotes",0x307c2a53,"states.editors.ChartingState.reloadNotes","states/editors/ChartingState.hx",1929,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1955_createNote,"states.editors.ChartingState","createNote",0xeec5d343,"states.editors.ChartingState.createNote","states/editors/ChartingState.hx",1955,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_1986_createEvent,"states.editors.ChartingState","createEvent",0xd44cf3a9,"states.editors.ChartingState.createEvent","states/editors/ChartingState.hx",1986,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2005__cacheSections,"states.editors.ChartingState","_cacheSections",0xc69c3446,"states.editors.ChartingState._cacheSections","states/editors/ChartingState.hx",2005,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2119_loadSection,"states.editors.ChartingState","loadSection",0x6382b88a,"states.editors.ChartingState.loadSection","states/editors/ChartingState.hx",2119,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2185_softReloadNotes,"states.editors.ChartingState","softReloadNotes",0xfe134b09,"states.editors.ChartingState.softReloadNotes","states/editors/ChartingState.hx",2185,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2177_softReloadNotes,"states.editors.ChartingState","softReloadNotes",0xfe134b09,"states.editors.ChartingState.softReloadNotes","states/editors/ChartingState.hx",2177,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2227_softReloadNotes,"states.editors.ChartingState","softReloadNotes",0xfe134b09,"states.editors.ChartingState.softReloadNotes","states/editors/ChartingState.hx",2227,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2252_getMinNoteTime,"states.editors.ChartingState","getMinNoteTime",0xfd69ac90,"states.editors.ChartingState.getMinNoteTime","states/editors/ChartingState.hx",2252,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2260_getMaxNoteTime,"states.editors.ChartingState","getMaxNoteTime",0x388407a2,"states.editors.ChartingState.getMaxNoteTime","states/editors/ChartingState.hx",2260,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2268_positionNoteXByData,"states.editors.ChartingState","positionNoteXByData",0x88d6ed69,"states.editors.ChartingState.positionNoteXByData","states/editors/ChartingState.hx",2268,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2280_positionNoteYOnTime,"states.editors.ChartingState","positionNoteYOnTime",0x9a412955,"states.editors.ChartingState.positionNoteYOnTime","states/editors/ChartingState.hx",2280,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2293_updateJsonData,"states.editors.ChartingState","updateJsonData",0x560ea450,"states.editors.ChartingState.updateJsonData","states/editors/ChartingState.hx",2293,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2305_updateHeads,"states.editors.ChartingState","updateHeads",0x3f5e30b5,"states.editors.ChartingState.updateHeads","states/editors/ChartingState.hx",2305,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2365_addChartingTab,"states.editors.ChartingState","addChartingTab",0x3c961605,"states.editors.ChartingState.addChartingTab","states/editors/ChartingState.hx",2365,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2369_addChartingTab,"states.editors.ChartingState","addChartingTab",0x3c961605,"states.editors.ChartingState.addChartingTab","states/editors/ChartingState.hx",2369,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2372_addChartingTab,"states.editors.ChartingState","addChartingTab",0x3c961605,"states.editors.ChartingState.addChartingTab","states/editors/ChartingState.hx",2372,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2355_addChartingTab,"states.editors.ChartingState","addChartingTab",0x3c961605,"states.editors.ChartingState.addChartingTab","states/editors/ChartingState.hx",2355,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2428_addDataTab,"states.editors.ChartingState","addDataTab",0x0c91985f,"states.editors.ChartingState.addDataTab","states/editors/ChartingState.hx",2428,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2437_addDataTab,"states.editors.ChartingState","addDataTab",0x0c91985f,"states.editors.ChartingState.addDataTab","states/editors/ChartingState.hx",2437,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2444_addDataTab,"states.editors.ChartingState","addDataTab",0x0c91985f,"states.editors.ChartingState.addDataTab","states/editors/ChartingState.hx",2444,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2451_addDataTab,"states.editors.ChartingState","addDataTab",0x0c91985f,"states.editors.ChartingState.addDataTab","states/editors/ChartingState.hx",2451,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2462_addDataTab,"states.editors.ChartingState","addDataTab",0x0c91985f,"states.editors.ChartingState.addDataTab","states/editors/ChartingState.hx",2462,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2495_addDataTab,"states.editors.ChartingState","addDataTab",0x0c91985f,"states.editors.ChartingState.addDataTab","states/editors/ChartingState.hx",2495,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2423_addDataTab,"states.editors.ChartingState","addDataTab",0x0c91985f,"states.editors.ChartingState.addDataTab","states/editors/ChartingState.hx",2423,0x0f29a547)
static const ::String _hx_array_data_f85b0019_139[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2532_addEventsTab,"states.editors.ChartingState","addEventsTab",0x46144bd0,"states.editors.ChartingState.addEventsTab","states/editors/ChartingState.hx",2532,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2558_addEventsTab,"states.editors.ChartingState","addEventsTab",0x46144bd0,"states.editors.ChartingState.addEventsTab","states/editors/ChartingState.hx",2558,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2576_addEventsTab,"states.editors.ChartingState","addEventsTab",0x46144bd0,"states.editors.ChartingState.addEventsTab","states/editors/ChartingState.hx",2576,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2574_addEventsTab,"states.editors.ChartingState","addEventsTab",0x46144bd0,"states.editors.ChartingState.addEventsTab","states/editors/ChartingState.hx",2574,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2599_addEventsTab,"states.editors.ChartingState","addEventsTab",0x46144bd0,"states.editors.ChartingState.addEventsTab","states/editors/ChartingState.hx",2599,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2598_addEventsTab,"states.editors.ChartingState","addEventsTab",0x46144bd0,"states.editors.ChartingState.addEventsTab","states/editors/ChartingState.hx",2598,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2607_addEventsTab,"states.editors.ChartingState","addEventsTab",0x46144bd0,"states.editors.ChartingState.addEventsTab","states/editors/ChartingState.hx",2607,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2611_addEventsTab,"states.editors.ChartingState","addEventsTab",0x46144bd0,"states.editors.ChartingState.addEventsTab","states/editors/ChartingState.hx",2611,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2623_addEventsTab,"states.editors.ChartingState","addEventsTab",0x46144bd0,"states.editors.ChartingState.addEventsTab","states/editors/ChartingState.hx",2623,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2644_addEventsTab,"states.editors.ChartingState","addEventsTab",0x46144bd0,"states.editors.ChartingState.addEventsTab","states/editors/ChartingState.hx",2644,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2646_addEventsTab,"states.editors.ChartingState","addEventsTab",0x46144bd0,"states.editors.ChartingState.addEventsTab","states/editors/ChartingState.hx",2646,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2526_addEventsTab,"states.editors.ChartingState","addEventsTab",0x46144bd0,"states.editors.ChartingState.addEventsTab","states/editors/ChartingState.hx",2526,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2681_addNoteTab,"states.editors.ChartingState","addNoteTab",0x480c2397,"states.editors.ChartingState.addNoteTab","states/editors/ChartingState.hx",2681,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2704_addNoteTab,"states.editors.ChartingState","addNoteTab",0x480c2397,"states.editors.ChartingState.addNoteTab","states/editors/ChartingState.hx",2704,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2725_addNoteTab,"states.editors.ChartingState","addNoteTab",0x480c2397,"states.editors.ChartingState.addNoteTab","states/editors/ChartingState.hx",2725,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2674_addNoteTab,"states.editors.ChartingState","addNoteTab",0x480c2397,"states.editors.ChartingState.addNoteTab","states/editors/ChartingState.hx",2674,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2775_addSectionTab,"states.editors.ChartingState","addSectionTab",0x7272e7dc,"states.editors.ChartingState.addSectionTab","states/editors/ChartingState.hx",2775,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2839_addSectionTab,"states.editors.ChartingState","addSectionTab",0x7272e7dc,"states.editors.ChartingState.addSectionTab","states/editors/ChartingState.hx",2839,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2845_addSectionTab,"states.editors.ChartingState","addSectionTab",0x7272e7dc,"states.editors.ChartingState.addSectionTab","states/editors/ChartingState.hx",2845,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2851_addSectionTab,"states.editors.ChartingState","addSectionTab",0x7272e7dc,"states.editors.ChartingState.addSectionTab","states/editors/ChartingState.hx",2851,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2858_addSectionTab,"states.editors.ChartingState","addSectionTab",0x7272e7dc,"states.editors.ChartingState.addSectionTab","states/editors/ChartingState.hx",2858,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2872_addSectionTab,"states.editors.ChartingState","addSectionTab",0x7272e7dc,"states.editors.ChartingState.addSectionTab","states/editors/ChartingState.hx",2872,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2886_addSectionTab,"states.editors.ChartingState","addSectionTab",0x7272e7dc,"states.editors.ChartingState.addSectionTab","states/editors/ChartingState.hx",2886,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2898_addSectionTab,"states.editors.ChartingState","addSectionTab",0x7272e7dc,"states.editors.ChartingState.addSectionTab","states/editors/ChartingState.hx",2898,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2901_addSectionTab,"states.editors.ChartingState","addSectionTab",0x7272e7dc,"states.editors.ChartingState.addSectionTab","states/editors/ChartingState.hx",2901,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2904_addSectionTab,"states.editors.ChartingState","addSectionTab",0x7272e7dc,"states.editors.ChartingState.addSectionTab","states/editors/ChartingState.hx",2904,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2928_addSectionTab,"states.editors.ChartingState","addSectionTab",0x7272e7dc,"states.editors.ChartingState.addSectionTab","states/editors/ChartingState.hx",2928,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2941_addSectionTab,"states.editors.ChartingState","addSectionTab",0x7272e7dc,"states.editors.ChartingState.addSectionTab","states/editors/ChartingState.hx",2941,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2956_addSectionTab,"states.editors.ChartingState","addSectionTab",0x7272e7dc,"states.editors.ChartingState.addSectionTab","states/editors/ChartingState.hx",2956,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2996_addSectionTab,"states.editors.ChartingState","addSectionTab",0x7272e7dc,"states.editors.ChartingState.addSectionTab","states/editors/ChartingState.hx",2996,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_2767_addSectionTab,"states.editors.ChartingState","addSectionTab",0x7272e7dc,"states.editors.ChartingState.addSectionTab","states/editors/ChartingState.hx",2767,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3033_reloadNotesDropdowns,"states.editors.ChartingState","reloadNotesDropdowns",0x9dfc6e6f,"states.editors.ChartingState.reloadNotesDropdowns","states/editors/ChartingState.hx",3033,0x0f29a547)
static const ::String _hx_array_data_f85b0019_194[] = {
	HX_(".txt",02,3f,c0,1e),
};
static const ::String _hx_array_data_f85b0019_195[] = {
	HX_(".txt",02,3f,c0,1e),
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3104_pasteCopiedNotesToSection,"states.editors.ChartingState","pasteCopiedNotesToSection",0xef35bfeb,"states.editors.ChartingState.pasteCopiedNotesToSection","states/editors/ChartingState.hx",3104,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3189_addSongTab,"states.editors.ChartingState","addSongTab",0xa4e26794,"states.editors.ChartingState.addSongTab","states/editors/ChartingState.hx",3189,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3192_addSongTab,"states.editors.ChartingState","addSongTab",0xa4e26794,"states.editors.ChartingState.addSongTab","states/editors/ChartingState.hx",3192,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3196_addSongTab,"states.editors.ChartingState","addSongTab",0xa4e26794,"states.editors.ChartingState.addSongTab","states/editors/ChartingState.hx",3196,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3235_addSongTab,"states.editors.ChartingState","addSongTab",0xa4e26794,"states.editors.ChartingState.addSongTab","states/editors/ChartingState.hx",3235,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3242_addSongTab,"states.editors.ChartingState","addSongTab",0xa4e26794,"states.editors.ChartingState.addSongTab","states/editors/ChartingState.hx",3242,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3246_addSongTab,"states.editors.ChartingState","addSongTab",0xa4e26794,"states.editors.ChartingState.addSongTab","states/editors/ChartingState.hx",3246,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3266_addSongTab,"states.editors.ChartingState","addSongTab",0xa4e26794,"states.editors.ChartingState.addSongTab","states/editors/ChartingState.hx",3266,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3274_addSongTab,"states.editors.ChartingState","addSongTab",0xa4e26794,"states.editors.ChartingState.addSongTab","states/editors/ChartingState.hx",3274,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3281_addSongTab,"states.editors.ChartingState","addSongTab",0xa4e26794,"states.editors.ChartingState.addSongTab","states/editors/ChartingState.hx",3281,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3290_addSongTab,"states.editors.ChartingState","addSongTab",0xa4e26794,"states.editors.ChartingState.addSongTab","states/editors/ChartingState.hx",3290,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3183_addSongTab,"states.editors.ChartingState","addSongTab",0xa4e26794,"states.editors.ChartingState.addSongTab","states/editors/ChartingState.hx",3183,0x0f29a547)
static const ::String _hx_array_data_f85b0019_210[] = {
	HX_("",00,00,00,00),
};
static const ::String _hx_array_data_f85b0019_211[] = {
	HX_("",00,00,00,00),
};
static const ::String _hx_array_data_f85b0019_212[] = {
	HX_("",00,00,00,00),
};
static const ::String _hx_array_data_f85b0019_213[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3324_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3324,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3322_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3322,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3346_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3346,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3357_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3357,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3339_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3339,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3398_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3398,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3419_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3419,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3440_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3440,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3405_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3405,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3380_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3380,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3562_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3562,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3574_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3574,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3606_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3606,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3604_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3604,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3648_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3648,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3674_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3674,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3672_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3672,0x0f29a547)
static const ::String _hx_array_data_f85b0019_240[] = {
	HX_("characters",aa,58,ce,55),HX_("difficulties",59,c7,5e,02),HX_("timeChanges",76,58,22,3f),
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3668_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3668,0x0f29a547)
static const ::String _hx_array_data_f85b0019_242[] = {
	HX_("events",19,4f,6a,96),HX_("notes",41,dc,ca,9f),HX_("scrollSpeed",3a,e0,46,cb),
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3693_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3693,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3697_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3697,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3664_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3664,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3641_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3641,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3759_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3759,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3818_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3818,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3816_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3816,0x0f29a547)
static const ::String _hx_array_data_f85b0019_250[] = {
	HX_("characters",aa,58,ce,55),HX_("difficulties",59,c7,5e,02),HX_("timeChanges",76,58,22,3f),
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3810_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3810,0x0f29a547)
static const ::String _hx_array_data_f85b0019_252[] = {
	HX_("events",19,4f,6a,96),HX_("notes",41,dc,ca,9f),HX_("scrollSpeed",3a,e0,46,cb),
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3846_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3846,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3850_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3850,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3858_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3858,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3751_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3751,0x0f29a547)
static const ::String _hx_array_data_f85b0019_257[] = {
	HX_("easy",02,8c,0c,43),HX_("normal",27,72,69,30),HX_("hard",eb,2e,08,45),
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3732_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3732,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3726_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3726,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3905_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3905,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3927_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3927,0x0f29a547)
static const ::String _hx_array_data_f85b0019_262[] = {
	HX_("sectionNotes",1c,c8,a7,fe),HX_("events",19,4f,6a,96),
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3945_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3945,0x0f29a547)
static const ::String _hx_array_data_f85b0019_264[] = {
	HX_("events",19,4f,6a,96),
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3920_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3920,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3896_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3896,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3890_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3890,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3978_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3978,0x0f29a547)
static const ::String _hx_array_data_f85b0019_269[] = {
	HX_("sectionNotes",1c,c8,a7,fe),HX_("events",19,4f,6a,96),
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3972_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3972,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4029_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",4029,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3314_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3314,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3479_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3479,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3501_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3501,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3528_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3528,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3498_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3498,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3472_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3472,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3594_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3594,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3595_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3595,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_3588_addFileTab,"states.editors.ChartingState","addFileTab",0xfa079f4d,"states.editors.ChartingState.addFileTab","states/editors/ChartingState.hx",3588,0x0f29a547)
static const ::String _hx_array_data_f85b0019_281[] = {
	HX_("events",19,4f,6a,96),
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4060_addEditTab,"states.editors.ChartingState","addEditTab",0x205fd07f,"states.editors.ChartingState.addEditTab","states/editors/ChartingState.hx",4060,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4115_addEditTab,"states.editors.ChartingState","addEditTab",0x205fd07f,"states.editors.ChartingState.addEditTab","states/editors/ChartingState.hx",4115,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4122_addEditTab,"states.editors.ChartingState","addEditTab",0x205fd07f,"states.editors.ChartingState.addEditTab","states/editors/ChartingState.hx",4122,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4130_addEditTab,"states.editors.ChartingState","addEditTab",0x205fd07f,"states.editors.ChartingState.addEditTab","states/editors/ChartingState.hx",4130,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4106_addEditTab,"states.editors.ChartingState","addEditTab",0x205fd07f,"states.editors.ChartingState.addEditTab","states/editors/ChartingState.hx",4106,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4101_addEditTab,"states.editors.ChartingState","addEditTab",0x205fd07f,"states.editors.ChartingState.addEditTab","states/editors/ChartingState.hx",4101,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4159_addEditTab,"states.editors.ChartingState","addEditTab",0x205fd07f,"states.editors.ChartingState.addEditTab","states/editors/ChartingState.hx",4159,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4157_addEditTab,"states.editors.ChartingState","addEditTab",0x205fd07f,"states.editors.ChartingState.addEditTab","states/editors/ChartingState.hx",4157,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4041_addEditTab,"states.editors.ChartingState","addEditTab",0x205fd07f,"states.editors.ChartingState.addEditTab","states/editors/ChartingState.hx",4041,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4076_addEditTab,"states.editors.ChartingState","addEditTab",0x205fd07f,"states.editors.ChartingState.addEditTab","states/editors/ChartingState.hx",4076,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4180_addEditTab,"states.editors.ChartingState","addEditTab",0x205fd07f,"states.editors.ChartingState.addEditTab","states/editors/ChartingState.hx",4180,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4178_addEditTab,"states.editors.ChartingState","addEditTab",0x205fd07f,"states.editors.ChartingState.addEditTab","states/editors/ChartingState.hx",4178,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4217_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4217,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4226_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4226,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4236_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4236,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4246_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4246,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4278_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4278,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4292_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4292,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4305_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4305,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4268_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4268,0x0f29a547)
static const ::String _hx_array_data_f85b0019_305[] = {
	HX_("inst",c6,43,bb,45),HX_("voc",0a,eb,59,00),HX_("opp",2f,9c,54,00),
};
static const ::String _hx_array_data_f85b0019_306[] = {
	HX_("Instrumental",f2,9b,32,95),HX_("Main Vocals",65,25,63,78),HX_("Opponent Vocals",81,c8,d0,b7),
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4265_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4265,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4353_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4353,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4361_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4361,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4372_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4372,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4379_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4379,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4329_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4329,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4324_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4324,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4417_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4417,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4423_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4423,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4429_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4429,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4435_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4435,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4442_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4442,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4460_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4460,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4482_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4482,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4500_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4500,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4518_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4518,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4536_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4536,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4411_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4411,0x0f29a547)
static const ::String _hx_array_data_f85b0019_325[] = {
	HX_("DFDFDF",06,00,79,ab),HX_("BFBFBF",4c,d8,6f,dd),
};
static const ::String _hx_array_data_f85b0019_326[] = {
	HX_("5F5F5F",13,56,34,a2),HX_("4A4A4A",67,10,2b,5a),
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4404_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4404,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4549_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4549,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4202_addViewTab,"states.editors.ChartingState","addViewTab",0x9776d304,"states.editors.ChartingState.addViewTab","states/editors/ChartingState.hx",4202,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4559_updateChartData,"states.editors.ChartingState","updateChartData",0xa03f9c8a,"states.editors.ChartingState.updateChartData","states/editors/ChartingState.hx",4559,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4591_saveChart,"states.editors.ChartingState","saveChart",0x0f95a7cc,"states.editors.ChartingState.saveChart","states/editors/ChartingState.hx",4591,0x0f29a547)
static const ::String _hx_array_data_f85b0019_336[] = {
	HX_("sectionNotes",1c,c8,a7,fe),HX_("events",19,4f,6a,96),
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4605_saveChart,"states.editors.ChartingState","saveChart",0x0f95a7cc,"states.editors.ChartingState.saveChart","states/editors/ChartingState.hx",4605,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4611_saveChart,"states.editors.ChartingState","saveChart",0x0f95a7cc,"states.editors.ChartingState.saveChart","states/editors/ChartingState.hx",4611,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4617_getCurChartSection,"states.editors.ChartingState","getCurChartSection",0x3ee87186,"states.editors.ChartingState.getCurChartSection","states/editors/ChartingState.hx",4617,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4621_updateNotesRGB,"states.editors.ChartingState","updateNotesRGB",0x84b5a52a,"states.editors.ChartingState.updateNotesRGB","states/editors/ChartingState.hx",4621,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4648_updateGridVisibility,"states.editors.ChartingState","updateGridVisibility",0x0e61e296,"states.editors.ChartingState.updateGridVisibility","states/editors/ChartingState.hx",4648,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4662_adaptNotesToNewTimes,"states.editors.ChartingState","adaptNotesToNewTimes",0x3399b875,"states.editors.ChartingState.adaptNotesToNewTimes","states/editors/ChartingState.hx",4662,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4757_UIEvent,"states.editors.ChartingState","UIEvent",0x339ebfd1,"states.editors.ChartingState.UIEvent","states/editors/ChartingState.hx",4757,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4781_updateUpperBoxBg,"states.editors.ChartingState","updateUpperBoxBg",0x074ec34c,"states.editors.ChartingState.updateUpperBoxBg","states/editors/ChartingState.hx",4781,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4791_openEditorPlayState,"states.editors.ChartingState","openEditorPlayState",0x87899291,"states.editors.ChartingState.openEditorPlayState","states/editors/ChartingState.hx",4791,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4806_goToPlayState,"states.editors.ChartingState","goToPlayState",0xcbcd4a25,"states.editors.ChartingState.goToPlayState","states/editors/ChartingState.hx",4806,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4819_openSubState,"states.editors.ChartingState","openSubState",0x6d9117d0,"states.editors.ChartingState.openSubState","states/editors/ChartingState.hx",4819,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4825_closeSubState,"states.editors.ChartingState","closeSubState",0x4d84ad34,"states.editors.ChartingState.closeSubState","states/editors/ChartingState.hx",4825,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4835_destroy,"states.editors.ChartingState","destroy",0x5084efa5,"states.editors.ChartingState.destroy","states/editors/ChartingState.hx",4835,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4848_loadFileList,"states.editors.ChartingState","loadFileList",0x50a8a2b5,"states.editors.ChartingState.loadFileList","states/editors/ChartingState.hx",4848,0x0f29a547)
static const ::String _hx_array_data_f85b0019_371[] = {
	HX_(".json",56,f1,d6,c2),
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4885_loadCharacterFile,"states.editors.ChartingState","loadCharacterFile",0x97ba1b2a,"states.editors.ChartingState.loadCharacterFile","states/editors/ChartingState.hx",4885,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4905_overwriteCheck,"states.editors.ChartingState","overwriteCheck",0x9cdb4e72,"states.editors.ChartingState.overwriteCheck","states/editors/ChartingState.hx",4905,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4909_overwriteCheck,"states.editors.ChartingState","overwriteCheck",0x9cdb4e72,"states.editors.ChartingState.overwriteCheck","states/editors/ChartingState.hx",4909,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4914_overwriteCheck,"states.editors.ChartingState","overwriteCheck",0x9cdb4e72,"states.editors.ChartingState.overwriteCheck","states/editors/ChartingState.hx",4914,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4930_addUndoAction,"states.editors.ChartingState","addUndoAction",0xe3bd8766,"states.editors.ChartingState.addUndoAction","states/editors/ChartingState.hx",4930,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4928_addUndoAction,"states.editors.ChartingState","addUndoAction",0xe3bd8766,"states.editors.ChartingState.addUndoAction","states/editors/ChartingState.hx",4928,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4962_undo,"states.editors.ChartingState","undo",0xa6c97a99,"states.editors.ChartingState.undo","states/editors/ChartingState.hx",4962,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_4994_redo,"states.editors.ChartingState","redo",0xa4c70273,"states.editors.ChartingState.redo","states/editors/ChartingState.hx",4994,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_5027_actionPushNotes,"states.editors.ChartingState","actionPushNotes",0x8816a71c,"states.editors.ChartingState.actionPushNotes","states/editors/ChartingState.hx",5027,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_5060_actionRemoveNotes,"states.editors.ChartingState","actionRemoveNotes",0xf95dcbb2,"states.editors.ChartingState.actionRemoveNotes","states/editors/ChartingState.hx",5060,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_5101_actionReplaceNotes,"states.editors.ChartingState","actionReplaceNotes",0x2b2abf78,"states.editors.ChartingState.actionReplaceNotes","states/editors/ChartingState.hx",5101,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_5116_updateWaveform,"states.editors.ChartingState","updateWaveform",0x0584435b,"states.editors.ChartingState.updateWaveform","states/editors/ChartingState.hx",5116,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_5186_waveformData,"states.editors.ChartingState","waveformData",0xcc9dcdbc,"states.editors.ChartingState.waveformData","states/editors/ChartingState.hx",5186,0x0f29a547)
static const Float _hx_array_data_f85b0019_403[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_404[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_405[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_406[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_407[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_408[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_409[] = {
	(Float)0,
};
static const Float _hx_array_data_f85b0019_410[] = {
	(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_70_boot,"states.editors.ChartingState","boot",0x9a3b38a7,"states.editors.ChartingState.boot","states/editors/ChartingState.hx",70,0x0f29a547)
static const ::String _hx_array_data_f85b0019_412[] = {
	HX_("",00,00,00,00),HX_("Nothing. Yep, that's right.",66,d5,5d,e8),
};
static const ::String _hx_array_data_f85b0019_413[] = {
	HX_("Dadbattle Spotlight",b3,45,78,e2),HX_("Used in Dad Battle,\nValue 1: 0/1 = ON/OFF,\n2 = Target Dad\n3 = Target BF",b1,92,1b,cf),
};
static const ::String _hx_array_data_f85b0019_414[] = {
	HX_("Hey!",e5,69,e4,2f),HX_("Plays the \"Hey!\" animation from Bopeebo,\nValue 1: BF = Only Boyfriend, GF = Only Girlfriend,\nSomething else = Both.\nValue 2: Custom animation duration,\nleave it blank for 0.6s",c7,a4,11,db),
};
static const ::String _hx_array_data_f85b0019_415[] = {
	HX_("Set GF Speed",04,ff,9a,c4),HX_("Sets GF head bopping speed,\nValue 1: 1 = Normal speed,\n2 = 1/2 speed, 4 = 1/4 speed etc.\nUsed on Fresh during the beatbox parts.\n\nWarning: Value must be integer!",bd,c7,5a,eb),
};
static const ::String _hx_array_data_f85b0019_416[] = {
	HX_("Philly Glow",85,3a,5e,92),HX_("Exclusive to Week 3\nValue 1: 0/1/2 = OFF/ON/Reset Gradient\n \nNo, i won't add it to other weeks.",50,27,39,4c),
};
static const ::String _hx_array_data_f85b0019_417[] = {
	HX_("Kill Henchmen",e2,fc,7b,01),HX_("For Mom's songs, don't use this please, i love them :(",80,c5,4b,54),
};
static const ::String _hx_array_data_f85b0019_418[] = {
	HX_("Add Camera Zoom",cf,55,a6,44),HX_("Used on MILF on that one \"hard\" part\nValue 1: Camera zoom add (Default: 0.015)\nValue 2: UI zoom add (Default: 0.03)\nLeave the values blank if you want to use Default.",ce,dd,83,e8),
};
static const ::String _hx_array_data_f85b0019_419[] = {
	HX_("BG Freaks Expression",4d,76,b1,17),HX_("Should be used only in \"school\" Stage!",dd,fb,c9,a2),
};
static const ::String _hx_array_data_f85b0019_420[] = {
	HX_("Trigger BG Ghouls",e1,1f,5c,88),HX_("Should be used only in \"schoolEvil\" Stage!",91,8c,94,81),
};
static const ::String _hx_array_data_f85b0019_421[] = {
	HX_("Play Animation",d8,05,5f,0c),HX_("Plays an animation on a Character,\nonce the animation is completed,\nthe animation changes to Idle\n\nValue 1: Animation to play.\nValue 2: Character (Dad, BF, GF)",59,cd,71,43),
};
static const ::String _hx_array_data_f85b0019_422[] = {
	HX_("Camera Follow Pos",e0,d4,b1,c4),HX_("Value 1: X\nValue 2: Y\n\nThe camera won't change the follow point\nafter using this, for getting it back\nto normal, leave both values blank.",c6,8e,5e,fa),
};
static const ::String _hx_array_data_f85b0019_423[] = {
	HX_("Alt Idle Animation",2f,00,fa,18),HX_("Sets a specified postfix after the idle animation name.\nYou can use this to trigger 'idle-alt' if you set\nValue 2 to -alt\n\nValue 1: Character to set (Dad, BF or GF)\nValue 2: New postfix (Leave it blank to disable)",ba,40,8a,31),
};
static const ::String _hx_array_data_f85b0019_424[] = {
	HX_("Screen Shake",12,bb,51,4b),HX_("Value 1: Camera shake\nValue 2: HUD shake\n\nEvery value works as the following example: \"1, 0.05\".\nThe first number (1) is the duration.\nThe second number (0.05) is the intensity.",ac,9a,68,86),
};
static const ::String _hx_array_data_f85b0019_425[] = {
	HX_("Change Character",f9,50,ef,9c),HX_("Value 1: Character to change (Dad, BF, GF)\nValue 2: New character's name",aa,d4,06,6a),
};
static const ::String _hx_array_data_f85b0019_426[] = {
	HX_("Change Scroll Speed",c4,2f,0b,43),HX_("Value 1: Scroll Speed Multiplier (1 is default)\nValue 2: Time it takes to change fully in seconds.",f2,9a,e0,c3),
};
static const ::String _hx_array_data_f85b0019_427[] = {
	HX_("Set Property",d3,50,a6,2e),HX_("Value 1: Variable name\nValue 2: New value",8b,51,61,60),
};
static const ::String _hx_array_data_f85b0019_428[] = {
	HX_("Play Sound",a3,a9,45,48),HX_("Value 1: Sound file name\nValue 2: Volume (Default: 1), ranges from 0 to 1",64,df,bc,a5),
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_90_boot,"states.editors.ChartingState","boot",0x9a3b38a7,"states.editors.ChartingState.boot","states/editors/ChartingState.hx",90,0x0f29a547)
static const int _hx_array_data_f85b0019_430[] = {
	(int)49,(int)50,(int)51,(int)52,(int)53,(int)54,(int)55,(int)56,
};
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_91_boot,"states.editors.ChartingState","boot",0x9a3b38a7,"states.editors.ChartingState.boot","states/editors/ChartingState.hx",91,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_92_boot,"states.editors.ChartingState","boot",0x9a3b38a7,"states.editors.ChartingState.boot","states/editors/ChartingState.hx",92,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_93_boot,"states.editors.ChartingState","boot",0x9a3b38a7,"states.editors.ChartingState.boot","states/editors/ChartingState.hx",93,0x0f29a547)
HX_LOCAL_STACK_FRAME(_hx_pos_27e1ce861cc941c0_94_boot,"states.editors.ChartingState","boot",0x9a3b38a7,"states.editors.ChartingState.boot","states/editors/ChartingState.hx",94,0x0f29a547)
namespace states{
namespace editors{

void ChartingState_obj::__construct( ::Dynamic __o_shouldReset){
            		 ::Dynamic shouldReset = __o_shouldReset;
            		if (::hx::IsNull(__o_shouldReset)) shouldReset = true;
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_67_new)
HXLINE(5115)		this->wavData = ::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_1,1))->init(1,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_2,1)))->init(1,::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_3,1))->init(1,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_4,1)));
HXLINE(4926)		this->currentUndo = 0;
HXLINE(4925)		this->undoActions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4903)		this->overwriteSavedSomething = false;
HXLINE(4039)		this->lockedEvents = false;
HXLINE(2668)		this->susLengthLastVal = ((Float)0);
HXLINE(2524)		this->curEventSelected = 0;
HXLINE(2303)		this->_lastGfSection = null();
HXLINE(2302)		this->_lastSec = -1;
HXLINE(2290)		this->characterData =  ::Dynamic(::hx::Anon_obj::Create(0));
HXLINE(2117)		this->forceDataUpdate = true;
HXLINE(2116)		this->showNoteTypeLabels = true;
HXLINE(2115)		this->showNextSection = true;
HXLINE(2114)		this->showPreviousSection = true;
HXLINE(1885)		this->playbackRate = ((Float)1);
HXLINE( 672)		this->lastBeatHit = 0;
HXLINE( 670)		this->backupLimit = 10;
HXLINE( 669)		this->autoSaveCap = 2;
HXLINE( 668)		this->autoSaveTime = ((Float)0);
HXLINE( 665)		this->fileDialog =  ::states::editors::content::FileDialogHandler_obj::__alloc( HX_CTX );
HXLINE( 663)		this->songFinished = false;
HXLINE( 662)		this->outputAlpha = ((Float)0);
HXLINE( 661)		this->ignoreClickForThisFrame = false;
HXLINE( 660)		this->selectedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 659)		this->noteSelectionSine = ((Float)0);
HXLINE( 217)		this->waveformTarget = HX_("inst",c6,43,bb,45);
HXLINE( 216)		this->waveformEnabled = false;
HXLINE( 215)		this->vortexEnabled = false;
HXLINE( 210)		this->_keysPressedBuffer = ::Array_obj< bool >::__new(0);
HXLINE( 208)		this->copiedEvents = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 207)		this->copiedNotes = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 205)		this->theme = HX_("default",c1,d8,c3,9b);
HXLINE( 197)		this->_shouldReset = true;
HXLINE( 194)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 194)		point->_inPool = false;
HXDLIN( 194)		this->selectionStart = point;
HXLINE( 186)		this->opponentVocals =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXLINE( 185)		this->vocals =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXLINE( 183)		this->movingNotesLastY = ((Float)0);
HXLINE( 182)		this->movingNotesLastData = 0;
HXLINE( 181)		this->isMovingNotes = false;
HXLINE( 179)		this->strumLineNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 176)		this->movingNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 175)		this->curRenderedNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 174)		this->behindRenderedNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 172)		this->notes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 171)		this->events = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 169)		this->icons = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 165)		this->curZoom = ((Float)1);
HXLINE( 152)		this->zoomList = ::Array_obj< Float >::fromData( _hx_array_data_f85b0019_5,11);
HXLINE( 150)		this->scrollY = ((Float)0);
HXLINE( 141)		 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(1000,360);
HXDLIN( 141)		point1->_inPool = false;
HXDLIN( 141)		this->infoBoxPosition = point1;
HXLINE( 139)		 ::flixel::math::FlxBasePoint point2 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(920,40);
HXDLIN( 139)		point2->_inPool = false;
HXDLIN( 139)		this->mainBoxPosition = point2;
HXLINE( 135)		this->curSec = 0;
HXLINE( 134)		this->sectionFirstEventID = 0;
HXLINE( 133)		this->sectionFirstNoteID = 0;
HXLINE( 123)		this->curQuant = 16;
HXLINE( 110)		this->quantColors = ::Array_obj< int >::fromData( _hx_array_data_f85b0019_6,11);
HXLINE(  97)		this->quantizations = ::Array_obj< int >::fromData( _hx_array_data_f85b0019_7,11);
HXLINE(  95)		this->BACKUP_EXT = HX_(".bkp",19,8b,b2,1e);
HXLINE( 200)		this->_shouldReset = ( (bool)(shouldReset) );
HXLINE( 201)		super::__construct();
            	}

Dynamic ChartingState_obj::__CreateEmpty() { return new ChartingState_obj; }

void *ChartingState_obj::_hx_vtable = 0;

Dynamic ChartingState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ChartingState_obj > _hx_result = new ChartingState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ChartingState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x53aaab8a) {
			if (inClassId<=(int)0x4f752055) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x4f752055;
			} else {
				return inClassId==(int)0x53aaab8a;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

static ::backend::ui::PsychUIEvent_obj _hx_states_editors_ChartingState__hx_backend_ui_PsychUIEvent= {
	( void (::hx::Object::*)(::String, ::Dynamic))&::states::editors::ChartingState_obj::UIEvent,
};

void *ChartingState_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x768fb553: return &_hx_states_editors_ChartingState__hx_backend_ui_PsychUIEvent;
	}
	return super::_hx_getInterface(inHash);
}

int ChartingState_obj::set_curQuant(int v){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_125_set_curQuant)
HXLINE( 126)		this->curQuant = v;
HXLINE( 127)		this->updateVortexColor();
HXLINE( 128)		return this->curQuant;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,set_curQuant,return )

void ChartingState_obj::updateVortexColor(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_131_updateVortexColor)
HXDLIN( 131)		 ::flixel::FlxSprite _hx_tmp = this->vortexIndicator;
HXDLIN( 131)		::Array< int > _hx_tmp1 = this->quantColors;
HXDLIN( 131)		Float Value = ( (Float)(this->quantizations->indexOf(this->curQuant,null())) );
HXDLIN( 131)		 ::Dynamic Max = (this->quantColors->length - 1);
HXDLIN( 131)		Float lowerBound;
HXDLIN( 131)		if ((Value < 0)) {
HXDLIN( 131)			lowerBound = ( (Float)(0) );
            		}
            		else {
HXDLIN( 131)			lowerBound = Value;
            		}
HXDLIN( 131)		Float _hx_tmp2;
HXDLIN( 131)		bool _hx_tmp3;
HXDLIN( 131)		if (::hx::IsNotNull( Max )) {
HXDLIN( 131)			_hx_tmp3 = ::hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXDLIN( 131)			_hx_tmp3 = false;
            		}
HXDLIN( 131)		if (_hx_tmp3) {
HXDLIN( 131)			_hx_tmp2 = ( (Float)(Max) );
            		}
            		else {
HXDLIN( 131)			_hx_tmp2 = lowerBound;
            		}
HXDLIN( 131)		_hx_tmp->set_color(_hx_tmp1->__get(::Std_obj::_hx_int(_hx_tmp2)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateVortexColor,(void))

void ChartingState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run(::String a,::String b){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_467_create)
HXLINE( 468)			bool _hx_tmp;
HXDLIN( 468)			bool _hx_tmp1;
HXDLIN( 468)			bool _hx_tmp2;
HXDLIN( 468)			if ((a != HX_("",00,00,00,00))) {
HXLINE( 468)				_hx_tmp2 = ::StringTools_obj::endsWith(a,HX_("-dead",51,69,6e,2b));
            			}
            			else {
HXLINE( 468)				_hx_tmp2 = true;
            			}
HXDLIN( 468)			if (!(_hx_tmp2)) {
HXLINE( 468)				_hx_tmp1 = ::StringTools_obj::endsWith(a,HX_("-death",e7,cb,2d,d5));
            			}
            			else {
HXLINE( 468)				_hx_tmp1 = true;
            			}
HXDLIN( 468)			if (_hx_tmp1) {
HXLINE( 468)				bool _hx_tmp3;
HXDLIN( 468)				bool _hx_tmp4;
HXDLIN( 468)				if ((b != HX_("",00,00,00,00))) {
HXLINE( 468)					_hx_tmp4 = ::StringTools_obj::endsWith(b,HX_("-dead",51,69,6e,2b));
            				}
            				else {
HXLINE( 468)					_hx_tmp4 = true;
            				}
HXDLIN( 468)				if (!(_hx_tmp4)) {
HXLINE( 468)					_hx_tmp3 = ::StringTools_obj::endsWith(b,HX_("-death",e7,cb,2d,d5));
            				}
            				else {
HXLINE( 468)					_hx_tmp3 = true;
            				}
HXDLIN( 468)				_hx_tmp = !(_hx_tmp3);
            			}
            			else {
HXLINE( 468)				_hx_tmp = false;
            			}
HXDLIN( 468)			if (_hx_tmp) {
HXLINE( 468)				return -1;
            			}
HXLINE( 469)			return 0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_220_create)
HXLINE( 221)		if ((::backend::Difficulty_obj::list->length < 1)) {
HXLINE( 221)			::backend::Difficulty_obj::list = ::backend::Difficulty_obj::defaultList->copy();
            		}
HXLINE( 222)		this->_keysPressedBuffer->resize(::states::editors::ChartingState_obj::keysArray->length);
HXLINE( 224)		if (this->_shouldReset) {
HXLINE( 224)			::backend::Conductor_obj::songPosition = ( (Float)(0) );
            		}
HXLINE( 225)		this->persistentUpdate = false;
HXLINE( 226)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 227)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE( 228)		::flixel::FlxG_obj::sound->list->add(this->opponentVocals).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE( 230)		this->vocals->autoDestroy = false;
HXLINE( 231)		this->vocals->looped = true;
HXLINE( 232)		this->opponentVocals->autoDestroy = false;
HXLINE( 233)		this->opponentVocals->looped = true;
HXLINE( 235)		this->initPsychCamera();
HXLINE( 236)		this->camUI =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 237)		{
HXLINE( 237)			 ::flixel::FlxCamera _hx_tmp = this->camUI;
HXDLIN( 237)			_hx_tmp->bgColor = (_hx_tmp->bgColor & 16777215);
HXDLIN( 237)			 ::flixel::FlxCamera _hx_tmp1 = this->camUI;
HXDLIN( 237)			_hx_tmp1->bgColor = (_hx_tmp1->bgColor | 0);
            		}
HXLINE( 238)		::flixel::FlxG_obj::cameras->add(this->camUI,false).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 240)		this->chartEditorSave =  ::flixel::util::FlxSave_obj::__alloc( HX_CTX );
HXLINE( 241)		 ::flixel::util::FlxSave _hx_tmp2 = this->chartEditorSave;
HXDLIN( 241)		::String company = ::openfl::Lib_obj::get_current()->stage->application->meta->get_string(HX_("company",3d,15,69,83));
HXDLIN( 241)		_hx_tmp2->bind(HX_("chart_editor_data",1b,1d,4d,ac),(((HX_("",00,00,00,00) + company) + HX_("/",2f,00,00,00)) + ::flixel::util::FlxSave_obj::validate(::openfl::Lib_obj::get_current()->stage->application->meta->get_string(HX_("file",7c,ce,bb,43)))));
HXLINE( 243)		 ::flixel::FlxSprite _hx_tmp3 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 243)		this->bg = _hx_tmp3->loadGraphic(::backend::Paths_obj::image(HX_("menuDesat",26,91,04,72),null(),null()),null(),null(),null(),null(),null());
HXLINE( 244)		this->bg->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 245)		{
HXLINE( 245)			 ::flixel::math::FlxBasePoint this1 = this->bg->scrollFactor;
HXDLIN( 245)			this1->set_x(( (Float)(0) ));
HXDLIN( 245)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 246)		this->add(this->bg);
HXLINE( 248)		if (::hx::IsNotNull( this->chartEditorSave->data->__Field(HX_("autoSave",4c,7a,73,2f),::hx::paccDynamic) )) {
HXLINE( 248)			this->autoSaveCap = ( (int)(this->chartEditorSave->data->__Field(HX_("autoSave",4c,7a,73,2f),::hx::paccDynamic)) );
            		}
HXLINE( 249)		if (::hx::IsNotNull( this->chartEditorSave->data->__Field(HX_("backupLimit",99,07,44,7e),::hx::paccDynamic) )) {
HXLINE( 249)			this->backupLimit = ( (int)(this->chartEditorSave->data->__Field(HX_("backupLimit",99,07,44,7e),::hx::paccDynamic)) );
            		}
HXLINE( 250)		if (::hx::IsNotNull( this->chartEditorSave->data->__Field(HX_("vortex",6e,a8,49,63),::hx::paccDynamic) )) {
HXLINE( 250)			this->vortexEnabled = ( (bool)(this->chartEditorSave->data->__Field(HX_("vortex",6e,a8,49,63),::hx::paccDynamic)) );
            		}
HXLINE( 252)		if (::hx::IsNull( this->chartEditorSave->data->__Field(HX_("customBgColor",ad,e9,91,a1),::hx::paccDynamic) )) {
HXLINE( 252)			this->chartEditorSave->data->__SetField(HX_("customBgColor",ad,e9,91,a1),HX_("303030",97,b9,49,29),::hx::paccDynamic);
            		}
HXLINE( 253)		bool _hx_tmp4;
HXDLIN( 253)		if (::hx::IsNotNull( this->chartEditorSave->data->__Field(HX_("customGridColors",27,dc,bf,81),::hx::paccDynamic) )) {
HXLINE( 253)			_hx_tmp4 = ::hx::IsLess(  ::Dynamic(this->chartEditorSave->data->__Field(HX_("customGridColors",27,dc,bf,81),::hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),2 );
            		}
            		else {
HXLINE( 253)			_hx_tmp4 = true;
            		}
HXDLIN( 253)		if (_hx_tmp4) {
HXLINE( 254)			this->chartEditorSave->data->__SetField(HX_("customGridColors",27,dc,bf,81),::cpp::VirtualArray_obj::__new(2)->init(0,HX_("DFDFDF",06,00,79,ab))->init(1,HX_("BFBFBF",4c,d8,6f,dd)),::hx::paccDynamic);
            		}
HXLINE( 255)		bool _hx_tmp5;
HXDLIN( 255)		if (::hx::IsNotNull( this->chartEditorSave->data->__Field(HX_("customNextGridColors",7a,8f,e5,4d),::hx::paccDynamic) )) {
HXLINE( 255)			_hx_tmp5 = ::hx::IsLess(  ::Dynamic(this->chartEditorSave->data->__Field(HX_("customNextGridColors",7a,8f,e5,4d),::hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),2 );
            		}
            		else {
HXLINE( 255)			_hx_tmp5 = true;
            		}
HXDLIN( 255)		if (_hx_tmp5) {
HXLINE( 256)			this->chartEditorSave->data->__SetField(HX_("customNextGridColors",7a,8f,e5,4d),::cpp::VirtualArray_obj::__new(2)->init(0,HX_("5F5F5F",13,56,34,a2))->init(1,HX_("4A4A4A",67,10,2b,5a)),::hx::paccDynamic);
            		}
HXLINE( 258)		::String _hx_tmp6;
HXDLIN( 258)		if (::hx::IsNotNull( this->chartEditorSave->data->__Field(HX_("theme",09,7e,86,0f),::hx::paccDynamic) )) {
HXLINE( 258)			_hx_tmp6 = ( (::String)(this->chartEditorSave->data->__Field(HX_("theme",09,7e,86,0f),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 258)			_hx_tmp6 = HX_("default",c1,d8,c3,9b);
            		}
HXDLIN( 258)		this->changeTheme(_hx_tmp6,false);
HXLINE( 260)		this->createGrids();
HXLINE( 262)		int _hx_tmp7;
HXDLIN( 262)		if (::states::editors::ChartingState_obj::SHOW_EVENT_COLUMN) {
HXLINE( 262)			_hx_tmp7 = ::states::editors::ChartingState_obj::GRID_SIZE;
            		}
            		else {
HXLINE( 262)			_hx_tmp7 = 0;
            		}
HXDLIN( 262)		this->waveformSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->gridBg->x + _hx_tmp7),0,null())->makeGraphic(1,1,16777215,null(),null());
HXLINE( 263)		this->waveformSprite->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 264)		this->waveformSprite->set_visible(false);
HXLINE( 265)		this->add(this->waveformSprite);
HXLINE( 267)		this->dummyArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-1,null(),null());
HXLINE( 268)		this->dummyArrow->setGraphicSize(::states::editors::ChartingState_obj::GRID_SIZE,::states::editors::ChartingState_obj::GRID_SIZE);
HXLINE( 269)		this->dummyArrow->updateHitbox();
HXLINE( 270)		this->dummyArrow->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 271)		this->add(this->dummyArrow);
HXLINE( 273)		 ::flixel::FlxSprite _hx_tmp8 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->gridBg->x - ( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) )),(( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )),null());
HXDLIN( 273)		this->vortexIndicator = _hx_tmp8->loadGraphic(::backend::Paths_obj::image(HX_("editors/vortex_indicator",c7,2e,8e,7e),null(),null()),null(),null(),null(),null(),null());
HXLINE( 274)		this->vortexIndicator->setGraphicSize(::states::editors::ChartingState_obj::GRID_SIZE,null());
HXLINE( 275)		this->vortexIndicator->updateHitbox();
HXLINE( 276)		{
HXLINE( 276)			 ::flixel::math::FlxBasePoint this2 = this->vortexIndicator->scrollFactor;
HXDLIN( 276)			this2->set_x(( (Float)(0) ));
HXDLIN( 276)			this2->set_y(( (Float)(0) ));
            		}
HXLINE( 277)		this->vortexIndicator->set_active(false);
HXLINE( 278)		this->updateVortexColor();
HXLINE( 279)		this->add(this->vortexIndicator);
HXLINE( 280)		this->add(this->strumLineNotes);
HXLINE( 282)		this->add(this->behindRenderedNotes);
HXLINE( 283)		this->add(this->curRenderedNotes);
HXLINE( 284)		this->add(this->movingNotes);
HXLINE( 286)		this->eventLockOverlay =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,this->gridBg->x,0,null())->makeGraphic(1,1,-16777216,null(),null());
HXLINE( 287)		this->eventLockOverlay->set_alpha(((Float)0.6));
HXLINE( 288)		this->eventLockOverlay->set_visible(false);
HXLINE( 289)		this->eventLockOverlay->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 290)		this->eventLockOverlay->scale->set_x(( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ));
HXLINE( 291)		this->eventLockOverlay->updateHitbox();
HXLINE( 292)		this->add(this->eventLockOverlay);
HXLINE( 294)		this->timeLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,this->gridBg->x,0,null())->makeGraphic(1,1,-1,null(),null());
HXLINE( 295)		 ::flixel::FlxSprite _hx_tmp9 = this->timeLine;
HXDLIN( 295)		_hx_tmp9->setGraphicSize(::Std_obj::_hx_int(this->gridBg->get_width()),4);
HXLINE( 296)		this->timeLine->updateHitbox();
HXLINE( 297)		{
HXLINE( 297)			 ::flixel::FlxSprite _this = this->timeLine;
HXDLIN( 297)			int axes = 16;
HXDLIN( 297)			bool _hx_tmp10;
HXDLIN( 297)			if ((axes != 1)) {
HXLINE( 297)				_hx_tmp10 = (axes == 17);
            			}
            			else {
HXLINE( 297)				_hx_tmp10 = true;
            			}
HXDLIN( 297)			if (_hx_tmp10) {
HXLINE( 297)				int _hx_tmp11 = ::flixel::FlxG_obj::width;
HXDLIN( 297)				_this->set_x(((( (Float)(_hx_tmp11) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 297)			bool _hx_tmp12;
HXDLIN( 297)			if ((axes != 16)) {
HXLINE( 297)				_hx_tmp12 = (axes == 17);
            			}
            			else {
HXLINE( 297)				_hx_tmp12 = true;
            			}
HXDLIN( 297)			if (_hx_tmp12) {
HXLINE( 297)				int _hx_tmp13 = ::flixel::FlxG_obj::height;
HXDLIN( 297)				_this->set_y(((( (Float)(_hx_tmp13) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 298)		{
HXLINE( 298)			 ::flixel::math::FlxBasePoint this3 = this->timeLine->scrollFactor;
HXDLIN( 298)			this3->set_x(( (Float)(0) ));
HXDLIN( 298)			this3->set_y(( (Float)(0) ));
            		}
HXLINE( 299)		this->add(this->timeLine);
HXLINE( 301)		Float startX = this->gridBg->x;
HXLINE( 302)		Float startY = (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) ));
HXLINE( 303)		 ::flixel::FlxSprite _hx_tmp14 = this->vortexIndicator;
HXDLIN( 303)		 ::flixel::group::FlxTypedGroup _hx_tmp15 = this->strumLineNotes;
HXDLIN( 303)		_hx_tmp14->set_visible(_hx_tmp15->set_visible(this->strumLineNotes->set_active(this->vortexEnabled)));
HXLINE( 304)		if (::states::editors::ChartingState_obj::SHOW_EVENT_COLUMN) {
HXLINE( 304)			startX = (startX + ::states::editors::ChartingState_obj::GRID_SIZE);
            		}
HXLINE( 306)		{
HXLINE( 306)			int _g = 0;
HXDLIN( 306)			int _g1 = ::Std_obj::_hx_int(( (Float)((::states::editors::ChartingState_obj::GRID_PLAYERS * ::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER)) ));
HXDLIN( 306)			while((_g < _g1)){
HXLINE( 306)				_g = (_g + 1);
HXDLIN( 306)				int i = (_g - 1);
HXLINE( 308)				 ::objects::StrumNote note =  ::objects::StrumNote_obj::__alloc( HX_CTX ,(startX + (::states::editors::ChartingState_obj::GRID_SIZE * i)),startY,::hx::Mod(i,::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER),0);
HXLINE( 309)				{
HXLINE( 309)					 ::flixel::math::FlxBasePoint this4 = note->scrollFactor;
HXDLIN( 309)					this4->set_x(( (Float)(0) ));
HXDLIN( 309)					this4->set_y(( (Float)(0) ));
            				}
HXLINE( 310)				note->playAnim(HX_("static",ae,dc,fb,05),null());
HXLINE( 311)				note->set_alpha(((Float)0.4));
HXLINE( 312)				note->updateHitbox();
HXLINE( 313)				Float _hx_tmp16 = note->get_width();
HXDLIN( 313)				if ((_hx_tmp16 > note->get_height())) {
HXLINE( 314)					note->setGraphicSize(::states::editors::ChartingState_obj::GRID_SIZE,null());
            				}
            				else {
HXLINE( 316)					note->setGraphicSize(0,::states::editors::ChartingState_obj::GRID_SIZE);
            				}
HXLINE( 318)				note->updateHitbox();
HXLINE( 319)				Float note1 = note->x;
HXDLIN( 319)				Float _hx_tmp17 = (( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ) / ( (Float)(2) ));
HXDLIN( 319)				note->set_x((note1 + (_hx_tmp17 - (note->get_width() / ( (Float)(2) )))));
HXLINE( 320)				Float note2 = note->y;
HXDLIN( 320)				Float _hx_tmp18 = (( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ) / ( (Float)(2) ));
HXDLIN( 320)				note->set_y((note2 + (_hx_tmp18 - (note->get_height() / ( (Float)(2) )))));
HXLINE( 321)				this->strumLineNotes->add(note).StaticCast<  ::objects::StrumNote >();
            			}
            		}
HXLINE( 324)		int columns = 0;
HXLINE( 325)		Float iconX = this->gridBg->x;
HXLINE( 326)		Float iconY = ( (Float)(50) );
HXLINE( 327)		if (::states::editors::ChartingState_obj::SHOW_EVENT_COLUMN) {
HXLINE( 329)			 ::flixel::FlxSprite _hx_tmp19 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,iconY,null());
HXDLIN( 329)			this->eventIcon = _hx_tmp19->loadGraphic(::backend::Paths_obj::image(HX_("editors/eventIcon",4a,94,cb,76),null(),null()),null(),null(),null(),null(),null());
HXLINE( 330)			this->eventIcon->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 331)			this->eventIcon->set_alpha(((Float)0.6));
HXLINE( 332)			this->eventIcon->setGraphicSize(30,30);
HXLINE( 333)			this->eventIcon->updateHitbox();
HXLINE( 334)			{
HXLINE( 334)				 ::flixel::math::FlxBasePoint this5 = this->eventIcon->scrollFactor;
HXDLIN( 334)				this5->set_x(( (Float)(0) ));
HXDLIN( 334)				this5->set_y(( (Float)(0) ));
            			}
HXLINE( 335)			this->add(this->eventIcon);
HXLINE( 336)			 ::flixel::FlxSprite _hx_tmp20 = this->eventIcon;
HXDLIN( 336)			Float _hx_tmp21 = (iconX + (( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ) * ((Float)0.5)));
HXDLIN( 336)			_hx_tmp20->set_x((_hx_tmp21 - (this->eventIcon->get_width() / ( (Float)(2) ))));
HXLINE( 337)			iconX = (iconX + ::states::editors::ChartingState_obj::GRID_SIZE);
HXLINE( 339)			columns = (columns + 1);
            		}
HXLINE( 342)		this->mustHitIndicator = ::flixel::util::FlxSpriteUtil_obj::drawTriangle( ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(iconY - ( (Float)(20) )),null())->makeGraphic(16,16,0,null(),null()),( (Float)(0) ),( (Float)(0) ),( (Float)(16) ),null(),null(),null());
HXLINE( 343)		{
HXLINE( 343)			 ::flixel::math::FlxBasePoint this6 = this->mustHitIndicator->scrollFactor;
HXDLIN( 343)			this6->set_x(( (Float)(0) ));
HXDLIN( 343)			this6->set_y(( (Float)(0) ));
            		}
HXLINE( 344)		this->mustHitIndicator->set_flipY(true);
HXLINE( 345)		 ::flixel::FlxSprite fh = this->mustHitIndicator;
HXDLIN( 345)		{
HXLINE( 345)			 ::flixel::math::FlxBasePoint this7 = fh->offset;
HXDLIN( 345)			Float fh1 = fh->offset->x;
HXDLIN( 345)			this7->set_x((fh1 + (this->mustHitIndicator->get_width() / ( (Float)(2) ))));
            		}
HXLINE( 346)		this->add(this->mustHitIndicator);
HXLINE( 348)		::Array< int > gridStripes = ::Array_obj< int >::__new(0);
HXLINE( 349)		{
HXLINE( 349)			int _g2 = 0;
HXDLIN( 349)			int _g3 = ::states::editors::ChartingState_obj::GRID_PLAYERS;
HXDLIN( 349)			while((_g2 < _g3)){
HXLINE( 349)				_g2 = (_g2 + 1);
HXDLIN( 349)				int i1 = (_g2 - 1);
HXLINE( 351)				if ((columns > 0)) {
HXLINE( 351)					gridStripes->push(columns);
            				}
HXLINE( 352)				columns = (columns + ::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER);
HXLINE( 354)				 ::objects::HealthIcon icon =  ::objects::HealthIcon_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 355)				icon->autoAdjustOffset = false;
HXLINE( 356)				icon->set_y(iconY);
HXLINE( 357)				icon->set_alpha(((Float)0.6));
HXLINE( 358)				{
HXLINE( 358)					 ::flixel::math::FlxBasePoint this8 = icon->scrollFactor;
HXDLIN( 358)					this8->set_x(( (Float)(0) ));
HXDLIN( 358)					this8->set_y(( (Float)(0) ));
            				}
HXLINE( 359)				{
HXLINE( 359)					 ::flixel::math::FlxBasePoint this9 = icon->scale;
HXDLIN( 359)					this9->set_x(((Float)0.3));
HXDLIN( 359)					this9->set_y(((Float)0.3));
            				}
HXLINE( 360)				icon->updateHitbox();
HXLINE( 361)				icon->ID = (i1 + 1);
HXLINE( 362)				this->add(icon);
HXLINE( 363)				this->icons->push(icon);
HXLINE( 365)				Float _hx_tmp22 = (iconX + (( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ) * (( (Float)(::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER) ) / ( (Float)(2) ))));
HXDLIN( 365)				icon->set_x((_hx_tmp22 - (icon->get_width() / ( (Float)(2) ))));
HXLINE( 366)				iconX = (iconX + (::states::editors::ChartingState_obj::GRID_SIZE * ::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER));
            			}
            		}
HXLINE( 368)		this->prevGridBg->stripes = (this->nextGridBg->stripes = (this->gridBg->stripes = gridStripes));
HXLINE( 370)		this->selectionBox =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-16711681,null(),null());
HXLINE( 371)		this->selectionBox->set_alpha(((Float)0.4));
HXLINE( 372)		this->selectionBox->set_blend(0);
HXLINE( 373)		{
HXLINE( 373)			 ::flixel::math::FlxBasePoint this10 = this->selectionBox->scrollFactor;
HXDLIN( 373)			this10->set_x(( (Float)(0) ));
HXDLIN( 373)			this10->set_y(( (Float)(0) ));
            		}
HXLINE( 374)		this->selectionBox->set_visible(false);
HXLINE( 375)		this->add(this->selectionBox);
HXLINE( 377)		this->infoBox =  ::backend::ui::PsychUIBox_obj::__alloc( HX_CTX ,this->infoBoxPosition->x,this->infoBoxPosition->y,220,220,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_15,1));
HXLINE( 378)		{
HXLINE( 378)			 ::flixel::math::FlxBasePoint this11 = this->infoBox->scrollFactor;
HXDLIN( 378)			this11->set_x(( (Float)(0) ));
HXDLIN( 378)			this11->set_y(( (Float)(0) ));
            		}
HXLINE( 379)		this->infoBox->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camUI));
HXLINE( 380)		this->infoText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,15,15,230,HX_("",00,00,00,00),16,null());
HXLINE( 381)		{
HXLINE( 381)			 ::flixel::math::FlxBasePoint this12 = this->infoText->scrollFactor;
HXDLIN( 381)			this12->set_x(( (Float)(0) ));
HXDLIN( 381)			this12->set_y(( (Float)(0) ));
            		}
HXLINE( 382)		this->infoBox->getTab(HX_("Information",4c,b2,cb,78))->menu->add(this->infoText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 383)		this->add(this->infoBox);
HXLINE( 385)		this->mainBox =  ::backend::ui::PsychUIBox_obj::__alloc( HX_CTX ,this->mainBoxPosition->x,this->mainBoxPosition->y,300,280,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_16,6));
HXLINE( 386)		this->mainBox->set_selectedName(HX_("Song",f5,4f,31,37));
HXLINE( 387)		{
HXLINE( 387)			 ::flixel::math::FlxBasePoint this13 = this->mainBox->scrollFactor;
HXDLIN( 387)			this13->set_x(( (Float)(0) ));
HXDLIN( 387)			this13->set_y(( (Float)(0) ));
            		}
HXLINE( 388)		this->mainBox->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camUI));
HXLINE( 389)		this->add(this->mainBox);
HXLINE( 391)		 ::flixel::FlxSprite _hx_tmp23 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,50,null(),null());
HXDLIN( 391)		this->autoSaveIcon = _hx_tmp23->loadGraphic(::backend::Paths_obj::image(HX_("editors/autosave",75,6a,07,82),null(),null()),null(),null(),null(),null(),null());
HXLINE( 392)		{
HXLINE( 392)			 ::flixel::FlxSprite _this1 = this->autoSaveIcon;
HXDLIN( 392)			int axes1 = 16;
HXDLIN( 392)			bool _hx_tmp24;
HXDLIN( 392)			if ((axes1 != 1)) {
HXLINE( 392)				_hx_tmp24 = (axes1 == 17);
            			}
            			else {
HXLINE( 392)				_hx_tmp24 = true;
            			}
HXDLIN( 392)			if (_hx_tmp24) {
HXLINE( 392)				int _hx_tmp25 = ::flixel::FlxG_obj::width;
HXDLIN( 392)				_this1->set_x(((( (Float)(_hx_tmp25) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 392)			bool _hx_tmp26;
HXDLIN( 392)			if ((axes1 != 16)) {
HXLINE( 392)				_hx_tmp26 = (axes1 == 17);
            			}
            			else {
HXLINE( 392)				_hx_tmp26 = true;
            			}
HXDLIN( 392)			if (_hx_tmp26) {
HXLINE( 392)				int _hx_tmp27 = ::flixel::FlxG_obj::height;
HXDLIN( 392)				_this1->set_y(((( (Float)(_hx_tmp27) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 393)		{
HXLINE( 393)			 ::flixel::math::FlxBasePoint this14 = this->autoSaveIcon->scale;
HXDLIN( 393)			this14->set_x(((Float)0.6));
HXDLIN( 393)			this14->set_y(((Float)0.6));
            		}
HXLINE( 394)		this->autoSaveIcon->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE( 395)		{
HXLINE( 395)			 ::flixel::math::FlxBasePoint this15 = this->autoSaveIcon->scrollFactor;
HXDLIN( 395)			this15->set_x(( (Float)(0) ));
HXDLIN( 395)			this15->set_y(( (Float)(0) ));
            		}
HXLINE( 396)		this->autoSaveIcon->set_alpha(( (Float)(0) ));
HXLINE( 397)		this->add(this->autoSaveIcon);
HXLINE( 400)		bool _hx_tmp28;
HXDLIN( 400)		if (::hx::IsNotNull( this->chartEditorSave->data->__Field(HX_("mainBoxPosition",1b,66,7b,2e),::hx::paccDynamic) )) {
HXLINE( 400)			_hx_tmp28 = ::hx::IsGreater(  ::Dynamic(this->chartEditorSave->data->__Field(HX_("mainBoxPosition",1b,66,7b,2e),::hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),1 );
            		}
            		else {
HXLINE( 400)			_hx_tmp28 = false;
            		}
HXDLIN( 400)		if (_hx_tmp28) {
HXLINE( 401)			this->mainBox->setPosition( ::Dynamic(this->chartEditorSave->data->__Field(HX_("mainBoxPosition",1b,66,7b,2e),::hx::paccDynamic))->__GetItem(0), ::Dynamic(this->chartEditorSave->data->__Field(HX_("mainBoxPosition",1b,66,7b,2e),::hx::paccDynamic))->__GetItem(1));
            		}
HXLINE( 402)		bool _hx_tmp29;
HXDLIN( 402)		if (::hx::IsNotNull( this->chartEditorSave->data->__Field(HX_("infoBoxPosition",06,18,d8,2d),::hx::paccDynamic) )) {
HXLINE( 402)			_hx_tmp29 = ::hx::IsGreater(  ::Dynamic(this->chartEditorSave->data->__Field(HX_("infoBoxPosition",06,18,d8,2d),::hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),1 );
            		}
            		else {
HXLINE( 402)			_hx_tmp29 = false;
            		}
HXDLIN( 402)		if (_hx_tmp29) {
HXLINE( 403)			this->infoBox->setPosition( ::Dynamic(this->chartEditorSave->data->__Field(HX_("infoBoxPosition",06,18,d8,2d),::hx::paccDynamic))->__GetItem(0), ::Dynamic(this->chartEditorSave->data->__Field(HX_("infoBoxPosition",06,18,d8,2d),::hx::paccDynamic))->__GetItem(1));
            		}
HXLINE( 405)		this->upperBox =  ::backend::ui::PsychUIBox_obj::__alloc( HX_CTX ,( (Float)(40) ),( (Float)(40) ),330,300,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_17,3));
HXLINE( 406)		{
HXLINE( 406)			 ::flixel::math::FlxBasePoint this16 = this->upperBox->scrollFactor;
HXDLIN( 406)			this16->set_x(( (Float)(0) ));
HXDLIN( 406)			this16->set_y(( (Float)(0) ));
            		}
HXLINE( 407)		this->upperBox->set_isMinimized(true);
HXLINE( 408)		this->upperBox->minimizeOnFocusLost = true;
HXLINE( 409)		this->upperBox->canMove = false;
HXLINE( 410)		this->upperBox->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camUI));
HXLINE( 411)		this->upperBox->bg->set_visible(false);
HXLINE( 412)		this->add(this->upperBox);
HXLINE( 414)		this->outputTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,25,(::flixel::FlxG_obj::height - 50),(::flixel::FlxG_obj::width - 50),HX_("",00,00,00,00),20,null());
HXLINE( 415)		this->outputTxt->set_borderSize(( (Float)(2) ));
HXLINE( 416)		this->outputTxt->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_FAST_dyn());
HXLINE( 417)		{
HXLINE( 417)			 ::flixel::math::FlxBasePoint this17 = this->outputTxt->scrollFactor;
HXDLIN( 417)			this17->set_x(( (Float)(0) ));
HXDLIN( 417)			this17->set_y(( (Float)(0) ));
            		}
HXLINE( 418)		this->outputTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camUI));
HXLINE( 419)		this->outputTxt->set_alpha(( (Float)(0) ));
HXLINE( 420)		this->add(this->outputTxt);
HXLINE( 422)		if (::hx::IsNull( ::states::PlayState_obj::SONG )) {
HXLINE( 424)			this->openNewChart();
            		}
HXLINE( 427)		this->updateJsonData();
HXLINE( 431)		this->addChartingTab();
HXLINE( 432)		this->addDataTab();
HXLINE( 433)		this->addEventsTab();
HXLINE( 434)		this->addNoteTab();
HXLINE( 435)		this->addSectionTab();
HXLINE( 436)		this->addSongTab();
HXLINE( 439)		this->addFileTab();
HXLINE( 440)		this->addEditTab();
HXLINE( 441)		this->addViewTab();
HXLINE( 444)		this->loadMusic(null());
HXLINE( 445)		this->reloadNotesDropdowns();
HXLINE( 446)		if (!(this->_shouldReset)) {
HXLINE( 448)			 ::flixel::sound::FlxSound _hx_tmp30 = this->vocals;
HXDLIN( 448)			 ::flixel::sound::FlxSound _hx_tmp31 = this->opponentVocals;
HXDLIN( 448)			_hx_tmp30->set_time(_hx_tmp31->set_time(::flixel::FlxG_obj::sound->music->set_time((::backend::Conductor_obj::songPosition - ::backend::Conductor_obj::offset))));
HXLINE( 449)			if ((::flixel::FlxG_obj::sound->music->_time >= this->vocals->_length)) {
HXLINE( 450)				this->vocals->pause();
            			}
HXLINE( 451)			if ((::flixel::FlxG_obj::sound->music->_time >= this->opponentVocals->_length)) {
HXLINE( 452)				this->opponentVocals->pause();
            			}
            		}
HXLINE( 455)		this->reloadNotes();
HXLINE( 456)		this->updateGridVisibility();
HXLINE( 459)		::Array< ::String > gameOverCharacters = this->loadFileList(HX_("characters/",45,3c,bf,be),HX_("data/characterList.txt",c4,ce,ff,de),null());
HXLINE( 460)		::Array< ::String > _g4 = ::Array_obj< ::String >::__new(0);
HXDLIN( 460)		{
HXLINE( 460)			int _g5 = 0;
HXDLIN( 460)			::Array< ::String > _g6 = gameOverCharacters;
HXDLIN( 460)			while((_g5 < _g6->length)){
HXLINE( 460)				::String v = _g6->__get(_g5);
HXDLIN( 460)				_g5 = (_g5 + 1);
HXDLIN( 460)				bool _hx_tmp32;
HXDLIN( 460)				if (!(::StringTools_obj::endsWith(v,HX_("-dead",51,69,6e,2b)))) {
HXLINE( 460)					_hx_tmp32 = !(::StringTools_obj::endsWith(v,HX_("-death",e7,cb,2d,d5)));
            				}
            				else {
HXLINE( 460)					_hx_tmp32 = false;
            				}
HXDLIN( 460)				if (_hx_tmp32) {
HXLINE( 460)					_g4->push(v);
            				}
            			}
            		}
HXDLIN( 460)		::Array< ::String > characterList = _g4;
HXLINE( 461)		this->playerDropDown->set_list(characterList);
HXLINE( 462)		this->opponentDropDown->set_list(characterList);
HXLINE( 463)		this->girlfriendDropDown->set_list(characterList);
HXLINE( 465)		gameOverCharacters->insert(0,HX_("",00,00,00,00));
HXLINE( 466)		gameOverCharacters->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE( 471)		this->gameOverCharDropDown->set_list(gameOverCharacters);
HXLINE( 473)		 ::backend::ui::PsychUIDropDownMenu _hx_tmp33 = this->stageDropDown;
HXDLIN( 473)		_hx_tmp33->set_list(this->loadFileList(HX_("stages/",9a,7a,ca,2d),HX_("data/stageList.txt",59,51,a7,b9),null()));
HXLINE( 474)		this->onChartLoaded();
HXLINE( 476)		 ::flixel::text::FlxText tipText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 210),(::flixel::FlxG_obj::height - 30),200,HX_("Press F1 for Help",b0,ec,b9,d4),20,null());
HXLINE( 477)		tipText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camUI));
HXLINE( 478)		tipText->setFormat(null(),16,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 479)		tipText->set_borderColor(-16777216);
HXLINE( 480)		{
HXLINE( 480)			 ::flixel::math::FlxBasePoint this18 = tipText->scrollFactor;
HXDLIN( 480)			this18->set_x(( (Float)(0) ));
HXDLIN( 480)			this18->set_y(( (Float)(0) ));
            		}
HXLINE( 481)		tipText->set_borderSize(( (Float)(1) ));
HXLINE( 482)		tipText->set_active(false);
HXLINE( 483)		this->add(tipText);
HXLINE( 485)		this->tipBg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-16777216,null(),null());
HXLINE( 486)		this->tipBg->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camUI));
HXLINE( 487)		{
HXLINE( 487)			 ::flixel::math::FlxBasePoint this19 = this->tipBg->scale;
HXDLIN( 487)			Float y = ( (Float)(::flixel::FlxG_obj::height) );
HXDLIN( 487)			this19->set_x(( (Float)(::flixel::FlxG_obj::width) ));
HXDLIN( 487)			this19->set_y(y);
            		}
HXLINE( 488)		this->tipBg->updateHitbox();
HXLINE( 489)		{
HXLINE( 489)			 ::flixel::math::FlxBasePoint this20 = this->tipBg->scrollFactor;
HXDLIN( 489)			this20->set_x(( (Float)(0) ));
HXDLIN( 489)			this20->set_y(( (Float)(0) ));
            		}
HXLINE( 490)		 ::flixel::FlxSprite _hx_tmp34 = this->tipBg;
HXDLIN( 490)		_hx_tmp34->set_visible(this->tipBg->set_active(false));
HXLINE( 491)		this->tipBg->set_alpha(((Float)0.6));
HXLINE( 492)		this->add(this->tipBg);
HXLINE( 494)		this->fullTipText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,(::flixel::FlxG_obj::width - 200),null(),null(),null());
HXLINE( 495)		 ::flixel::text::FlxText _hx_tmp35 = this->fullTipText;
HXDLIN( 495)		::String key = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 495)		::Dynamic this21 = ::backend::Language_obj::phrases;
HXDLIN( 495)		::String str = ( ( ::haxe::ds::StringMap)(this21) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXDLIN( 495)		if (::hx::IsNotNull( str )) {
HXLINE( 495)			key = str;
            		}
HXDLIN( 495)		::String folderKey = key;
HXDLIN( 495)		::String file = ::backend::Paths_obj::modFolders(folderKey);
HXDLIN( 495)		::String _hx_tmp36;
HXDLIN( 495)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 495)			_hx_tmp36 = file;
            		}
            		else {
HXLINE( 495)			_hx_tmp36 = (HX_("assets/",4c,2a,dc,36) + folderKey);
            		}
HXDLIN( 495)		_hx_tmp35->setFormat(_hx_tmp36,24,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 496)		this->fullTipText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camUI));
HXLINE( 497)		{
HXLINE( 497)			 ::flixel::math::FlxBasePoint this22 = this->fullTipText->scrollFactor;
HXDLIN( 497)			this22->set_x(( (Float)(0) ));
HXDLIN( 497)			this22->set_y(( (Float)(0) ));
            		}
HXLINE( 498)		 ::flixel::text::FlxText _hx_tmp37 = this->fullTipText;
HXDLIN( 498)		_hx_tmp37->set_visible(this->fullTipText->set_active(false));
HXLINE( 499)		 ::flixel::text::FlxText _hx_tmp38 = this->fullTipText;
HXDLIN( 499)		_hx_tmp38->set_text(::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_18,27)->join(HX_("\n",0a,00,00,00)));
HXLINE( 530)		{
HXLINE( 530)			 ::flixel::text::FlxText _this2 = this->fullTipText;
HXDLIN( 530)			int axes2 = 17;
HXDLIN( 530)			bool _hx_tmp39;
HXDLIN( 530)			if ((axes2 != 1)) {
HXLINE( 530)				_hx_tmp39 = (axes2 == 17);
            			}
            			else {
HXLINE( 530)				_hx_tmp39 = true;
            			}
HXDLIN( 530)			if (_hx_tmp39) {
HXLINE( 530)				int _hx_tmp40 = ::flixel::FlxG_obj::width;
HXDLIN( 530)				_this2->set_x(((( (Float)(_hx_tmp40) ) - _this2->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 530)			bool _hx_tmp41;
HXDLIN( 530)			if ((axes2 != 16)) {
HXLINE( 530)				_hx_tmp41 = (axes2 == 17);
            			}
            			else {
HXLINE( 530)				_hx_tmp41 = true;
            			}
HXDLIN( 530)			if (_hx_tmp41) {
HXLINE( 530)				int _hx_tmp42 = ::flixel::FlxG_obj::height;
HXDLIN( 530)				_this2->set_y(((( (Float)(_hx_tmp42) ) - _this2->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 531)		this->add(this->fullTipText);
HXLINE( 532)		this->super::create();
            	}


void ChartingState_obj::changeTheme(::String changeTo, ::Dynamic __o_doSave){
            		 ::Dynamic doSave = __o_doSave;
            		if (::hx::IsNull(__o_doSave)) doSave = true;
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_538_changeTheme)
HXLINE( 539)		::String oldTheme = this->theme;
HXLINE( 540)		this->theme = changeTo;
HXLINE( 541)		this->chartEditorSave->data->__SetField(HX_("theme",09,7e,86,0f),changeTo,::hx::paccDynamic);
HXLINE( 542)		if (( (bool)(doSave) )) {
HXLINE( 542)			this->chartEditorSave->flush(null());
            		}
HXLINE( 544)		::String _hx_switch_0 = this->theme;
            		if (  (_hx_switch_0==HX_("custom",b1,87,92,3f)) ){
HXLINE( 559)			 ::flixel::FlxSprite _hx_tmp = this->bg;
HXDLIN( 559)			::String color = ( (::String)(this->chartEditorSave->data->__Field(HX_("customBgColor",ad,e9,91,a1),::hx::paccDynamic)) );
HXDLIN( 559)			 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN( 559)			::String color1 = ::StringTools_obj::trim(hideChars->split(color)->join(HX_("",00,00,00,00)));
HXDLIN( 559)			if (::StringTools_obj::startsWith(color1,HX_("0x",48,2a,00,00))) {
HXLINE( 559)				color1 = color1.substring((color1.length - 6),null());
            			}
HXDLIN( 559)			 ::Dynamic colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color1);
HXDLIN( 559)			if (::hx::IsNull( colorNum )) {
HXLINE( 559)				colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color1));
            			}
HXDLIN( 559)			int _hx_tmp1;
HXDLIN( 559)			if (::hx::IsNotNull( colorNum )) {
HXLINE( 559)				_hx_tmp1 = ( (int)(colorNum) );
            			}
            			else {
HXLINE( 559)				_hx_tmp1 = -1;
            			}
HXDLIN( 559)			_hx_tmp->set_color(_hx_tmp1);
HXLINE( 560)			::String color2 = ( (::String)( ::Dynamic(this->chartEditorSave->data->__Field(HX_("customGridColors",27,dc,bf,81),::hx::paccDynamic))->__GetItem(0)) );
HXDLIN( 560)			 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN( 560)			::String color3 = ::StringTools_obj::trim(hideChars1->split(color2)->join(HX_("",00,00,00,00)));
HXDLIN( 560)			if (::StringTools_obj::startsWith(color3,HX_("0x",48,2a,00,00))) {
HXLINE( 560)				color3 = color3.substring((color3.length - 6),null());
            			}
HXDLIN( 560)			 ::Dynamic colorNum1 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color3);
HXDLIN( 560)			if (::hx::IsNull( colorNum1 )) {
HXLINE( 560)				colorNum1 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color3));
            			}
HXDLIN( 560)			int _hx_tmp2;
HXDLIN( 560)			if (::hx::IsNotNull( colorNum1 )) {
HXLINE( 560)				_hx_tmp2 = ( (int)(colorNum1) );
            			}
            			else {
HXLINE( 560)				_hx_tmp2 = -1;
            			}
HXDLIN( 560)			::String color4 = ( (::String)( ::Dynamic(this->chartEditorSave->data->__Field(HX_("customGridColors",27,dc,bf,81),::hx::paccDynamic))->__GetItem(1)) );
HXDLIN( 560)			 ::EReg hideChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN( 560)			::String color5 = ::StringTools_obj::trim(hideChars2->split(color4)->join(HX_("",00,00,00,00)));
HXDLIN( 560)			if (::StringTools_obj::startsWith(color5,HX_("0x",48,2a,00,00))) {
HXLINE( 560)				color5 = color5.substring((color5.length - 6),null());
            			}
HXDLIN( 560)			 ::Dynamic colorNum2 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color5);
HXDLIN( 560)			if (::hx::IsNull( colorNum2 )) {
HXLINE( 560)				colorNum2 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color5));
            			}
HXDLIN( 560)			int _hx_tmp3;
HXDLIN( 560)			if (::hx::IsNotNull( colorNum2 )) {
HXLINE( 560)				_hx_tmp3 = ( (int)(colorNum2) );
            			}
            			else {
HXLINE( 560)				_hx_tmp3 = -1;
            			}
HXDLIN( 560)			this->gridColors = ::Array_obj< int >::__new(2)->init(0,_hx_tmp2)->init(1,_hx_tmp3);
HXLINE( 561)			::String color6 = ( (::String)( ::Dynamic(this->chartEditorSave->data->__Field(HX_("customNextGridColors",7a,8f,e5,4d),::hx::paccDynamic))->__GetItem(0)) );
HXDLIN( 561)			 ::EReg hideChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN( 561)			::String color7 = ::StringTools_obj::trim(hideChars3->split(color6)->join(HX_("",00,00,00,00)));
HXDLIN( 561)			if (::StringTools_obj::startsWith(color7,HX_("0x",48,2a,00,00))) {
HXLINE( 561)				color7 = color7.substring((color7.length - 6),null());
            			}
HXDLIN( 561)			 ::Dynamic colorNum3 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color7);
HXDLIN( 561)			if (::hx::IsNull( colorNum3 )) {
HXLINE( 561)				colorNum3 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color7));
            			}
HXDLIN( 561)			int _hx_tmp4;
HXDLIN( 561)			if (::hx::IsNotNull( colorNum3 )) {
HXLINE( 561)				_hx_tmp4 = ( (int)(colorNum3) );
            			}
            			else {
HXLINE( 561)				_hx_tmp4 = -1;
            			}
HXDLIN( 561)			::String color8 = ( (::String)( ::Dynamic(this->chartEditorSave->data->__Field(HX_("customNextGridColors",7a,8f,e5,4d),::hx::paccDynamic))->__GetItem(1)) );
HXDLIN( 561)			 ::EReg hideChars4 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN( 561)			::String color9 = ::StringTools_obj::trim(hideChars4->split(color8)->join(HX_("",00,00,00,00)));
HXDLIN( 561)			if (::StringTools_obj::startsWith(color9,HX_("0x",48,2a,00,00))) {
HXLINE( 561)				color9 = color9.substring((color9.length - 6),null());
            			}
HXDLIN( 561)			 ::Dynamic colorNum4 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color9);
HXDLIN( 561)			if (::hx::IsNull( colorNum4 )) {
HXLINE( 561)				colorNum4 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color9));
            			}
HXDLIN( 561)			int _hx_tmp5;
HXDLIN( 561)			if (::hx::IsNotNull( colorNum4 )) {
HXLINE( 561)				_hx_tmp5 = ( (int)(colorNum4) );
            			}
            			else {
HXLINE( 561)				_hx_tmp5 = -1;
            			}
HXDLIN( 561)			this->gridColorsOther = ::Array_obj< int >::__new(2)->init(0,_hx_tmp4)->init(1,_hx_tmp5);
HXLINE( 558)			goto _hx_goto_19;
            		}
            		if (  (_hx_switch_0==HX_("dark",76,54,63,42)) ){
HXLINE( 551)			this->bg->set_color(-14540254);
HXLINE( 552)			this->gridColors = ::Array_obj< int >::fromData( _hx_array_data_f85b0019_21,2);
HXLINE( 553)			this->gridColorsOther = ::Array_obj< int >::fromData( _hx_array_data_f85b0019_22,2);
HXLINE( 550)			goto _hx_goto_19;
            		}
            		if (  (_hx_switch_0==HX_("light",d6,90,fc,74)) ){
HXLINE( 547)			this->bg->set_color(-6250336);
HXLINE( 548)			this->gridColors = ::Array_obj< int >::fromData( _hx_array_data_f85b0019_23,2);
HXLINE( 549)			this->gridColorsOther = ::Array_obj< int >::fromData( _hx_array_data_f85b0019_24,2);
HXLINE( 546)			goto _hx_goto_19;
            		}
            		if (  (_hx_switch_0==HX_("vslice",1c,58,e4,ac)) ){
HXLINE( 555)			this->bg->set_color(-10011977);
HXLINE( 556)			this->gridColors = ::Array_obj< int >::fromData( _hx_array_data_f85b0019_25,2);
HXLINE( 557)			this->gridColorsOther = ::Array_obj< int >::fromData( _hx_array_data_f85b0019_26,2);
HXLINE( 554)			goto _hx_goto_19;
            		}
            		/* default */{
HXLINE( 563)			this->bg->set_color(-13619152);
HXLINE( 564)			this->gridColors = ::Array_obj< int >::fromData( _hx_array_data_f85b0019_27,2);
HXLINE( 565)			this->gridColorsOther = ::Array_obj< int >::fromData( _hx_array_data_f85b0019_28,2);
            		}
            		_hx_goto_19:;
HXLINE( 568)		bool _hx_tmp6;
HXDLIN( 568)		if ((this->theme == oldTheme)) {
HXLINE( 568)			_hx_tmp6 = (this->theme == HX_("custom",b1,87,92,3f));
            		}
            		else {
HXLINE( 568)			_hx_tmp6 = true;
            		}
HXDLIN( 568)		if (_hx_tmp6) {
HXLINE( 570)			if (::hx::IsNotNull( this->gridBg )) {
HXLINE( 572)				this->gridBg->loadGrid(this->gridColors->__get(0),this->gridColors->__get(1));
HXLINE( 573)				this->gridBg->vortexLineEnabled = this->vortexEnabled;
HXLINE( 574)				this->gridBg->vortexLineSpace = (( (Float)((::states::editors::ChartingState_obj::GRID_SIZE * 4)) ) * this->curZoom);
            			}
HXLINE( 576)			if (::hx::IsNotNull( this->prevGridBg )) {
HXLINE( 578)				this->prevGridBg->loadGrid(this->gridColorsOther->__get(0),this->gridColorsOther->__get(1));
HXLINE( 579)				this->prevGridBg->vortexLineEnabled = this->vortexEnabled;
HXLINE( 580)				this->prevGridBg->vortexLineSpace = (( (Float)((::states::editors::ChartingState_obj::GRID_SIZE * 4)) ) * this->curZoom);
            			}
HXLINE( 582)			if (::hx::IsNotNull( this->nextGridBg )) {
HXLINE( 584)				this->nextGridBg->loadGrid(this->gridColorsOther->__get(0),this->gridColorsOther->__get(1));
HXLINE( 585)				this->nextGridBg->vortexLineEnabled = this->vortexEnabled;
HXLINE( 586)				this->nextGridBg->vortexLineSpace = (( (Float)((::states::editors::ChartingState_obj::GRID_SIZE * 4)) ) * this->curZoom);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,changeTheme,(void))

void ChartingState_obj::openNewChart(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_592_openNewChart)
HXLINE( 593)		 ::Dynamic song =  ::Dynamic(::hx::Anon_obj::Create(12)
            			->setFixed(0,HX_("speed",87,97,69,81),( (Float)(1) ))
            			->setFixed(1,HX_("stage",be,6a,0b,84),HX_("stage",be,6a,0b,84))
            			->setFixed(2,HX_("player1",b0,09,15,8a),HX_("bf",c4,55,00,00))
            			->setFixed(3,HX_("player2",b1,09,15,8a),HX_("dad",47,36,4c,00))
            			->setFixed(4,HX_("events",19,4f,6a,96),::cpp::VirtualArray_obj::__new(0))
            			->setFixed(5,HX_("notes",41,dc,ca,9f),::Array_obj< ::Dynamic>::__new(0))
            			->setFixed(6,HX_("gfVersion",b9,c6,7d,f3),HX_("gf",1f,5a,00,00))
            			->setFixed(7,HX_("format",37,8f,8e,fd),HX_("psych_v1",bf,0a,17,5b))
            			->setFixed(8,HX_("bpm",df,be,4a,00),( (Float)(150) ))
            			->setFixed(9,HX_("needsVoices",be,05,e9,0d),true)
            			->setFixed(10,HX_("song",d5,23,58,4c),HX_("Test",72,f4,d2,37))
            			->setFixed(11,HX_("offset",93,97,3f,60),( (Float)(0) )));
HXLINE( 608)		::backend::Song_obj::chartPath = null();
HXLINE( 609)		this->loadChart(song);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,openNewChart,(void))

void ChartingState_obj::prepareReload(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_613_prepareReload)
HXLINE( 614)		this->updateJsonData();
HXLINE( 615)		this->loadMusic(null());
HXLINE( 616)		this->reloadNotes();
HXLINE( 617)		this->onChartLoaded();
HXLINE( 618)		this->updateHeads(true);
HXLINE( 620)		this->autoSaveTime = ( (Float)(0) );
HXLINE( 621)		::backend::Conductor_obj::songPosition = ( (Float)(0) );
HXLINE( 622)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 622)			::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
            		}
HXLINE( 623)		this->curSec = 0;
HXLINE( 624)		this->loadSection(null());
HXLINE( 625)		this->forceDataUpdate = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,prepareReload,(void))

void ChartingState_obj::onChartLoaded(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_629_onChartLoaded)
HXLINE( 630)		if (::hx::IsNull( ::states::PlayState_obj::SONG )) {
HXLINE( 630)			return;
            		}
HXLINE( 633)		this->songNameInputText->set_text(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE( 634)		this->allowVocalsCheckBox->set_checked(::hx::IsNotEq( ::states::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic),false ));
HXLINE( 636)		this->bpmStepper->set_value(( (Float)(::states::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE( 637)		this->scrollSpeedStepper->set_value(( (Float)(::states::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ));
HXLINE( 638)		 ::backend::ui::PsychUINumericStepper _hx_tmp = this->audioOffsetStepper;
HXDLIN( 638)		Float _hx_tmp1;
HXDLIN( 638)		if (::Reflect_obj::hasField(::states::PlayState_obj::SONG,HX_("offset",93,97,3f,60))) {
HXLINE( 638)			_hx_tmp1 = ( (Float)(::states::PlayState_obj::SONG->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 638)			_hx_tmp1 = ( (Float)(0) );
            		}
HXDLIN( 638)		_hx_tmp->set_value(_hx_tmp1);
HXLINE( 639)		::backend::Conductor_obj::offset = this->audioOffsetStepper->value;
HXLINE( 641)		this->playerDropDown->set_selectedLabel(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 642)		this->opponentDropDown->set_selectedLabel(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 643)		this->girlfriendDropDown->set_selectedLabel(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) ));
HXLINE( 644)		this->stageDropDown->set_selectedLabel(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) ));
HXLINE( 645)		::backend::StageData_obj::loadDirectory(::states::PlayState_obj::SONG);
HXLINE( 648)		this->gameOverCharDropDown->set_selectedLabel(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("gameOverChar",5c,48,07,65),::hx::paccDynamic)) ));
HXLINE( 649)		this->gameOverSndInputText->set_text(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("gameOverSound",89,f8,70,3c),::hx::paccDynamic)) ));
HXLINE( 650)		this->gameOverLoopInputText->set_text(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("gameOverLoop",ea,8f,ff,6a),::hx::paccDynamic)) ));
HXLINE( 651)		this->gameOverRetryInputText->set_text(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("gameOverEnd",15,2d,a9,8d),::hx::paccDynamic)) ));
HXLINE( 653)		this->noRGBCheckBox->set_checked(::hx::IsEq( ::states::PlayState_obj::SONG->__Field(HX_("disableNoteRGB",33,ad,d1,4a),::hx::paccDynamic),true ));
HXLINE( 655)		this->noteTextureInputText->set_text(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("arrowSkin",e6,d4,f8,07),::hx::paccDynamic)) ));
HXLINE( 656)		this->noteSplashesInputText->set_text(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("splashSkin",84,03,e1,a1),::hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,onChartLoaded,(void))

void ChartingState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_674_update)
HXDLIN( 674)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 675)		if (!(this->fileDialog->completed)) {
HXLINE( 677)			this->lastFocus = ::backend::ui::PsychUIInputText_obj::focusOn;
HXLINE( 678)			return;
            		}
HXLINE( 681)		{
HXLINE( 681)			int _g_current = 0;
HXDLIN( 681)			::Array< int > _g_array = ::states::editors::ChartingState_obj::keysArray;
HXDLIN( 681)			while((_g_current < _g_array->length)){
HXLINE( 681)				int _g_value = _g_array->__get(_g_current);
HXDLIN( 681)				_g_current = (_g_current + 1);
HXDLIN( 681)				int _g_key = (_g_current - 1);
HXDLIN( 681)				int num = _g_key;
HXDLIN( 681)				int key = _g_value;
HXLINE( 682)				this->_keysPressedBuffer[num] = ::flixel::FlxG_obj::keys->checkStatus(key,2);
            			}
            		}
HXLINE( 684)		if ((this->autoSaveCap > 0)) {
HXLINE( 686)			 ::states::editors::ChartingState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 686)			_hx_tmp->autoSaveTime = (_hx_tmp->autoSaveTime + (elapsed / ((Float)60.0)));
HXLINE( 689)			if ((this->autoSaveTime >= this->autoSaveCap)) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::ChartingState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween _){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_756_update)
HXLINE( 756)					::flixel::tweens::FlxTween_obj::tween(_gthis->autoSaveIcon, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("startDelay",c1,af,3d,f3),2)));
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 691)				::flixel::tweens::FlxTween_obj::cancelTweensOf(this->autoSaveIcon,null());
HXLINE( 692)				this->autoSaveTime = ( (Float)(0) );
HXLINE( 693)				this->autoSaveIcon->set_alpha(( (Float)(0) ));
HXLINE( 694)				this->updateChartData();
HXLINE( 695)				::String chartName = HX_("unknown",8a,23,7b,e1);
HXLINE( 696)				if (::hx::IsNotNull( ::backend::Song_obj::chartPath )) {
HXLINE( 698)					chartName = ::StringTools_obj::replace(::backend::Song_obj::chartPath,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE( 699)					int chartName1 = (chartName.lastIndexOf(HX_("/",2f,00,00,00),null()) + 1);
HXDLIN( 699)					chartName = chartName.substring(chartName1,chartName.lastIndexOf(HX_(".",2e,00,00,00),null()));
            				}
HXLINE( 701)				chartName = (chartName + ::DateTools_obj::format(::Date_obj::now(),HX_("_%Y-%m-%d_%H-%M-%S",fe,b7,05,0f)));
HXLINE( 702)				 ::Dynamic songCopy = ::Reflect_obj::copy(::states::PlayState_obj::SONG);
HXLINE( 703)				::Reflect_obj::setField(songCopy,HX_("__original_path",73,c0,d8,4c),::backend::Song_obj::chartPath);
HXLINE( 704)				 ::Dynamic replacer = null();
HXDLIN( 704)				::String space = null();
HXDLIN( 704)				::String dataToSave = ::haxe::format::JsonPrinter_obj::print(songCopy,replacer,space);
HXLINE( 706)				if (!(::sys::FileSystem_obj::isDirectory(HX_("backups",f1,e1,93,fb)))) {
HXLINE( 706)					::sys::FileSystem_obj::createDirectory(HX_("backups",f1,e1,93,fb));
            				}
HXLINE( 707)				::sys::io::File_obj::saveContent((((HX_("backups/",1e,d1,d1,25) + chartName) + HX_(".",2e,00,00,00)) + this->BACKUP_EXT),dataToSave);
HXLINE( 709)				if ((this->backupLimit > 0)) {
HXLINE( 711)					::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN( 711)					{
HXLINE( 711)						int _g1 = 0;
HXDLIN( 711)						::Array< ::String > _g2 = ::sys::FileSystem_obj::readDirectory(HX_("backups/",1e,d1,d1,25));
HXDLIN( 711)						while((_g1 < _g2->length)){
HXLINE( 711)							::String v = _g2->__get(_g1);
HXDLIN( 711)							_g1 = (_g1 + 1);
HXDLIN( 711)							if (::StringTools_obj::endsWith(v,(HX_(".",2e,00,00,00) + _gthis->BACKUP_EXT))) {
HXLINE( 711)								_g->push(v);
            							}
            						}
            					}
HXDLIN( 711)					::Array< ::String > files = _g;
HXLINE( 712)					if ((files->length > this->backupLimit)) {
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::haxe::ds::StringMap,map) HXARGC(2)
            						int _hx_run(::String a,::String b){
            							HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_740_update)
HXLINE( 740)							 ::Dynamic _hx_tmp = map->get(a);
HXDLIN( 740)							if (::hx::IsGreater( _hx_tmp,map->get(b) )) {
HXLINE( 740)								return 1;
            							}
            							else {
HXLINE( 740)								return -1;
            							}
HXDLIN( 740)							return 0;
            						}
            						HX_END_LOCAL_FUNC2(return)

HXLINE( 714)						::Array< ::String > incorrect = ::Array_obj< ::String >::__new(0);
HXLINE( 715)						 ::haxe::ds::StringMap map =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 716)						{
HXLINE( 716)							int _g3 = 0;
HXDLIN( 716)							while((_g3 < files->length)){
HXLINE( 716)								::String file = files->__get(_g3);
HXDLIN( 716)								_g3 = (_g3 + 1);
HXLINE( 718)								::Array< ::String > split = file.split(HX_("_",5f,00,00,00));
HXLINE( 719)								if ((split->length > 2)) {
HXLINE( 721)									try {
            										HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 723)										::String timeStr = ::StringTools_obj::replace(split->__get((split->length - 1)),HX_("-",2d,00,00,00),HX_(":",3a,00,00,00));
HXLINE( 724)										timeStr = timeStr.substr(0,timeStr.indexOf(HX_(".",2e,00,00,00),null()));
HXLINE( 726)										::String fileJoin = ((split->__get((split->length - 2)) + HX_(" ",20,00,00,00)) + timeStr);
HXLINE( 727)										 ::Date date = ::Date_obj::fromString(fileJoin);
HXLINE( 729)										{
HXLINE( 729)											Float value = date->getTime();
HXDLIN( 729)											map->set(file,value);
            										}
            									} catch( ::Dynamic _hx_e) {
            										if (_hx_e.IsClass<  ::Dynamic >() ){
            											HX_STACK_BEGIN_CATCH
            											 ::Dynamic _g4 = _hx_e;
HXLINE( 733)											incorrect->push(file);
            										}
            										else {
            											HX_STACK_DO_THROW(_hx_e);
            										}
            									}
            								}
            								else {
HXLINE( 736)									incorrect->push(file);
            								}
            							}
            						}
HXLINE( 739)						if ((incorrect->length > 0)) {
HXLINE( 739)							::Array< ::String > _g5 = ::Array_obj< ::String >::__new(0);
HXDLIN( 739)							int _g6 = 0;
HXDLIN( 739)							::Array< ::String > _g7 = files;
HXDLIN( 739)							while((_g6 < _g7->length)){
HXLINE( 739)								::String v1 = _g7->__get(_g6);
HXDLIN( 739)								_g6 = (_g6 + 1);
HXDLIN( 739)								if (!(incorrect->contains(v1))) {
HXLINE( 739)									_g5->push(v1);
            								}
            							}
HXDLIN( 739)							files = _g5;
            						}
HXLINE( 740)						files->sort( ::Dynamic(new _hx_Closure_0(map)));
HXLINE( 742)						while((files->length > this->backupLimit)){
HXLINE( 744)							::String file1 = ( (::String)(files->shift()) );
HXLINE( 746)							try {
            								HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 748)								::sys::FileSystem_obj::deleteFile((HX_("backups/",1e,d1,d1,25) + file1));
            							} catch( ::Dynamic _hx_e) {
            								if (_hx_e.IsClass<  ::Dynamic >() ){
            									HX_STACK_BEGIN_CATCH
            									 ::Dynamic _g8 = _hx_e;
            								}
            								else {
            									HX_STACK_DO_THROW(_hx_e);
            								}
            							}
            						}
            					}
            				}
HXLINE( 755)				::flixel::tweens::FlxTween_obj::tween(this->autoSaveIcon, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(_gthis)))));
            			}
            		}
HXLINE( 761)		::backend::ClientPrefs_obj::toggleVolumeKeys(::hx::IsNull( ::backend::ui::PsychUIInputText_obj::focusOn ));
HXLINE( 763)		Float lastTime = ::backend::Conductor_obj::songPosition;
HXLINE( 764)		this->outputAlpha = ::Math_obj::max(( (Float)(0) ),(this->outputAlpha - elapsed));
HXLINE( 765)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 765)		bool holdingAlt = _this->keyManager->checkStatusUnsafe(18,_this->status);
HXLINE( 766)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 768)			if (::hx::IsNull( ::backend::ui::PsychUIInputText_obj::focusOn )) {
HXLINE( 770)				 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 770)				if (_this1->keyManager->checkStatusUnsafe(123,_this1->status)) {
HXLINE( 772)					this->super::update(elapsed);
HXLINE( 773)					this->openEditorPlayState();
HXLINE( 774)					this->lastFocus = ::backend::ui::PsychUIInputText_obj::focusOn;
HXLINE( 775)					return;
            				}
            				else {
HXLINE( 777)					 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 777)					if (_this2->keyManager->checkStatusUnsafe(112,_this2->status)) {
HXLINE( 779)						bool vis = !(this->fullTipText->visible);
HXLINE( 780)						 ::flixel::FlxSprite _hx_tmp1 = this->tipBg;
HXDLIN( 780)						 ::flixel::FlxSprite _hx_tmp2 = this->tipBg;
HXDLIN( 780)						 ::flixel::text::FlxText _hx_tmp3 = this->fullTipText;
HXDLIN( 780)						_hx_tmp1->set_visible(_hx_tmp2->set_active(_hx_tmp3->set_visible(this->fullTipText->set_active(vis))));
            					}
            				}
HXLINE( 783)				bool goingBack = false;
HXLINE( 784)				bool _hx_tmp4;
HXDLIN( 784)				 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 784)				if (!(_this3->keyManager->checkStatusUnsafe(221,_this3->status))) {
HXLINE( 784)					 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 784)					if (_this4->keyManager->checkStatusUnsafe(219,_this4->status)) {
HXLINE( 784)						goingBack = true;
HXDLIN( 784)						_hx_tmp4 = goingBack;
            					}
            					else {
HXLINE( 784)						_hx_tmp4 = false;
            					}
            				}
            				else {
HXLINE( 784)					_hx_tmp4 = true;
            				}
HXDLIN( 784)				if (_hx_tmp4) {
HXLINE( 786)					if (holdingAlt) {
HXLINE( 788)						if ((this->playbackRate != 1)) {
HXLINE( 790)							this->playbackRate = ( (Float)(1) );
HXLINE( 791)							this->setPitch(null());
            						}
            					}
            					else {
HXLINE( 796)						int Value;
HXDLIN( 796)						if (!(goingBack)) {
HXLINE( 796)							Value = 1;
            						}
            						else {
HXLINE( 796)							Value = -1;
            						}
HXDLIN( 796)						Float Value1 = (this->playbackRate + (elapsed * ( (Float)(Value) )));
HXDLIN( 796)						 ::Dynamic Min = this->playbackSlider->min;
HXDLIN( 796)						 ::Dynamic Max = this->playbackSlider->max;
HXDLIN( 796)						Float lowerBound;
HXDLIN( 796)						bool lowerBound1;
HXDLIN( 796)						if (::hx::IsNotNull( Min )) {
HXLINE( 796)							lowerBound1 = ::hx::IsLess( Value1,Min );
            						}
            						else {
HXLINE( 796)							lowerBound1 = false;
            						}
HXDLIN( 796)						if (lowerBound1) {
HXLINE( 796)							lowerBound = ( (Float)(Min) );
            						}
            						else {
HXLINE( 796)							lowerBound = Value1;
            						}
HXDLIN( 796)						Float _hx_tmp5;
HXDLIN( 796)						bool _hx_tmp6;
HXDLIN( 796)						if (::hx::IsNotNull( Max )) {
HXLINE( 796)							_hx_tmp6 = ::hx::IsGreater( lowerBound,Max );
            						}
            						else {
HXLINE( 796)							_hx_tmp6 = false;
            						}
HXDLIN( 796)						if (_hx_tmp6) {
HXLINE( 796)							_hx_tmp5 = ( (Float)(Max) );
            						}
            						else {
HXLINE( 796)							_hx_tmp5 = lowerBound;
            						}
HXDLIN( 796)						this->playbackRate = _hx_tmp5;
HXLINE( 797)						this->setPitch(null());
            					}
HXLINE( 799)					this->playbackSlider->set_value(this->playbackRate);
            				}
HXLINE( 802)				bool _hx_tmp7;
HXDLIN( 802)				if (this->vortexEnabled) {
HXLINE( 802)					_hx_tmp7 = this->_keysPressedBuffer->contains(true);
            				}
            				else {
HXLINE( 802)					_hx_tmp7 = false;
            				}
HXDLIN( 802)				if (_hx_tmp7) {
HXLINE( 804)					::String typeSelected = this->noteTypes->__get(this->noteTypeDropDown->selectedIndex);
HXLINE( 805)					if (::hx::IsNotNull( typeSelected )) {
HXLINE( 807)						typeSelected = ::StringTools_obj::trim(typeSelected);
HXLINE( 808)						if ((typeSelected.length < 1)) {
HXLINE( 808)							typeSelected = null();
            						}
            					}
HXLINE( 811)					Float sectionStart = this->cachedSectionTimes->__get(this->curSec);
HXLINE( 812)					Float strumTime = (::backend::Conductor_obj::songPosition - sectionStart);
HXLINE( 813)					strumTime = (strumTime - ::hx::Mod(strumTime,((::backend::Conductor_obj::stepCrochet * ( (Float)(16) )) / ( (Float)(this->curQuant) ))));
HXLINE( 814)					strumTime = (strumTime + sectionStart);
HXLINE( 816)					::haxe::Log_obj::trace((HX_("Vortex editor press at time: ",82,41,bf,b3) + strumTime),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),816,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("update",09,86,05,87)));
HXLINE( 817)					::Array< ::Dynamic> deletedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 818)					::Array< ::Dynamic> addedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 819)					{
HXLINE( 819)						int _g_current1 = 0;
HXDLIN( 819)						::Array< bool > _g_array1 = this->_keysPressedBuffer;
HXDLIN( 819)						while((_g_current1 < _g_array1->length)){
HXLINE( 819)							bool _g_value1 = _g_array1->__get(_g_current1);
HXDLIN( 819)							_g_current1 = (_g_current1 + 1);
HXDLIN( 819)							int _g_key1 = (_g_current1 - 1);
HXDLIN( 819)							int num1 = _g_key1;
HXDLIN( 819)							bool press = _g_value1;
HXLINE( 820)							{
HXLINE( 821)								if (!(press)) {
HXLINE( 821)									continue;
            								}
HXLINE( 824)								bool didDelete = false;
HXLINE( 825)								{
HXLINE( 825)									 ::Dynamic filter = null();
HXDLIN( 825)									 ::flixel::group::FlxTypedGroupIterator note =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->curRenderedNotes->members,filter);
HXDLIN( 825)									while(note->hasNext()){
HXLINE( 825)										 ::states::editors::content::MetaNote note1 = note->next().StaticCast<  ::states::editors::content::MetaNote >();
HXLINE( 827)										bool _hx_tmp8;
HXDLIN( 827)										if (::hx::IsNotNull( note1 )) {
HXLINE( 827)											_hx_tmp8 = note1->isEvent;
            										}
            										else {
HXLINE( 827)											_hx_tmp8 = true;
            										}
HXDLIN( 827)										if (_hx_tmp8) {
HXLINE( 827)											continue;
            										}
HXLINE( 829)										bool _hx_tmp9;
HXDLIN( 829)										if (::hx::IsEq( note1->songData->__get(1),num1 )) {
HXLINE( 829)											_hx_tmp9 = (::Math_obj::abs((strumTime - note1->strumTime)) < 1);
            										}
            										else {
HXLINE( 829)											_hx_tmp9 = false;
            										}
HXDLIN( 829)										if (_hx_tmp9) {
HXLINE( 831)											deletedNotes->push(note1);
HXLINE( 832)											didDelete = true;
HXLINE( 833)											goto _hx_goto_38;
            										}
            									}
            									_hx_goto_38:;
            								}
HXLINE( 837)								if (didDelete) {
HXLINE( 837)									continue;
            								}
HXLINE( 840)								bool didAdd = false;
HXLINE( 841)								::cpp::VirtualArray noteSetupData = ::cpp::VirtualArray_obj::__new(3)->init(0,strumTime)->init(1,num1)->init(2,0);
HXLINE( 842)								if (::hx::IsNotNull( typeSelected )) {
HXLINE( 842)									noteSetupData->push(typeSelected);
            								}
HXLINE( 844)								 ::states::editors::content::MetaNote noteAdded = this->createNote(noteSetupData,null());
HXLINE( 845)								{
HXLINE( 845)									int _g9 = this->sectionFirstNoteID;
HXDLIN( 845)									int _g10 = this->notes->length;
HXDLIN( 845)									while((_g9 < _g10)){
HXLINE( 845)										_g9 = (_g9 + 1);
HXDLIN( 845)										int num2 = (_g9 - 1);
HXLINE( 847)										 ::states::editors::content::MetaNote note2 = this->notes->__get(num2).StaticCast<  ::states::editors::content::MetaNote >();
HXLINE( 848)										if ((note2->strumTime >= strumTime)) {
HXLINE( 850)											this->notes->insert(num2,noteAdded);
HXLINE( 851)											didAdd = true;
HXLINE( 852)											goto _hx_goto_39;
            										}
            									}
            									_hx_goto_39:;
            								}
HXLINE( 855)								if (!(didAdd)) {
HXLINE( 855)									this->notes->push(noteAdded);
            								}
HXLINE( 856)								addedNotes->push(noteAdded);
            							}
            						}
            					}
HXLINE( 859)					if ((deletedNotes->length > 0)) {
HXLINE( 861)						bool wasSelected = false;
HXLINE( 862)						{
HXLINE( 862)							int _g11 = 0;
HXDLIN( 862)							while((_g11 < deletedNotes->length)){
HXLINE( 862)								 ::states::editors::content::MetaNote note3 = deletedNotes->__get(_g11).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN( 862)								_g11 = (_g11 + 1);
HXLINE( 864)								if (this->selectedNotes->contains(note3)) {
HXLINE( 866)									this->selectedNotes->remove(note3);
HXLINE( 867)									wasSelected = true;
            								}
HXLINE( 869)								this->notes->remove(note3);
            							}
            						}
HXLINE( 871)						if (wasSelected) {
HXLINE( 871)							this->onSelectNote();
            						}
HXLINE( 872)						this->addUndoAction(HX_("Delete Note",07,30,b0,81), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("notes",41,dc,ca,9f),deletedNotes)));
            					}
HXLINE( 874)					if ((addedNotes->length > 0)) {
HXLINE( 875)						this->addUndoAction(HX_("Add Note",91,46,97,60), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("notes",41,dc,ca,9f),addedNotes)));
            					}
HXLINE( 877)					this->softReloadNotes(true);
            				}
            				else {
HXLINE( 879)					bool _hx_tmp10;
HXDLIN( 879)					 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 879)					bool _hx_tmp11 = _this5->keyManager->checkStatusUnsafe(65,_this5->status);
HXDLIN( 879)					 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 879)					if ((_hx_tmp11 != _this6->keyManager->checkStatusUnsafe(68,_this6->status))) {
HXLINE( 879)						_hx_tmp10 = !(holdingAlt);
            					}
            					else {
HXLINE( 879)						_hx_tmp10 = false;
            					}
HXDLIN( 879)					if (_hx_tmp10) {
HXLINE( 881)						if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE( 882)							this->setSongPlaying(false);
            						}
HXLINE( 884)						int shiftAdd;
HXDLIN( 884)						 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 884)						if (_this7->keyManager->checkStatusUnsafe(16,_this7->status)) {
HXLINE( 884)							shiftAdd = 4;
            						}
            						else {
HXLINE( 884)							shiftAdd = 1;
            						}
HXLINE( 886)						 ::flixel::input::keyboard::FlxKeyList _this8 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 886)						if (_this8->keyManager->checkStatusUnsafe(65,_this8->status)) {
HXLINE( 888)							if (((this->curSec - shiftAdd) < 0)) {
HXLINE( 888)								shiftAdd = this->curSec;
            							}
HXLINE( 890)							if ((shiftAdd > 0)) {
HXLINE( 892)								this->loadSection((this->curSec - shiftAdd));
HXLINE( 893)								::backend::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->set_time(((this->cachedSectionTimes->__get(this->curSec) - ::backend::Conductor_obj::offset) + ((Float)0.000001)));
            							}
            						}
            						else {
HXLINE( 896)							 ::flixel::input::keyboard::FlxKeyList _this9 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 896)							if (_this9->keyManager->checkStatusUnsafe(68,_this9->status)) {
HXLINE( 898)								if (((this->curSec + shiftAdd) >= ( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length)) {
HXLINE( 898)									shiftAdd = ((( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length - this->curSec) - 1);
            								}
HXLINE( 900)								if ((shiftAdd > 0)) {
HXLINE( 902)									this->loadSection((this->curSec + shiftAdd));
HXLINE( 903)									::backend::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->set_time(((this->cachedSectionTimes->__get(this->curSec) - ::backend::Conductor_obj::offset) + ((Float)0.000001)));
            								}
            							}
            						}
            					}
            					else {
HXLINE( 907)						 ::flixel::input::keyboard::FlxKeyList _this10 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 907)						if (_this10->keyManager->checkStatusUnsafe(36,_this10->status)) {
HXLINE( 909)							this->setSongPlaying(false);
HXLINE( 910)							::backend::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
HXLINE( 911)							this->loadSection(0);
            						}
            						else {
HXLINE( 913)							 ::flixel::input::keyboard::FlxKeyList _this11 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 913)							if (_this11->keyManager->checkStatusUnsafe(35,_this11->status)) {
HXLINE( 915)								this->setSongPlaying(false);
HXLINE( 916)								::backend::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->set_time((::flixel::FlxG_obj::sound->music->_length - ( (Float)(1) )));
HXLINE( 917)								this->loadSection((( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length - 1));
            							}
            							else {
HXLINE( 919)								 ::flixel::input::keyboard::FlxKeyList _this12 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 919)								if (_this12->keyManager->checkStatusUnsafe(82,_this12->status)) {
HXLINE( 921)									Float timeToGoBack = ( (Float)(0) );
HXLINE( 922)									 ::flixel::input::keyboard::FlxKeyList _this13 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 922)									if (!(_this13->keyManager->checkStatusUnsafe(16,_this13->status))) {
HXLINE( 922)										Float timeToGoBack1;
HXDLIN( 922)										if ((this->curSec > 0)) {
HXLINE( 922)											timeToGoBack1 = ((Float)0.000001);
            										}
            										else {
HXLINE( 922)											timeToGoBack1 = ( (Float)(0) );
            										}
HXDLIN( 922)										timeToGoBack = (this->cachedSectionTimes->__get(this->curSec) + timeToGoBack1);
            									}
            									else {
HXLINE( 923)										this->loadSection(0);
            									}
HXLINE( 924)									 ::flixel::sound::FlxSound _hx_tmp12 = ::flixel::FlxG_obj::sound->music;
HXDLIN( 924)									 ::flixel::sound::FlxSound _hx_tmp13 = this->vocals;
HXDLIN( 924)									::backend::Conductor_obj::songPosition = _hx_tmp12->set_time(_hx_tmp13->set_time(this->opponentVocals->set_time(timeToGoBack)));
            								}
            								else {
HXLINE( 926)									bool _hx_tmp14;
HXDLIN( 926)									 ::flixel::input::keyboard::FlxKeyList _this14 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 926)									bool _hx_tmp15 = _this14->keyManager->checkStatusUnsafe(87,_this14->status);
HXDLIN( 926)									 ::flixel::input::keyboard::FlxKeyList _this15 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 926)									if ((_hx_tmp15 == _this15->keyManager->checkStatusUnsafe(83,_this15->status))) {
HXLINE( 926)										_hx_tmp14 = (::flixel::FlxG_obj::mouse->wheel != 0);
            									}
            									else {
HXLINE( 926)										_hx_tmp14 = true;
            									}
HXDLIN( 926)									if (_hx_tmp14) {
HXLINE( 928)										if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE( 929)											this->setSongPlaying(false);
            										}
HXLINE( 931)										bool _hx_tmp16;
HXDLIN( 931)										if (this->mouseSnapCheckBox->checked) {
HXLINE( 931)											_hx_tmp16 = (::flixel::FlxG_obj::mouse->wheel != 0);
            										}
            										else {
HXLINE( 931)											_hx_tmp16 = false;
            										}
HXDLIN( 931)										if (_hx_tmp16) {
HXLINE( 933)											Float snap = ((::backend::Conductor_obj::stepCrochet / (( (Float)(this->curQuant) ) / ( (Float)(16) ))) / this->curZoom);
HXLINE( 934)											int timeAdd;
HXDLIN( 934)											 ::flixel::input::keyboard::FlxKeyList _this16 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 934)											if (_this16->keyManager->checkStatusUnsafe(16,_this16->status)) {
HXLINE( 934)												timeAdd = 4;
            											}
            											else {
HXLINE( 934)												timeAdd = 1;
            											}
HXDLIN( 934)											int timeAdd1;
HXDLIN( 934)											if (holdingAlt) {
HXLINE( 934)												timeAdd1 = 4;
            											}
            											else {
HXLINE( 934)												timeAdd1 = 1;
            											}
HXDLIN( 934)											Float timeAdd2 = (((( (Float)(timeAdd) ) / ( (Float)(timeAdd1) )) * ( (Float)(-(::flixel::FlxG_obj::mouse->wheel)) )) * snap);
HXLINE( 935)											Float time = (( (Float)(::Math_obj::round(((::flixel::FlxG_obj::sound->music->_time + timeAdd2) / snap))) ) * snap);
HXLINE( 936)											if ((time > 0)) {
HXLINE( 936)												time = (time + ((Float)0.000001));
            											}
HXLINE( 937)											::flixel::FlxG_obj::sound->music->set_time(time);
            										}
            										else {
HXLINE( 941)											int speedMult;
HXDLIN( 941)											 ::flixel::input::keyboard::FlxKeyList _this17 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 941)											if (_this17->keyManager->checkStatusUnsafe(16,_this17->status)) {
HXLINE( 941)												speedMult = 4;
            											}
            											else {
HXLINE( 941)												speedMult = 1;
            											}
HXDLIN( 941)											int speedMult1;
HXDLIN( 941)											if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE( 941)												speedMult1 = 4;
            											}
            											else {
HXLINE( 941)												speedMult1 = 1;
            											}
HXDLIN( 941)											int speedMult2;
HXDLIN( 941)											if (holdingAlt) {
HXLINE( 941)												speedMult2 = 4;
            											}
            											else {
HXLINE( 941)												speedMult2 = 1;
            											}
HXDLIN( 941)											Float speedMult3 = (( (Float)((speedMult * speedMult1)) ) / ( (Float)(speedMult2) ));
HXLINE( 942)											bool _hx_tmp17;
HXDLIN( 942)											 ::flixel::input::keyboard::FlxKeyList _this18 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 942)											if (!(_this18->keyManager->checkStatusUnsafe(87,_this18->status))) {
HXLINE( 942)												_hx_tmp17 = (::flixel::FlxG_obj::mouse->wheel > 0);
            											}
            											else {
HXLINE( 942)												_hx_tmp17 = true;
            											}
HXDLIN( 942)											if (_hx_tmp17) {
HXLINE( 943)												 ::flixel::sound::FlxSound fh = ::flixel::FlxG_obj::sound->music;
HXDLIN( 943)												fh->set_time((fh->_time - ((((::backend::Conductor_obj::crochet * speedMult3) * ((Float)1.5)) * elapsed) / this->curZoom)));
            											}
            											else {
HXLINE( 944)												bool _hx_tmp18;
HXDLIN( 944)												 ::flixel::input::keyboard::FlxKeyList _this19 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 944)												if (!(_this19->keyManager->checkStatusUnsafe(83,_this19->status))) {
HXLINE( 944)													_hx_tmp18 = (::flixel::FlxG_obj::mouse->wheel < 0);
            												}
            												else {
HXLINE( 944)													_hx_tmp18 = true;
            												}
HXDLIN( 944)												if (_hx_tmp18) {
HXLINE( 945)													 ::flixel::sound::FlxSound fh1 = ::flixel::FlxG_obj::sound->music;
HXDLIN( 945)													fh1->set_time((fh1->_time + ((((::backend::Conductor_obj::crochet * speedMult3) * ((Float)1.5)) * elapsed) / this->curZoom)));
            												}
            											}
            										}
HXLINE( 948)										Float Value2 = ::flixel::FlxG_obj::sound->music->_time;
HXDLIN( 948)										 ::Dynamic Max1 = (::flixel::FlxG_obj::sound->music->_length - ( (Float)(1) ));
HXDLIN( 948)										Float lowerBound2;
HXDLIN( 948)										if ((Value2 < 0)) {
HXLINE( 948)											lowerBound2 = ( (Float)(0) );
            										}
            										else {
HXLINE( 948)											lowerBound2 = Value2;
            										}
HXDLIN( 948)										Float _hx_tmp19;
HXDLIN( 948)										bool _hx_tmp20;
HXDLIN( 948)										if (::hx::IsNotNull( Max1 )) {
HXLINE( 948)											_hx_tmp20 = ::hx::IsGreater( lowerBound2,Max1 );
            										}
            										else {
HXLINE( 948)											_hx_tmp20 = false;
            										}
HXDLIN( 948)										if (_hx_tmp20) {
HXLINE( 948)											_hx_tmp19 = ( (Float)(Max1) );
            										}
            										else {
HXLINE( 948)											_hx_tmp19 = lowerBound2;
            										}
HXDLIN( 948)										::flixel::FlxG_obj::sound->music->set_time(_hx_tmp19);
HXLINE( 949)										if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE( 949)											this->setSongPlaying(::hx::IsNull( ::flixel::FlxG_obj::sound->music->_channel ));
            										}
            									}
            									else {
HXLINE( 951)										 ::flixel::input::keyboard::FlxKeyList _this20 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 951)										if (_this20->keyManager->checkStatusUnsafe(32,_this20->status)) {
HXLINE( 953)											this->setSongPlaying(::hx::IsNull( ::flixel::FlxG_obj::sound->music->_channel ));
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 957)			if (!(this->songFinished)) {
HXLINE( 957)				Float Value3 = (::flixel::FlxG_obj::sound->music->_time + ::backend::Conductor_obj::offset);
HXDLIN( 957)				 ::Dynamic Max2 = (::flixel::FlxG_obj::sound->music->_length - ( (Float)(1) ));
HXDLIN( 957)				Float lowerBound3;
HXDLIN( 957)				if ((Value3 < 0)) {
HXLINE( 957)					lowerBound3 = ( (Float)(0) );
            				}
            				else {
HXLINE( 957)					lowerBound3 = Value3;
            				}
HXDLIN( 957)				Float _hx_tmp21;
HXDLIN( 957)				bool _hx_tmp22;
HXDLIN( 957)				if (::hx::IsNotNull( Max2 )) {
HXLINE( 957)					_hx_tmp22 = ::hx::IsGreater( lowerBound3,Max2 );
            				}
            				else {
HXLINE( 957)					_hx_tmp22 = false;
            				}
HXDLIN( 957)				if (_hx_tmp22) {
HXLINE( 957)					_hx_tmp21 = ( (Float)(Max2) );
            				}
            				else {
HXLINE( 957)					_hx_tmp21 = lowerBound3;
            				}
HXDLIN( 957)				::backend::Conductor_obj::songPosition = _hx_tmp21;
            			}
HXLINE( 958)			this->updateScrollY();
            		}
HXLINE( 961)		this->super::update(elapsed);
HXLINE( 963)		if (this->songFinished) {
HXLINE( 965)			this->onSongComplete();
HXLINE( 966)			lastTime = ::flixel::FlxG_obj::sound->music->_time;
HXLINE( 967)			this->songFinished = false;
            		}
            		else {
HXLINE( 969)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 971)				if ((::flixel::FlxG_obj::sound->music->_time >= this->vocals->_length)) {
HXLINE( 972)					this->vocals->pause();
            				}
HXLINE( 973)				if ((::flixel::FlxG_obj::sound->music->_time >= this->opponentVocals->_length)) {
HXLINE( 974)					this->opponentVocals->pause();
            				}
HXLINE( 976)				while(true){
HXLINE( 976)					bool _hx_tmp23;
HXDLIN( 976)					if ((this->curSec > 0)) {
HXLINE( 976)						_hx_tmp23 = (::backend::Conductor_obj::songPosition < this->cachedSectionTimes->__get(this->curSec));
            					}
            					else {
HXLINE( 976)						_hx_tmp23 = false;
            					}
HXDLIN( 976)					if (!(_hx_tmp23)) {
HXLINE( 976)						goto _hx_goto_41;
            					}
HXLINE( 977)					this->loadSection((this->curSec - 1));
            				}
            				_hx_goto_41:;
HXLINE( 978)				while(true){
HXLINE( 978)					bool _hx_tmp24;
HXDLIN( 978)					if ((this->curSec < (this->cachedSectionTimes->length - 1))) {
HXLINE( 978)						_hx_tmp24 = (::backend::Conductor_obj::songPosition >= this->cachedSectionTimes->__get((this->curSec + 1)));
            					}
            					else {
HXLINE( 978)						_hx_tmp24 = false;
            					}
HXDLIN( 978)					if (!(_hx_tmp24)) {
HXLINE( 978)						goto _hx_goto_42;
            					}
HXLINE( 979)					this->loadSection((this->curSec + 1));
            				}
            				_hx_goto_42:;
            			}
            		}
HXLINE( 982)		bool _hx_tmp25;
HXDLIN( 982)		if (::hx::IsNull( ::backend::ui::PsychUIInputText_obj::focusOn )) {
HXLINE( 982)			_hx_tmp25 = ::hx::IsNull( this->lastFocus );
            		}
            		else {
HXLINE( 982)			_hx_tmp25 = false;
            		}
HXDLIN( 982)		if (_hx_tmp25) {
HXLINE( 984)			bool doCut = false;
HXLINE( 985)			bool canContinue = true;
HXLINE( 986)			 ::flixel::input::keyboard::FlxKeyList _this21 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 986)			if (_this21->keyManager->checkStatusUnsafe(13,_this21->status)) {
HXLINE( 988)				this->goToPlayState();
HXLINE( 989)				return;
            			}
            			else {
HXLINE( 991)				bool _hx_tmp26;
HXDLIN( 991)				bool _hx_tmp27;
HXDLIN( 991)				 ::flixel::input::keyboard::FlxKeyList _this22 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 991)				if (_this22->keyManager->checkStatusUnsafe(17,_this22->status)) {
HXLINE( 991)					_hx_tmp27 = !(this->isMovingNotes);
            				}
            				else {
HXLINE( 991)					_hx_tmp27 = false;
            				}
HXDLIN( 991)				if (_hx_tmp27) {
HXLINE( 991)					bool _hx_tmp28;
HXDLIN( 991)					bool _hx_tmp29;
HXDLIN( 991)					bool _hx_tmp30;
HXDLIN( 991)					bool _hx_tmp31;
HXDLIN( 991)					bool _hx_tmp32;
HXDLIN( 991)					 ::flixel::input::keyboard::FlxKeyList _this23 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 991)					if (!(_this23->keyManager->checkStatusUnsafe(90,_this23->status))) {
HXLINE( 991)						 ::flixel::input::keyboard::FlxKeyList _this24 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 991)						_hx_tmp32 = _this24->keyManager->checkStatusUnsafe(89,_this24->status);
            					}
            					else {
HXLINE( 991)						_hx_tmp32 = true;
            					}
HXDLIN( 991)					if (!(_hx_tmp32)) {
HXLINE( 991)						 ::flixel::input::keyboard::FlxKeyList _this25 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 991)						_hx_tmp31 = _this25->keyManager->checkStatusUnsafe(88,_this25->status);
            					}
            					else {
HXLINE( 991)						_hx_tmp31 = true;
            					}
HXDLIN( 991)					if (!(_hx_tmp31)) {
HXLINE( 992)						 ::flixel::input::keyboard::FlxKeyList _this26 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXLINE( 991)						_hx_tmp30 = _this26->keyManager->checkStatusUnsafe(67,_this26->status);
            					}
            					else {
HXLINE( 991)						_hx_tmp30 = true;
            					}
HXDLIN( 991)					if (!(_hx_tmp30)) {
HXLINE( 992)						 ::flixel::input::keyboard::FlxKeyList _this27 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXLINE( 991)						_hx_tmp29 = _this27->keyManager->checkStatusUnsafe(86,_this27->status);
            					}
            					else {
HXLINE( 991)						_hx_tmp29 = true;
            					}
HXDLIN( 991)					if (!(_hx_tmp29)) {
HXLINE( 992)						 ::flixel::input::keyboard::FlxKeyList _this28 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXLINE( 991)						_hx_tmp28 = _this28->keyManager->checkStatusUnsafe(65,_this28->status);
            					}
            					else {
HXLINE( 991)						_hx_tmp28 = true;
            					}
HXDLIN( 991)					if (!(_hx_tmp28)) {
HXLINE( 992)						 ::flixel::input::keyboard::FlxKeyList _this29 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXLINE( 991)						_hx_tmp26 = _this29->keyManager->checkStatusUnsafe(83,_this29->status);
            					}
            					else {
HXLINE( 991)						_hx_tmp26 = true;
            					}
            				}
            				else {
HXLINE( 991)					_hx_tmp26 = false;
            				}
HXDLIN( 991)				if (_hx_tmp26) {
HXLINE( 994)					canContinue = false;
HXLINE( 995)					 ::flixel::input::keyboard::FlxKeyList _this30 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 995)					if (_this30->keyManager->checkStatusUnsafe(90,_this30->status)) {
HXLINE( 996)						this->undo();
            					}
            					else {
HXLINE( 997)						 ::flixel::input::keyboard::FlxKeyList _this31 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 997)						if (_this31->keyManager->checkStatusUnsafe(89,_this31->status)) {
HXLINE( 998)							this->redo();
            						}
            						else {
HXLINE( 999)							bool _hx_tmp33;
HXDLIN( 999)							 ::flixel::input::keyboard::FlxKeyList _this32 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 999)							doCut = _this32->keyManager->checkStatusUnsafe(88,_this32->status);
HXDLIN( 999)							if (!(doCut)) {
HXLINE( 999)								 ::flixel::input::keyboard::FlxKeyList _this33 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 999)								_hx_tmp33 = _this33->keyManager->checkStatusUnsafe(67,_this33->status);
            							}
            							else {
HXLINE( 999)								_hx_tmp33 = true;
            							}
HXDLIN( 999)							if (_hx_tmp33) {
HXLINE(1001)								if ((this->selectedNotes->length > 0)) {
            									HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(2)
            									int _hx_run(::cpp::VirtualArray a,::cpp::VirtualArray b){
            										HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1016_update)
HXLINE(1016)										Float Value1 = ( (Float)(a->__get(0)) );
HXDLIN(1016)										Float Value2 = ( (Float)(b->__get(0)) );
HXDLIN(1016)										int result = 0;
HXDLIN(1016)										if ((Value1 < Value2)) {
HXLINE(  30)											result = -1;
            										}
            										else {
HXLINE(1016)											if ((Value1 > Value2)) {
HXLINE(  34)												result = 1;
            											}
            										}
HXLINE(1016)										return result;
            									}
            									HX_END_LOCAL_FUNC2(return)

HXLINE(1003)									this->copiedNotes = ::cpp::VirtualArray_obj::__new(0);
HXLINE(1004)									this->copiedEvents = ::cpp::VirtualArray_obj::__new(0);
HXLINE(1005)									::Array< ::Dynamic> pushedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1007)									{
HXLINE(1007)										int _g12 = 0;
HXDLIN(1007)										::Array< ::Dynamic> _g13 = this->selectedNotes;
HXDLIN(1007)										while((_g12 < _g13->length)){
HXLINE(1007)											 ::states::editors::content::MetaNote note4 = _g13->__get(_g12).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(1007)											_g12 = (_g12 + 1);
HXLINE(1009)											if (::hx::IsNull( note4 )) {
HXLINE(1009)												continue;
            											}
HXLINE(1011)											::cpp::VirtualArray copied = this->makeNoteDataCopy(note4->songData,note4->isEvent);
HXLINE(1012)											pushedNotes->push(copied);
HXLINE(1013)											if (note4->isEvent) {
HXLINE(1013)												this->copiedEvents->push(copied);
            											}
            											else {
HXLINE(1014)												this->copiedNotes->push(copied);
            											}
            										}
            									}
HXLINE(1016)									pushedNotes->sort( ::Dynamic(new _hx_Closure_2()));
HXLINE(1018)									Float minTime = ( (Float)(::cpp::VirtualArray( pushedNotes->__get(0))->__get(0)) );
HXLINE(1019)									{
HXLINE(1019)										int _g14 = 0;
HXDLIN(1019)										while((_g14 < pushedNotes->length)){
HXLINE(1019)											::cpp::VirtualArray note5 = ::cpp::VirtualArray( pushedNotes->__get(_g14));
HXDLIN(1019)											_g14 = (_g14 + 1);
HXLINE(1020)											::cpp::VirtualArray note6 = note5;
HXDLIN(1020)											int _hx_tmp34 = 0;
HXDLIN(1020)											note6->set(_hx_tmp34,(note6->__get(_hx_tmp34) - minTime));
            										}
            									}
            								}
            							}
            							else {
HXLINE(1023)								 ::flixel::input::keyboard::FlxKeyList _this34 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1023)								if (_this34->keyManager->checkStatusUnsafe(86,_this34->status)) {
HXLINE(1025)									bool _hx_tmp35;
HXDLIN(1025)									if ((this->copiedNotes->get_length() <= 0)) {
HXLINE(1025)										_hx_tmp35 = (this->copiedEvents->get_length() > 0);
            									}
            									else {
HXLINE(1025)										_hx_tmp35 = true;
            									}
HXDLIN(1025)									if (_hx_tmp35) {
HXLINE(1027)										this->selectionBox->set_visible(false);
HXLINE(1028)										this->stopMovingNotes();
HXLINE(1029)										this->resetSelectedNotes();
HXLINE(1030)										this->selectedNotes = this->pasteCopiedNotesToSection(null(),null(),null());
HXLINE(1031)										this->selectedNotes->sort(::states::PlayState_obj::sortByTime_dyn());
HXLINE(1033)										bool didFind = false;
HXLINE(1034)										Float minNoteData = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1035)										{
HXLINE(1035)											int _g15 = 0;
HXDLIN(1035)											::Array< ::Dynamic> _g16 = this->selectedNotes;
HXDLIN(1035)											while((_g15 < _g16->length)){
HXLINE(1035)												 ::states::editors::content::MetaNote note7 = _g16->__get(_g15).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(1035)												_g15 = (_g15 + 1);
HXLINE(1037)												bool _hx_tmp36;
HXDLIN(1037)												if (::hx::IsNotNull( note7 )) {
HXLINE(1037)													_hx_tmp36 = note7->isEvent;
            												}
            												else {
HXLINE(1037)													_hx_tmp36 = true;
            												}
HXDLIN(1037)												if (_hx_tmp36) {
HXLINE(1037)													continue;
            												}
HXLINE(1039)												if (::hx::IsGreater( minNoteData,note7->songData->__get(1) )) {
HXLINE(1039)													minNoteData = ( (Float)(note7->songData->__get(1)) );
            												}
HXLINE(1040)												didFind = true;
            											}
            										}
HXLINE(1042)										if (!(didFind)) {
HXLINE(1042)											minNoteData = ( (Float)(0) );
            										}
HXLINE(1044)										::Array< ::Dynamic> pushedNotes1 = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1045)										::Array< ::Dynamic> pushedEvents = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1046)										{
HXLINE(1046)											int _g17 = 0;
HXDLIN(1046)											::Array< ::Dynamic> _g18 = this->selectedNotes;
HXDLIN(1046)											while((_g17 < _g18->length)){
HXLINE(1046)												 ::states::editors::content::MetaNote note8 = _g18->__get(_g17).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(1046)												_g17 = (_g17 + 1);
HXLINE(1048)												if (::hx::IsNull( note8 )) {
HXLINE(1048)													continue;
            												}
HXLINE(1050)												if (!(note8->isEvent)) {
HXLINE(1052)													note8->changeNoteData(::Std_obj::_hx_int((( (Float)(note8->songData->__get(1)) ) - minNoteData)));
HXLINE(1053)													pushedNotes1->push(note8);
            												}
            												else {
HXLINE(1055)													pushedEvents->push(note8);
            												}
            											}
            										}
HXLINE(1057)										this->addUndoAction(HX_("Add Note",91,46,97,60), ::Dynamic(::hx::Anon_obj::Create(2)
            											->setFixed(0,HX_("events",19,4f,6a,96),pushedEvents)
            											->setFixed(1,HX_("notes",41,dc,ca,9f),pushedNotes1)));
HXLINE(1058)										int _hx_tmp37 = ::Std_obj::_hx_int(minNoteData);
HXDLIN(1058)										this->moveSelectedNotes(_hx_tmp37,this->selectedNotes->__get(0).StaticCast<  ::states::editors::content::MetaNote >()->y);
            									}
            								}
            								else {
HXLINE(1061)									 ::flixel::input::keyboard::FlxKeyList _this35 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1061)									if (_this35->keyManager->checkStatusUnsafe(65,_this35->status)) {
HXLINE(1063)										::Array< ::Dynamic> sel = this->selectedNotes;
HXLINE(1064)										this->selectedNotes = this->curRenderedNotes->members->copy();
HXLINE(1065)										this->addUndoAction(HX_("Select Note",96,ff,25,4b), ::Dynamic(::hx::Anon_obj::Create(2)
            											->setFixed(0,HX_("current",39,9c,e3,cb),this->selectedNotes->copy())
            											->setFixed(1,HX_("old",a7,98,54,00),sel)));
HXLINE(1066)										this->onSelectNote();
HXLINE(1067)										::haxe::Log_obj::trace((HX_("Notes selected: ",60,a7,de,70) + this->selectedNotes->length),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),1067,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("update",09,86,05,87)));
            									}
            									else {
HXLINE(1069)										 ::flixel::input::keyboard::FlxKeyList _this36 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1069)										if (_this36->keyManager->checkStatusUnsafe(83,_this36->status)) {
HXLINE(1070)											this->saveChart(null());
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(1073)			bool _hx_tmp38;
HXDLIN(1073)			bool _hx_tmp39;
HXDLIN(1073)			bool _hx_tmp40;
HXDLIN(1073)			if (!(doCut)) {
HXLINE(1073)				 ::flixel::input::keyboard::FlxKeyList _this37 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1073)				_hx_tmp40 = _this37->keyManager->checkStatusUnsafe(46,_this37->status);
            			}
            			else {
HXLINE(1073)				_hx_tmp40 = true;
            			}
HXDLIN(1073)			if (!(_hx_tmp40)) {
HXLINE(1073)				 ::flixel::input::keyboard::FlxKeyList _this38 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1073)				_hx_tmp39 = _this38->keyManager->checkStatusUnsafe(8,_this38->status);
            			}
            			else {
HXLINE(1073)				_hx_tmp39 = true;
            			}
HXDLIN(1073)			if (!(_hx_tmp39)) {
HXLINE(1073)				if (this->isMovingNotes) {
HXLINE(1073)					if ((::flixel::FlxG_obj::mouse->_rightButton->current != 2)) {
HXLINE(1073)						 ::flixel::input::keyboard::FlxKeyList _this39 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1073)						_hx_tmp38 = _this39->keyManager->checkStatusUnsafe(27,_this39->status);
            					}
            					else {
HXLINE(1073)						_hx_tmp38 = true;
            					}
            				}
            				else {
HXLINE(1073)					_hx_tmp38 = false;
            				}
            			}
            			else {
HXLINE(1073)				_hx_tmp38 = true;
            			}
HXDLIN(1073)			if (_hx_tmp38) {
HXLINE(1075)				if ((this->selectedNotes->length > 0)) {
HXLINE(1077)					::Array< ::Dynamic> removedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1078)					::Array< ::Dynamic> removedEvents = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1079)					while((this->selectedNotes->length > 0)){
HXLINE(1081)						 ::states::editors::content::MetaNote note9 = this->selectedNotes->__get(0).StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(1082)						this->selectedNotes->shift().StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(1083)						if (::hx::IsNull( note9 )) {
HXLINE(1083)							continue;
            						}
HXLINE(1085)						::String kind;
HXDLIN(1085)						if (!(note9->isEvent)) {
HXLINE(1085)							kind = HX_("note",f2,17,0a,49);
            						}
            						else {
HXLINE(1085)							kind = HX_("event",1a,c8,c4,75);
            						}
HXLINE(1086)						::haxe::Log_obj::trace((((HX_("Removed ",a0,48,cd,86) + kind) + HX_(" at time: ",60,2f,24,33)) + note9->strumTime),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),1086,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("update",09,86,05,87)));
HXLINE(1087)						if (!(note9->isEvent)) {
HXLINE(1089)							this->notes->remove(note9);
HXLINE(1090)							removedNotes->push(note9);
            						}
            						else {
HXLINE(1094)							 ::states::editors::content::EventMetaNote ev = ::hx::TCast<  ::states::editors::content::EventMetaNote >::cast(note9);
HXLINE(1095)							this->events->remove(ev);
HXLINE(1096)							removedEvents->push(ev);
            						}
            					}
HXLINE(1099)					this->movingNotes->clear();
HXLINE(1100)					this->isMovingNotes = false;
HXLINE(1101)					this->selectedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1102)					this->onSelectNote();
HXLINE(1103)					this->softReloadNotes(null());
HXLINE(1104)					this->addUndoAction(HX_("Delete Note",07,30,b0,81), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("events",19,4f,6a,96),removedEvents)
            						->setFixed(1,HX_("notes",41,dc,ca,9f),removedNotes)));
            				}
            			}
            			else {
HXLINE(1107)				if (canContinue) {
HXLINE(1109)					 ::flixel::input::keyboard::FlxKeyList _this40 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1109)					bool _hx_tmp41 = _this40->keyManager->checkStatusUnsafe(37,_this40->status);
HXDLIN(1109)					 ::flixel::input::keyboard::FlxKeyList _this41 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1109)					if ((_hx_tmp41 != _this41->keyManager->checkStatusUnsafe(39,_this41->status))) {
HXLINE(1111)						 ::flixel::input::keyboard::FlxKeyList _this42 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1111)						if (_this42->keyManager->checkStatusUnsafe(37,_this42->status)) {
HXLINE(1112)							this->set_curQuant(this->quantizations->__get(::Std_obj::_hx_int(::Math_obj::max(( (Float)((this->quantizations->indexOf(this->curQuant,null()) - 1)) ),( (Float)(0) )))));
            						}
            						else {
HXLINE(1114)							::Array< int > _hx_tmp42 = this->quantizations;
HXDLIN(1114)							int _hx_tmp43 = (this->quantizations->indexOf(this->curQuant,null()) + 1);
HXDLIN(1114)							this->set_curQuant(_hx_tmp42->__get(::Std_obj::_hx_int(::Math_obj::min(( (Float)(_hx_tmp43) ),( (Float)((this->quantizations->length - 1)) )))));
            						}
HXLINE(1115)						this->forceDataUpdate = true;
            					}
            					else {
HXLINE(1117)						 ::flixel::input::keyboard::FlxKeyList _this43 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1117)						bool _hx_tmp44 = _this43->keyManager->checkStatusUnsafe(90,_this43->status);
HXDLIN(1117)						 ::flixel::input::keyboard::FlxKeyList _this44 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1117)						if ((_hx_tmp44 != _this44->keyManager->checkStatusUnsafe(88,_this44->status))) {
HXLINE(1119)							 ::flixel::input::keyboard::FlxKeyList _this45 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1119)							if (_this45->keyManager->checkStatusUnsafe(90,_this45->status)) {
HXLINE(1120)								this->curZoom = this->zoomList->__get(::Std_obj::_hx_int(::Math_obj::max(( (Float)((this->zoomList->indexOf(this->curZoom,null()) - 1)) ),( (Float)(0) ))));
            							}
            							else {
HXLINE(1122)								::Array< Float > _hx_tmp45 = this->zoomList;
HXDLIN(1122)								int _hx_tmp46 = (this->zoomList->indexOf(this->curZoom,null()) + 1);
HXDLIN(1122)								this->curZoom = _hx_tmp45->__get(::Std_obj::_hx_int(::Math_obj::min(( (Float)(_hx_tmp46) ),( (Float)((this->zoomList->length - 1)) ))));
            							}
HXLINE(1124)							this->notes->sort(::states::PlayState_obj::sortByTime_dyn());
HXLINE(1125)							int noteSec = 0;
HXLINE(1126)							Float nextSectionTime = this->cachedSectionTimes->__get((noteSec + 1));
HXLINE(1127)							Float curSectionTime = this->cachedSectionTimes->__get(noteSec);
HXLINE(1128)							{
HXLINE(1128)								int _g_current2 = 0;
HXDLIN(1128)								::Array< ::Dynamic> _g_array2 = this->notes;
HXDLIN(1128)								while((_g_current2 < _g_array2->length)){
HXLINE(1128)									 ::states::editors::content::MetaNote _g_value2 = _g_array2->__get(_g_current2).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(1128)									_g_current2 = (_g_current2 + 1);
HXDLIN(1128)									int _g_key2 = (_g_current2 - 1);
HXDLIN(1128)									int num3 = _g_key2;
HXDLIN(1128)									 ::states::editors::content::MetaNote note10 = _g_value2;
HXLINE(1129)									{
HXLINE(1130)										if (::hx::IsNull( note10 )) {
HXLINE(1130)											continue;
            										}
HXLINE(1132)										while((this->cachedSectionTimes->__get((noteSec + 1)) <= note10->strumTime)){
HXLINE(1134)											noteSec = (noteSec + 1);
HXLINE(1135)											nextSectionTime = this->cachedSectionTimes->__get((noteSec + 1));
HXLINE(1136)											curSectionTime = this->cachedSectionTimes->__get(noteSec);
            										}
HXLINE(1138)										this->positionNoteYOnTime(note10,noteSec);
HXLINE(1139)										note10->updateSustainToZoom((this->cachedSectionCrochets->__get(noteSec) / ( (Float)(4) )),this->curZoom);
            									}
            								}
            							}
HXLINE(1142)							{
HXLINE(1142)								int _g19 = 0;
HXDLIN(1142)								::Array< ::Dynamic> _g20 = this->events;
HXDLIN(1142)								while((_g19 < _g20->length)){
HXLINE(1142)									 ::states::editors::content::EventMetaNote event = _g20->__get(_g19).StaticCast<  ::states::editors::content::EventMetaNote >();
HXDLIN(1142)									_g19 = (_g19 + 1);
HXLINE(1144)									int secNum = 0;
HXLINE(1145)									{
HXLINE(1145)										int _g21 = 0;
HXDLIN(1145)										::Array< Float > _g22 = this->cachedSectionTimes;
HXDLIN(1145)										while((_g21 < _g22->length)){
HXLINE(1145)											Float time1 = _g22->__get(_g21);
HXDLIN(1145)											_g21 = (_g21 + 1);
HXLINE(1147)											if ((time1 > event->strumTime)) {
HXLINE(1147)												goto _hx_goto_51;
            											}
HXLINE(1148)											secNum = (secNum + 1);
            										}
            										_hx_goto_51:;
            									}
HXLINE(1150)									this->positionNoteYOnTime(event,secNum);
            								}
            							}
HXLINE(1152)							this->loadSection(null());
HXLINE(1153)							this->showOutput(((HX_("Zoom: ",99,74,4a,2f) + ::Math_obj::round((this->curZoom * ( (Float)(100) )))) + HX_("%",25,00,00,00)),null());
HXLINE(1154)							this->updateScrollY();
            						}
            					}
            				}
            			}
            		}
HXLINE(1159)		if (this->selectionBox->visible) {
HXLINE(1161)			 ::flixel::input::mouse::FlxMouseButton _this46 = ::flixel::FlxG_obj::mouse->_rightButton;
HXDLIN(1161)			bool _hx_tmp47;
HXDLIN(1161)			if ((_this46->current != 0)) {
HXLINE(1161)				_hx_tmp47 = (_this46->current == -1);
            			}
            			else {
HXLINE(1161)				_hx_tmp47 = true;
            			}
HXDLIN(1161)			if (_hx_tmp47) {
HXLINE(1163)				::Array< ::Dynamic> sel1 = this->selectedNotes->copy();
HXLINE(1164)				this->updateSelectionBox();
HXLINE(1165)				bool _hx_tmp48;
HXDLIN(1165)				 ::flixel::input::keyboard::FlxKeyList _this47 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1165)				if (!(_this47->keyManager->checkStatusUnsafe(16,_this47->status))) {
HXLINE(1165)					_hx_tmp48 = !(holdingAlt);
            				}
            				else {
HXLINE(1165)					_hx_tmp48 = false;
            				}
HXDLIN(1165)				if (_hx_tmp48) {
HXLINE(1166)					this->resetSelectedNotes();
            				}
HXLINE(1168)				 ::flixel::math::FlxRect selectionBounds = this->selectionBox->getScreenBounds(null(),this->camUI);
HXLINE(1169)				{
HXLINE(1169)					 ::Dynamic filter1 = null();
HXDLIN(1169)					 ::flixel::group::FlxTypedGroupIterator note11 =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->curRenderedNotes->members,filter1);
HXDLIN(1169)					while(note11->hasNext()){
HXLINE(1169)						 ::states::editors::content::MetaNote note12 = note11->next().StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(1171)						if (::hx::IsNull( note12 )) {
HXLINE(1171)							continue;
            						}
HXLINE(1173)						bool _hx_tmp49;
HXDLIN(1173)						if (this->selectedNotes->contains(note12)) {
HXLINE(1173)							_hx_tmp49 = holdingAlt;
            						}
            						else {
HXLINE(1173)							_hx_tmp49 = true;
            						}
HXDLIN(1173)						if (_hx_tmp49) {
HXLINE(1175)							 ::flixel::math::FlxRect noteBounds = note12->getScreenBounds(null(),this->camUI);
HXLINE(1176)							{
HXLINE(1176)								Float Value4 = (noteBounds->y - this->scrollY);
HXDLIN(1176)								 ::flixel::math::FlxRect noteBounds1 = noteBounds;
HXDLIN(1176)								noteBounds1->height = (noteBounds1->height - (Value4 - noteBounds->y));
HXDLIN(1176)								noteBounds->y = Value4;
            							}
HXLINE(1177)							{
HXLINE(1177)								Float Value5 = ((noteBounds->y + noteBounds->height) - this->scrollY);
HXDLIN(1177)								noteBounds->height = (Value5 - noteBounds->y);
            							}
HXLINE(1179)							bool result;
HXDLIN(1179)							bool result1;
HXDLIN(1179)							bool result2;
HXDLIN(1179)							if (((noteBounds->x + noteBounds->width) > selectionBounds->x)) {
HXLINE(1179)								result2 = (noteBounds->x < (selectionBounds->x + selectionBounds->width));
            							}
            							else {
HXLINE(1179)								result2 = false;
            							}
HXDLIN(1179)							if (result2) {
HXLINE(1179)								result1 = ((noteBounds->y + noteBounds->height) > selectionBounds->y);
            							}
            							else {
HXLINE(1179)								result1 = false;
            							}
HXDLIN(1179)							if (result1) {
HXLINE(1179)								result = (noteBounds->y < (selectionBounds->y + selectionBounds->height));
            							}
            							else {
HXLINE(1179)								result = false;
            							}
HXDLIN(1179)							if (noteBounds->_weak) {
HXLINE(1179)								if (!(noteBounds->_inPool)) {
HXLINE(1179)									noteBounds->_inPool = true;
HXDLIN(1179)									noteBounds->_weak = false;
HXDLIN(1179)									::flixel::math::FlxRect_obj::_pool->putUnsafe(noteBounds);
            								}
            							}
HXDLIN(1179)							if (result) {
HXLINE(1181)								bool _hx_tmp50;
HXDLIN(1181)								if (holdingAlt) {
HXLINE(1181)									_hx_tmp50 = this->selectedNotes->contains(note12);
            								}
            								else {
HXLINE(1181)									_hx_tmp50 = false;
            								}
HXDLIN(1181)								if (_hx_tmp50) {
HXLINE(1183)									this->selectedNotes->remove(note12);
HXLINE(1184)									note12->colorTransform->redMultiplier = (note12->colorTransform->greenMultiplier = (note12->colorTransform->blueMultiplier = ( (Float)(1) )));
HXLINE(1185)									if (::hx::IsNotNull( note12->animation->_curAnim )) {
HXLINE(1185)										note12->animation->_curAnim->set_curFrame(0);
            									}
            								}
            								else {
HXLINE(1187)									this->selectedNotes->push(note12);
            								}
HXLINE(1188)								this->onSelectNote();
            							}
            						}
            					}
            				}
HXLINE(1192)				this->selectionBox->set_visible(false);
HXLINE(1193)				this->addUndoAction(HX_("Select Note",96,ff,25,4b), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("current",39,9c,e3,cb),this->selectedNotes->copy())
            					->setFixed(1,HX_("old",a7,98,54,00),sel1)));
            			}
            			else {
HXLINE(1195)				 ::flixel::input::mouse::FlxMouse _this48 = ::flixel::FlxG_obj::mouse;
HXDLIN(1195)				bool _hx_tmp51;
HXDLIN(1195)				if ((_this48->_prevX == _this48->x)) {
HXLINE(1195)					_hx_tmp51 = (_this48->_prevY != _this48->y);
            				}
            				else {
HXLINE(1195)					_hx_tmp51 = true;
            				}
HXDLIN(1195)				if (_hx_tmp51) {
HXLINE(1196)					this->updateSelectionBox();
            				}
            			}
            		}
            		else {
HXLINE(1198)			bool _hx_tmp52;
HXDLIN(1198)			 ::flixel::input::mouse::FlxMouseButton _this49 = ::flixel::FlxG_obj::mouse->_rightButton;
HXDLIN(1198)			bool _hx_tmp53;
HXDLIN(1198)			if ((_this49->current != 1)) {
HXLINE(1198)				_hx_tmp53 = (_this49->current == 2);
            			}
            			else {
HXLINE(1198)				_hx_tmp53 = true;
            			}
HXDLIN(1198)			if (_hx_tmp53) {
HXLINE(1198)				 ::flixel::input::mouse::FlxMouse _this50 = ::flixel::FlxG_obj::mouse;
HXDLIN(1198)				if (((_this50->screenX - _this50->_prevScreenX) == 0)) {
HXLINE(1198)					 ::flixel::input::mouse::FlxMouse _this51 = ::flixel::FlxG_obj::mouse;
HXDLIN(1198)					_hx_tmp52 = ((_this51->screenY - _this51->_prevScreenY) != 0);
            				}
            				else {
HXLINE(1198)					_hx_tmp52 = true;
            				}
            			}
            			else {
HXLINE(1198)				_hx_tmp52 = false;
            			}
HXDLIN(1198)			if (_hx_tmp52) {
HXLINE(1200)				this->selectionBox->setPosition(::flixel::FlxG_obj::mouse->screenX,::flixel::FlxG_obj::mouse->screenY);
HXLINE(1201)				{
HXLINE(1201)					 ::flixel::math::FlxBasePoint this1 = this->selectionStart;
HXDLIN(1201)					Float y = ( (Float)(::flixel::FlxG_obj::mouse->screenY) );
HXDLIN(1201)					this1->set_x(( (Float)(::flixel::FlxG_obj::mouse->screenX) ));
HXDLIN(1201)					this1->set_y(y);
            				}
HXLINE(1202)				this->selectionBox->set_visible(true);
HXLINE(1203)				this->updateSelectionBox();
            			}
            		}
HXLINE(1206)		bool _hx_tmp54;
HXDLIN(1206)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE(1206)			if (!(::flixel::FlxG_obj::mouse->overlaps(this->mainBox->bg,null()))) {
HXLINE(1206)				_hx_tmp54 = ::flixel::FlxG_obj::mouse->overlaps(this->infoBox->bg,null());
            			}
            			else {
HXLINE(1206)				_hx_tmp54 = true;
            			}
            		}
            		else {
HXLINE(1206)			_hx_tmp54 = false;
            		}
HXDLIN(1206)		if (_hx_tmp54) {
HXLINE(1207)			this->ignoreClickForThisFrame = true;
            		}
HXLINE(1209)		Float minX = this->gridBg->x;
HXLINE(1210)		bool _hx_tmp55;
HXDLIN(1210)		if (::states::editors::ChartingState_obj::SHOW_EVENT_COLUMN) {
HXLINE(1210)			_hx_tmp55 = this->lockedEvents;
            		}
            		else {
HXLINE(1210)			_hx_tmp55 = false;
            		}
HXDLIN(1210)		if (_hx_tmp55) {
HXLINE(1210)			minX = (minX + ::states::editors::ChartingState_obj::GRID_SIZE);
            		}
HXLINE(1212)		bool _hx_tmp56;
HXDLIN(1212)		if (this->isMovingNotes) {
HXLINE(1212)			_hx_tmp56 = (::flixel::FlxG_obj::mouse->_leftButton->current == -1);
            		}
            		else {
HXLINE(1212)			_hx_tmp56 = false;
            		}
HXDLIN(1212)		if (_hx_tmp56) {
HXLINE(1213)			this->stopMovingNotes();
            		}
HXLINE(1215)		bool _hx_tmp57;
HXDLIN(1215)		if ((::flixel::FlxG_obj::mouse->x >= minX)) {
HXLINE(1215)			int _hx_tmp58 = ::flixel::FlxG_obj::mouse->x;
HXDLIN(1215)			Float _hx_tmp59 = this->gridBg->x;
HXDLIN(1215)			_hx_tmp57 = (_hx_tmp58 < (_hx_tmp59 + this->gridBg->get_width()));
            		}
            		else {
HXLINE(1215)			_hx_tmp57 = false;
            		}
HXDLIN(1215)		if (_hx_tmp57) {
HXLINE(1217)			Float diffX = (( (Float)(::flixel::FlxG_obj::mouse->x) ) - this->gridBg->x);
HXLINE(1218)			Float diffY = (( (Float)(::flixel::FlxG_obj::mouse->y) ) - this->gridBg->y);
HXLINE(1219)			 ::flixel::input::keyboard::FlxKeyList _this52 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1219)			if (!(_this52->keyManager->checkStatusUnsafe(16,_this52->status))) {
HXLINE(1220)				diffY = (diffY - ::hx::Mod(diffY,(( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ) / (( (Float)(this->curQuant) ) / ( (Float)(16) )))));
            			}
HXLINE(1222)			if (this->nextGridBg->visible) {
HXLINE(1222)				Float diffY1 = this->gridBg->get_height();
HXDLIN(1222)				diffY = ::Math_obj::min(diffY,(diffY1 + this->nextGridBg->get_height()));
            			}
            			else {
HXLINE(1223)				diffY = ::Math_obj::min(diffY,this->gridBg->get_height());
            			}
HXLINE(1225)			if (this->prevGridBg->visible) {
HXLINE(1225)				diffY = ::Math_obj::max(diffY,-(this->prevGridBg->get_height()));
            			}
            			else {
HXLINE(1226)				diffY = ::Math_obj::max(diffY,( (Float)(0) ));
            			}
HXLINE(1228)			int noteData = ::Math_obj::floor((diffX / ( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) )));
HXLINE(1229)			this->dummyArrow->set_visible(!(this->selectionBox->visible));
HXLINE(1230)			this->dummyArrow->set_x((this->gridBg->x + (noteData * ::states::editors::ChartingState_obj::GRID_SIZE)));
HXLINE(1231)			if (::states::editors::ChartingState_obj::SHOW_EVENT_COLUMN) {
HXLINE(1232)				noteData = (noteData - 1);
            			}
HXLINE(1234)			bool _hx_tmp60;
HXDLIN(1234)			bool _hx_tmp61;
HXDLIN(1234)			 ::flixel::input::keyboard::FlxKeyList _this53 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1234)			if (!(_this53->keyManager->checkStatusUnsafe(16,_this53->status))) {
HXLINE(1234)				_hx_tmp61 = (::flixel::FlxG_obj::mouse->y >= this->gridBg->y);
            			}
            			else {
HXLINE(1234)				_hx_tmp61 = true;
            			}
HXDLIN(1234)			if (!(_hx_tmp61)) {
HXLINE(1234)				_hx_tmp60 = !(this->prevGridBg->visible);
            			}
            			else {
HXLINE(1234)				_hx_tmp60 = true;
            			}
HXDLIN(1234)			if (_hx_tmp60) {
HXLINE(1235)				this->dummyArrow->set_y((this->gridBg->y + diffY));
            			}
            			else {
HXLINE(1238)				Float t = (diffY - (( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ) / (( (Float)(this->curQuant) ) / ( (Float)(16) ))));
HXLINE(1239)				if ((::flixel::FlxG_obj::mouse->y >= this->gridBg->y)) {
HXLINE(1239)					t = (t * this->curZoom);
            				}
HXLINE(1240)				this->dummyArrow->set_y((this->gridBg->y + t));
            			}
HXLINE(1243)			if (this->isMovingNotes) {
HXLINE(1246)				int nData = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),( (Float)(noteData) )));
HXLINE(1247)				if ((this->movingNotesLastData != nData)) {
HXLINE(1249)					bool isFirst = true;
HXLINE(1250)					int movingNotesMinData = 0;
HXLINE(1251)					int movingNotesMaxData = 0;
HXLINE(1252)					{
HXLINE(1252)						int _g23 = 0;
HXDLIN(1252)						::Array< ::Dynamic> _g24 = this->selectedNotes;
HXDLIN(1252)						while((_g23 < _g24->length)){
HXLINE(1252)							 ::states::editors::content::MetaNote note13 = _g24->__get(_g23).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(1252)							_g23 = (_g23 + 1);
HXLINE(1254)							bool _hx_tmp62;
HXDLIN(1254)							if (::hx::IsNotNull( note13 )) {
HXLINE(1254)								_hx_tmp62 = note13->isEvent;
            							}
            							else {
HXLINE(1254)								_hx_tmp62 = true;
            							}
HXDLIN(1254)							if (_hx_tmp62) {
HXLINE(1254)								continue;
            							}
HXLINE(1256)							int data = ( (int)(note13->songData->__get(1)) );
HXLINE(1257)							bool _hx_tmp63;
HXDLIN(1257)							if (!(isFirst)) {
HXLINE(1257)								_hx_tmp63 = (data < movingNotesMinData);
            							}
            							else {
HXLINE(1257)								_hx_tmp63 = true;
            							}
HXDLIN(1257)							if (_hx_tmp63) {
HXLINE(1257)								movingNotesMinData = data;
            							}
HXLINE(1258)							if ((data > movingNotesMaxData)) {
HXLINE(1258)								movingNotesMaxData = data;
            							}
HXLINE(1259)							isFirst = false;
            						}
            					}
HXLINE(1262)					int diff = (nData - this->movingNotesLastData);
HXLINE(1263)					int maxn = ((::states::editors::ChartingState_obj::GRID_PLAYERS * ::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER) - 1);
HXLINE(1264)					movingNotesMinData = (movingNotesMinData + diff);
HXLINE(1265)					movingNotesMaxData = (movingNotesMaxData + diff);
HXLINE(1266)					if ((movingNotesMinData < 0)) {
HXLINE(1267)						diff = (diff - movingNotesMinData);
            					}
            					else {
HXLINE(1268)						if ((movingNotesMaxData > maxn)) {
HXLINE(1269)							diff = (diff - (movingNotesMaxData - maxn));
            						}
            					}
HXLINE(1271)					{
HXLINE(1271)						 ::Dynamic filter2 = null();
HXDLIN(1271)						 ::flixel::group::FlxTypedGroupIterator note14 =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->movingNotes->members,filter2);
HXDLIN(1271)						while(note14->hasNext()){
HXLINE(1271)							 ::states::editors::content::MetaNote note15 = note14->next().StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(1273)							bool _hx_tmp64;
HXDLIN(1273)							if (::hx::IsNotNull( note15 )) {
HXLINE(1273)								_hx_tmp64 = note15->isEvent;
            							}
            							else {
HXLINE(1273)								_hx_tmp64 = true;
            							}
HXDLIN(1273)							if (_hx_tmp64) {
HXLINE(1273)								continue;
            							}
HXLINE(1275)							note15->changeNoteData(( (int)((note15->songData->__get(1) + diff)) ));
HXLINE(1276)							this->positionNoteXByData(note15,null());
            						}
            					}
            				}
HXLINE(1279)				this->movingNotesLastData = nData;
HXLINE(1282)				if ((this->dummyArrow->y != this->movingNotesLastY)) {
HXLINE(1284)					Float diff1 = (this->dummyArrow->y - this->movingNotesLastY);
HXLINE(1285)					int curSecRow = 0;
HXLINE(1286)					{
HXLINE(1286)						 ::Dynamic filter3 = null();
HXDLIN(1286)						 ::flixel::group::FlxTypedGroupIterator note16 =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->movingNotes->members,filter3);
HXDLIN(1286)						while(note16->hasNext()){
HXLINE(1286)							 ::states::editors::content::MetaNote note17 = note16->next().StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(1288)							if (::hx::IsNull( note17 )) {
HXLINE(1288)								continue;
            							}
HXLINE(1290)							 ::states::editors::content::MetaNote note18 = note17;
HXDLIN(1290)							note18->chartY = (note18->chartY + diff1);
HXLINE(1291)							Float row = ((note17->chartY / ( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) )) * this->curZoom);
HXLINE(1292)							while(true){
HXLINE(1292)								bool _hx_tmp65;
HXDLIN(1292)								if (((curSecRow + 1) < this->cachedSectionRow->length)) {
HXLINE(1292)									_hx_tmp65 = (this->cachedSectionRow->__get(curSecRow) <= row);
            								}
            								else {
HXLINE(1292)									_hx_tmp65 = false;
            								}
HXDLIN(1292)								if (!(_hx_tmp65)) {
HXLINE(1292)									goto _hx_goto_56;
            								}
HXLINE(1294)								curSecRow = (curSecRow + 1);
            							}
            							_hx_goto_56:;
HXLINE(1297)							note17->setStrumTime(::Math_obj::max(( (Float)(-5000) ),(note17->strumTime + ((((diff1 * this->cachedSectionCrochets->__get(curSecRow)) / ( (Float)(4) )) / ( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) )) * this->curZoom))));
HXLINE(1298)							this->positionNoteYOnTime(note17,curSecRow);
HXLINE(1299)							if (note17->isEvent) {
HXLINE(1299)								::hx::TCast<  ::states::editors::content::EventMetaNote >::cast(note17)->updateEventText();
            							}
            						}
            					}
HXLINE(1301)					this->movingNotesLastY = this->dummyArrow->y;
            				}
            			}
            			else {
HXLINE(1304)				bool _hx_tmp66;
HXDLIN(1304)				if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE(1304)					_hx_tmp66 = !(this->ignoreClickForThisFrame);
            				}
            				else {
HXLINE(1304)					_hx_tmp66 = false;
            				}
HXDLIN(1304)				if (_hx_tmp66) {
HXLINE(1306)					bool _hx_tmp67;
HXDLIN(1306)					 ::flixel::input::keyboard::FlxKeyList _this54 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1306)					if (_this54->keyManager->checkStatusUnsafe(17,_this54->status)) {
HXLINE(1306)						_hx_tmp67 = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            					}
            					else {
HXLINE(1306)						_hx_tmp67 = false;
            					}
HXDLIN(1306)					if (_hx_tmp67) {
HXLINE(1308)						if ((this->selectedNotes->length > 0)) {
HXLINE(1309)							this->moveSelectedNotes(noteData,this->dummyArrow->y);
            						}
            						else {
HXLINE(1311)							this->showOutput(HX_("You must select notes to move them!",0e,27,59,c5),true);
            						}
            					}
            					else {
HXLINE(1313)						bool _hx_tmp68;
HXDLIN(1313)						if ((::flixel::FlxG_obj::mouse->x >= this->gridBg->x)) {
HXLINE(1313)							int _hx_tmp69 = ::flixel::FlxG_obj::mouse->x;
HXDLIN(1313)							Float _hx_tmp70 = this->gridBg->x;
HXDLIN(1313)							_hx_tmp68 = (_hx_tmp69 < (_hx_tmp70 + this->gridBg->get_width()));
            						}
            						else {
HXLINE(1313)							_hx_tmp68 = false;
            						}
HXDLIN(1313)						if (_hx_tmp68) {
            							HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(2)
            							int _hx_run( ::states::editors::content::MetaNote a, ::states::editors::content::MetaNote b){
            								HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1320_update)
HXLINE(1320)								if ((::Math_obj::abs((a->strumTime - ( (Float)(::flixel::FlxG_obj::mouse->y) ))) < ::Math_obj::abs((b->strumTime - ( (Float)(::flixel::FlxG_obj::mouse->y) ))))) {
HXLINE(1320)									return 1;
            								}
            								else {
HXLINE(1320)									return -1;
            								}
HXDLIN(1320)								return 0;
            							}
            							HX_END_LOCAL_FUNC2(return)

HXLINE(1315)							::Array< ::Dynamic> _g25 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1315)							{
HXLINE(1315)								int _g26 = 0;
HXDLIN(1315)								::Array< ::Dynamic> _g27 = this->curRenderedNotes->members;
HXDLIN(1315)								while((_g26 < _g27->length)){
HXLINE(1315)									 ::states::editors::content::MetaNote v2 = _g27->__get(_g26).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(1315)									_g26 = (_g26 + 1);
HXLINE(1317)									Float chartY = (( (Float)(::flixel::FlxG_obj::mouse->y) ) - v2->chartY);
HXLINE(1316)									bool _hx_tmp71;
HXLINE(1318)									bool _hx_tmp72;
HXDLIN(1318)									bool _hx_tmp73;
HXDLIN(1318)									bool _hx_tmp74;
HXDLIN(1318)									if (v2->isEvent) {
HXLINE(1318)										_hx_tmp74 = (noteData < 0);
            									}
            									else {
HXLINE(1318)										_hx_tmp74 = false;
            									}
HXDLIN(1318)									if (!(_hx_tmp74)) {
HXLINE(1318)										if (!(v2->isEvent)) {
HXLINE(1318)											_hx_tmp73 = ::hx::IsEq( v2->songData->__get(1),noteData );
            										}
            										else {
HXLINE(1318)											_hx_tmp73 = false;
            										}
            									}
            									else {
HXLINE(1318)										_hx_tmp73 = true;
            									}
HXDLIN(1318)									if (_hx_tmp73) {
HXLINE(1318)										_hx_tmp72 = (chartY >= 0);
            									}
            									else {
HXLINE(1318)										_hx_tmp72 = false;
            									}
HXDLIN(1318)									if (_hx_tmp72) {
HXLINE(1316)										_hx_tmp71 = (chartY < ::states::editors::ChartingState_obj::GRID_SIZE);
            									}
            									else {
HXLINE(1316)										_hx_tmp71 = false;
            									}
HXLINE(1315)									if (_hx_tmp71) {
HXLINE(1315)										_g25->push(v2);
            									}
            								}
            							}
HXDLIN(1315)							::Array< ::Dynamic> closeNotes = _g25;
HXLINE(1320)							closeNotes->sort( ::Dynamic(new _hx_Closure_3()));
HXLINE(1322)							 ::states::editors::content::MetaNote closest = closeNotes->__get(0).StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(1323)							bool _hx_tmp75;
HXDLIN(1323)							if (::hx::IsNotNull( closest )) {
HXLINE(1323)								if (closest->isEvent) {
HXLINE(1323)									_hx_tmp75 = !(this->lockedEvents);
            								}
            								else {
HXLINE(1323)									_hx_tmp75 = true;
            								}
            							}
            							else {
HXLINE(1323)								_hx_tmp75 = false;
            							}
HXDLIN(1323)							if (_hx_tmp75) {
HXLINE(1325)								bool _hx_tmp76;
HXDLIN(1325)								 ::flixel::input::keyboard::FlxKeyList _this55 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1325)								if (!(_this55->keyManager->checkStatusUnsafe(16,_this55->status))) {
HXLINE(1325)									_hx_tmp76 = holdingAlt;
            								}
            								else {
HXLINE(1325)									_hx_tmp76 = true;
            								}
HXDLIN(1325)								if (_hx_tmp76) {
HXLINE(1327)									::Array< ::Dynamic> sel2 = this->selectedNotes->copy();
HXLINE(1328)									if (!(this->selectedNotes->contains(closest))) {
HXLINE(1330)										this->selectedNotes->push(closest);
HXLINE(1331)										this->addUndoAction(HX_("Select Note",96,ff,25,4b), ::Dynamic(::hx::Anon_obj::Create(2)
            											->setFixed(0,HX_("current",39,9c,e3,cb),this->selectedNotes->copy())
            											->setFixed(1,HX_("old",a7,98,54,00),sel2)));
            									}
            									else {
HXLINE(1333)										if (!(holdingAlt)) {
HXLINE(1335)											this->resetSelectedNotes();
HXLINE(1336)											this->selectedNotes->remove(closest);
HXLINE(1337)											this->addUndoAction(HX_("Select Note",96,ff,25,4b), ::Dynamic(::hx::Anon_obj::Create(2)
            												->setFixed(0,HX_("current",39,9c,e3,cb),this->selectedNotes->copy())
            												->setFixed(1,HX_("old",a7,98,54,00),sel2)));
            										}
            									}
HXLINE(1339)									::haxe::Log_obj::trace((HX_("Notes selected: ",60,a7,de,70) + this->selectedNotes->length),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),1339,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("update",09,86,05,87)));
            								}
            								else {
HXLINE(1341)									 ::flixel::input::keyboard::FlxKeyList _this56 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1341)									if (!(_this56->keyManager->checkStatusUnsafe(17,_this56->status))) {
HXLINE(1343)										::String kind1;
HXDLIN(1343)										if (!(closest->isEvent)) {
HXLINE(1343)											kind1 = HX_("note",f2,17,0a,49);
            										}
            										else {
HXLINE(1343)											kind1 = HX_("event",1a,c8,c4,75);
            										}
HXLINE(1344)										::haxe::Log_obj::trace((((HX_("Removed ",a0,48,cd,86) + kind1) + HX_(" at time: ",60,2f,24,33)) + closest->strumTime),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),1344,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("update",09,86,05,87)));
HXLINE(1345)										if (!(closest->isEvent)) {
HXLINE(1346)											this->notes->remove(closest);
            										}
            										else {
HXLINE(1348)											this->events->remove(closest);
            										}
HXLINE(1350)										this->selectedNotes->remove(closest);
HXLINE(1351)										this->curRenderedNotes->remove(closest,true).StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(1352)										 ::Dynamic _hx_tmp77;
HXDLIN(1352)										if (!(closest->isEvent)) {
HXLINE(1352)											_hx_tmp77 =  ::Dynamic(::hx::Anon_obj::Create(1)
            												->setFixed(0,HX_("notes",41,dc,ca,9f),::Array_obj< ::Dynamic>::__new(1)->init(0,closest)));
            										}
            										else {
HXLINE(1352)											_hx_tmp77 =  ::Dynamic(::hx::Anon_obj::Create(1)
            												->setFixed(0,HX_("events",19,4f,6a,96),::Array_obj< ::Dynamic>::__new(1)->init(0,closest)));
            										}
HXDLIN(1352)										this->addUndoAction(HX_("Delete Note",07,30,b0,81),_hx_tmp77);
            									}
            								}
HXLINE(1354)								if ((this->selectedNotes->length == 1)) {
HXLINE(1354)									this->onSelectNote();
            								}
HXLINE(1355)								this->forceDataUpdate = true;
            							}
            							else {
HXLINE(1357)								bool _hx_tmp78;
HXDLIN(1357)								bool _hx_tmp79;
HXDLIN(1357)								if (!(holdingAlt)) {
HXLINE(1357)									_hx_tmp79 = (::flixel::FlxG_obj::mouse->y >= this->gridBg->y);
            								}
            								else {
HXLINE(1357)									_hx_tmp79 = false;
            								}
HXDLIN(1357)								if (_hx_tmp79) {
HXLINE(1357)									int _hx_tmp80 = ::flixel::FlxG_obj::mouse->y;
HXDLIN(1357)									Float _hx_tmp81 = this->gridBg->y;
HXDLIN(1357)									_hx_tmp78 = (_hx_tmp80 < (_hx_tmp81 + this->gridBg->get_height()));
            								}
            								else {
HXLINE(1357)									_hx_tmp78 = false;
            								}
HXDLIN(1357)								if (_hx_tmp78) {
HXLINE(1359)									Float strumTime1 = ((((diffY / ( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) )) * ::backend::Conductor_obj::stepCrochet) / this->curZoom) + this->cachedSectionTimes->__get(this->curSec));
HXLINE(1360)									if ((noteData >= 0)) {
HXLINE(1362)										::haxe::Log_obj::trace((HX_("Added note at time: ",52,51,bb,fa) + strumTime1),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),1362,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("update",09,86,05,87)));
HXLINE(1363)										bool didAdd1 = false;
HXLINE(1365)										::cpp::VirtualArray noteSetupData1 = ::cpp::VirtualArray_obj::__new(3)->init(0,strumTime1)->init(1,noteData)->init(2,0);
HXLINE(1366)										::String typeSelected1 = ::StringTools_obj::trim(this->noteTypes->__get(this->noteTypeDropDown->selectedIndex));
HXLINE(1367)										bool _hx_tmp82;
HXDLIN(1367)										if (::hx::IsNotNull( typeSelected1 )) {
HXLINE(1367)											_hx_tmp82 = (typeSelected1.length > 0);
            										}
            										else {
HXLINE(1367)											_hx_tmp82 = false;
            										}
HXDLIN(1367)										if (_hx_tmp82) {
HXLINE(1368)											noteSetupData1->push(typeSelected1);
            										}
HXLINE(1370)										 ::states::editors::content::MetaNote noteAdded1 = this->createNote(noteSetupData1,null());
HXLINE(1371)										{
HXLINE(1371)											int _g28 = this->sectionFirstNoteID;
HXDLIN(1371)											int _g29 = this->notes->length;
HXDLIN(1371)											while((_g28 < _g29)){
HXLINE(1371)												_g28 = (_g28 + 1);
HXDLIN(1371)												int num4 = (_g28 - 1);
HXLINE(1373)												 ::states::editors::content::MetaNote note19 = this->notes->__get(num4).StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(1374)												if ((note19->strumTime >= strumTime1)) {
HXLINE(1376)													this->notes->insert(num4,noteAdded1);
HXLINE(1377)													didAdd1 = true;
HXLINE(1378)													goto _hx_goto_58;
            												}
            											}
            											_hx_goto_58:;
            										}
HXLINE(1381)										if (!(didAdd1)) {
HXLINE(1381)											this->notes->push(noteAdded1);
            										}
HXLINE(1383)										if (!(holdingAlt)) {
HXLINE(1384)											this->resetSelectedNotes();
            										}
HXLINE(1386)										this->selectedNotes->push(noteAdded1);
HXLINE(1387)										this->addUndoAction(HX_("Add Note",91,46,97,60), ::Dynamic(::hx::Anon_obj::Create(1)
            											->setFixed(0,HX_("notes",41,dc,ca,9f),::Array_obj< ::Dynamic>::__new(1)->init(0,noteAdded1))));
            									}
            									else {
HXLINE(1389)										if (!(this->lockedEvents)) {
HXLINE(1391)											::haxe::Log_obj::trace((HX_("Added event at time: ",7a,84,eb,c3) + strumTime1),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),1391,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("update",09,86,05,87)));
HXLINE(1392)											bool didAdd2 = false;
HXLINE(1394)											::String eventAdded = this->eventsList->__get(::Std_obj::_hx_int(::Math_obj::max(( (Float)(this->eventDropDown->selectedIndex) ),( (Float)(0) )))).StaticCast< ::Array< ::String > >()->__get(0);
HXDLIN(1394)											 ::states::editors::content::EventMetaNote eventAdded1 = this->createEvent(::cpp::VirtualArray_obj::__new(2)->init(0,strumTime1)->init(1,::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,eventAdded)->init(1,this->value1InputText->text)->init(2,this->value2InputText->text))));
HXLINE(1395)											{
HXLINE(1395)												int _g30 = this->sectionFirstEventID;
HXDLIN(1395)												int _g31 = this->events->length;
HXDLIN(1395)												while((_g30 < _g31)){
HXLINE(1395)													_g30 = (_g30 + 1);
HXDLIN(1395)													int num5 = (_g30 - 1);
HXLINE(1397)													 ::states::editors::content::EventMetaNote event1 = this->events->__get(num5).StaticCast<  ::states::editors::content::EventMetaNote >();
HXLINE(1398)													if ((event1->strumTime >= strumTime1)) {
HXLINE(1400)														this->events->insert(num5,eventAdded1);
HXLINE(1401)														didAdd2 = true;
HXLINE(1402)														goto _hx_goto_59;
            													}
            												}
            												_hx_goto_59:;
            											}
HXLINE(1405)											if (!(didAdd2)) {
HXLINE(1405)												this->events->push(eventAdded1);
            											}
HXLINE(1407)											if (!(holdingAlt)) {
HXLINE(1408)												this->resetSelectedNotes();
            											}
HXLINE(1410)											this->selectedNotes->push(eventAdded1);
HXLINE(1411)											this->addUndoAction(HX_("Add Note",91,46,97,60), ::Dynamic(::hx::Anon_obj::Create(1)
            												->setFixed(0,HX_("events",19,4f,6a,96),::Array_obj< ::Dynamic>::__new(1)->init(0,eventAdded1))));
            										}
            									}
HXLINE(1413)									this->onSelectNote();
HXLINE(1414)									this->softReloadNotes(null());
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(1419)			if (!(this->ignoreClickForThisFrame)) {
HXLINE(1421)				if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE(1422)					this->resetSelectedNotes();
            				}
HXLINE(1424)				this->dummyArrow->set_visible(false);
            			}
            		}
HXLINE(1426)		this->ignoreClickForThisFrame = false;
HXLINE(1428)		bool _hx_tmp83;
HXDLIN(1428)		if ((::backend::Conductor_obj::songPosition == lastTime)) {
HXLINE(1428)			_hx_tmp83 = this->forceDataUpdate;
            		}
            		else {
HXLINE(1428)			_hx_tmp83 = true;
            		}
HXDLIN(1428)		if (_hx_tmp83) {
HXLINE(1430)			::String curTime = ::flixel::util::FlxStringUtil_obj::formatTime((::backend::Conductor_obj::songPosition / ( (Float)(1000) )),true);
HXLINE(1431)			::String songLength;
HXDLIN(1431)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1431)				songLength = ::flixel::util::FlxStringUtil_obj::formatTime((::flixel::FlxG_obj::sound->music->_length / ( (Float)(1000) )),true);
            			}
            			else {
HXLINE(1431)				songLength = HX_("???",1f,05,30,00);
            			}
HXLINE(1432)			::String str = ((((((((HX_("",00,00,00,00) + curTime) + HX_(" / ",31,71,18,00)) + songLength) + (HX_("\n\nSection: ",eb,fa,bc,b5) + this->curSec)) + (HX_("\nBeat: ",46,f5,52,6b) + this->curBeat)) + (HX_("\nStep: ",9c,9c,08,dd) + this->curStep)) + ((HX_("\n\nBeat Snap: ",1a,1c,e1,32) + this->curQuant) + HX_(" / 16",56,0a,fc,8b))) + (HX_("\nSelected: ",6b,1e,32,c6) + this->selectedNotes->length));
HXLINE(1439)			if ((str != this->infoText->text)) {
HXLINE(1441)				this->infoText->set_text(str);
HXLINE(1442)				if (this->infoText->get_autoSize()) {
HXLINE(1442)					this->infoText->set_autoSize(false);
            				}
            			}
HXLINE(1445)			bool vortexPlaying;
HXDLIN(1445)			bool vortexPlaying1;
HXDLIN(1445)			if (this->vortexEnabled) {
HXLINE(1445)				vortexPlaying1 = ::hx::IsNotNull( ::flixel::FlxG_obj::sound->music );
            			}
            			else {
HXLINE(1445)				vortexPlaying1 = false;
            			}
HXDLIN(1445)			if (vortexPlaying1) {
HXLINE(1445)				vortexPlaying = ::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel );
            			}
            			else {
HXLINE(1445)				vortexPlaying = false;
            			}
HXLINE(1446)			bool canPlayHitSound;
HXDLIN(1446)			bool canPlayHitSound1;
HXDLIN(1446)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1446)				canPlayHitSound1 = ::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel );
            			}
            			else {
HXLINE(1446)				canPlayHitSound1 = false;
            			}
HXDLIN(1446)			if (canPlayHitSound1) {
HXLINE(1446)				canPlayHitSound = (lastTime < ::backend::Conductor_obj::songPosition);
            			}
            			else {
HXLINE(1446)				canPlayHitSound = false;
            			}
HXLINE(1447)			bool hitSoundPlayer = (this->hitsoundPlayerStepper->value > 0);
HXLINE(1448)			bool hitSoundOpp = (this->hitsoundOpponentStepper->value > 0);
HXLINE(1449)			{
HXLINE(1449)				 ::Dynamic filter4 = null();
HXDLIN(1449)				 ::flixel::group::FlxTypedGroupIterator note20 =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->curRenderedNotes->members,filter4);
HXDLIN(1449)				while(note20->hasNext()){
HXLINE(1449)					 ::states::editors::content::MetaNote note21 = note20->next().StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(1451)					bool _hx_tmp84;
HXDLIN(1451)					if (::hx::IsNotNull( note21 )) {
HXLINE(1451)						_hx_tmp84 = note21->isEvent;
            					}
            					else {
HXLINE(1451)						_hx_tmp84 = true;
            					}
HXDLIN(1451)					if (_hx_tmp84) {
HXLINE(1451)						continue;
            					}
HXLINE(1453)					Float _hx_tmp85;
HXDLIN(1453)					if ((note21->strumTime >= ::backend::Conductor_obj::songPosition)) {
HXLINE(1453)						_hx_tmp85 = ( (Float)(1) );
            					}
            					else {
HXLINE(1453)						_hx_tmp85 = ((Float)0.6);
            					}
HXDLIN(1453)					note21->set_alpha(_hx_tmp85);
HXLINE(1454)					bool _hx_tmp86;
HXDLIN(1454)					if ((::backend::Conductor_obj::songPosition > note21->strumTime)) {
HXLINE(1454)						_hx_tmp86 = (lastTime <= note21->strumTime);
            					}
            					else {
HXLINE(1454)						_hx_tmp86 = false;
            					}
HXDLIN(1454)					if (_hx_tmp86) {
HXLINE(1456)						if (canPlayHitSound) {
HXLINE(1458)							bool _hx_tmp87;
HXDLIN(1458)							if (hitSoundPlayer) {
HXLINE(1458)								_hx_tmp87 = note21->mustPress;
            							}
            							else {
HXLINE(1458)								_hx_tmp87 = false;
            							}
HXDLIN(1458)							if (_hx_tmp87) {
HXLINE(1460)								 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp88 = ::flixel::FlxG_obj::sound;
HXDLIN(1460)								 ::openfl::media::Sound _hx_tmp89 = ::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("hitsound",9c,79,fe,2c)),null(),true,null());
HXDLIN(1460)								_hx_tmp88->play(_hx_tmp89,this->hitsoundPlayerStepper->value,null(),null(),null(),null());
HXLINE(1461)								hitSoundPlayer = false;
            							}
            							else {
HXLINE(1463)								bool _hx_tmp90;
HXDLIN(1463)								if (hitSoundOpp) {
HXLINE(1463)									_hx_tmp90 = !(note21->mustPress);
            								}
            								else {
HXLINE(1463)									_hx_tmp90 = false;
            								}
HXDLIN(1463)								if (_hx_tmp90) {
HXLINE(1465)									 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp91 = ::flixel::FlxG_obj::sound;
HXDLIN(1465)									 ::openfl::media::Sound _hx_tmp92 = ::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("hitsound",9c,79,fe,2c)),null(),true,null());
HXDLIN(1465)									_hx_tmp91->play(_hx_tmp92,this->hitsoundOpponentStepper->value,null(),null(),null(),null());
HXLINE(1466)									hitSoundOpp = false;
            								}
            							}
            						}
HXLINE(1470)						if (vortexPlaying) {
HXLINE(1472)							 ::objects::StrumNote strumNote = Dynamic( this->strumLineNotes->members->__get(( (int)(note21->songData->__get(1)) ))).StaticCast<  ::objects::StrumNote >();
HXLINE(1473)							if (::hx::IsNotNull( strumNote )) {
HXLINE(1475)								strumNote->playAnim(HX_("confirm",00,9d,39,10),true);
HXLINE(1476)								strumNote->resetAnim = ((::Math_obj::max((::backend::Conductor_obj::stepCrochet * ((Float)1.25)),note21->sustainLength) / ( (Float)(1000) )) / this->playbackRate);
            							}
            						}
            					}
            				}
            			}
HXLINE(1481)			this->forceDataUpdate = false;
HXLINE(1484)			bool _hx_tmp93;
HXDLIN(1484)			if ((this->metronomeStepper->value > 0)) {
HXLINE(1484)				_hx_tmp93 = (this->lastBeatHit != this->curBeat);
            			}
            			else {
HXLINE(1484)				_hx_tmp93 = false;
            			}
HXDLIN(1484)			if (_hx_tmp93) {
HXLINE(1485)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp94 = ::flixel::FlxG_obj::sound;
HXDLIN(1485)				 ::openfl::media::Sound _hx_tmp95 = ::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("Metronome_Tick",0a,a7,57,13)),null(),true,null());
HXDLIN(1485)				_hx_tmp94->play(_hx_tmp95,this->metronomeStepper->value,null(),null(),null(),null());
            			}
HXLINE(1487)			this->lastBeatHit = this->curBeat;
            		}
HXLINE(1490)		if ((this->selectedNotes->length > 0)) {
HXLINE(1492)			 ::states::editors::ChartingState _hx_tmp96 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1492)			_hx_tmp96->noteSelectionSine = (_hx_tmp96->noteSelectionSine + elapsed);
HXLINE(1493)			int sineValue;
HXDLIN(1493)			if (this->isMovingNotes) {
HXLINE(1493)				sineValue = 8;
            			}
            			else {
HXLINE(1493)				sineValue = 2;
            			}
HXDLIN(1493)			Float sineValue1 = (((Float)0.75) + (::Math_obj::cos(((::Math_obj::PI * this->noteSelectionSine) * ( (Float)(sineValue) ))) / ( (Float)(4) )));
HXLINE(1496)			 ::flixel::input::keyboard::FlxKeyList _this57 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1496)			bool qPress = _this57->keyManager->checkStatusUnsafe(81,_this57->status);
HXLINE(1497)			 ::flixel::input::keyboard::FlxKeyList _this58 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1497)			bool ePress = _this58->keyManager->checkStatusUnsafe(69,_this58->status);
HXLINE(1498)			int addSus;
HXDLIN(1498)			 ::flixel::input::keyboard::FlxKeyList _this59 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1498)			if (_this59->keyManager->checkStatusUnsafe(16,_this59->status)) {
HXLINE(1498)				addSus = 4;
            			}
            			else {
HXLINE(1498)				addSus = 1;
            			}
HXDLIN(1498)			Float addSus1 = (( (Float)(addSus) ) * (::backend::Conductor_obj::stepCrochet / ( (Float)(2) )));
HXLINE(1499)			if (qPress) {
HXLINE(1499)				addSus1 = (addSus1 * ( (Float)(-1) ));
            			}
HXLINE(1501)			bool _hx_tmp97;
HXDLIN(1501)			if ((qPress != ePress)) {
HXLINE(1501)				_hx_tmp97 = (this->selectedNotes->length != 1);
            			}
            			else {
HXLINE(1501)				_hx_tmp97 = false;
            			}
HXDLIN(1501)			if (_hx_tmp97) {
HXLINE(1502)				 ::backend::ui::PsychUINumericStepper fh2 = this->susLengthStepper;
HXDLIN(1502)				fh2->set_value((fh2->value + addSus1));
            			}
HXLINE(1504)			int noteSec1 = 0;
HXLINE(1505)			{
HXLINE(1505)				int _g32 = 0;
HXDLIN(1505)				::Array< ::Dynamic> _g33 = this->selectedNotes;
HXDLIN(1505)				while((_g32 < _g33->length)){
HXLINE(1505)					 ::states::editors::content::MetaNote note22 = _g33->__get(_g32).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(1505)					_g32 = (_g32 + 1);
HXLINE(1507)					bool _hx_tmp98;
HXDLIN(1507)					if (::hx::IsNotNull( note22 )) {
HXLINE(1507)						_hx_tmp98 = !(note22->exists);
            					}
            					else {
HXLINE(1507)						_hx_tmp98 = true;
            					}
HXDLIN(1507)					if (_hx_tmp98) {
HXLINE(1507)						continue;
            					}
HXLINE(1509)					if (!(note22->isEvent)) {
HXLINE(1511)						if ((qPress != ePress)) {
HXLINE(1513)							while(true){
HXLINE(1513)								bool _hx_tmp99;
HXDLIN(1513)								if ((this->cachedSectionTimes->length > (noteSec1 + 1))) {
HXLINE(1513)									_hx_tmp99 = (this->cachedSectionTimes->__get((noteSec1 + 1)) <= note22->strumTime);
            								}
            								else {
HXLINE(1513)									_hx_tmp99 = false;
            								}
HXDLIN(1513)								if (!(_hx_tmp99)) {
HXLINE(1513)									goto _hx_goto_62;
            								}
HXLINE(1514)								noteSec1 = (noteSec1 + 1);
            							}
            							_hx_goto_62:;
HXLINE(1516)							note22->setSustainLength((note22->sustainLength + addSus1),(this->cachedSectionCrochets->__get(noteSec1) / ( (Float)(4) )),this->curZoom);
HXLINE(1517)							if ((this->selectedNotes->length == 1)) {
HXLINE(1518)								this->susLengthStepper->set_value(note22->sustainLength);
            							}
            						}
HXLINE(1520)						note22->animation->update(elapsed);
            					}
HXLINE(1522)					note22->colorTransform->redMultiplier = (note22->colorTransform->greenMultiplier = (note22->colorTransform->blueMultiplier = sineValue1));
            				}
            			}
            		}
            		else {
HXLINE(1525)			this->noteSelectionSine = ( (Float)(0) );
            		}
HXLINE(1527)		this->outputTxt->set_alpha(this->outputAlpha);
HXLINE(1528)		this->outputTxt->set_visible((this->outputAlpha > 0));
HXLINE(1529)		::flixel::FlxG_obj::camera->scroll->set_y(this->scrollY);
HXLINE(1530)		this->lastFocus = ::backend::ui::PsychUIInputText_obj::focusOn;
            	}


void ChartingState_obj::moveSelectedNotes(::hx::Null< int >  __o_noteData,Float lastY){
            		int noteData = __o_noteData.Default(0);
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1534_moveSelectedNotes)
HXLINE(1535)		::Array< ::Dynamic> originalNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1536)		::Array< ::Dynamic> originalEvents = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1537)		::Array< ::Dynamic> movedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1538)		::Array< ::Dynamic> movedEvents = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1539)		{
HXLINE(1539)			int _g = 0;
HXDLIN(1539)			::Array< ::Dynamic> _g1 = this->selectedNotes;
HXDLIN(1539)			while((_g < _g1->length)){
HXLINE(1539)				 ::states::editors::content::MetaNote note = _g1->__get(_g).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(1539)				_g = (_g + 1);
HXLINE(1541)				if (::hx::IsNull( note )) {
HXLINE(1541)					continue;
            				}
HXLINE(1543)				if (!(note->isEvent)) {
HXLINE(1545)					this->notes->remove(note);
HXLINE(1546)					int secNum = 0;
HXLINE(1547)					{
HXLINE(1547)						int _g2 = 0;
HXDLIN(1547)						::Array< Float > _g3 = this->cachedSectionTimes;
HXDLIN(1547)						while((_g2 < _g3->length)){
HXLINE(1547)							Float time = _g3->__get(_g2);
HXDLIN(1547)							_g2 = (_g2 + 1);
HXLINE(1549)							if ((time > note->strumTime)) {
HXLINE(1549)								goto _hx_goto_69;
            							}
HXLINE(1550)							secNum = (secNum + 1);
            						}
            						_hx_goto_69:;
            					}
HXLINE(1552)					originalNotes->push(note);
HXLINE(1553)					 ::states::editors::content::MetaNote mov = this->createNote(note->songData,secNum);
HXLINE(1554)					this->movingNotes->add(mov).StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(1555)					movedNotes->push(mov);
            				}
            				else {
HXLINE(1559)					this->events->remove(note);
HXLINE(1560)					originalEvents->push(note);
HXLINE(1561)					 ::states::editors::content::EventMetaNote mov1 = this->createEvent(note->songData);
HXLINE(1562)					this->movingNotes->add(mov1).StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(1563)					movedEvents->push(mov1);
            				}
            			}
            		}
HXLINE(1566)		this->selectedNotes = this->movingNotes->members->copy();
HXLINE(1567)		this->isMovingNotes = true;
HXLINE(1568)		this->movingNotesLastY = lastY;
HXLINE(1569)		this->movingNotesLastData = noteData;
HXLINE(1570)		{
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,_g4,int,a1) HXARGC(2)
            			int _hx_run( ::states::editors::content::MetaNote a2, ::states::editors::content::MetaNote a3){
            				HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1570_moveSelectedNotes)
HXLINE(1570)				return ( (int)(_g4(a1,a2,a3)) );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1570)			 ::Dynamic _g4 = ::states::PlayState_obj::sortByTime_dyn();
HXDLIN(1570)			int a1 = -1;
HXDLIN(1570)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(_g4,a1));
HXDLIN(1570)			this->movingNotes->members->sort(_hx_tmp);
            		}
HXLINE(1571)		this->addUndoAction(HX_("Move Note",61,13,22,6d), ::Dynamic(::hx::Anon_obj::Create(4)
            			->setFixed(0,HX_("originalEvents",4a,8a,50,ce),originalEvents)
            			->setFixed(1,HX_("originalNotes",30,d2,bb,fa),originalNotes)
            			->setFixed(2,HX_("movedEvents",ac,37,8c,14),movedEvents)
            			->setFixed(3,HX_("movedNotes",0e,67,42,4a),movedNotes)));
HXLINE(1572)		this->softReloadNotes(null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,moveSelectedNotes,(void))

void ChartingState_obj::stopMovingNotes(){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,pushedNotes, ::states::editors::ChartingState,_gthis,::Array< ::Dynamic>,pushedEvents) HXARGC(1)
            		void _hx_run( ::states::editors::content::MetaNote note){
            			HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1581_stopMovingNotes)
HXLINE(1581)			if (!(note->isEvent)) {
HXLINE(1583)				_gthis->notes->push(note);
HXLINE(1584)				pushedNotes->push(note);
            			}
            			else {
HXLINE(1588)				_gthis->events->push(note);
HXLINE(1589)				pushedEvents->push(note);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1576_stopMovingNotes)
HXDLIN(1576)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1577)		::Array< ::Dynamic> pushedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1578)		::Array< ::Dynamic> pushedEvents = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1579)		this->movingNotes->forEachAlive( ::Dynamic(new _hx_Closure_0(pushedNotes,_gthis,pushedEvents)),null());
HXLINE(1592)		this->notes->sort(::states::PlayState_obj::sortByTime_dyn());
HXLINE(1593)		this->events->sort(::states::PlayState_obj::sortByTime_dyn());
HXLINE(1594)		this->movingNotes->clear();
HXLINE(1595)		this->isMovingNotes = false;
HXLINE(1596)		this->softReloadNotes(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,stopMovingNotes,(void))

::cpp::VirtualArray ChartingState_obj::makeNoteDataCopy(::cpp::VirtualArray originalData,bool isEvent){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1600_makeNoteDataCopy)
HXLINE(1601)		::cpp::VirtualArray dataCopy = originalData->copy();
HXLINE(1602)		if (isEvent) {
HXLINE(1604)			::Array< ::Dynamic> eventGrp = ( (::Array< ::Dynamic>)(dataCopy->__get(1)->__Field(HX_("copy",b5,bb,c4,41),::hx::paccDynamic)()) );
HXLINE(1605)			{
HXLINE(1605)				int _g_current = 0;
HXDLIN(1605)				::Array< ::Dynamic> _g_array = eventGrp;
HXDLIN(1605)				while((_g_current < _g_array->length)){
HXLINE(1605)					::cpp::VirtualArray _g_value = ::cpp::VirtualArray( _g_array->__get(_g_current));
HXDLIN(1605)					_g_current = (_g_current + 1);
HXDLIN(1605)					int _g_key = (_g_current - 1);
HXDLIN(1605)					int num = _g_key;
HXDLIN(1605)					::cpp::VirtualArray subEvent = _g_value;
HXLINE(1606)					eventGrp[num] = subEvent->copy();
            				}
            			}
HXLINE(1608)			dataCopy->set(1,eventGrp);
            		}
HXLINE(1610)		return dataCopy;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,makeNoteDataCopy,return )

void ChartingState_obj::updateScrollY(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1614_updateScrollY)
HXLINE(1615)		 ::Dynamic secStartTime = this->cachedSectionTimes->__get(this->curSec);
HXLINE(1616)		 ::Dynamic secCrochet = this->cachedSectionCrochets->__get(this->curSec);
HXLINE(1617)		 ::Dynamic secRows = this->cachedSectionRow->__get(this->curSec);
HXLINE(1618)		bool _hx_tmp;
HXDLIN(1618)		bool _hx_tmp1;
HXDLIN(1618)		if (::hx::IsNotNull( secStartTime )) {
HXLINE(1618)			_hx_tmp1 = ::hx::IsNull( secCrochet );
            		}
            		else {
HXLINE(1618)			_hx_tmp1 = true;
            		}
HXDLIN(1618)		if (!(_hx_tmp1)) {
HXLINE(1618)			_hx_tmp = ::hx::IsNull( secRows );
            		}
            		else {
HXLINE(1618)			_hx_tmp = true;
            		}
HXDLIN(1618)		if (_hx_tmp) {
HXLINE(1618)			return;
            		}
HXLINE(1620)		this->scrollY = (((((((::backend::Conductor_obj::songPosition - ( (Float)(secStartTime) )) / ( (Float)(secCrochet) )) * ( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) )) * ( (Float)(4) )) + (( (Float)(secRows) ) * ( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ))) * this->curZoom) - (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateScrollY,(void))

void ChartingState_obj::updateSelectionBox(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1624_updateSelectionBox)
HXLINE(1625)		Float diffX = (( (Float)(::flixel::FlxG_obj::mouse->screenX) ) - this->selectionStart->x);
HXLINE(1626)		Float diffY = (( (Float)(::flixel::FlxG_obj::mouse->screenY) ) - this->selectionStart->y);
HXLINE(1627)		this->selectionBox->setPosition(this->selectionStart->x,this->selectionStart->y);
HXLINE(1629)		if ((diffX < 0)) {
HXLINE(1631)			diffX = ::Math_obj::abs(diffX);
HXLINE(1632)			 ::flixel::FlxSprite fh = this->selectionBox;
HXDLIN(1632)			fh->set_x((fh->x - diffX));
            		}
HXLINE(1634)		if ((diffY < 0)) {
HXLINE(1636)			diffY = ::Math_obj::abs(diffY);
HXLINE(1637)			 ::flixel::FlxSprite fh1 = this->selectionBox;
HXDLIN(1637)			fh1->set_y((fh1->y - diffY));
            		}
HXLINE(1639)		{
HXLINE(1639)			 ::flixel::math::FlxBasePoint this1 = this->selectionBox->scale;
HXDLIN(1639)			this1->set_x(diffX);
HXDLIN(1639)			this1->set_y(diffY);
            		}
HXLINE(1640)		this->selectionBox->updateHitbox();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateSelectionBox,(void))

void ChartingState_obj::showOutput(::String message,::hx::Null< bool >  __o_isError){
            		bool isError = __o_isError.Default(false);
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1644_showOutput)
HXLINE(1645)		::haxe::Log_obj::trace(message,::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),1645,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("showOutput",de,b3,f5,75)));
HXLINE(1646)		this->outputTxt->set_text(message);
HXLINE(1647)		 ::flixel::text::FlxText _hx_tmp = this->outputTxt;
HXDLIN(1647)		int _hx_tmp1 = ::flixel::FlxG_obj::height;
HXDLIN(1647)		_hx_tmp->set_y(((( (Float)(_hx_tmp1) ) - this->outputTxt->get_height()) - ( (Float)(30) )));
HXLINE(1648)		this->outputAlpha = ( (Float)(4) );
HXLINE(1649)		if (isError) {
HXLINE(1651)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN(1651)			_hx_tmp2->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("cancelMenu",39,a4,43,b7)),null(),true,null()),((Float)0.6),null(),null(),null(),null());
HXLINE(1652)			this->outputTxt->set_color(-65536);
            		}
            		else {
HXLINE(1656)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::sound;
HXDLIN(1656)			_hx_tmp3->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("scrollMenu",4c,d4,18,06)),null(),true,null()),((Float)0.6),null(),null(),null(),null());
HXLINE(1657)			this->outputTxt->set_color(-1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,showOutput,(void))

void ChartingState_obj::resetSelectedNotes(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1662_resetSelectedNotes)
HXLINE(1663)		{
HXLINE(1663)			int _g = 0;
HXDLIN(1663)			::Array< ::Dynamic> _g1 = this->selectedNotes;
HXDLIN(1663)			while((_g < _g1->length)){
HXLINE(1663)				 ::states::editors::content::MetaNote note = _g1->__get(_g).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(1663)				_g = (_g + 1);
HXLINE(1665)				bool _hx_tmp;
HXDLIN(1665)				if (::hx::IsNotNull( note )) {
HXLINE(1665)					_hx_tmp = !(note->exists);
            				}
            				else {
HXLINE(1665)					_hx_tmp = true;
            				}
HXDLIN(1665)				if (_hx_tmp) {
HXLINE(1665)					continue;
            				}
HXLINE(1667)				note->colorTransform->redMultiplier = (note->colorTransform->greenMultiplier = (note->colorTransform->blueMultiplier = ( (Float)(1) )));
HXLINE(1668)				if (::hx::IsNotNull( note->animation->_curAnim )) {
HXLINE(1668)					note->animation->_curAnim->set_curFrame(0);
            				}
            			}
            		}
HXLINE(1670)		this->selectedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1671)		this->onSelectNote();
HXLINE(1672)		this->forceDataUpdate = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,resetSelectedNotes,(void))

void ChartingState_obj::onSelectNote(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1676_onSelectNote)
HXLINE(1677)		if ((this->selectedNotes->length == 1)) {
HXLINE(1679)			 ::states::editors::content::MetaNote note = this->selectedNotes->__get(0).StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(1680)			this->strumTimeStepper->set_value(note->strumTime);
HXLINE(1681)			if (!(note->isEvent)) {
HXLINE(1683)				if (!(note->isEvent)) {
HXLINE(1685)					this->susLengthLastVal = this->susLengthStepper->set_value(note->sustainLength);
HXLINE(1686)					 ::backend::ui::PsychUIDropDownMenu _hx_tmp = this->noteTypeDropDown;
HXDLIN(1686)					_hx_tmp->set_selectedIndex(::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),( (Float)(this->noteTypes->indexOf(note->noteType,null())) ))));
            				}
            				else {
HXLINE(1690)					this->susLengthLastVal = this->susLengthStepper->set_value(( (Float)(0) ));
HXLINE(1691)					this->noteTypeDropDown->set_selectedLabel(HX_("",00,00,00,00));
            				}
            			}
            			else {
HXLINE(1696)				 ::states::editors::content::EventMetaNote eventNote = ::hx::TCast<  ::states::editors::content::EventMetaNote >::cast(this->selectedNotes->__get(0).StaticCast<  ::states::editors::content::MetaNote >());
HXLINE(1697)				this->updateSelectedEventText();
            			}
            		}
            		else {
HXLINE(1700)			if ((this->selectedNotes->length > 1)) {
HXLINE(1702)				this->susLengthStepper->set_min(-(this->susLengthStepper->max));
HXLINE(1703)				this->susLengthLastVal = this->susLengthStepper->set_value(( (Float)(0) ));
HXLINE(1704)				this->strumTimeStepper->set_value(this->selectedNotes->__get(0).StaticCast<  ::states::editors::content::MetaNote >()->strumTime);
HXLINE(1705)				this->noteTypeDropDown->set_selectedLabel(HX_("",00,00,00,00));
HXLINE(1706)				this->eventDropDown->set_selectedLabel(HX_("",00,00,00,00));
HXLINE(1707)				this->value1InputText->set_text(HX_("",00,00,00,00));
HXLINE(1708)				this->value2InputText->set_text(HX_("",00,00,00,00));
            			}
            		}
HXLINE(1710)		this->forceDataUpdate = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,onSelectNote,(void))

void ChartingState_obj::updateSelectedEventText(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1715_updateSelectedEventText)
HXDLIN(1715)		bool _hx_tmp;
HXDLIN(1715)		if ((this->selectedNotes->length == 1)) {
HXDLIN(1715)			_hx_tmp = this->selectedNotes->__get(0).StaticCast<  ::states::editors::content::MetaNote >()->isEvent;
            		}
            		else {
HXDLIN(1715)			_hx_tmp = false;
            		}
HXDLIN(1715)		if (_hx_tmp) {
HXLINE(1717)			 ::states::editors::content::EventMetaNote eventNote = ::hx::TCast<  ::states::editors::content::EventMetaNote >::cast(this->selectedNotes->__get(0).StaticCast<  ::states::editors::content::MetaNote >());
HXLINE(1718)			Float Value = ( (Float)(this->curEventSelected) );
HXDLIN(1718)			 ::Dynamic Max = (eventNote->events->length - 1);
HXDLIN(1718)			Float lowerBound;
HXDLIN(1718)			if ((Value < 0)) {
HXLINE(1718)				lowerBound = ( (Float)(0) );
            			}
            			else {
HXLINE(1718)				lowerBound = Value;
            			}
HXDLIN(1718)			Float _hx_tmp1;
HXDLIN(1718)			bool _hx_tmp2;
HXDLIN(1718)			if (::hx::IsNotNull( Max )) {
HXLINE(1718)				_hx_tmp2 = ::hx::IsGreater( lowerBound,Max );
            			}
            			else {
HXLINE(1718)				_hx_tmp2 = false;
            			}
HXDLIN(1718)			if (_hx_tmp2) {
HXLINE(1718)				_hx_tmp1 = ( (Float)(Max) );
            			}
            			else {
HXLINE(1718)				_hx_tmp1 = lowerBound;
            			}
HXDLIN(1718)			this->curEventSelected = ::Std_obj::_hx_int(_hx_tmp1);
HXLINE(1719)			this->selectedEventText->set_text((((HX_("Selected Event: ",7b,7a,ac,11) + (this->curEventSelected + 1)) + HX_(" / ",31,71,18,00)) + eventNote->events->length));
HXLINE(1720)			this->selectedEventText->set_visible(true);
HXLINE(1722)			::Array< ::String > myEvent = eventNote->events->__get(this->curEventSelected).StaticCast< ::Array< ::String > >();
HXLINE(1723)			if (::hx::IsNotNull( myEvent )) {
HXLINE(1725)				::String eventName;
HXDLIN(1725)				if (::hx::IsNotNull( myEvent->__get(0) )) {
HXLINE(1725)					eventName = myEvent->__get(0);
            				}
            				else {
HXLINE(1725)					eventName = HX_("",00,00,00,00);
            				}
HXLINE(1726)				{
HXLINE(1726)					int _g_current = 0;
HXDLIN(1726)					::Array< ::Dynamic> _g_array = this->eventsList;
HXDLIN(1726)					while((_g_current < _g_array->length)){
HXLINE(1726)						::Array< ::String > _g_value = _g_array->__get(_g_current).StaticCast< ::Array< ::String > >();
HXDLIN(1726)						_g_current = (_g_current + 1);
HXDLIN(1726)						int _g_key = (_g_current - 1);
HXDLIN(1726)						int num = _g_key;
HXDLIN(1726)						::Array< ::String > event = _g_value;
HXLINE(1728)						if ((event->__get(0) == eventName)) {
HXLINE(1730)							this->eventDropDown->set_selectedIndex(num);
HXLINE(1731)							goto _hx_goto_82;
            						}
            					}
            					_hx_goto_82:;
            				}
HXLINE(1734)				::String _hx_tmp3;
HXDLIN(1734)				if (::hx::IsNotNull( myEvent->__get(1) )) {
HXLINE(1734)					_hx_tmp3 = myEvent->__get(1);
            				}
            				else {
HXLINE(1734)					_hx_tmp3 = HX_("",00,00,00,00);
            				}
HXDLIN(1734)				this->value1InputText->set_text(_hx_tmp3);
HXLINE(1735)				::String _hx_tmp4;
HXDLIN(1735)				if (::hx::IsNotNull( myEvent->__get(2) )) {
HXLINE(1735)					_hx_tmp4 = myEvent->__get(2);
            				}
            				else {
HXLINE(1735)					_hx_tmp4 = HX_("",00,00,00,00);
            				}
HXDLIN(1735)				this->value2InputText->set_text(_hx_tmp4);
            			}
            		}
            		else {
HXLINE(1738)			this->selectedEventText->set_visible(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateSelectedEventText,(void))

void ChartingState_obj::createGrids(){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1742_createGrids)
HXLINE(1743)		bool destroyed = false;
HXLINE(1744)		::Array< int > stripes = null();
HXLINE(1745)		if (::hx::IsNotNull( this->prevGridBg )) {
HXLINE(1747)			stripes = this->prevGridBg->stripes;
HXLINE(1748)			this->remove(this->prevGridBg,null());
HXLINE(1749)			this->remove(this->gridBg,null());
HXLINE(1750)			this->remove(this->nextGridBg,null());
HXLINE(1751)			this->prevGridBg = ( ( ::states::editors::content::ChartingGridSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(this->prevGridBg)) );
HXLINE(1752)			this->gridBg = ( ( ::states::editors::content::ChartingGridSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(this->gridBg)) );
HXLINE(1753)			this->nextGridBg = ( ( ::states::editors::content::ChartingGridSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(this->nextGridBg)) );
HXLINE(1754)			destroyed = true;
            		}
HXLINE(1757)		int columnCount;
HXDLIN(1757)		if (::states::editors::ChartingState_obj::SHOW_EVENT_COLUMN) {
HXLINE(1757)			columnCount = 1;
            		}
            		else {
HXLINE(1757)			columnCount = 0;
            		}
HXDLIN(1757)		int columnCount1 = ((::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER * ::states::editors::ChartingState_obj::GRID_PLAYERS) + columnCount);
HXLINE(1758)		this->gridBg =  ::states::editors::content::ChartingGridSprite_obj::__alloc( HX_CTX ,columnCount1,this->gridColors->__get(0),this->gridColors->__get(1));
HXLINE(1759)		{
HXLINE(1759)			 ::states::editors::content::ChartingGridSprite _this = this->gridBg;
HXDLIN(1759)			int axes = 1;
HXDLIN(1759)			bool _hx_tmp;
HXDLIN(1759)			if ((axes != 1)) {
HXLINE(1759)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(1759)				_hx_tmp = true;
            			}
HXDLIN(1759)			if (_hx_tmp) {
HXLINE(1759)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(1759)				_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(1759)			bool _hx_tmp2;
HXDLIN(1759)			if ((axes != 16)) {
HXLINE(1759)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(1759)				_hx_tmp2 = true;
            			}
HXDLIN(1759)			if (_hx_tmp2) {
HXLINE(1759)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(1759)				_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(1761)		this->prevGridBg =  ::states::editors::content::ChartingGridSprite_obj::__alloc( HX_CTX ,columnCount1,this->gridColorsOther->__get(0),this->gridColorsOther->__get(1));
HXLINE(1762)		this->nextGridBg =  ::states::editors::content::ChartingGridSprite_obj::__alloc( HX_CTX ,columnCount1,this->gridColorsOther->__get(0),this->gridColorsOther->__get(1));
HXLINE(1763)		 ::states::editors::content::ChartingGridSprite _hx_tmp4 = this->prevGridBg;
HXDLIN(1763)		_hx_tmp4->set_x(this->nextGridBg->set_x(this->gridBg->x));
HXLINE(1764)		this->prevGridBg->stripes = (this->nextGridBg->stripes = (this->gridBg->stripes = stripes));
HXLINE(1766)		if (destroyed) {
HXLINE(1768)			int _hx_tmp5 = this->getFirstNull();
HXDLIN(1768)			this->insert(_hx_tmp5,this->prevGridBg);
HXLINE(1769)			int _hx_tmp6 = this->getFirstNull();
HXDLIN(1769)			this->insert(_hx_tmp6,this->nextGridBg);
HXLINE(1770)			int _hx_tmp7 = this->getFirstNull();
HXDLIN(1770)			this->insert(_hx_tmp7,this->gridBg);
HXLINE(1771)			this->loadSection(null());
            		}
            		else {
HXLINE(1775)			this->add(this->prevGridBg);
HXLINE(1776)			this->add(this->nextGridBg);
HXLINE(1777)			this->add(this->gridBg);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,createGrids,(void))

void ChartingState_obj::loadChart( ::Dynamic song){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1786_loadChart)
HXLINE(1787)		::states::PlayState_obj::SONG = song;
HXLINE(1788)		::backend::StageData_obj::loadDirectory(::states::PlayState_obj::SONG);
HXLINE(1789)		::backend::Conductor_obj::set_bpm(( (Float)(::states::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,loadChart,(void))

void ChartingState_obj::loadMusic( ::Dynamic __o_killAudio){
            		 ::Dynamic killAudio = __o_killAudio;
            		if (::hx::IsNull(__o_killAudio)) killAudio = false;
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1793_loadMusic)
HXDLIN(1793)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1794)		this->setSongPlaying(false);
HXLINE(1795)		Float time = ::backend::Conductor_obj::songPosition;
HXLINE(1797)		if (( (bool)(killAudio) )) {
HXLINE(1799)			::Array< ::String > sndsToKill = ::Array_obj< ::String >::__new(0);
HXLINE(1800)			{
HXLINE(1800)				::Dynamic map = ::backend::Paths_obj::currentTrackedSounds;
HXDLIN(1800)				::Dynamic _g_map = map;
HXDLIN(1800)				 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN(1800)				while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1800)					::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(1800)					 ::openfl::media::Sound _g_value = ( ( ::openfl::media::Sound)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN(1800)					::String _g_key = key;
HXDLIN(1800)					::String key1 = _g_key;
HXDLIN(1800)					 ::openfl::media::Sound snd = _g_value;
HXLINE(1803)					bool _hx_tmp;
HXDLIN(1803)					::String path = ( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1803)					 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(1803)					 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(1803)					if ((key1.indexOf(((HX_("/songs/",e0,b4,f9,cf) + ::StringTools_obj::trim(hideChars->replace(invalidChars->replace(path,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase()) + HX_("/",2f,00,00,00)),null()) != -1)) {
HXLINE(1803)						_hx_tmp = ::hx::IsNotNull( snd );
            					}
            					else {
HXLINE(1803)						_hx_tmp = false;
            					}
HXDLIN(1803)					if (_hx_tmp) {
HXLINE(1805)						sndsToKill->push(key1);
HXLINE(1806)						snd->close();
            					}
            				}
            			}
HXLINE(1810)			{
HXLINE(1810)				int _g = 0;
HXDLIN(1810)				while((_g < sndsToKill->length)){
HXLINE(1810)					::String key2 = sndsToKill->__get(_g);
HXDLIN(1810)					_g = (_g + 1);
HXLINE(1812)					::lime::utils::Assets_obj::cache->clear(key2);
HXLINE(1813)					::backend::Paths_obj::currentTrackedSounds->remove(key2);
HXLINE(1814)					::backend::Paths_obj::localTrackedAssets->remove(key2);
            				}
            			}
            		}
HXLINE(1818)		try {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::ChartingState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1823_loadMusic)
HXLINE(1823)				_gthis->songFinished = true;
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1820)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1820)			::String song = ( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1820)			 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(1820)			 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(1820)			_hx_tmp1->playMusic(::backend::Paths_obj::returnSound(((HX_("",00,00,00,00) + ::StringTools_obj::trim(hideChars1->replace(invalidChars1->replace(song,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase()) + HX_("/Inst",95,b3,69,40)),HX_("songs",fe,36,c7,80),true,null()),0,null(),null());
HXLINE(1821)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(1822)			::flixel::FlxG_obj::sound->music->set_time(time);
HXLINE(1823)			::flixel::FlxG_obj::sound->music->onComplete =  ::Dynamic(new _hx_Closure_0(_gthis));
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g1 = _hx_e;
HXLINE(1825)				 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g1);
HXLINE(1827)				{
HXLINE(1827)					 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
HXDLIN(1827)					 ::Dynamic data = (HX_("Error loading song: ",57,e0,db,a9) + ::Std_obj::string(e));
HXDLIN(1827)					_this->advanced(data,::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            				}
HXLINE(1828)				return;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(1831)		this->vocals->cleanup(true,null());
HXLINE(1832)		this->opponentVocals->cleanup(true,null());
HXLINE(1833)		if (( (bool)(::states::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(1835)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1837)				::String song1 = ( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1837)				::String postfix;
HXDLIN(1837)				bool postfix1;
HXDLIN(1837)				if (::hx::IsNotNull( this->characterData->__Field(HX_("vocalsP1",bf,a9,fc,1b),::hx::paccDynamic) )) {
HXLINE(1837)					postfix1 = ::hx::IsLess(  ::Dynamic(this->characterData->__Field(HX_("vocalsP1",bf,a9,fc,1b),::hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),1 );
            				}
            				else {
HXLINE(1837)					postfix1 = true;
            				}
HXDLIN(1837)				if (postfix1) {
HXLINE(1837)					postfix = HX_("Player",81,5f,4d,6c);
            				}
            				else {
HXLINE(1837)					postfix = ( (::String)(this->characterData->__Field(HX_("vocalsP1",bf,a9,fc,1b),::hx::paccDynamic)) );
            				}
HXDLIN(1837)				 ::EReg invalidChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(1837)				 ::EReg hideChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(1837)				::String songKey = ((HX_("",00,00,00,00) + ::StringTools_obj::trim(hideChars2->replace(invalidChars2->replace(song1,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase()) + HX_("/Voices",10,18,4f,34));
HXDLIN(1837)				if (::hx::IsNotNull( postfix )) {
HXLINE(1837)					songKey = (songKey + (HX_("-",2d,00,00,00) + postfix));
            				}
HXDLIN(1837)				 ::openfl::media::Sound playerVocals = ::backend::Paths_obj::returnSound(songKey,HX_("songs",fe,36,c7,80),true,false);
HXLINE(1838)				 ::flixel::sound::FlxSound _hx_tmp2 = this->vocals;
HXDLIN(1838)				 ::Dynamic _hx_tmp3;
HXDLIN(1838)				if (::hx::IsNotNull( playerVocals )) {
HXLINE(1838)					_hx_tmp3 = playerVocals;
            				}
            				else {
HXLINE(1838)					::String song2 = ( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1838)					::String postfix2 = null();
HXDLIN(1838)					 ::EReg invalidChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(1838)					 ::EReg hideChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(1838)					::String songKey1 = ((HX_("",00,00,00,00) + ::StringTools_obj::trim(hideChars3->replace(invalidChars3->replace(song2,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase()) + HX_("/Voices",10,18,4f,34));
HXDLIN(1838)					if (::hx::IsNotNull( postfix2 )) {
HXLINE(1838)						songKey1 = (songKey1 + (HX_("-",2d,00,00,00) + postfix2));
            					}
HXDLIN(1838)					_hx_tmp3 = ::backend::Paths_obj::returnSound(songKey1,HX_("songs",fe,36,c7,80),true,false);
            				}
HXDLIN(1838)				_hx_tmp2->loadEmbedded(_hx_tmp3,null(),null(),null());
HXLINE(1839)				this->vocals->set_volume(( (Float)(0) ));
HXLINE(1840)				this->vocals->play(null(),null(),null());
HXLINE(1841)				this->vocals->pause();
HXLINE(1842)				this->vocals->set_time(time);
HXLINE(1844)				::String song3 = ( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1844)				::String postfix3;
HXDLIN(1844)				bool postfix4;
HXDLIN(1844)				if (::hx::IsNotNull( this->characterData->__Field(HX_("vocalsP2",c0,a9,fc,1b),::hx::paccDynamic) )) {
HXLINE(1844)					postfix4 = ::hx::IsLess(  ::Dynamic(this->characterData->__Field(HX_("vocalsP2",c0,a9,fc,1b),::hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),1 );
            				}
            				else {
HXLINE(1844)					postfix4 = true;
            				}
HXDLIN(1844)				if (postfix4) {
HXLINE(1844)					postfix3 = HX_("Opponent",bd,75,6a,d2);
            				}
            				else {
HXLINE(1844)					postfix3 = ( (::String)(this->characterData->__Field(HX_("vocalsP2",c0,a9,fc,1b),::hx::paccDynamic)) );
            				}
HXDLIN(1844)				 ::EReg invalidChars4 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(1844)				 ::EReg hideChars4 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(1844)				::String songKey2 = ((HX_("",00,00,00,00) + ::StringTools_obj::trim(hideChars4->replace(invalidChars4->replace(song3,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase()) + HX_("/Voices",10,18,4f,34));
HXDLIN(1844)				if (::hx::IsNotNull( postfix3 )) {
HXLINE(1844)					songKey2 = (songKey2 + (HX_("-",2d,00,00,00) + postfix3));
            				}
HXDLIN(1844)				 ::openfl::media::Sound oppVocals = ::backend::Paths_obj::returnSound(songKey2,HX_("songs",fe,36,c7,80),true,false);
HXLINE(1845)				bool _hx_tmp4;
HXDLIN(1845)				if (::hx::IsNotNull( oppVocals )) {
HXLINE(1845)					_hx_tmp4 = (( (Float)(oppVocals->get_length()) ) > 0);
            				}
            				else {
HXLINE(1845)					_hx_tmp4 = false;
            				}
HXDLIN(1845)				if (_hx_tmp4) {
HXLINE(1847)					this->opponentVocals->loadEmbedded(oppVocals,null(),null(),null());
HXLINE(1848)					this->opponentVocals->set_volume(( (Float)(0) ));
HXLINE(1849)					this->opponentVocals->play(null(),null(),null());
HXLINE(1850)					this->opponentVocals->pause();
HXLINE(1851)					this->opponentVocals->set_time(time);
            				}
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g2 = _hx_e;
HXLINE(1854)					{
HXLINE(1854)						null();
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE(1858)		::backend::DiscordClient_obj::changePresence(HX_("Chart Editor",ef,b4,29,e9),( (::String)((HX_("Song: ",db,29,1d,62) + ::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic))) ),null(),null(),null(),null());
HXLINE(1861)		this->updateAudioVolume();
HXLINE(1862)		this->setPitch(null());
HXLINE(1863)		this->_cacheSections();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,loadMusic,(void))

void ChartingState_obj::onSongComplete(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1867_onSongComplete)
HXLINE(1868)		::haxe::Log_obj::trace(HX_("song completed",80,bd,98,24),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),1868,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("onSongComplete",6d,9d,f8,6b)));
HXLINE(1869)		this->setSongPlaying(false);
HXLINE(1870)		 ::flixel::sound::FlxSound _hx_tmp = ::flixel::FlxG_obj::sound->music;
HXDLIN(1870)		 ::flixel::sound::FlxSound _hx_tmp1 = this->vocals;
HXDLIN(1870)		::backend::Conductor_obj::songPosition = _hx_tmp->set_time(_hx_tmp1->set_time(this->opponentVocals->set_time((::flixel::FlxG_obj::sound->music->_length - ( (Float)(1) )))));
HXLINE(1871)		this->curSec = (( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length - 1);
HXLINE(1872)		this->forceDataUpdate = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,onSongComplete,(void))

void ChartingState_obj::updateAudioVolume(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1876_updateAudioVolume)
HXLINE(1877)		::flixel::FlxG_obj::sound->music->set_volume(this->instVolumeStepper->value);
HXLINE(1878)		this->vocals->set_volume(this->playerVolumeStepper->value);
HXLINE(1879)		this->opponentVocals->set_volume(this->opponentVolumeStepper->value);
HXLINE(1880)		if (this->instMuteCheckBox->checked) {
HXLINE(1880)			::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
            		}
HXLINE(1881)		if (this->playerMuteCheckBox->checked) {
HXLINE(1881)			this->vocals->set_volume(( (Float)(0) ));
            		}
HXLINE(1882)		if (this->opponentMuteCheckBox->checked) {
HXLINE(1882)			this->opponentVocals->set_volume(( (Float)(0) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateAudioVolume,(void))

void ChartingState_obj::setPitch( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1887_setPitch)
HXLINE(1889)		if (::hx::IsNull( value )) {
HXLINE(1889)			value = this->playbackRate;
            		}
HXLINE(1890)		::flixel::FlxG_obj::sound->music->set_pitch(( (Float)(value) ));
HXLINE(1891)		this->vocals->set_pitch(( (Float)(value) ));
HXLINE(1892)		this->opponentVocals->set_pitch(( (Float)(value) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,setPitch,(void))

void ChartingState_obj::setSongPlaying(bool doPlay){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1897_setSongPlaying)
HXLINE(1898)		if (::hx::IsNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1898)			return;
            		}
HXLINE(1900)		this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
HXLINE(1901)		this->opponentVocals->set_time(::flixel::FlxG_obj::sound->music->_time);
HXLINE(1903)		if (doPlay) {
HXLINE(1905)			::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(1906)			if ((::flixel::FlxG_obj::sound->music->_time < this->vocals->_length)) {
HXLINE(1906)				this->vocals->play(true,::flixel::FlxG_obj::sound->music->_time,null());
            			}
HXLINE(1907)			if ((::flixel::FlxG_obj::sound->music->_time < this->opponentVocals->_length)) {
HXLINE(1907)				this->opponentVocals->play(true,::flixel::FlxG_obj::sound->music->_time,null());
            			}
HXLINE(1908)			this->updateAudioVolume();
            		}
            		else {
HXLINE(1912)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(1913)			this->vocals->pause();
HXLINE(1914)			this->opponentVocals->pause();
            		}
HXLINE(1917)		{
HXLINE(1917)			 ::Dynamic filter = null();
HXDLIN(1917)			 ::flixel::group::FlxTypedGroupIterator note =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->strumLineNotes->members,filter);
HXDLIN(1917)			while(note->hasNext()){
HXLINE(1917)				 ::objects::StrumNote note1 = note->next().StaticCast<  ::objects::StrumNote >();
HXLINE(1919)				Float _hx_tmp;
HXDLIN(1919)				if (doPlay) {
HXLINE(1919)					_hx_tmp = ( (Float)(1) );
            				}
            				else {
HXLINE(1919)					_hx_tmp = ((Float)0.4);
            				}
HXDLIN(1919)				note1->set_alpha(_hx_tmp);
HXLINE(1920)				if (!(doPlay)) {
HXLINE(1922)					note1->playAnim(HX_("static",ae,dc,fb,05),null());
HXLINE(1923)					note1->resetAnim = ( (Float)(0) );
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,setSongPlaying,(void))

void ChartingState_obj::reloadNotes(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1929_reloadNotes)
HXLINE(1930)		this->selectedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1931)		{
HXLINE(1931)			int _g = 0;
HXDLIN(1931)			::Array< ::Dynamic> _g1 = this->notes;
HXDLIN(1931)			while((_g < _g1->length)){
HXLINE(1931)				 ::states::editors::content::MetaNote note = _g1->__get(_g).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(1931)				_g = (_g + 1);
HXDLIN(1931)				if (::hx::IsNotNull( note )) {
HXLINE(1931)					note->destroy();
            				}
            			}
            		}
HXLINE(1932)		{
HXLINE(1932)			int _g2 = 0;
HXDLIN(1932)			::Array< ::Dynamic> _g3 = this->events;
HXDLIN(1932)			while((_g2 < _g3->length)){
HXLINE(1932)				 ::states::editors::content::EventMetaNote event = _g3->__get(_g2).StaticCast<  ::states::editors::content::EventMetaNote >();
HXDLIN(1932)				_g2 = (_g2 + 1);
HXDLIN(1932)				if (::hx::IsNotNull( event )) {
HXLINE(1932)					event->destroy();
            				}
            			}
            		}
HXLINE(1933)		this->notes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1934)		this->events = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1935)		this->undoActions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1937)		{
HXLINE(1937)			int _g_current = 0;
HXDLIN(1937)			::Array< ::Dynamic> _g_array = ( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(1937)			while((_g_current < _g_array->length)){
HXLINE(1937)				 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN(1937)				_g_current = (_g_current + 1);
HXDLIN(1937)				int _g_key = (_g_current - 1);
HXDLIN(1937)				int secNum = _g_key;
HXDLIN(1937)				 ::Dynamic section = _g_value;
HXLINE(1938)				{
HXLINE(1938)					int _g4 = 0;
HXDLIN(1938)					::cpp::VirtualArray _g5 = ( (::cpp::VirtualArray)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1938)					while((_g4 < _g5->get_length())){
HXLINE(1938)						 ::Dynamic note1 = _g5->__get(_g4);
HXDLIN(1938)						_g4 = (_g4 + 1);
HXLINE(1939)						if (::hx::IsNotNull( note1 )) {
HXLINE(1940)							::Array< ::Dynamic> _hx_tmp = this->notes;
HXDLIN(1940)							_hx_tmp->push(this->createNote(note1,secNum));
            						}
            					}
            				}
            			}
            		}
HXLINE(1942)		{
HXLINE(1942)			int _g_current1 = 0;
HXDLIN(1942)			::cpp::VirtualArray _g_array1 = ( (::cpp::VirtualArray)(::states::PlayState_obj::SONG->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) );
HXDLIN(1942)			while((_g_current1 < _g_array1->get_length())){
HXLINE(1942)				 ::Dynamic _g_value1 = _g_array1->__get(_g_current1);
HXDLIN(1942)				_g_current1 = (_g_current1 + 1);
HXDLIN(1942)				int _g_key1 = (_g_current1 - 1);
HXDLIN(1942)				int eventNum = _g_key1;
HXDLIN(1942)				 ::Dynamic event1 = _g_value1;
HXLINE(1943)				bool _hx_tmp1;
HXDLIN(1943)				if (::hx::IsNotNull( event1 )) {
HXLINE(1943)					if ((this->cachedSectionTimes->length >= 1)) {
HXLINE(1943)						_hx_tmp1 = ::hx::IsLess( event1->__GetItem(0),this->cachedSectionTimes->__get((this->cachedSectionTimes->length - 1)) );
            					}
            					else {
HXLINE(1943)						_hx_tmp1 = true;
            					}
            				}
            				else {
HXLINE(1943)					_hx_tmp1 = false;
            				}
HXDLIN(1943)				if (_hx_tmp1) {
HXLINE(1944)					::Array< ::Dynamic> _hx_tmp2 = this->events;
HXDLIN(1944)					_hx_tmp2->push(this->createEvent(event1));
            				}
            			}
            		}
HXLINE(1946)		this->notes->sort(::states::PlayState_obj::sortByTime_dyn());
HXLINE(1947)		this->events->sort(::states::PlayState_obj::sortByTime_dyn());
HXLINE(1949)		::haxe::Log_obj::trace((HX_("Note count: ",27,73,68,87) + this->notes->length),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),1949,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("reloadNotes",28,36,6f,fb)));
HXLINE(1950)		::haxe::Log_obj::trace((HX_("Events count: ",4e,f1,61,17) + this->events->length),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),1950,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("reloadNotes",28,36,6f,fb)));
HXLINE(1951)		this->loadSection(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,reloadNotes,(void))

 ::states::editors::content::MetaNote ChartingState_obj::createNote( ::Dynamic note, ::Dynamic secNum){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1955_createNote)
HXLINE(1956)		if (::hx::IsNull( secNum )) {
HXLINE(1956)			secNum = this->curSec;
            		}
HXLINE(1957)		 ::Dynamic section =  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(( (int)(secNum) ));
HXLINE(1959)		Float daStrumTime = ( (Float)(note->__GetItem(0)) );
HXLINE(1960)		int daNoteData = ::Std_obj::_hx_int(::hx::Mod(note->__GetItem(1),::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER));
HXLINE(1961)		bool gottaHitNote = ::hx::IsLess( note->__GetItem(1),::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER );
HXLINE(1963)		 ::states::editors::content::MetaNote swagNote =  ::states::editors::content::MetaNote_obj::__alloc( HX_CTX ,daStrumTime,daNoteData,( (::cpp::VirtualArray)(note) ));
HXLINE(1964)		swagNote->mustPress = gottaHitNote;
HXLINE(1965)		swagNote->setSustainLength(( (Float)(note->__GetItem(2)) ),(this->cachedSectionCrochets->__get(( (int)(secNum) )) / ( (Float)(4) )),this->curZoom);
HXLINE(1966)		bool _hx_tmp;
HXDLIN(1966)		if (( (bool)(section->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)) )) {
HXLINE(1966)			_hx_tmp = ::hx::IsEq( gottaHitNote,section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic) );
            		}
            		else {
HXLINE(1966)			_hx_tmp = false;
            		}
HXDLIN(1966)		swagNote->gfNote = _hx_tmp;
HXLINE(1967)		swagNote->set_noteType(( (::String)(note->__GetItem(3)) ));
HXLINE(1968)		swagNote->scrollFactor->set_x(( (Float)(0) ));
HXLINE(1969)		int txt;
HXDLIN(1969)		if (::hx::IsNotNull( swagNote->noteType )) {
HXLINE(1969)			txt = this->noteTypes->indexOf(swagNote->noteType,null());
            		}
            		else {
HXLINE(1969)			txt = 0;
            		}
HXDLIN(1969)		 ::flixel::text::FlxText txt1 = swagNote->findNoteTypeText(txt);
HXLINE(1970)		if (::hx::IsNotNull( txt1 )) {
HXLINE(1970)			txt1->set_visible(this->showNoteTypeLabels);
            		}
HXLINE(1972)		swagNote->updateHitbox();
HXLINE(1973)		Float _hx_tmp1 = swagNote->get_width();
HXDLIN(1973)		if ((_hx_tmp1 > swagNote->get_height())) {
HXLINE(1974)			swagNote->setGraphicSize(::states::editors::ChartingState_obj::GRID_SIZE,null());
            		}
            		else {
HXLINE(1976)			swagNote->setGraphicSize(0,::states::editors::ChartingState_obj::GRID_SIZE);
            		}
HXLINE(1978)		swagNote->updateHitbox();
HXLINE(1979)		swagNote->set_active(false);
HXLINE(1980)		this->positionNoteXByData(swagNote,null());
HXLINE(1981)		this->positionNoteYOnTime(swagNote,( (int)(secNum) ));
HXLINE(1982)		return swagNote;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,createNote,return )

 ::states::editors::content::EventMetaNote ChartingState_obj::createEvent( ::Dynamic event){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_1986_createEvent)
HXLINE(1987)		Float daStrumTime = ( (Float)(event->__GetItem(0)) );
HXLINE(1988)		 ::states::editors::content::EventMetaNote swagEvent =  ::states::editors::content::EventMetaNote_obj::__alloc( HX_CTX ,daStrumTime,event);
HXLINE(1989)		swagEvent->set_x(this->gridBg->x);
HXLINE(1990)		 ::flixel::text::FlxText swagEvent1 = swagEvent->eventText;
HXDLIN(1990)		Float swagEvent2 = swagEvent->x;
HXDLIN(1990)		swagEvent1->set_x(((swagEvent2 - swagEvent->eventText->get_width()) - ( (Float)(10) )));
HXLINE(1991)		swagEvent->scrollFactor->set_x(( (Float)(0) ));
HXLINE(1992)		swagEvent->set_active(false);
HXLINE(1994)		int secNum = 0;
HXLINE(1995)		{
HXLINE(1995)			int _g = 1;
HXDLIN(1995)			int _g1 = this->cachedSectionTimes->length;
HXDLIN(1995)			while((_g < _g1)){
HXLINE(1995)				_g = (_g + 1);
HXDLIN(1995)				int i = (_g - 1);
HXLINE(1997)				if ((this->cachedSectionTimes->__get(i) > daStrumTime)) {
HXLINE(1997)					goto _hx_goto_102;
            				}
HXLINE(1998)				secNum = (secNum + 1);
            			}
            			_hx_goto_102:;
            		}
HXLINE(2000)		this->positionNoteYOnTime(swagEvent,secNum);
HXLINE(2001)		return swagEvent;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,createEvent,return )

void ChartingState_obj::_cacheSections(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2005__cacheSections)
HXLINE(2006)		Float time = ( (Float)(0) );
HXLINE(2007)		int row = 0;
HXLINE(2008)		this->cachedSectionRow = ::Array_obj< int >::__new(0);
HXLINE(2009)		this->cachedSectionTimes = ::Array_obj< Float >::__new(0);
HXLINE(2010)		this->cachedSectionCrochets = ::Array_obj< Float >::__new(0);
HXLINE(2011)		this->cachedSectionBPMs = ::Array_obj< Float >::__new(0);
HXLINE(2013)		if (::hx::IsNull( ::states::PlayState_obj::SONG )) {
HXLINE(2015)			this->cachedSectionRow->push(0);
HXLINE(2016)			this->cachedSectionTimes->push(0);
HXLINE(2017)			this->cachedSectionCrochets->push(0);
HXLINE(2018)			this->cachedSectionBPMs->push(0);
HXLINE(2019)			return;
            		}
HXLINE(2022)		Float bpm = ( (Float)(::states::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE(2023)		bool reachedLimit = false;
HXLINE(2024)		{
HXLINE(2024)			int _g_current = 0;
HXDLIN(2024)			::Array< ::Dynamic> _g_array = ( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(2024)			while((_g_current < _g_array->length)){
HXLINE(2024)				 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN(2024)				_g_current = (_g_current + 1);
HXDLIN(2024)				int _g_key = (_g_current - 1);
HXDLIN(2024)				int secNum = _g_key;
HXDLIN(2024)				 ::Dynamic section = _g_value;
HXLINE(2025)				{
HXLINE(2026)					 ::Dynamic secs = section->__Field(HX_("sectionBeats",18,52,2e,0f),::hx::paccDynamic);
HXLINE(2027)					bool _hx_tmp;
HXDLIN(2027)					bool _hx_tmp1;
HXDLIN(2027)					if (::hx::IsNotNull( secs )) {
HXLINE(2027)						_hx_tmp1 = ::Math_obj::isNaN(( (Float)(secs) ));
            					}
            					else {
HXLINE(2027)						_hx_tmp1 = true;
            					}
HXDLIN(2027)					if (!(_hx_tmp1)) {
HXLINE(2027)						_hx_tmp = ::hx::IsLessEq( secs,0 );
            					}
            					else {
HXLINE(2027)						_hx_tmp = true;
            					}
HXDLIN(2027)					if (_hx_tmp) {
HXLINE(2027)						section->__SetField(HX_("sectionBeats",18,52,2e,0f),4,::hx::paccDynamic);
            					}
HXLINE(2029)					if (( (bool)(section->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE(2029)						bpm = ( (Float)(section->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            					}
HXLINE(2030)					Float beat = ((( (Float)(60) ) / bpm) * ( (Float)(1000) ));
HXLINE(2033)					this->cachedSectionRow->push(row);
HXLINE(2034)					this->cachedSectionTimes->push(time);
HXLINE(2035)					this->cachedSectionCrochets->push(beat);
HXLINE(2036)					this->cachedSectionBPMs->push(bpm);
HXLINE(2038)					Float lastTime = time;
HXLINE(2039)					int rowRound = ::Math_obj::round((( (Float)(4) ) * ( (Float)(section->__Field(HX_("sectionBeats",18,52,2e,0f),::hx::paccDynamic)) )));
HXLINE(2040)					row = (row + rowRound);
HXLINE(2041)					time = (time + (beat * (( (Float)(rowRound) ) / ( (Float)(4) ))));
HXLINE(2043)					{
HXLINE(2043)						int _g = 0;
HXDLIN(2043)						::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2043)						while((_g < _g1->get_length())){
HXLINE(2043)							 ::Dynamic note = _g1->__get(_g);
HXDLIN(2043)							_g = (_g + 1);
HXLINE(2045)							bool _hx_tmp2;
HXDLIN(2045)							if ((secNum > 0)) {
HXLINE(2045)								_hx_tmp2 = ::hx::IsLess( note->__GetItem(0),lastTime );
            							}
            							else {
HXLINE(2045)								_hx_tmp2 = false;
            							}
HXDLIN(2045)							if (_hx_tmp2) {
HXLINE(2045)								note->__SetItem(0,lastTime);
            							}
            							else {
HXLINE(2046)								bool _hx_tmp3;
HXDLIN(2046)								if ((secNum < ( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length)) {
HXLINE(2046)									_hx_tmp3 = ::hx::IsGreaterEq( note->__GetItem(0),(time - ((Float)0.000001)) );
            								}
            								else {
HXLINE(2046)									_hx_tmp3 = false;
            								}
HXDLIN(2046)								if (_hx_tmp3) {
HXLINE(2046)									note->__SetItem(0,(time - ((Float)0.000001)));
            								}
            							}
            						}
            					}
HXLINE(2049)					bool _hx_tmp4;
HXDLIN(2049)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(2049)						_hx_tmp4 = (time >= ::flixel::FlxG_obj::sound->music->_length);
            					}
            					else {
HXLINE(2049)						_hx_tmp4 = false;
            					}
HXDLIN(2049)					if (_hx_tmp4) {
HXLINE(2051)						int lastSectionNum = (( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length - 1);
HXLINE(2052)						if ((secNum < lastSectionNum)) {
HXLINE(2054)							while(((( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length - 1) > secNum)){
HXLINE(2056)								( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->pop();
            							}
HXLINE(2059)							::haxe::Log_obj::trace((HX_("breaking at section ",4b,cd,b8,b0) + secNum),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),2059,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("_cacheSections",91,7b,ac,e7)));
HXLINE(2060)							reachedLimit = true;
HXLINE(2061)							goto _hx_goto_104;
            						}
            						else {
HXLINE(2063)							if ((secNum == lastSectionNum)) {
HXLINE(2065)								::haxe::Log_obj::trace((HX_("reached limit at section ",f5,59,0f,f0) + secNum),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),2065,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("_cacheSections",91,7b,ac,e7)));
HXLINE(2066)								reachedLimit = true;
            							}
            						}
            					}
            				}
            			}
            			_hx_goto_104:;
            		}
HXLINE(2071)		bool _hx_tmp5;
HXDLIN(2071)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(2071)			_hx_tmp5 = !(reachedLimit);
            		}
            		else {
HXLINE(2071)			_hx_tmp5 = false;
            		}
HXDLIN(2071)		if (_hx_tmp5) {
HXLINE(2073)			 ::Dynamic lastSection =  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length - 1));
HXLINE(2074)			Float beat1 = ((( (Float)(60) ) / bpm) * ( (Float)(1000) ));
HXLINE(2075)			Float sectionBeats;
HXDLIN(2075)			if (::hx::IsNotNull( lastSection )) {
HXLINE(2075)				sectionBeats = ( (Float)(lastSection->__Field(HX_("sectionBeats",18,52,2e,0f),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(2075)				sectionBeats = ( (Float)(4) );
            			}
HXLINE(2076)			int rowRound1 = ::Math_obj::round((( (Float)(4) ) * sectionBeats));
HXLINE(2077)			Float timeAdd = (beat1 * (( (Float)(rowRound1) ) / ( (Float)(4) )));
HXLINE(2078)			bool mustHitSec;
HXDLIN(2078)			if (::hx::IsNotNull( lastSection )) {
HXLINE(2078)				mustHitSec = ( (bool)(lastSection->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(2078)				mustHitSec = true;
            			}
HXLINE(2079)			bool changeBpmSec;
HXDLIN(2079)			if (::hx::IsNotNull( lastSection )) {
HXLINE(2079)				changeBpmSec = ( (bool)(lastSection->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(2079)				changeBpmSec = false;
            			}
HXLINE(2080)			bool altAnimSec;
HXDLIN(2080)			if (::hx::IsNotNull( lastSection )) {
HXLINE(2080)				altAnimSec = ( (bool)(lastSection->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(2080)				altAnimSec = false;
            			}
HXLINE(2081)			bool gfSec;
HXDLIN(2081)			if (::hx::IsNotNull( lastSection )) {
HXLINE(2081)				gfSec = ( (bool)(lastSection->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(2081)				gfSec = false;
            			}
HXLINE(2083)			while(!(reachedLimit)){
HXLINE(2085)				( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->push( ::Dynamic(::hx::Anon_obj::Create(7)
            					->setFixed(0,HX_("gfSection",86,e5,63,d4),gfSec)
            					->setFixed(1,HX_("altAnim",da,f3,f2,e5),altAnimSec)
            					->setFixed(2,HX_("sectionNotes",1c,c8,a7,fe),::cpp::VirtualArray_obj::__new(0))
            					->setFixed(3,HX_("bpm",df,be,4a,00),bpm)
            					->setFixed(4,HX_("sectionBeats",18,52,2e,0f),sectionBeats)
            					->setFixed(5,HX_("changeBPM",4f,4f,f8,1d),changeBpmSec)
            					->setFixed(6,HX_("mustHitSection",3b,5f,87,62),mustHitSec)));
HXLINE(2095)				this->cachedSectionRow->push(row);
HXLINE(2096)				this->cachedSectionTimes->push(time);
HXLINE(2097)				this->cachedSectionCrochets->push(beat1);
HXLINE(2098)				this->cachedSectionBPMs->push(bpm);
HXLINE(2100)				row = (row + rowRound1);
HXLINE(2101)				time = (time + timeAdd);
HXLINE(2103)				if ((time >= ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE(2105)					::haxe::Log_obj::trace((HX_("created sections until ",7c,0a,e2,a9) + (( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length - 1)),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),2105,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("_cacheSections",91,7b,ac,e7)));
HXLINE(2106)					reachedLimit = true;
            				}
            			}
            		}
HXLINE(2110)		this->cachedSectionRow->push(row);
HXLINE(2111)		this->cachedSectionTimes->push(time);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,_cacheSections,(void))

void ChartingState_obj::loadSection( ::Dynamic sec){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2119_loadSection)
HXLINE(2120)		if (::hx::IsNotNull( sec )) {
HXLINE(2120)			this->curSec = ( (int)(sec) );
            		}
HXLINE(2121)		Float Value = ( (Float)(this->curSec) );
HXDLIN(2121)		 ::Dynamic Max = (( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length - 1);
HXDLIN(2121)		Float lowerBound;
HXDLIN(2121)		if ((Value < 0)) {
HXLINE(2121)			lowerBound = ( (Float)(0) );
            		}
            		else {
HXLINE(2121)			lowerBound = Value;
            		}
HXDLIN(2121)		Float _hx_tmp;
HXDLIN(2121)		bool _hx_tmp1;
HXDLIN(2121)		if (::hx::IsNotNull( Max )) {
HXLINE(2121)			_hx_tmp1 = ::hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE(2121)			_hx_tmp1 = false;
            		}
HXDLIN(2121)		if (_hx_tmp1) {
HXLINE(2121)			_hx_tmp = ( (Float)(Max) );
            		}
            		else {
HXLINE(2121)			_hx_tmp = lowerBound;
            		}
HXDLIN(2121)		this->curSec = ::Std_obj::_hx_int(_hx_tmp);
HXLINE(2122)		::backend::Conductor_obj::set_bpm(this->cachedSectionBPMs->__get(this->curSec));
HXLINE(2124)		Float hei = ( (Float)(0) );
HXLINE(2125)		if ((this->curSec > 0)) {
HXLINE(2127)			this->prevGridBg->set_y((( (Float)((this->cachedSectionRow->__get((this->curSec - 1)) * ::states::editors::ChartingState_obj::GRID_SIZE)) ) * this->curZoom));
HXLINE(2128)			this->prevGridBg->set_rows(((( (Float)(4) ) * ( (Float)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((this->curSec - 1))->__Field(HX_("sectionBeats",18,52,2e,0f),::hx::paccDynamic)) )) * this->curZoom));
HXLINE(2129)			this->prevGridBg->set_visible(this->showPreviousSection);
HXLINE(2130)			hei = (hei + this->prevGridBg->get_height());
HXLINE(2131)			this->eventLockOverlay->set_y(this->prevGridBg->y);
            		}
            		else {
HXLINE(2133)			this->prevGridBg->set_visible(false);
            		}
HXLINE(2135)		if ((this->curSec < (( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length - 1))) {
HXLINE(2137)			this->nextGridBg->set_y((( (Float)((this->cachedSectionRow->__get((this->curSec + 1)) * ::states::editors::ChartingState_obj::GRID_SIZE)) ) * this->curZoom));
HXLINE(2138)			this->nextGridBg->set_rows(((( (Float)(4) ) * ( (Float)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((this->curSec + 1))->__Field(HX_("sectionBeats",18,52,2e,0f),::hx::paccDynamic)) )) * this->curZoom));
HXLINE(2139)			this->nextGridBg->set_visible(this->showNextSection);
HXLINE(2140)			hei = (hei + this->nextGridBg->get_height());
            		}
            		else {
HXLINE(2142)			this->nextGridBg->set_visible(false);
            		}
HXLINE(2144)		this->gridBg->set_y((( (Float)((this->cachedSectionRow->__get(this->curSec) * ::states::editors::ChartingState_obj::GRID_SIZE)) ) * this->curZoom));
HXLINE(2145)		this->gridBg->set_rows(((( (Float)(4) ) * ( (Float)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSec)->__Field(HX_("sectionBeats",18,52,2e,0f),::hx::paccDynamic)) )) * this->curZoom));
HXLINE(2146)		hei = (hei + this->gridBg->get_height());
HXLINE(2148)		if (!(this->prevGridBg->visible)) {
HXLINE(2148)			this->eventLockOverlay->set_y(this->gridBg->y);
            		}
HXLINE(2149)		this->eventLockOverlay->scale->set_y(hei);
HXLINE(2150)		this->eventLockOverlay->updateHitbox();
HXLINE(2152)		this->softReloadNotes(null());
HXLINE(2153)		this->updateHeads(null());
HXLINE(2155)		 ::Dynamic sec1;
HXDLIN(2155)		if (::hx::IsNotNull( ::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic) )) {
HXLINE(2155)			sec1 =  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSec);
            		}
            		else {
HXLINE(2155)			sec1 = null();
            		}
HXDLIN(2155)		 ::Dynamic sec2 = sec1;
HXLINE(2156)		if (::hx::IsNotNull( sec2 )) {
HXLINE(2158)			this->mustHitCheckBox->set_checked( ::Dynamic(sec2->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)));
HXLINE(2159)			this->gfSectionCheckBox->set_checked( ::Dynamic(sec2->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)));
HXLINE(2160)			this->altAnimSectionCheckBox->set_checked( ::Dynamic(sec2->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)));
HXLINE(2161)			this->changeBpmCheckBox->set_checked( ::Dynamic(sec2->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)));
HXLINE(2162)			this->changeBpmStepper->set_value(::backend::Conductor_obj::bpm);
HXLINE(2163)			this->beatsPerSecStepper->set_value(( (Float)(sec2->__Field(HX_("sectionBeats",18,52,2e,0f),::hx::paccDynamic)) ));
HXLINE(2165)			this->strumTimeStepper->step = ::backend::Conductor_obj::stepCrochet;
HXLINE(2166)			this->susLengthStepper->step = ((this->cachedSectionCrochets->__get(this->curSec) / ( (Float)(4) )) / ( (Float)(2) ));
HXLINE(2167)			this->susLengthStepper->set_max((this->susLengthStepper->step * ( (Float)(128) )));
HXLINE(2168)			if ((this->selectedNotes->length > 1)) {
HXLINE(2168)				this->susLengthStepper->set_min(-(this->susLengthStepper->max));
            			}
            			else {
HXLINE(2169)				this->susLengthStepper->set_min(( (Float)(0) ));
            			}
            		}
HXLINE(2171)		this->prevGridBg->vortexLineEnabled = (this->gridBg->vortexLineEnabled = (this->nextGridBg->vortexLineEnabled = this->vortexEnabled));
HXLINE(2172)		this->prevGridBg->vortexLineSpace = (this->gridBg->vortexLineSpace = (this->nextGridBg->vortexLineSpace = (( (Float)((::states::editors::ChartingState_obj::GRID_SIZE * 4)) ) * this->curZoom)));
HXLINE(2173)		this->updateWaveform();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,loadSection,(void))

void ChartingState_obj::softReloadNotes(::hx::Null< bool >  __o_onlyCurrent){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,Float,minTime,Float,maxTime) HXARGC(1)
            		bool _hx_run( ::states::editors::content::MetaNote note){
            			HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2185_softReloadNotes)
HXLINE(2185)			if ((note->strumTime >= minTime)) {
HXLINE(2185)				return (note->strumTime < maxTime);
            			}
            			else {
HXLINE(2185)				return false;
            			}
HXDLIN(2185)			return false;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		bool onlyCurrent = __o_onlyCurrent.Default(false);
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2177_softReloadNotes)
HXDLIN(2177)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2178)		if (!(onlyCurrent)) {
HXLINE(2178)			this->behindRenderedNotes->clear();
            		}
HXLINE(2179)		this->curRenderedNotes->clear();
HXLINE(2181)		Float minTime = this->getMinNoteTime(this->curSec);
HXLINE(2182)		Float maxTime = this->getMaxNoteTime(this->curSec);
HXLINE(2183)		 ::Dynamic curSecFilter =  ::Dynamic(new _hx_Closure_0(minTime,maxTime));
HXLINE(2188)		bool firstNote = false;
HXLINE(2189)		bool firstEvent = false;
HXLINE(2190)		this->sectionFirstNoteID = 0;
HXLINE(2191)		this->sectionFirstEventID = 0;
HXLINE(2192)		{
HXLINE(2192)			int _g_current = 0;
HXDLIN(2192)			::Array< ::Dynamic> _g_array = this->notes;
HXDLIN(2192)			while((_g_current < _g_array->length)){
HXLINE(2192)				 ::states::editors::content::MetaNote _g_value = _g_array->__get(_g_current).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(2192)				_g_current = (_g_current + 1);
HXDLIN(2192)				int _g_key = (_g_current - 1);
HXDLIN(2192)				int num = _g_key;
HXDLIN(2192)				 ::states::editors::content::MetaNote note = _g_value;
HXLINE(2194)				bool _hx_tmp;
HXDLIN(2194)				if (::hx::IsNotNull( note )) {
HXLINE(2194)					_hx_tmp = ( (bool)(curSecFilter(note)) );
            				}
            				else {
HXLINE(2194)					_hx_tmp = false;
            				}
HXDLIN(2194)				if (_hx_tmp) {
HXLINE(2196)					if (!(firstNote)) {
HXLINE(2196)						this->sectionFirstNoteID = num;
            					}
HXLINE(2197)					this->curRenderedNotes->add(note).StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(2198)					Float _hx_tmp1;
HXDLIN(2198)					if ((note->strumTime >= ::backend::Conductor_obj::songPosition)) {
HXLINE(2198)						_hx_tmp1 = ( (Float)(1) );
            					}
            					else {
HXLINE(2198)						_hx_tmp1 = ((Float)0.6);
            					}
HXDLIN(2198)					note->set_alpha(_hx_tmp1);
HXLINE(2199)					if (note->get_hasSustain()) {
HXLINE(2199)						note->updateSustainToZoom((this->cachedSectionCrochets->__get(this->curSec) / ( (Float)(4) )),this->curZoom);
            					}
            				}
            			}
            		}
HXLINE(2203)		if (::states::editors::ChartingState_obj::SHOW_EVENT_COLUMN) {
HXLINE(2205)			int _g_current1 = 0;
HXDLIN(2205)			::Array< ::Dynamic> _g_array1 = this->events;
HXDLIN(2205)			while((_g_current1 < _g_array1->length)){
HXLINE(2205)				 ::states::editors::content::EventMetaNote _g_value1 = _g_array1->__get(_g_current1).StaticCast<  ::states::editors::content::EventMetaNote >();
HXDLIN(2205)				_g_current1 = (_g_current1 + 1);
HXDLIN(2205)				int _g_key1 = (_g_current1 - 1);
HXDLIN(2205)				int num1 = _g_key1;
HXDLIN(2205)				 ::states::editors::content::EventMetaNote event = _g_value1;
HXLINE(2207)				bool _hx_tmp2;
HXDLIN(2207)				if (::hx::IsNotNull( event )) {
HXLINE(2207)					_hx_tmp2 = ( (bool)(curSecFilter(event)) );
            				}
            				else {
HXLINE(2207)					_hx_tmp2 = false;
            				}
HXDLIN(2207)				if (_hx_tmp2) {
HXLINE(2209)					if (!(firstEvent)) {
HXLINE(2209)						this->sectionFirstEventID = num1;
            					}
HXLINE(2210)					this->curRenderedNotes->add(event).StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(2211)					Float _hx_tmp3;
HXDLIN(2211)					if ((event->strumTime >= ::backend::Conductor_obj::songPosition)) {
HXLINE(2211)						_hx_tmp3 = ( (Float)(1) );
            					}
            					else {
HXLINE(2211)						_hx_tmp3 = ((Float)0.6);
            					}
HXDLIN(2211)					event->set_alpha(_hx_tmp3);
HXLINE(2212)					event->eventText->set_visible(true);
            				}
            			}
            		}
HXLINE(2217)		if (!(onlyCurrent)) {
HXLINE(2219)			bool _hx_tmp4;
HXDLIN(2219)			if (!(this->showPreviousSection)) {
HXLINE(2219)				_hx_tmp4 = this->showNextSection;
            			}
            			else {
HXLINE(2219)				_hx_tmp4 = true;
            			}
HXDLIN(2219)			if (_hx_tmp4) {
            				HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_1,Float,prevMaxTime, ::states::editors::ChartingState,_gthis,Float,nextMaxTime,Float,nextMinTime,Float,prevMinTime) HXARGC(1)
            				bool _hx_run( ::states::editors::content::MetaNote note){
            					HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2227_softReloadNotes)
HXLINE(2227)					bool otherSecFilter;
HXDLIN(2227)					if (_gthis->prevGridBg->visible) {
HXLINE(2227)						if ((note->strumTime >= prevMinTime)) {
HXLINE(2227)							otherSecFilter = (note->strumTime < prevMaxTime);
            						}
            						else {
HXLINE(2227)							otherSecFilter = false;
            						}
            					}
            					else {
HXLINE(2227)						otherSecFilter = false;
            					}
HXDLIN(2227)					if (!(otherSecFilter)) {
HXLINE(2228)						if (_gthis->nextGridBg->visible) {
HXLINE(2228)							if ((note->strumTime >= nextMinTime)) {
HXLINE(2228)								return (note->strumTime < nextMaxTime);
            							}
            							else {
HXLINE(2228)								return false;
            							}
            						}
            						else {
HXLINE(2228)							return false;
            						}
            					}
            					else {
HXLINE(2227)						return true;
            					}
HXDLIN(2227)					return false;
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE(2221)				Float prevMinTime = this->getMinNoteTime((this->curSec - 1));
HXLINE(2222)				Float prevMaxTime = this->getMaxNoteTime((this->curSec - 1));
HXLINE(2223)				Float nextMinTime = this->getMinNoteTime((this->curSec + 1));
HXLINE(2224)				Float nextMaxTime = this->getMaxNoteTime((this->curSec + 1));
HXLINE(2225)				 ::Dynamic otherSecFilter =  ::Dynamic(new _hx_Closure_1(prevMaxTime,_gthis,nextMaxTime,nextMinTime,prevMinTime));
HXLINE(2231)				{
HXLINE(2231)					int _g = 0;
HXDLIN(2231)					 ::Dynamic f = otherSecFilter;
HXDLIN(2231)					::Array< ::Dynamic> _g1 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(2231)					{
HXLINE(2231)						int _g2 = 0;
HXDLIN(2231)						::Array< ::Dynamic> _g3 = this->notes;
HXDLIN(2231)						while((_g2 < _g3->length)){
HXLINE(2231)							 ::states::editors::content::MetaNote v = _g3->__get(_g2).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(2231)							_g2 = (_g2 + 1);
HXDLIN(2231)							if (( (bool)(f(v)) )) {
HXLINE(2231)								_g1->push(v);
            							}
            						}
            					}
HXDLIN(2231)					::Array< ::Dynamic> _g4 = _g1;
HXDLIN(2231)					while((_g < _g4->length)){
HXLINE(2231)						 ::states::editors::content::MetaNote note1 = _g4->__get(_g).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(2231)						_g = (_g + 1);
HXLINE(2233)						this->behindRenderedNotes->add(note1).StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(2234)						note1->set_alpha(((Float)0.4));
HXLINE(2235)						if (note1->get_hasSustain()) {
HXLINE(2235)							note1->updateSustainToZoom((this->cachedSectionCrochets->__get(this->curSec) / ( (Float)(4) )),this->curZoom);
            						}
            					}
            				}
HXLINE(2238)				if (::states::editors::ChartingState_obj::SHOW_EVENT_COLUMN) {
HXLINE(2240)					int _g5 = 0;
HXDLIN(2240)					 ::Dynamic f1 = otherSecFilter;
HXDLIN(2240)					::Array< ::Dynamic> _g6 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(2240)					{
HXLINE(2240)						int _g7 = 0;
HXDLIN(2240)						::Array< ::Dynamic> _g8 = this->events;
HXDLIN(2240)						while((_g7 < _g8->length)){
HXLINE(2240)							 ::states::editors::content::EventMetaNote v1 = _g8->__get(_g7).StaticCast<  ::states::editors::content::EventMetaNote >();
HXDLIN(2240)							_g7 = (_g7 + 1);
HXDLIN(2240)							if (( (bool)(f1(v1)) )) {
HXLINE(2240)								_g6->push(v1);
            							}
            						}
            					}
HXDLIN(2240)					::Array< ::Dynamic> _g9 = _g6;
HXDLIN(2240)					while((_g5 < _g9->length)){
HXLINE(2240)						 ::states::editors::content::EventMetaNote event1 = _g9->__get(_g5).StaticCast<  ::states::editors::content::EventMetaNote >();
HXDLIN(2240)						_g5 = (_g5 + 1);
HXLINE(2242)						this->behindRenderedNotes->add(event1).StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(2243)						event1->set_alpha(((Float)0.4));
HXLINE(2244)						event1->eventText->set_visible(false);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,softReloadNotes,(void))

Float ChartingState_obj::getMinNoteTime(int sec){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2252_getMinNoteTime)
HXLINE(2253)		Float minTime = ::Math_obj::NEGATIVE_INFINITY;
HXLINE(2254)		if ((sec > 0)) {
HXLINE(2255)			minTime = this->cachedSectionTimes->__get(sec);
            		}
HXLINE(2256)		return minTime;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getMinNoteTime,return )

Float ChartingState_obj::getMaxNoteTime(int sec){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2260_getMaxNoteTime)
HXLINE(2261)		Float maxTime = ::Math_obj::POSITIVE_INFINITY;
HXLINE(2262)		if ((sec < this->cachedSectionTimes->length)) {
HXLINE(2263)			maxTime = this->cachedSectionTimes->__get((sec + 1));
            		}
HXLINE(2264)		return maxTime;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getMaxNoteTime,return )

void ChartingState_obj::positionNoteXByData( ::states::editors::content::MetaNote note, ::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2268_positionNoteXByData)
HXLINE(2269)		if (::hx::IsNull( data )) {
HXLINE(2269)			data = note->songData->__get(1);
            		}
HXLINE(2271)		Float noteX = this->gridBg->x;
HXDLIN(2271)		int noteX1 = ::states::editors::ChartingState_obj::GRID_SIZE;
HXDLIN(2271)		Float noteX2 = (noteX + ((( (Float)(noteX1) ) - note->get_width()) / ( (Float)(2) )));
HXLINE(2272)		if (::states::editors::ChartingState_obj::SHOW_EVENT_COLUMN) {
HXLINE(2272)			noteX2 = (noteX2 + ::states::editors::ChartingState_obj::GRID_SIZE);
            		}
HXLINE(2274)		noteX2 = (noteX2 + (::states::editors::ChartingState_obj::GRID_SIZE * ( (int)(data) )));
HXLINE(2275)		note->set_x(noteX2);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,positionNoteXByData,(void))

void ChartingState_obj::positionNoteYOnTime( ::states::editors::content::MetaNote note,int section){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2280_positionNoteYOnTime)
HXLINE(2281)		Float time = (note->strumTime - this->cachedSectionTimes->__get(section));
HXLINE(2282)		Float noteY = ((((time / this->cachedSectionCrochets->__get(section)) * ( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) )) * ( (Float)(4) )) * this->curZoom);
HXLINE(2283)		noteY = (noteY + (( (Float)((this->cachedSectionRow->__get(section) * ::states::editors::ChartingState_obj::GRID_SIZE)) ) * this->curZoom));
HXLINE(2284)		noteY = ::Math_obj::max(noteY,( (Float)(-150) ));
HXLINE(2285)		Float _hx_tmp = (( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ) / ( (Float)(2) ));
HXDLIN(2285)		note->set_y((noteY + (_hx_tmp - (note->get_height() / ( (Float)(2) )))));
HXLINE(2286)		note->chartY = noteY;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,positionNoteYOnTime,(void))

void ChartingState_obj::updateJsonData(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2293_updateJsonData)
HXDLIN(2293)		int _g = 1;
HXDLIN(2293)		int _g1 = (::states::editors::ChartingState_obj::GRID_PLAYERS + 1);
HXDLIN(2293)		while((_g < _g1)){
HXDLIN(2293)			_g = (_g + 1);
HXDLIN(2293)			int i = (_g - 1);
HXLINE(2296)			 ::Dynamic data = this->loadCharacterFile(( (::String)(::Reflect_obj::field(::states::PlayState_obj::SONG,(HX_("player",61,eb,b8,37) + i))) ));
HXLINE(2297)			 ::Dynamic _hx_tmp;
HXDLIN(2297)			bool _hx_tmp1;
HXDLIN(2297)			if (::hx::IsNotNull( data )) {
HXLINE(2297)				_hx_tmp1 = ::hx::IsNotNull( data->__Field(HX_("healthicon",15,8e,6f,17),::hx::paccDynamic) );
            			}
            			else {
HXLINE(2297)				_hx_tmp1 = false;
            			}
HXDLIN(2297)			if (_hx_tmp1) {
HXLINE(2297)				_hx_tmp =  ::Dynamic(data->__Field(HX_("healthicon",15,8e,6f,17),::hx::paccDynamic));
            			}
            			else {
HXLINE(2297)				_hx_tmp = HX_("face",9d,b4,b5,43);
            			}
HXDLIN(2297)			::Reflect_obj::setField(this->characterData,(HX_("iconP",b7,a2,d7,b6) + i),_hx_tmp);
HXLINE(2298)			 ::Dynamic _hx_tmp2;
HXDLIN(2298)			bool _hx_tmp3;
HXDLIN(2298)			if (::hx::IsNotNull( data )) {
HXLINE(2298)				_hx_tmp3 = ::hx::IsNotNull( data->__Field(HX_("vocals_file",3d,c5,2d,83),::hx::paccDynamic) );
            			}
            			else {
HXLINE(2298)				_hx_tmp3 = false;
            			}
HXDLIN(2298)			if (_hx_tmp3) {
HXLINE(2298)				_hx_tmp2 =  ::Dynamic(data->__Field(HX_("vocals_file",3d,c5,2d,83),::hx::paccDynamic));
            			}
            			else {
HXLINE(2298)				_hx_tmp2 = HX_("",00,00,00,00);
            			}
HXDLIN(2298)			::Reflect_obj::setField(this->characterData,(HX_("vocalsP",32,42,9d,cd) + i),_hx_tmp2);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateJsonData,(void))

void ChartingState_obj::updateHeads(::hx::Null< bool >  __o_ignoreCheck){
            		bool ignoreCheck = __o_ignoreCheck.Default(false);
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2305_updateHeads)
HXLINE(2306)		 ::Dynamic curSecData =  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSec);
HXLINE(2307)		bool isGfSection;
HXDLIN(2307)		if (::hx::IsNotNull( curSecData )) {
HXLINE(2307)			isGfSection = ::hx::IsEq( curSecData->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic),true );
            		}
            		else {
HXLINE(2307)			isGfSection = false;
            		}
HXLINE(2308)		bool _hx_tmp;
HXDLIN(2308)		bool _hx_tmp1;
HXDLIN(2308)		if (::hx::IsEq( this->_lastGfSection,isGfSection )) {
HXLINE(2308)			_hx_tmp1 = (this->_lastSec == this->curSec);
            		}
            		else {
HXLINE(2308)			_hx_tmp1 = false;
            		}
HXDLIN(2308)		if (_hx_tmp1) {
HXLINE(2308)			_hx_tmp = !(ignoreCheck);
            		}
            		else {
HXLINE(2308)			_hx_tmp = false;
            		}
HXDLIN(2308)		if (_hx_tmp) {
HXLINE(2308)			return;
            		}
HXLINE(2310)		{
HXLINE(2310)			int _g = 0;
HXDLIN(2310)			int _g1 = ::states::editors::ChartingState_obj::GRID_PLAYERS;
HXDLIN(2310)			while((_g < _g1)){
HXLINE(2310)				_g = (_g + 1);
HXDLIN(2310)				int i = (_g - 1);
HXLINE(2312)				 ::objects::HealthIcon icon = this->icons->__get(i).StaticCast<  ::objects::HealthIcon >();
HXLINE(2314)				::String iconName = ( (::String)(::Reflect_obj::field(this->characterData,(HX_("iconP",b7,a2,d7,b6) + icon->ID))) );
HXLINE(2315)				icon->changeIcon(iconName,null());
            			}
            		}
HXLINE(2318)		if ((this->icons->length > 1)) {
HXLINE(2320)			 ::objects::HealthIcon iconP1 = this->icons->__get(0).StaticCast<  ::objects::HealthIcon >();
HXLINE(2321)			 ::objects::HealthIcon iconP2 = this->icons->__get(1).StaticCast<  ::objects::HealthIcon >();
HXLINE(2322)			bool mustHitSection;
HXDLIN(2322)			if (::hx::IsNotNull( curSecData )) {
HXLINE(2322)				mustHitSection = ::hx::IsEq( curSecData->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic),true );
            			}
            			else {
HXLINE(2322)				mustHitSection = false;
            			}
HXLINE(2323)			if (isGfSection) {
HXLINE(2325)				if (mustHitSection) {
HXLINE(2326)					iconP1->changeIcon(HX_("gf",1f,5a,00,00),null());
            				}
            				else {
HXLINE(2328)					iconP2->changeIcon(HX_("gf",1f,5a,00,00),null());
            				}
            			}
HXLINE(2331)			if (mustHitSection) {
HXLINE(2332)				 ::flixel::FlxSprite _hx_tmp2 = this->mustHitIndicator;
HXDLIN(2332)				Float iconP11 = iconP1->x;
HXDLIN(2332)				_hx_tmp2->set_x((iconP11 + (iconP1->get_width() / ( (Float)(2) ))));
            			}
            			else {
HXLINE(2334)				 ::flixel::FlxSprite _hx_tmp3 = this->mustHitIndicator;
HXDLIN(2334)				Float iconP21 = iconP2->x;
HXDLIN(2334)				_hx_tmp3->set_x((iconP21 + (iconP2->get_width() / ( (Float)(2) ))));
            			}
            		}
HXLINE(2336)		this->_lastGfSection = isGfSection;
HXLINE(2337)		this->_lastSec = this->curSec;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,updateHeads,(void))

void ChartingState_obj::addChartingTab(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::ChartingState,_gthis) HXARGC(1)
            		void _hx_run(Float v){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2365_addChartingTab)
HXLINE(2365)			 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(2365)			_gthis1->setPitch((_gthis->playbackRate = v));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2369_addChartingTab)
HXLINE(2369)			_gthis->chartEditorSave->data->__SetField(HX_("mouseScrollSnap",7c,ff,c9,1a),_gthis->mouseSnapCheckBox->checked,::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2372_addChartingTab)
HXLINE(2372)			_gthis->chartEditorSave->data->__SetField(HX_("ignoreProgressWarns",0e,f4,5b,15),_gthis->ignoreProgressCheckBox->checked,::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2355_addChartingTab)
HXDLIN(2355)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2356)		 ::flixel::group::FlxTypedSpriteGroup tab_group = this->mainBox->getTab(HX_("Charting",e4,0a,35,96))->menu;
HXLINE(2357)		int objX = 10;
HXLINE(2358)		int objY = 10;
HXLINE(2360)		 ::flixel::text::FlxText txt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,objX,objY,280,HX_("Any options here won't actually affect gameplay!",5e,cf,45,86),null(),null());
HXLINE(2361)		txt->set_alignment(HX_("center",d5,25,db,05));
HXLINE(2362)		tab_group->add(txt).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2364)		objY = (objY + 25);
HXLINE(2365)		this->playbackSlider =  ::backend::ui::PsychUISlider_obj::__alloc( HX_CTX ,50,objY, ::Dynamic(new _hx_Closure_0(_gthis)),1,((Float)0.1),((Float)5.0),200,null(),null());
HXLINE(2366)		this->playbackSlider->set_label(HX_("Playback Rate",05,cb,36,2d));
HXLINE(2368)		objY = (objY + 60);
HXLINE(2369)		this->mouseSnapCheckBox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)(objX) ),( (Float)(objY) ),HX_("Mouse Scroll Snap",a2,30,d9,47),100, ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE(2370)		this->mouseSnapCheckBox->set_checked( ::Dynamic(this->chartEditorSave->data->__Field(HX_("mouseScrollSnap",7c,ff,c9,1a),::hx::paccDynamic)));
HXLINE(2372)		this->ignoreProgressCheckBox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)((objX + 150)) ),( (Float)(objY) ),HX_("Ignore Progress Warnings",fc,3a,c1,0a),100, ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE(2373)		this->ignoreProgressCheckBox->set_checked( ::Dynamic(this->chartEditorSave->data->__Field(HX_("ignoreProgressWarns",0e,f4,5b,15),::hx::paccDynamic)));
HXLINE(2375)		objY = (objY + 50);
HXLINE(2376)		this->hitsoundPlayerStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,objX,objY,((Float)0.2),0,0,1,1,null(),null());
HXLINE(2377)		this->hitsoundOpponentStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,(objX + 100),objY,((Float)0.2),0,0,1,1,null(),null());
HXLINE(2378)		this->metronomeStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,(objX + 200),objY,((Float)0.2),0,0,1,1,null(),null());
HXLINE(2380)		objY = (objY + 50);
HXLINE(2381)		this->instVolumeStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,objX,objY,((Float)0.1),((Float)0.6),0,1,1,null(),null());
HXLINE(2382)		this->instVolumeStepper->onValueChange = this->updateAudioVolume_dyn();
HXLINE(2383)		this->playerVolumeStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,(objX + 100),objY,((Float)0.1),1,0,1,1,null(),null());
HXLINE(2384)		this->playerVolumeStepper->onValueChange = this->updateAudioVolume_dyn();
HXLINE(2385)		this->opponentVolumeStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,(objX + 200),objY,((Float)0.1),1,0,1,1,null(),null());
HXLINE(2386)		this->opponentVolumeStepper->onValueChange = this->updateAudioVolume_dyn();
HXLINE(2388)		objY = (objY + 25);
HXLINE(2389)		this->instMuteCheckBox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)(objX) ),( (Float)(objY) ),HX_("Mute",f9,9a,3e,33),60,this->updateAudioVolume_dyn());
HXLINE(2390)		this->playerMuteCheckBox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)((objX + 100)) ),( (Float)(objY) ),HX_("Mute",f9,9a,3e,33),60,this->updateAudioVolume_dyn());
HXLINE(2391)		this->opponentMuteCheckBox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)((objX + 200)) ),( (Float)(objY) ),HX_("Mute",f9,9a,3e,33),60,this->updateAudioVolume_dyn());
HXLINE(2393)		tab_group->add(this->playbackSlider).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2394)		tab_group->add(this->mouseSnapCheckBox).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2395)		tab_group->add(this->ignoreProgressCheckBox).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2397)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->hitsoundPlayerStepper->x,(this->hitsoundPlayerStepper->y - ( (Float)(15) )),100,HX_("Hitsound (Player):",76,c2,47,13),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2398)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->hitsoundOpponentStepper->x,(this->hitsoundOpponentStepper->y - ( (Float)(15) )),100,HX_("Hitsound (Opp.):",b4,8e,9c,1d),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2399)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->metronomeStepper->x,(this->metronomeStepper->y - ( (Float)(15) )),100,HX_("Metronome:",e8,ac,71,80),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2400)		tab_group->add(this->hitsoundPlayerStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2401)		tab_group->add(this->hitsoundOpponentStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2402)		tab_group->add(this->metronomeStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2404)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->instVolumeStepper->x,(this->instVolumeStepper->y - ( (Float)(15) )),100,HX_("Inst. Volume:",68,22,3f,0e),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2405)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->playerVolumeStepper->x,(this->playerVolumeStepper->y - ( (Float)(15) )),100,HX_("Main Vocals:",35,93,5d,de),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2406)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->opponentVolumeStepper->x,(this->opponentVolumeStepper->y - ( (Float)(15) )),100,HX_("Opp. Vocals:",1b,be,93,74),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2407)		tab_group->add(this->instVolumeStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2408)		tab_group->add(this->instMuteCheckBox).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2409)		tab_group->add(this->playerVolumeStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2410)		tab_group->add(this->playerMuteCheckBox).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2411)		tab_group->add(this->opponentVolumeStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2412)		tab_group->add(this->opponentMuteCheckBox).StaticCast<  ::flixel::FlxSprite >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addChartingTab,(void))

void ChartingState_obj::addDataTab(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		void _hx_run(int id,::String character){
            			HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2428_addDataTab)
HXLINE(2429)			::states::PlayState_obj::SONG->__SetField(HX_("gameOverChar",5c,48,07,65),character,::hx::paccDynamic);
HXLINE(2430)			if ((character.length < 1)) {
HXLINE(2430)				::Reflect_obj::deleteField(::states::PlayState_obj::SONG,HX_("gameOverChar",5c,48,07,65));
            			}
HXLINE(2431)			::haxe::Log_obj::trace((HX_("selected ",65,e5,17,8e) + character),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),2431,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("addDataTab",2a,9e,63,79)));
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            		void _hx_run(::String old,::String cur){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2437_addDataTab)
HXLINE(2438)			::states::PlayState_obj::SONG->__SetField(HX_("gameOverSound",89,f8,70,3c),cur,::hx::paccDynamic);
HXLINE(2439)			if ((::StringTools_obj::trim(cur).length < 1)) {
HXLINE(2439)				::Reflect_obj::deleteField(::states::PlayState_obj::SONG,HX_("gameOverSound",89,f8,70,3c));
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(2)
            		void _hx_run(::String old,::String cur){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2444_addDataTab)
HXLINE(2445)			::states::PlayState_obj::SONG->__SetField(HX_("gameOverLoop",ea,8f,ff,6a),cur,::hx::paccDynamic);
HXLINE(2446)			if ((::StringTools_obj::trim(cur).length < 1)) {
HXLINE(2446)				::Reflect_obj::deleteField(::states::PlayState_obj::SONG,HX_("gameOverLoop",ea,8f,ff,6a));
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(2)
            		void _hx_run(::String old,::String cur){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2451_addDataTab)
HXLINE(2452)			::states::PlayState_obj::SONG->__SetField(HX_("gameOverEnd",15,2d,a9,8d),cur,::hx::paccDynamic);
HXLINE(2453)			if ((::StringTools_obj::trim(cur).length < 1)) {
HXLINE(2453)				::Reflect_obj::deleteField(::states::PlayState_obj::SONG,HX_("gameOverEnd",15,2d,a9,8d));
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2462_addDataTab)
HXLINE(2463)			bool changed = false;
HXLINE(2464)			if (::hx::IsNotEq( ::states::PlayState_obj::SONG->__Field(HX_("arrowSkin",e6,d4,f8,07),::hx::paccDynamic),_gthis->noteTextureInputText->text )) {
HXLINE(2464)				changed = true;
            			}
HXLINE(2465)			::states::PlayState_obj::SONG->__SetField(HX_("arrowSkin",e6,d4,f8,07),::StringTools_obj::trim(_gthis->noteTextureInputText->text),::hx::paccDynamic);
HXLINE(2466)			if ((::StringTools_obj::trim(( (::String)(::states::PlayState_obj::SONG->__Field(HX_("arrowSkin",e6,d4,f8,07),::hx::paccDynamic)) )).length < 1)) {
HXLINE(2466)				::states::PlayState_obj::SONG->__SetField(HX_("arrowSkin",e6,d4,f8,07),null(),::hx::paccDynamic);
            			}
HXLINE(2468)			if (changed) {
HXLINE(2470)				::String textureLoad = ((HX_("images/",77,50,74,c1) + _gthis->noteTextureInputText->text) + HX_(".png",3b,2d,bd,1e));
HXLINE(2471)				bool _hx_tmp;
HXDLIN(2471)				if (!(::backend::Paths_obj::fileExists(textureLoad,HX_("IMAGE",3b,57,57,3b),null(),null()))) {
HXLINE(2471)					_hx_tmp = (::StringTools_obj::trim(_gthis->noteTextureInputText->text) == HX_("",00,00,00,00));
            				}
            				else {
HXLINE(2471)					_hx_tmp = true;
            				}
HXDLIN(2471)				if (_hx_tmp) {
HXLINE(2473)					{
HXLINE(2473)						int _g = 0;
HXDLIN(2473)						::Array< ::Dynamic> _g1 = _gthis->notes;
HXDLIN(2473)						while((_g < _g1->length)){
HXLINE(2473)							 ::states::editors::content::MetaNote note = _g1->__get(_g).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(2473)							_g = (_g + 1);
HXLINE(2475)							if (::hx::IsNull( note )) {
HXLINE(2475)								continue;
            							}
HXLINE(2476)							note->reloadNote(note->texture,null());
HXLINE(2478)							Float _hx_tmp1 = note->get_width();
HXDLIN(2478)							if ((_hx_tmp1 > note->get_height())) {
HXLINE(2479)								note->setGraphicSize(::states::editors::ChartingState_obj::GRID_SIZE,null());
            							}
            							else {
HXLINE(2481)								note->setGraphicSize(0,::states::editors::ChartingState_obj::GRID_SIZE);
            							}
HXLINE(2483)							note->updateHitbox();
            						}
            					}
HXLINE(2485)					if ((::StringTools_obj::trim(_gthis->noteTextureInputText->text).length > 0)) {
HXLINE(2485)						_gthis->showOutput(((HX_("Reloaded notes to: \"",fa,ce,0d,b9) + textureLoad) + HX_("\"",22,00,00,00)),null());
            					}
            					else {
HXLINE(2486)						_gthis->showOutput(HX_("Reloaded notes to default texture",5e,b3,5a,d8),null());
            					}
            				}
            				else {
HXLINE(2489)					_gthis->showOutput(((HX_("ERROR: \"",14,d4,c3,38) + textureLoad) + HX_("\" not found.",57,86,fb,0a)),true);
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_5) HXARGC(2)
            		void _hx_run(::String old,::String cur){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2495_addDataTab)
HXLINE(2496)			::states::PlayState_obj::SONG->__SetField(HX_("splashSkin",84,03,e1,a1),cur,::hx::paccDynamic);
HXLINE(2497)			if ((::StringTools_obj::trim(cur).length < 1)) {
HXLINE(2497)				::states::PlayState_obj::SONG->__SetField(HX_("splashSkin",84,03,e1,a1),null(),::hx::paccDynamic);
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2423_addDataTab)
HXDLIN(2423)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2424)		 ::flixel::group::FlxTypedSpriteGroup tab_group = this->mainBox->getTab(HX_("Data",4a,82,3c,2d))->menu;
HXLINE(2425)		int objX = 10;
HXLINE(2426)		int objY = 25;
HXLINE(2427)		this->gameOverCharDropDown =  ::backend::ui::PsychUIDropDownMenu_obj::__alloc( HX_CTX ,( (Float)(objX) ),( (Float)(objY) ),::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_139,1), ::Dynamic(new _hx_Closure_0()),null());
HXLINE(2434)		objY = (objY + 40);
HXLINE(2435)		this->gameOverSndInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,objX,objY,120,HX_("",00,00,00,00),8);
HXLINE(2436)		this->gameOverSndInputText->onChange =  ::Dynamic(new _hx_Closure_1());
HXLINE(2441)		objY = (objY + 40);
HXLINE(2442)		this->gameOverLoopInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,objX,objY,120,HX_("",00,00,00,00),8);
HXLINE(2443)		this->gameOverLoopInputText->onChange =  ::Dynamic(new _hx_Closure_2());
HXLINE(2448)		objY = (objY + 40);
HXLINE(2449)		this->gameOverRetryInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,objX,objY,120,HX_("",00,00,00,00),8);
HXLINE(2450)		this->gameOverRetryInputText->onChange =  ::Dynamic(new _hx_Closure_3());
HXLINE(2456)		objY = (objY + 35);
HXLINE(2457)		this->noRGBCheckBox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)(objX) ),( (Float)(objY) ),HX_("Disable Note RGB",37,15,e8,bd),100,this->updateNotesRGB_dyn());
HXLINE(2459)		objY = (objY + 40);
HXLINE(2460)		this->noteTextureInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,objX,objY,120,HX_("",00,00,00,00),null());
HXLINE(2461)		this->noteTextureInputText->unfocus =  ::Dynamic(new _hx_Closure_4(_gthis));
HXLINE(2493)		this->noteSplashesInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,(objX + 140),objY,120,HX_("",00,00,00,00),null());
HXLINE(2494)		this->noteSplashesInputText->onChange =  ::Dynamic(new _hx_Closure_5());
HXLINE(2500)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->gameOverCharDropDown->x,(this->gameOverCharDropDown->y - ( (Float)(15) )),120,HX_("Game Over Character:",af,db,a9,9e),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2501)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->gameOverSndInputText->x,(this->gameOverSndInputText->y - ( (Float)(15) )),180,HX_("Game Over Death Sound (sounds/):",ef,4c,81,a0),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2502)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->gameOverLoopInputText->x,(this->gameOverLoopInputText->y - ( (Float)(15) )),180,HX_("Game Over Loop Music (music/):",2a,9e,ea,94),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2503)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->gameOverRetryInputText->x,(this->gameOverRetryInputText->y - ( (Float)(15) )),180,HX_("Game Over Retry Music (music/):",f2,03,9c,22),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2504)		tab_group->add(this->gameOverSndInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2505)		tab_group->add(this->gameOverLoopInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2506)		tab_group->add(this->gameOverRetryInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2507)		tab_group->add(this->noRGBCheckBox).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2509)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->noteTextureInputText->x,(this->noteTextureInputText->y - ( (Float)(15) )),100,HX_("Note Texture:",ed,7c,7e,a2),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2510)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->noteSplashesInputText->x,(this->noteSplashesInputText->y - ( (Float)(15) )),120,HX_("Note Splashes Texture:",5c,83,7f,23),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2511)		tab_group->add(this->noteTextureInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2512)		tab_group->add(this->noteSplashesInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2514)		tab_group->add(this->gameOverCharDropDown).StaticCast<  ::flixel::FlxSprite >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addDataTab,(void))

void ChartingState_obj::addEventsTab(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::ChartingState,_gthis) HXARGC(2)
            		void _hx_run(int id,::String character){
            			HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2532_addEventsTab)
HXLINE(2533)			::Array< ::String > eventSelected = _gthis->eventsList->__get(id).StaticCast< ::Array< ::String > >();
HXLINE(2534)			::String eventName = eventSelected->__get(0);
HXLINE(2535)			::String description = eventSelected->__get(1);
HXLINE(2536)			_gthis->eventDescriptionText->set_text(description);
HXLINE(2537)			if ((_gthis->selectedNotes->length > 1)) {
HXLINE(2539)				int _g = 0;
HXDLIN(2539)				::Array< ::Dynamic> _g1 = _gthis->selectedNotes;
HXDLIN(2539)				while((_g < _g1->length)){
HXLINE(2539)					 ::states::editors::content::MetaNote note = _g1->__get(_g).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(2539)					_g = (_g + 1);
HXLINE(2541)					bool _hx_tmp;
HXDLIN(2541)					if (::hx::IsNotNull( note )) {
HXLINE(2541)						_hx_tmp = !(note->isEvent);
            					}
            					else {
HXLINE(2541)						_hx_tmp = true;
            					}
HXDLIN(2541)					if (_hx_tmp) {
HXLINE(2541)						continue;
            					}
HXLINE(2543)					 ::states::editors::content::EventMetaNote event = ::hx::TCast<  ::states::editors::content::EventMetaNote >::cast(note);
HXLINE(2544)					event->events->__get((event->events->length - 1)).StaticCast< ::Array< ::String > >()[0] = eventName;
HXLINE(2545)					event->updateEventText();
            				}
            			}
            			else {
HXLINE(2548)				bool _hx_tmp1;
HXDLIN(2548)				if ((_gthis->selectedNotes->length == 1)) {
HXLINE(2548)					_hx_tmp1 = _gthis->selectedNotes->__get(0).StaticCast<  ::states::editors::content::MetaNote >()->isEvent;
            				}
            				else {
HXLINE(2548)					_hx_tmp1 = false;
            				}
HXDLIN(2548)				if (_hx_tmp1) {
HXLINE(2550)					 ::states::editors::content::EventMetaNote event1 = ::hx::TCast<  ::states::editors::content::EventMetaNote >::cast(_gthis->selectedNotes->__get(0).StaticCast<  ::states::editors::content::MetaNote >());
HXLINE(2551)					Float Value = ( (Float)(_gthis->curEventSelected) );
HXDLIN(2551)					 ::Dynamic Max = (event1->events->length - 1);
HXDLIN(2551)					Float lowerBound;
HXDLIN(2551)					if ((Value < 0)) {
HXLINE(2551)						lowerBound = ( (Float)(0) );
            					}
            					else {
HXLINE(2551)						lowerBound = Value;
            					}
HXDLIN(2551)					Float event2;
HXDLIN(2551)					bool event3;
HXDLIN(2551)					if (::hx::IsNotNull( Max )) {
HXLINE(2551)						event3 = ::hx::IsGreater( lowerBound,Max );
            					}
            					else {
HXLINE(2551)						event3 = false;
            					}
HXDLIN(2551)					if (event3) {
HXLINE(2551)						event2 = ( (Float)(Max) );
            					}
            					else {
HXLINE(2551)						event2 = lowerBound;
            					}
HXDLIN(2551)					event1->events->__get(::Std_obj::_hx_int(event2)).StaticCast< ::Array< ::String > >()[0] = eventName;
HXLINE(2552)					event1->updateEventText();
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::ChartingState,_gthis) HXARGC(1)
            		void _hx_run( ::Dynamic func){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2558_addEventsTab)
HXLINE(2558)			if ((_gthis->selectedNotes->length == 1)) {
HXLINE(2560)				if (_gthis->selectedNotes->__get(0).StaticCast<  ::states::editors::content::MetaNote >()->isEvent) {
HXLINE(2562)					 ::states::editors::content::EventMetaNote event = ::hx::TCast<  ::states::editors::content::EventMetaNote >::cast(_gthis->selectedNotes->__get(0).StaticCast<  ::states::editors::content::MetaNote >());
HXLINE(2563)					func(event);
HXLINE(2564)					_gthis->updateSelectedEventText();
            				}
            				else {
HXLINE(2566)					_gthis->showOutput(HX_("Note selected must be an Event!",dd,2f,6e,3b),true);
            				}
            			}
            			else {
HXLINE(2568)				_gthis->showOutput(HX_("You must select a single event to press this button.",4b,27,45,f8),true);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::states::editors::ChartingState,_gthis, ::Dynamic,genericEventButton) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::ChartingState,_gthis) HXARGC(1)
            			void _hx_run( ::states::editors::content::EventMetaNote event){
            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2576_addEventsTab)
HXLINE(2576)				if ((event->events->length > 1)) {
HXLINE(2578)					::Array< ::String > selectedEvent = event->events->__get(_gthis->curEventSelected).StaticCast< ::Array< ::String > >();
HXLINE(2579)					if (::hx::IsNotNull( selectedEvent )) {
HXLINE(2581)						event->events->remove(selectedEvent);
HXLINE(2582)						event->updateEventText();
HXLINE(2583)						_gthis->curEventSelected--;
            					}
            					else {
HXLINE(2585)						_gthis->showOutput(HX_("No event is selected when you deleted it?? Weird.",3c,41,92,71),true);
            					}
            				}
            				else {
HXLINE(2589)					_gthis->selectedNotes->remove(event);
HXLINE(2590)					_gthis->events->remove(event);
HXLINE(2591)					_gthis->curRenderedNotes->remove(event,true).StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(2592)					_gthis->addUndoAction(HX_("Delete Note",07,30,b0,81), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("events",19,4f,6a,96),::Array_obj< ::Dynamic>::__new(1)->init(0,event))));
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2574_addEventsTab)
HXLINE(2574)			genericEventButton( ::Dynamic(new _hx_Closure_2(_gthis)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_5, ::states::editors::ChartingState,_gthis, ::Dynamic,genericEventButton) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::states::editors::ChartingState,_gthis) HXARGC(1)
            			void _hx_run( ::states::editors::content::EventMetaNote event){
            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2599_addEventsTab)
HXLINE(2600)				::Array< ::Dynamic> event1 = event->events;
HXDLIN(2600)				::String _gthis1 = _gthis->eventsList->__get(::Std_obj::_hx_int(::Math_obj::max(( (Float)(_gthis->eventDropDown->selectedIndex) ),( (Float)(0) )))).StaticCast< ::Array< ::String > >()->__get(0);
HXDLIN(2600)				event1->push(::Array_obj< ::String >::__new(3)->init(0,_gthis1)->init(1,_gthis->value1InputText->text)->init(2,_gthis->value2InputText->text));
HXLINE(2601)				event->updateEventText();
HXLINE(2602)				_gthis->curEventSelected++;
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2598_addEventsTab)
HXLINE(2598)			genericEventButton( ::Dynamic(new _hx_Closure_4(_gthis)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_7, ::states::editors::ChartingState,_gthis, ::Dynamic,genericEventButton) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::states::editors::ChartingState,_gthis) HXARGC(1)
            			void _hx_run( ::states::editors::content::EventMetaNote event){
            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2607_addEventsTab)
HXLINE(2607)				_gthis->curEventSelected = ::flixel::math::FlxMath_obj::wrap((_gthis->curEventSelected - 1),0,(event->events->length - 1));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2607_addEventsTab)
HXLINE(2607)			genericEventButton( ::Dynamic(new _hx_Closure_6(_gthis)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_9, ::states::editors::ChartingState,_gthis, ::Dynamic,genericEventButton) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::states::editors::ChartingState,_gthis) HXARGC(1)
            			void _hx_run( ::states::editors::content::EventMetaNote event){
            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2611_addEventsTab)
HXLINE(2611)				_gthis->curEventSelected = ::flixel::math::FlxMath_obj::wrap((_gthis->curEventSelected + 1),0,(event->events->length - 1));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2611_addEventsTab)
HXLINE(2611)			genericEventButton( ::Dynamic(new _hx_Closure_8(_gthis)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_10, ::states::editors::ChartingState,_gthis) HXARGC(2)
            		void _hx_run(::String str,int n){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2623_addEventsTab)
HXLINE(2623)			if ((_gthis->selectedNotes->length > 1)) {
HXLINE(2625)				int _g = 0;
HXDLIN(2625)				::Array< ::Dynamic> _g1 = _gthis->selectedNotes;
HXDLIN(2625)				while((_g < _g1->length)){
HXLINE(2625)					 ::states::editors::content::MetaNote note = _g1->__get(_g).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(2625)					_g = (_g + 1);
HXLINE(2627)					bool changeEventsValue;
HXDLIN(2627)					if (::hx::IsNotNull( note )) {
HXLINE(2627)						changeEventsValue = !(note->isEvent);
            					}
            					else {
HXLINE(2627)						changeEventsValue = true;
            					}
HXDLIN(2627)					if (changeEventsValue) {
HXLINE(2627)						continue;
            					}
HXLINE(2629)					 ::states::editors::content::EventMetaNote event = ::hx::TCast<  ::states::editors::content::EventMetaNote >::cast(note);
HXLINE(2630)					event->events->__get((event->events->length - 1)).StaticCast< ::Array< ::String > >()[n] = str;
HXLINE(2631)					event->updateEventText();
            				}
            			}
            			else {
HXLINE(2634)				bool changeEventsValue1;
HXDLIN(2634)				if ((_gthis->selectedNotes->length == 1)) {
HXLINE(2634)					changeEventsValue1 = _gthis->selectedNotes->__get(0).StaticCast<  ::states::editors::content::MetaNote >()->isEvent;
            				}
            				else {
HXLINE(2634)					changeEventsValue1 = false;
            				}
HXDLIN(2634)				if (changeEventsValue1) {
HXLINE(2636)					 ::states::editors::content::EventMetaNote event1 = ::hx::TCast<  ::states::editors::content::EventMetaNote >::cast(_gthis->selectedNotes->__get(0).StaticCast<  ::states::editors::content::MetaNote >());
HXLINE(2637)					Float Value = ( (Float)(_gthis->curEventSelected) );
HXDLIN(2637)					 ::Dynamic Max = (event1->events->length - 1);
HXDLIN(2637)					Float lowerBound;
HXDLIN(2637)					if ((Value < 0)) {
HXLINE(2637)						lowerBound = ( (Float)(0) );
            					}
            					else {
HXLINE(2637)						lowerBound = Value;
            					}
HXDLIN(2637)					Float event2;
HXDLIN(2637)					bool event3;
HXDLIN(2637)					if (::hx::IsNotNull( Max )) {
HXLINE(2637)						event3 = ::hx::IsGreater( lowerBound,Max );
            					}
            					else {
HXLINE(2637)						event3 = false;
            					}
HXDLIN(2637)					if (event3) {
HXLINE(2637)						event2 = ( (Float)(Max) );
            					}
            					else {
HXLINE(2637)						event2 = lowerBound;
            					}
HXDLIN(2637)					event1->events->__get(::Std_obj::_hx_int(event2)).StaticCast< ::Array< ::String > >()[n] = str;
HXLINE(2638)					event1->updateEventText();
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_11, ::Dynamic,changeEventsValue) HXARGC(2)
            		void _hx_run(::String old,::String cur){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2644_addEventsTab)
HXLINE(2644)			changeEventsValue(cur,1);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_12, ::Dynamic,changeEventsValue) HXARGC(2)
            		void _hx_run(::String old,::String cur){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2646_addEventsTab)
HXLINE(2646)			changeEventsValue(cur,2);
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2526_addEventsTab)
HXDLIN(2526)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2527)		 ::flixel::group::FlxTypedSpriteGroup tab_group = this->mainBox->getTab(HX_("Events",39,c3,fe,ca))->menu;
HXLINE(2528)		int objX = 10;
HXLINE(2529)		int objY = 25;
HXLINE(2531)		this->eventDropDown =  ::backend::ui::PsychUIDropDownMenu_obj::__alloc( HX_CTX ,( (Float)(objX) ),( (Float)(objY) ),::Array_obj< ::String >::__new(0), ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE(2556)		 ::Dynamic genericEventButton =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE(2571)		int objX2 = 140;
HXLINE(2572)		 ::backend::ui::PsychUIButton removeButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,objX2,objY,HX_("-",2d,00,00,00), ::Dynamic(new _hx_Closure_3(_gthis,genericEventButton)),20,null());
HXLINE(2596)		 ::backend::ui::PsychUIButton addButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,(objX2 + 30),objY,HX_("+",2b,00,00,00), ::Dynamic(new _hx_Closure_5(_gthis,genericEventButton)),20,null());
HXLINE(2605)		 ::backend::ui::PsychUIButton leftButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,(objX2 + 80),objY,HX_("<",3c,00,00,00), ::Dynamic(new _hx_Closure_7(_gthis,genericEventButton)),20,null());
HXLINE(2609)		 ::backend::ui::PsychUIButton rightButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,(objX2 + 110),objY,HX_(">",3e,00,00,00), ::Dynamic(new _hx_Closure_9(_gthis,genericEventButton)),20,null());
HXLINE(2613)		removeButton->normalStyle->__SetField(HX_("bgColor",5e,81,83,f7),-65536,::hx::paccDynamic);
HXLINE(2614)		removeButton->normalStyle->__SetField(HX_("textColor",76,01,4a,e3),-1,::hx::paccDynamic);
HXLINE(2615)		addButton->normalStyle->__SetField(HX_("bgColor",5e,81,83,f7),-16744448,::hx::paccDynamic);
HXLINE(2616)		addButton->normalStyle->__SetField(HX_("textColor",76,01,4a,e3),-1,::hx::paccDynamic);
HXLINE(2618)		this->selectedEventText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,150,(objY + 30),150,HX_("",00,00,00,00),null(),null());
HXLINE(2619)		this->selectedEventText->set_visible(false);
HXLINE(2621)		 ::Dynamic changeEventsValue =  ::Dynamic(new _hx_Closure_10(_gthis));
HXLINE(2642)		objY = (objY + 70);
HXLINE(2643)		this->value1InputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,objX,objY,120,HX_("",00,00,00,00),8);
HXLINE(2644)		this->value1InputText->onChange =  ::Dynamic(new _hx_Closure_11(changeEventsValue));
HXLINE(2645)		this->value2InputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,(objX + 150),objY,120,HX_("",00,00,00,00),8);
HXLINE(2646)		this->value2InputText->onChange =  ::Dynamic(new _hx_Closure_12(changeEventsValue));
HXLINE(2648)		objY = (objY + 40);
HXLINE(2649)		this->eventDescriptionText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,objX,objY,280,::states::editors::ChartingState_obj::defaultEvents->__get(0).StaticCast< ::Array< ::String > >()->__get(1),null(),null());
HXLINE(2651)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->eventDropDown->x,(this->eventDropDown->y - ( (Float)(15) )),80,HX_("Event:",00,c3,fe,ca),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2652)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->value1InputText->x,(this->value1InputText->y - ( (Float)(15) )),80,HX_("Value 1:",58,2c,dc,c7),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2653)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->value2InputText->x,(this->value2InputText->y - ( (Float)(15) )),80,HX_("Value 2:",37,2d,dc,c7),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2655)		tab_group->add(removeButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2656)		tab_group->add(addButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2657)		tab_group->add(leftButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2658)		tab_group->add(rightButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2659)		tab_group->add(this->selectedEventText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2661)		tab_group->add(this->value1InputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2662)		tab_group->add(this->value2InputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2663)		tab_group->add(this->eventDescriptionText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2665)		tab_group->add(this->eventDropDown).StaticCast<  ::flixel::FlxSprite >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addEventsTab,(void))

void ChartingState_obj::addNoteTab(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2681_addNoteTab)
HXLINE(2682)			Float halfStep = (::backend::Conductor_obj::stepCrochet / ( (Float)(2) ));
HXLINE(2683)			::haxe::Log_obj::trace(halfStep, ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("states.editors.ChartingState",19,00,5b,f8))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(1)->init(0,_gthis->susLengthStepper->value))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("addNoteTab",62,29,de,b4))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/states/editors/ChartingState.hx",d3,60,b4,06))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),2683)));
HXLINE(2684)			Float val = (( (Float)(::Math_obj::round((_gthis->susLengthStepper->value / halfStep))) ) * halfStep);
HXLINE(2685)			_gthis->susLengthStepper->set_value(val);
HXLINE(2686)			if ((_gthis->susLengthLastVal != _gthis->susLengthStepper->value)) {
HXLINE(2688)				if ((_gthis->selectedNotes->length > 1)) {
HXLINE(2690)					int _g = 0;
HXDLIN(2690)					::Array< ::Dynamic> _g1 = _gthis->selectedNotes;
HXDLIN(2690)					while((_g < _g1->length)){
HXLINE(2690)						 ::states::editors::content::MetaNote note = _g1->__get(_g).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(2690)						_g = (_g + 1);
HXLINE(2692)						bool _hx_tmp;
HXDLIN(2692)						if (::hx::IsNull( note )) {
HXLINE(2692)							_hx_tmp = !(note->isEvent);
            						}
            						else {
HXLINE(2692)							_hx_tmp = false;
            						}
HXDLIN(2692)						if (_hx_tmp) {
HXLINE(2692)							continue;
            						}
HXLINE(2693)						note->setSustainLength((note->sustainLength + (_gthis->susLengthStepper->value - _gthis->susLengthLastVal)),::backend::Conductor_obj::stepCrochet,_gthis->curZoom);
            					}
            				}
            				else {
HXLINE(2696)					if ((_gthis->selectedNotes->length == 1)) {
HXLINE(2696)						_gthis->selectedNotes->__get(0).StaticCast<  ::states::editors::content::MetaNote >()->setSustainLength(_gthis->susLengthStepper->value,::backend::Conductor_obj::stepCrochet,_gthis->curZoom);
            					}
            				}
HXLINE(2697)				_gthis->susLengthLastVal = _gthis->susLengthStepper->value;
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2704_addNoteTab)
HXLINE(2705)			if ((_gthis->selectedNotes->length < 1)) {
HXLINE(2705)				return;
            			}
HXLINE(2707)			Float firstTime = _gthis->selectedNotes->__get(0).StaticCast<  ::states::editors::content::MetaNote >()->strumTime;
HXLINE(2708)			{
HXLINE(2708)				int _g = 0;
HXDLIN(2708)				::Array< ::Dynamic> _g1 = _gthis->selectedNotes;
HXDLIN(2708)				while((_g < _g1->length)){
HXLINE(2708)					 ::states::editors::content::MetaNote note = _g1->__get(_g).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(2708)					_g = (_g + 1);
HXLINE(2710)					if (::hx::IsNull( note )) {
HXLINE(2710)						continue;
            					}
HXLINE(2712)					note->setStrumTime(::Math_obj::max(( (Float)(-5000) ),(_gthis->strumTimeStepper->value + (note->strumTime - firstTime))));
HXLINE(2713)					_gthis->positionNoteYOnTime(note,_gthis->curSec);
HXLINE(2715)					if (note->isEvent) {
HXLINE(2717)						::hx::TCast<  ::states::editors::content::EventMetaNote >::cast(note)->updateEventText();
            					}
            				}
            			}
HXLINE(2720)			_gthis->softReloadNotes(null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::ChartingState,_gthis) HXARGC(2)
            		void _hx_run(int id,::String changeToType){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2725_addNoteTab)
HXLINE(2726)			::Array< ::Dynamic> newSelected = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2727)			::String typeSelected = ::StringTools_obj::trim(_gthis->noteTypes->__get(id));
HXLINE(2728)			{
HXLINE(2728)				int _g = 0;
HXDLIN(2728)				::Array< ::Dynamic> _g1 = _gthis->selectedNotes;
HXDLIN(2728)				while((_g < _g1->length)){
HXLINE(2728)					 ::states::editors::content::MetaNote note = _g1->__get(_g).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(2728)					_g = (_g + 1);
HXLINE(2730)					bool _hx_tmp;
HXDLIN(2730)					if (::hx::IsNotNull( note )) {
HXLINE(2730)						_hx_tmp = note->isEvent;
            					}
            					else {
HXLINE(2730)						_hx_tmp = true;
            					}
HXDLIN(2730)					if (_hx_tmp) {
HXLINE(2730)						continue;
            					}
HXLINE(2732)					bool _hx_tmp1;
HXDLIN(2732)					if (::hx::IsNotNull( typeSelected )) {
HXLINE(2732)						_hx_tmp1 = (typeSelected.length > 0);
            					}
            					else {
HXLINE(2732)						_hx_tmp1 = false;
            					}
HXDLIN(2732)					if (_hx_tmp1) {
HXLINE(2733)						note->songData->set(3,typeSelected);
            					}
            					else {
HXLINE(2735)						note->songData->remove(note->songData->__get(3));
            					}
HXLINE(2737)					int id1 = _gthis->notes->indexOf(note,null());
HXLINE(2738)					if ((id1 > -1)) {
HXLINE(2740)						_gthis->notes[id1] = _gthis->createNote(note->songData,_gthis->curSec);
HXLINE(2741)						_gthis->actionReplaceNotes(note,_gthis->notes->__get(id1).StaticCast<  ::states::editors::content::MetaNote >());
HXLINE(2742)						newSelected->push(_gthis->notes->__get(id1).StaticCast<  ::states::editors::content::MetaNote >());
HXLINE(2743)						note->destroy();
            					}
            				}
            			}
HXLINE(2746)			_gthis->selectedNotes = newSelected;
HXLINE(2747)			_gthis->softReloadNotes(null());
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2674_addNoteTab)
HXDLIN(2674)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2675)		 ::flixel::group::FlxTypedSpriteGroup tab_group = this->mainBox->getTab(HX_("Note",12,44,e3,33))->menu;
HXLINE(2676)		int objX = 10;
HXLINE(2677)		int objY = 25;
HXLINE(2679)		this->susLengthStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,objX,objY,(::backend::Conductor_obj::stepCrochet / ( (Float)(2) )),0,0,(::backend::Conductor_obj::stepCrochet * ( (Float)(128) )),1,80,null());
HXLINE(2680)		this->susLengthStepper->onValueChange =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE(2701)		objY = (objY + 40);
HXLINE(2702)		this->strumTimeStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,objX,objY,::backend::Conductor_obj::stepCrochet,0,-5000,::Math_obj::POSITIVE_INFINITY,3,120,null());
HXLINE(2703)		this->strumTimeStepper->onValueChange =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE(2723)		objY = (objY + 40);
HXLINE(2724)		this->noteTypeDropDown =  ::backend::ui::PsychUIDropDownMenu_obj::__alloc( HX_CTX ,( (Float)(objX) ),( (Float)(objY) ),::Array_obj< ::String >::__new(0), ::Dynamic(new _hx_Closure_2(_gthis)),150);
HXLINE(2750)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->susLengthStepper->x,(this->susLengthStepper->y - ( (Float)(15) )),80,HX_("Sustain length:",f7,d7,77,6b),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2751)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->strumTimeStepper->x,(this->strumTimeStepper->y - ( (Float)(15) )),100,HX_("Note Hit time (ms):",c7,55,89,d7),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2752)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->noteTypeDropDown->x,(this->noteTypeDropDown->y - ( (Float)(15) )),80,HX_("Note Type:",92,09,95,d9),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2753)		tab_group->add(this->susLengthStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2754)		tab_group->add(this->strumTimeStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2755)		tab_group->add(this->noteTypeDropDown).StaticCast<  ::flixel::FlxSprite >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addNoteTab,(void))

void ChartingState_obj::addSectionTab(){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::states::editors::ChartingState,_gthis,::Array< ::Dynamic>,affectNotes,::Array< ::Dynamic>,affectEvents) HXARGC(2)
            		void _hx_run( ::Dynamic __o_secOff, ::Dynamic __o_showMessage){
            		 ::Dynamic secOff = __o_secOff;
            		if (::hx::IsNull(__o_secOff)) secOff = 0;
            		 ::Dynamic showMessage = __o_showMessage;
            		if (::hx::IsNull(__o_showMessage)) showMessage = true;
            			HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2775_addSectionTab)
HXLINE(2776)			 ::Dynamic curSectionTime = _gthis->cachedSectionTimes->__get((_gthis->curSec - ( (int)(secOff) )));
HXLINE(2777)			if (::hx::IsNull( curSectionTime )) {
HXLINE(2780)				return;
            			}
HXLINE(2783)			 ::Dynamic nextSectionTime = _gthis->cachedSectionTimes->__get(((_gthis->curSec - ( (int)(secOff) )) + 1));
HXLINE(2784)			bool copyNotesOnSection = ::hx::IsNull( nextSectionTime );
HXLINE(2786)			int notesCopyNum = 0;
HXLINE(2787)			if (affectNotes->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->checked) {
HXLINE(2789)				_gthis->copiedNotes = ::cpp::VirtualArray_obj::__new(0);
HXLINE(2790)				{
HXLINE(2790)					int _g = 0;
HXDLIN(2790)					::Array< ::Dynamic> _g1 = _gthis->notes;
HXDLIN(2790)					while((_g < _g1->length)){
HXLINE(2790)						 ::states::editors::content::MetaNote note = _g1->__get(_g).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(2790)						_g = (_g + 1);
HXLINE(2792)						bool copyNotesOnSection1;
HXDLIN(2792)						if (::hx::IsGreaterEq( note->strumTime,curSectionTime )) {
HXLINE(2792)							copyNotesOnSection1 = ::hx::IsLess( note->strumTime,nextSectionTime );
            						}
            						else {
HXLINE(2792)							copyNotesOnSection1 = false;
            						}
HXDLIN(2792)						if (copyNotesOnSection1) {
HXLINE(2794)							::cpp::VirtualArray dataCopy = _gthis->makeNoteDataCopy(note->songData,false);
HXLINE(2795)							dataCopy->set(0,(note->strumTime - ( (Float)(curSectionTime) )));
HXLINE(2796)							_gthis->copiedNotes->push(dataCopy);
HXLINE(2797)							notesCopyNum = (notesCopyNum + 1);
            						}
            					}
            				}
            			}
HXLINE(2802)			int eventsCopyNum = 0;
HXLINE(2803)			if (affectEvents->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->checked) {
HXLINE(2805)				_gthis->copiedEvents = ::cpp::VirtualArray_obj::__new(0);
HXLINE(2806)				{
HXLINE(2806)					int _g2 = 0;
HXDLIN(2806)					::Array< ::Dynamic> _g3 = _gthis->events;
HXDLIN(2806)					while((_g2 < _g3->length)){
HXLINE(2806)						 ::states::editors::content::EventMetaNote event = _g3->__get(_g2).StaticCast<  ::states::editors::content::EventMetaNote >();
HXDLIN(2806)						_g2 = (_g2 + 1);
HXLINE(2808)						bool copyNotesOnSection2;
HXDLIN(2808)						if (::hx::IsGreaterEq( event->strumTime,curSectionTime )) {
HXLINE(2808)							copyNotesOnSection2 = ::hx::IsLess( event->strumTime,nextSectionTime );
            						}
            						else {
HXLINE(2808)							copyNotesOnSection2 = false;
            						}
HXDLIN(2808)						if (copyNotesOnSection2) {
HXLINE(2810)							::cpp::VirtualArray dataCopy1 = _gthis->makeNoteDataCopy(event->songData,true);
HXLINE(2811)							dataCopy1->set(0,(event->strumTime - ( (Float)(curSectionTime) )));
HXLINE(2812)							_gthis->copiedEvents->push(dataCopy1);
HXLINE(2813)							eventsCopyNum = (eventsCopyNum + 1);
            						}
            					}
            				}
            			}
HXLINE(2818)			if (( (bool)(showMessage) )) {
HXLINE(2820)				bool copyNotesOnSection3;
HXDLIN(2820)				if ((notesCopyNum == 0)) {
HXLINE(2820)					copyNotesOnSection3 = (eventsCopyNum == 0);
            				}
            				else {
HXLINE(2820)					copyNotesOnSection3 = false;
            				}
HXDLIN(2820)				if (copyNotesOnSection3) {
HXLINE(2822)					_gthis->showOutput(HX_("Nothing to copy!",fa,38,32,f2),true);
HXLINE(2823)					return;
            				}
HXLINE(2826)				::String str = HX_("",00,00,00,00);
HXLINE(2827)				if ((notesCopyNum > 0)) {
HXLINE(2827)					str = (str + (HX_("Notes Copied: ",e9,16,81,71) + notesCopyNum));
            				}
HXLINE(2828)				if ((eventsCopyNum > 0)) {
HXLINE(2830)					if ((str.length > 0)) {
HXLINE(2830)						str = (str + HX_("\n",0a,00,00,00));
            					}
HXLINE(2831)					str = (str + (HX_("Events Copied: ",d1,fc,6e,4d) + eventsCopyNum));
            				}
HXLINE(2834)				if ((str.length > 0)) {
HXLINE(2834)					_gthis->showOutput(str,null());
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2839_addSectionTab)
HXLINE(2840)			 ::Dynamic sec;
HXDLIN(2840)			if (::hx::IsNotNull( ::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic) )) {
HXLINE(2840)				sec =  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSec);
            			}
            			else {
HXLINE(2840)				sec = null();
            			}
HXDLIN(2840)			 ::Dynamic sec1 = sec;
HXLINE(2841)			if (::hx::IsNotNull( sec1 )) {
HXLINE(2841)				sec1->__SetField(HX_("mustHitSection",3b,5f,87,62),_gthis->mustHitCheckBox->checked,::hx::paccDynamic);
            			}
HXLINE(2842)			_gthis->updateHeads(true);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2845_addSectionTab)
HXLINE(2846)			 ::Dynamic sec;
HXDLIN(2846)			if (::hx::IsNotNull( ::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic) )) {
HXLINE(2846)				sec =  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSec);
            			}
            			else {
HXLINE(2846)				sec = null();
            			}
HXDLIN(2846)			 ::Dynamic sec1 = sec;
HXLINE(2847)			if (::hx::IsNotNull( sec1 )) {
HXLINE(2847)				sec1->__SetField(HX_("gfSection",86,e5,63,d4),_gthis->gfSectionCheckBox->checked,::hx::paccDynamic);
            			}
HXLINE(2848)			_gthis->updateHeads(true);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2851_addSectionTab)
HXLINE(2852)			 ::Dynamic sec;
HXDLIN(2852)			if (::hx::IsNotNull( ::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic) )) {
HXLINE(2852)				sec =  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSec);
            			}
            			else {
HXLINE(2852)				sec = null();
            			}
HXDLIN(2852)			 ::Dynamic sec1 = sec;
HXLINE(2853)			if (::hx::IsNotNull( sec1 )) {
HXLINE(2853)				sec1->__SetField(HX_("altAnim",da,f3,f2,e5),_gthis->altAnimSectionCheckBox->checked,::hx::paccDynamic);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2858_addSectionTab)
HXLINE(2859)			 ::Dynamic sec;
HXDLIN(2859)			if (::hx::IsNotNull( ::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic) )) {
HXLINE(2859)				sec =  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSec);
            			}
            			else {
HXLINE(2859)				sec = null();
            			}
HXDLIN(2859)			 ::Dynamic sec1 = sec;
HXLINE(2860)			if (::hx::IsNotNull( sec1 )) {
HXLINE(2862)				::Array< Float > oldTimes = _gthis->cachedSectionTimes->copy();
HXLINE(2863)				sec1->__SetField(HX_("changeBPM",4f,4f,f8,1d),_gthis->changeBpmCheckBox->checked,::hx::paccDynamic);
HXLINE(2864)				if (!(::Reflect_obj::hasField(sec1,HX_("bpm",df,be,4a,00)))) {
HXLINE(2864)					sec1->__SetField(HX_("bpm",df,be,4a,00),_gthis->changeBpmStepper->value,::hx::paccDynamic);
            				}
HXLINE(2865)				_gthis->adaptNotesToNewTimes(oldTimes);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2872_addSectionTab)
HXLINE(2873)			 ::Dynamic sec;
HXDLIN(2873)			if (::hx::IsNotNull( ::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic) )) {
HXLINE(2873)				sec =  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSec);
            			}
            			else {
HXLINE(2873)				sec = null();
            			}
HXDLIN(2873)			 ::Dynamic sec1 = sec;
HXLINE(2874)			if (::hx::IsNotNull( sec1 )) {
HXLINE(2876)				::Array< Float > oldTimes = _gthis->cachedSectionTimes->copy();
HXLINE(2877)				sec1->__SetField(HX_("bpm",df,be,4a,00),_gthis->changeBpmStepper->value,::hx::paccDynamic);
HXLINE(2878)				sec1->__SetField(HX_("changeBPM",4f,4f,f8,1d),true,::hx::paccDynamic);
HXLINE(2879)				_gthis->changeBpmCheckBox->set_checked(true);
HXLINE(2880)				_gthis->adaptNotesToNewTimes(oldTimes);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2886_addSectionTab)
HXLINE(2887)			_gthis->beatsPerSecStepper->set_value((( (Float)(::Math_obj::round((_gthis->beatsPerSecStepper->value * ( (Float)(4) )))) ) / ( (Float)(4) )));
HXLINE(2888)			 ::Dynamic sec;
HXDLIN(2888)			if (::hx::IsNotNull( ::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic) )) {
HXLINE(2888)				sec =  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSec);
            			}
            			else {
HXLINE(2888)				sec = null();
            			}
HXDLIN(2888)			 ::Dynamic sec1 = sec;
HXLINE(2889)			if (::hx::IsNotNull( sec1 )) {
HXLINE(2891)				::Array< Float > oldTimes = _gthis->cachedSectionTimes->copy();
HXLINE(2892)				sec1->__SetField(HX_("sectionBeats",18,52,2e,0f),_gthis->beatsPerSecStepper->value,::hx::paccDynamic);
HXLINE(2893)				_gthis->adaptNotesToNewTimes(oldTimes);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::Dynamic,copyNotesOnSection) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2898_addSectionTab)
HXLINE(2898)			copyNotesOnSection(null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_8, ::states::editors::ChartingState,_gthis,::Array< ::Dynamic>,affectNotes,::Array< ::Dynamic>,affectEvents) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2901_addSectionTab)
HXLINE(2901)			_gthis->pasteCopiedNotesToSection(affectNotes->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->checked,affectEvents->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->checked,null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_9, ::states::editors::ChartingState,_gthis,::Array< ::Dynamic>,affectNotes,::Array< ::Dynamic>,affectEvents) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2904_addSectionTab)
HXLINE(2905)			{
HXLINE(2905)				 ::Dynamic filter = null();
HXDLIN(2905)				 ::flixel::group::FlxTypedGroupIterator note =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_gthis->curRenderedNotes->members,filter);
HXDLIN(2905)				while(note->hasNext()){
HXLINE(2905)					 ::states::editors::content::MetaNote note1 = note->next().StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(2907)					if (::hx::IsNull( note1 )) {
HXLINE(2907)						continue;
            					}
HXLINE(2909)					bool clearButton;
HXDLIN(2909)					if (!(note1->isEvent)) {
HXLINE(2909)						clearButton = affectNotes->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->checked;
            					}
            					else {
HXLINE(2909)						clearButton = false;
            					}
HXDLIN(2909)					if (clearButton) {
HXLINE(2910)						_gthis->notes->remove(note1);
            					}
HXLINE(2911)					bool clearButton1;
HXDLIN(2911)					if (note1->isEvent) {
HXLINE(2911)						clearButton1 = affectEvents->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->checked;
            					}
            					else {
HXLINE(2911)						clearButton1 = false;
            					}
HXDLIN(2911)					if (clearButton1) {
HXLINE(2912)						_gthis->events->remove(note1);
            					}
HXLINE(2914)					_gthis->selectedNotes->remove(note1);
            				}
            			}
HXLINE(2916)			_gthis->softReloadNotes(true);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_10, ::states::editors::ChartingState,_gthis,::Array< ::Dynamic>,affectNotes, ::Dynamic,copyNotesOnSection,::Array< ::Dynamic>,copyLastSecStepper,::Array< ::Dynamic>,affectEvents) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2928_addSectionTab)
HXLINE(2929)			::cpp::VirtualArray lastCopiedNotes = _gthis->copiedNotes;
HXLINE(2930)			::cpp::VirtualArray lastCopiedEvents = _gthis->copiedEvents;
HXLINE(2931)			 ::Dynamic copyNotesOnSection1 = copyNotesOnSection;
HXDLIN(2931)			copyNotesOnSection1(::Std_obj::_hx_int(copyLastSecStepper->__get(0).StaticCast<  ::backend::ui::PsychUINumericStepper >()->value),false);
HXLINE(2932)			_gthis->pasteCopiedNotesToSection(affectNotes->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->checked,affectEvents->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->checked,null());
HXLINE(2933)			_gthis->copiedNotes = lastCopiedNotes;
HXLINE(2934)			_gthis->copiedEvents = lastCopiedEvents;
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_11, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2941_addSectionTab)
HXLINE(2942)			int maxData = (::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER * ::states::editors::ChartingState_obj::GRID_PLAYERS);
HXLINE(2943)			{
HXLINE(2943)				 ::Dynamic filter = null();
HXDLIN(2943)				 ::flixel::group::FlxTypedGroupIterator note =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_gthis->curRenderedNotes->members,filter);
HXDLIN(2943)				while(note->hasNext()){
HXLINE(2943)					 ::states::editors::content::MetaNote note1 = note->next().StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(2945)					bool swapSectionButton;
HXDLIN(2945)					if (::hx::IsNotNull( note1 )) {
HXLINE(2945)						swapSectionButton = !(note1->isEvent);
            					}
            					else {
HXLINE(2945)						swapSectionButton = false;
            					}
HXDLIN(2945)					if (swapSectionButton) {
HXLINE(2947)						int data = ( (int)((note1->songData->__get(1) + ::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER)) );
HXLINE(2948)						if ((data >= maxData)) {
HXLINE(2948)							data = (data - maxData);
            						}
HXLINE(2949)						note1->changeNoteData(data);
HXLINE(2950)						_gthis->positionNoteXByData(note1,null());
            					}
            				}
            			}
HXLINE(2953)			_gthis->softReloadNotes(true);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_12, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2956_addSectionTab)
HXLINE(2957)			int side = -1;
HXLINE(2958)			{
HXLINE(2958)				int _g = 0;
HXDLIN(2958)				::Array< ::Dynamic> _g1 = _gthis->curRenderedNotes->members;
HXDLIN(2958)				while((_g < _g1->length)){
HXLINE(2958)					 ::states::editors::content::MetaNote note = _g1->__get(_g).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(2958)					_g = (_g + 1);
HXLINE(2960)					bool duetSectionButton;
HXDLIN(2960)					if (::hx::IsNotNull( note )) {
HXLINE(2960)						duetSectionButton = note->isEvent;
            					}
            					else {
HXLINE(2960)						duetSectionButton = true;
            					}
HXDLIN(2960)					if (duetSectionButton) {
HXLINE(2960)						continue;
            					}
HXLINE(2963)					if ((side > -1)) {
HXLINE(2965)						if ((::Math_obj::floor((( (Float)(note->songData->__get(1)) ) / ( (Float)(::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER) ))) != side)) {
HXLINE(2967)							_gthis->showOutput(HX_("You cannot press this button with notes on more than one side.",1c,f1,dc,8e),null());
HXLINE(2968)							return;
            						}
            					}
            					else {
HXLINE(2971)						side = ::Math_obj::floor((( (Float)(note->songData->__get(1)) ) / ( (Float)(::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER) )));
            					}
            				}
            			}
HXLINE(2974)			::Array< ::Dynamic> pushedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2975)			{
HXLINE(2975)				int _g2 = 0;
HXDLIN(2975)				::Array< ::Dynamic> _g3 = _gthis->curRenderedNotes->members;
HXDLIN(2975)				while((_g2 < _g3->length)){
HXLINE(2975)					 ::states::editors::content::MetaNote note1 = _g3->__get(_g2).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(2975)					_g2 = (_g2 + 1);
HXLINE(2977)					bool duetSectionButton1;
HXDLIN(2977)					if (::hx::IsNotNull( note1 )) {
HXLINE(2977)						duetSectionButton1 = note1->isEvent;
            					}
            					else {
HXLINE(2977)						duetSectionButton1 = true;
            					}
HXDLIN(2977)					if (duetSectionButton1) {
HXLINE(2977)						continue;
            					}
HXLINE(2979)					{
HXLINE(2979)						int _g4 = 0;
HXDLIN(2979)						int _g5 = ::states::editors::ChartingState_obj::GRID_PLAYERS;
HXDLIN(2979)						while((_g4 < _g5)){
HXLINE(2979)							_g4 = (_g4 + 1);
HXDLIN(2979)							int i = (_g4 - 1);
HXLINE(2981)							if ((i == side)) {
HXLINE(2981)								continue;
            							}
HXLINE(2983)							::cpp::VirtualArray songDataCopy = note1->songData->copy();
HXLINE(2984)							songDataCopy->set(1,(note1->noteData + (i * ::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER)));
HXLINE(2985)							 ::states::editors::content::MetaNote newNote = _gthis->createNote(songDataCopy,null());
HXLINE(2986)							_gthis->notes->push(newNote);
HXLINE(2987)							pushedNotes->push(newNote);
            						}
            					}
            				}
            			}
HXLINE(2990)			_gthis->notes->sort(::states::PlayState_obj::sortByTime_dyn());
HXLINE(2991)			_gthis->softReloadNotes(true);
HXLINE(2993)			_gthis->addUndoAction(HX_("Add Note",91,46,97,60), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("notes",41,dc,ca,9f),pushedNotes)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_13, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2996_addSectionTab)
HXLINE(2997)			int maxData = (::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER * ::states::editors::ChartingState_obj::GRID_PLAYERS);
HXLINE(2998)			{
HXLINE(2998)				 ::Dynamic filter = null();
HXDLIN(2998)				 ::flixel::group::FlxTypedGroupIterator note =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_gthis->curRenderedNotes->members,filter);
HXDLIN(2998)				while(note->hasNext()){
HXLINE(2998)					 ::states::editors::content::MetaNote note1 = note->next().StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(3000)					bool mirrorNotesButton;
HXDLIN(3000)					if (::hx::IsNotNull( note1 )) {
HXLINE(3000)						mirrorNotesButton = note1->isEvent;
            					}
            					else {
HXLINE(3000)						mirrorNotesButton = true;
            					}
HXDLIN(3000)					if (mirrorNotesButton) {
HXLINE(3000)						continue;
            					}
HXLINE(3002)					int data = ::Std_obj::_hx_int(( (Float)(note1->songData->__get(1)) ));
HXLINE(3003)					note1->changeNoteData(((((::Math_obj::floor((( (Float)(data) ) / ( (Float)(::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER) ))) * ::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER) + ::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER) - note1->noteData) - 1));
HXLINE(3004)					_gthis->positionNoteXByData(note1,null());
            				}
            			}
HXLINE(3006)			_gthis->softReloadNotes(true);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_2767_addSectionTab)
HXDLIN(2767)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2768)		::Array< ::Dynamic> affectNotes = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE(2769)		::Array< ::Dynamic> affectEvents = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE(2770)		::Array< ::Dynamic> copyLastSecStepper = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE(2771)		 ::flixel::group::FlxTypedSpriteGroup tab_group = this->mainBox->getTab(HX_("Section",c5,2d,29,2b))->menu;
HXLINE(2772)		int objX = 10;
HXLINE(2773)		int objY = 10;
HXLINE(2774)		 ::Dynamic copyNotesOnSection =  ::Dynamic(new _hx_Closure_0(_gthis,affectNotes,affectEvents));
HXLINE(2838)		this->mustHitCheckBox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)(objX) ),( (Float)(objY) ),HX_("Must Hit Sec.",81,61,18,95),70, ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE(2844)		this->gfSectionCheckBox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)((objX + 100)) ),( (Float)(objY) ),HX_("GF Section",c4,66,21,54),70, ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE(2850)		this->altAnimSectionCheckBox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)((objX + 200)) ),( (Float)(objY) ),HX_("Alt Anim",a8,30,60,0a),70, ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE(2856)		objY = (objY + 40);
HXLINE(2857)		this->changeBpmCheckBox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)(objX) ),( (Float)(objY) ),HX_("Change BPM",2f,3c,7a,fb),80, ::Dynamic(new _hx_Closure_4(_gthis)));
HXLINE(2869)		objY = (objY + 25);
HXLINE(2870)		this->changeBpmStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,objX,objY,1,0,1,400,3,null(),null());
HXLINE(2871)		this->changeBpmStepper->onValueChange =  ::Dynamic(new _hx_Closure_5(_gthis));
HXLINE(2884)		this->beatsPerSecStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,(objX + 150),objY,1,4,1,16,2,null(),null());
HXLINE(2885)		this->beatsPerSecStepper->onValueChange =  ::Dynamic(new _hx_Closure_6(_gthis));
HXLINE(2897)		objY = (objY + 40);
HXLINE(2898)		 ::backend::ui::PsychUIButton copyButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,objX,objY,HX_("Copy Section",7a,b6,b0,3b), ::Dynamic(new _hx_Closure_7(copyNotesOnSection)),null(),null());
HXLINE(2899)		 ::backend::ui::PsychUIButton pasteButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,(objX + 100),objY,HX_("Paste Section",d8,1f,0e,46), ::Dynamic(new _hx_Closure_8(_gthis,affectNotes,affectEvents)),null(),null());
HXLINE(2903)		 ::backend::ui::PsychUIButton clearButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,(objX + 200),objY,HX_("Clear",6d,e1,88,db), ::Dynamic(new _hx_Closure_9(_gthis,affectNotes,affectEvents)),null(),null());
HXLINE(2918)		clearButton->normalStyle->__SetField(HX_("bgColor",5e,81,83,f7),-65536,::hx::paccDynamic);
HXLINE(2919)		clearButton->normalStyle->__SetField(HX_("textColor",76,01,4a,e3),-1,::hx::paccDynamic);
HXLINE(2921)		objY = (objY + 25);
HXLINE(2922)		affectNotes[0] =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)(objX) ),( (Float)(objY) ),HX_("Notes",21,4c,f8,32),60,null());
HXLINE(2923)		affectNotes->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->set_checked(true);
HXLINE(2924)		affectEvents[0] =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)((objX + 100)) ),( (Float)(objY) ),HX_("Events",39,c3,fe,ca),60,null());
HXLINE(2926)		objY = (objY + 32);
HXLINE(2927)		 ::backend::ui::PsychUIButton copyLastSecButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,objX,objY,HX_("Copy Last Section",46,d5,2d,2f), ::Dynamic(new _hx_Closure_10(_gthis,affectNotes,copyNotesOnSection,copyLastSecStepper,affectEvents)),null(),null());
HXLINE(2936)		copyLastSecButton->resize(80,26);
HXLINE(2937)		copyLastSecStepper[0] =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,(objX + 110),(objY + 2),1,1,-999,999,0,null(),null());
HXLINE(2939)		objY = (objY + 40);
HXLINE(2940)		 ::backend::ui::PsychUIButton swapSectionButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,objX,objY,HX_("Swap Section",58,33,c1,af), ::Dynamic(new _hx_Closure_11(_gthis)),null(),null());
HXLINE(2955)		 ::backend::ui::PsychUIButton duetSectionButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,(objX + 100),objY,HX_("Duet Section",05,74,bc,20), ::Dynamic(new _hx_Closure_12(_gthis)),null(),null());
HXLINE(2995)		 ::backend::ui::PsychUIButton mirrorNotesButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,(objX + 200),objY,HX_("Mirror Notes",a0,4f,4a,82), ::Dynamic(new _hx_Closure_13(_gthis)),null(),null());
HXLINE(3009)		tab_group->add(this->mustHitCheckBox).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3010)		tab_group->add(this->gfSectionCheckBox).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3011)		tab_group->add(this->altAnimSectionCheckBox).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3013)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->beatsPerSecStepper->x,(this->beatsPerSecStepper->y - ( (Float)(15) )),100,HX_("Beats per Section:",5b,32,db,c2),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3014)		tab_group->add(this->changeBpmCheckBox).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3015)		tab_group->add(this->changeBpmStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3016)		tab_group->add(this->beatsPerSecStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3018)		tab_group->add(copyButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3019)		tab_group->add(pasteButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3020)		tab_group->add(clearButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3021)		tab_group->add(affectNotes->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3022)		tab_group->add(affectEvents->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3024)		tab_group->add(copyLastSecButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3025)		tab_group->add(copyLastSecStepper->__get(0).StaticCast<  ::backend::ui::PsychUINumericStepper >()).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3027)		tab_group->add(swapSectionButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3028)		tab_group->add(duetSectionButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3029)		tab_group->add(mirrorNotesButton).StaticCast<  ::flixel::FlxSprite >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addSectionTab,(void))

void ChartingState_obj::reloadNotesDropdowns(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3033_reloadNotesDropdowns)
HXLINE(3035)		if (::hx::IsNotNull( this->eventDropDown )) {
HXLINE(3037)			this->eventsList = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3038)			::Array< ::String > eventFiles = this->loadFileList(HX_("custom_events/",28,61,2e,89),null(),::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_194,1));
HXLINE(3039)			{
HXLINE(3039)				int _g = 0;
HXDLIN(3039)				while((_g < eventFiles->length)){
HXLINE(3039)					::String file = eventFiles->__get(_g);
HXDLIN(3039)					_g = (_g + 1);
HXLINE(3041)					::String path = ::backend::Paths_obj::getPath(((HX_("custom_events/",28,61,2e,89) + file) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),null(),true);
HXDLIN(3041)					::String desc;
HXDLIN(3041)					if (::sys::FileSystem_obj::exists(path)) {
HXLINE(3041)						desc = ::sys::io::File_obj::getContent(path);
            					}
            					else {
HXLINE(3041)						desc = null();
            					}
HXLINE(3042)					this->eventsList->push(::Array_obj< ::String >::__new(2)->init(0,file)->init(1,desc));
            				}
            			}
HXLINE(3045)			{
HXLINE(3045)				int _g_current = 0;
HXDLIN(3045)				::Array< ::Dynamic> _g_array = ::states::editors::ChartingState_obj::defaultEvents;
HXDLIN(3045)				while((_g_current < _g_array->length)){
HXLINE(3045)					::Array< ::String > _g_value = _g_array->__get(_g_current).StaticCast< ::Array< ::String > >();
HXDLIN(3045)					_g_current = (_g_current + 1);
HXDLIN(3045)					int _g_key = (_g_current - 1);
HXDLIN(3045)					int id = _g_key;
HXDLIN(3045)					::Array< ::String > event = _g_value;
HXLINE(3046)					if (!(this->eventsList->contains(event))) {
HXLINE(3047)						this->eventsList->insert(id,event);
            					}
            				}
            			}
HXLINE(3049)			::Array< ::String > displayEventsList = ::Array_obj< ::String >::__new(0);
HXLINE(3050)			{
HXLINE(3050)				int _g_current1 = 0;
HXDLIN(3050)				::Array< ::Dynamic> _g_array1 = this->eventsList;
HXDLIN(3050)				while((_g_current1 < _g_array1->length)){
HXLINE(3050)					::Array< ::String > _g_value1 = _g_array1->__get(_g_current1).StaticCast< ::Array< ::String > >();
HXDLIN(3050)					_g_current1 = (_g_current1 + 1);
HXDLIN(3050)					int _g_key1 = (_g_current1 - 1);
HXDLIN(3050)					int id1 = _g_key1;
HXDLIN(3050)					::Array< ::String > data = _g_value1;
HXLINE(3052)					if ((id1 > 0)) {
HXLINE(3053)						displayEventsList[id1] = (((HX_("",00,00,00,00) + id1) + HX_(". ",32,28,00,00)) + data->__get(0));
            					}
            					else {
HXLINE(3055)						displayEventsList->push(HX_("",00,00,00,00));
            					}
            				}
            			}
HXLINE(3058)			::String lastSelected = this->eventDropDown->selectedLabel;
HXLINE(3059)			this->eventDropDown->set_list(displayEventsList);
HXLINE(3060)			this->eventDropDown->set_selectedLabel(lastSelected);
            		}
HXLINE(3064)		if (::hx::IsNotNull( this->noteTypeDropDown )) {
HXLINE(3066)			::Array< ::String > exts = ::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_195,1);
HXLINE(3067)			exts->push(HX_(".lua",4a,2a,ba,1e));
HXLINE(3068)			exts->push(HX_(".hx",be,42,23,00));
HXLINE(3069)			this->noteTypes = this->loadFileList(HX_("custom_notetypes/",16,04,18,a1),null(),exts);
HXLINE(3070)			{
HXLINE(3070)				int _g_current2 = 0;
HXDLIN(3070)				::Array< ::String > _g_array2 = ::objects::Note_obj::defaultNoteTypes;
HXDLIN(3070)				while((_g_current2 < _g_array2->length)){
HXLINE(3070)					::String _g_value2 = _g_array2->__get(_g_current2);
HXDLIN(3070)					_g_current2 = (_g_current2 + 1);
HXDLIN(3070)					int _g_key2 = (_g_current2 - 1);
HXDLIN(3070)					int id2 = _g_key2;
HXDLIN(3070)					::String noteType = _g_value2;
HXLINE(3071)					if (!(this->noteTypes->contains(noteType))) {
HXLINE(3072)						this->noteTypes->insert(id2,noteType);
            					}
            				}
            			}
HXLINE(3074)			bool _hx_tmp;
HXDLIN(3074)			if (::hx::IsNotNull( ::backend::Song_obj::chartPath )) {
HXLINE(3074)				_hx_tmp = (::backend::Song_obj::chartPath.length > 0);
            			}
            			else {
HXLINE(3074)				_hx_tmp = false;
            			}
HXDLIN(3074)			if (_hx_tmp) {
HXLINE(3076)				::String parentFolder = ::StringTools_obj::replace(::backend::Song_obj::chartPath,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE(3077)				parentFolder = parentFolder.substr(0,(::backend::Song_obj::chartPath.lastIndexOf(HX_("/",2f,00,00,00),null()) + 1));
HXLINE(3078)				::String path1 = (parentFolder + HX_("notetypes.txt",c9,39,60,44));
HXDLIN(3078)				::String daList = null();
HXDLIN(3078)				if (::sys::FileSystem_obj::exists(path1)) {
HXLINE(  48)					daList = ::sys::io::File_obj::getContent(path1);
            				}
HXLINE(3078)				::Array< ::String > notetypeFile;
HXDLIN(3078)				if (::hx::IsNotNull( daList )) {
HXLINE(3078)					::Array< ::String > daList1 = ::Array_obj< ::String >::__new(0);
HXLINE(  69)					daList1 = ::StringTools_obj::trim(daList).split(HX_("\n",0a,00,00,00));
HXLINE(3078)					{
HXLINE(3078)						int _g1 = 0;
HXDLIN(3078)						int _g2 = daList1->length;
HXDLIN(3078)						while((_g1 < _g2)){
HXLINE(3078)							_g1 = (_g1 + 1);
HXDLIN(3078)							int i = (_g1 - 1);
HXDLIN(3078)							daList1[i] = ::StringTools_obj::trim(daList1->__get(i));
            						}
            					}
HXDLIN(3078)					notetypeFile = daList1;
            				}
            				else {
HXLINE(3078)					notetypeFile = ::Array_obj< ::String >::__new(0);
            				}
HXLINE(3079)				if ((notetypeFile->length > 0)) {
HXLINE(3081)					int _g3 = 0;
HXDLIN(3081)					while((_g3 < notetypeFile->length)){
HXLINE(3081)						::String ntTyp = notetypeFile->__get(_g3);
HXDLIN(3081)						_g3 = (_g3 + 1);
HXLINE(3083)						::String name = ::StringTools_obj::trim(ntTyp);
HXLINE(3084)						if (!(this->noteTypes->contains(name))) {
HXLINE(3085)							this->noteTypes->push(name);
            						}
            					}
            				}
            			}
HXLINE(3090)			::Array< ::String > displayNoteTypes = this->noteTypes->copy();
HXLINE(3091)			{
HXLINE(3091)				int _g_current3 = 0;
HXDLIN(3091)				::Array< ::String > _g_array3 = displayNoteTypes;
HXDLIN(3091)				while((_g_current3 < _g_array3->length)){
HXLINE(3091)					::String _g_value3 = _g_array3->__get(_g_current3);
HXDLIN(3091)					_g_current3 = (_g_current3 + 1);
HXDLIN(3091)					int _g_key3 = (_g_current3 - 1);
HXDLIN(3091)					int id3 = _g_key3;
HXDLIN(3091)					::String key = _g_value3;
HXLINE(3092)					{
HXLINE(3093)						if ((id3 == 0)) {
HXLINE(3093)							continue;
            						}
HXLINE(3094)						displayNoteTypes[id3] = (((HX_("",00,00,00,00) + id3) + HX_(". ",32,28,00,00)) + key);
            					}
            				}
            			}
HXLINE(3097)			::String lastSelected1 = this->noteTypeDropDown->selectedLabel;
HXLINE(3098)			this->noteTypeDropDown->set_list(displayNoteTypes);
HXLINE(3099)			this->noteTypeDropDown->set_selectedLabel(lastSelected1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,reloadNotesDropdowns,(void))

::Array< ::Dynamic> ChartingState_obj::pasteCopiedNotesToSection( ::Dynamic __o_canCopyNotes, ::Dynamic __o_canCopyEvents, ::Dynamic __o_showMessage){
            		 ::Dynamic canCopyNotes = __o_canCopyNotes;
            		if (::hx::IsNull(__o_canCopyNotes)) canCopyNotes = true;
            		 ::Dynamic canCopyEvents = __o_canCopyEvents;
            		if (::hx::IsNull(__o_canCopyEvents)) canCopyEvents = true;
            		 ::Dynamic showMessage = __o_showMessage;
            		if (::hx::IsNull(__o_showMessage)) showMessage = true;
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3104_pasteCopiedNotesToSection)
HXLINE(3105)		 ::Dynamic curSectionTime = this->cachedSectionTimes->__get(this->curSec);
HXLINE(3106)		if (::hx::IsNull( curSectionTime )) {
HXLINE(3108)			this->showOutput(HX_("ERROR: Unknown section??",01,08,47,ac),true);
HXLINE(3109)			return ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE(3112)		::Array< ::Dynamic> pushedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3113)		::Array< ::Dynamic> nts = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3114)		::Array< ::Dynamic> evs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3115)		bool _hx_tmp;
HXDLIN(3115)		if (( (bool)(canCopyNotes) )) {
HXLINE(3115)			_hx_tmp = (this->copiedNotes->get_length() > 0);
            		}
            		else {
HXLINE(3115)			_hx_tmp = false;
            		}
HXDLIN(3115)		if (_hx_tmp) {
HXLINE(3117)			{
HXLINE(3117)				int _g = 0;
HXDLIN(3117)				::cpp::VirtualArray _g1 = this->copiedNotes;
HXDLIN(3117)				while((_g < _g1->get_length())){
HXLINE(3117)					 ::Dynamic note = _g1->__get(_g);
HXDLIN(3117)					_g = (_g + 1);
HXLINE(3119)					if (::hx::IsNull( note )) {
HXLINE(3119)						continue;
            					}
HXLINE(3120)					::cpp::VirtualArray dataCopy = this->makeNoteDataCopy(( (::cpp::VirtualArray)(note) ),false);
HXLINE(3121)					::cpp::VirtualArray dataCopy1 = dataCopy;
HXDLIN(3121)					int _hx_tmp1 = 0;
HXDLIN(3121)					dataCopy1->set(_hx_tmp1,(dataCopy1->__get(_hx_tmp1) + curSectionTime));
HXLINE(3123)					 ::states::editors::content::MetaNote createdNote = this->createNote(dataCopy,this->curSec);
HXLINE(3124)					this->notes->push(createdNote);
HXLINE(3125)					pushedNotes->push(createdNote);
HXLINE(3126)					nts->push(createdNote);
            				}
            			}
HXLINE(3128)			this->notes->sort(::states::PlayState_obj::sortByTime_dyn());
            		}
HXLINE(3131)		bool _hx_tmp2;
HXDLIN(3131)		if (( (bool)(canCopyEvents) )) {
HXLINE(3131)			_hx_tmp2 = (this->copiedEvents->get_length() > 0);
            		}
            		else {
HXLINE(3131)			_hx_tmp2 = false;
            		}
HXDLIN(3131)		if (_hx_tmp2) {
HXLINE(3133)			{
HXLINE(3133)				int _g2 = 0;
HXDLIN(3133)				::cpp::VirtualArray _g3 = this->copiedEvents;
HXDLIN(3133)				while((_g2 < _g3->get_length())){
HXLINE(3133)					 ::Dynamic event = _g3->__get(_g2);
HXDLIN(3133)					_g2 = (_g2 + 1);
HXLINE(3135)					if (::hx::IsNull( event )) {
HXLINE(3135)						continue;
            					}
HXLINE(3136)					::cpp::VirtualArray dataCopy2 = this->makeNoteDataCopy(( (::cpp::VirtualArray)(event) ),true);
HXLINE(3137)					::cpp::VirtualArray dataCopy3 = dataCopy2;
HXDLIN(3137)					int _hx_tmp3 = 0;
HXDLIN(3137)					dataCopy3->set(_hx_tmp3,(dataCopy3->__get(_hx_tmp3) + curSectionTime));
HXLINE(3139)					 ::states::editors::content::EventMetaNote createdEvent = this->createEvent(dataCopy2);
HXLINE(3140)					this->events->push(createdEvent);
HXLINE(3141)					pushedNotes->push(createdEvent);
HXLINE(3142)					evs->push(createdEvent);
            				}
            			}
HXLINE(3144)			this->events->sort(::states::PlayState_obj::sortByTime_dyn());
            		}
HXLINE(3146)		this->loadSection(null());
HXLINE(3148)		if (( (bool)(showMessage) )) {
HXLINE(3150)			bool _hx_tmp4;
HXDLIN(3150)			if ((nts->length == 0)) {
HXLINE(3150)				_hx_tmp4 = (evs->length == 0);
            			}
            			else {
HXLINE(3150)				_hx_tmp4 = false;
            			}
HXDLIN(3150)			if (_hx_tmp4) {
HXLINE(3152)				this->showOutput(HX_("Nothing to paste!",80,47,bf,1e),true);
HXLINE(3153)				return ::Array_obj< ::Dynamic>::__new(0);
            			}
HXLINE(3156)			::String str = HX_("",00,00,00,00);
HXLINE(3157)			if ((nts->length > 0)) {
HXLINE(3157)				str = (str + (HX_("Notes Added: ",47,f8,54,4f) + nts->length));
            			}
HXLINE(3158)			if ((evs->length > 0)) {
HXLINE(3160)				if ((str.length > 0)) {
HXLINE(3160)					str = (str + HX_("\n",0a,00,00,00));
            				}
HXLINE(3161)				str = (str + (HX_("Events Added: ",5f,47,cc,5b) + evs->length));
            			}
HXLINE(3164)			if ((str.length > 0)) {
HXLINE(3164)				this->showOutput(str,null());
            			}
            		}
HXLINE(3166)		this->addUndoAction(HX_("Add Note",91,46,97,60), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("events",19,4f,6a,96),evs)
            			->setFixed(1,HX_("notes",41,dc,ca,9f),nts)));
HXLINE(3167)		return pushedNotes;
            	}


HX_DEFINE_DYNAMIC_FUNC3(ChartingState_obj,pasteCopiedNotesToSection,return )

void ChartingState_obj::addSongTab(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		void _hx_run(::String old,::String cur){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3189_addSongTab)
HXLINE(3189)			::states::PlayState_obj::SONG->__SetField(HX_("song",d5,23,58,4c),cur,::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3192_addSongTab)
HXLINE(3193)			::states::PlayState_obj::SONG->__SetField(HX_("needsVoices",be,05,e9,0d),_gthis->allowVocalsCheckBox->checked,::hx::paccDynamic);
HXLINE(3194)			_gthis->loadMusic(null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3196_addSongTab)
HXLINE(3196)			_gthis->loadMusic(true);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3235_addSongTab)
HXLINE(3236)			::Array< Float > oldTimes = _gthis->cachedSectionTimes->copy();
HXLINE(3237)			::states::PlayState_obj::SONG->__SetField(HX_("bpm",df,be,4a,00),_gthis->bpmStepper->value,::hx::paccDynamic);
HXLINE(3238)			_gthis->adaptNotesToNewTimes(oldTimes);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3242_addSongTab)
HXLINE(3242)			::states::PlayState_obj::SONG->__SetField(HX_("speed",87,97,69,81),_gthis->scrollSpeedStepper->value,::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3246_addSongTab)
HXLINE(3247)			::states::PlayState_obj::SONG->__SetField(HX_("offset",93,97,3f,60),_gthis->audioOffsetStepper->value,::hx::paccDynamic);
HXLINE(3248)			::backend::Conductor_obj::offset = _gthis->audioOffsetStepper->value;
HXLINE(3249)			_gthis->updateWaveform();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::states::editors::ChartingState,_gthis) HXARGC(2)
            		void _hx_run(int id,::String character){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3266_addSongTab)
HXLINE(3267)			::states::PlayState_obj::SONG->__SetField(HX_("player1",b0,09,15,8a),character,::hx::paccDynamic);
HXLINE(3268)			_gthis->updateJsonData();
HXLINE(3269)			_gthis->updateHeads(true);
HXLINE(3270)			_gthis->loadMusic(null());
HXLINE(3271)			::haxe::Log_obj::trace((HX_("selected ",65,e5,17,8e) + character),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),3271,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("addSongTab",5f,6d,b4,11)));
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_7) HXARGC(2)
            		void _hx_run(int id,::String stage){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3274_addSongTab)
HXLINE(3275)			::states::PlayState_obj::SONG->__SetField(HX_("stage",be,6a,0b,84),stage,::hx::paccDynamic);
HXLINE(3276)			::backend::StageData_obj::loadDirectory(::states::PlayState_obj::SONG);
HXLINE(3277)			::haxe::Log_obj::trace((HX_("selected ",65,e5,17,8e) + stage),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),3277,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("addSongTab",5f,6d,b4,11)));
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::states::editors::ChartingState,_gthis) HXARGC(2)
            		void _hx_run(int id,::String character){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3281_addSongTab)
HXLINE(3282)			::states::PlayState_obj::SONG->__SetField(HX_("player2",b1,09,15,8a),character,::hx::paccDynamic);
HXLINE(3283)			_gthis->updateJsonData();
HXLINE(3284)			_gthis->updateHeads(true);
HXLINE(3285)			_gthis->loadMusic(null());
HXLINE(3286)			::haxe::Log_obj::trace((HX_("selected ",65,e5,17,8e) + character),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),3286,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("addSongTab",5f,6d,b4,11)));
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_9) HXARGC(2)
            		void _hx_run(int id,::String character){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3290_addSongTab)
HXLINE(3291)			::states::PlayState_obj::SONG->__SetField(HX_("gfVersion",b9,c6,7d,f3),character,::hx::paccDynamic);
HXLINE(3292)			::haxe::Log_obj::trace((HX_("selected ",65,e5,17,8e) + character),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),3292,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("addSongTab",5f,6d,b4,11)));
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3183_addSongTab)
HXDLIN(3183)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3184)		 ::flixel::group::FlxTypedSpriteGroup tab_group = this->mainBox->getTab(HX_("Song",f5,4f,31,37))->menu;
HXLINE(3185)		int objX = 10;
HXLINE(3186)		int objY = 25;
HXLINE(3188)		this->songNameInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,objX,objY,100,HX_("None",d8,3e,e3,33),8);
HXLINE(3189)		this->songNameInputText->onChange =  ::Dynamic(new _hx_Closure_0());
HXLINE(3191)		this->allowVocalsCheckBox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)(objX) ),( (Float)((objY + 20)) ),HX_("Allow Vocals",55,97,8e,fc),80, ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE(3196)		 ::backend::ui::PsychUIButton reloadAudioButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,(objX + 120),objY,HX_("Reload Audio",cf,9c,c1,ed), ::Dynamic(new _hx_Closure_2(_gthis)),80,null());
HXLINE(3231)		objY = (objY + 65);
HXLINE(3233)		this->bpmStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,objX,objY,1,1,1,400,3,null(),null());
HXLINE(3234)		this->bpmStepper->onValueChange =  ::Dynamic(new _hx_Closure_3(_gthis));
HXLINE(3241)		this->scrollSpeedStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,(objX + 90),objY,((Float)0.1),1,((Float)0.1),10,2,null(),null());
HXLINE(3242)		this->scrollSpeedStepper->onValueChange =  ::Dynamic(new _hx_Closure_4(_gthis));
HXLINE(3244)		this->audioOffsetStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,(objX + 180),objY,1,0,-500,500,0,null(),null());
HXLINE(3245)		this->audioOffsetStepper->onValueChange =  ::Dynamic(new _hx_Closure_5(_gthis));
HXLINE(3252)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->songNameInputText->x,(this->songNameInputText->y - ( (Float)(15) )),80,HX_("Song Name:",04,c1,be,12),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3253)		tab_group->add(this->songNameInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3254)		tab_group->add(this->allowVocalsCheckBox).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3255)		tab_group->add(reloadAudioButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3264)		objY = (objY + 40);
HXLINE(3265)		this->playerDropDown =  ::backend::ui::PsychUIDropDownMenu_obj::__alloc( HX_CTX ,( (Float)(objX) ),( (Float)(objY) ),::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_210,1), ::Dynamic(new _hx_Closure_6(_gthis)),null());
HXLINE(3273)		this->stageDropDown =  ::backend::ui::PsychUIDropDownMenu_obj::__alloc( HX_CTX ,( (Float)((objX + 140)) ),( (Float)(objY) ),::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_211,1), ::Dynamic(new _hx_Closure_7()),null());
HXLINE(3280)		this->opponentDropDown =  ::backend::ui::PsychUIDropDownMenu_obj::__alloc( HX_CTX ,( (Float)(objX) ),( (Float)((objY + 40)) ),::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_212,1), ::Dynamic(new _hx_Closure_8(_gthis)),null());
HXLINE(3289)		this->girlfriendDropDown =  ::backend::ui::PsychUIDropDownMenu_obj::__alloc( HX_CTX ,( (Float)(objX) ),( (Float)((objY + 80)) ),::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_213,1), ::Dynamic(new _hx_Closure_9()),null());
HXLINE(3295)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->bpmStepper->x,(this->bpmStepper->y - ( (Float)(15) )),50,HX_("BPM:",9b,0c,dd,2b),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3296)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->scrollSpeedStepper->x,(this->scrollSpeedStepper->y - ( (Float)(15) )),80,HX_("Scroll Speed:",86,8e,24,0f),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3297)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->audioOffsetStepper->x,(this->audioOffsetStepper->y - ( (Float)(15) )),100,HX_("Audio Offset (ms):",7c,ca,50,17),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3298)		tab_group->add(this->bpmStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3299)		tab_group->add(this->scrollSpeedStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3300)		tab_group->add(this->audioOffsetStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3303)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->stageDropDown->x,(this->stageDropDown->y - ( (Float)(15) )),80,HX_("Stage:",dc,6f,86,3a),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3304)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->playerDropDown->x,(this->playerDropDown->y - ( (Float)(15) )),80,HX_("Player:",99,31,66,57),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3305)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->opponentDropDown->x,(this->opponentDropDown->y - ( (Float)(15) )),80,HX_("Opponent:",dd,8f,bc,4a),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3306)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->girlfriendDropDown->x,(this->girlfriendDropDown->y - ( (Float)(15) )),80,HX_("Girlfriend:",20,89,69,8b),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3307)		tab_group->add(this->stageDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3308)		tab_group->add(this->girlfriendDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3309)		tab_group->add(this->opponentDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3310)		tab_group->add(this->playerDropDown).StaticCast<  ::flixel::FlxSprite >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addSongTab,(void))

void ChartingState_obj::addFileTab(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::ChartingState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3324_addFileTab)
HXLINE(3325)				_gthis->openNewChart();
HXLINE(3326)				_gthis->reloadNotesDropdowns();
HXLINE(3327)				_gthis->prepareReload();
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3322_addFileTab)
HXLINE(3323)			 ::Dynamic func =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE(3330)			if (!(_gthis->ignoreProgressCheckBox->checked)) {
HXLINE(3330)				 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(3330)				_gthis1->openSubState( ::states::editors::content::Prompt_obj::__alloc( HX_CTX ,HX_("Are you sure you want to start over?",99,0e,84,3e),func,null(),null(),null()));
            			}
            			else {
HXLINE(3331)				func();
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::states::editors::ChartingState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3346_addFileTab)
HXLINE(3346)				try {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::states::editors::ChartingState,_gthis, ::Dynamic,loadedChart) HXARGC(0)
            					void _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3357_addFileTab)
HXLINE(3358)						_gthis->loadChart(loadedChart);
HXLINE(3359)						::backend::Song_obj::chartPath = _gthis->fileDialog->path;
HXLINE(3360)						_gthis->reloadNotesDropdowns();
HXLINE(3361)						_gthis->prepareReload();
HXLINE(3362)						_gthis->showOutput(((HX_("Opened chart \"",09,b8,43,21) + ::backend::Song_obj::chartPath) + HX_("\" successfully!",5c,12,e5,ba)),null());
            					}
            					HX_END_LOCAL_FUNC0((void))

            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(3348)					::String filePath = ::StringTools_obj::replace(_gthis->fileDialog->path,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE(3349)					::String _gthis1 = _gthis->fileDialog->data;
HXDLIN(3349)					 ::Dynamic loadedChart = ::backend::Song_obj::parseJSON(_gthis1,filePath.substr(filePath.lastIndexOf(HX_("/",2f,00,00,00),null()),null()),null());
HXLINE(3350)					bool btn;
HXDLIN(3350)					if (::hx::IsNotNull( loadedChart )) {
HXLINE(3350)						btn = !(::Reflect_obj::hasField(loadedChart,HX_("song",d5,23,58,4c)));
            					}
            					else {
HXLINE(3350)						btn = true;
            					}
HXDLIN(3350)					if (btn) {
HXLINE(3352)						_gthis->showOutput(HX_("Error: File loaded is not a Psych Engine/FNF 0.2.x.x chart.",15,75,f2,7b),true);
HXLINE(3353)						return;
            					}
HXLINE(3356)					 ::Dynamic func =  ::Dynamic(new _hx_Closure_2(_gthis,loadedChart));
HXLINE(3365)					if (!(_gthis->ignoreProgressCheckBox->checked)) {
HXLINE(3365)						 ::states::editors::ChartingState _gthis2 = _gthis;
HXDLIN(3365)						_gthis2->openSubState( ::states::editors::content::Prompt_obj::__alloc( HX_CTX ,HX_("Warning: Any unsaved progress\nwill be lost.",26,7c,0e,60),func,null(),null(),null()));
            					}
            					else {
HXLINE(3366)						func();
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE(3368)						 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE(3369)						{
HXLINE(3370)							 ::states::editors::ChartingState _gthis3 = _gthis;
HXDLIN(3370)							_gthis3->showOutput((HX_("Error: ",4e,a8,5b,b7) + e->get_message()),true);
HXLINE(3371)							 ::Dynamic btn1 = ::haxe::Log_obj::trace;
HXDLIN(3371)							::Array< ::Dynamic> tmp = e->get_stack();
HXDLIN(3371)							::String btn2;
HXDLIN(3371)							if (::hx::IsNull( tmp )) {
HXLINE(3371)								btn2 = HX_("null",87,9e,0e,49);
            							}
            							else {
HXLINE(3371)								btn2 = ::haxe::_CallStack::CallStack_Impl__obj::toString(tmp);
            							}
HXDLIN(3371)							btn1(btn2,::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),3371,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("addFileTab",18,a5,d9,66)));
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3339_addFileTab)
HXLINE(3340)			if (!(_gthis->fileDialog->completed)) {
HXLINE(3340)				return;
            			}
HXLINE(3341)			_gthis->upperBox->set_isMinimized(true);
HXLINE(3342)			_gthis->upperBox->bg->set_visible(false);
HXLINE(3344)			_gthis->fileDialog->open(null(),null(),null(), ::Dynamic(new _hx_Closure_3(_gthis)),null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_5) HXARGC(2)
            			int _hx_run(::String a,::String b){
            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3398_addFileTab)
HXLINE(3398)				::String btn = a.toUpperCase();
HXDLIN(3398)				if ((btn < b.toUpperCase())) {
HXLINE(3398)					return 1;
            				}
            				else {
HXLINE(3398)					return -1;
            				}
HXDLIN(3398)				return 0;
            			}
            			HX_END_LOCAL_FUNC2(return)

            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_8, ::states::editors::ChartingState,_gthis, ::backend::ui::PsychUIRadioGroup,radioGrp,::Array< ::String >,fileList) HXARGC(1)
            			void _hx_run( ::states::editors::content::BasePrompt state){
            				HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_7, ::states::editors::ChartingState,_gthis, ::states::editors::content::BasePrompt,state, ::backend::ui::PsychUIRadioGroup,radioGrp,::Array< ::String >,fileList) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3419_addFileTab)
HXLINE(3420)					::String autosaveName = fileList->__get(radioGrp->checked);
HXLINE(3421)					::String path = (HX_("backups/",1e,d1,d1,25) + autosaveName);
HXLINE(3422)					state->close();
HXLINE(3424)					if (::sys::FileSystem_obj::exists(path)) {
HXLINE(3426)						try {
            							HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_6, ::states::editors::ChartingState,_gthis,::String,originalPath,::String,autosaveName, ::Dynamic,loadedChart1) HXARGC(0)
            							void _hx_run(){
            								HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3440_addFileTab)
HXLINE(3441)								::String func;
HXDLIN(3441)								if (::sys::FileSystem_obj::exists(originalPath)) {
HXLINE(3441)									func = originalPath;
            								}
            								else {
HXLINE(3441)									func = null();
            								}
HXDLIN(3441)								::backend::Song_obj::chartPath = func;
HXLINE(3442)								_gthis->loadChart(loadedChart1);
HXLINE(3443)								_gthis->reloadNotesDropdowns();
HXLINE(3444)								_gthis->prepareReload();
HXLINE(3446)								_gthis->showOutput(((HX_("Opened autosave \"",25,b1,00,a6) + autosaveName) + HX_("\" successfully!",5c,12,e5,ba)),null());
            							}
            							HX_END_LOCAL_FUNC0((void))

            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(3428)							::String loadedChart = ::sys::io::File_obj::getContent(path);
HXDLIN(3428)							 ::Dynamic loadedChart1 = ::backend::Song_obj::parseJSON(loadedChart,autosaveName,null());
HXLINE(3429)							bool btn;
HXDLIN(3429)							if (::hx::IsNotNull( loadedChart1 )) {
HXLINE(3429)								btn = !(::Reflect_obj::hasField(loadedChart1,HX_("__original_path",73,c0,d8,4c)));
            							}
            							else {
HXLINE(3429)								btn = true;
            							}
HXDLIN(3429)							if (btn) {
HXLINE(3431)								_gthis->showOutput(HX_("Error: File loaded is not a valid Psych Engine autosave.",aa,cd,f2,9d),true);
HXLINE(3432)								return;
            							}
HXLINE(3436)							::String originalPath = ( (::String)(::Reflect_obj::field(loadedChart1,HX_("__original_path",73,c0,d8,4c))) );
HXLINE(3437)							::Reflect_obj::deleteField(loadedChart1,HX_("__original_path",73,c0,d8,4c));
HXLINE(3439)							 ::Dynamic func =  ::Dynamic(new _hx_Closure_6(_gthis,originalPath,autosaveName,loadedChart1));
HXLINE(3449)							if (!(_gthis->ignoreProgressCheckBox->checked)) {
HXLINE(3449)								 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(3449)								_gthis1->openSubState( ::states::editors::content::Prompt_obj::__alloc( HX_CTX ,HX_("Warning: Any unsaved progress\nwill be lost.",26,7c,0e,60),func,null(),null(),null()));
            							}
            							else {
HXLINE(3450)								func();
            							}
            						} catch( ::Dynamic _hx_e) {
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic _g = _hx_e;
HXLINE(3452)								 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE(3454)								{
HXLINE(3454)									 ::states::editors::ChartingState _gthis2 = _gthis;
HXDLIN(3454)									_gthis2->showOutput((HX_("Error on loading autosave: ",df,12,a1,3a) + e->get_message()),true);
            								}
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
            					}
            					else {
HXLINE(3457)						_gthis->showOutput(HX_("Error! Autosave file selected could not be found, huh??",48,fa,7d,1e),true);
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3405_addFileTab)
HXLINE(3406)				_gthis->upperBox->set_isMinimized(true);
HXLINE(3407)				_gthis->upperBox->bg->set_visible(false);
HXLINE(3409)				Float state1 = state->bg->x;
HXDLIN(3409)				Float btn = ((state1 + state->bg->get_width()) - ( (Float)(40) ));
HXDLIN(3409)				 ::backend::ui::PsychUIButton btn1 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btn,state->bg->y,HX_("X",58,00,00,00),state->close_dyn(),40,null());
HXLINE(3410)				btn1->set_cameras(state->get_cameras());
HXLINE(3411)				state->add(btn1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3413)				{
HXLINE(3413)					int axes = 1;
HXDLIN(3413)					bool btn2;
HXDLIN(3413)					if ((axes != 1)) {
HXLINE(3413)						btn2 = (axes == 17);
            					}
            					else {
HXLINE(3413)						btn2 = true;
            					}
HXDLIN(3413)					if (btn2) {
HXLINE(3413)						 ::backend::ui::PsychUIRadioGroup radioGrp1 = radioGrp;
HXDLIN(3413)						int btn3 = ::flixel::FlxG_obj::width;
HXDLIN(3413)						radioGrp1->set_x(((( (Float)(btn3) ) - radioGrp->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(3413)					bool btn4;
HXDLIN(3413)					if ((axes != 16)) {
HXLINE(3413)						btn4 = (axes == 17);
            					}
            					else {
HXLINE(3413)						btn4 = true;
            					}
HXDLIN(3413)					if (btn4) {
HXLINE(3413)						 ::backend::ui::PsychUIRadioGroup radioGrp2 = radioGrp;
HXDLIN(3413)						int btn5 = ::flixel::FlxG_obj::height;
HXDLIN(3413)						radioGrp2->set_y(((( (Float)(btn5) ) - radioGrp->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(3414)				radioGrp->set_y((state->bg->y + 80));
HXLINE(3415)				 ::backend::ui::PsychUIRadioGroup radioGrp3 = radioGrp;
HXDLIN(3415)				radioGrp3->set_cameras(state->get_cameras());
HXLINE(3416)				state->add(radioGrp).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3418)				Float radioGrp4 = radioGrp->y;
HXDLIN(3418)				 ::backend::ui::PsychUIButton btn6 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,((radioGrp4 + radioGrp->get_height()) + 20),HX_("Load",46,c6,90,32), ::Dynamic(new _hx_Closure_7(_gthis,state,radioGrp,fileList)),null(),null());
HXLINE(3459)				btn6->set_cameras(state->get_cameras());
HXLINE(3460)				{
HXLINE(3460)					int axes1 = 1;
HXDLIN(3460)					bool btn7;
HXDLIN(3460)					if ((axes1 != 1)) {
HXLINE(3460)						btn7 = (axes1 == 17);
            					}
            					else {
HXLINE(3460)						btn7 = true;
            					}
HXDLIN(3460)					if (btn7) {
HXLINE(3460)						int btn8 = ::flixel::FlxG_obj::width;
HXDLIN(3460)						btn6->set_x(((( (Float)(btn8) ) - btn6->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(3460)					bool btn9;
HXDLIN(3460)					if ((axes1 != 16)) {
HXLINE(3460)						btn9 = (axes1 == 17);
            					}
            					else {
HXLINE(3460)						btn9 = true;
            					}
HXDLIN(3460)					if (btn9) {
HXLINE(3460)						int btn10 = ::flixel::FlxG_obj::height;
HXDLIN(3460)						btn6->set_y(((( (Float)(btn10) ) - btn6->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(3461)				state->add(btn6).StaticCast<  ::flixel::FlxBasic >();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3380_addFileTab)
HXLINE(3381)			if (!(_gthis->fileDialog->completed)) {
HXLINE(3381)				return;
            			}
HXLINE(3382)			_gthis->upperBox->set_isMinimized(true);
HXLINE(3383)			_gthis->upperBox->bg->set_visible(false);
HXLINE(3385)			if (!(::sys::FileSystem_obj::exists(HX_("backups/",1e,d1,d1,25)))) {
HXLINE(3387)				_gthis->showOutput(HX_("The \"backups\" folder does not exist.",95,69,f2,a7),true);
HXLINE(3388)				return;
            			}
HXLINE(3391)			::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN(3391)			{
HXLINE(3391)				int _g1 = 0;
HXDLIN(3391)				::Array< ::String > _g2 = ::sys::FileSystem_obj::readDirectory(HX_("backups/",1e,d1,d1,25));
HXDLIN(3391)				while((_g1 < _g2->length)){
HXLINE(3391)					::String v = _g2->__get(_g1);
HXDLIN(3391)					_g1 = (_g1 + 1);
HXDLIN(3391)					if (::StringTools_obj::endsWith(v,(HX_(".",2e,00,00,00) + _gthis->BACKUP_EXT))) {
HXLINE(3391)						_g->push(v);
            					}
            				}
            			}
HXDLIN(3391)			::Array< ::String > fileList = _g;
HXLINE(3392)			if ((fileList->length < 1)) {
HXLINE(3394)				_gthis->showOutput(HX_("No autosave files found.",aa,55,cd,44),true);
HXLINE(3395)				return;
            			}
HXLINE(3398)			fileList->sort( ::Dynamic(new _hx_Closure_5()));
HXLINE(3399)			int maxItems = ::Std_obj::_hx_int(::Math_obj::min(( (Float)(5) ),( (Float)(fileList->length) )));
HXLINE(3400)			 ::backend::ui::PsychUIRadioGroup radioGrp =  ::backend::ui::PsychUIRadioGroup_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),fileList,25,maxItems,false,240);
HXLINE(3401)			radioGrp->set_checked(0);
HXLINE(3403)			Float hei = (radioGrp->get_height() + 160);
HXLINE(3404)			 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(3404)			_gthis1->openSubState( ::states::editors::content::BasePrompt_obj::__alloc( HX_CTX ,420,hei,HX_("Choose an Autosave",36,e9,ab,1b), ::Dynamic(new _hx_Closure_8(_gthis,radioGrp,fileList)),null()));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_15, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3562_addFileTab)
HXLINE(3563)			if (!(_gthis->fileDialog->completed)) {
HXLINE(3563)				return;
            			}
HXLINE(3564)			_gthis->upperBox->set_isMinimized(true);
HXLINE(3565)			_gthis->upperBox->bg->set_visible(false);
HXLINE(3567)			_gthis->saveChart(null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_16, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3574_addFileTab)
HXLINE(3575)			if (!(_gthis->fileDialog->completed)) {
HXLINE(3575)				return;
            			}
HXLINE(3576)			_gthis->upperBox->set_isMinimized(true);
HXLINE(3577)			_gthis->upperBox->bg->set_visible(false);
HXLINE(3579)			_gthis->saveChart(false);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_21, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_20, ::states::editors::ChartingState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3606_addFileTab)
HXLINE(3607)				if (::hx::IsNull( ::backend::Song_obj::chartPath )) {
HXLINE(3609)					_gthis->showOutput(HX_("You must save/load a Chart first to Reload it!",25,4e,c3,22),true);
HXLINE(3610)					return;
            				}
HXLINE(3613)				if (::sys::FileSystem_obj::exists(::backend::Song_obj::chartPath)) {
HXLINE(3615)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(3617)						 ::Dynamic reloadedChart = ::backend::Song_obj::parseJSON(::sys::io::File_obj::getContent(::backend::Song_obj::chartPath),null(),null());
HXLINE(3618)						_gthis->loadChart(reloadedChart);
HXLINE(3619)						_gthis->reloadNotesDropdowns();
HXLINE(3620)						_gthis->prepareReload();
HXLINE(3621)						_gthis->showOutput(HX_("Chart reloaded successfully!",d4,b3,c5,18),null());
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g = _hx_e;
HXLINE(3623)							 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE(3624)							{
HXLINE(3625)								 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(3625)								_gthis1->showOutput((HX_("Error: ",4e,a8,5b,b7) + e->get_message()),true);
HXLINE(3626)								 ::Dynamic func = ::haxe::Log_obj::trace;
HXDLIN(3626)								::Array< ::Dynamic> tmp = e->get_stack();
HXDLIN(3626)								::String func1;
HXDLIN(3626)								if (::hx::IsNull( tmp )) {
HXLINE(3626)									func1 = HX_("null",87,9e,0e,49);
            								}
            								else {
HXLINE(3626)									func1 = ::haxe::_CallStack::CallStack_Impl__obj::toString(tmp);
            								}
HXDLIN(3626)								func(func1,::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),3626,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("addFileTab",18,a5,d9,66)));
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            				else {
HXLINE(3629)					_gthis->showOutput(HX_("You must save/load a Chart first to Reload it!",25,4e,c3,22),true);
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3604_addFileTab)
HXLINE(3605)			 ::Dynamic func =  ::Dynamic(new _hx_Closure_20(_gthis));
HXLINE(3632)			if (!(_gthis->ignoreProgressCheckBox->checked)) {
HXLINE(3632)				 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(3632)				_gthis1->openSubState( ::states::editors::content::Prompt_obj::__alloc( HX_CTX ,HX_("Warning: Any unsaved progress will be lost",1e,f4,c1,ce),func,null(),null(),null()));
            			}
            			else {
HXLINE(3633)				func();
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_29, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_28, ::states::editors::ChartingState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3648_addFileTab)
HXLINE(3648)				try {
            					HX_BEGIN_LOCAL_FUNC_S6(::hx::LocalFunc,_hx_Closure_27, ::states::editors::ChartingState,_gthis, ::Dynamic,pack,::String,path,::Array< ::String >,chartName,::String,chartFile,::String,metadataFile) HXARGC(1)
            					void _hx_run( ::states::editors::content::BasePrompt state){
            						HX_BEGIN_LOCAL_FUNC_S7(::hx::LocalFunc,_hx_Closure_24, ::states::editors::content::BasePrompt,state,::String,path, ::Dynamic,pack, ::states::editors::ChartingState,_gthis,::Array< ::String >,chartName,::String,chartFile,::String,metadataFile) HXARGC(0)
            						void _hx_run(){
            							HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_23,::String,path, ::Dynamic,pack, ::states::editors::ChartingState,_gthis,::Array< ::String >,chartName,::String,metadataFile) HXARGC(0)
            							void _hx_run(){
            								HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_22,::String,path, ::states::editors::ChartingState,_gthis) HXARGC(0)
            								void _hx_run(){
            									HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3674_addFileTab)
HXLINE(3674)									if (_gthis->overwriteSavedSomething) {
HXLINE(3675)										_gthis->showOutput(((HX_("Files saved successfully to: ",98,2f,af,8d) + path) + HX_("!",21,00,00,00)),null());
            									}
            								}
            								HX_END_LOCAL_FUNC0((void))

            								HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3672_addFileTab)
HXLINE(3672)								 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(3672)								::String metadataFile1 = metadataFile;
HXDLIN(3672)								::String btn = ((HX_("",00,00,00,00) + chartName->__get(0)) + HX_("-metadata.json",3a,5f,8c,92));
HXDLIN(3672)								_gthis1->overwriteCheck(metadataFile1,btn,::states::editors::content::PsychJsonPrinter_obj::print( ::Dynamic(pack->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic)),::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_240,3)), ::Dynamic(new _hx_Closure_22(path,_gthis)),null());
            							}
            							HX_END_LOCAL_FUNC0((void))

            							HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3668_addFileTab)
HXLINE(3669)							_gthis->overwriteSavedSomething = false;
HXLINE(3670)							 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(3670)							::String chartFile1 = chartFile;
HXDLIN(3670)							::String btn = ((HX_("",00,00,00,00) + chartName->__get(0)) + HX_("-chart.json",25,ca,e0,0a));
HXDLIN(3670)							_gthis1->overwriteCheck(chartFile1,btn,::states::editors::content::PsychJsonPrinter_obj::print( ::Dynamic(pack->__Field(HX_("chart",de,9c,b3,45),::hx::paccDynamic)),::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_242,3)), ::Dynamic(new _hx_Closure_23(path,pack,_gthis,chartName,metadataFile)),null());
HXLINE(3678)							state->close();
            						}
            						HX_END_LOCAL_FUNC0((void))

            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_25, ::Dynamic,pack) HXARGC(2)
            						void _hx_run(::String old,::String cur){
            							HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3693_addFileTab)
HXLINE(3693)							 ::Dynamic(pack->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic))->__SetField(HX_("artist",c7,f2,48,b9),cur,::hx::paccDynamic);
            						}
            						HX_END_LOCAL_FUNC2((void))

            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_26, ::Dynamic,pack) HXARGC(2)
            						void _hx_run(::String old,::String cur){
            							HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3697_addFileTab)
HXLINE(3697)							 ::Dynamic(pack->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic))->__SetField(HX_("charter",cb,68,7b,cf),cur,::hx::paccDynamic);
            						}
            						HX_END_LOCAL_FUNC2((void))

            						HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3664_addFileTab)
HXLINE(3665)						int btnX = 640;
HXLINE(3666)						int btnY = 400;
HXLINE(3667)						 ::backend::ui::PsychUIButton btn =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("Save",5d,b7,26,37), ::Dynamic(new _hx_Closure_24(state,path,pack,_gthis,chartName,chartFile,metadataFile)),null(),null());
HXLINE(3680)						btn->normalStyle->__SetField(HX_("bgColor",5e,81,83,f7),-16744448,::hx::paccDynamic);
HXLINE(3681)						btn->normalStyle->__SetField(HX_("textColor",76,01,4a,e3),-1,::hx::paccDynamic);
HXLINE(3682)						btn->set_cameras(state->get_cameras());
HXLINE(3683)						state->add(btn).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3685)						 ::backend::ui::PsychUIButton btn1 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,(btnX + 100),btnY,HX_("Cancel",9a,61,c8,ec),state->close_dyn(),null(),null());
HXLINE(3686)						btn1->set_cameras(state->get_cameras());
HXLINE(3687)						state->add(btn1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3689)						Float textX = ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(155) ));
HXLINE(3690)						int textY = 360;
HXLINE(3691)						 ::backend::ui::PsychUIInputText artistInput =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,textX,textY,120,( (::String)( ::Dynamic(pack->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic))->__Field(HX_("artist",c7,f2,48,b9),::hx::paccDynamic)) ),8);
HXLINE(3692)						artistInput->set_cameras(state->get_cameras());
HXLINE(3693)						artistInput->onChange =  ::Dynamic(new _hx_Closure_25(pack));
HXLINE(3695)						 ::backend::ui::PsychUIInputText charterInput =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,(textX + 190),textY,120,( (::String)( ::Dynamic(pack->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic))->__Field(HX_("charter",cb,68,7b,cf),::hx::paccDynamic)) ),8);
HXLINE(3696)						charterInput->set_cameras(state->get_cameras());
HXLINE(3697)						charterInput->onChange =  ::Dynamic(new _hx_Closure_26(pack));
HXLINE(3699)						 ::flixel::text::FlxText artistTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,artistInput->x,(artistInput->y - ( (Float)(15) )),100,HX_("Artist/Composer:",92,94,ac,ad),null(),null());
HXLINE(3700)						artistTxt->set_cameras(state->get_cameras());
HXLINE(3701)						 ::flixel::text::FlxText charterTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,charterInput->x,(charterInput->y - ( (Float)(15) )),100,HX_("Charter:",2f,05,32,96),null(),null());
HXLINE(3702)						charterTxt->set_cameras(state->get_cameras());
HXLINE(3703)						state->add(artistTxt).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3704)						state->add(charterTxt).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3705)						state->add(artistInput).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3706)						state->add(charterInput).StaticCast<  ::flixel::FlxBasic >();
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(3650)					::String path = ::StringTools_obj::replace(_gthis->fileDialog->path,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE(3652)					::String path1 = ( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(3652)					 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(3652)					 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(3652)					::Array< ::String > chartName = ::Array_obj< ::String >::__new(1)->init(0,(::StringTools_obj::trim(hideChars->replace(invalidChars->replace(path1,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase() + HX_(".json",56,f1,d6,c2)));
HXLINE(3653)					::Array< ::String > chartName1 = chartName;
HXDLIN(3653)					::String chartName2 = chartName->__get(0);
HXDLIN(3653)					int btn = (chartName->__get(0).lastIndexOf(HX_("/",2f,00,00,00),null()) + 1);
HXDLIN(3653)					chartName1[0] = chartName2.substring(btn,chartName->__get(0).lastIndexOf(HX_(".",2e,00,00,00),null()));
HXLINE(3655)					::String chartFile = ((((HX_("",00,00,00,00) + path) + HX_("/",2f,00,00,00)) + chartName->__get(0)) + HX_("-chart.json",25,ca,e0,0a));
HXLINE(3656)					::String metadataFile = ((((HX_("",00,00,00,00) + path) + HX_("/",2f,00,00,00)) + chartName->__get(0)) + HX_("-metadata.json",3a,5f,8c,92));
HXLINE(3658)					_gthis->updateChartData();
HXLINE(3659)					 ::Dynamic pack = ::states::editors::content::VSlice_obj::_hx_export(::states::PlayState_obj::SONG,null());
HXLINE(3661)					::backend::ClientPrefs_obj::toggleVolumeKeys(false);
HXLINE(3662)					 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(3662)					_gthis1->openSubState( ::states::editors::content::BasePrompt_obj::__alloc( HX_CTX ,null(),null(),HX_("Metadata",8f,a3,cb,19), ::Dynamic(new _hx_Closure_27(_gthis,pack,path,chartName,chartFile,metadataFile)),null()));
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE(3714)						 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE(3715)						{
HXLINE(3716)							 ::states::editors::ChartingState _gthis2 = _gthis;
HXDLIN(3716)							_gthis2->showOutput((HX_("Error: ",4e,a8,5b,b7) + e->get_message()),true);
HXLINE(3717)							 ::Dynamic btn1 = ::haxe::Log_obj::trace;
HXDLIN(3717)							::Array< ::Dynamic> tmp = e->get_stack();
HXDLIN(3717)							::String btn2;
HXDLIN(3717)							if (::hx::IsNull( tmp )) {
HXLINE(3717)								btn2 = HX_("null",87,9e,0e,49);
            							}
            							else {
HXLINE(3717)								btn2 = ::haxe::_CallStack::CallStack_Impl__obj::toString(tmp);
            							}
HXDLIN(3717)							btn1(btn2,::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),3717,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("addFileTab",18,a5,d9,66)));
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3641_addFileTab)
HXLINE(3642)			if (!(_gthis->fileDialog->completed)) {
HXLINE(3642)				return;
            			}
HXLINE(3643)			_gthis->upperBox->set_isMinimized(true);
HXLINE(3644)			_gthis->upperBox->bg->set_visible(false);
HXLINE(3646)			_gthis->fileDialog->openDirectory(HX_("Save V-Slice Chart/Metadata JSONs",93,32,9f,33), ::Dynamic(new _hx_Closure_28(_gthis)),null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_39, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_38, ::states::editors::ChartingState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_37, ::states::editors::ChartingState,_gthis, ::Dynamic,pack,::String,filePath) HXARGC(1)
            				void _hx_run( ::states::editors::content::BasePrompt state){
            					HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_33, ::states::editors::content::BasePrompt,state, ::states::editors::ChartingState,_gthis, ::Dynamic,pack,::String,parentFolder,::String,songName) HXARGC(0)
            					void _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3759_addFileTab)
HXLINE(3760)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(3762)							::Array< ::String > diffs = ( (::Array< ::String >)( ::Dynamic( ::Dynamic(pack->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic))->__Field(HX_("playData",3e,ba,76,32),::hx::paccDynamic))->__Field(HX_("difficulties",59,c7,5e,02),::hx::paccDynamic)) );
HXLINE(3763)							bool btn;
HXDLIN(3763)							if (::hx::IsNotNull( diffs )) {
HXLINE(3763)								btn = (diffs->length > 0);
            							}
            							else {
HXLINE(3763)								btn = false;
            							}
HXDLIN(3763)							if (btn) {
            								HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_32, ::Dynamic,pack, ::states::editors::ChartingState,_gthis,::String,songName) HXARGC(0)
            								void _hx_run(){
            									HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_31, ::Dynamic,pack,::Array< ::String >,path, ::states::editors::ChartingState,_gthis,::String,songName) HXARGC(0)
            									void _hx_run(){
            										HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_30,::Array< ::String >,path, ::states::editors::ChartingState,_gthis) HXARGC(0)
            										void _hx_run(){
            											HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3818_addFileTab)
HXLINE(3818)											if (_gthis->overwriteSavedSomething) {
HXLINE(3819)												_gthis->showOutput(((HX_("Files saved successfully to: ",98,2f,af,8d) + path->__get(0)) + HX_("!",21,00,00,00)),null());
            											}
            										}
            										HX_END_LOCAL_FUNC0((void))

            										HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3816_addFileTab)
HXLINE(3816)										 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(3816)										::String btn = ((((HX_("",00,00,00,00) + path->__get(0)) + HX_("/",2f,00,00,00)) + songName) + HX_("-metadata.json",3a,5f,8c,92));
HXDLIN(3816)										::String btn1 = ((HX_("",00,00,00,00) + songName) + HX_("-metadata.json",3a,5f,8c,92));
HXDLIN(3816)										_gthis1->overwriteCheck(btn,btn1,::states::editors::content::PsychJsonPrinter_obj::print( ::Dynamic(pack->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic)),::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_250,3)), ::Dynamic(new _hx_Closure_30(path,_gthis)),null());
            									}
            									HX_END_LOCAL_FUNC0((void))

            									HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3810_addFileTab)
HXLINE(3811)									_gthis->overwriteSavedSomething = false;
HXLINE(3812)									::Array< ::String > path = ::Array_obj< ::String >::__new(1)->init(0,::StringTools_obj::replace(_gthis->fileDialog->path,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00)));
HXLINE(3813)									if (::StringTools_obj::endsWith(path->__get(0),HX_("/",2f,00,00,00))) {
HXLINE(3813)										path[0] = path->__get(0).substr(0,(path->__get(0).length - 1));
            									}
HXLINE(3814)									 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(3814)									::String btn = ((((HX_("",00,00,00,00) + path->__get(0)) + HX_("/",2f,00,00,00)) + songName) + HX_("-chart.json",25,ca,e0,0a));
HXDLIN(3814)									::String btn1 = ((HX_("",00,00,00,00) + songName) + HX_("-chart.json",25,ca,e0,0a));
HXDLIN(3814)									_gthis1->overwriteCheck(btn,btn1,::states::editors::content::PsychJsonPrinter_obj::print( ::Dynamic(pack->__Field(HX_("chart",de,9c,b3,45),::hx::paccDynamic)),::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_252,3)), ::Dynamic(new _hx_Closure_31(pack,path,_gthis,songName)),null());
            								}
            								HX_END_LOCAL_FUNC0((void))

HXLINE(3766)								 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(3766)								 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(3766)								::String defaultDiff = ::StringTools_obj::trim(hideChars->replace(invalidChars->replace(::backend::Difficulty_obj::defaultDifficulty,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
HXLINE(3767)								{
HXLINE(3767)									int _g = 0;
HXDLIN(3767)									while((_g < diffs->length)){
HXLINE(3767)										::String diff = diffs->__get(_g);
HXDLIN(3767)										_g = (_g + 1);
HXLINE(3769)										::String diffPostfix;
HXDLIN(3769)										if ((diff != defaultDiff)) {
HXLINE(3769)											diffPostfix = (HX_("-",2d,00,00,00) + diff);
            										}
            										else {
HXLINE(3769)											diffPostfix = HX_("",00,00,00,00);
            										}
HXLINE(3770)										::String chartToFind = (((parentFolder + songName) + diffPostfix) + HX_(".json",56,f1,d6,c2));
HXLINE(3771)										if (::sys::FileSystem_obj::exists(chartToFind)) {
HXLINE(3773)											::String diffChart = ::sys::io::File_obj::getContent(chartToFind);
HXDLIN(3773)											 ::Dynamic diffChart1 = ::backend::Song_obj::parseJSON(diffChart,(songName + diffPostfix),null());
HXLINE(3774)											if (::hx::IsNotNull( diffChart1 )) {
HXLINE(3776)												 ::Dynamic subpack = ::states::editors::content::VSlice_obj::_hx_export(diffChart1,null());
HXLINE(3777)												 ::Dynamic diffSpeed =  ::Dynamic( ::Dynamic(subpack->__Field(HX_("chart",de,9c,b3,45),::hx::paccDynamic))->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic))->__Field(HX_("get",96,80,4e,00),::hx::paccDynamic)(diff);
HXLINE(3778)												::Array< ::Dynamic> diffNotes = ( (::Array< ::Dynamic>)( ::Dynamic( ::Dynamic(subpack->__Field(HX_("chart",de,9c,b3,45),::hx::paccDynamic))->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__Field(HX_("get",96,80,4e,00),::hx::paccDynamic)(diff)) );
HXLINE(3779)												bool btn1;
HXDLIN(3779)												if (::hx::IsNotNull( diffSpeed )) {
HXLINE(3779)													btn1 = ::hx::IsNotNull( diffNotes );
            												}
            												else {
HXLINE(3779)													btn1 = false;
            												}
HXDLIN(3779)												if (btn1) {
HXLINE(3781)													 ::Dynamic( ::Dynamic(pack->__Field(HX_("chart",de,9c,b3,45),::hx::paccDynamic))->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic))->__Field(HX_("set",a2,9b,57,00),::hx::paccDynamic)(diff,diffSpeed);
HXLINE(3782)													 ::Dynamic( ::Dynamic(pack->__Field(HX_("chart",de,9c,b3,45),::hx::paccDynamic))->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__Field(HX_("set",a2,9b,57,00),::hx::paccDynamic)(diff,diffNotes);
            												}
            											}
            										}
            										else {
HXLINE(3787)											::haxe::Log_obj::trace((HX_("File not found: ",d7,d9,f9,85) + chartToFind),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),3787,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("addFileTab",18,a5,d9,66)));
            										}
            									}
            								}
HXLINE(3790)								::String chartToFind1 = (parentFolder + HX_("events.json",9d,47,9a,dc));
HXLINE(3791)								if (::sys::FileSystem_obj::exists(chartToFind1)) {
HXLINE(3793)									 ::Dynamic eventsChart = ::backend::Song_obj::parseJSON(::sys::io::File_obj::getContent(chartToFind1),HX_("events",19,4f,6a,96),null());
HXLINE(3794)									if (::hx::IsNotNull( eventsChart )) {
HXLINE(3796)										 ::Dynamic subpack1 = ::states::editors::content::VSlice_obj::_hx_export(eventsChart,null());
HXLINE(3797)										bool btn2;
HXDLIN(3797)										if (::hx::IsNotNull(  ::Dynamic(subpack1->__Field(HX_("chart",de,9c,b3,45),::hx::paccDynamic))->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic) )) {
HXLINE(3797)											btn2 = (( (::Array< ::Dynamic>)( ::Dynamic(subpack1->__Field(HX_("chart",de,9c,b3,45),::hx::paccDynamic))->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) )->length > 0);
            										}
            										else {
HXLINE(3797)											btn2 = false;
            										}
HXDLIN(3797)										if (btn2) {
HXLINE(3799)											int _g1 = 0;
HXDLIN(3799)											::Array< ::Dynamic> _g2 = ( (::Array< ::Dynamic>)( ::Dynamic(subpack1->__Field(HX_("chart",de,9c,b3,45),::hx::paccDynamic))->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) );
HXDLIN(3799)											while((_g1 < _g2->length)){
HXLINE(3799)												 ::Dynamic event = _g2->__get(_g1);
HXDLIN(3799)												_g1 = (_g1 + 1);
HXLINE(3801)												if (::hx::IsNull( event )) {
HXLINE(3801)													continue;
            												}
HXLINE(3802)												( (::Array< ::Dynamic>)( ::Dynamic(pack->__Field(HX_("chart",de,9c,b3,45),::hx::paccDynamic))->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) )->push(event);
            											}
            										}
HXLINE(3805)										( (::Array< ::Dynamic>)( ::Dynamic(pack->__Field(HX_("chart",de,9c,b3,45),::hx::paccDynamic))->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) )->sort(::states::editors::content::VSlice_obj::sortByTime_dyn());
            									}
            								}
HXLINE(3809)								_gthis->fileDialog->openDirectory(HX_("Save V-Slice Chart/Metadata JSONs",93,32,9f,33), ::Dynamic(new _hx_Closure_32(pack,_gthis,songName)),null(),null());
            							}
            							else {
HXLINE(3824)								_gthis->showOutput(HX_("Error: You need atleast one difficulty to export.",db,8c,f3,c6),true);
            							}
            						} catch( ::Dynamic _hx_e) {
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic _g3 = _hx_e;
HXLINE(3826)								 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g3);
HXLINE(3827)								{
HXLINE(3828)									 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(3828)									_gthis1->showOutput((HX_("Error: ",4e,a8,5b,b7) + e->get_message()),true);
HXLINE(3829)									 ::Dynamic btn3 = ::haxe::Log_obj::trace;
HXDLIN(3829)									::Array< ::Dynamic> tmp = e->get_stack();
HXDLIN(3829)									::String btn4;
HXDLIN(3829)									if (::hx::IsNull( tmp )) {
HXLINE(3829)										btn4 = HX_("null",87,9e,0e,49);
            									}
            									else {
HXLINE(3829)										btn4 = ::haxe::_CallStack::CallStack_Impl__obj::toString(tmp);
            									}
HXDLIN(3829)									btn3(btn4,::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),3829,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("addFileTab",18,a5,d9,66)));
            								}
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
HXLINE(3831)						state->close();
            					}
            					HX_END_LOCAL_FUNC0((void))

            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_34, ::Dynamic,pack) HXARGC(2)
            					void _hx_run(::String old,::String cur){
            						HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3846_addFileTab)
HXLINE(3846)						 ::Dynamic(pack->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic))->__SetField(HX_("artist",c7,f2,48,b9),cur,::hx::paccDynamic);
            					}
            					HX_END_LOCAL_FUNC2((void))

            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_35, ::Dynamic,pack) HXARGC(2)
            					void _hx_run(::String old,::String cur){
            						HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3850_addFileTab)
HXLINE(3850)						 ::Dynamic(pack->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic))->__SetField(HX_("charter",cb,68,7b,cf),cur,::hx::paccDynamic);
            					}
            					HX_END_LOCAL_FUNC2((void))

            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_36, ::Dynamic,pack) HXARGC(2)
            					void _hx_run(::String old,::String cur){
            						HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3858_addFileTab)
HXLINE(3859)						 ::Dynamic( ::Dynamic(pack->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic))->__Field(HX_("playData",3e,ba,76,32),::hx::paccDynamic))->__SetField(HX_("difficulties",59,c7,5e,02),cur.split(HX_(",",2c,00,00,00)),::hx::paccDynamic);
HXLINE(3861)						::Array< ::String > diffs = ( (::Array< ::String >)( ::Dynamic( ::Dynamic(pack->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic))->__Field(HX_("playData",3e,ba,76,32),::hx::paccDynamic))->__Field(HX_("difficulties",59,c7,5e,02),::hx::paccDynamic)) );
HXLINE(3862)						{
HXLINE(3862)							int _g_current = 0;
HXDLIN(3862)							::Array< ::String > _g_array = diffs;
HXDLIN(3862)							while((_g_current < _g_array->length)){
HXLINE(3862)								::String _g_value = _g_array->__get(_g_current);
HXDLIN(3862)								_g_current = (_g_current + 1);
HXDLIN(3862)								int _g_key = (_g_current - 1);
HXDLIN(3862)								int num = _g_key;
HXDLIN(3862)								::String diff = _g_value;
HXLINE(3863)								 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(3863)								 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(3863)								diffs[num] = ::StringTools_obj::trim(hideChars->replace(invalidChars->replace(diff,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
            							}
            						}
HXLINE(3865)						while(diffs->contains(HX_("",00,00,00,00))){
HXLINE(3866)							diffs->remove(HX_("",00,00,00,00));
            						}
            					}
            					HX_END_LOCAL_FUNC2((void))

            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3751_addFileTab)
HXLINE(3752)					::String path = ( (::String)( ::Dynamic(pack->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic))->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic)) );
HXDLIN(3752)					 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(3752)					 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(3752)					::String songName = ::StringTools_obj::trim(hideChars->replace(invalidChars->replace(path,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
HXLINE(3753)					::String filePath1 = filePath;
HXDLIN(3753)					::String parentFolder = filePath1.substring(0,(filePath.lastIndexOf(HX_("/",2f,00,00,00),null()) + 1));
HXLINE(3754)					 ::backend::ui::PsychUIInputText difficultiesInput = null();
HXLINE(3756)					int btnX = 640;
HXLINE(3757)					int btnY = 400;
HXLINE(3758)					 ::backend::ui::PsychUIButton btn =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("Save",5d,b7,26,37), ::Dynamic(new _hx_Closure_33(state,_gthis,pack,parentFolder,songName)),null(),null());
HXLINE(3833)					btn->normalStyle->__SetField(HX_("bgColor",5e,81,83,f7),-16744448,::hx::paccDynamic);
HXLINE(3834)					btn->normalStyle->__SetField(HX_("textColor",76,01,4a,e3),-1,::hx::paccDynamic);
HXLINE(3835)					btn->set_cameras(state->get_cameras());
HXLINE(3836)					state->add(btn).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3838)					 ::backend::ui::PsychUIButton btn1 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,(btnX + 100),btnY,HX_("Cancel",9a,61,c8,ec),state->close_dyn(),null(),null());
HXLINE(3839)					btn1->set_cameras(state->get_cameras());
HXLINE(3840)					state->add(btn1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3842)					Float textX = ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(180) ));
HXLINE(3843)					int textY = 360;
HXLINE(3754)					 ::backend::ui::PsychUIInputText artistInput =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,textX,textY,120,( (::String)( ::Dynamic(pack->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic))->__Field(HX_("artist",c7,f2,48,b9),::hx::paccDynamic)) ),8);
HXLINE(3845)					artistInput->set_cameras(state->get_cameras());
HXLINE(3846)					artistInput->onChange =  ::Dynamic(new _hx_Closure_34(pack));
HXLINE(3754)					 ::backend::ui::PsychUIInputText charterInput =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,(textX + 150),textY,120,( (::String)( ::Dynamic(pack->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic))->__Field(HX_("charter",cb,68,7b,cf),::hx::paccDynamic)) ),8);
HXLINE(3849)					charterInput->set_cameras(state->get_cameras());
HXLINE(3850)					charterInput->onChange =  ::Dynamic(new _hx_Closure_35(pack));
HXLINE(3852)					::Array< ::String > diffs = ( (::Array< ::String >)( ::Dynamic( ::Dynamic(pack->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic))->__Field(HX_("playData",3e,ba,76,32),::hx::paccDynamic))->__Field(HX_("difficulties",59,c7,5e,02),::hx::paccDynamic)) );
HXLINE(3853)					bool btn2;
HXDLIN(3853)					if (::hx::IsNotNull( diffs )) {
HXLINE(3853)						btn2 = (diffs->length < 0);
            					}
            					else {
HXLINE(3853)						btn2 = true;
            					}
HXDLIN(3853)					if (btn2) {
HXLINE(3853)						diffs = ::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_257,3);
HXDLIN(3853)						 ::Dynamic( ::Dynamic(pack->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic))->__Field(HX_("playData",3e,ba,76,32),::hx::paccDynamic))->__SetField(HX_("difficulties",59,c7,5e,02),diffs,::hx::paccDynamic);
            					}
HXLINE(3854)					difficultiesInput =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,textX,(textY + 42),160,diffs->join(HX_(", ",74,26,00,00)),8);
HXLINE(3855)					difficultiesInput->set_cameras(state->get_cameras());
HXLINE(3856)					difficultiesInput->set_forceCase(2);
HXLINE(3857)					difficultiesInput->onChange =  ::Dynamic(new _hx_Closure_36(pack));
HXLINE(3869)					 ::flixel::text::FlxText artistTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,artistInput->x,(artistInput->y - ( (Float)(15) )),100,HX_("Artist/Composer:",92,94,ac,ad),null(),null());
HXLINE(3870)					artistTxt->set_cameras(state->get_cameras());
HXLINE(3871)					 ::flixel::text::FlxText charterTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,charterInput->x,(charterInput->y - ( (Float)(15) )),100,HX_("Charter:",2f,05,32,96),null(),null());
HXLINE(3872)					charterTxt->set_cameras(state->get_cameras());
HXLINE(3873)					 ::flixel::text::FlxText difficultiesTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,difficultiesInput->x,(difficultiesInput->y - ( (Float)(15) )),100,HX_("Difficulties:",a1,f6,7f,58),null(),null());
HXLINE(3874)					difficultiesTxt->set_cameras(state->get_cameras());
HXLINE(3875)					state->add(artistTxt).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3876)					state->add(charterTxt).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3877)					state->add(difficultiesTxt).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3878)					state->add(artistInput).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3879)					state->add(charterInput).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3880)					state->add(difficultiesInput).StaticCast<  ::flixel::FlxBasic >();
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3732_addFileTab)
HXLINE(3733)				::String filePath = ::StringTools_obj::replace(_gthis->fileDialog->path,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE(3734)				::String _gthis1 = _gthis->fileDialog->data;
HXDLIN(3734)				::String filePath1 = filePath;
HXDLIN(3734)				 ::Dynamic loadedChart = ::backend::Song_obj::parseJSON(_gthis1,filePath1.substr(filePath.lastIndexOf(HX_("/",2f,00,00,00),null()),null()),null());
HXLINE(3735)				bool btn;
HXDLIN(3735)				if (::hx::IsNotNull( loadedChart )) {
HXLINE(3735)					btn = !(::Reflect_obj::hasField(loadedChart,HX_("song",d5,23,58,4c)));
            				}
            				else {
HXLINE(3735)					btn = true;
            				}
HXDLIN(3735)				if (btn) {
HXLINE(3737)					_gthis->showOutput(HX_("Error: File loaded is not a Psych Engine 0.x.x/FNF 0.2.x.x chart.",f1,bc,80,d8),true);
HXLINE(3738)					return;
            				}
HXLINE(3741)				 ::Dynamic pack = ::states::editors::content::VSlice_obj::_hx_export(loadedChart,null());
HXLINE(3742)				bool btn1;
HXDLIN(3742)				if (::hx::IsNotNull( pack->__Field(HX_("chart",de,9c,b3,45),::hx::paccDynamic) )) {
HXLINE(3742)					btn1 = ::hx::IsNull( pack->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic) );
            				}
            				else {
HXLINE(3742)					btn1 = true;
            				}
HXDLIN(3742)				if (btn1) {
HXLINE(3744)					_gthis->showOutput(HX_("Error: Chart loaded is invalid.",22,f0,70,18),true);
HXLINE(3745)					return;
            				}
HXLINE(3748)				::backend::ClientPrefs_obj::toggleVolumeKeys(false);
HXLINE(3749)				 ::states::editors::ChartingState _gthis2 = _gthis;
HXDLIN(3749)				_gthis2->openSubState( ::states::editors::content::BasePrompt_obj::__alloc( HX_CTX ,null(),null(),HX_("Metadata",8f,a3,cb,19), ::Dynamic(new _hx_Closure_37(_gthis,pack,filePath)),null()));
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3726_addFileTab)
HXLINE(3727)			if (!(_gthis->fileDialog->completed)) {
HXLINE(3727)				return;
            			}
HXLINE(3728)			_gthis->upperBox->set_isMinimized(true);
HXLINE(3729)			_gthis->upperBox->bg->set_visible(false);
HXLINE(3731)			_gthis->fileDialog->open(HX_("song.json",61,c9,23,5f),HX_("Open a Psych Engine Chart JSON",8e,4f,43,8a),null(), ::Dynamic(new _hx_Closure_38(_gthis)),null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_45, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_44, ::states::editors::ChartingState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_43, ::Dynamic,chart, ::states::editors::ChartingState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3905_addFileTab)
HXLINE(3906)					 ::Dynamic metadata =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,_gthis->fileDialog->data)->doParse();
HXLINE(3907)					bool btn;
HXDLIN(3907)					bool btn1;
HXDLIN(3907)					bool btn2;
HXDLIN(3907)					bool btn3;
HXDLIN(3907)					bool btn4;
HXDLIN(3907)					bool btn5;
HXDLIN(3907)					if (::hx::IsNotNull( metadata )) {
HXLINE(3907)						btn5 = ::hx::IsNull( metadata->__Field(HX_("version",18,e7,f1,7c),::hx::paccDynamic) );
            					}
            					else {
HXLINE(3907)						btn5 = true;
            					}
HXDLIN(3907)					if (!(btn5)) {
HXLINE(3907)						btn4 = ::hx::IsNull( metadata->__Field(HX_("playData",3e,ba,76,32),::hx::paccDynamic) );
            					}
            					else {
HXLINE(3907)						btn4 = true;
            					}
HXDLIN(3907)					if (!(btn4)) {
HXLINE(3907)						btn3 = ::hx::IsNull( metadata->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic) );
            					}
            					else {
HXLINE(3907)						btn3 = true;
            					}
HXDLIN(3907)					if (!(btn3)) {
HXLINE(3907)						btn2 = ::hx::IsNull(  ::Dynamic(metadata->__Field(HX_("playData",3e,ba,76,32),::hx::paccDynamic))->__Field(HX_("difficulties",59,c7,5e,02),::hx::paccDynamic) );
            					}
            					else {
HXLINE(3907)						btn2 = true;
            					}
HXDLIN(3907)					if (!(btn2)) {
HXLINE(3907)						btn1 = ::hx::IsNull( metadata->__Field(HX_("timeChanges",76,58,22,3f),::hx::paccDynamic) );
            					}
            					else {
HXLINE(3907)						btn1 = true;
            					}
HXDLIN(3907)					if (!(btn1)) {
HXLINE(3907)						btn = (( (::Array< ::Dynamic>)(metadata->__Field(HX_("timeChanges",76,58,22,3f),::hx::paccDynamic)) )->length < 1);
            					}
            					else {
HXLINE(3907)						btn = true;
            					}
HXDLIN(3907)					if (btn) {
HXLINE(3910)						_gthis->showOutput(HX_("Error: File loaded is not a valid FNF V-Slice metadata.",77,05,93,2a),true);
HXLINE(3911)						return;
            					}
HXLINE(3914)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(3916)						 ::Dynamic pack = ::states::editors::content::VSlice_obj::convertToPsych(chart,metadata);
HXLINE(3917)						if (::hx::IsNotNull( pack->__Field(HX_("difficulties",59,c7,5e,02),::hx::paccDynamic) )) {
            							HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_42, ::Dynamic,pack, ::states::editors::ChartingState,_gthis, ::Dynamic,metadata) HXARGC(0)
            							void _hx_run(){
            								HX_BEGIN_LOCAL_FUNC_S6(::hx::LocalFunc,_hx_Closure_41,::Array< ::String >,path, ::states::editors::ChartingState,_gthis, ::Dynamic,pack,::Array< ::String >,diffs,::String,defaultDiff,::Array< ::Dynamic>,nextChart) HXARGC(0)
            								void _hx_run(){
            									HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3927_addFileTab)
HXLINE(3928)									while((diffs->length > 0)){
HXLINE(3930)										::String diffName = diffs->__get(0);
HXLINE(3931)										diffs->remove(diffName);
HXLINE(3932)										if (!(( ( ::haxe::ds::StringMap)( ::Dynamic(pack->__Field(HX_("difficulties",59,c7,5e,02),::hx::paccDynamic))) )->exists(diffName))) {
HXLINE(3932)											continue;
            										}
HXLINE(3934)										::String diffPostfix;
HXDLIN(3934)										if ((diffName != defaultDiff)) {
HXLINE(3934)											diffPostfix = (HX_("-",2d,00,00,00) + diffName);
            										}
            										else {
HXLINE(3934)											diffPostfix = HX_("",00,00,00,00);
            										}
HXLINE(3935)										 ::Dynamic chartData = ( ( ::haxe::ds::StringMap)( ::Dynamic(pack->__Field(HX_("difficulties",59,c7,5e,02),::hx::paccDynamic))) )->get(diffName);
HXLINE(3936)										::String path1 = ( (::String)(chartData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(3936)										 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(3936)										 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(3936)										::String chartName = ((::StringTools_obj::trim(hideChars->replace(invalidChars->replace(path1,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase() + diffPostfix) + HX_(".json",56,f1,d6,c2));
HXLINE(3937)										 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(3937)										::String btn = (path->__get(0) + chartName);
HXDLIN(3937)										::String btn1 = ::states::editors::content::PsychJsonPrinter_obj::print(chartData,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_262,2));
HXDLIN(3937)										_gthis1->overwriteCheck(btn,chartName,btn1,nextChart->__get(0),true);
HXLINE(3938)										return;
            									}
HXLINE(3941)									if (::hx::IsNotNull( pack->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic) )) {
            										HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_40, ::states::editors::ChartingState,_gthis) HXARGC(0)
            										void _hx_run(){
            											HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3945_addFileTab)
HXLINE(3945)											if (_gthis->overwriteSavedSomething) {
HXLINE(3946)												_gthis->showOutput(((HX_("Files saved successfully to: ",98,2f,af,8d) + _gthis->fileDialog->path) + HX_("!",21,00,00,00)),null());
            											}
            										}
            										HX_END_LOCAL_FUNC0((void))

HXLINE(3943)										 ::states::editors::ChartingState _gthis2 = _gthis;
HXDLIN(3943)										::String btn2 = (path->__get(0) + HX_("events.json",9d,47,9a,dc));
HXDLIN(3943)										_gthis2->overwriteCheck(btn2,HX_("events.json",9d,47,9a,dc),::states::editors::content::PsychJsonPrinter_obj::print( ::Dynamic(pack->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)),::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_264,1)), ::Dynamic(new _hx_Closure_40(_gthis)),true);
            									}
            									else {
HXLINE(3949)										if (_gthis->overwriteSavedSomething) {
HXLINE(3950)											_gthis->showOutput(((HX_("Files saved successfully to: ",98,2f,af,8d) + _gthis->fileDialog->path) + HX_("!",21,00,00,00)),null());
            										}
            									}
            								}
            								HX_END_LOCAL_FUNC0((void))

            								HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3920_addFileTab)
HXLINE(3921)								::Array< ::String > path = ::Array_obj< ::String >::__new(1)->init(0,::StringTools_obj::replace(_gthis->fileDialog->path,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00)));
HXLINE(3922)								if (!(::StringTools_obj::endsWith(path->__get(0),HX_("/",2f,00,00,00)))) {
HXLINE(3922)									::Array< ::String > path1 = path;
HXDLIN(3922)									int btn = 0;
HXDLIN(3922)									path1[btn] = (path1->__get(btn) + HX_("/",2f,00,00,00));
            								}
HXLINE(3924)								::Array< ::String > diffs = ( (::Array< ::String >)( ::Dynamic(metadata->__Field(HX_("playData",3e,ba,76,32),::hx::paccDynamic))->__Field(HX_("difficulties",59,c7,5e,02),::hx::paccDynamic)) )->copy();
HXLINE(3925)								 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(3925)								 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(3925)								::String defaultDiff = ::StringTools_obj::trim(hideChars->replace(invalidChars->replace(::backend::Difficulty_obj::defaultDifficulty,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
HXLINE(3926)								::Array< ::Dynamic> nextChart = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN(3926)								nextChart[0] =  ::Dynamic(new _hx_Closure_41(path,_gthis,pack,diffs,defaultDiff,nextChart));
HXLINE(3953)								_gthis->overwriteSavedSomething = false;
HXLINE(3954)								nextChart->__get(0)();
            							}
            							HX_END_LOCAL_FUNC0((void))

HXLINE(3919)							_gthis->fileDialog->openDirectory(HX_("Save Converted Psych JSONs",55,25,31,da), ::Dynamic(new _hx_Closure_42(pack,_gthis,metadata)),null(),null());
            						}
            						else {
HXLINE(3957)							_gthis->showOutput(HX_("Error: No difficulties found.",22,17,6f,4d),null());
            						}
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g = _hx_e;
HXLINE(3959)							 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE(3960)							{
HXLINE(3961)								 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(3961)								_gthis1->showOutput((HX_("Error: ",4e,a8,5b,b7) + e->get_message()),true);
HXLINE(3962)								 ::Dynamic btn6 = ::haxe::Log_obj::trace;
HXDLIN(3962)								::Array< ::Dynamic> tmp = e->get_stack();
HXDLIN(3962)								::String btn7;
HXDLIN(3962)								if (::hx::IsNull( tmp )) {
HXLINE(3962)									btn7 = HX_("null",87,9e,0e,49);
            								}
            								else {
HXLINE(3962)									btn7 = ::haxe::_CallStack::CallStack_Impl__obj::toString(tmp);
            								}
HXDLIN(3962)								btn6(btn7,::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),3962,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("addFileTab",18,a5,d9,66)));
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3896_addFileTab)
HXLINE(3897)				 ::Dynamic chart =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,_gthis->fileDialog->data)->doParse();
HXLINE(3898)				bool btn;
HXDLIN(3898)				bool btn1;
HXDLIN(3898)				bool btn2;
HXDLIN(3898)				if (::hx::IsNotNull( chart )) {
HXLINE(3898)					btn2 = ::hx::IsNull( chart->__Field(HX_("version",18,e7,f1,7c),::hx::paccDynamic) );
            				}
            				else {
HXLINE(3898)					btn2 = true;
            				}
HXDLIN(3898)				if (!(btn2)) {
HXLINE(3898)					btn1 = ::hx::IsNull( chart->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic) );
            				}
            				else {
HXLINE(3898)					btn1 = true;
            				}
HXDLIN(3898)				if (!(btn1)) {
HXLINE(3898)					btn = ::hx::IsNull( chart->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic) );
            				}
            				else {
HXLINE(3898)					btn = true;
            				}
HXDLIN(3898)				if (btn) {
HXLINE(3900)					_gthis->showOutput(HX_("Error: File loaded is not a valid FNF V-Slice chart.",f8,8a,0e,95),true);
HXLINE(3901)					return;
            				}
HXLINE(3904)				_gthis->fileDialog->open(HX_("metadata.json",87,b7,14,5a),HX_("Open a V-Slice Metadata file",53,26,9b,6b),null(), ::Dynamic(new _hx_Closure_43(chart,_gthis)),null(),null());
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3890_addFileTab)
HXLINE(3891)			if (!(_gthis->fileDialog->completed)) {
HXLINE(3891)				return;
            			}
HXLINE(3892)			_gthis->upperBox->set_isMinimized(true);
HXLINE(3893)			_gthis->upperBox->bg->set_visible(false);
HXLINE(3895)			_gthis->fileDialog->open(HX_("chart.json",b8,ef,c7,63),HX_("Open a V-Slice Chart file",b8,cb,fa,7c),null(), ::Dynamic(new _hx_Closure_44(_gthis)),null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_47, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_46, ::states::editors::ChartingState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3978_addFileTab)
HXLINE(3979)				 ::Dynamic oldSong = ::states::PlayState_obj::SONG;
HXLINE(3980)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(3982)					::String filePath = ::StringTools_obj::replace(_gthis->fileDialog->path,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE(3983)					int filePath1 = (filePath.lastIndexOf(HX_("/",2f,00,00,00),null()) + 1);
HXDLIN(3983)					filePath = filePath.substring(filePath1,filePath.lastIndexOf(HX_(".",2e,00,00,00),null()));
HXLINE(3985)					 ::Dynamic loadedChart = ::backend::Song_obj::parseJSON(_gthis->fileDialog->data,filePath,HX_("",00,00,00,00));
HXLINE(3986)					bool btn;
HXDLIN(3986)					if (::hx::IsNotNull( loadedChart )) {
HXLINE(3986)						btn = !(::Reflect_obj::hasField(loadedChart,HX_("song",d5,23,58,4c)));
            					}
            					else {
HXLINE(3986)						btn = true;
            					}
HXDLIN(3986)					if (btn) {
HXLINE(3988)						_gthis->showOutput(HX_("Error: File loaded is not a Psych Engine 0.x.x/FNF 0.2.x.x chart.",f1,bc,80,d8),true);
HXLINE(3989)						return;
            					}
HXLINE(3992)					::String fmt = ( (::String)(loadedChart->__Field(HX_("format",37,8f,8e,fd),::hx::paccDynamic)) );
HXLINE(3993)					bool btn1;
HXDLIN(3993)					if (::hx::IsNotNull( fmt )) {
HXLINE(3993)						btn1 = (fmt.length < 1);
            					}
            					else {
HXLINE(3993)						btn1 = true;
            					}
HXDLIN(3993)					if (btn1) {
HXLINE(3994)						fmt = (loadedChart->__SetField(HX_("format",37,8f,8e,fd),HX_("unknown",8a,23,7b,e1),::hx::paccDynamic));
            					}
HXLINE(3996)					if (!(::StringTools_obj::startsWith(fmt,HX_("psych_v1",bf,0a,17,5b)))) {
HXLINE(3998)						loadedChart->__SetField(HX_("format",37,8f,8e,fd),HX_("psych_v1_convert",33,b9,d0,ee),::hx::paccDynamic);
HXLINE(3999)						::backend::Song_obj::convert(loadedChart);
HXLINE(4000)						::String _gthis1 = _gthis->fileDialog->path;
HXDLIN(4000)						::sys::io::File_obj::saveContent(_gthis1,::states::editors::content::PsychJsonPrinter_obj::print(loadedChart,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_269,2)));
HXLINE(4001)						_gthis->showOutput(((((HX_("Updated \"",dd,02,c4,24) + filePath) + HX_("\" from format \"",f1,47,13,b9)) + fmt) + HX_("\" to \"psych_v1\" successfully!",e2,0a,6f,c1)),null());
            					}
            					else {
HXLINE(4003)						_gthis->showOutput(((HX_("Chart is already up-to-date! Format: \"",dc,63,a7,06) + fmt) + HX_("\"",22,00,00,00)),true);
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE(4005)						 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE(4006)						{
HXLINE(4007)							 ::states::editors::ChartingState _gthis2 = _gthis;
HXDLIN(4007)							_gthis2->showOutput((HX_("Error: ",4e,a8,5b,b7) + e->get_message()),true);
HXLINE(4008)							 ::Dynamic btn2 = ::haxe::Log_obj::trace;
HXDLIN(4008)							::Array< ::Dynamic> tmp = e->get_stack();
HXDLIN(4008)							::String btn3;
HXDLIN(4008)							if (::hx::IsNull( tmp )) {
HXLINE(4008)								btn3 = HX_("null",87,9e,0e,49);
            							}
            							else {
HXLINE(4008)								btn3 = ::haxe::_CallStack::CallStack_Impl__obj::toString(tmp);
            							}
HXDLIN(4008)							btn2(btn3,::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),4008,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("addFileTab",18,a5,d9,66)));
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3972_addFileTab)
HXLINE(3973)			if (!(_gthis->fileDialog->completed)) {
HXLINE(3973)				return;
            			}
HXLINE(3974)			_gthis->upperBox->set_isMinimized(true);
HXLINE(3975)			_gthis->upperBox->bg->set_visible(false);
HXLINE(3977)			_gthis->fileDialog->open(null(),null(),null(), ::Dynamic(new _hx_Closure_46(_gthis)),null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_48) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4029_addFileTab)
HXLINE(4030)			::states::PlayState_obj::chartingMode = false;
HXLINE(4031)			::backend::MusicBeatState_obj::switchState( ::states::editors::MasterEditorMenu_obj::__alloc( HX_CTX ));
HXLINE(4032)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd btn = ::flixel::FlxG_obj::sound;
HXDLIN(4032)			btn->playMusic(::backend::Paths_obj::returnSound((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)),null(),true,null()),null(),null(),null());
HXLINE(4033)			::flixel::FlxG_obj::mouse->set_visible(false);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3314_addFileTab)
HXDLIN(3314)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3315)		 ::backend::ui::PsychUITab tab = this->upperBox->getTab(HX_("File",9c,fa,94,2e));
HXLINE(3316)		 ::flixel::group::FlxTypedSpriteGroup tab_group = tab->menu;
HXLINE(3317)		Float btnX = (tab->x - this->upperBox->x);
HXLINE(3318)		int btnY = 1;
HXLINE(3319)		int btnWid = ::Std_obj::_hx_int(tab->get_width());
HXLINE(3321)		 ::backend::ui::PsychUIButton btn =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  New",40,ec,34,82), ::Dynamic(new _hx_Closure_1(_gthis)),btnWid,null());
HXLINE(3333)		btn->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(3334)		tab_group->add(btn).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3336)		btnY = (btnY + 1);
HXLINE(3337)		btnY = (btnY + 20);
HXLINE(3338)		 ::backend::ui::PsychUIButton btn1 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Open Chart...",e6,14,3a,ab), ::Dynamic(new _hx_Closure_4(_gthis)),btnWid,null());
HXLINE(3375)		btn1->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(3376)		tab_group->add(btn1).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3378)		btnY = (btnY + 20);
HXLINE(3379)		 ::backend::ui::PsychUIButton btn2 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Open Autosave...",ec,b3,a5,f7), ::Dynamic(new _hx_Closure_9(_gthis)),btnWid,null());
HXLINE(3465)		btn2->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(3466)		tab_group->add(btn2).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3468)		if (::states::editors::ChartingState_obj::SHOW_EVENT_COLUMN) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_14, ::states::editors::ChartingState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_13, ::states::editors::ChartingState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3479_addFileTab)
HXLINE(3479)					try {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_12, ::states::editors::ChartingState,_gthis,::cpp::VirtualArray,loadedEvents) HXARGC(1)
            						void _hx_run( ::states::editors::content::BasePrompt state){
            							HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_10, ::states::editors::content::BasePrompt,state, ::states::editors::ChartingState,_gthis,::cpp::VirtualArray,loadedEvents) HXARGC(0)
            							void _hx_run(){
            								HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3501_addFileTab)
HXLINE(3502)								{
HXLINE(3502)									int _g = 0;
HXDLIN(3502)									::Array< ::Dynamic> _g1 = _gthis->events;
HXDLIN(3502)									while((_g < _g1->length)){
HXLINE(3502)										 ::states::editors::content::EventMetaNote event = _g1->__get(_g).StaticCast<  ::states::editors::content::EventMetaNote >();
HXDLIN(3502)										_g = (_g + 1);
HXLINE(3504)										if (::hx::IsNotNull( event )) {
HXLINE(3506)											event->destroy();
HXLINE(3507)											_gthis->selectedNotes->remove(event);
            										}
            									}
            								}
HXLINE(3510)								_gthis->undoActions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3511)								_gthis->events = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3513)								{
HXLINE(3513)									int _g2 = 0;
HXDLIN(3513)									while((_g2 < loadedEvents->get_length())){
HXLINE(3513)										 ::Dynamic event1 = loadedEvents->__get(_g2);
HXDLIN(3513)										_g2 = (_g2 + 1);
HXLINE(3514)										::Array< ::Dynamic> _gthis1 = _gthis->events;
HXDLIN(3514)										_gthis1->push(_gthis->createEvent(event1));
            									}
            								}
HXLINE(3516)								_gthis->softReloadNotes(null());
HXLINE(3517)								state->close();
HXLINE(3518)								_gthis->showOutput(HX_("Events loaded successfully!",c6,fd,c4,09),null());
            							}
            							HX_END_LOCAL_FUNC0((void))

            							HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_11, ::states::editors::content::BasePrompt,state, ::states::editors::ChartingState,_gthis,::cpp::VirtualArray,loadedEvents) HXARGC(0)
            							void _hx_run(){
            								HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3528_addFileTab)
HXLINE(3529)								{
HXLINE(3529)									int _g = 0;
HXDLIN(3529)									while((_g < loadedEvents->get_length())){
HXLINE(3529)										 ::Dynamic event = loadedEvents->__get(_g);
HXDLIN(3529)										_g = (_g + 1);
HXLINE(3530)										::Array< ::Dynamic> _gthis1 = _gthis->events;
HXDLIN(3530)										_gthis1->push(_gthis->createEvent(event));
            									}
            								}
HXLINE(3532)								_gthis->softReloadNotes(null());
HXLINE(3533)								state->close();
HXLINE(3534)								_gthis->showOutput(HX_("Events added successfully!",13,29,d1,e2),null());
            							}
            							HX_END_LOCAL_FUNC0((void))

            							HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3498_addFileTab)
HXLINE(3499)							int btnY = 390;
HXLINE(3500)							 ::backend::ui::PsychUIButton btn =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,btnY,HX_("Replace All",f5,8e,4d,23), ::Dynamic(new _hx_Closure_10(state,_gthis,loadedEvents)),null(),null());
HXLINE(3520)							btn->normalStyle->__SetField(HX_("bgColor",5e,81,83,f7),-65536,::hx::paccDynamic);
HXLINE(3521)							btn->normalStyle->__SetField(HX_("textColor",76,01,4a,e3),-1,::hx::paccDynamic);
HXLINE(3522)							{
HXLINE(3522)								int axes = 1;
HXDLIN(3522)								bool btn1;
HXDLIN(3522)								if ((axes != 1)) {
HXLINE(3522)									btn1 = (axes == 17);
            								}
            								else {
HXLINE(3522)									btn1 = true;
            								}
HXDLIN(3522)								if (btn1) {
HXLINE(3522)									int btn2 = ::flixel::FlxG_obj::width;
HXDLIN(3522)									btn->set_x(((( (Float)(btn2) ) - btn->get_width()) / ( (Float)(2) )));
            								}
HXDLIN(3522)								bool btn3;
HXDLIN(3522)								if ((axes != 16)) {
HXLINE(3522)									btn3 = (axes == 17);
            								}
            								else {
HXLINE(3522)									btn3 = true;
            								}
HXDLIN(3522)								if (btn3) {
HXLINE(3522)									int btn4 = ::flixel::FlxG_obj::height;
HXDLIN(3522)									btn->set_y(((( (Float)(btn4) ) - btn->get_height()) / ( (Float)(2) )));
            								}
            							}
HXLINE(3523)							btn->set_x((btn->x - ( (Float)(125) )));
HXLINE(3524)							btn->set_cameras(state->get_cameras());
HXLINE(3525)							state->add(btn).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3527)							 ::backend::ui::PsychUIButton btn5 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,btnY,HX_("Add",01,aa,31,00), ::Dynamic(new _hx_Closure_11(state,_gthis,loadedEvents)),null(),null());
HXLINE(3536)							{
HXLINE(3536)								int axes1 = 1;
HXDLIN(3536)								bool btn6;
HXDLIN(3536)								if ((axes1 != 1)) {
HXLINE(3536)									btn6 = (axes1 == 17);
            								}
            								else {
HXLINE(3536)									btn6 = true;
            								}
HXDLIN(3536)								if (btn6) {
HXLINE(3536)									int btn7 = ::flixel::FlxG_obj::width;
HXDLIN(3536)									btn5->set_x(((( (Float)(btn7) ) - btn5->get_width()) / ( (Float)(2) )));
            								}
HXDLIN(3536)								bool btn8;
HXDLIN(3536)								if ((axes1 != 16)) {
HXLINE(3536)									btn8 = (axes1 == 17);
            								}
            								else {
HXLINE(3536)									btn8 = true;
            								}
HXDLIN(3536)								if (btn8) {
HXLINE(3536)									int btn9 = ::flixel::FlxG_obj::height;
HXDLIN(3536)									btn5->set_y(((( (Float)(btn9) ) - btn5->get_height()) / ( (Float)(2) )));
            								}
            							}
HXLINE(3537)							btn5->set_cameras(state->get_cameras());
HXLINE(3538)							state->add(btn5).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3540)							 ::backend::ui::PsychUIButton btn10 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,btnY,HX_("Cancel",9a,61,c8,ec),state->close_dyn(),null(),null());
HXLINE(3541)							{
HXLINE(3541)								int axes2 = 1;
HXDLIN(3541)								bool btn11;
HXDLIN(3541)								if ((axes2 != 1)) {
HXLINE(3541)									btn11 = (axes2 == 17);
            								}
            								else {
HXLINE(3541)									btn11 = true;
            								}
HXDLIN(3541)								if (btn11) {
HXLINE(3541)									int btn12 = ::flixel::FlxG_obj::width;
HXDLIN(3541)									btn10->set_x(((( (Float)(btn12) ) - btn10->get_width()) / ( (Float)(2) )));
            								}
HXDLIN(3541)								bool btn13;
HXDLIN(3541)								if ((axes2 != 16)) {
HXLINE(3541)									btn13 = (axes2 == 17);
            								}
            								else {
HXLINE(3541)									btn13 = true;
            								}
HXDLIN(3541)								if (btn13) {
HXLINE(3541)									int btn14 = ::flixel::FlxG_obj::height;
HXDLIN(3541)									btn10->set_y(((( (Float)(btn14) ) - btn10->get_height()) / ( (Float)(2) )));
            								}
            							}
HXLINE(3542)							btn10->set_x((btn10->x + 125));
HXLINE(3543)							btn10->set_cameras(state->get_cameras());
HXLINE(3544)							state->add(btn10).StaticCast<  ::flixel::FlxBasic >();
            						}
            						HX_END_LOCAL_FUNC1((void))

            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(3481)						::String filePath = ::StringTools_obj::replace(_gthis->fileDialog->path,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE(3482)						::String _gthis1 = _gthis->fileDialog->data;
HXDLIN(3482)						 ::Dynamic eventsFile = ::backend::Song_obj::parseJSON(_gthis1,filePath.substr(filePath.lastIndexOf(HX_("/",2f,00,00,00),null()),null()),null());
HXLINE(3483)						bool btn;
HXDLIN(3483)						bool btn1;
HXDLIN(3483)						if (::hx::IsNotNull( eventsFile )) {
HXLINE(3483)							btn1 = ::Reflect_obj::hasField(eventsFile,HX_("scrollSpeed",3a,e0,46,cb));
            						}
            						else {
HXLINE(3483)							btn1 = true;
            						}
HXDLIN(3483)						if (!(btn1)) {
HXLINE(3483)							btn = ::hx::IsNull( eventsFile->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic) );
            						}
            						else {
HXLINE(3483)							btn = true;
            						}
HXDLIN(3483)						if (btn) {
HXLINE(3485)							_gthis->showOutput(HX_("Error: File loaded is not a Psych Engine chart/events file.",b8,a5,7a,c2),true);
HXLINE(3486)							return;
            						}
HXLINE(3489)						::cpp::VirtualArray loadedEvents = ( (::cpp::VirtualArray)(eventsFile->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) );
HXLINE(3490)						if ((loadedEvents->get_length() < 1)) {
HXLINE(3492)							_gthis->showOutput(HX_("Events file loaded is empty.",99,f2,f4,95),true);
HXLINE(3493)							return;
            						}
HXLINE(3496)						 ::states::editors::ChartingState _gthis2 = _gthis;
HXDLIN(3496)						_gthis2->openSubState( ::states::editors::content::BasePrompt_obj::__alloc( HX_CTX ,null(),null(),HX_("Events Found! Choose an action.",34,ff,37,75), ::Dynamic(new _hx_Closure_12(_gthis,loadedEvents)),null()));
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g = _hx_e;
HXLINE(3548)							 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE(3549)							{
HXLINE(3550)								 ::states::editors::ChartingState _gthis3 = _gthis;
HXDLIN(3550)								_gthis3->showOutput((HX_("Error: ",4e,a8,5b,b7) + e->get_message()),true);
HXLINE(3551)								 ::Dynamic btn2 = ::haxe::Log_obj::trace;
HXDLIN(3551)								::Array< ::Dynamic> tmp = e->get_stack();
HXDLIN(3551)								::String btn3;
HXDLIN(3551)								if (::hx::IsNull( tmp )) {
HXLINE(3551)									btn3 = HX_("null",87,9e,0e,49);
            								}
            								else {
HXLINE(3551)									btn3 = ::haxe::_CallStack::CallStack_Impl__obj::toString(tmp);
            								}
HXDLIN(3551)								btn2(btn3,::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),3551,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("addFileTab",18,a5,d9,66)));
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3472_addFileTab)
HXLINE(3473)				if (!(_gthis->fileDialog->completed)) {
HXLINE(3473)					return;
            				}
HXLINE(3474)				_gthis->upperBox->set_isMinimized(true);
HXLINE(3475)				_gthis->upperBox->bg->set_visible(false);
HXLINE(3477)				_gthis->fileDialog->open(null(),null(),null(), ::Dynamic(new _hx_Closure_13(_gthis)),null(),null());
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(3470)			btnY = (btnY + 20);
HXLINE(3471)			 ::backend::ui::PsychUIButton btn3 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Open Events...",9f,66,c1,28), ::Dynamic(new _hx_Closure_14(_gthis)),btnWid,null());
HXLINE(3555)			btn3->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(3556)			tab_group->add(btn3).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(3559)		btnY = (btnY + 1);
HXLINE(3560)		btnY = (btnY + 20);
HXLINE(3561)		 ::backend::ui::PsychUIButton btn4 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Save",5d,d3,64,6f), ::Dynamic(new _hx_Closure_15(_gthis)),btnWid,null());
HXLINE(3569)		btn4->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(3570)		tab_group->add(btn4).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3572)		btnY = (btnY + 20);
HXLINE(3573)		 ::backend::ui::PsychUIButton btn5 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Save as...",39,a1,01,50), ::Dynamic(new _hx_Closure_16(_gthis)),btnWid,null());
HXLINE(3581)		btn5->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(3582)		tab_group->add(btn5).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3584)		if (::states::editors::ChartingState_obj::SHOW_EVENT_COLUMN) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_19, ::states::editors::ChartingState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_17, ::states::editors::ChartingState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3594_addFileTab)
HXLINE(3594)					_gthis->showOutput((HX_("Events saved successfully to: ",7a,ba,05,ec) + _gthis->fileDialog->path),null());
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_18, ::states::editors::ChartingState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3595_addFileTab)
HXLINE(3595)					_gthis->showOutput(HX_("Error on saving events!",eb,45,ff,bd),true);
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_3588_addFileTab)
HXLINE(3589)				if (!(_gthis->fileDialog->completed)) {
HXLINE(3589)					return;
            				}
HXLINE(3590)				_gthis->upperBox->set_isMinimized(true);
HXLINE(3592)				_gthis->updateChartData();
HXLINE(3593)				 ::states::editors::content::FileDialogHandler _gthis1 = _gthis->fileDialog;
HXDLIN(3593)				_gthis1->save(HX_("events.json",9d,47,9a,dc),::states::editors::content::PsychJsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("events",19,4f,6a,96), ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)))
            					->setFixed(1,HX_("format",37,8f,8e,fd),HX_("psych_v1",bf,0a,17,5b))),::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_281,1)), ::Dynamic(new _hx_Closure_17(_gthis)),null(), ::Dynamic(new _hx_Closure_18(_gthis)));
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(3586)			btnY = (btnY + 20);
HXLINE(3587)			 ::backend::ui::PsychUIButton btn6 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Save Events...",d2,db,13,f3), ::Dynamic(new _hx_Closure_19(_gthis)),btnWid,null());
HXLINE(3597)			btn6->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(3598)			tab_group->add(btn6).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(3601)		btnY = (btnY + 1);
HXLINE(3602)		btnY = (btnY + 20);
HXLINE(3603)		 ::backend::ui::PsychUIButton btn7 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Reload Chart",d7,dc,ae,19), ::Dynamic(new _hx_Closure_21(_gthis)),btnWid,null());
HXLINE(3635)		btn7->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(3636)		tab_group->add(btn7).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3638)		btnY = (btnY + 1);
HXLINE(3639)		btnY = (btnY + 20);
HXLINE(3640)		 ::backend::ui::PsychUIButton btn8 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Save (V-Slice)...",1b,86,77,d8), ::Dynamic(new _hx_Closure_29(_gthis)),btnWid,null());
HXLINE(3721)		btn8->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(3722)		tab_group->add(btn8).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3724)		btnY = (btnY + 20);
HXLINE(3725)		 ::backend::ui::PsychUIButton btn9 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Psych to V-Slice...",d3,11,ab,dd), ::Dynamic(new _hx_Closure_39(_gthis)),btnWid,null());
HXLINE(3885)		btn9->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(3886)		tab_group->add(btn9).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3888)		btnY = (btnY + 20);
HXLINE(3889)		 ::backend::ui::PsychUIButton btn10 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  V-Slice to Psych...",13,a7,53,e6), ::Dynamic(new _hx_Closure_45(_gthis)),btnWid,null());
HXLINE(3967)		btn10->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(3968)		tab_group->add(btn10).StaticCast<  ::flixel::FlxSprite >();
HXLINE(3970)		btnY = (btnY + 20);
HXLINE(3971)		 ::backend::ui::PsychUIButton btn11 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Update (Legacy)...",ff,4b,b8,9c), ::Dynamic(new _hx_Closure_47(_gthis)),btnWid,null());
HXLINE(4012)		btn11->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(4013)		tab_group->add(btn11).StaticCast<  ::flixel::FlxSprite >();
HXLINE(4015)		btnY = (btnY + 1);
HXLINE(4016)		btnY = (btnY + 20);
HXLINE(4017)		 ::backend::ui::PsychUIButton btn12 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Preview (F12)",92,53,da,ee),this->openEditorPlayState_dyn(),btnWid,null());
HXLINE(4018)		btn12->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(4019)		tab_group->add(btn12).StaticCast<  ::flixel::FlxSprite >();
HXLINE(4021)		btnY = (btnY + 20);
HXLINE(4022)		 ::backend::ui::PsychUIButton btn13 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Playtest (Enter)",9f,fc,7f,f8),this->goToPlayState_dyn(),btnWid,null());
HXLINE(4023)		btn13->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(4024)		tab_group->add(btn13).StaticCast<  ::flixel::FlxSprite >();
HXLINE(4026)		btnY = (btnY + 1);
HXLINE(4027)		btnY = (btnY + 20);
HXLINE(4028)		 ::backend::ui::PsychUIButton btn14 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Exit",3e,3f,35,66), ::Dynamic(new _hx_Closure_48()),btnWid,null());
HXLINE(4035)		btn14->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(4036)		tab_group->add(btn14).StaticCast<  ::flixel::FlxSprite >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addFileTab,(void))

void ChartingState_obj::addEditTab(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4060_addEditTab)
HXLINE(4061)			::Array< ::Dynamic> sel = _gthis->selectedNotes;
HXLINE(4062)			_gthis->selectedNotes = _gthis->curRenderedNotes->members->copy();
HXLINE(4063)			 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(4063)			_gthis1->addUndoAction(HX_("Select Note",96,ff,25,4b), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("current",39,9c,e3,cb),_gthis->selectedNotes->copy())
            				->setFixed(1,HX_("old",a7,98,54,00),sel)));
HXLINE(4064)			_gthis->onSelectNote();
HXLINE(4065)			::haxe::Log_obj::trace((HX_("Notes selected: ",60,a7,de,70) + _gthis->selectedNotes->length),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),4065,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("addEditTab",4a,d6,31,8d)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::states::editors::ChartingState,_gthis) HXARGC(1)
            			void _hx_run( ::states::editors::content::BasePrompt state){
            				HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_2,::Array< ::Dynamic>,timeStepper, ::states::editors::ChartingState,_gthis,::Array< ::Dynamic>,checkbox) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4115_addEditTab)
HXLINE(4116)					_gthis->autoSaveTime = ( (Float)(0) );
HXLINE(4117)					checkbox->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->set_checked(true);
HXLINE(4118)					_gthis->autoSaveCap = ( (int)((_gthis->chartEditorSave->data->__SetField(HX_("autoSave",4c,7a,73,2f),::Std_obj::_hx_int(timeStepper->__get(0).StaticCast<  ::backend::ui::PsychUINumericStepper >()->value),::hx::paccDynamic))) );
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_3,::Array< ::Dynamic>,timeStepper, ::states::editors::ChartingState,_gthis,::Array< ::Dynamic>,checkbox) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4122_addEditTab)
HXLINE(4123)					_gthis->autoSaveTime = ( (Float)(0) );
HXLINE(4124)					 ::Dynamic _hx_tmp;
HXDLIN(4124)					if (checkbox->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->checked) {
HXLINE(4124)						_hx_tmp = ::Std_obj::_hx_int(timeStepper->__get(0).StaticCast<  ::backend::ui::PsychUINumericStepper >()->value);
            					}
            					else {
HXLINE(4124)						_hx_tmp = 0;
            					}
HXDLIN(4124)					_gthis->autoSaveCap = ( (int)((_gthis->chartEditorSave->data->__SetField(HX_("autoSave",4c,7a,73,2f),_hx_tmp,::hx::paccDynamic))) );
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_4, ::states::editors::ChartingState,_gthis,::Array< ::Dynamic>,checkbox, ::backend::ui::PsychUINumericStepper,maxFileStepper) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4130_addEditTab)
HXLINE(4131)					_gthis->autoSaveTime = ( (Float)(0) );
HXLINE(4132)					checkbox->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->set_checked(true);
HXLINE(4133)					_gthis->chartEditorSave->data->__SetField(HX_("backupLimit",99,07,44,7e),(_gthis->backupLimit = ::Std_obj::_hx_int(maxFileStepper->value)),::hx::paccDynamic);
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4106_addEditTab)
HXLINE(4107)				Float state1 = state->bg->x;
HXDLIN(4107)				Float btn = ((state1 + state->bg->get_width()) - ( (Float)(40) ));
HXDLIN(4107)				 ::backend::ui::PsychUIButton btn1 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btn,state->bg->y,HX_("X",58,00,00,00),state->close_dyn(),40,null());
HXLINE(4108)				btn1->set_cameras(state->get_cameras());
HXLINE(4109)				state->add(btn1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4111)				::Array< ::Dynamic> checkbox = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE(4112)				::Array< ::Dynamic> timeStepper = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE(4114)				timeStepper[0] =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,(state->bg->x + 50),(state->bg->y + 90),1,_gthis->autoSaveCap,1,30,0,null(),null());
HXLINE(4115)				timeStepper->__get(0).StaticCast<  ::backend::ui::PsychUINumericStepper >()->onValueChange =  ::Dynamic(new _hx_Closure_2(timeStepper,_gthis,checkbox));
HXLINE(4120)				 ::backend::ui::PsychUINumericStepper timeStepper1 = timeStepper->__get(0).StaticCast<  ::backend::ui::PsychUINumericStepper >();
HXDLIN(4120)				timeStepper1->set_cameras(state->get_cameras());
HXLINE(4122)				checkbox[0] =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,(timeStepper->__get(0).StaticCast<  ::backend::ui::PsychUINumericStepper >()->x + 80),timeStepper->__get(0).StaticCast<  ::backend::ui::PsychUINumericStepper >()->y,HX_("Enabled",61,2c,82,4b),60, ::Dynamic(new _hx_Closure_3(timeStepper,_gthis,checkbox)));
HXLINE(4126)				checkbox->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->set_checked((_gthis->autoSaveCap > 0));
HXLINE(4127)				 ::backend::ui::PsychUICheckBox checkbox1 = checkbox->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >();
HXDLIN(4127)				checkbox1->set_cameras(state->get_cameras());
HXLINE(4129)				 ::backend::ui::PsychUINumericStepper maxFileStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,(checkbox->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->x + 140),checkbox->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->y,1,_gthis->backupLimit,0,50,0,null(),null());
HXLINE(4130)				maxFileStepper->onValueChange =  ::Dynamic(new _hx_Closure_4(_gthis,checkbox,maxFileStepper));
HXLINE(4135)				 ::backend::ui::PsychUINumericStepper maxFileStepper1 = maxFileStepper;
HXDLIN(4135)				maxFileStepper1->set_cameras(state->get_cameras());
HXLINE(4137)				 ::flixel::text::FlxText txt1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,timeStepper->__get(0).StaticCast<  ::backend::ui::PsychUINumericStepper >()->x,(timeStepper->__get(0).StaticCast<  ::backend::ui::PsychUINumericStepper >()->y - ( (Float)(15) )),100,HX_("Time (in minutes):",ca,1d,c0,eb),null(),null());
HXLINE(4138)				txt1->set_cameras(state->get_cameras());
HXLINE(4139)				 ::flixel::text::FlxText txt2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,maxFileStepper->x,(maxFileStepper->y - ( (Float)(15) )),100,HX_("File Limit:",c3,51,59,fd),null(),null());
HXLINE(4140)				txt2->set_cameras(state->get_cameras());
HXLINE(4142)				state->add(txt1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4143)				state->add(txt2).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4144)				state->add(checkbox->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4145)				state->add(timeStepper->__get(0).StaticCast<  ::backend::ui::PsychUINumericStepper >()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4146)				state->add(maxFileStepper).StaticCast<  ::flixel::FlxBasic >();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4101_addEditTab)
HXLINE(4102)			_gthis->upperBox->set_isMinimized(true);
HXLINE(4103)			_gthis->upperBox->bg->set_visible(false);
HXLINE(4104)			 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(4104)			_gthis1->openSubState( ::states::editors::content::BasePrompt_obj::__alloc( HX_CTX ,400,160,HX_("Autosave Settings",57,a5,1a,7a), ::Dynamic(new _hx_Closure_5(_gthis)),null()));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::states::editors::ChartingState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4159_addEditTab)
HXLINE(4160)				_gthis->resetSelectedNotes();
HXLINE(4161)				 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(4161)				_gthis1->addUndoAction(HX_("Delete Note",07,30,b0,81), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("notes",41,dc,ca,9f),_gthis->notes->copy())));
HXLINE(4162)				_gthis->notes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4163)				_gthis->loadSection(null());
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4157_addEditTab)
HXLINE(4158)			 ::Dynamic func =  ::Dynamic(new _hx_Closure_7(_gthis));
HXLINE(4166)			if (!(_gthis->ignoreProgressCheckBox->checked)) {
HXLINE(4166)				 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(4166)				_gthis1->openSubState( ::states::editors::content::Prompt_obj::__alloc( HX_CTX ,HX_("Delete all Notes in the song?",13,ae,9a,af),func,null(),null(),null()));
            			}
            			else {
HXLINE(4167)				func();
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4041_addEditTab)
HXDLIN(4041)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(4042)		 ::backend::ui::PsychUITab tab = this->upperBox->getTab(HX_("Edit",2a,f6,e7,2d));
HXLINE(4043)		 ::flixel::group::FlxTypedSpriteGroup tab_group = tab->menu;
HXLINE(4044)		Float btnX = (tab->x - this->upperBox->x);
HXLINE(4045)		int btnY = 1;
HXLINE(4046)		int btnWid = ::Std_obj::_hx_int(tab->get_width());
HXLINE(4048)		 ::backend::ui::PsychUIButton btn =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Undo",44,0e,c1,70),this->undo_dyn(),btnWid,null());
HXLINE(4049)		btn->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(4050)		tab_group->add(btn).StaticCast<  ::flixel::FlxSprite >();
HXLINE(4052)		btnY = (btnY + 20);
HXLINE(4053)		 ::backend::ui::PsychUIButton btn1 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Redo",1e,96,be,6e),this->redo_dyn(),btnWid,null());
HXLINE(4054)		btn1->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(4055)		tab_group->add(btn1).StaticCast<  ::flixel::FlxSprite >();
HXLINE(4057)		btnY = (btnY + 1);
HXLINE(4058)		btnY = (btnY + 20);
HXLINE(4059)		 ::backend::ui::PsychUIButton btn2 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Select All",fd,ed,86,e3), ::Dynamic(new _hx_Closure_0(_gthis)),btnWid,null());
HXLINE(4067)		btn2->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(4068)		tab_group->add(btn2).StaticCast<  ::flixel::FlxSprite >();
HXLINE(4070)		if (::states::editors::ChartingState_obj::SHOW_EVENT_COLUMN) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::states::editors::ChartingState,_gthis, ::backend::ui::PsychUIButton,btn3) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4076_addEditTab)
HXLINE(4077)				_gthis->lockedEvents = !(_gthis->lockedEvents);
HXLINE(4078)				if (_gthis->lockedEvents) {
HXLINE(4078)					btn3->text->set_text(HX_("  Unlock Events",f5,4c,87,95));
            				}
            				else {
HXLINE(4079)					btn3->text->set_text(HX_("  Lock Events",ae,1e,6e,0b));
            				}
HXLINE(4080)				_gthis->eventLockOverlay->set_visible(_gthis->lockedEvents);
HXLINE(4082)				if ((_gthis->selectedNotes->length >= 1)) {
HXLINE(4084)					::Array< ::Dynamic> sel = _gthis->selectedNotes;
HXLINE(4085)					::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(4085)					{
HXLINE(4085)						int _g1 = 0;
HXDLIN(4085)						::Array< ::Dynamic> _g2 = _gthis->selectedNotes;
HXDLIN(4085)						while((_g1 < _g2->length)){
HXLINE(4085)							 ::states::editors::content::MetaNote v = _g2->__get(_g1).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(4085)							_g1 = (_g1 + 1);
HXDLIN(4085)							if (!(v->isEvent)) {
HXLINE(4085)								_g->push(v);
            							}
            						}
            					}
HXDLIN(4085)					::Array< ::Dynamic> onlyNotes = _g;
HXLINE(4086)					_gthis->resetSelectedNotes();
HXLINE(4087)					_gthis->selectedNotes = onlyNotes;
HXLINE(4088)					 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(4088)					_gthis1->addUndoAction(HX_("Select Note",96,ff,25,4b), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("current",39,9c,e3,cb),_gthis->selectedNotes->copy())
            						->setFixed(1,HX_("old",a7,98,54,00),sel)));
HXLINE(4089)					if ((_gthis->selectedNotes->length == 1)) {
HXLINE(4089)						_gthis->onSelectNote();
            					}
            				}
HXLINE(4091)				_gthis->softReloadNotes(null());
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(4072)			btnY = (btnY + 1);
HXLINE(4073)			btnY = (btnY + 20);
HXLINE(4074)			 ::backend::ui::PsychUIButton btn3 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Lock Events",ae,1e,6e,0b),null(),btnWid,null());
HXLINE(4075)			btn3->onClick =  ::Dynamic(new _hx_Closure_1(_gthis,btn3));
HXLINE(4093)			btn3->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(4094)			tab_group->add(btn3).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(4097)		btnY = (btnY + 1);
HXLINE(4098)		btnY = (btnY + 20);
HXLINE(4099)		 ::backend::ui::PsychUIButton btn4 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Autosave Settings...",f7,36,35,5b),null(),btnWid,null());
HXLINE(4100)		btn4->onClick =  ::Dynamic(new _hx_Closure_6(_gthis));
HXLINE(4151)		btn4->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(4152)		tab_group->add(btn4).StaticCast<  ::flixel::FlxSprite >();
HXLINE(4154)		btnY = (btnY + 1);
HXLINE(4155)		btnY = (btnY + 20);
HXLINE(4156)		 ::backend::ui::PsychUIButton btn5 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Clear All Notes",4f,eb,53,78), ::Dynamic(new _hx_Closure_8(_gthis)),btnWid,null());
HXLINE(4169)		btn5->normalStyle->__SetField(HX_("bgColor",5e,81,83,f7),-65536,::hx::paccDynamic);
HXLINE(4170)		btn5->normalStyle->__SetField(HX_("textColor",76,01,4a,e3),-1,::hx::paccDynamic);
HXLINE(4171)		btn5->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(4172)		tab_group->add(btn5).StaticCast<  ::flixel::FlxSprite >();
HXLINE(4174)		if (::states::editors::ChartingState_obj::SHOW_EVENT_COLUMN) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_10, ::states::editors::ChartingState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9, ::states::editors::ChartingState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4180_addEditTab)
HXLINE(4181)					_gthis->resetSelectedNotes();
HXLINE(4182)					 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(4182)					_gthis1->addUndoAction(HX_("Delete Note",07,30,b0,81), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("events",19,4f,6a,96),_gthis->events->copy())));
HXLINE(4183)					_gthis->events = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4184)					_gthis->loadSection(null());
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4178_addEditTab)
HXLINE(4179)				 ::Dynamic func =  ::Dynamic(new _hx_Closure_9(_gthis));
HXLINE(4187)				if (!(_gthis->ignoreProgressCheckBox->checked)) {
HXLINE(4187)					 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(4187)					_gthis1->openSubState( ::states::editors::content::Prompt_obj::__alloc( HX_CTX ,HX_("Delete all Events in the song?",d3,f7,28,34),func,null(),null(),null()));
            				}
            				else {
HXLINE(4188)					func();
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(4176)			btnY = (btnY + 20);
HXLINE(4177)			 ::backend::ui::PsychUIButton btn6 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Clear All Events",4b,6c,ce,35), ::Dynamic(new _hx_Closure_10(_gthis)),btnWid,null());
HXLINE(4190)			btn6->normalStyle->__SetField(HX_("bgColor",5e,81,83,f7),-65536,::hx::paccDynamic);
HXLINE(4191)			btn6->normalStyle->__SetField(HX_("textColor",76,01,4a,e3),-1,::hx::paccDynamic);
HXLINE(4192)			btn6->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(4193)			tab_group->add(btn6).StaticCast<  ::flixel::FlxSprite >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addEditTab,(void))

void ChartingState_obj::addViewTab(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4217_addViewTab)
HXLINE(4218)			_gthis->showPreviousSection = !(_gthis->showPreviousSection);
HXLINE(4219)			_gthis->updateGridVisibility();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4226_addViewTab)
HXLINE(4227)			_gthis->showNextSection = !(_gthis->showNextSection);
HXLINE(4228)			_gthis->updateGridVisibility();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4236_addViewTab)
HXLINE(4237)			_gthis->showNoteTypeLabels = !(_gthis->showNoteTypeLabels);
HXLINE(4238)			_gthis->updateGridVisibility();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4246_addViewTab)
HXLINE(4247)			_gthis->vortexEnabled = !(_gthis->vortexEnabled);
HXLINE(4248)			_gthis->chartEditorSave->data->__SetField(HX_("vortex",6e,a8,49,63),_gthis->vortexEnabled,::hx::paccDynamic);
HXLINE(4249)			 ::flixel::FlxSprite _gthis1 = _gthis->vortexIndicator;
HXDLIN(4249)			 ::flixel::group::FlxTypedGroup _gthis2 = _gthis->strumLineNotes;
HXDLIN(4249)			_gthis1->set_visible(_gthis2->set_visible(_gthis->strumLineNotes->set_active(_gthis->vortexEnabled)));
HXLINE(4250)			::String _hx_tmp;
HXDLIN(4250)			if (_gthis->vortexEnabled) {
HXLINE(4250)				_hx_tmp = HX_("  Vortex Editor ON",80,67,26,b4);
            			}
            			else {
HXLINE(4250)				_hx_tmp = HX_("  Vortex Editor OFF",ce,21,74,ed);
            			}
HXDLIN(4250)			_gthis->vortexEditorButton->text->set_text(_hx_tmp);
HXLINE(4252)			{
HXLINE(4252)				 ::Dynamic filter = null();
HXDLIN(4252)				 ::flixel::group::FlxTypedGroupIterator note =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_gthis->strumLineNotes->members,filter);
HXDLIN(4252)				while(note->hasNext()){
HXLINE(4252)					 ::objects::StrumNote note1 = note->next().StaticCast<  ::objects::StrumNote >();
HXLINE(4254)					note1->playAnim(HX_("static",ae,dc,fb,05),null());
HXLINE(4255)					note1->resetAnim = ( (Float)(0) );
            				}
            			}
HXLINE(4257)			_gthis->prevGridBg->vortexLineEnabled = (_gthis->gridBg->vortexLineEnabled = (_gthis->nextGridBg->vortexLineEnabled = _gthis->vortexEnabled));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::states::editors::ChartingState,_gthis) HXARGC(1)
            			void _hx_run( ::states::editors::content::BasePrompt state){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_4, ::states::editors::ChartingState,_gthis, ::backend::ui::PsychUICheckBox,check) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4278_addViewTab)
HXLINE(4279)					_gthis->chartEditorSave->data->__SetField(HX_("waveformEnabled",84,2e,4a,6a),(_gthis->waveformEnabled = check->checked),::hx::paccDynamic);
HXLINE(4280)					_gthis->updateWaveform();
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::states::editors::ChartingState,_gthis) HXARGC(2)
            				void _hx_run(::String old,::String cur){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4292_addViewTab)
HXLINE(4293)					_gthis->chartEditorSave->data->__SetField(HX_("waveformColor",a6,04,f8,69),cur,::hx::paccDynamic);
HXLINE(4294)					 ::flixel::FlxSprite _gthis1 = _gthis->waveformSprite;
HXDLIN(4294)					 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN(4294)					::String color = ::StringTools_obj::trim(hideChars->split(cur)->join(HX_("",00,00,00,00)));
HXDLIN(4294)					if (::StringTools_obj::startsWith(color,HX_("0x",48,2a,00,00))) {
HXLINE(  59)						color = color.substring((color.length - 6),null());
            					}
HXLINE(4294)					 ::Dynamic colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color);
HXDLIN(4294)					if (::hx::IsNull( colorNum )) {
HXLINE(  62)						colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color));
            					}
HXLINE(4294)					int btn;
HXDLIN(4294)					if (::hx::IsNotNull( colorNum )) {
HXLINE(4294)						btn = ( (int)(colorNum) );
            					}
            					else {
HXLINE(4294)						btn = -1;
            					}
HXDLIN(4294)					_gthis1->set_color(btn);
            				}
            				HX_END_LOCAL_FUNC2((void))

            				HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_6, ::states::editors::ChartingState,_gthis,::Array< ::String >,options, ::backend::ui::PsychUIRadioGroup,radioGrp) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4305_addViewTab)
HXLINE(4306)					_gthis->waveformTarget = ( (::String)((_gthis->chartEditorSave->data->__SetField(HX_("waveformTarget",ae,3a,72,0f),options->__get(radioGrp->checked),::hx::paccDynamic))) );
HXLINE(4307)					_gthis->updateWaveform();
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4268_addViewTab)
HXLINE(4269)				_gthis->upperBox->set_isMinimized(true);
HXLINE(4270)				_gthis->upperBox->bg->set_visible(false);
HXLINE(4272)				Float state1 = state->bg->x;
HXDLIN(4272)				Float btn = ((state1 + state->bg->get_width()) - ( (Float)(40) ));
HXDLIN(4272)				 ::backend::ui::PsychUIButton btn1 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btn,state->bg->y,HX_("X",58,00,00,00),state->close_dyn(),40,null());
HXLINE(4273)				btn1->set_cameras(state->get_cameras());
HXLINE(4274)				state->add(btn1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4276)				 ::backend::ui::PsychUICheckBox check =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,(state->bg->x + 40),(state->bg->y + 80),HX_("Enabled",61,2c,82,4b),60,null());
HXLINE(4277)				check->onClick =  ::Dynamic(new _hx_Closure_4(_gthis,check));
HXLINE(4282)				 ::backend::ui::PsychUICheckBox check1 = check;
HXDLIN(4282)				check1->set_cameras(state->get_cameras());
HXLINE(4283)				check->set_checked(_gthis->waveformEnabled);
HXLINE(4284)				state->add(check).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4286)				::String waveformC = HX_("0000FF",40,11,3c,f4);
HXLINE(4287)				if (::hx::IsNotNull( _gthis->chartEditorSave->data->__Field(HX_("waveformColor",a6,04,f8,69),::hx::paccDynamic) )) {
HXLINE(4288)					waveformC = ( (::String)(_gthis->chartEditorSave->data->__Field(HX_("waveformColor",a6,04,f8,69),::hx::paccDynamic)) );
            				}
HXLINE(4290)				 ::backend::ui::PsychUIInputText input =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,check->x,(check->y + 50),60,waveformC,10);
HXLINE(4291)				input->onChange =  ::Dynamic(new _hx_Closure_5(_gthis));
HXLINE(4296)				input->set_maxLength(6);
HXLINE(4297)				input->set_filterMode(4);
HXLINE(4298)				input->set_cameras(state->get_cameras());
HXLINE(4299)				input->set_forceCase(1);
HXLINE(4301)				::Array< ::String > options = ::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_305,3);
HXLINE(4302)				 ::backend::ui::PsychUIRadioGroup radioGrp =  ::backend::ui::PsychUIRadioGroup_obj::__alloc( HX_CTX ,(check->x + 120),check->y,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_306,3),null(),null(),null(),null());
HXLINE(4303)				 ::backend::ui::PsychUIRadioGroup radioGrp1 = radioGrp;
HXDLIN(4303)				radioGrp1->set_cameras(state->get_cameras());
HXLINE(4304)				radioGrp->onClick =  ::Dynamic(new _hx_Closure_6(_gthis,options,radioGrp));
HXLINE(4309)				 ::backend::ui::PsychUIRadioGroup radioGrp2 = radioGrp;
HXDLIN(4309)				radioGrp2->set_checked(options->indexOf(_gthis->waveformTarget,null()));
HXLINE(4310)				state->add(radioGrp).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4312)				 ::flixel::text::FlxText txt1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,input->x,(input->y - ( (Float)(15) )),80,HX_("Color (Hex):",81,e7,04,0d),null(),null());
HXLINE(4313)				txt1->set_cameras(state->get_cameras());
HXLINE(4314)				state->add(txt1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4315)				state->add(input).StaticCast<  ::flixel::FlxBasic >();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4265_addViewTab)
HXLINE(4266)			::backend::ClientPrefs_obj::toggleVolumeKeys(false);
HXLINE(4267)			 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(4267)			_gthis1->openSubState( ::states::editors::content::BasePrompt_obj::__alloc( HX_CTX ,320,200,HX_("Waveform Settings",e6,29,09,c7), ::Dynamic(new _hx_Closure_7(_gthis)),null()));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_14, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_13, ::states::editors::ChartingState,_gthis) HXARGC(1)
            			void _hx_run( ::states::editors::content::BasePrompt state){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_9, ::flixel::text::FlxText,timeTxt,::Array< Float >,curTime) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4353_addViewTab)
HXLINE(4354)					::String tm = ::flixel::util::FlxStringUtil_obj::formatTime((curTime->__get(0) / ( (Float)(1000) )),true);
HXLINE(4355)					::String ln = ::flixel::util::FlxStringUtil_obj::formatTime((::flixel::FlxG_obj::sound->music->_length / ( (Float)(1000) )),true);
HXLINE(4356)					timeTxt->set_text((((HX_("",00,00,00,00) + tm) + HX_(" / ",31,71,18,00)) + ln));
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_10, ::states::editors::ChartingState,_gthis, ::backend::ui::PsychUINumericStepper,timeStepper, ::Dynamic,updateTime,::Array< int >,currentSec,::Array< Float >,curTime) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4361_addViewTab)
HXLINE(4362)					curTime[0] = (timeStepper->value * ( (Float)(1000) ));
HXLINE(4363)					{
HXLINE(4363)						int _g_current = 0;
HXDLIN(4363)						::Array< Float > _g_array = _gthis->cachedSectionTimes;
HXDLIN(4363)						while((_g_current < _g_array->length)){
HXLINE(4363)							Float _g_value = _g_array->__get(_g_current);
HXDLIN(4363)							_g_current = (_g_current + 1);
HXDLIN(4363)							int _g_key = (_g_current - 1);
HXDLIN(4363)							int i = _g_key;
HXDLIN(4363)							Float time = _g_value;
HXLINE(4365)							if ((time <= curTime->__get(0))) {
HXLINE(4366)								currentSec[0] = i;
            							}
            							else {
HXLINE(4367)								goto _hx_goto_296;
            							}
            						}
            						_hx_goto_296:;
            					}
HXLINE(4369)					updateTime();
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_11, ::backend::ui::PsychUINumericStepper,sectionStepper, ::states::editors::ChartingState,_gthis, ::Dynamic,updateTime,::Array< int >,currentSec,::Array< Float >,curTime) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4372_addViewTab)
HXLINE(4373)					currentSec[0] = ::Std_obj::_hx_int(sectionStepper->value);
HXLINE(4374)					curTime[0] = (_gthis->cachedSectionTimes->__get(currentSec->__get(0)) + ((Float)0.000001));
HXLINE(4375)					updateTime();
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_12, ::states::editors::content::BasePrompt,state, ::states::editors::ChartingState,_gthis,::Array< int >,currentSec,::Array< Float >,curTime) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4379_addViewTab)
HXLINE(4380)					_gthis->curSec = currentSec->__get(0);
HXLINE(4381)					 ::Dynamic Max = (::flixel::FlxG_obj::sound->music->_length - ( (Float)(1) ));
HXDLIN(4381)					Float lowerBound;
HXDLIN(4381)					if ((curTime->__get(0) < 0)) {
HXLINE(4381)						lowerBound = ( (Float)(0) );
            					}
            					else {
HXLINE(4381)						lowerBound = curTime->__get(0);
            					}
HXDLIN(4381)					Float btn;
HXDLIN(4381)					bool btn1;
HXDLIN(4381)					if (::hx::IsNotNull( Max )) {
HXLINE(4381)						btn1 = ::hx::IsGreater( lowerBound,Max );
            					}
            					else {
HXLINE(4381)						btn1 = false;
            					}
HXDLIN(4381)					if (btn1) {
HXLINE(4381)						btn = ( (Float)(Max) );
            					}
            					else {
HXLINE(4381)						btn = lowerBound;
            					}
HXDLIN(4381)					::flixel::FlxG_obj::sound->music->set_time(btn);
HXLINE(4382)					_gthis->loadSection(null());
HXLINE(4383)					state->close();
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4329_addViewTab)
HXLINE(4330)				::Array< Float > curTime = ::Array_obj< Float >::__new(1)->init(0,::backend::Conductor_obj::songPosition);
HXLINE(4331)				::Array< int > currentSec = ::Array_obj< int >::__new(1)->init(0,_gthis->curSec);
HXLINE(4333)				 ::backend::ui::PsychUINumericStepper timeStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,(state->bg->x + 100),(state->bg->y + 90),1,(( (Float)(::Math_obj::floor(curTime->__get(0))) ) / ( (Float)(1000) )),0,((::flixel::FlxG_obj::sound->music->_length / ( (Float)(1000) )) - ((Float)0.01)),2,80,null());
HXLINE(4334)				 ::backend::ui::PsychUINumericStepper timeStepper1 = timeStepper;
HXDLIN(4334)				timeStepper1->set_cameras(state->get_cameras());
HXLINE(4335)				 ::backend::ui::PsychUINumericStepper sectionStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,(timeStepper->x + 160),timeStepper->y,1,currentSec->__get(0),0,(( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length - 1),0,null(),null());
HXLINE(4336)				 ::backend::ui::PsychUINumericStepper sectionStepper1 = sectionStepper;
HXDLIN(4336)				sectionStepper1->set_cameras(state->get_cameras());
HXLINE(4338)				 ::flixel::text::FlxText txt1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,timeStepper->x,(timeStepper->y - ( (Float)(15) )),100,HX_("Time (in seconds):",2a,d5,fd,53),null(),null());
HXLINE(4339)				 ::flixel::text::FlxText txt2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,sectionStepper->x,(sectionStepper->y - ( (Float)(15) )),100,HX_("Section:",d5,de,de,98),null(),null());
HXLINE(4340)				txt1->set_cameras(state->get_cameras());
HXLINE(4341)				txt2->set_cameras(state->get_cameras());
HXLINE(4342)				state->add(txt1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4343)				state->add(txt2).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4344)				state->add(timeStepper).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4345)				state->add(sectionStepper).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4347)				Float state1 = state->bg->y;
HXDLIN(4347)				 ::flixel::text::FlxText timeTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,15,((state1 + state->bg->get_height()) - ( (Float)(75) )),230,HX_("",00,00,00,00),16,null());
HXLINE(4348)				timeTxt->set_alignment(HX_("center",d5,25,db,05));
HXLINE(4349)				{
HXLINE(4349)					int axes = 1;
HXDLIN(4349)					bool btn;
HXDLIN(4349)					if ((axes != 1)) {
HXLINE(4349)						btn = (axes == 17);
            					}
            					else {
HXLINE(4349)						btn = true;
            					}
HXDLIN(4349)					if (btn) {
HXLINE(4349)						 ::flixel::text::FlxText timeTxt1 = timeTxt;
HXDLIN(4349)						int btn1 = ::flixel::FlxG_obj::width;
HXDLIN(4349)						timeTxt1->set_x(((( (Float)(btn1) ) - timeTxt->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(4349)					bool btn2;
HXDLIN(4349)					if ((axes != 16)) {
HXLINE(4349)						btn2 = (axes == 17);
            					}
            					else {
HXLINE(4349)						btn2 = true;
            					}
HXDLIN(4349)					if (btn2) {
HXLINE(4349)						 ::flixel::text::FlxText timeTxt2 = timeTxt;
HXDLIN(4349)						int btn3 = ::flixel::FlxG_obj::height;
HXDLIN(4349)						timeTxt2->set_y(((( (Float)(btn3) ) - timeTxt->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(4350)				 ::flixel::text::FlxText timeTxt3 = timeTxt;
HXDLIN(4350)				timeTxt3->set_cameras(state->get_cameras());
HXLINE(4351)				state->add(timeTxt).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4352)				 ::Dynamic updateTime =  ::Dynamic(new _hx_Closure_9(timeTxt,curTime));
HXLINE(4358)				updateTime();
HXLINE(4360)				timeStepper->onValueChange =  ::Dynamic(new _hx_Closure_10(_gthis,timeStepper,updateTime,currentSec,curTime));
HXLINE(4371)				sectionStepper->onValueChange =  ::Dynamic(new _hx_Closure_11(sectionStepper,_gthis,updateTime,currentSec,curTime));
HXLINE(4378)				 ::backend::ui::PsychUIButton btn4 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,(timeTxt->y + 30),HX_("Go To",73,70,ea,2a), ::Dynamic(new _hx_Closure_12(state,_gthis,currentSec,curTime)),null(),null());
HXLINE(4385)				btn4->set_cameras(state->get_cameras());
HXLINE(4386)				{
HXLINE(4386)					int axes1 = 1;
HXDLIN(4386)					bool btn5;
HXDLIN(4386)					if ((axes1 != 1)) {
HXLINE(4386)						btn5 = (axes1 == 17);
            					}
            					else {
HXLINE(4386)						btn5 = true;
            					}
HXDLIN(4386)					if (btn5) {
HXLINE(4386)						int btn6 = ::flixel::FlxG_obj::width;
HXDLIN(4386)						btn4->set_x(((( (Float)(btn6) ) - btn4->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(4386)					bool btn7;
HXDLIN(4386)					if ((axes1 != 16)) {
HXLINE(4386)						btn7 = (axes1 == 17);
            					}
            					else {
HXLINE(4386)						btn7 = true;
            					}
HXDLIN(4386)					if (btn7) {
HXLINE(4386)						int btn8 = ::flixel::FlxG_obj::height;
HXDLIN(4386)						btn4->set_y(((( (Float)(btn8) ) - btn4->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(4387)				btn4->set_x((btn4->x - ( (Float)(60) )));
HXLINE(4388)				state->add(btn4).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4390)				 ::backend::ui::PsychUIButton btn9 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,btn4->y,HX_("Cancel",9a,61,c8,ec),state->close_dyn(),null(),null());
HXLINE(4391)				btn9->set_cameras(state->get_cameras());
HXLINE(4392)				{
HXLINE(4392)					int axes2 = 1;
HXDLIN(4392)					bool btn10;
HXDLIN(4392)					if ((axes2 != 1)) {
HXLINE(4392)						btn10 = (axes2 == 17);
            					}
            					else {
HXLINE(4392)						btn10 = true;
            					}
HXDLIN(4392)					if (btn10) {
HXLINE(4392)						int btn11 = ::flixel::FlxG_obj::width;
HXDLIN(4392)						btn9->set_x(((( (Float)(btn11) ) - btn9->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(4392)					bool btn12;
HXDLIN(4392)					if ((axes2 != 16)) {
HXLINE(4392)						btn12 = (axes2 == 17);
            					}
            					else {
HXLINE(4392)						btn12 = true;
            					}
HXDLIN(4392)					if (btn12) {
HXLINE(4392)						int btn13 = ::flixel::FlxG_obj::height;
HXDLIN(4392)						btn9->set_y(((( (Float)(btn13) ) - btn9->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(4393)				btn9->set_x((btn9->x + 60));
HXLINE(4394)				state->add(btn9).StaticCast<  ::flixel::FlxBasic >();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4324_addViewTab)
HXLINE(4325)			_gthis->upperBox->set_isMinimized(true);
HXLINE(4326)			_gthis->upperBox->bg->set_visible(false);
HXLINE(4327)			 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(4327)			_gthis1->openSubState( ::states::editors::content::BasePrompt_obj::__alloc( HX_CTX ,420,200,HX_("Go to Time/Section:",aa,03,fa,d8), ::Dynamic(new _hx_Closure_13(_gthis)),null()));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_26, ::states::editors::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_25, ::states::editors::ChartingState,_gthis) HXARGC(1)
            			void _hx_run( ::states::editors::content::BasePrompt state){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_15,::String,changeTo, ::states::editors::ChartingState,_g) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4417_addViewTab)
HXLINE(4417)					_g->changeTheme(changeTo,null());
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_16,::String,changeTo1, ::states::editors::ChartingState,_g1) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4423_addViewTab)
HXLINE(4423)					_g1->changeTheme(changeTo1,null());
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_17, ::states::editors::ChartingState,_g2,::String,changeTo2) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4429_addViewTab)
HXLINE(4429)					_g2->changeTheme(changeTo2,null());
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_18, ::states::editors::ChartingState,_g3,::String,changeTo3) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4435_addViewTab)
HXLINE(4435)					_g3->changeTheme(changeTo3,null());
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_19, ::states::editors::ChartingState,_g4,::String,changeTo4) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4442_addViewTab)
HXLINE(4442)					_g4->changeTheme(changeTo4,null());
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_20, ::states::editors::ChartingState,_gthis) HXARGC(2)
            				void _hx_run(::String old,::String cur){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4460_addViewTab)
HXLINE(4461)					_gthis->chartEditorSave->data->__SetField(HX_("customBgColor",ad,e9,91,a1),cur,::hx::paccDynamic);
HXLINE(4462)					_gthis->changeTheme(HX_("custom",b1,87,92,3f),null());
            				}
            				HX_END_LOCAL_FUNC2((void))

            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_21, ::states::editors::ChartingState,_gthis) HXARGC(2)
            				void _hx_run(::String old,::String cur){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4482_addViewTab)
HXLINE(4483)					 ::Dynamic(_gthis->chartEditorSave->data->__Field(HX_("customGridColors",27,dc,bf,81),::hx::paccDynamic))->__SetItem(0,cur);
HXLINE(4484)					_gthis->changeTheme(HX_("custom",b1,87,92,3f),null());
            				}
            				HX_END_LOCAL_FUNC2((void))

            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_22, ::states::editors::ChartingState,_gthis) HXARGC(2)
            				void _hx_run(::String old,::String cur){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4500_addViewTab)
HXLINE(4501)					 ::Dynamic(_gthis->chartEditorSave->data->__Field(HX_("customGridColors",27,dc,bf,81),::hx::paccDynamic))->__SetItem(1,cur);
HXLINE(4502)					_gthis->changeTheme(HX_("custom",b1,87,92,3f),null());
            				}
            				HX_END_LOCAL_FUNC2((void))

            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_23, ::states::editors::ChartingState,_gthis) HXARGC(2)
            				void _hx_run(::String old,::String cur){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4518_addViewTab)
HXLINE(4519)					 ::Dynamic(_gthis->chartEditorSave->data->__Field(HX_("customNextGridColors",7a,8f,e5,4d),::hx::paccDynamic))->__SetItem(0,cur);
HXLINE(4520)					_gthis->changeTheme(HX_("custom",b1,87,92,3f),null());
            				}
            				HX_END_LOCAL_FUNC2((void))

            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_24, ::states::editors::ChartingState,_gthis) HXARGC(2)
            				void _hx_run(::String old,::String cur){
            					HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4536_addViewTab)
HXLINE(4537)					 ::Dynamic(_gthis->chartEditorSave->data->__Field(HX_("customNextGridColors",7a,8f,e5,4d),::hx::paccDynamic))->__SetItem(1,cur);
HXLINE(4538)					_gthis->changeTheme(HX_("custom",b1,87,92,3f),null());
            				}
            				HX_END_LOCAL_FUNC2((void))

            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4411_addViewTab)
HXLINE(4412)				Float state1 = state->bg->x;
HXDLIN(4412)				Float btn = ((state1 + state->bg->get_width()) - ( (Float)(40) ));
HXDLIN(4412)				 ::backend::ui::PsychUIButton btn1 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btn,state->bg->y,HX_("X",58,00,00,00),state->close_dyn(),40,null());
HXLINE(4413)				btn1->set_cameras(state->get_cameras());
HXLINE(4414)				state->add(btn1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4416)				int btnY = 320;
HXLINE(4417)				 ::states::editors::ChartingState _g = _gthis;
HXDLIN(4417)				::String changeTo = HX_("light",d6,90,fc,74);
HXDLIN(4417)				 ::backend::ui::PsychUIButton btn2 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,btnY,HX_("Light",b6,00,2a,08), ::Dynamic(new _hx_Closure_15(changeTo,_g)),null(),null());
HXLINE(4418)				{
HXLINE(4418)					int axes = 1;
HXDLIN(4418)					bool btn3;
HXDLIN(4418)					if ((axes != 1)) {
HXLINE(4418)						btn3 = (axes == 17);
            					}
            					else {
HXLINE(4418)						btn3 = true;
            					}
HXDLIN(4418)					if (btn3) {
HXLINE(4418)						int btn4 = ::flixel::FlxG_obj::width;
HXDLIN(4418)						btn2->set_x(((( (Float)(btn4) ) - btn2->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(4418)					bool btn5;
HXDLIN(4418)					if ((axes != 16)) {
HXLINE(4418)						btn5 = (axes == 17);
            					}
            					else {
HXLINE(4418)						btn5 = true;
            					}
HXDLIN(4418)					if (btn5) {
HXLINE(4418)						int btn6 = ::flixel::FlxG_obj::height;
HXDLIN(4418)						btn2->set_y(((( (Float)(btn6) ) - btn2->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(4419)				btn2->set_x((btn2->x - ( (Float)(180) )));
HXLINE(4420)				btn2->set_cameras(state->get_cameras());
HXLINE(4421)				state->add(btn2).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4423)				 ::states::editors::ChartingState _g1 = _gthis;
HXDLIN(4423)				::String changeTo1 = HX_("dark",76,54,63,42);
HXDLIN(4423)				 ::backend::ui::PsychUIButton btn7 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,btnY,HX_("Dark",96,80,3c,2d), ::Dynamic(new _hx_Closure_16(changeTo1,_g1)),null(),null());
HXLINE(4424)				{
HXLINE(4424)					int axes1 = 1;
HXDLIN(4424)					bool btn8;
HXDLIN(4424)					if ((axes1 != 1)) {
HXLINE(4424)						btn8 = (axes1 == 17);
            					}
            					else {
HXLINE(4424)						btn8 = true;
            					}
HXDLIN(4424)					if (btn8) {
HXLINE(4424)						int btn9 = ::flixel::FlxG_obj::width;
HXDLIN(4424)						btn7->set_x(((( (Float)(btn9) ) - btn7->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(4424)					bool btn10;
HXDLIN(4424)					if ((axes1 != 16)) {
HXLINE(4424)						btn10 = (axes1 == 17);
            					}
            					else {
HXLINE(4424)						btn10 = true;
            					}
HXDLIN(4424)					if (btn10) {
HXLINE(4424)						int btn11 = ::flixel::FlxG_obj::height;
HXDLIN(4424)						btn7->set_y(((( (Float)(btn11) ) - btn7->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(4425)				btn7->set_x((btn7->x - ( (Float)(60) )));
HXLINE(4426)				btn7->set_cameras(state->get_cameras());
HXLINE(4427)				state->add(btn7).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4429)				 ::states::editors::ChartingState _g2 = _gthis;
HXDLIN(4429)				::String changeTo2 = HX_("default",c1,d8,c3,9b);
HXDLIN(4429)				 ::backend::ui::PsychUIButton btn12 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,btnY,HX_("Default",a1,00,15,69), ::Dynamic(new _hx_Closure_17(_g2,changeTo2)),null(),null());
HXLINE(4430)				{
HXLINE(4430)					int axes2 = 1;
HXDLIN(4430)					bool btn13;
HXDLIN(4430)					if ((axes2 != 1)) {
HXLINE(4430)						btn13 = (axes2 == 17);
            					}
            					else {
HXLINE(4430)						btn13 = true;
            					}
HXDLIN(4430)					if (btn13) {
HXLINE(4430)						int btn14 = ::flixel::FlxG_obj::width;
HXDLIN(4430)						btn12->set_x(((( (Float)(btn14) ) - btn12->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(4430)					bool btn15;
HXDLIN(4430)					if ((axes2 != 16)) {
HXLINE(4430)						btn15 = (axes2 == 17);
            					}
            					else {
HXLINE(4430)						btn15 = true;
            					}
HXDLIN(4430)					if (btn15) {
HXLINE(4430)						int btn16 = ::flixel::FlxG_obj::height;
HXDLIN(4430)						btn12->set_y(((( (Float)(btn16) ) - btn12->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(4431)				btn12->set_cameras(state->get_cameras());
HXLINE(4432)				btn12->set_x((btn12->x + 60));
HXLINE(4433)				state->add(btn12).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4435)				 ::states::editors::ChartingState _g3 = _gthis;
HXDLIN(4435)				::String changeTo3 = HX_("vslice",1c,58,e4,ac);
HXDLIN(4435)				 ::backend::ui::PsychUIButton btn17 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,btnY,HX_("V-Slice",bb,55,3a,08), ::Dynamic(new _hx_Closure_18(_g3,changeTo3)),null(),null());
HXLINE(4436)				{
HXLINE(4436)					int axes3 = 1;
HXDLIN(4436)					bool btn18;
HXDLIN(4436)					if ((axes3 != 1)) {
HXLINE(4436)						btn18 = (axes3 == 17);
            					}
            					else {
HXLINE(4436)						btn18 = true;
            					}
HXDLIN(4436)					if (btn18) {
HXLINE(4436)						int btn19 = ::flixel::FlxG_obj::width;
HXDLIN(4436)						btn17->set_x(((( (Float)(btn19) ) - btn17->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(4436)					bool btn20;
HXDLIN(4436)					if ((axes3 != 16)) {
HXLINE(4436)						btn20 = (axes3 == 17);
            					}
            					else {
HXLINE(4436)						btn20 = true;
            					}
HXDLIN(4436)					if (btn20) {
HXLINE(4436)						int btn21 = ::flixel::FlxG_obj::height;
HXDLIN(4436)						btn17->set_y(((( (Float)(btn21) ) - btn17->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(4437)				btn17->set_x((btn17->x + 180));
HXLINE(4438)				btn17->set_cameras(state->get_cameras());
HXLINE(4439)				state->add(btn17).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4441)				btnY = (btnY + 60);
HXLINE(4442)				 ::states::editors::ChartingState _g4 = _gthis;
HXDLIN(4442)				::String changeTo4 = HX_("custom",b1,87,92,3f);
HXDLIN(4442)				 ::backend::ui::PsychUIButton btn22 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,btnY,HX_("Custom",d1,fb,26,74), ::Dynamic(new _hx_Closure_19(_g4,changeTo4)),null(),null());
HXLINE(4443)				{
HXLINE(4443)					int axes4 = 1;
HXDLIN(4443)					bool btn23;
HXDLIN(4443)					if ((axes4 != 1)) {
HXLINE(4443)						btn23 = (axes4 == 17);
            					}
            					else {
HXLINE(4443)						btn23 = true;
            					}
HXDLIN(4443)					if (btn23) {
HXLINE(4443)						int btn24 = ::flixel::FlxG_obj::width;
HXDLIN(4443)						btn22->set_x(((( (Float)(btn24) ) - btn22->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(4443)					bool btn25;
HXDLIN(4443)					if ((axes4 != 16)) {
HXLINE(4443)						btn25 = (axes4 == 17);
            					}
            					else {
HXLINE(4443)						btn25 = true;
            					}
HXDLIN(4443)					if (btn25) {
HXLINE(4443)						int btn26 = ::flixel::FlxG_obj::height;
HXDLIN(4443)						btn22->set_y(((( (Float)(btn26) ) - btn22->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(4444)				btn22->set_x((btn22->x - ( (Float)(180) )));
HXLINE(4445)				btn22->set_cameras(state->get_cameras());
HXLINE(4446)				state->add(btn22).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4448)				::String customBgC = HX_("303030",97,b9,49,29);
HXLINE(4449)				if (::hx::IsNotNull( _gthis->chartEditorSave->data->__Field(HX_("customBgColor",ad,e9,91,a1),::hx::paccDynamic) )) {
HXLINE(4450)					customBgC = ( (::String)(_gthis->chartEditorSave->data->__Field(HX_("customBgColor",ad,e9,91,a1),::hx::paccDynamic)) );
            				}
HXLINE(4452)				 ::backend::ui::PsychUIInputText input =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,0,btnY,80,customBgC,10);
HXLINE(4453)				input->set_maxLength(6);
HXLINE(4454)				input->set_filterMode(4);
HXLINE(4455)				input->set_forceCase(1);
HXLINE(4456)				{
HXLINE(4456)					int axes5 = 1;
HXDLIN(4456)					bool btn27;
HXDLIN(4456)					if ((axes5 != 1)) {
HXLINE(4456)						btn27 = (axes5 == 17);
            					}
            					else {
HXLINE(4456)						btn27 = true;
            					}
HXDLIN(4456)					if (btn27) {
HXLINE(4456)						int btn28 = ::flixel::FlxG_obj::width;
HXDLIN(4456)						input->set_x(((( (Float)(btn28) ) - input->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(4456)					bool btn29;
HXDLIN(4456)					if ((axes5 != 16)) {
HXLINE(4456)						btn29 = (axes5 == 17);
            					}
            					else {
HXLINE(4456)						btn29 = true;
            					}
HXDLIN(4456)					if (btn29) {
HXLINE(4456)						int btn30 = ::flixel::FlxG_obj::height;
HXDLIN(4456)						input->set_y(((( (Float)(btn30) ) - input->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(4457)				input->set_x((input->x - ( (Float)(60) )));
HXLINE(4458)				input->set_cameras(state->get_cameras());
HXLINE(4459)				input->onChange =  ::Dynamic(new _hx_Closure_20(_gthis));
HXLINE(4465)				 ::flixel::text::FlxText txt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,input->x,(input->y - ( (Float)(15) )),120,HX_("BG Color:",92,ca,04,6d),null(),null());
HXLINE(4466)				txt->set_cameras(state->get_cameras());
HXLINE(4467)				state->add(txt).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4468)				state->add(input).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4470)				::Array< ::String > customGridC = ::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_325,2);
HXLINE(4471)				bool btn31;
HXDLIN(4471)				if (::hx::IsNotNull( _gthis->chartEditorSave->data->__Field(HX_("customGridColors",27,dc,bf,81),::hx::paccDynamic) )) {
HXLINE(4471)					btn31 = ::hx::IsGreater(  ::Dynamic(_gthis->chartEditorSave->data->__Field(HX_("customGridColors",27,dc,bf,81),::hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),1 );
            				}
            				else {
HXLINE(4471)					btn31 = false;
            				}
HXDLIN(4471)				if (btn31) {
HXLINE(4472)					customGridC = ( (::Array< ::String >)(_gthis->chartEditorSave->data->__Field(HX_("customGridColors",27,dc,bf,81),::hx::paccDynamic)) );
            				}
HXLINE(4474)				 ::backend::ui::PsychUIInputText input1 =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,0,btnY,80,customGridC->__get(0),10);
HXLINE(4475)				input1->set_maxLength(6);
HXLINE(4476)				input1->set_filterMode(4);
HXLINE(4477)				input1->set_forceCase(1);
HXLINE(4478)				{
HXLINE(4478)					int axes6 = 1;
HXDLIN(4478)					bool btn32;
HXDLIN(4478)					if ((axes6 != 1)) {
HXLINE(4478)						btn32 = (axes6 == 17);
            					}
            					else {
HXLINE(4478)						btn32 = true;
            					}
HXDLIN(4478)					if (btn32) {
HXLINE(4478)						int btn33 = ::flixel::FlxG_obj::width;
HXDLIN(4478)						input1->set_x(((( (Float)(btn33) ) - input1->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(4478)					bool btn34;
HXDLIN(4478)					if ((axes6 != 16)) {
HXLINE(4478)						btn34 = (axes6 == 17);
            					}
            					else {
HXLINE(4478)						btn34 = true;
            					}
HXDLIN(4478)					if (btn34) {
HXLINE(4478)						int btn35 = ::flixel::FlxG_obj::height;
HXDLIN(4478)						input1->set_y(((( (Float)(btn35) ) - input1->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(4479)				input1->set_x((input1->x + 60));
HXLINE(4480)				input1->set_cameras(state->get_cameras());
HXLINE(4481)				input1->onChange =  ::Dynamic(new _hx_Closure_21(_gthis));
HXLINE(4487)				 ::flixel::text::FlxText txt1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,input1->x,(input1->y - ( (Float)(15) )),120,HX_("Grid Colors:",30,f9,00,c7),null(),null());
HXLINE(4488)				txt1->set_cameras(state->get_cameras());
HXLINE(4489)				state->add(txt1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4490)				state->add(input1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4492)				 ::backend::ui::PsychUIInputText input2 =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,0,(btnY + 30),80,customGridC->__get(1),10);
HXLINE(4493)				input2->set_maxLength(6);
HXLINE(4494)				input2->set_filterMode(4);
HXLINE(4495)				input2->set_forceCase(1);
HXLINE(4496)				{
HXLINE(4496)					int axes7 = 1;
HXDLIN(4496)					bool btn36;
HXDLIN(4496)					if ((axes7 != 1)) {
HXLINE(4496)						btn36 = (axes7 == 17);
            					}
            					else {
HXLINE(4496)						btn36 = true;
            					}
HXDLIN(4496)					if (btn36) {
HXLINE(4496)						int btn37 = ::flixel::FlxG_obj::width;
HXDLIN(4496)						input2->set_x(((( (Float)(btn37) ) - input2->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(4496)					bool btn38;
HXDLIN(4496)					if ((axes7 != 16)) {
HXLINE(4496)						btn38 = (axes7 == 17);
            					}
            					else {
HXLINE(4496)						btn38 = true;
            					}
HXDLIN(4496)					if (btn38) {
HXLINE(4496)						int btn39 = ::flixel::FlxG_obj::height;
HXDLIN(4496)						input2->set_y(((( (Float)(btn39) ) - input2->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(4497)				input2->set_x((input2->x + 60));
HXLINE(4498)				input2->set_cameras(state->get_cameras());
HXLINE(4499)				input2->onChange =  ::Dynamic(new _hx_Closure_22(_gthis));
HXLINE(4504)				state->add(input2).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4506)				::Array< ::String > customGridOtherC = ::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_326,2);
HXLINE(4507)				bool btn40;
HXDLIN(4507)				if (::hx::IsNotNull( _gthis->chartEditorSave->data->__Field(HX_("customNextGridColors",7a,8f,e5,4d),::hx::paccDynamic) )) {
HXLINE(4507)					btn40 = ::hx::IsGreater(  ::Dynamic(_gthis->chartEditorSave->data->__Field(HX_("customNextGridColors",7a,8f,e5,4d),::hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),1 );
            				}
            				else {
HXLINE(4507)					btn40 = false;
            				}
HXDLIN(4507)				if (btn40) {
HXLINE(4508)					customGridOtherC = ( (::Array< ::String >)(_gthis->chartEditorSave->data->__Field(HX_("customNextGridColors",7a,8f,e5,4d),::hx::paccDynamic)) );
            				}
HXLINE(4510)				 ::backend::ui::PsychUIInputText input3 =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,0,btnY,80,customGridOtherC->__get(0),10);
HXLINE(4511)				input3->set_maxLength(6);
HXLINE(4512)				input3->set_filterMode(4);
HXLINE(4513)				input3->set_forceCase(1);
HXLINE(4514)				{
HXLINE(4514)					int axes8 = 1;
HXDLIN(4514)					bool btn41;
HXDLIN(4514)					if ((axes8 != 1)) {
HXLINE(4514)						btn41 = (axes8 == 17);
            					}
            					else {
HXLINE(4514)						btn41 = true;
            					}
HXDLIN(4514)					if (btn41) {
HXLINE(4514)						int btn42 = ::flixel::FlxG_obj::width;
HXDLIN(4514)						input3->set_x(((( (Float)(btn42) ) - input3->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(4514)					bool btn43;
HXDLIN(4514)					if ((axes8 != 16)) {
HXLINE(4514)						btn43 = (axes8 == 17);
            					}
            					else {
HXLINE(4514)						btn43 = true;
            					}
HXDLIN(4514)					if (btn43) {
HXLINE(4514)						int btn44 = ::flixel::FlxG_obj::height;
HXDLIN(4514)						input3->set_y(((( (Float)(btn44) ) - input3->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(4515)				input3->set_x((input3->x + 180));
HXLINE(4516)				input3->set_cameras(state->get_cameras());
HXLINE(4517)				input3->onChange =  ::Dynamic(new _hx_Closure_23(_gthis));
HXLINE(4523)				 ::flixel::text::FlxText txt2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,input3->x,(input3->y - ( (Float)(15) )),120,HX_("Next Grid Colors:",5d,88,d7,07),null(),null());
HXLINE(4524)				txt2->set_cameras(state->get_cameras());
HXLINE(4525)				state->add(txt2).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4526)				state->add(input3).StaticCast<  ::flixel::FlxBasic >();
HXLINE(4528)				 ::backend::ui::PsychUIInputText input4 =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,0,(btnY + 30),80,customGridOtherC->__get(1),10);
HXLINE(4529)				input4->set_maxLength(6);
HXLINE(4530)				input4->set_filterMode(4);
HXLINE(4531)				input4->set_forceCase(1);
HXLINE(4532)				{
HXLINE(4532)					int axes9 = 1;
HXDLIN(4532)					bool btn45;
HXDLIN(4532)					if ((axes9 != 1)) {
HXLINE(4532)						btn45 = (axes9 == 17);
            					}
            					else {
HXLINE(4532)						btn45 = true;
            					}
HXDLIN(4532)					if (btn45) {
HXLINE(4532)						int btn46 = ::flixel::FlxG_obj::width;
HXDLIN(4532)						input4->set_x(((( (Float)(btn46) ) - input4->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(4532)					bool btn47;
HXDLIN(4532)					if ((axes9 != 16)) {
HXLINE(4532)						btn47 = (axes9 == 17);
            					}
            					else {
HXLINE(4532)						btn47 = true;
            					}
HXDLIN(4532)					if (btn47) {
HXLINE(4532)						int btn48 = ::flixel::FlxG_obj::height;
HXDLIN(4532)						input4->set_y(((( (Float)(btn48) ) - input4->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(4533)				input4->set_x((input4->x + 180));
HXLINE(4534)				input4->set_cameras(state->get_cameras());
HXLINE(4535)				input4->onChange =  ::Dynamic(new _hx_Closure_24(_gthis));
HXLINE(4540)				state->add(input4).StaticCast<  ::flixel::FlxBasic >();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4404_addViewTab)
HXLINE(4405)			if (!(_gthis->fileDialog->completed)) {
HXLINE(4405)				return;
            			}
HXLINE(4406)			_gthis->upperBox->set_isMinimized(true);
HXLINE(4407)			_gthis->upperBox->bg->set_visible(false);
HXLINE(4409)			 ::states::editors::ChartingState _gthis1 = _gthis;
HXDLIN(4409)			_gthis1->openSubState( ::states::editors::content::BasePrompt_obj::__alloc( HX_CTX ,500,260,HX_("Chart Editor Theme",f8,0b,12,06), ::Dynamic(new _hx_Closure_25(_gthis)),null()));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_27, ::states::editors::ChartingState,_gthis, ::backend::ui::PsychUIButton,btn2) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4549_addViewTab)
HXLINE(4550)			_gthis->mainBox->setPosition(_gthis->mainBoxPosition->x,_gthis->mainBoxPosition->y);
HXLINE(4551)			_gthis->infoBox->setPosition(_gthis->infoBoxPosition->x,_gthis->infoBoxPosition->y);
HXLINE(4552)			_gthis->UIEvent(::backend::ui::PsychUIBox_obj::DROP_EVENT,btn2);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4202_addViewTab)
HXDLIN(4202)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(4203)		 ::backend::ui::PsychUITab tab = this->upperBox->getTab(HX_("View",85,5e,28,39));
HXLINE(4204)		 ::flixel::group::FlxTypedSpriteGroup tab_group = tab->menu;
HXLINE(4205)		Float btnX = (tab->x - this->upperBox->x);
HXLINE(4206)		int btnY = 1;
HXLINE(4207)		int btnWid = ::Std_obj::_hx_int(tab->get_width());
HXLINE(4209)		if (::hx::IsNotNull( this->chartEditorSave->data->__Field(HX_("waveformEnabled",84,2e,4a,6a),::hx::paccDynamic) )) {
HXLINE(4210)			this->waveformEnabled = ( (bool)(this->chartEditorSave->data->__Field(HX_("waveformEnabled",84,2e,4a,6a),::hx::paccDynamic)) );
            		}
HXLINE(4211)		if (::hx::IsNotNull( this->chartEditorSave->data->__Field(HX_("waveformTarget",ae,3a,72,0f),::hx::paccDynamic) )) {
HXLINE(4212)			this->waveformTarget = ( (::String)(this->chartEditorSave->data->__Field(HX_("waveformTarget",ae,3a,72,0f),::hx::paccDynamic)) );
            		}
HXLINE(4213)		if (::hx::IsNotNull( this->chartEditorSave->data->__Field(HX_("waveformColor",a6,04,f8,69),::hx::paccDynamic) )) {
HXLINE(4214)			 ::flixel::FlxSprite _hx_tmp = this->waveformSprite;
HXDLIN(4214)			::String color = ( (::String)(this->chartEditorSave->data->__Field(HX_("waveformColor",a6,04,f8,69),::hx::paccDynamic)) );
HXDLIN(4214)			 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN(4214)			::String color1 = ::StringTools_obj::trim(hideChars->split(color)->join(HX_("",00,00,00,00)));
HXDLIN(4214)			if (::StringTools_obj::startsWith(color1,HX_("0x",48,2a,00,00))) {
HXLINE(  59)				color1 = color1.substring((color1.length - 6),null());
            			}
HXLINE(4214)			 ::Dynamic colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color1);
HXDLIN(4214)			if (::hx::IsNull( colorNum )) {
HXLINE(  62)				colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color1));
            			}
HXLINE(4214)			int _hx_tmp1;
HXDLIN(4214)			if (::hx::IsNotNull( colorNum )) {
HXLINE(4214)				_hx_tmp1 = ( (int)(colorNum) );
            			}
            			else {
HXLINE(4214)				_hx_tmp1 = -1;
            			}
HXDLIN(4214)			_hx_tmp->set_color(_hx_tmp1);
            		}
HXLINE(4216)		this->showLastGridButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("",00,00,00,00), ::Dynamic(new _hx_Closure_0(_gthis)),btnWid,null());
HXLINE(4221)		this->showLastGridButton->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(4222)		tab_group->add(this->showLastGridButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(4224)		btnY = (btnY + 20);
HXLINE(4225)		this->showNextGridButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("",00,00,00,00), ::Dynamic(new _hx_Closure_1(_gthis)),btnWid,null());
HXLINE(4230)		this->showNextGridButton->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(4231)		tab_group->add(this->showNextGridButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(4233)		btnY = (btnY + 1);
HXLINE(4234)		btnY = (btnY + 20);
HXLINE(4235)		this->noteTypeLabelsButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("",00,00,00,00), ::Dynamic(new _hx_Closure_2(_gthis)),btnWid,null());
HXLINE(4240)		this->noteTypeLabelsButton->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(4241)		tab_group->add(this->noteTypeLabelsButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(4243)		btnY = (btnY + 1);
HXLINE(4244)		btnY = (btnY + 20);
HXLINE(4245)		::String _hx_tmp2;
HXDLIN(4245)		if (this->vortexEnabled) {
HXLINE(4245)			_hx_tmp2 = HX_("  Vortex Editor ON",80,67,26,b4);
            		}
            		else {
HXLINE(4245)			_hx_tmp2 = HX_("  Vortex Editor OFF",ce,21,74,ed);
            		}
HXDLIN(4245)		this->vortexEditorButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,_hx_tmp2, ::Dynamic(new _hx_Closure_3(_gthis)),btnWid,null());
HXLINE(4259)		this->vortexEditorButton->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(4260)		tab_group->add(this->vortexEditorButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(4262)		btnY = (btnY + 1);
HXLINE(4263)		btnY = (btnY + 20);
HXLINE(4264)		 ::backend::ui::PsychUIButton btn =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Waveform...",71,80,00,43), ::Dynamic(new _hx_Closure_8(_gthis)),btnWid,null());
HXLINE(4319)		btn->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(4320)		tab_group->add(btn).StaticCast<  ::flixel::FlxSprite >();
HXLINE(4322)		btnY = (btnY + 20);
HXLINE(4323)		 ::backend::ui::PsychUIButton btn1 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Go to...",7b,d5,b0,2b), ::Dynamic(new _hx_Closure_14(_gthis)),btnWid,null());
HXLINE(4398)		btn1->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(4399)		tab_group->add(btn1).StaticCast<  ::flixel::FlxSprite >();
HXLINE(4401)		btnY = (btnY + 1);
HXLINE(4402)		btnY = (btnY + 20);
HXLINE(4403)		 ::backend::ui::PsychUIButton btn2 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Theme...",a5,15,60,78), ::Dynamic(new _hx_Closure_26(_gthis)),btnWid,null());
HXLINE(4544)		btn2->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(4545)		tab_group->add(btn2).StaticCast<  ::flixel::FlxSprite >();
HXLINE(4547)		btnY = (btnY + 20);
HXLINE(4548)		 ::backend::ui::PsychUIButton btn3 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btnX,btnY,HX_("  Reset UI Boxes",de,00,90,35), ::Dynamic(new _hx_Closure_27(_gthis,btn2)),btnWid,null());
HXLINE(4554)		btn3->text->set_alignment(HX_("left",07,08,b0,47));
HXLINE(4555)		tab_group->add(btn3).StaticCast<  ::flixel::FlxSprite >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addViewTab,(void))

void ChartingState_obj::updateChartData(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4559_updateChartData)
HXLINE(4560)		{
HXLINE(4560)			int _g_current = 0;
HXDLIN(4560)			::Array< ::Dynamic> _g_array = ( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(4560)			while((_g_current < _g_array->length)){
HXLINE(4560)				 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN(4560)				_g_current = (_g_current + 1);
HXDLIN(4560)				int _g_key = (_g_current - 1);
HXDLIN(4560)				int secNum = _g_key;
HXDLIN(4560)				 ::Dynamic section = _g_value;
HXLINE(4561)				 ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(secNum)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::cpp::VirtualArray_obj::__new(0),::hx::paccDynamic);
            			}
            		}
HXLINE(4563)		this->notes->sort(::states::PlayState_obj::sortByTime_dyn());
HXLINE(4564)		int noteSec = 0;
HXLINE(4565)		Float nextSectionTime = this->cachedSectionTimes->__get((noteSec + 1));
HXLINE(4566)		Float curSectionTime = this->cachedSectionTimes->__get(noteSec);
HXLINE(4568)		{
HXLINE(4568)			int _g_current1 = 0;
HXDLIN(4568)			::Array< ::Dynamic> _g_array1 = this->notes;
HXDLIN(4568)			while((_g_current1 < _g_array1->length)){
HXLINE(4568)				 ::states::editors::content::MetaNote _g_value1 = _g_array1->__get(_g_current1).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(4568)				_g_current1 = (_g_current1 + 1);
HXDLIN(4568)				int _g_key1 = (_g_current1 - 1);
HXDLIN(4568)				int num = _g_key1;
HXDLIN(4568)				 ::states::editors::content::MetaNote note = _g_value1;
HXLINE(4569)				{
HXLINE(4570)					if (::hx::IsNull( note )) {
HXLINE(4570)						continue;
            					}
HXLINE(4572)					while((this->cachedSectionTimes->__get((noteSec + 1)) <= note->strumTime)){
HXLINE(4574)						noteSec = (noteSec + 1);
HXLINE(4575)						nextSectionTime = this->cachedSectionTimes->__get((noteSec + 1));
HXLINE(4576)						curSectionTime = this->cachedSectionTimes->__get(noteSec);
            					}
HXLINE(4579)					::cpp::VirtualArray arr = ( (::cpp::VirtualArray)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(noteSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXLINE(4581)					arr->push(note->songData);
            				}
            			}
            		}
HXLINE(4584)		this->events->sort(::states::PlayState_obj::sortByTime_dyn());
HXLINE(4585)		::states::PlayState_obj::SONG->__SetField(HX_("events",19,4f,6a,96),::cpp::VirtualArray_obj::__new(0),::hx::paccDynamic);
HXLINE(4586)		{
HXLINE(4586)			int _g = 0;
HXDLIN(4586)			::Array< ::Dynamic> _g1 = this->events;
HXDLIN(4586)			while((_g < _g1->length)){
HXLINE(4586)				 ::states::editors::content::EventMetaNote event = _g1->__get(_g).StaticCast<  ::states::editors::content::EventMetaNote >();
HXDLIN(4586)				_g = (_g + 1);
HXLINE(4587)				( (::cpp::VirtualArray)(::states::PlayState_obj::SONG->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) )->push(event->songData);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateChartData,(void))

void ChartingState_obj::saveChart(::hx::Null< bool >  __o_canQuickSave){
            		bool canQuickSave = __o_canQuickSave.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4591_saveChart)
HXDLIN(4591)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(4592)		this->updateChartData();
HXLINE(4593)		::String chartData = ::states::editors::content::PsychJsonPrinter_obj::print(::states::PlayState_obj::SONG,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_336,2));
HXLINE(4594)		bool _hx_tmp;
HXDLIN(4594)		if (canQuickSave) {
HXLINE(4594)			_hx_tmp = ::hx::IsNotNull( ::backend::Song_obj::chartPath );
            		}
            		else {
HXLINE(4594)			_hx_tmp = false;
            		}
HXDLIN(4594)		if (_hx_tmp) {
HXLINE(4596)			::sys::io::File_obj::saveContent(::backend::Song_obj::chartPath,chartData);
HXLINE(4597)			this->showOutput((HX_("Chart saved successfully to: ",ff,aa,7c,d0) + ::backend::Song_obj::chartPath),null());
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::ChartingState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4605_saveChart)
HXLINE(4606)				::String newPath = _gthis->fileDialog->path;
HXLINE(4607)				::backend::Song_obj::chartPath = ::StringTools_obj::replace(newPath,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE(4608)				_gthis->reloadNotesDropdowns();
HXLINE(4609)				_gthis->showOutput((HX_("Chart saved successfully to: ",ff,aa,7c,d0) + newPath),null());
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::ChartingState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4611_saveChart)
HXLINE(4611)				_gthis->showOutput(HX_("Error on saving chart!",e0,57,cd,ac),true);
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(4601)			::String path = ( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(4601)			 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(4601)			 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(4601)			::String chartName = (::StringTools_obj::trim(hideChars->replace(invalidChars->replace(path,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase() + HX_(".json",56,f1,d6,c2));
HXLINE(4602)			if (::hx::IsNotNull( ::backend::Song_obj::chartPath )) {
HXLINE(4602)				::String chartName1 = ::backend::Song_obj::chartPath;
HXDLIN(4602)				chartName = ::StringTools_obj::trim(chartName1.substr(::backend::Song_obj::chartPath.lastIndexOf(HX_("/",2f,00,00,00),null()),null()));
            			}
HXLINE(4603)			this->fileDialog->save(chartName,chartData, ::Dynamic(new _hx_Closure_0(_gthis)),null(), ::Dynamic(new _hx_Closure_1(_gthis)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,saveChart,(void))

 ::Dynamic ChartingState_obj::getCurChartSection(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4617_getCurChartSection)
HXDLIN(4617)		if (::hx::IsNotNull( ::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic) )) {
HXDLIN(4617)			return  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSec);
            		}
            		else {
HXDLIN(4617)			return null();
            		}
HXDLIN(4617)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,getCurChartSection,return )

void ChartingState_obj::updateNotesRGB(){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4621_updateNotesRGB)
HXLINE(4622)		::states::PlayState_obj::SONG->__SetField(HX_("disableNoteRGB",33,ad,d1,4a),this->noRGBCheckBox->checked,::hx::paccDynamic);
HXLINE(4624)		{
HXLINE(4624)			int _g = 0;
HXDLIN(4624)			::Array< ::Dynamic> _g1 = this->notes;
HXDLIN(4624)			while((_g < _g1->length)){
HXLINE(4624)				 ::states::editors::content::MetaNote note = _g1->__get(_g).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(4624)				_g = (_g + 1);
HXLINE(4626)				if (::hx::IsNull( note )) {
HXLINE(4626)					continue;
            				}
HXLINE(4628)				note->rgbShader->set_enabled(!(this->noRGBCheckBox->checked));
HXLINE(4629)				if (note->rgbShader->enabled) {
HXLINE(4631)					::Array< ::Dynamic> data = ::backend::NoteTypesConfig_obj::loadNoteTypeData(note->noteType);
HXLINE(4632)					bool _hx_tmp;
HXDLIN(4632)					if (::hx::IsNotNull( data )) {
HXLINE(4632)						_hx_tmp = (data->length < 1);
            					}
            					else {
HXLINE(4632)						_hx_tmp = true;
            					}
HXDLIN(4632)					if (_hx_tmp) {
HXLINE(4632)						continue;
            					}
HXLINE(4634)					{
HXLINE(4634)						int _g2 = 0;
HXDLIN(4634)						while((_g2 < data->length)){
HXLINE(4634)							 ::Dynamic line = data->__get(_g2);
HXDLIN(4634)							_g2 = (_g2 + 1);
HXLINE(4636)							::String prop = ( (::Array< ::String >)(line->__Field(HX_("property",55,48,38,ac),::hx::paccDynamic)) )->join(HX_(".",2e,00,00,00));
HXLINE(4637)							if ((prop == HX_("rgbShader.enabled",25,3e,3a,c4))) {
HXLINE(4638)								note->rgbShader->set_enabled(( (bool)(line->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) ));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(4643)		{
HXLINE(4643)			 ::Dynamic filter = null();
HXDLIN(4643)			 ::flixel::group::FlxTypedGroupIterator note1 =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->strumLineNotes->members,filter);
HXDLIN(4643)			while(note1->hasNext()){
HXLINE(4643)				 ::objects::StrumNote note2 = note1->next().StaticCast<  ::objects::StrumNote >();
HXLINE(4644)				note2->rgbShader->set_enabled(!(this->noRGBCheckBox->checked));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateNotesRGB,(void))

void ChartingState_obj::updateGridVisibility(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4648_updateGridVisibility)
HXLINE(4649)		::String _hx_tmp;
HXDLIN(4649)		if (this->showPreviousSection) {
HXLINE(4649)			_hx_tmp = HX_("  Hide Last Section",19,5c,9a,cf);
            		}
            		else {
HXLINE(4649)			_hx_tmp = HX_("  Show Last Section",fe,f2,e3,bf);
            		}
HXDLIN(4649)		this->showLastGridButton->text->set_text(_hx_tmp);
HXLINE(4650)		::String _hx_tmp1;
HXDLIN(4650)		if (this->showNextSection) {
HXLINE(4650)			_hx_tmp1 = HX_("  Hide Next Section",b6,3b,07,18);
            		}
            		else {
HXLINE(4650)			_hx_tmp1 = HX_("  Show Next Section",9b,d2,50,08);
            		}
HXDLIN(4650)		this->showNextGridButton->text->set_text(_hx_tmp1);
HXLINE(4652)		bool _hx_tmp2;
HXDLIN(4652)		if ((this->curSec > 0)) {
HXLINE(4652)			_hx_tmp2 = this->showPreviousSection;
            		}
            		else {
HXLINE(4652)			_hx_tmp2 = false;
            		}
HXDLIN(4652)		this->prevGridBg->set_visible(_hx_tmp2);
HXLINE(4653)		bool _hx_tmp3;
HXDLIN(4653)		if ((this->curSec < (( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length - 1))) {
HXLINE(4653)			_hx_tmp3 = this->showNextSection;
            		}
            		else {
HXLINE(4653)			_hx_tmp3 = false;
            		}
HXDLIN(4653)		this->nextGridBg->set_visible(_hx_tmp3);
HXLINE(4655)		::String _hx_tmp4;
HXDLIN(4655)		if (this->showNoteTypeLabels) {
HXLINE(4655)			_hx_tmp4 = HX_("  Hide Note Labels",2f,b2,65,0f);
            		}
            		else {
HXLINE(4655)			_hx_tmp4 = HX_("  Show Note Labels",ea,3e,77,4e);
            		}
HXDLIN(4655)		this->noteTypeLabelsButton->text->set_text(_hx_tmp4);
HXLINE(4656)		{
HXLINE(4656)			::Dynamic map = ::states::editors::content::MetaNote_obj::noteTypeTexts;
HXDLIN(4656)			::Dynamic _g_map = map;
HXDLIN(4656)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN(4656)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(4656)				int key = ( (int)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(4656)				 ::flixel::text::FlxText _g_value = ( ( ::flixel::text::FlxText)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN(4656)				int _g_key = key;
HXDLIN(4656)				int num = _g_key;
HXDLIN(4656)				 ::flixel::text::FlxText text = _g_value;
HXLINE(4657)				text->set_visible(this->showNoteTypeLabels);
            			}
            		}
HXLINE(4658)		this->softReloadNotes(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateGridVisibility,(void))

void ChartingState_obj::adaptNotesToNewTimes(::Array< Float > oldTimes){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4662_adaptNotesToNewTimes)
HXLINE(4663)		this->undoActions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4664)		this->setSongPlaying(false);
HXLINE(4665)		Float Value = ((this->scrollY + (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) ))) - this->gridBg->y);
HXDLIN(4665)		Float Value1 = (Value / this->gridBg->get_height());
HXDLIN(4665)		Float lowerBound;
HXDLIN(4665)		if ((Value1 < ((Float)0.000001))) {
HXLINE(4665)			lowerBound = ((Float)0.000001);
            		}
            		else {
HXLINE(4665)			lowerBound = Value1;
            		}
HXDLIN(4665)		Float gridLerp;
HXDLIN(4665)		if ((lowerBound > ((Float)0.999999))) {
HXLINE(4665)			gridLerp = ((Float)0.999999);
            		}
            		else {
HXLINE(4665)			gridLerp = lowerBound;
            		}
HXLINE(4666)		this->notes->sort(::states::PlayState_obj::sortByTime_dyn());
HXLINE(4667)		this->_cacheSections();
HXLINE(4669)		int noteSec = 0;
HXLINE(4670)		Float oldNextSectionTime = oldTimes->__get((noteSec + 1));
HXLINE(4671)		Float oldCurSectionTime = oldTimes->__get(noteSec);
HXLINE(4672)		Float nextSectionTime = this->cachedSectionTimes->__get((noteSec + 1));
HXLINE(4673)		Float curSectionTime = this->cachedSectionTimes->__get(noteSec);
HXLINE(4675)		{
HXLINE(4675)			int _g_current = 0;
HXDLIN(4675)			::Array< ::Dynamic> _g_array = this->notes;
HXDLIN(4675)			while((_g_current < _g_array->length)){
HXLINE(4675)				 ::states::editors::content::MetaNote _g_value = _g_array->__get(_g_current).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(4675)				_g_current = (_g_current + 1);
HXDLIN(4675)				int _g_key = (_g_current - 1);
HXDLIN(4675)				int num = _g_key;
HXDLIN(4675)				 ::states::editors::content::MetaNote note = _g_value;
HXLINE(4676)				{
HXLINE(4677)					bool _hx_tmp;
HXDLIN(4677)					if (::hx::IsNotNull( note )) {
HXLINE(4677)						_hx_tmp = (note->strumTime <= 0);
            					}
            					else {
HXLINE(4677)						_hx_tmp = true;
            					}
HXDLIN(4677)					if (_hx_tmp) {
HXLINE(4677)						continue;
            					}
HXLINE(4679)					while(true){
HXLINE(4679)						bool _hx_tmp1;
HXDLIN(4679)						if (((noteSec + 2) < oldTimes->length)) {
HXLINE(4679)							_hx_tmp1 = (oldTimes->__get((noteSec + 1)) <= note->strumTime);
            						}
            						else {
HXLINE(4679)							_hx_tmp1 = false;
            						}
HXDLIN(4679)						if (!(_hx_tmp1)) {
HXLINE(4679)							goto _hx_goto_347;
            						}
HXLINE(4681)						noteSec = (noteSec + 1);
HXLINE(4682)						oldNextSectionTime = oldTimes->__get((noteSec + 1));
HXLINE(4683)						oldCurSectionTime = oldTimes->__get(noteSec);
HXLINE(4684)						nextSectionTime = this->cachedSectionTimes->__get((noteSec + 1));
HXLINE(4685)						curSectionTime = this->cachedSectionTimes->__get(noteSec);
HXLINE(4687)						if (((noteSec + 1) >= this->cachedSectionTimes->length)) {
HXLINE(4689)							::haxe::Log_obj::trace(HX_("failsafe, cancel early and delete notes after this",e9,ee,15,70),::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),4689,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("adaptNotesToNewTimes",00,0a,63,23)));
HXLINE(4690)							bool changedSelected = false;
HXLINE(4691)							{
HXLINE(4691)								int _g = num;
HXDLIN(4691)								int _g1 = this->notes->length;
HXDLIN(4691)								while((_g < _g1)){
HXLINE(4691)									_g = (_g + 1);
HXDLIN(4691)									int i = (_g - 1);
HXLINE(4693)									 ::states::editors::content::MetaNote n = this->notes->__get(num).StaticCast<  ::states::editors::content::MetaNote >();
HXLINE(4694)									if (::hx::IsNotNull( n )) {
HXLINE(4696)										if (this->selectedNotes->contains(n)) {
HXLINE(4698)											this->selectedNotes->remove(n);
HXLINE(4699)											changedSelected = true;
            										}
HXLINE(4701)										this->notes->remove(n);
HXLINE(4702)										note->destroy();
            									}
            								}
            							}
HXLINE(4705)							if (changedSelected) {
HXLINE(4705)								this->onSelectNote();
            							}
HXLINE(4706)							this->loadSection(null());
HXLINE(4707)							return;
            						}
            					}
            					_hx_goto_347:;
HXLINE(4712)					bool shouldBound;
HXDLIN(4712)					if ((note->strumTime >= oldCurSectionTime)) {
HXLINE(4712)						shouldBound = (note->strumTime < oldNextSectionTime);
            					}
            					else {
HXLINE(4712)						shouldBound = false;
            					}
HXLINE(4713)					Float strumTime = note->strumTime;
HXLINE(4715)					Float ratio = ((nextSectionTime - curSectionTime) / (oldNextSectionTime - oldCurSectionTime));
HXLINE(4716)					Float adaptedStrumTime = (((note->strumTime - oldCurSectionTime) * ratio) + curSectionTime);
HXLINE(4717)					note->setStrumTime(adaptedStrumTime);
HXLINE(4718)					if (shouldBound) {
HXLINE(4719)						Float Value2 = note->strumTime;
HXDLIN(4719)						Float lowerBound1;
HXDLIN(4719)						bool lowerBound2;
HXDLIN(4719)						if (::hx::IsNotNull( curSectionTime )) {
HXLINE(4719)							lowerBound2 = (Value2 < curSectionTime);
            						}
            						else {
HXLINE(4719)							lowerBound2 = false;
            						}
HXDLIN(4719)						if (lowerBound2) {
HXLINE(4719)							lowerBound1 = curSectionTime;
            						}
            						else {
HXLINE(4719)							lowerBound1 = Value2;
            						}
HXDLIN(4719)						Float _hx_tmp2;
HXDLIN(4719)						bool _hx_tmp3;
HXDLIN(4719)						if (::hx::IsNotNull( nextSectionTime )) {
HXLINE(4719)							_hx_tmp3 = (lowerBound1 > nextSectionTime);
            						}
            						else {
HXLINE(4719)							_hx_tmp3 = false;
            						}
HXDLIN(4719)						if (_hx_tmp3) {
HXLINE(4719)							_hx_tmp2 = nextSectionTime;
            						}
            						else {
HXLINE(4719)							_hx_tmp2 = lowerBound1;
            						}
HXDLIN(4719)						note->setStrumTime(_hx_tmp2);
            					}
HXLINE(4721)					this->positionNoteYOnTime(note,noteSec);
HXLINE(4722)					note->updateSustainToStepCrochet((this->cachedSectionCrochets->__get(noteSec) / ( (Float)(4) )));
            				}
            			}
            		}
HXLINE(4725)		{
HXLINE(4725)			int _g2 = 0;
HXDLIN(4725)			::Array< ::Dynamic> _g3 = this->events;
HXDLIN(4725)			while((_g2 < _g3->length)){
HXLINE(4725)				 ::states::editors::content::EventMetaNote event = _g3->__get(_g2).StaticCast<  ::states::editors::content::EventMetaNote >();
HXDLIN(4725)				_g2 = (_g2 + 1);
HXLINE(4727)				int secNum = 0;
HXLINE(4728)				{
HXLINE(4728)					int _g4 = 0;
HXDLIN(4728)					::Array< Float > _g5 = this->cachedSectionTimes;
HXDLIN(4728)					while((_g4 < _g5->length)){
HXLINE(4728)						Float time = _g5->__get(_g4);
HXDLIN(4728)						_g4 = (_g4 + 1);
HXLINE(4730)						if ((time > event->strumTime)) {
HXLINE(4730)							goto _hx_goto_350;
            						}
HXLINE(4731)						secNum = (secNum + 1);
            					}
            					_hx_goto_350:;
            				}
HXLINE(4733)				this->positionNoteYOnTime(event,secNum);
            			}
            		}
HXLINE(4736)		Float time1 = ::flixel::math::FlxMath_obj::remapToRange(gridLerp,( (Float)(0) ),( (Float)(1) ),this->cachedSectionTimes->__get(this->curSec),this->cachedSectionTimes->__get((this->curSec + 1)));
HXLINE(4737)		if (::Math_obj::isNaN(time1)) {
HXLINE(4739)			time1 = ( (Float)(0) );
HXLINE(4740)			this->curSec = 0;
            		}
HXLINE(4743)		bool _hx_tmp4;
HXDLIN(4743)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(4743)			_hx_tmp4 = (time1 >= ::flixel::FlxG_obj::sound->music->_length);
            		}
            		else {
HXLINE(4743)			_hx_tmp4 = false;
            		}
HXDLIN(4743)		if (_hx_tmp4) {
HXLINE(4745)			time1 = (::flixel::FlxG_obj::sound->music->_length - ( (Float)(1) ));
HXLINE(4746)			this->curSec = (( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length - 1);
            		}
HXLINE(4748)		::flixel::FlxG_obj::sound->music->set_time(time1);
HXLINE(4749)		::backend::Conductor_obj::songPosition = time1;
HXLINE(4750)		this->forceDataUpdate = true;
HXLINE(4751)		this->loadSection(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,adaptNotesToNewTimes,(void))

void ChartingState_obj::UIEvent(::String id, ::Dynamic sender){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4757_UIEvent)
HXDLIN(4757)		::String _hx_switch_0 = id;
            		if (  (_hx_switch_0==::backend::ui::PsychUIBox_obj::CLICK_EVENT) ){
HXLINE(4763)			this->ignoreClickForThisFrame = true;
HXLINE(4764)			if (::hx::IsInstanceEq( sender,this->upperBox )) {
HXLINE(4764)				this->updateUpperBoxBg();
            			}
HXLINE(4762)			goto _hx_goto_352;
            		}
            		if (  (_hx_switch_0==::backend::ui::PsychUIDropDownMenu_obj::CLICK_EVENT) ||  (_hx_switch_0==::backend::ui::PsychUIButton_obj::CLICK_EVENT) ){
HXLINE(4760)			this->ignoreClickForThisFrame = true;
HXDLIN(4760)			goto _hx_goto_352;
            		}
            		if (  (_hx_switch_0==::backend::ui::PsychUIBox_obj::DROP_EVENT) ){
HXLINE(4774)			this->chartEditorSave->data->__SetField(HX_("mainBoxPosition",1b,66,7b,2e),::cpp::VirtualArray_obj::__new(2)->init(0,this->mainBox->x)->init(1,this->mainBox->y),::hx::paccDynamic);
HXLINE(4775)			this->chartEditorSave->data->__SetField(HX_("infoBoxPosition",06,18,d8,2d),::cpp::VirtualArray_obj::__new(2)->init(0,this->infoBox->x)->init(1,this->infoBox->y),::hx::paccDynamic);
HXLINE(4773)			goto _hx_goto_352;
            		}
            		if (  (_hx_switch_0==::backend::ui::PsychUIBox_obj::MINIMIZE_EVENT) ){
HXLINE(4767)			if (::hx::IsInstanceEq( sender,this->upperBox )) {
HXLINE(4769)				this->upperBox->bg->set_visible(!(this->upperBox->isMinimized));
HXLINE(4770)				this->updateUpperBoxBg();
            			}
HXLINE(4767)			goto _hx_goto_352;
            		}
            		_hx_goto_352:;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,UIEvent,(void))

void ChartingState_obj::updateUpperBoxBg(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4781_updateUpperBoxBg)
HXDLIN(4781)		if (::hx::IsNotNull( this->upperBox->selectedTab )) {
HXLINE(4783)			 ::flixel::group::FlxTypedSpriteGroup menu = this->upperBox->selectedTab->menu;
HXLINE(4784)			 ::flixel::FlxSprite _hx_tmp = this->upperBox->bg;
HXDLIN(4784)			Float _hx_tmp1 = this->upperBox->x;
HXDLIN(4784)			int _hx_tmp2 = this->upperBox->selectedIndex;
HXDLIN(4784)			Float _hx_tmp3 = this->upperBox->get_width();
HXDLIN(4784)			_hx_tmp->set_x((_hx_tmp1 + (( (Float)(_hx_tmp2) ) * (_hx_tmp3 / ( (Float)(this->upperBox->tabs->length) )))));
HXLINE(4785)			 ::flixel::FlxSprite _hx_tmp4 = this->upperBox->bg;
HXDLIN(4785)			Float _hx_tmp5 = menu->get_width();
HXDLIN(4785)			_hx_tmp4->setGraphicSize(_hx_tmp5,(menu->get_height() + 21));
HXLINE(4786)			this->upperBox->bg->updateHitbox();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateUpperBoxBg,(void))

void ChartingState_obj::openEditorPlayState(){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4791_openEditorPlayState)
HXLINE(4792)		if (::hx::IsNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(4794)			this->showOutput(HX_("Load a valid song to preview!",30,c6,4d,49),true);
HXLINE(4795)			return;
            		}
HXLINE(4797)		this->setSongPlaying(false);
HXLINE(4798)		this->chartEditorSave->flush(null());
HXLINE(4800)		this->openSubState( ::states::editors::content::EditorPlayState_obj::__alloc( HX_CTX ,this->notes,::Array_obj< ::Dynamic>::__new(2)->init(0,this->vocals)->init(1,this->opponentVocals)));
HXLINE(4801)		this->upperBox->set_isMinimized(true);
HXLINE(4802)		 ::backend::ui::PsychUIBox _hx_tmp = this->upperBox;
HXDLIN(4802)		 ::backend::ui::PsychUIBox _hx_tmp1 = this->mainBox;
HXDLIN(4802)		_hx_tmp->set_visible(_hx_tmp1->set_visible(this->infoBox->set_visible(false)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,openEditorPlayState,(void))

void ChartingState_obj::goToPlayState(){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4806_goToPlayState)
HXLINE(4807)		this->persistentUpdate = false;
HXLINE(4808)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE(4809)		this->chartEditorSave->flush(null());
HXLINE(4811)		this->setSongPlaying(false);
HXLINE(4812)		this->updateChartData();
HXLINE(4813)		::backend::StageData_obj::loadDirectory(::states::PlayState_obj::SONG);
HXLINE(4814)		::backend::MusicBeatState_obj::switchState(::states::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::states::PlayState_obj::__alloc( HX_CTX )) ),false,true));
HXLINE(4815)		::backend::ClientPrefs_obj::toggleVolumeKeys(true);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,goToPlayState,(void))

void ChartingState_obj::openSubState( ::flixel::FlxSubState SubState){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4819_openSubState)
HXLINE(4820)		if (!(this->persistentUpdate)) {
HXLINE(4820)			this->setSongPlaying(false);
            		}
HXLINE(4821)		this->super::openSubState(SubState);
            	}


void ChartingState_obj::closeSubState(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4825_closeSubState)
HXLINE(4826)		::backend::ClientPrefs_obj::toggleVolumeKeys(true);
HXLINE(4827)		this->super::closeSubState();
HXLINE(4828)		this->upperBox->set_isMinimized(true);
HXLINE(4829)		 ::backend::ui::PsychUIBox _hx_tmp = this->upperBox;
HXDLIN(4829)		 ::backend::ui::PsychUIBox _hx_tmp1 = this->mainBox;
HXDLIN(4829)		_hx_tmp->set_visible(_hx_tmp1->set_visible(this->infoBox->set_visible(true)));
HXLINE(4830)		this->upperBox->bg->set_visible(false);
HXLINE(4831)		this->updateAudioVolume();
            	}


void ChartingState_obj::destroy(){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4835_destroy)
HXLINE(4836)		::objects::Note_obj::globalRgbShaders = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4837)		::backend::NoteTypesConfig_obj::clearNoteTypesData();
HXLINE(4839)		{
HXLINE(4839)			::Dynamic map = ::states::editors::content::MetaNote_obj::noteTypeTexts;
HXDLIN(4839)			::Dynamic _g_map = map;
HXDLIN(4839)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN(4839)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(4839)				int key = ( (int)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(4839)				 ::flixel::text::FlxText _g_value = ( ( ::flixel::text::FlxText)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN(4839)				int _g_key = key;
HXDLIN(4839)				int num = _g_key;
HXDLIN(4839)				 ::flixel::text::FlxText text = _g_value;
HXLINE(4840)				text->destroy();
            			}
            		}
HXLINE(4842)		::states::editors::content::MetaNote_obj::noteTypeTexts =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(4843)		this->fileDialog->destroy();
HXLINE(4844)		this->super::destroy();
            	}


::Array< ::String > ChartingState_obj::loadFileList(::String mainFolder,::String optionalList,::Array< ::String > fileTypes){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4848_loadFileList)
HXLINE(4849)		if (::hx::IsNull( fileTypes )) {
HXLINE(4849)			fileTypes = ::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_371,1);
            		}
HXLINE(4851)		::Array< ::String > fileList = ::Array_obj< ::String >::__new(0);
HXLINE(4852)		if (::hx::IsNotNull( optionalList )) {
HXLINE(4854)			int _g = 0;
HXDLIN(4854)			::String defaultDirectory = null();
HXDLIN(4854)			bool allowDuplicates = false;
HXDLIN(4854)			if (::hx::IsNull( defaultDirectory )) {
HXLINE(4854)				defaultDirectory = HX_("assets/shared/",1e,69,1e,47);
            			}
HXDLIN(4854)			defaultDirectory = ::StringTools_obj::trim(defaultDirectory);
HXDLIN(4854)			if (!(::StringTools_obj::endsWith(defaultDirectory,HX_("/",2f,00,00,00)))) {
HXLINE(4854)				defaultDirectory = (defaultDirectory + HX_("/",2f,00,00,00));
            			}
HXDLIN(4854)			if (!(::StringTools_obj::startsWith(defaultDirectory,HX_("assets/",4c,2a,dc,36)))) {
HXLINE(4854)				defaultDirectory = (HX_("assets/",4c,2a,dc,36) + defaultDirectory);
            			}
HXDLIN(4854)			::Array< ::String > mergedList = ::Array_obj< ::String >::__new(0);
HXDLIN(4854)			::Array< ::String > foldersToCheck = ::Array_obj< ::String >::__new(0);
HXDLIN(4854)			if (::sys::FileSystem_obj::exists((defaultDirectory + optionalList))) {
HXLINE(4854)				foldersToCheck->push((defaultDirectory + optionalList));
            			}
HXDLIN(4854)			bool _hx_tmp;
HXDLIN(4854)			if (::hx::IsNotNull( ::backend::Paths_obj::currentLevel )) {
HXLINE(4854)				_hx_tmp = (::backend::Paths_obj::currentLevel != defaultDirectory);
            			}
            			else {
HXLINE(4854)				_hx_tmp = false;
            			}
HXDLIN(4854)			if (_hx_tmp) {
HXLINE(4854)				::String folder = ::backend::Paths_obj::currentLevel;
HXDLIN(4854)				if (::hx::IsNull( folder )) {
HXLINE(4854)					folder = HX_("shared",a5,5e,2b,1d);
            				}
HXDLIN(4854)				::String pth = (((HX_("assets/",4c,2a,dc,36) + folder) + HX_("/",2f,00,00,00)) + optionalList);
HXDLIN(4854)				bool _hx_tmp1;
HXDLIN(4854)				if (!(foldersToCheck->contains(pth))) {
HXLINE(4854)					_hx_tmp1 = ::sys::FileSystem_obj::exists(pth);
            				}
            				else {
HXLINE(4854)					_hx_tmp1 = false;
            				}
HXDLIN(4854)				if (_hx_tmp1) {
HXLINE(4854)					foldersToCheck->push(pth);
            				}
            			}
HXDLIN(4854)			{
HXLINE(4854)				{
HXLINE(4854)					int _g1 = 0;
HXDLIN(4854)					::Array< ::String > _g2 = ::backend::Mods_obj::globalMods;
HXDLIN(4854)					while((_g1 < _g2->length)){
HXLINE(4854)						::String mod = _g2->__get(_g1);
HXDLIN(4854)						_g1 = (_g1 + 1);
HXDLIN(4854)						::String key = ((mod + HX_("/",2f,00,00,00)) + optionalList);
HXDLIN(4854)						if (::hx::IsNull( key )) {
HXLINE(4854)							key = HX_("",00,00,00,00);
            						}
HXDLIN(4854)						::String folder1 = (HX_("mods/",9e,2f,58,0c) + key);
HXDLIN(4854)						bool _hx_tmp2;
HXDLIN(4854)						if (::sys::FileSystem_obj::exists(folder1)) {
HXLINE(4854)							_hx_tmp2 = !(foldersToCheck->contains(folder1));
            						}
            						else {
HXLINE(4854)							_hx_tmp2 = false;
            						}
HXDLIN(4854)						if (_hx_tmp2) {
HXLINE(4854)							foldersToCheck->push(folder1);
            						}
            					}
            				}
HXDLIN(4854)				::String key1 = optionalList;
HXDLIN(4854)				if (::hx::IsNull( key1 )) {
HXLINE(4854)					key1 = HX_("",00,00,00,00);
            				}
HXDLIN(4854)				::String folder2 = (HX_("mods/",9e,2f,58,0c) + key1);
HXDLIN(4854)				bool _hx_tmp3;
HXDLIN(4854)				if (::sys::FileSystem_obj::exists(folder2)) {
HXLINE(4854)					_hx_tmp3 = !(foldersToCheck->contains(folder2));
            				}
            				else {
HXLINE(4854)					_hx_tmp3 = false;
            				}
HXDLIN(4854)				if (_hx_tmp3) {
HXLINE(4854)					::String key2 = optionalList;
HXDLIN(4854)					if (::hx::IsNull( key2 )) {
HXLINE(4854)						key2 = HX_("",00,00,00,00);
            					}
HXDLIN(4854)					foldersToCheck->push((HX_("mods/",9e,2f,58,0c) + key2));
            				}
HXDLIN(4854)				bool _hx_tmp4;
HXDLIN(4854)				if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE(4854)					_hx_tmp4 = (::backend::Mods_obj::currentModDirectory.length > 0);
            				}
            				else {
HXLINE(4854)					_hx_tmp4 = false;
            				}
HXDLIN(4854)				if (_hx_tmp4) {
HXLINE(4854)					::String key3 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + optionalList);
HXDLIN(4854)					if (::hx::IsNull( key3 )) {
HXLINE(4854)						key3 = HX_("",00,00,00,00);
            					}
HXDLIN(4854)					::String folder3 = (HX_("mods/",9e,2f,58,0c) + key3);
HXDLIN(4854)					bool _hx_tmp5;
HXDLIN(4854)					if (::sys::FileSystem_obj::exists(folder3)) {
HXLINE(4854)						_hx_tmp5 = !(foldersToCheck->contains(folder3));
            					}
            					else {
HXLINE(4854)						_hx_tmp5 = false;
            					}
HXDLIN(4854)					if (_hx_tmp5) {
HXLINE(4854)						foldersToCheck->push(folder3);
            					}
            				}
            			}
HXDLIN(4854)			::Array< ::String > paths = foldersToCheck;
HXDLIN(4854)			::String defaultPath = (defaultDirectory + optionalList);
HXDLIN(4854)			if (paths->contains(defaultPath)) {
HXLINE(4854)				paths->remove(defaultPath);
HXDLIN(4854)				paths->insert(0,defaultPath);
            			}
HXDLIN(4854)			{
HXLINE(4854)				int _g3 = 0;
HXDLIN(4854)				while((_g3 < paths->length)){
HXLINE(4854)					::String file = paths->__get(_g3);
HXDLIN(4854)					_g3 = (_g3 + 1);
HXDLIN(4854)					::String daList = null();
HXDLIN(4854)					if (::sys::FileSystem_obj::exists(file)) {
HXLINE(4854)						daList = ::sys::io::File_obj::getContent(file);
            					}
HXDLIN(4854)					::Array< ::String > list;
HXDLIN(4854)					if (::hx::IsNotNull( daList )) {
HXLINE(4854)						::Array< ::String > daList1 = ::Array_obj< ::String >::__new(0);
HXDLIN(4854)						daList1 = ::StringTools_obj::trim(daList).split(HX_("\n",0a,00,00,00));
HXDLIN(4854)						{
HXLINE(4854)							int _g4 = 0;
HXDLIN(4854)							int _g5 = daList1->length;
HXDLIN(4854)							while((_g4 < _g5)){
HXLINE(4854)								_g4 = (_g4 + 1);
HXDLIN(4854)								int i = (_g4 - 1);
HXDLIN(4854)								daList1[i] = ::StringTools_obj::trim(daList1->__get(i));
            							}
            						}
HXDLIN(4854)						list = daList1;
            					}
            					else {
HXLINE(4854)						list = ::Array_obj< ::String >::__new(0);
            					}
HXDLIN(4854)					{
HXLINE(4854)						int _g6 = 0;
HXDLIN(4854)						while((_g6 < list->length)){
HXLINE(4854)							::String value = list->__get(_g6);
HXDLIN(4854)							_g6 = (_g6 + 1);
HXDLIN(4854)							bool _hx_tmp6;
HXDLIN(4854)							bool _hx_tmp7;
HXDLIN(4854)							if (!(allowDuplicates)) {
HXLINE(4854)								_hx_tmp7 = !(mergedList->contains(value));
            							}
            							else {
HXLINE(4854)								_hx_tmp7 = true;
            							}
HXDLIN(4854)							if (_hx_tmp7) {
HXLINE(4854)								_hx_tmp6 = (value.length > 0);
            							}
            							else {
HXLINE(4854)								_hx_tmp6 = false;
            							}
HXDLIN(4854)							if (_hx_tmp6) {
HXLINE(4854)								mergedList->push(value);
            							}
            						}
            					}
            				}
            			}
HXDLIN(4854)			::Array< ::String > _g7 = mergedList;
HXDLIN(4854)			while((_g < _g7->length)){
HXLINE(4854)				::String file1 = _g7->__get(_g);
HXDLIN(4854)				_g = (_g + 1);
HXLINE(4856)				file1 = ::StringTools_obj::trim(file1);
HXLINE(4857)				bool _hx_tmp8;
HXDLIN(4857)				if ((file1.length > 0)) {
HXLINE(4857)					_hx_tmp8 = !(fileList->contains(file1));
            				}
            				else {
HXLINE(4857)					_hx_tmp8 = false;
            				}
HXDLIN(4857)				if (_hx_tmp8) {
HXLINE(4858)					fileList->push(file1);
            				}
            			}
            		}
HXLINE(4862)		{
HXLINE(4862)			int _g8 = 0;
HXDLIN(4862)			::Array< ::String > foldersToCheck1 = ::Array_obj< ::String >::__new(0);
HXDLIN(4862)			if (::sys::FileSystem_obj::exists((HX_("assets/shared/",1e,69,1e,47) + mainFolder))) {
HXLINE(4862)				foldersToCheck1->push((HX_("assets/shared/",1e,69,1e,47) + mainFolder));
            			}
HXDLIN(4862)			bool _hx_tmp9;
HXDLIN(4862)			if (::hx::IsNotNull( ::backend::Paths_obj::currentLevel )) {
HXLINE(4862)				_hx_tmp9 = (::backend::Paths_obj::currentLevel != HX_("assets/shared/",1e,69,1e,47));
            			}
            			else {
HXLINE(4862)				_hx_tmp9 = false;
            			}
HXDLIN(4862)			if (_hx_tmp9) {
HXLINE(4862)				::String folder4 = ::backend::Paths_obj::currentLevel;
HXDLIN(4862)				if (::hx::IsNull( folder4 )) {
HXLINE(4862)					folder4 = HX_("shared",a5,5e,2b,1d);
            				}
HXDLIN(4862)				::String pth1 = (((HX_("assets/",4c,2a,dc,36) + folder4) + HX_("/",2f,00,00,00)) + mainFolder);
HXDLIN(4862)				bool _hx_tmp10;
HXDLIN(4862)				if (!(foldersToCheck1->contains(pth1))) {
HXLINE(4862)					_hx_tmp10 = ::sys::FileSystem_obj::exists(pth1);
            				}
            				else {
HXLINE(4862)					_hx_tmp10 = false;
            				}
HXDLIN(4862)				if (_hx_tmp10) {
HXLINE(4862)					foldersToCheck1->push(pth1);
            				}
            			}
HXDLIN(4862)			{
HXLINE(4862)				{
HXLINE(4862)					int _g9 = 0;
HXDLIN(4862)					::Array< ::String > _g10 = ::backend::Mods_obj::globalMods;
HXDLIN(4862)					while((_g9 < _g10->length)){
HXLINE(4862)						::String mod1 = _g10->__get(_g9);
HXDLIN(4862)						_g9 = (_g9 + 1);
HXDLIN(4862)						::String key4 = ((mod1 + HX_("/",2f,00,00,00)) + mainFolder);
HXDLIN(4862)						if (::hx::IsNull( key4 )) {
HXLINE(4862)							key4 = HX_("",00,00,00,00);
            						}
HXDLIN(4862)						::String folder5 = (HX_("mods/",9e,2f,58,0c) + key4);
HXDLIN(4862)						bool _hx_tmp11;
HXDLIN(4862)						if (::sys::FileSystem_obj::exists(folder5)) {
HXLINE(4862)							_hx_tmp11 = !(foldersToCheck1->contains(folder5));
            						}
            						else {
HXLINE(4862)							_hx_tmp11 = false;
            						}
HXDLIN(4862)						if (_hx_tmp11) {
HXLINE(4862)							foldersToCheck1->push(folder5);
            						}
            					}
            				}
HXDLIN(4862)				::String key5 = mainFolder;
HXDLIN(4862)				if (::hx::IsNull( key5 )) {
HXLINE(4862)					key5 = HX_("",00,00,00,00);
            				}
HXDLIN(4862)				::String folder6 = (HX_("mods/",9e,2f,58,0c) + key5);
HXDLIN(4862)				bool _hx_tmp12;
HXDLIN(4862)				if (::sys::FileSystem_obj::exists(folder6)) {
HXLINE(4862)					_hx_tmp12 = !(foldersToCheck1->contains(folder6));
            				}
            				else {
HXLINE(4862)					_hx_tmp12 = false;
            				}
HXDLIN(4862)				if (_hx_tmp12) {
HXLINE(4862)					::String key6 = mainFolder;
HXDLIN(4862)					if (::hx::IsNull( key6 )) {
HXLINE(4862)						key6 = HX_("",00,00,00,00);
            					}
HXDLIN(4862)					foldersToCheck1->push((HX_("mods/",9e,2f,58,0c) + key6));
            				}
HXDLIN(4862)				bool _hx_tmp13;
HXDLIN(4862)				if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE(4862)					_hx_tmp13 = (::backend::Mods_obj::currentModDirectory.length > 0);
            				}
            				else {
HXLINE(4862)					_hx_tmp13 = false;
            				}
HXDLIN(4862)				if (_hx_tmp13) {
HXLINE(4862)					::String key7 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + mainFolder);
HXDLIN(4862)					if (::hx::IsNull( key7 )) {
HXLINE(4862)						key7 = HX_("",00,00,00,00);
            					}
HXDLIN(4862)					::String folder7 = (HX_("mods/",9e,2f,58,0c) + key7);
HXDLIN(4862)					bool _hx_tmp14;
HXDLIN(4862)					if (::sys::FileSystem_obj::exists(folder7)) {
HXLINE(4862)						_hx_tmp14 = !(foldersToCheck1->contains(folder7));
            					}
            					else {
HXLINE(4862)						_hx_tmp14 = false;
            					}
HXDLIN(4862)					if (_hx_tmp14) {
HXLINE(4862)						foldersToCheck1->push(folder7);
            					}
            				}
            			}
HXDLIN(4862)			::Array< ::String > _g11 = foldersToCheck1;
HXDLIN(4862)			while((_g8 < _g11->length)){
HXLINE(4862)				::String directory = _g11->__get(_g8);
HXDLIN(4862)				_g8 = (_g8 + 1);
HXLINE(4864)				{
HXLINE(4864)					int _g12 = 0;
HXDLIN(4864)					::Array< ::String > _g13 = ::sys::FileSystem_obj::readDirectory(directory);
HXDLIN(4864)					while((_g12 < _g13->length)){
HXLINE(4864)						::String file2 = _g13->__get(_g12);
HXDLIN(4864)						_g12 = (_g12 + 1);
HXLINE(4866)						::String path = ::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,directory)->init(1,::StringTools_obj::trim(file2)));
HXLINE(4867)						bool _hx_tmp15;
HXDLIN(4867)						if (!(::sys::FileSystem_obj::isDirectory(path))) {
HXLINE(4867)							_hx_tmp15 = !(::StringTools_obj::startsWith(file2,HX_("readme.",40,fc,e4,02)));
            						}
            						else {
HXLINE(4867)							_hx_tmp15 = false;
            						}
HXDLIN(4867)						if (_hx_tmp15) {
HXLINE(4869)							int _g14 = 0;
HXDLIN(4869)							while((_g14 < fileTypes->length)){
HXLINE(4869)								::String fileType = fileTypes->__get(_g14);
HXDLIN(4869)								_g14 = (_g14 + 1);
HXLINE(4871)								::String fileToCheck = file2.substr(0,(file2.length - fileType.length));
HXLINE(4872)								bool _hx_tmp16;
HXDLIN(4872)								bool _hx_tmp17;
HXDLIN(4872)								if ((fileToCheck.length > 0)) {
HXLINE(4872)									_hx_tmp17 = ::StringTools_obj::endsWith(path,fileType);
            								}
            								else {
HXLINE(4872)									_hx_tmp17 = false;
            								}
HXDLIN(4872)								if (_hx_tmp17) {
HXLINE(4872)									_hx_tmp16 = !(fileList->contains(fileToCheck));
            								}
            								else {
HXLINE(4872)									_hx_tmp16 = false;
            								}
HXDLIN(4872)								if (_hx_tmp16) {
HXLINE(4874)									fileList->push(fileToCheck);
HXLINE(4875)									goto _hx_goto_369;
            								}
            							}
            							_hx_goto_369:;
            						}
            					}
            				}
            			}
            		}
HXLINE(4881)		return fileList;
            	}


HX_DEFINE_DYNAMIC_FUNC3(ChartingState_obj,loadFileList,return )

 ::Dynamic ChartingState_obj::loadCharacterFile(::String _hx_char){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4885_loadCharacterFile)
HXLINE(4886)		if (::hx::IsNotNull( _hx_char )) {
HXLINE(4888)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(4890)				::String path = ::backend::Paths_obj::getPath(((HX_("characters/",45,3c,bf,be) + _hx_char) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),null(),null());
HXLINE(4892)				::String unparsedJson = ::sys::io::File_obj::getContent(path);
HXLINE(4896)				return  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,unparsedJson)->doParse();
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE(4898)					{
HXLINE(4898)						null();
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE(4900)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,loadCharacterFile,return )

void ChartingState_obj::overwriteCheck(::String savePath,::String overwriteName,::String saveData, ::Dynamic continueFunc, ::Dynamic __o_continueOnCancel){
            		 ::Dynamic continueOnCancel = __o_continueOnCancel;
            		if (::hx::IsNull(__o_continueOnCancel)) continueOnCancel = false;
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4905_overwriteCheck)
HXDLIN(4905)		 ::states::editors::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(4906)		if (::sys::FileSystem_obj::exists(savePath)) {
            			HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,continueFunc, ::states::editors::ChartingState,_gthis,::String,saveData,::String,savePath) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4909_overwriteCheck)
HXLINE(4910)				_gthis->overwriteSavedSomething = true;
HXLINE(4911)				::sys::io::File_obj::saveContent(savePath,saveData);
HXLINE(4912)				if (::hx::IsNotNull( continueFunc )) {
HXLINE(4912)					continueFunc();
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(4914)			 ::Dynamic _hx_tmp;
HXDLIN(4914)			if (( (bool)(continueOnCancel) )) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,continueFunc) HXARGC(0)
            				void _hx_run(){
            					HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4914_overwriteCheck)
HXLINE(4914)					if (::hx::IsNotNull( continueFunc )) {
HXLINE(4914)						continueFunc();
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(4914)				_hx_tmp =  ::Dynamic(new _hx_Closure_0(continueFunc));
            			}
            			else {
HXLINE(4914)				_hx_tmp = null();
            			}
HXLINE(4908)			this->openSubState( ::states::editors::content::Prompt_obj::__alloc( HX_CTX ,((HX_("Overwrite: \"",b1,18,5f,a1) + overwriteName) + HX_("\"?",dd,1d,00,00)), ::Dynamic(new _hx_Closure_1(continueFunc,_gthis,saveData,savePath)),_hx_tmp,null(),null()));
            		}
            		else {
HXLINE(4918)			this->overwriteSavedSomething = true;
HXLINE(4919)			::sys::io::File_obj::saveContent(savePath,saveData);
HXLINE(4920)			if (::hx::IsNotNull( continueFunc )) {
HXLINE(4920)				continueFunc();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(ChartingState_obj,overwriteCheck,(void))

void ChartingState_obj::addUndoAction(::String action, ::Dynamic data){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run(::Array< ::Dynamic> arr){
            			HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4930_addUndoAction)
HXLINE(4931)			bool destroyFromArr;
HXDLIN(4931)			if (::hx::IsNotNull( arr )) {
HXLINE(4931)				destroyFromArr = (arr->length < 1);
            			}
            			else {
HXLINE(4931)				destroyFromArr = true;
            			}
HXDLIN(4931)			if (destroyFromArr) {
HXLINE(4931)				return;
            			}
HXLINE(4933)			{
HXLINE(4933)				int _g = 0;
HXDLIN(4933)				while((_g < arr->length)){
HXLINE(4933)					 ::states::editors::content::MetaNote note = arr->__get(_g).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(4933)					_g = (_g + 1);
HXLINE(4934)					if (::hx::IsNotNull( note )) {
HXLINE(4935)						note->destroy();
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4928_addUndoAction)
HXLINE(4929)		 ::Dynamic destroyFromArr =  ::Dynamic(new _hx_Closure_0());
HXLINE(4939)		if ((this->currentUndo > 0)) {
HXLINE(4939)			this->undoActions = this->undoActions->slice(this->currentUndo,null());
            		}
HXLINE(4940)		this->currentUndo = 0;
HXLINE(4941)		this->undoActions->insert(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("action",b6,3b,46,16),action)
            			->setFixed(1,HX_("data",2a,56,63,42),data)));
HXLINE(4942)		while((this->undoActions->length > 15)){
HXLINE(4944)			 ::Dynamic lastAction = this->undoActions->pop();
HXLINE(4945)			if (::hx::IsNotNull( lastAction )) {
HXLINE(4947)				::String _hx_switch_0 = ( (::String)(lastAction->__Field(HX_("action",b6,3b,46,16),::hx::paccDynamic)) );
            				if (  (_hx_switch_0==HX_("Delete Note",07,30,b0,81)) ){
HXLINE(4950)					destroyFromArr( ::Dynamic( ::Dynamic(lastAction->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)));
HXLINE(4951)					destroyFromArr( ::Dynamic( ::Dynamic(lastAction->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)));
HXLINE(4949)					goto _hx_goto_378;
            				}
            				if (  (_hx_switch_0==HX_("Move Note",61,13,22,6d)) ){
HXLINE(4953)					destroyFromArr( ::Dynamic( ::Dynamic(lastAction->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("originalNotes",30,d2,bb,fa),::hx::paccDynamic)));
HXLINE(4954)					destroyFromArr( ::Dynamic( ::Dynamic(lastAction->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("originalEvents",4a,8a,50,ce),::hx::paccDynamic)));
HXLINE(4952)					goto _hx_goto_378;
            				}
            				/* default */{
            				}
            				_hx_goto_378:;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,addUndoAction,(void))

void ChartingState_obj::undo(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4962_undo)
HXLINE(4963)		bool _hx_tmp;
HXDLIN(4963)		if (!(this->isMovingNotes)) {
HXLINE(4963)			_hx_tmp = (this->currentUndo >= this->undoActions->length);
            		}
            		else {
HXLINE(4963)			_hx_tmp = true;
            		}
HXDLIN(4963)		if (_hx_tmp) {
HXLINE(4965)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(4965)			_hx_tmp1->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("cancelMenu",39,a4,43,b7)),null(),true,null()),((Float)0.4),null(),null(),null(),null());
HXLINE(4966)			return;
            		}
HXLINE(4969)		 ::Dynamic action = this->undoActions->__get(this->currentUndo);
HXLINE(4970)		::String _hx_switch_0 = ( (::String)(action->__Field(HX_("action",b6,3b,46,16),::hx::paccDynamic)) );
            		if (  (_hx_switch_0==HX_("Add Note",91,46,97,60)) ){
HXLINE(4973)			this->actionRemoveNotes(( (::Array< ::Dynamic>)( ::Dynamic(action->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) ),( (::Array< ::Dynamic>)( ::Dynamic(action->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) ));
HXDLIN(4973)			goto _hx_goto_381;
            		}
            		if (  (_hx_switch_0==HX_("Delete Note",07,30,b0,81)) ){
HXLINE(4976)			this->actionPushNotes(( (::Array< ::Dynamic>)( ::Dynamic(action->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) ),( (::Array< ::Dynamic>)( ::Dynamic(action->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) ));
HXDLIN(4976)			goto _hx_goto_381;
            		}
            		if (  (_hx_switch_0==HX_("Move Note",61,13,22,6d)) ){
HXLINE(4979)			this->actionRemoveNotes(( (::Array< ::Dynamic>)( ::Dynamic(action->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("movedNotes",0e,67,42,4a),::hx::paccDynamic)) ),( (::Array< ::Dynamic>)( ::Dynamic(action->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("movedEvents",ac,37,8c,14),::hx::paccDynamic)) ));
HXLINE(4980)			this->actionPushNotes(( (::Array< ::Dynamic>)( ::Dynamic(action->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("originalNotes",30,d2,bb,fa),::hx::paccDynamic)) ),( (::Array< ::Dynamic>)( ::Dynamic(action->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("originalEvents",4a,8a,50,ce),::hx::paccDynamic)) ));
HXLINE(4981)			this->onSelectNote();
HXLINE(4978)			goto _hx_goto_381;
            		}
            		if (  (_hx_switch_0==HX_("Select Note",96,ff,25,4b)) ){
HXLINE(4984)			this->resetSelectedNotes();
HXLINE(4985)			this->selectedNotes = ( (::Array< ::Dynamic>)( ::Dynamic(action->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("old",a7,98,54,00),::hx::paccDynamic)) );
HXLINE(4986)			if (this->lockedEvents) {
HXLINE(4986)				::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(4986)				{
HXLINE(4986)					int _g1 = 0;
HXDLIN(4986)					::Array< ::Dynamic> _g2 = this->selectedNotes;
HXDLIN(4986)					while((_g1 < _g2->length)){
HXLINE(4986)						 ::states::editors::content::MetaNote v = _g2->__get(_g1).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(4986)						_g1 = (_g1 + 1);
HXDLIN(4986)						if (!(v->isEvent)) {
HXLINE(4986)							_g->push(v);
            						}
            					}
            				}
HXDLIN(4986)				this->selectedNotes = _g;
            			}
HXLINE(4987)			this->onSelectNote();
HXLINE(4983)			goto _hx_goto_381;
            		}
            		_hx_goto_381:;
HXLINE(4989)		this->showOutput(( (::String)((((HX_("Undo #",47,27,d7,94) + (this->currentUndo + 1)) + HX_(": ",a6,32,00,00)) + action->__Field(HX_("action",b6,3b,46,16),::hx::paccDynamic))) ),null());
HXLINE(4990)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN(4990)		_hx_tmp2->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("scrollMenu",4c,d4,18,06)),null(),true,null()),((Float)0.4),null(),null(),null(),null());
HXLINE(4991)		this->currentUndo++;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,undo,(void))

void ChartingState_obj::redo(){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_4994_redo)
HXLINE(4995)		bool _hx_tmp;
HXDLIN(4995)		if (!(this->isMovingNotes)) {
HXLINE(4995)			_hx_tmp = (this->currentUndo < 1);
            		}
            		else {
HXLINE(4995)			_hx_tmp = true;
            		}
HXDLIN(4995)		if (_hx_tmp) {
HXLINE(4997)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(4997)			_hx_tmp1->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("cancelMenu",39,a4,43,b7)),null(),true,null()),((Float)0.4),null(),null(),null(),null());
HXLINE(4998)			return;
            		}
HXLINE(5001)		this->currentUndo--;
HXLINE(5002)		 ::Dynamic action = this->undoActions->__get(this->currentUndo);
HXLINE(5003)		::String _hx_switch_0 = ( (::String)(action->__Field(HX_("action",b6,3b,46,16),::hx::paccDynamic)) );
            		if (  (_hx_switch_0==HX_("Add Note",91,46,97,60)) ){
HXLINE(5006)			this->actionPushNotes(( (::Array< ::Dynamic>)( ::Dynamic(action->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) ),( (::Array< ::Dynamic>)( ::Dynamic(action->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) ));
HXDLIN(5006)			goto _hx_goto_384;
            		}
            		if (  (_hx_switch_0==HX_("Delete Note",07,30,b0,81)) ){
HXLINE(5009)			this->actionRemoveNotes(( (::Array< ::Dynamic>)( ::Dynamic(action->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) ),( (::Array< ::Dynamic>)( ::Dynamic(action->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) ));
HXDLIN(5009)			goto _hx_goto_384;
            		}
            		if (  (_hx_switch_0==HX_("Move Note",61,13,22,6d)) ){
HXLINE(5012)			this->actionRemoveNotes(( (::Array< ::Dynamic>)( ::Dynamic(action->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("originalNotes",30,d2,bb,fa),::hx::paccDynamic)) ),( (::Array< ::Dynamic>)( ::Dynamic(action->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("originalEvents",4a,8a,50,ce),::hx::paccDynamic)) ));
HXLINE(5013)			this->actionPushNotes(( (::Array< ::Dynamic>)( ::Dynamic(action->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("movedNotes",0e,67,42,4a),::hx::paccDynamic)) ),( (::Array< ::Dynamic>)( ::Dynamic(action->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("movedEvents",ac,37,8c,14),::hx::paccDynamic)) ));
HXLINE(5014)			this->onSelectNote();
HXLINE(5011)			goto _hx_goto_384;
            		}
            		if (  (_hx_switch_0==HX_("Select Note",96,ff,25,4b)) ){
HXLINE(5017)			this->resetSelectedNotes();
HXLINE(5018)			this->selectedNotes = ( (::Array< ::Dynamic>)( ::Dynamic(action->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic))->__Field(HX_("current",39,9c,e3,cb),::hx::paccDynamic)) );
HXLINE(5019)			if (this->lockedEvents) {
HXLINE(5019)				::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(5019)				{
HXLINE(5019)					int _g1 = 0;
HXDLIN(5019)					::Array< ::Dynamic> _g2 = this->selectedNotes;
HXDLIN(5019)					while((_g1 < _g2->length)){
HXLINE(5019)						 ::states::editors::content::MetaNote v = _g2->__get(_g1).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(5019)						_g1 = (_g1 + 1);
HXDLIN(5019)						if (!(v->isEvent)) {
HXLINE(5019)							_g->push(v);
            						}
            					}
            				}
HXDLIN(5019)				this->selectedNotes = _g;
            			}
HXLINE(5020)			this->onSelectNote();
HXLINE(5016)			goto _hx_goto_384;
            		}
            		_hx_goto_384:;
HXLINE(5022)		this->showOutput(( (::String)((((HX_("Redo #",a1,d9,29,33) + (this->currentUndo + 1)) + HX_(": ",a6,32,00,00)) + action->__Field(HX_("action",b6,3b,46,16),::hx::paccDynamic))) ),null());
HXLINE(5023)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN(5023)		_hx_tmp2->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("scrollMenu",4c,d4,18,06)),null(),true,null()),((Float)0.4),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,redo,(void))

void ChartingState_obj::actionPushNotes(::Array< ::Dynamic> dataNotes,::Array< ::Dynamic> dataEvents){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_5027_actionPushNotes)
HXLINE(5028)		this->resetSelectedNotes();
HXLINE(5029)		bool _hx_tmp;
HXDLIN(5029)		if (::hx::IsNotNull( dataNotes )) {
HXLINE(5029)			_hx_tmp = (dataNotes->length > 0);
            		}
            		else {
HXLINE(5029)			_hx_tmp = false;
            		}
HXDLIN(5029)		if (_hx_tmp) {
HXLINE(5031)			{
HXLINE(5031)				int _g = 0;
HXDLIN(5031)				while((_g < dataNotes->length)){
HXLINE(5031)					 ::states::editors::content::MetaNote note = dataNotes->__get(_g).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(5031)					_g = (_g + 1);
HXLINE(5033)					if (::hx::IsNotNull( note )) {
HXLINE(5035)						this->notes->push(note);
HXLINE(5036)						this->selectedNotes->push(note);
HXLINE(5037)						note->songData->set(0,note->strumTime);
HXLINE(5038)						note->songData->set(1,note->chartNoteData);
            					}
            				}
            			}
HXLINE(5041)			this->notes->sort(::states::PlayState_obj::sortByTime_dyn());
            		}
HXLINE(5043)		bool _hx_tmp1;
HXDLIN(5043)		if (::hx::IsNotNull( dataEvents )) {
HXLINE(5043)			_hx_tmp1 = (dataEvents->length > 0);
            		}
            		else {
HXLINE(5043)			_hx_tmp1 = false;
            		}
HXDLIN(5043)		if (_hx_tmp1) {
HXLINE(5045)			{
HXLINE(5045)				int _g1 = 0;
HXDLIN(5045)				while((_g1 < dataEvents->length)){
HXLINE(5045)					 ::states::editors::content::EventMetaNote event = dataEvents->__get(_g1).StaticCast<  ::states::editors::content::EventMetaNote >();
HXDLIN(5045)					_g1 = (_g1 + 1);
HXLINE(5047)					if (::hx::IsNotNull( event )) {
HXLINE(5049)						this->events->push(event);
HXLINE(5050)						this->selectedNotes->push(event);
HXLINE(5051)						event->songData->set(0,event->strumTime);
            					}
            				}
            			}
HXLINE(5054)			this->events->sort(::states::PlayState_obj::sortByTime_dyn());
            		}
HXLINE(5056)		this->softReloadNotes(null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,actionPushNotes,(void))

void ChartingState_obj::actionRemoveNotes(::Array< ::Dynamic> dataNotes,::Array< ::Dynamic> dataEvents){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_5060_actionRemoveNotes)
HXLINE(5061)		bool _hx_tmp;
HXDLIN(5061)		if (::hx::IsNotNull( dataNotes )) {
HXLINE(5061)			_hx_tmp = (dataNotes->length > 0);
            		}
            		else {
HXLINE(5061)			_hx_tmp = false;
            		}
HXDLIN(5061)		if (_hx_tmp) {
HXLINE(5063)			int _g = 0;
HXDLIN(5063)			while((_g < dataNotes->length)){
HXLINE(5063)				 ::states::editors::content::MetaNote note = dataNotes->__get(_g).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(5063)				_g = (_g + 1);
HXLINE(5065)				if (::hx::IsNotNull( note )) {
HXLINE(5067)					this->notes->remove(note);
HXLINE(5068)					this->selectedNotes->remove(note);
HXLINE(5070)					if (note->exists) {
HXLINE(5072)						note->colorTransform->redMultiplier = (note->colorTransform->greenMultiplier = (note->colorTransform->blueMultiplier = ( (Float)(1) )));
HXLINE(5073)						if (::hx::IsNotNull( note->animation->_curAnim )) {
HXLINE(5073)							note->animation->_curAnim->set_curFrame(0);
            						}
            					}
            				}
            			}
            		}
HXLINE(5079)		bool _hx_tmp1;
HXDLIN(5079)		if (::hx::IsNotNull( dataEvents )) {
HXLINE(5079)			_hx_tmp1 = (dataEvents->length > 0);
            		}
            		else {
HXLINE(5079)			_hx_tmp1 = false;
            		}
HXDLIN(5079)		if (_hx_tmp1) {
HXLINE(5081)			int _g1 = 0;
HXDLIN(5081)			while((_g1 < dataEvents->length)){
HXLINE(5081)				 ::states::editors::content::EventMetaNote event = dataEvents->__get(_g1).StaticCast<  ::states::editors::content::EventMetaNote >();
HXDLIN(5081)				_g1 = (_g1 + 1);
HXLINE(5083)				if (::hx::IsNotNull( event )) {
HXLINE(5085)					 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN(5085)					bool _hx_tmp3 = this->events->remove(event);
HXDLIN(5085)					_hx_tmp2(_hx_tmp3,::hx::SourceInfo(HX_("source/states/editors/ChartingState.hx",d3,60,b4,06),5085,HX_("states.editors.ChartingState",19,00,5b,f8),HX_("actionRemoveNotes",47,e5,06,02)));
HXLINE(5086)					this->selectedNotes->remove(event);
HXLINE(5088)					if (event->exists) {
HXLINE(5090)						event->colorTransform->redMultiplier = (event->colorTransform->greenMultiplier = (event->colorTransform->blueMultiplier = ( (Float)(1) )));
HXLINE(5091)						if (::hx::IsNotNull( event->animation->_curAnim )) {
HXLINE(5091)							event->animation->_curAnim->set_curFrame(0);
            						}
            					}
            				}
            			}
            		}
HXLINE(5096)		this->softReloadNotes(null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,actionRemoveNotes,(void))

void ChartingState_obj::actionReplaceNotes( ::states::editors::content::MetaNote oldNote, ::states::editors::content::MetaNote newNote){
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_5101_actionReplaceNotes)
HXDLIN(5101)		int _g = 0;
HXDLIN(5101)		::Array< ::Dynamic> _g1 = this->undoActions;
HXDLIN(5101)		while((_g < _g1->length)){
HXDLIN(5101)			 ::Dynamic act = _g1->__get(_g);
HXDLIN(5101)			_g = (_g + 1);
HXLINE(5103)			{
HXLINE(5103)				int _g2 = 0;
HXDLIN(5103)				::Array< ::String > _g3 = ::Reflect_obj::fields( ::Dynamic(act->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic)));
HXDLIN(5103)				while((_g2 < _g3->length)){
HXLINE(5103)					::String field = _g3->__get(_g2);
HXDLIN(5103)					_g2 = (_g2 + 1);
HXLINE(5105)					::Array< ::Dynamic> fld = ( (::Array< ::Dynamic>)(::Reflect_obj::field( ::Dynamic(act->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic)),field)) );
HXLINE(5106)					bool _hx_tmp;
HXDLIN(5106)					if (::hx::IsNotNull( fld )) {
HXLINE(5106)						_hx_tmp = (fld->length > 0);
            					}
            					else {
HXLINE(5106)						_hx_tmp = false;
            					}
HXDLIN(5106)					if (_hx_tmp) {
HXLINE(5107)						int _g_current = 0;
HXDLIN(5107)						::Array< ::Dynamic> _g_array = fld;
HXDLIN(5107)						while((_g_current < _g_array->length)){
HXLINE(5107)							 ::states::editors::content::MetaNote _g_value = _g_array->__get(_g_current).StaticCast<  ::states::editors::content::MetaNote >();
HXDLIN(5107)							_g_current = (_g_current + 1);
HXDLIN(5107)							int _g_key = (_g_current - 1);
HXDLIN(5107)							int num = _g_key;
HXDLIN(5107)							 ::states::editors::content::MetaNote actNote = _g_value;
HXLINE(5108)							if (::hx::IsInstanceEq( actNote,oldNote )) {
HXLINE(5109)								fld[num] = newNote;
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,actionReplaceNotes,(void))

void ChartingState_obj::updateWaveform(){
            	HX_GC_STACKFRAME(&_hx_pos_27e1ce861cc941c0_5116_updateWaveform)
HXLINE(5118)		bool _hx_tmp;
HXDLIN(5118)		bool _hx_tmp1;
HXDLIN(5118)		if ((this->curSec >= 0)) {
HXLINE(5118)			_hx_tmp1 = (this->curSec >= this->cachedSectionTimes->length);
            		}
            		else {
HXLINE(5118)			_hx_tmp1 = true;
            		}
HXDLIN(5118)		if (!(_hx_tmp1)) {
HXLINE(5118)			_hx_tmp = !(this->waveformEnabled);
            		}
            		else {
HXLINE(5118)			_hx_tmp = true;
            		}
HXDLIN(5118)		if (_hx_tmp) {
HXLINE(5120)			this->waveformSprite->set_visible(false);
HXLINE(5121)			return;
            		}
HXLINE(5124)		this->waveformSprite->set_visible(true);
HXLINE(5125)		this->waveformSprite->set_y(this->gridBg->y);
HXLINE(5126)		int width = ::Std_obj::_hx_int(( (Float)(((::states::editors::ChartingState_obj::GRID_SIZE * ::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER) * ::states::editors::ChartingState_obj::GRID_PLAYERS)) ));
HXLINE(5127)		int height = ::Std_obj::_hx_int(this->gridBg->get_height());
HXLINE(5128)		bool _hx_tmp2;
HXDLIN(5128)		if ((::Std_obj::_hx_int(this->waveformSprite->get_height()) != height)) {
HXLINE(5128)			_hx_tmp2 = ::hx::IsNotNull( this->waveformSprite->get_pixels() );
            		}
            		else {
HXLINE(5128)			_hx_tmp2 = false;
            		}
HXDLIN(5128)		if (_hx_tmp2) {
HXLINE(5130)			this->waveformSprite->get_pixels()->dispose();
HXLINE(5131)			this->waveformSprite->get_pixels()->disposeImage();
HXLINE(5132)			this->waveformSprite->makeGraphic(width,height,16777215,null(),null());
            		}
HXLINE(5134)		 ::openfl::display::BitmapData _hx_tmp3 = this->waveformSprite->get_pixels();
HXDLIN(5134)		_hx_tmp3->fillRect( ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,width,height),16777215);
HXLINE(5136)		this->wavData->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->resize(0);
HXLINE(5137)		this->wavData->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->resize(0);
HXLINE(5138)		this->wavData->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->resize(0);
HXLINE(5139)		this->wavData->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->resize(0);
HXLINE(5141)		 ::flixel::sound::FlxSound sound;
HXDLIN(5141)		::String _hx_switch_0 = this->waveformTarget;
            		if (  (_hx_switch_0==HX_("inst",c6,43,bb,45)) ){
HXLINE(5141)			sound = ::flixel::FlxG_obj::sound->music;
HXDLIN(5141)			goto _hx_goto_397;
            		}
            		if (  (_hx_switch_0==HX_("opp",2f,9c,54,00)) ){
HXLINE(5141)			sound = this->opponentVocals;
HXDLIN(5141)			goto _hx_goto_397;
            		}
            		if (  (_hx_switch_0==HX_("voc",0a,eb,59,00)) ){
HXLINE(5141)			sound = this->vocals;
HXDLIN(5141)			goto _hx_goto_397;
            		}
            		/* default */{
HXLINE(5141)			sound = null();
            		}
            		_hx_goto_397:;
HXLINE(5154)		bool _hx_tmp4;
HXDLIN(5154)		bool _hx_tmp5;
HXDLIN(5154)		if (::hx::IsNotNull( sound )) {
HXLINE(5154)			_hx_tmp5 = ::hx::IsNotNull( sound->_sound );
            		}
            		else {
HXLINE(5154)			_hx_tmp5 = false;
            		}
HXDLIN(5154)		if (_hx_tmp5) {
HXLINE(5154)			_hx_tmp4 = ::hx::IsNotNull( sound->_sound->_hx___buffer );
            		}
            		else {
HXLINE(5154)			_hx_tmp4 = false;
            		}
HXDLIN(5154)		if (_hx_tmp4) {
HXLINE(5156)			 ::haxe::io::Bytes bytes = sound->_sound->_hx___buffer->data->buffer;
HXLINE(5157)			this->wavData = this->waveformData(sound->_sound->_hx___buffer,bytes,(this->cachedSectionTimes->__get(this->curSec) - ::backend::Conductor_obj::offset),(this->cachedSectionTimes->__get((this->curSec + 1)) - ::backend::Conductor_obj::offset),1,this->wavData,height);
            		}
HXLINE(5161)		int gSize = ::Std_obj::_hx_int(( (Float)((::states::editors::ChartingState_obj::GRID_SIZE * 8)) ));
HXLINE(5162)		int hSize = ::Std_obj::_hx_int((( (Float)(gSize) ) / ( (Float)(2) )));
HXLINE(5163)		Float size = ( (Float)(1) );
HXLINE(5165)		int leftLength;
HXDLIN(5165)		if ((this->wavData->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->length > this->wavData->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->length)) {
HXLINE(5165)			leftLength = this->wavData->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->length;
            		}
            		else {
HXLINE(5165)			leftLength = this->wavData->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->length;
            		}
HXLINE(5166)		int rightLength;
HXDLIN(5166)		if ((this->wavData->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->length > this->wavData->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->length)) {
HXLINE(5166)			rightLength = this->wavData->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->length;
            		}
            		else {
HXLINE(5166)			rightLength = this->wavData->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->length;
            		}
HXLINE(5168)		int length;
HXDLIN(5168)		if ((leftLength > rightLength)) {
HXLINE(5168)			length = leftLength;
            		}
            		else {
HXLINE(5168)			length = rightLength;
            		}
HXLINE(5170)		{
HXLINE(5170)			int _g = 0;
HXDLIN(5170)			int _g1 = length;
HXDLIN(5170)			while((_g < _g1)){
HXLINE(5170)				_g = (_g + 1);
HXDLIN(5170)				int index = (_g - 1);
HXLINE(5172)				Float Value;
HXDLIN(5172)				bool Value1;
HXDLIN(5172)				if ((index < this->wavData->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->length)) {
HXLINE(5172)					Value1 = (index >= 0);
            				}
            				else {
HXLINE(5172)					Value1 = false;
            				}
HXDLIN(5172)				if (Value1) {
HXLINE(5172)					Value = this->wavData->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->__get(index);
            				}
            				else {
HXLINE(5172)					Value = ( (Float)(0) );
            				}
HXDLIN(5172)				Float Value2 = (Value * (( (Float)(gSize) ) / ((Float)1.12)));
HXDLIN(5172)				 ::Dynamic Min = -(hSize);
HXDLIN(5172)				Float lowerBound;
HXDLIN(5172)				bool lowerBound1;
HXDLIN(5172)				if (::hx::IsNotNull( Min )) {
HXLINE(5172)					lowerBound1 = ::hx::IsLess( Value2,Min );
            				}
            				else {
HXLINE(5172)					lowerBound1 = false;
            				}
HXDLIN(5172)				if (lowerBound1) {
HXLINE(5172)					lowerBound = ( (Float)(Min) );
            				}
            				else {
HXLINE(5172)					lowerBound = Value2;
            				}
HXDLIN(5172)				Float lmin;
HXDLIN(5172)				bool lmin1;
HXDLIN(5172)				if (::hx::IsNotNull( hSize )) {
HXLINE(5172)					lmin1 = (lowerBound > hSize);
            				}
            				else {
HXLINE(5172)					lmin1 = false;
            				}
HXDLIN(5172)				if (lmin1) {
HXLINE(5172)					lmin = ( (Float)(hSize) );
            				}
            				else {
HXLINE(5172)					lmin = lowerBound;
            				}
HXDLIN(5172)				Float lmin2 = (lmin / ( (Float)(2) ));
HXLINE(5173)				Float Value3;
HXDLIN(5173)				bool Value4;
HXDLIN(5173)				if ((index < this->wavData->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->length)) {
HXLINE(5173)					Value4 = (index >= 0);
            				}
            				else {
HXLINE(5173)					Value4 = false;
            				}
HXDLIN(5173)				if (Value4) {
HXLINE(5173)					Value3 = this->wavData->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->__get(index);
            				}
            				else {
HXLINE(5173)					Value3 = ( (Float)(0) );
            				}
HXDLIN(5173)				Float Value5 = (Value3 * (( (Float)(gSize) ) / ((Float)1.12)));
HXDLIN(5173)				 ::Dynamic Min1 = -(hSize);
HXDLIN(5173)				Float lowerBound2;
HXDLIN(5173)				bool lowerBound3;
HXDLIN(5173)				if (::hx::IsNotNull( Min1 )) {
HXLINE(5173)					lowerBound3 = ::hx::IsLess( Value5,Min1 );
            				}
            				else {
HXLINE(5173)					lowerBound3 = false;
            				}
HXDLIN(5173)				if (lowerBound3) {
HXLINE(5173)					lowerBound2 = ( (Float)(Min1) );
            				}
            				else {
HXLINE(5173)					lowerBound2 = Value5;
            				}
HXDLIN(5173)				Float lmax;
HXDLIN(5173)				bool lmax1;
HXDLIN(5173)				if (::hx::IsNotNull( hSize )) {
HXLINE(5173)					lmax1 = (lowerBound2 > hSize);
            				}
            				else {
HXLINE(5173)					lmax1 = false;
            				}
HXDLIN(5173)				if (lmax1) {
HXLINE(5173)					lmax = ( (Float)(hSize) );
            				}
            				else {
HXLINE(5173)					lmax = lowerBound2;
            				}
HXDLIN(5173)				Float lmax2 = (lmax / ( (Float)(2) ));
HXLINE(5175)				Float Value6;
HXDLIN(5175)				bool Value7;
HXDLIN(5175)				if ((index < this->wavData->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->length)) {
HXLINE(5175)					Value7 = (index >= 0);
            				}
            				else {
HXLINE(5175)					Value7 = false;
            				}
HXDLIN(5175)				if (Value7) {
HXLINE(5175)					Value6 = this->wavData->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->__get(index);
            				}
            				else {
HXLINE(5175)					Value6 = ( (Float)(0) );
            				}
HXDLIN(5175)				Float Value8 = (Value6 * (( (Float)(gSize) ) / ((Float)1.12)));
HXDLIN(5175)				 ::Dynamic Min2 = -(hSize);
HXDLIN(5175)				Float lowerBound4;
HXDLIN(5175)				bool lowerBound5;
HXDLIN(5175)				if (::hx::IsNotNull( Min2 )) {
HXLINE(5175)					lowerBound5 = ::hx::IsLess( Value8,Min2 );
            				}
            				else {
HXLINE(5175)					lowerBound5 = false;
            				}
HXDLIN(5175)				if (lowerBound5) {
HXLINE(5175)					lowerBound4 = ( (Float)(Min2) );
            				}
            				else {
HXLINE(5175)					lowerBound4 = Value8;
            				}
HXDLIN(5175)				Float rmin;
HXDLIN(5175)				bool rmin1;
HXDLIN(5175)				if (::hx::IsNotNull( hSize )) {
HXLINE(5175)					rmin1 = (lowerBound4 > hSize);
            				}
            				else {
HXLINE(5175)					rmin1 = false;
            				}
HXDLIN(5175)				if (rmin1) {
HXLINE(5175)					rmin = ( (Float)(hSize) );
            				}
            				else {
HXLINE(5175)					rmin = lowerBound4;
            				}
HXDLIN(5175)				Float rmin2 = (rmin / ( (Float)(2) ));
HXLINE(5176)				Float Value9;
HXDLIN(5176)				bool Value10;
HXDLIN(5176)				if ((index < this->wavData->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->length)) {
HXLINE(5176)					Value10 = (index >= 0);
            				}
            				else {
HXLINE(5176)					Value10 = false;
            				}
HXDLIN(5176)				if (Value10) {
HXLINE(5176)					Value9 = this->wavData->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->__get(index);
            				}
            				else {
HXLINE(5176)					Value9 = ( (Float)(0) );
            				}
HXDLIN(5176)				Float Value11 = (Value9 * (( (Float)(gSize) ) / ((Float)1.12)));
HXDLIN(5176)				 ::Dynamic Min3 = -(hSize);
HXDLIN(5176)				Float lowerBound6;
HXDLIN(5176)				bool lowerBound7;
HXDLIN(5176)				if (::hx::IsNotNull( Min3 )) {
HXLINE(5176)					lowerBound7 = ::hx::IsLess( Value11,Min3 );
            				}
            				else {
HXLINE(5176)					lowerBound7 = false;
            				}
HXDLIN(5176)				if (lowerBound7) {
HXLINE(5176)					lowerBound6 = ( (Float)(Min3) );
            				}
            				else {
HXLINE(5176)					lowerBound6 = Value11;
            				}
HXDLIN(5176)				Float rmax;
HXDLIN(5176)				bool rmax1;
HXDLIN(5176)				if (::hx::IsNotNull( hSize )) {
HXLINE(5176)					rmax1 = (lowerBound6 > hSize);
            				}
            				else {
HXLINE(5176)					rmax1 = false;
            				}
HXDLIN(5176)				if (rmax1) {
HXLINE(5176)					rmax = ( (Float)(hSize) );
            				}
            				else {
HXLINE(5176)					rmax = lowerBound6;
            				}
HXDLIN(5176)				Float rmax2 = (rmax / ( (Float)(2) ));
HXLINE(5178)				 ::openfl::display::BitmapData _hx_tmp6 = this->waveformSprite->get_pixels();
HXDLIN(5178)				_hx_tmp6->fillRect( ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(( (Float)(hSize) ) - (lmin2 + rmin2)),(( (Float)(index) ) * size),((lmin2 + rmin2) + (lmax2 + rmax2)),size),-1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateWaveform,(void))

::Array< ::Dynamic> ChartingState_obj::waveformData( ::lime::media::AudioBuffer buffer, ::haxe::io::Bytes bytes,Float time,Float endTime,::hx::Null< Float >  __o_multiply,::Array< ::Dynamic> array, ::Dynamic steps){
            		Float multiply = __o_multiply.Default(1);
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_5186_waveformData)
HXLINE(5188)		bool _hx_tmp;
HXDLIN(5188)		if (::hx::IsNotNull( buffer )) {
HXLINE(5188)			_hx_tmp = ::hx::IsNull( buffer->data );
            		}
            		else {
HXLINE(5188)			_hx_tmp = true;
            		}
HXDLIN(5188)		if (_hx_tmp) {
HXLINE(5188)			return ::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_403,1))->init(1,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_404,1)))->init(1,::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_405,1))->init(1,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_406,1)));
            		}
HXLINE(5190)		Float khz = (( (Float)(buffer->sampleRate) ) / ( (Float)(1000) ));
HXLINE(5191)		int channels = buffer->channels;
HXLINE(5193)		int index = ::Std_obj::_hx_int((time * khz));
HXLINE(5195)		Float samples = ((endTime - time) * khz);
HXLINE(5197)		if (::hx::IsNull( steps )) {
HXLINE(5197)			steps = 1280;
            		}
HXLINE(5199)		Float samplesPerRow = (samples / ( (Float)(steps) ));
HXLINE(5200)		int samplesPerRowI = ::Std_obj::_hx_int(samplesPerRow);
HXLINE(5202)		int gotIndex = 0;
HXLINE(5204)		Float lmin = ( (Float)(0) );
HXLINE(5205)		Float lmax = ( (Float)(0) );
HXLINE(5207)		Float rmin = ( (Float)(0) );
HXLINE(5208)		Float rmax = ( (Float)(0) );
HXLINE(5210)		Float rows = ( (Float)(0) );
HXLINE(5212)		bool simpleSample = true;
HXLINE(5213)		bool v1 = false;
HXLINE(5215)		if (::hx::IsNull( array )) {
HXLINE(5215)			array = ::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_407,1))->init(1,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_408,1)))->init(1,::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_409,1))->init(1,::Array_obj< Float >::fromData( _hx_array_data_f85b0019_410,1)));
            		}
HXLINE(5217)		while((index < (bytes->length - 1))){
HXLINE(5218)			if ((index >= 0)) {
HXLINE(5219)				int pos = ((index * channels) * 2);
HXDLIN(5219)				int byte = (( (int)(bytes->b->__get(pos)) ) | (( (int)(bytes->b->__get((pos + 1))) ) << 8));
HXLINE(5221)				if ((byte > ((Float)32767.5))) {
HXLINE(5221)					byte = (byte - 65535);
            				}
HXLINE(5223)				Float sample = (( (Float)(byte) ) / ( (Float)(65535) ));
HXLINE(5225)				if ((sample > 0)) {
HXLINE(5226)					if ((sample > lmax)) {
HXLINE(5226)						lmax = sample;
            					}
            					else {
HXLINE(5227)						if ((sample < 0)) {
HXLINE(5228)							if ((sample < lmin)) {
HXLINE(5228)								lmin = sample;
            							}
            						}
            					}
            				}
HXLINE(5230)				if ((channels >= 2)) {
HXLINE(5231)					int pos1 = (((index * channels) * 2) + 2);
HXDLIN(5231)					byte = (( (int)(bytes->b->__get(pos1)) ) | (( (int)(bytes->b->__get((pos1 + 1))) ) << 8));
HXLINE(5233)					if ((byte > ((Float)32767.5))) {
HXLINE(5233)						byte = (byte - 65535);
            					}
HXLINE(5235)					sample = (( (Float)(byte) ) / ( (Float)(65535) ));
HXLINE(5237)					if ((sample > 0)) {
HXLINE(5238)						if ((sample > rmax)) {
HXLINE(5238)							rmax = sample;
            						}
            					}
            					else {
HXLINE(5239)						if ((sample < 0)) {
HXLINE(5240)							if ((sample < rmin)) {
HXLINE(5240)								rmin = sample;
            							}
            						}
            					}
            				}
            			}
HXLINE(5245)			if ((samplesPerRowI > 0)) {
HXLINE(5245)				v1 = (::hx::Mod(index,samplesPerRowI) == 0);
            			}
            			else {
HXLINE(5245)				v1 = false;
            			}
HXLINE(5246)			while(true){
HXLINE(5246)				bool _hx_tmp1;
HXDLIN(5246)				if (simpleSample) {
HXLINE(5246)					_hx_tmp1 = v1;
            				}
            				else {
HXLINE(5246)					_hx_tmp1 = (rows >= samplesPerRow);
            				}
HXDLIN(5246)				if (!(_hx_tmp1)) {
HXLINE(5246)					goto _hx_goto_401;
            				}
HXLINE(5247)				v1 = false;
HXLINE(5248)				rows = (rows - samplesPerRow);
HXLINE(5250)				gotIndex = (gotIndex + 1);
HXLINE(5252)				Float lRMin = (::Math_obj::abs(lmin) * multiply);
HXLINE(5253)				Float lRMax = (lmax * multiply);
HXLINE(5255)				Float rRMin = (::Math_obj::abs(rmin) * multiply);
HXLINE(5256)				Float rRMax = (rmax * multiply);
HXLINE(5258)				if ((gotIndex > array->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->length)) {
HXLINE(5258)					array->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->push(lRMin);
            				}
            				else {
HXLINE(5259)					array->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()[(gotIndex - 1)] = (array->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->__get((gotIndex - 1)) + lRMin);
            				}
HXLINE(5261)				if ((gotIndex > array->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->length)) {
HXLINE(5261)					array->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->push(lRMax);
            				}
            				else {
HXLINE(5262)					array->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()[(gotIndex - 1)] = (array->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->__get((gotIndex - 1)) + lRMax);
            				}
HXLINE(5264)				if ((channels >= 2)) {
HXLINE(5266)					if ((gotIndex > array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->length)) {
HXLINE(5266)						array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->push(rRMin);
            					}
            					else {
HXLINE(5267)						array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()[(gotIndex - 1)] = (array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->__get((gotIndex - 1)) + rRMin);
            					}
HXLINE(5269)					if ((gotIndex > array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->length)) {
HXLINE(5269)						array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->push(rRMax);
            					}
            					else {
HXLINE(5270)						array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()[(gotIndex - 1)] = (array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->__get((gotIndex - 1)) + rRMax);
            					}
            				}
            				else {
HXLINE(5274)					if ((gotIndex > array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->length)) {
HXLINE(5274)						array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->push(lRMin);
            					}
            					else {
HXLINE(5275)						array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()[(gotIndex - 1)] = (array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()->__get((gotIndex - 1)) + lRMin);
            					}
HXLINE(5277)					if ((gotIndex > array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->length)) {
HXLINE(5277)						array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->push(lRMax);
            					}
            					else {
HXLINE(5278)						array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()[(gotIndex - 1)] = (array->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()->__get((gotIndex - 1)) + lRMax);
            					}
            				}
HXLINE(5281)				lmin = ( (Float)(0) );
HXLINE(5282)				lmax = ( (Float)(0) );
HXLINE(5284)				rmin = ( (Float)(0) );
HXLINE(5285)				rmax = ( (Float)(0) );
            			}
            			_hx_goto_401:;
HXLINE(5288)			index = (index + 1);
HXLINE(5289)			rows = (rows + 1);
HXLINE(5290)			if (::hx::IsGreater( gotIndex,steps )) {
HXLINE(5290)				goto _hx_goto_400;
            			}
            		}
            		_hx_goto_400:;
HXLINE(5293)		return array;
            	}


HX_DEFINE_DYNAMIC_FUNC7(ChartingState_obj,waveformData,return )

::Array< ::Dynamic> ChartingState_obj::defaultEvents;

::Array< int > ChartingState_obj::keysArray;

bool ChartingState_obj::SHOW_EVENT_COLUMN;

int ChartingState_obj::GRID_COLUMNS_PER_PLAYER;

int ChartingState_obj::GRID_PLAYERS;

int ChartingState_obj::GRID_SIZE;


::hx::ObjectPtr< ChartingState_obj > ChartingState_obj::__new( ::Dynamic __o_shouldReset) {
	::hx::ObjectPtr< ChartingState_obj > __this = new ChartingState_obj();
	__this->__construct(__o_shouldReset);
	return __this;
}

::hx::ObjectPtr< ChartingState_obj > ChartingState_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic __o_shouldReset) {
	ChartingState_obj *__this = (ChartingState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ChartingState_obj), true, "states.editors.ChartingState"));
	*(void **)__this = ChartingState_obj::_hx_vtable;
	__this->__construct(__o_shouldReset);
	return __this;
}

ChartingState_obj::ChartingState_obj()
{
}

void ChartingState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ChartingState);
	HX_MARK_MEMBER_NAME(BACKUP_EXT,"BACKUP_EXT");
	HX_MARK_MEMBER_NAME(quantizations,"quantizations");
	HX_MARK_MEMBER_NAME(quantColors,"quantColors");
	HX_MARK_MEMBER_NAME(curQuant,"curQuant");
	HX_MARK_MEMBER_NAME(sectionFirstNoteID,"sectionFirstNoteID");
	HX_MARK_MEMBER_NAME(sectionFirstEventID,"sectionFirstEventID");
	HX_MARK_MEMBER_NAME(curSec,"curSec");
	HX_MARK_MEMBER_NAME(chartEditorSave,"chartEditorSave");
	HX_MARK_MEMBER_NAME(mainBox,"mainBox");
	HX_MARK_MEMBER_NAME(mainBoxPosition,"mainBoxPosition");
	HX_MARK_MEMBER_NAME(infoBox,"infoBox");
	HX_MARK_MEMBER_NAME(infoBoxPosition,"infoBoxPosition");
	HX_MARK_MEMBER_NAME(upperBox,"upperBox");
	HX_MARK_MEMBER_NAME(camUI,"camUI");
	HX_MARK_MEMBER_NAME(prevGridBg,"prevGridBg");
	HX_MARK_MEMBER_NAME(gridBg,"gridBg");
	HX_MARK_MEMBER_NAME(nextGridBg,"nextGridBg");
	HX_MARK_MEMBER_NAME(waveformSprite,"waveformSprite");
	HX_MARK_MEMBER_NAME(scrollY,"scrollY");
	HX_MARK_MEMBER_NAME(zoomList,"zoomList");
	HX_MARK_MEMBER_NAME(curZoom,"curZoom");
	HX_MARK_MEMBER_NAME(mustHitIndicator,"mustHitIndicator");
	HX_MARK_MEMBER_NAME(eventIcon,"eventIcon");
	HX_MARK_MEMBER_NAME(icons,"icons");
	HX_MARK_MEMBER_NAME(events,"events");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(behindRenderedNotes,"behindRenderedNotes");
	HX_MARK_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_MARK_MEMBER_NAME(movingNotes,"movingNotes");
	HX_MARK_MEMBER_NAME(eventLockOverlay,"eventLockOverlay");
	HX_MARK_MEMBER_NAME(vortexIndicator,"vortexIndicator");
	HX_MARK_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_MARK_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_MARK_MEMBER_NAME(isMovingNotes,"isMovingNotes");
	HX_MARK_MEMBER_NAME(movingNotesLastData,"movingNotesLastData");
	HX_MARK_MEMBER_NAME(movingNotesLastY,"movingNotesLastY");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(opponentVocals,"opponentVocals");
	HX_MARK_MEMBER_NAME(timeLine,"timeLine");
	HX_MARK_MEMBER_NAME(infoText,"infoText");
	HX_MARK_MEMBER_NAME(autoSaveIcon,"autoSaveIcon");
	HX_MARK_MEMBER_NAME(outputTxt,"outputTxt");
	HX_MARK_MEMBER_NAME(selectionStart,"selectionStart");
	HX_MARK_MEMBER_NAME(selectionBox,"selectionBox");
	HX_MARK_MEMBER_NAME(_shouldReset,"_shouldReset");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(theme,"theme");
	HX_MARK_MEMBER_NAME(copiedNotes,"copiedNotes");
	HX_MARK_MEMBER_NAME(copiedEvents,"copiedEvents");
	HX_MARK_MEMBER_NAME(_keysPressedBuffer,"_keysPressedBuffer");
	HX_MARK_MEMBER_NAME(tipBg,"tipBg");
	HX_MARK_MEMBER_NAME(fullTipText,"fullTipText");
	HX_MARK_MEMBER_NAME(vortexEnabled,"vortexEnabled");
	HX_MARK_MEMBER_NAME(waveformEnabled,"waveformEnabled");
	HX_MARK_MEMBER_NAME(waveformTarget,"waveformTarget");
	HX_MARK_MEMBER_NAME(gridColors,"gridColors");
	HX_MARK_MEMBER_NAME(gridColorsOther,"gridColorsOther");
	HX_MARK_MEMBER_NAME(noteSelectionSine,"noteSelectionSine");
	HX_MARK_MEMBER_NAME(selectedNotes,"selectedNotes");
	HX_MARK_MEMBER_NAME(ignoreClickForThisFrame,"ignoreClickForThisFrame");
	HX_MARK_MEMBER_NAME(outputAlpha,"outputAlpha");
	HX_MARK_MEMBER_NAME(songFinished,"songFinished");
	HX_MARK_MEMBER_NAME(fileDialog,"fileDialog");
	HX_MARK_MEMBER_NAME(lastFocus,"lastFocus");
	HX_MARK_MEMBER_NAME(autoSaveTime,"autoSaveTime");
	HX_MARK_MEMBER_NAME(autoSaveCap,"autoSaveCap");
	HX_MARK_MEMBER_NAME(backupLimit,"backupLimit");
	HX_MARK_MEMBER_NAME(lastBeatHit,"lastBeatHit");
	HX_MARK_MEMBER_NAME(cachedSectionRow,"cachedSectionRow");
	HX_MARK_MEMBER_NAME(cachedSectionTimes,"cachedSectionTimes");
	HX_MARK_MEMBER_NAME(cachedSectionCrochets,"cachedSectionCrochets");
	HX_MARK_MEMBER_NAME(cachedSectionBPMs,"cachedSectionBPMs");
	HX_MARK_MEMBER_NAME(playbackRate,"playbackRate");
	HX_MARK_MEMBER_NAME(showPreviousSection,"showPreviousSection");
	HX_MARK_MEMBER_NAME(showNextSection,"showNextSection");
	HX_MARK_MEMBER_NAME(showNoteTypeLabels,"showNoteTypeLabels");
	HX_MARK_MEMBER_NAME(forceDataUpdate,"forceDataUpdate");
	HX_MARK_MEMBER_NAME(characterData,"characterData");
	HX_MARK_MEMBER_NAME(_lastSec,"_lastSec");
	HX_MARK_MEMBER_NAME(_lastGfSection,"_lastGfSection");
	HX_MARK_MEMBER_NAME(playbackSlider,"playbackSlider");
	HX_MARK_MEMBER_NAME(mouseSnapCheckBox,"mouseSnapCheckBox");
	HX_MARK_MEMBER_NAME(ignoreProgressCheckBox,"ignoreProgressCheckBox");
	HX_MARK_MEMBER_NAME(hitsoundPlayerStepper,"hitsoundPlayerStepper");
	HX_MARK_MEMBER_NAME(hitsoundOpponentStepper,"hitsoundOpponentStepper");
	HX_MARK_MEMBER_NAME(metronomeStepper,"metronomeStepper");
	HX_MARK_MEMBER_NAME(instVolumeStepper,"instVolumeStepper");
	HX_MARK_MEMBER_NAME(instMuteCheckBox,"instMuteCheckBox");
	HX_MARK_MEMBER_NAME(playerVolumeStepper,"playerVolumeStepper");
	HX_MARK_MEMBER_NAME(playerMuteCheckBox,"playerMuteCheckBox");
	HX_MARK_MEMBER_NAME(opponentVolumeStepper,"opponentVolumeStepper");
	HX_MARK_MEMBER_NAME(opponentMuteCheckBox,"opponentMuteCheckBox");
	HX_MARK_MEMBER_NAME(gameOverCharDropDown,"gameOverCharDropDown");
	HX_MARK_MEMBER_NAME(gameOverSndInputText,"gameOverSndInputText");
	HX_MARK_MEMBER_NAME(gameOverLoopInputText,"gameOverLoopInputText");
	HX_MARK_MEMBER_NAME(gameOverRetryInputText,"gameOverRetryInputText");
	HX_MARK_MEMBER_NAME(noRGBCheckBox,"noRGBCheckBox");
	HX_MARK_MEMBER_NAME(noteTextureInputText,"noteTextureInputText");
	HX_MARK_MEMBER_NAME(noteSplashesInputText,"noteSplashesInputText");
	HX_MARK_MEMBER_NAME(eventDropDown,"eventDropDown");
	HX_MARK_MEMBER_NAME(value1InputText,"value1InputText");
	HX_MARK_MEMBER_NAME(value2InputText,"value2InputText");
	HX_MARK_MEMBER_NAME(selectedEventText,"selectedEventText");
	HX_MARK_MEMBER_NAME(eventDescriptionText,"eventDescriptionText");
	HX_MARK_MEMBER_NAME(eventsList,"eventsList");
	HX_MARK_MEMBER_NAME(curEventSelected,"curEventSelected");
	HX_MARK_MEMBER_NAME(susLengthLastVal,"susLengthLastVal");
	HX_MARK_MEMBER_NAME(susLengthStepper,"susLengthStepper");
	HX_MARK_MEMBER_NAME(strumTimeStepper,"strumTimeStepper");
	HX_MARK_MEMBER_NAME(noteTypeDropDown,"noteTypeDropDown");
	HX_MARK_MEMBER_NAME(noteTypes,"noteTypes");
	HX_MARK_MEMBER_NAME(mustHitCheckBox,"mustHitCheckBox");
	HX_MARK_MEMBER_NAME(gfSectionCheckBox,"gfSectionCheckBox");
	HX_MARK_MEMBER_NAME(altAnimSectionCheckBox,"altAnimSectionCheckBox");
	HX_MARK_MEMBER_NAME(changeBpmCheckBox,"changeBpmCheckBox");
	HX_MARK_MEMBER_NAME(changeBpmStepper,"changeBpmStepper");
	HX_MARK_MEMBER_NAME(beatsPerSecStepper,"beatsPerSecStepper");
	HX_MARK_MEMBER_NAME(songNameInputText,"songNameInputText");
	HX_MARK_MEMBER_NAME(allowVocalsCheckBox,"allowVocalsCheckBox");
	HX_MARK_MEMBER_NAME(bpmStepper,"bpmStepper");
	HX_MARK_MEMBER_NAME(scrollSpeedStepper,"scrollSpeedStepper");
	HX_MARK_MEMBER_NAME(audioOffsetStepper,"audioOffsetStepper");
	HX_MARK_MEMBER_NAME(stageDropDown,"stageDropDown");
	HX_MARK_MEMBER_NAME(playerDropDown,"playerDropDown");
	HX_MARK_MEMBER_NAME(opponentDropDown,"opponentDropDown");
	HX_MARK_MEMBER_NAME(girlfriendDropDown,"girlfriendDropDown");
	HX_MARK_MEMBER_NAME(lockedEvents,"lockedEvents");
	HX_MARK_MEMBER_NAME(showLastGridButton,"showLastGridButton");
	HX_MARK_MEMBER_NAME(showNextGridButton,"showNextGridButton");
	HX_MARK_MEMBER_NAME(noteTypeLabelsButton,"noteTypeLabelsButton");
	HX_MARK_MEMBER_NAME(vortexEditorButton,"vortexEditorButton");
	HX_MARK_MEMBER_NAME(overwriteSavedSomething,"overwriteSavedSomething");
	HX_MARK_MEMBER_NAME(undoActions,"undoActions");
	HX_MARK_MEMBER_NAME(currentUndo,"currentUndo");
	HX_MARK_MEMBER_NAME(wavData,"wavData");
	 ::backend::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ChartingState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(BACKUP_EXT,"BACKUP_EXT");
	HX_VISIT_MEMBER_NAME(quantizations,"quantizations");
	HX_VISIT_MEMBER_NAME(quantColors,"quantColors");
	HX_VISIT_MEMBER_NAME(curQuant,"curQuant");
	HX_VISIT_MEMBER_NAME(sectionFirstNoteID,"sectionFirstNoteID");
	HX_VISIT_MEMBER_NAME(sectionFirstEventID,"sectionFirstEventID");
	HX_VISIT_MEMBER_NAME(curSec,"curSec");
	HX_VISIT_MEMBER_NAME(chartEditorSave,"chartEditorSave");
	HX_VISIT_MEMBER_NAME(mainBox,"mainBox");
	HX_VISIT_MEMBER_NAME(mainBoxPosition,"mainBoxPosition");
	HX_VISIT_MEMBER_NAME(infoBox,"infoBox");
	HX_VISIT_MEMBER_NAME(infoBoxPosition,"infoBoxPosition");
	HX_VISIT_MEMBER_NAME(upperBox,"upperBox");
	HX_VISIT_MEMBER_NAME(camUI,"camUI");
	HX_VISIT_MEMBER_NAME(prevGridBg,"prevGridBg");
	HX_VISIT_MEMBER_NAME(gridBg,"gridBg");
	HX_VISIT_MEMBER_NAME(nextGridBg,"nextGridBg");
	HX_VISIT_MEMBER_NAME(waveformSprite,"waveformSprite");
	HX_VISIT_MEMBER_NAME(scrollY,"scrollY");
	HX_VISIT_MEMBER_NAME(zoomList,"zoomList");
	HX_VISIT_MEMBER_NAME(curZoom,"curZoom");
	HX_VISIT_MEMBER_NAME(mustHitIndicator,"mustHitIndicator");
	HX_VISIT_MEMBER_NAME(eventIcon,"eventIcon");
	HX_VISIT_MEMBER_NAME(icons,"icons");
	HX_VISIT_MEMBER_NAME(events,"events");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(behindRenderedNotes,"behindRenderedNotes");
	HX_VISIT_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_VISIT_MEMBER_NAME(movingNotes,"movingNotes");
	HX_VISIT_MEMBER_NAME(eventLockOverlay,"eventLockOverlay");
	HX_VISIT_MEMBER_NAME(vortexIndicator,"vortexIndicator");
	HX_VISIT_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_VISIT_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_VISIT_MEMBER_NAME(isMovingNotes,"isMovingNotes");
	HX_VISIT_MEMBER_NAME(movingNotesLastData,"movingNotesLastData");
	HX_VISIT_MEMBER_NAME(movingNotesLastY,"movingNotesLastY");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(opponentVocals,"opponentVocals");
	HX_VISIT_MEMBER_NAME(timeLine,"timeLine");
	HX_VISIT_MEMBER_NAME(infoText,"infoText");
	HX_VISIT_MEMBER_NAME(autoSaveIcon,"autoSaveIcon");
	HX_VISIT_MEMBER_NAME(outputTxt,"outputTxt");
	HX_VISIT_MEMBER_NAME(selectionStart,"selectionStart");
	HX_VISIT_MEMBER_NAME(selectionBox,"selectionBox");
	HX_VISIT_MEMBER_NAME(_shouldReset,"_shouldReset");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(theme,"theme");
	HX_VISIT_MEMBER_NAME(copiedNotes,"copiedNotes");
	HX_VISIT_MEMBER_NAME(copiedEvents,"copiedEvents");
	HX_VISIT_MEMBER_NAME(_keysPressedBuffer,"_keysPressedBuffer");
	HX_VISIT_MEMBER_NAME(tipBg,"tipBg");
	HX_VISIT_MEMBER_NAME(fullTipText,"fullTipText");
	HX_VISIT_MEMBER_NAME(vortexEnabled,"vortexEnabled");
	HX_VISIT_MEMBER_NAME(waveformEnabled,"waveformEnabled");
	HX_VISIT_MEMBER_NAME(waveformTarget,"waveformTarget");
	HX_VISIT_MEMBER_NAME(gridColors,"gridColors");
	HX_VISIT_MEMBER_NAME(gridColorsOther,"gridColorsOther");
	HX_VISIT_MEMBER_NAME(noteSelectionSine,"noteSelectionSine");
	HX_VISIT_MEMBER_NAME(selectedNotes,"selectedNotes");
	HX_VISIT_MEMBER_NAME(ignoreClickForThisFrame,"ignoreClickForThisFrame");
	HX_VISIT_MEMBER_NAME(outputAlpha,"outputAlpha");
	HX_VISIT_MEMBER_NAME(songFinished,"songFinished");
	HX_VISIT_MEMBER_NAME(fileDialog,"fileDialog");
	HX_VISIT_MEMBER_NAME(lastFocus,"lastFocus");
	HX_VISIT_MEMBER_NAME(autoSaveTime,"autoSaveTime");
	HX_VISIT_MEMBER_NAME(autoSaveCap,"autoSaveCap");
	HX_VISIT_MEMBER_NAME(backupLimit,"backupLimit");
	HX_VISIT_MEMBER_NAME(lastBeatHit,"lastBeatHit");
	HX_VISIT_MEMBER_NAME(cachedSectionRow,"cachedSectionRow");
	HX_VISIT_MEMBER_NAME(cachedSectionTimes,"cachedSectionTimes");
	HX_VISIT_MEMBER_NAME(cachedSectionCrochets,"cachedSectionCrochets");
	HX_VISIT_MEMBER_NAME(cachedSectionBPMs,"cachedSectionBPMs");
	HX_VISIT_MEMBER_NAME(playbackRate,"playbackRate");
	HX_VISIT_MEMBER_NAME(showPreviousSection,"showPreviousSection");
	HX_VISIT_MEMBER_NAME(showNextSection,"showNextSection");
	HX_VISIT_MEMBER_NAME(showNoteTypeLabels,"showNoteTypeLabels");
	HX_VISIT_MEMBER_NAME(forceDataUpdate,"forceDataUpdate");
	HX_VISIT_MEMBER_NAME(characterData,"characterData");
	HX_VISIT_MEMBER_NAME(_lastSec,"_lastSec");
	HX_VISIT_MEMBER_NAME(_lastGfSection,"_lastGfSection");
	HX_VISIT_MEMBER_NAME(playbackSlider,"playbackSlider");
	HX_VISIT_MEMBER_NAME(mouseSnapCheckBox,"mouseSnapCheckBox");
	HX_VISIT_MEMBER_NAME(ignoreProgressCheckBox,"ignoreProgressCheckBox");
	HX_VISIT_MEMBER_NAME(hitsoundPlayerStepper,"hitsoundPlayerStepper");
	HX_VISIT_MEMBER_NAME(hitsoundOpponentStepper,"hitsoundOpponentStepper");
	HX_VISIT_MEMBER_NAME(metronomeStepper,"metronomeStepper");
	HX_VISIT_MEMBER_NAME(instVolumeStepper,"instVolumeStepper");
	HX_VISIT_MEMBER_NAME(instMuteCheckBox,"instMuteCheckBox");
	HX_VISIT_MEMBER_NAME(playerVolumeStepper,"playerVolumeStepper");
	HX_VISIT_MEMBER_NAME(playerMuteCheckBox,"playerMuteCheckBox");
	HX_VISIT_MEMBER_NAME(opponentVolumeStepper,"opponentVolumeStepper");
	HX_VISIT_MEMBER_NAME(opponentMuteCheckBox,"opponentMuteCheckBox");
	HX_VISIT_MEMBER_NAME(gameOverCharDropDown,"gameOverCharDropDown");
	HX_VISIT_MEMBER_NAME(gameOverSndInputText,"gameOverSndInputText");
	HX_VISIT_MEMBER_NAME(gameOverLoopInputText,"gameOverLoopInputText");
	HX_VISIT_MEMBER_NAME(gameOverRetryInputText,"gameOverRetryInputText");
	HX_VISIT_MEMBER_NAME(noRGBCheckBox,"noRGBCheckBox");
	HX_VISIT_MEMBER_NAME(noteTextureInputText,"noteTextureInputText");
	HX_VISIT_MEMBER_NAME(noteSplashesInputText,"noteSplashesInputText");
	HX_VISIT_MEMBER_NAME(eventDropDown,"eventDropDown");
	HX_VISIT_MEMBER_NAME(value1InputText,"value1InputText");
	HX_VISIT_MEMBER_NAME(value2InputText,"value2InputText");
	HX_VISIT_MEMBER_NAME(selectedEventText,"selectedEventText");
	HX_VISIT_MEMBER_NAME(eventDescriptionText,"eventDescriptionText");
	HX_VISIT_MEMBER_NAME(eventsList,"eventsList");
	HX_VISIT_MEMBER_NAME(curEventSelected,"curEventSelected");
	HX_VISIT_MEMBER_NAME(susLengthLastVal,"susLengthLastVal");
	HX_VISIT_MEMBER_NAME(susLengthStepper,"susLengthStepper");
	HX_VISIT_MEMBER_NAME(strumTimeStepper,"strumTimeStepper");
	HX_VISIT_MEMBER_NAME(noteTypeDropDown,"noteTypeDropDown");
	HX_VISIT_MEMBER_NAME(noteTypes,"noteTypes");
	HX_VISIT_MEMBER_NAME(mustHitCheckBox,"mustHitCheckBox");
	HX_VISIT_MEMBER_NAME(gfSectionCheckBox,"gfSectionCheckBox");
	HX_VISIT_MEMBER_NAME(altAnimSectionCheckBox,"altAnimSectionCheckBox");
	HX_VISIT_MEMBER_NAME(changeBpmCheckBox,"changeBpmCheckBox");
	HX_VISIT_MEMBER_NAME(changeBpmStepper,"changeBpmStepper");
	HX_VISIT_MEMBER_NAME(beatsPerSecStepper,"beatsPerSecStepper");
	HX_VISIT_MEMBER_NAME(songNameInputText,"songNameInputText");
	HX_VISIT_MEMBER_NAME(allowVocalsCheckBox,"allowVocalsCheckBox");
	HX_VISIT_MEMBER_NAME(bpmStepper,"bpmStepper");
	HX_VISIT_MEMBER_NAME(scrollSpeedStepper,"scrollSpeedStepper");
	HX_VISIT_MEMBER_NAME(audioOffsetStepper,"audioOffsetStepper");
	HX_VISIT_MEMBER_NAME(stageDropDown,"stageDropDown");
	HX_VISIT_MEMBER_NAME(playerDropDown,"playerDropDown");
	HX_VISIT_MEMBER_NAME(opponentDropDown,"opponentDropDown");
	HX_VISIT_MEMBER_NAME(girlfriendDropDown,"girlfriendDropDown");
	HX_VISIT_MEMBER_NAME(lockedEvents,"lockedEvents");
	HX_VISIT_MEMBER_NAME(showLastGridButton,"showLastGridButton");
	HX_VISIT_MEMBER_NAME(showNextGridButton,"showNextGridButton");
	HX_VISIT_MEMBER_NAME(noteTypeLabelsButton,"noteTypeLabelsButton");
	HX_VISIT_MEMBER_NAME(vortexEditorButton,"vortexEditorButton");
	HX_VISIT_MEMBER_NAME(overwriteSavedSomething,"overwriteSavedSomething");
	HX_VISIT_MEMBER_NAME(undoActions,"undoActions");
	HX_VISIT_MEMBER_NAME(currentUndo,"currentUndo");
	HX_VISIT_MEMBER_NAME(wavData,"wavData");
	 ::backend::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ChartingState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"undo") ) { return ::hx::Val( undo_dyn() ); }
		if (HX_FIELD_EQ(inName,"redo") ) { return ::hx::Val( redo_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"camUI") ) { return ::hx::Val( camUI ); }
		if (HX_FIELD_EQ(inName,"icons") ) { return ::hx::Val( icons ); }
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		if (HX_FIELD_EQ(inName,"theme") ) { return ::hx::Val( theme ); }
		if (HX_FIELD_EQ(inName,"tipBg") ) { return ::hx::Val( tipBg ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"curSec") ) { return ::hx::Val( curSec ); }
		if (HX_FIELD_EQ(inName,"gridBg") ) { return ::hx::Val( gridBg ); }
		if (HX_FIELD_EQ(inName,"events") ) { return ::hx::Val( events ); }
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mainBox") ) { return ::hx::Val( mainBox ); }
		if (HX_FIELD_EQ(inName,"infoBox") ) { return ::hx::Val( infoBox ); }
		if (HX_FIELD_EQ(inName,"scrollY") ) { return ::hx::Val( scrollY ); }
		if (HX_FIELD_EQ(inName,"curZoom") ) { return ::hx::Val( curZoom ); }
		if (HX_FIELD_EQ(inName,"UIEvent") ) { return ::hx::Val( UIEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"wavData") ) { return ::hx::Val( wavData ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curQuant") ) { return ::hx::Val( curQuant ); }
		if (HX_FIELD_EQ(inName,"upperBox") ) { return ::hx::Val( upperBox ); }
		if (HX_FIELD_EQ(inName,"zoomList") ) { return ::hx::Val( zoomList ); }
		if (HX_FIELD_EQ(inName,"timeLine") ) { return ::hx::Val( timeLine ); }
		if (HX_FIELD_EQ(inName,"infoText") ) { return ::hx::Val( infoText ); }
		if (HX_FIELD_EQ(inName,"setPitch") ) { return ::hx::Val( setPitch_dyn() ); }
		if (HX_FIELD_EQ(inName,"_lastSec") ) { return ::hx::Val( _lastSec ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"eventIcon") ) { return ::hx::Val( eventIcon ); }
		if (HX_FIELD_EQ(inName,"outputTxt") ) { return ::hx::Val( outputTxt ); }
		if (HX_FIELD_EQ(inName,"lastFocus") ) { return ::hx::Val( lastFocus ); }
		if (HX_FIELD_EQ(inName,"loadChart") ) { return ::hx::Val( loadChart_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadMusic") ) { return ::hx::Val( loadMusic_dyn() ); }
		if (HX_FIELD_EQ(inName,"noteTypes") ) { return ::hx::Val( noteTypes ); }
		if (HX_FIELD_EQ(inName,"saveChart") ) { return ::hx::Val( saveChart_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"BACKUP_EXT") ) { return ::hx::Val( BACKUP_EXT ); }
		if (HX_FIELD_EQ(inName,"prevGridBg") ) { return ::hx::Val( prevGridBg ); }
		if (HX_FIELD_EQ(inName,"nextGridBg") ) { return ::hx::Val( nextGridBg ); }
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { return ::hx::Val( dummyArrow ); }
		if (HX_FIELD_EQ(inName,"gridColors") ) { return ::hx::Val( gridColors ); }
		if (HX_FIELD_EQ(inName,"fileDialog") ) { return ::hx::Val( fileDialog ); }
		if (HX_FIELD_EQ(inName,"showOutput") ) { return ::hx::Val( showOutput_dyn() ); }
		if (HX_FIELD_EQ(inName,"createNote") ) { return ::hx::Val( createNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"addDataTab") ) { return ::hx::Val( addDataTab_dyn() ); }
		if (HX_FIELD_EQ(inName,"eventsList") ) { return ::hx::Val( eventsList ); }
		if (HX_FIELD_EQ(inName,"addNoteTab") ) { return ::hx::Val( addNoteTab_dyn() ); }
		if (HX_FIELD_EQ(inName,"bpmStepper") ) { return ::hx::Val( bpmStepper ); }
		if (HX_FIELD_EQ(inName,"addSongTab") ) { return ::hx::Val( addSongTab_dyn() ); }
		if (HX_FIELD_EQ(inName,"addFileTab") ) { return ::hx::Val( addFileTab_dyn() ); }
		if (HX_FIELD_EQ(inName,"addEditTab") ) { return ::hx::Val( addEditTab_dyn() ); }
		if (HX_FIELD_EQ(inName,"addViewTab") ) { return ::hx::Val( addViewTab_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"quantColors") ) { return ::hx::Val( quantColors ); }
		if (HX_FIELD_EQ(inName,"movingNotes") ) { return ::hx::Val( movingNotes ); }
		if (HX_FIELD_EQ(inName,"copiedNotes") ) { return ::hx::Val( copiedNotes ); }
		if (HX_FIELD_EQ(inName,"fullTipText") ) { return ::hx::Val( fullTipText ); }
		if (HX_FIELD_EQ(inName,"changeTheme") ) { return ::hx::Val( changeTheme_dyn() ); }
		if (HX_FIELD_EQ(inName,"outputAlpha") ) { return ::hx::Val( outputAlpha ); }
		if (HX_FIELD_EQ(inName,"autoSaveCap") ) { return ::hx::Val( autoSaveCap ); }
		if (HX_FIELD_EQ(inName,"backupLimit") ) { return ::hx::Val( backupLimit ); }
		if (HX_FIELD_EQ(inName,"lastBeatHit") ) { return ::hx::Val( lastBeatHit ); }
		if (HX_FIELD_EQ(inName,"createGrids") ) { return ::hx::Val( createGrids_dyn() ); }
		if (HX_FIELD_EQ(inName,"reloadNotes") ) { return ::hx::Val( reloadNotes_dyn() ); }
		if (HX_FIELD_EQ(inName,"createEvent") ) { return ::hx::Val( createEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadSection") ) { return ::hx::Val( loadSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateHeads") ) { return ::hx::Val( updateHeads_dyn() ); }
		if (HX_FIELD_EQ(inName,"undoActions") ) { return ::hx::Val( undoActions ); }
		if (HX_FIELD_EQ(inName,"currentUndo") ) { return ::hx::Val( currentUndo ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_curQuant") ) { return ::hx::Val( set_curQuant_dyn() ); }
		if (HX_FIELD_EQ(inName,"autoSaveIcon") ) { return ::hx::Val( autoSaveIcon ); }
		if (HX_FIELD_EQ(inName,"selectionBox") ) { return ::hx::Val( selectionBox ); }
		if (HX_FIELD_EQ(inName,"_shouldReset") ) { return ::hx::Val( _shouldReset ); }
		if (HX_FIELD_EQ(inName,"copiedEvents") ) { return ::hx::Val( copiedEvents ); }
		if (HX_FIELD_EQ(inName,"openNewChart") ) { return ::hx::Val( openNewChart_dyn() ); }
		if (HX_FIELD_EQ(inName,"songFinished") ) { return ::hx::Val( songFinished ); }
		if (HX_FIELD_EQ(inName,"autoSaveTime") ) { return ::hx::Val( autoSaveTime ); }
		if (HX_FIELD_EQ(inName,"onSelectNote") ) { return ::hx::Val( onSelectNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"playbackRate") ) { return ::hx::Val( playbackRate ); }
		if (HX_FIELD_EQ(inName,"addEventsTab") ) { return ::hx::Val( addEventsTab_dyn() ); }
		if (HX_FIELD_EQ(inName,"lockedEvents") ) { return ::hx::Val( lockedEvents ); }
		if (HX_FIELD_EQ(inName,"openSubState") ) { return ::hx::Val( openSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadFileList") ) { return ::hx::Val( loadFileList_dyn() ); }
		if (HX_FIELD_EQ(inName,"waveformData") ) { return ::hx::Val( waveformData_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"quantizations") ) { return ::hx::Val( quantizations ); }
		if (HX_FIELD_EQ(inName,"isMovingNotes") ) { return ::hx::Val( isMovingNotes ); }
		if (HX_FIELD_EQ(inName,"vortexEnabled") ) { return ::hx::Val( vortexEnabled ); }
		if (HX_FIELD_EQ(inName,"prepareReload") ) { return ::hx::Val( prepareReload_dyn() ); }
		if (HX_FIELD_EQ(inName,"onChartLoaded") ) { return ::hx::Val( onChartLoaded_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectedNotes") ) { return ::hx::Val( selectedNotes ); }
		if (HX_FIELD_EQ(inName,"updateScrollY") ) { return ::hx::Val( updateScrollY_dyn() ); }
		if (HX_FIELD_EQ(inName,"characterData") ) { return ::hx::Val( characterData ); }
		if (HX_FIELD_EQ(inName,"noRGBCheckBox") ) { return ::hx::Val( noRGBCheckBox ); }
		if (HX_FIELD_EQ(inName,"eventDropDown") ) { return ::hx::Val( eventDropDown ); }
		if (HX_FIELD_EQ(inName,"addSectionTab") ) { return ::hx::Val( addSectionTab_dyn() ); }
		if (HX_FIELD_EQ(inName,"stageDropDown") ) { return ::hx::Val( stageDropDown ); }
		if (HX_FIELD_EQ(inName,"goToPlayState") ) { return ::hx::Val( goToPlayState_dyn() ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"addUndoAction") ) { return ::hx::Val( addUndoAction_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"waveformSprite") ) { return ::hx::Val( waveformSprite ); }
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { return ::hx::Val( strumLineNotes ); }
		if (HX_FIELD_EQ(inName,"opponentVocals") ) { return ::hx::Val( opponentVocals ); }
		if (HX_FIELD_EQ(inName,"selectionStart") ) { return ::hx::Val( selectionStart ); }
		if (HX_FIELD_EQ(inName,"waveformTarget") ) { return ::hx::Val( waveformTarget ); }
		if (HX_FIELD_EQ(inName,"onSongComplete") ) { return ::hx::Val( onSongComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSongPlaying") ) { return ::hx::Val( setSongPlaying_dyn() ); }
		if (HX_FIELD_EQ(inName,"_cacheSections") ) { return ::hx::Val( _cacheSections_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMinNoteTime") ) { return ::hx::Val( getMinNoteTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMaxNoteTime") ) { return ::hx::Val( getMaxNoteTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateJsonData") ) { return ::hx::Val( updateJsonData_dyn() ); }
		if (HX_FIELD_EQ(inName,"_lastGfSection") ) { return ::hx::Val( _lastGfSection ); }
		if (HX_FIELD_EQ(inName,"playbackSlider") ) { return ::hx::Val( playbackSlider ); }
		if (HX_FIELD_EQ(inName,"addChartingTab") ) { return ::hx::Val( addChartingTab_dyn() ); }
		if (HX_FIELD_EQ(inName,"playerDropDown") ) { return ::hx::Val( playerDropDown ); }
		if (HX_FIELD_EQ(inName,"updateNotesRGB") ) { return ::hx::Val( updateNotesRGB_dyn() ); }
		if (HX_FIELD_EQ(inName,"overwriteCheck") ) { return ::hx::Val( overwriteCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateWaveform") ) { return ::hx::Val( updateWaveform_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"chartEditorSave") ) { return ::hx::Val( chartEditorSave ); }
		if (HX_FIELD_EQ(inName,"mainBoxPosition") ) { return ::hx::Val( mainBoxPosition ); }
		if (HX_FIELD_EQ(inName,"infoBoxPosition") ) { return ::hx::Val( infoBoxPosition ); }
		if (HX_FIELD_EQ(inName,"vortexIndicator") ) { return ::hx::Val( vortexIndicator ); }
		if (HX_FIELD_EQ(inName,"waveformEnabled") ) { return ::hx::Val( waveformEnabled ); }
		if (HX_FIELD_EQ(inName,"gridColorsOther") ) { return ::hx::Val( gridColorsOther ); }
		if (HX_FIELD_EQ(inName,"stopMovingNotes") ) { return ::hx::Val( stopMovingNotes_dyn() ); }
		if (HX_FIELD_EQ(inName,"showNextSection") ) { return ::hx::Val( showNextSection ); }
		if (HX_FIELD_EQ(inName,"forceDataUpdate") ) { return ::hx::Val( forceDataUpdate ); }
		if (HX_FIELD_EQ(inName,"softReloadNotes") ) { return ::hx::Val( softReloadNotes_dyn() ); }
		if (HX_FIELD_EQ(inName,"value1InputText") ) { return ::hx::Val( value1InputText ); }
		if (HX_FIELD_EQ(inName,"value2InputText") ) { return ::hx::Val( value2InputText ); }
		if (HX_FIELD_EQ(inName,"mustHitCheckBox") ) { return ::hx::Val( mustHitCheckBox ); }
		if (HX_FIELD_EQ(inName,"updateChartData") ) { return ::hx::Val( updateChartData_dyn() ); }
		if (HX_FIELD_EQ(inName,"actionPushNotes") ) { return ::hx::Val( actionPushNotes_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"mustHitIndicator") ) { return ::hx::Val( mustHitIndicator ); }
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { return ::hx::Val( curRenderedNotes ); }
		if (HX_FIELD_EQ(inName,"eventLockOverlay") ) { return ::hx::Val( eventLockOverlay ); }
		if (HX_FIELD_EQ(inName,"movingNotesLastY") ) { return ::hx::Val( movingNotesLastY ); }
		if (HX_FIELD_EQ(inName,"makeNoteDataCopy") ) { return ::hx::Val( makeNoteDataCopy_dyn() ); }
		if (HX_FIELD_EQ(inName,"cachedSectionRow") ) { return ::hx::Val( cachedSectionRow ); }
		if (HX_FIELD_EQ(inName,"metronomeStepper") ) { return ::hx::Val( metronomeStepper ); }
		if (HX_FIELD_EQ(inName,"instMuteCheckBox") ) { return ::hx::Val( instMuteCheckBox ); }
		if (HX_FIELD_EQ(inName,"curEventSelected") ) { return ::hx::Val( curEventSelected ); }
		if (HX_FIELD_EQ(inName,"susLengthLastVal") ) { return ::hx::Val( susLengthLastVal ); }
		if (HX_FIELD_EQ(inName,"susLengthStepper") ) { return ::hx::Val( susLengthStepper ); }
		if (HX_FIELD_EQ(inName,"strumTimeStepper") ) { return ::hx::Val( strumTimeStepper ); }
		if (HX_FIELD_EQ(inName,"noteTypeDropDown") ) { return ::hx::Val( noteTypeDropDown ); }
		if (HX_FIELD_EQ(inName,"changeBpmStepper") ) { return ::hx::Val( changeBpmStepper ); }
		if (HX_FIELD_EQ(inName,"opponentDropDown") ) { return ::hx::Val( opponentDropDown ); }
		if (HX_FIELD_EQ(inName,"updateUpperBoxBg") ) { return ::hx::Val( updateUpperBoxBg_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"updateVortexColor") ) { return ::hx::Val( updateVortexColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"noteSelectionSine") ) { return ::hx::Val( noteSelectionSine ); }
		if (HX_FIELD_EQ(inName,"moveSelectedNotes") ) { return ::hx::Val( moveSelectedNotes_dyn() ); }
		if (HX_FIELD_EQ(inName,"cachedSectionBPMs") ) { return ::hx::Val( cachedSectionBPMs ); }
		if (HX_FIELD_EQ(inName,"updateAudioVolume") ) { return ::hx::Val( updateAudioVolume_dyn() ); }
		if (HX_FIELD_EQ(inName,"mouseSnapCheckBox") ) { return ::hx::Val( mouseSnapCheckBox ); }
		if (HX_FIELD_EQ(inName,"instVolumeStepper") ) { return ::hx::Val( instVolumeStepper ); }
		if (HX_FIELD_EQ(inName,"selectedEventText") ) { return ::hx::Val( selectedEventText ); }
		if (HX_FIELD_EQ(inName,"gfSectionCheckBox") ) { return ::hx::Val( gfSectionCheckBox ); }
		if (HX_FIELD_EQ(inName,"changeBpmCheckBox") ) { return ::hx::Val( changeBpmCheckBox ); }
		if (HX_FIELD_EQ(inName,"songNameInputText") ) { return ::hx::Val( songNameInputText ); }
		if (HX_FIELD_EQ(inName,"loadCharacterFile") ) { return ::hx::Val( loadCharacterFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"actionRemoveNotes") ) { return ::hx::Val( actionRemoveNotes_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"sectionFirstNoteID") ) { return ::hx::Val( sectionFirstNoteID ); }
		if (HX_FIELD_EQ(inName,"_keysPressedBuffer") ) { return ::hx::Val( _keysPressedBuffer ); }
		if (HX_FIELD_EQ(inName,"updateSelectionBox") ) { return ::hx::Val( updateSelectionBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetSelectedNotes") ) { return ::hx::Val( resetSelectedNotes_dyn() ); }
		if (HX_FIELD_EQ(inName,"cachedSectionTimes") ) { return ::hx::Val( cachedSectionTimes ); }
		if (HX_FIELD_EQ(inName,"showNoteTypeLabels") ) { return ::hx::Val( showNoteTypeLabels ); }
		if (HX_FIELD_EQ(inName,"playerMuteCheckBox") ) { return ::hx::Val( playerMuteCheckBox ); }
		if (HX_FIELD_EQ(inName,"beatsPerSecStepper") ) { return ::hx::Val( beatsPerSecStepper ); }
		if (HX_FIELD_EQ(inName,"scrollSpeedStepper") ) { return ::hx::Val( scrollSpeedStepper ); }
		if (HX_FIELD_EQ(inName,"audioOffsetStepper") ) { return ::hx::Val( audioOffsetStepper ); }
		if (HX_FIELD_EQ(inName,"girlfriendDropDown") ) { return ::hx::Val( girlfriendDropDown ); }
		if (HX_FIELD_EQ(inName,"showLastGridButton") ) { return ::hx::Val( showLastGridButton ); }
		if (HX_FIELD_EQ(inName,"showNextGridButton") ) { return ::hx::Val( showNextGridButton ); }
		if (HX_FIELD_EQ(inName,"vortexEditorButton") ) { return ::hx::Val( vortexEditorButton ); }
		if (HX_FIELD_EQ(inName,"getCurChartSection") ) { return ::hx::Val( getCurChartSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"actionReplaceNotes") ) { return ::hx::Val( actionReplaceNotes_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"sectionFirstEventID") ) { return ::hx::Val( sectionFirstEventID ); }
		if (HX_FIELD_EQ(inName,"behindRenderedNotes") ) { return ::hx::Val( behindRenderedNotes ); }
		if (HX_FIELD_EQ(inName,"movingNotesLastData") ) { return ::hx::Val( movingNotesLastData ); }
		if (HX_FIELD_EQ(inName,"showPreviousSection") ) { return ::hx::Val( showPreviousSection ); }
		if (HX_FIELD_EQ(inName,"positionNoteXByData") ) { return ::hx::Val( positionNoteXByData_dyn() ); }
		if (HX_FIELD_EQ(inName,"positionNoteYOnTime") ) { return ::hx::Val( positionNoteYOnTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"playerVolumeStepper") ) { return ::hx::Val( playerVolumeStepper ); }
		if (HX_FIELD_EQ(inName,"allowVocalsCheckBox") ) { return ::hx::Val( allowVocalsCheckBox ); }
		if (HX_FIELD_EQ(inName,"openEditorPlayState") ) { return ::hx::Val( openEditorPlayState_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"opponentMuteCheckBox") ) { return ::hx::Val( opponentMuteCheckBox ); }
		if (HX_FIELD_EQ(inName,"gameOverCharDropDown") ) { return ::hx::Val( gameOverCharDropDown ); }
		if (HX_FIELD_EQ(inName,"gameOverSndInputText") ) { return ::hx::Val( gameOverSndInputText ); }
		if (HX_FIELD_EQ(inName,"noteTextureInputText") ) { return ::hx::Val( noteTextureInputText ); }
		if (HX_FIELD_EQ(inName,"eventDescriptionText") ) { return ::hx::Val( eventDescriptionText ); }
		if (HX_FIELD_EQ(inName,"reloadNotesDropdowns") ) { return ::hx::Val( reloadNotesDropdowns_dyn() ); }
		if (HX_FIELD_EQ(inName,"noteTypeLabelsButton") ) { return ::hx::Val( noteTypeLabelsButton ); }
		if (HX_FIELD_EQ(inName,"updateGridVisibility") ) { return ::hx::Val( updateGridVisibility_dyn() ); }
		if (HX_FIELD_EQ(inName,"adaptNotesToNewTimes") ) { return ::hx::Val( adaptNotesToNewTimes_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"cachedSectionCrochets") ) { return ::hx::Val( cachedSectionCrochets ); }
		if (HX_FIELD_EQ(inName,"hitsoundPlayerStepper") ) { return ::hx::Val( hitsoundPlayerStepper ); }
		if (HX_FIELD_EQ(inName,"opponentVolumeStepper") ) { return ::hx::Val( opponentVolumeStepper ); }
		if (HX_FIELD_EQ(inName,"gameOverLoopInputText") ) { return ::hx::Val( gameOverLoopInputText ); }
		if (HX_FIELD_EQ(inName,"noteSplashesInputText") ) { return ::hx::Val( noteSplashesInputText ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"ignoreProgressCheckBox") ) { return ::hx::Val( ignoreProgressCheckBox ); }
		if (HX_FIELD_EQ(inName,"gameOverRetryInputText") ) { return ::hx::Val( gameOverRetryInputText ); }
		if (HX_FIELD_EQ(inName,"altAnimSectionCheckBox") ) { return ::hx::Val( altAnimSectionCheckBox ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"ignoreClickForThisFrame") ) { return ::hx::Val( ignoreClickForThisFrame ); }
		if (HX_FIELD_EQ(inName,"updateSelectedEventText") ) { return ::hx::Val( updateSelectedEventText_dyn() ); }
		if (HX_FIELD_EQ(inName,"hitsoundOpponentStepper") ) { return ::hx::Val( hitsoundOpponentStepper ); }
		if (HX_FIELD_EQ(inName,"overwriteSavedSomething") ) { return ::hx::Val( overwriteSavedSomething ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"pasteCopiedNotesToSection") ) { return ::hx::Val( pasteCopiedNotesToSection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ChartingState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"keysArray") ) { outValue = ( keysArray ); return true; }
		if (HX_FIELD_EQ(inName,"GRID_SIZE") ) { outValue = ( GRID_SIZE ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"GRID_PLAYERS") ) { outValue = ( GRID_PLAYERS ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"defaultEvents") ) { outValue = ( defaultEvents ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"SHOW_EVENT_COLUMN") ) { outValue = ( SHOW_EVENT_COLUMN ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"GRID_COLUMNS_PER_PLAYER") ) { outValue = ( GRID_COLUMNS_PER_PLAYER ); return true; }
	}
	return false;
}

::hx::Val ChartingState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"camUI") ) { camUI=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"icons") ) { icons=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"theme") ) { theme=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tipBg") ) { tipBg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"curSec") ) { curSec=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridBg") ) { gridBg=inValue.Cast<  ::states::editors::content::ChartingGridSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"events") ) { events=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mainBox") ) { mainBox=inValue.Cast<  ::backend::ui::PsychUIBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"infoBox") ) { infoBox=inValue.Cast<  ::backend::ui::PsychUIBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollY") ) { scrollY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curZoom") ) { curZoom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wavData") ) { wavData=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curQuant") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_curQuant(inValue.Cast< int >()) );curQuant=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upperBox") ) { upperBox=inValue.Cast<  ::backend::ui::PsychUIBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zoomList") ) { zoomList=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeLine") ) { timeLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"infoText") ) { infoText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lastSec") ) { _lastSec=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"eventIcon") ) { eventIcon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"outputTxt") ) { outputTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastFocus") ) { lastFocus=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteTypes") ) { noteTypes=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"BACKUP_EXT") ) { BACKUP_EXT=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prevGridBg") ) { prevGridBg=inValue.Cast<  ::states::editors::content::ChartingGridSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nextGridBg") ) { nextGridBg=inValue.Cast<  ::states::editors::content::ChartingGridSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { dummyArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridColors") ) { gridColors=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fileDialog") ) { fileDialog=inValue.Cast<  ::states::editors::content::FileDialogHandler >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventsList") ) { eventsList=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bpmStepper") ) { bpmStepper=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"quantColors") ) { quantColors=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"movingNotes") ) { movingNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"copiedNotes") ) { copiedNotes=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fullTipText") ) { fullTipText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"outputAlpha") ) { outputAlpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoSaveCap") ) { autoSaveCap=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backupLimit") ) { backupLimit=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastBeatHit") ) { lastBeatHit=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"undoActions") ) { undoActions=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentUndo") ) { currentUndo=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"autoSaveIcon") ) { autoSaveIcon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectionBox") ) { selectionBox=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_shouldReset") ) { _shouldReset=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"copiedEvents") ) { copiedEvents=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songFinished") ) { songFinished=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"autoSaveTime") ) { autoSaveTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playbackRate") ) { playbackRate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lockedEvents") ) { lockedEvents=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"quantizations") ) { quantizations=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isMovingNotes") ) { isMovingNotes=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vortexEnabled") ) { vortexEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectedNotes") ) { selectedNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"characterData") ) { characterData=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noRGBCheckBox") ) { noRGBCheckBox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventDropDown") ) { eventDropDown=inValue.Cast<  ::backend::ui::PsychUIDropDownMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stageDropDown") ) { stageDropDown=inValue.Cast<  ::backend::ui::PsychUIDropDownMenu >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"waveformSprite") ) { waveformSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { strumLineNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opponentVocals") ) { opponentVocals=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectionStart") ) { selectionStart=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"waveformTarget") ) { waveformTarget=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lastGfSection") ) { _lastGfSection=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playbackSlider") ) { playbackSlider=inValue.Cast<  ::backend::ui::PsychUISlider >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playerDropDown") ) { playerDropDown=inValue.Cast<  ::backend::ui::PsychUIDropDownMenu >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"chartEditorSave") ) { chartEditorSave=inValue.Cast<  ::flixel::util::FlxSave >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mainBoxPosition") ) { mainBoxPosition=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"infoBoxPosition") ) { infoBoxPosition=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vortexIndicator") ) { vortexIndicator=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"waveformEnabled") ) { waveformEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridColorsOther") ) { gridColorsOther=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showNextSection") ) { showNextSection=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"forceDataUpdate") ) { forceDataUpdate=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"value1InputText") ) { value1InputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"value2InputText") ) { value2InputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mustHitCheckBox") ) { mustHitCheckBox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"mustHitIndicator") ) { mustHitIndicator=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { curRenderedNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventLockOverlay") ) { eventLockOverlay=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"movingNotesLastY") ) { movingNotesLastY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cachedSectionRow") ) { cachedSectionRow=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"metronomeStepper") ) { metronomeStepper=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"instMuteCheckBox") ) { instMuteCheckBox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curEventSelected") ) { curEventSelected=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"susLengthLastVal") ) { susLengthLastVal=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"susLengthStepper") ) { susLengthStepper=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumTimeStepper") ) { strumTimeStepper=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteTypeDropDown") ) { noteTypeDropDown=inValue.Cast<  ::backend::ui::PsychUIDropDownMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"changeBpmStepper") ) { changeBpmStepper=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opponentDropDown") ) { opponentDropDown=inValue.Cast<  ::backend::ui::PsychUIDropDownMenu >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"noteSelectionSine") ) { noteSelectionSine=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cachedSectionBPMs") ) { cachedSectionBPMs=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseSnapCheckBox") ) { mouseSnapCheckBox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"instVolumeStepper") ) { instVolumeStepper=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectedEventText") ) { selectedEventText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gfSectionCheckBox") ) { gfSectionCheckBox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"changeBpmCheckBox") ) { changeBpmCheckBox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songNameInputText") ) { songNameInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"sectionFirstNoteID") ) { sectionFirstNoteID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_keysPressedBuffer") ) { _keysPressedBuffer=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cachedSectionTimes") ) { cachedSectionTimes=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showNoteTypeLabels") ) { showNoteTypeLabels=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playerMuteCheckBox") ) { playerMuteCheckBox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"beatsPerSecStepper") ) { beatsPerSecStepper=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollSpeedStepper") ) { scrollSpeedStepper=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"audioOffsetStepper") ) { audioOffsetStepper=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"girlfriendDropDown") ) { girlfriendDropDown=inValue.Cast<  ::backend::ui::PsychUIDropDownMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showLastGridButton") ) { showLastGridButton=inValue.Cast<  ::backend::ui::PsychUIButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showNextGridButton") ) { showNextGridButton=inValue.Cast<  ::backend::ui::PsychUIButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vortexEditorButton") ) { vortexEditorButton=inValue.Cast<  ::backend::ui::PsychUIButton >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"sectionFirstEventID") ) { sectionFirstEventID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"behindRenderedNotes") ) { behindRenderedNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"movingNotesLastData") ) { movingNotesLastData=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showPreviousSection") ) { showPreviousSection=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playerVolumeStepper") ) { playerVolumeStepper=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowVocalsCheckBox") ) { allowVocalsCheckBox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"opponentMuteCheckBox") ) { opponentMuteCheckBox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gameOverCharDropDown") ) { gameOverCharDropDown=inValue.Cast<  ::backend::ui::PsychUIDropDownMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gameOverSndInputText") ) { gameOverSndInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteTextureInputText") ) { noteTextureInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventDescriptionText") ) { eventDescriptionText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteTypeLabelsButton") ) { noteTypeLabelsButton=inValue.Cast<  ::backend::ui::PsychUIButton >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"cachedSectionCrochets") ) { cachedSectionCrochets=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hitsoundPlayerStepper") ) { hitsoundPlayerStepper=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opponentVolumeStepper") ) { opponentVolumeStepper=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gameOverLoopInputText") ) { gameOverLoopInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteSplashesInputText") ) { noteSplashesInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"ignoreProgressCheckBox") ) { ignoreProgressCheckBox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gameOverRetryInputText") ) { gameOverRetryInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"altAnimSectionCheckBox") ) { altAnimSectionCheckBox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"ignoreClickForThisFrame") ) { ignoreClickForThisFrame=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hitsoundOpponentStepper") ) { hitsoundOpponentStepper=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"overwriteSavedSomething") ) { overwriteSavedSomething=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ChartingState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"keysArray") ) { keysArray=ioValue.Cast< ::Array< int > >(); return true; }
		if (HX_FIELD_EQ(inName,"GRID_SIZE") ) { GRID_SIZE=ioValue.Cast< int >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"GRID_PLAYERS") ) { GRID_PLAYERS=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"defaultEvents") ) { defaultEvents=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"SHOW_EVENT_COLUMN") ) { SHOW_EVENT_COLUMN=ioValue.Cast< bool >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"GRID_COLUMNS_PER_PLAYER") ) { GRID_COLUMNS_PER_PLAYER=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void ChartingState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("BACKUP_EXT",c4,3a,e0,94));
	outFields->push(HX_("quantizations",52,ec,de,ff));
	outFields->push(HX_("quantColors",93,fc,30,18));
	outFields->push(HX_("curQuant",e3,78,95,a5));
	outFields->push(HX_("sectionFirstNoteID",b8,aa,13,c9));
	outFields->push(HX_("sectionFirstEventID",aa,ed,70,e1));
	outFields->push(HX_("curSec",f1,3d,d0,3e));
	outFields->push(HX_("chartEditorSave",08,76,eb,91));
	outFields->push(HX_("mainBox",52,67,3c,3b));
	outFields->push(HX_("mainBoxPosition",1b,66,7b,2e));
	outFields->push(HX_("infoBox",3d,b6,ff,0d));
	outFields->push(HX_("infoBoxPosition",06,18,d8,2d));
	outFields->push(HX_("upperBox",c9,e5,6f,90));
	outFields->push(HX_("camUI",23,20,1c,41));
	outFields->push(HX_("prevGridBg",7e,39,99,18));
	outFields->push(HX_("gridBg",2b,ce,23,18));
	outFields->push(HX_("nextGridBg",7e,7f,55,cd));
	outFields->push(HX_("waveformSprite",62,23,1b,4c));
	outFields->push(HX_("scrollY",ac,33,d8,30));
	outFields->push(HX_("zoomList",11,71,af,a0));
	outFields->push(HX_("curZoom",b3,14,0e,bc));
	outFields->push(HX_("mustHitIndicator",a5,c2,e6,a5));
	outFields->push(HX_("eventIcon",b3,f0,bf,f4));
	outFields->push(HX_("icons",da,a2,d7,b6));
	outFields->push(HX_("events",19,4f,6a,96));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("behindRenderedNotes",b2,39,3d,33));
	outFields->push(HX_("curRenderedNotes",2c,e1,fb,dc));
	outFields->push(HX_("movingNotes",d3,56,e8,2f));
	outFields->push(HX_("eventLockOverlay",eb,e4,f5,67));
	outFields->push(HX_("vortexIndicator",81,a1,c1,1f));
	outFields->push(HX_("strumLineNotes",24,f1,48,a4));
	outFields->push(HX_("dummyArrow",81,8a,75,ae));
	outFields->push(HX_("isMovingNotes",09,a7,0c,39));
	outFields->push(HX_("movingNotesLastData",93,0d,86,fd));
	outFields->push(HX_("movingNotesLastY",70,7d,56,38));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("opponentVocals",db,d1,18,64));
	outFields->push(HX_("timeLine",a1,9a,14,e8));
	outFields->push(HX_("infoText",3b,00,9e,3d));
	outFields->push(HX_("autoSaveIcon",e5,a3,b8,3a));
	outFields->push(HX_("outputTxt",ef,ad,3b,e5));
	outFields->push(HX_("selectionStart",76,58,7a,0f));
	outFields->push(HX_("selectionBox",1f,b5,7e,dd));
	outFields->push(HX_("_shouldReset",9d,26,a3,03));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("theme",09,7e,86,0f));
	outFields->push(HX_("copiedNotes",5d,6e,3c,8c));
	outFields->push(HX_("copiedEvents",7d,95,58,8d));
	outFields->push(HX_("_keysPressedBuffer",6f,93,48,e7));
	outFields->push(HX_("tipBg",00,e8,37,10));
	outFields->push(HX_("fullTipText",d9,c1,ff,ae));
	outFields->push(HX_("vortexEnabled",b3,8d,ea,81));
	outFields->push(HX_("waveformEnabled",84,2e,4a,6a));
	outFields->push(HX_("waveformTarget",ae,3a,72,0f));
	outFields->push(HX_("gridColors",16,69,a5,fc));
	outFields->push(HX_("gridColorsOther",da,bd,9b,1b));
	outFields->push(HX_("noteSelectionSine",67,79,94,37));
	outFields->push(HX_("selectedNotes",e6,b7,0c,96));
	outFields->push(HX_("ignoreClickForThisFrame",9c,43,5f,bb));
	outFields->push(HX_("outputAlpha",9d,04,68,75));
	outFields->push(HX_("songFinished",67,d0,4f,57));
	outFields->push(HX_("fileDialog",64,4c,b7,91));
	outFields->push(HX_("lastFocus",a2,8d,36,51));
	outFields->push(HX_("autoSaveTime",79,88,02,42));
	outFields->push(HX_("autoSaveCap",26,29,e4,90));
	outFields->push(HX_("backupLimit",99,07,44,7e));
	outFields->push(HX_("lastBeatHit",c7,9e,b0,28));
	outFields->push(HX_("cachedSectionRow",b7,63,20,17));
	outFields->push(HX_("cachedSectionTimes",a3,a2,98,8d));
	outFields->push(HX_("cachedSectionCrochets",02,3e,8f,ca));
	outFields->push(HX_("cachedSectionBPMs",77,c8,8b,1a));
	outFields->push(HX_("playbackRate",9b,3a,8b,c0));
	outFields->push(HX_("showPreviousSection",f1,cd,3e,b0));
	outFields->push(HX_("showNextSection",35,17,39,ea));
	outFields->push(HX_("showNoteTypeLabels",c8,de,33,ff));
	outFields->push(HX_("forceDataUpdate",9e,b5,40,83));
	outFields->push(HX_("characterData",73,e6,4f,3b));
	outFields->push(HX_("_lastSec",5c,3c,65,11));
	outFields->push(HX_("_lastGfSection",91,b0,ee,10));
	outFields->push(HX_("playbackSlider",9c,52,41,1a));
	outFields->push(HX_("mouseSnapCheckBox",52,7c,87,8c));
	outFields->push(HX_("ignoreProgressCheckBox",22,8c,d7,e4));
	outFields->push(HX_("hitsoundPlayerStepper",74,e4,11,db));
	outFields->push(HX_("hitsoundOpponentStepper",b8,4e,78,8b));
	outFields->push(HX_("metronomeStepper",ff,b3,47,cf));
	outFields->push(HX_("instVolumeStepper",b1,fa,2f,51));
	outFields->push(HX_("instMuteCheckBox",02,d7,bb,53));
	outFields->push(HX_("playerVolumeStepper",36,6e,67,15));
	outFields->push(HX_("playerMuteCheckBox",1d,fb,a3,9a));
	outFields->push(HX_("opponentVolumeStepper",7a,6a,be,7a));
	outFields->push(HX_("opponentMuteCheckBox",59,33,3e,9c));
	outFields->push(HX_("gameOverCharDropDown",ad,60,0b,ba));
	outFields->push(HX_("gameOverSndInputText",b4,70,d4,20));
	outFields->push(HX_("gameOverLoopInputText",8d,8c,1f,d0));
	outFields->push(HX_("gameOverRetryInputText",55,72,25,83));
	outFields->push(HX_("noRGBCheckBox",8f,67,68,ff));
	outFields->push(HX_("noteTextureInputText",8e,a5,d1,31));
	outFields->push(HX_("noteSplashesInputText",30,65,ff,7a));
	outFields->push(HX_("eventDropDown",6b,ce,0b,a2));
	outFields->push(HX_("value1InputText",17,f2,52,45));
	outFields->push(HX_("value2InputText",f6,69,9d,05));
	outFields->push(HX_("selectedEventText",0c,e8,ef,68));
	outFields->push(HX_("eventDescriptionText",cf,9c,5a,19));
	outFields->push(HX_("eventsList",17,98,ce,52));
	outFields->push(HX_("curEventSelected",f5,b2,2f,83));
	outFields->push(HX_("susLengthLastVal",94,01,95,df));
	outFields->push(HX_("susLengthStepper",7a,e0,45,89));
	outFields->push(HX_("strumTimeStepper",bb,49,39,65));
	outFields->push(HX_("noteTypeDropDown",1d,20,c5,82));
	outFields->push(HX_("noteTypes",27,bb,58,58));
	outFields->push(HX_("mustHitCheckBox",0d,5c,9c,c1));
	outFields->push(HX_("gfSectionCheckBox",c9,21,3d,53));
	outFields->push(HX_("altAnimSectionCheckBox",6e,b2,4c,36));
	outFields->push(HX_("changeBpmCheckBox",92,18,ea,5b));
	outFields->push(HX_("changeBpmStepper",82,59,fd,1b));
	outFields->push(HX_("beatsPerSecStepper",40,8c,e3,41));
	outFields->push(HX_("songNameInputText",f7,80,7f,25));
	outFields->push(HX_("allowVocalsCheckBox",0a,9b,3d,d8));
	outFields->push(HX_("bpmStepper",f2,97,4b,8f));
	outFields->push(HX_("scrollSpeedStepper",f7,27,74,31));
	outFields->push(HX_("audioOffsetStepper",08,87,02,0a));
	outFields->push(HX_("stageDropDown",0f,b5,6b,4d));
	outFields->push(HX_("playerDropDown",b2,10,4f,fa));
	outFields->push(HX_("opponentDropDown",ee,7a,61,05));
	outFields->push(HX_("girlfriendDropDown",0b,38,e2,e1));
	outFields->push(HX_("lockedEvents",c3,2b,2e,bf));
	outFields->push(HX_("showLastGridButton",2b,e5,a5,42));
	outFields->push(HX_("showNextGridButton",08,a6,bf,27));
	outFields->push(HX_("noteTypeLabelsButton",3d,6d,a3,b3));
	outFields->push(HX_("vortexEditorButton",0d,f9,27,db));
	outFields->push(HX_("overwriteSavedSomething",5e,f9,cc,b2));
	outFields->push(HX_("undoActions",39,32,52,ed));
	outFields->push(HX_("currentUndo",fd,9e,3b,86));
	outFields->push(HX_("wavData",76,29,9d,3b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ChartingState_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(ChartingState_obj,BACKUP_EXT),HX_("BACKUP_EXT",c4,3a,e0,94)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(ChartingState_obj,quantizations),HX_("quantizations",52,ec,de,ff)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(ChartingState_obj,quantColors),HX_("quantColors",93,fc,30,18)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,curQuant),HX_("curQuant",e3,78,95,a5)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,sectionFirstNoteID),HX_("sectionFirstNoteID",b8,aa,13,c9)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,sectionFirstEventID),HX_("sectionFirstEventID",aa,ed,70,e1)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,curSec),HX_("curSec",f1,3d,d0,3e)},
	{::hx::fsObject /*  ::flixel::util::FlxSave */ ,(int)offsetof(ChartingState_obj,chartEditorSave),HX_("chartEditorSave",08,76,eb,91)},
	{::hx::fsObject /*  ::backend::ui::PsychUIBox */ ,(int)offsetof(ChartingState_obj,mainBox),HX_("mainBox",52,67,3c,3b)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(ChartingState_obj,mainBoxPosition),HX_("mainBoxPosition",1b,66,7b,2e)},
	{::hx::fsObject /*  ::backend::ui::PsychUIBox */ ,(int)offsetof(ChartingState_obj,infoBox),HX_("infoBox",3d,b6,ff,0d)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(ChartingState_obj,infoBoxPosition),HX_("infoBoxPosition",06,18,d8,2d)},
	{::hx::fsObject /*  ::backend::ui::PsychUIBox */ ,(int)offsetof(ChartingState_obj,upperBox),HX_("upperBox",c9,e5,6f,90)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(ChartingState_obj,camUI),HX_("camUI",23,20,1c,41)},
	{::hx::fsObject /*  ::states::editors::content::ChartingGridSprite */ ,(int)offsetof(ChartingState_obj,prevGridBg),HX_("prevGridBg",7e,39,99,18)},
	{::hx::fsObject /*  ::states::editors::content::ChartingGridSprite */ ,(int)offsetof(ChartingState_obj,gridBg),HX_("gridBg",2b,ce,23,18)},
	{::hx::fsObject /*  ::states::editors::content::ChartingGridSprite */ ,(int)offsetof(ChartingState_obj,nextGridBg),HX_("nextGridBg",7e,7f,55,cd)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,waveformSprite),HX_("waveformSprite",62,23,1b,4c)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,scrollY),HX_("scrollY",ac,33,d8,30)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(ChartingState_obj,zoomList),HX_("zoomList",11,71,af,a0)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,curZoom),HX_("curZoom",b3,14,0e,bc)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,mustHitIndicator),HX_("mustHitIndicator",a5,c2,e6,a5)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,eventIcon),HX_("eventIcon",b3,f0,bf,f4)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,icons),HX_("icons",da,a2,d7,b6)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,events),HX_("events",19,4f,6a,96)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,behindRenderedNotes),HX_("behindRenderedNotes",b2,39,3d,33)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedNotes),HX_("curRenderedNotes",2c,e1,fb,dc)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,movingNotes),HX_("movingNotes",d3,56,e8,2f)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,eventLockOverlay),HX_("eventLockOverlay",eb,e4,f5,67)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,vortexIndicator),HX_("vortexIndicator",81,a1,c1,1f)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,strumLineNotes),HX_("strumLineNotes",24,f1,48,a4)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,dummyArrow),HX_("dummyArrow",81,8a,75,ae)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,isMovingNotes),HX_("isMovingNotes",09,a7,0c,39)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,movingNotesLastData),HX_("movingNotesLastData",93,0d,86,fd)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,movingNotesLastY),HX_("movingNotesLastY",70,7d,56,38)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(ChartingState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(ChartingState_obj,opponentVocals),HX_("opponentVocals",db,d1,18,64)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,timeLine),HX_("timeLine",a1,9a,14,e8)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,infoText),HX_("infoText",3b,00,9e,3d)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,autoSaveIcon),HX_("autoSaveIcon",e5,a3,b8,3a)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,outputTxt),HX_("outputTxt",ef,ad,3b,e5)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(ChartingState_obj,selectionStart),HX_("selectionStart",76,58,7a,0f)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,selectionBox),HX_("selectionBox",1f,b5,7e,dd)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,_shouldReset),HX_("_shouldReset",9d,26,a3,03)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,theme),HX_("theme",09,7e,86,0f)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ChartingState_obj,copiedNotes),HX_("copiedNotes",5d,6e,3c,8c)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ChartingState_obj,copiedEvents),HX_("copiedEvents",7d,95,58,8d)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(ChartingState_obj,_keysPressedBuffer),HX_("_keysPressedBuffer",6f,93,48,e7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,tipBg),HX_("tipBg",00,e8,37,10)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,fullTipText),HX_("fullTipText",d9,c1,ff,ae)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,vortexEnabled),HX_("vortexEnabled",b3,8d,ea,81)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,waveformEnabled),HX_("waveformEnabled",84,2e,4a,6a)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,waveformTarget),HX_("waveformTarget",ae,3a,72,0f)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(ChartingState_obj,gridColors),HX_("gridColors",16,69,a5,fc)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(ChartingState_obj,gridColorsOther),HX_("gridColorsOther",da,bd,9b,1b)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,noteSelectionSine),HX_("noteSelectionSine",67,79,94,37)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,selectedNotes),HX_("selectedNotes",e6,b7,0c,96)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,ignoreClickForThisFrame),HX_("ignoreClickForThisFrame",9c,43,5f,bb)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,outputAlpha),HX_("outputAlpha",9d,04,68,75)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,songFinished),HX_("songFinished",67,d0,4f,57)},
	{::hx::fsObject /*  ::states::editors::content::FileDialogHandler */ ,(int)offsetof(ChartingState_obj,fileDialog),HX_("fileDialog",64,4c,b7,91)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(ChartingState_obj,lastFocus),HX_("lastFocus",a2,8d,36,51)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,autoSaveTime),HX_("autoSaveTime",79,88,02,42)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,autoSaveCap),HX_("autoSaveCap",26,29,e4,90)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,backupLimit),HX_("backupLimit",99,07,44,7e)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,lastBeatHit),HX_("lastBeatHit",c7,9e,b0,28)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(ChartingState_obj,cachedSectionRow),HX_("cachedSectionRow",b7,63,20,17)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(ChartingState_obj,cachedSectionTimes),HX_("cachedSectionTimes",a3,a2,98,8d)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(ChartingState_obj,cachedSectionCrochets),HX_("cachedSectionCrochets",02,3e,8f,ca)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(ChartingState_obj,cachedSectionBPMs),HX_("cachedSectionBPMs",77,c8,8b,1a)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,playbackRate),HX_("playbackRate",9b,3a,8b,c0)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,showPreviousSection),HX_("showPreviousSection",f1,cd,3e,b0)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,showNextSection),HX_("showNextSection",35,17,39,ea)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,showNoteTypeLabels),HX_("showNoteTypeLabels",c8,de,33,ff)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,forceDataUpdate),HX_("forceDataUpdate",9e,b5,40,83)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ChartingState_obj,characterData),HX_("characterData",73,e6,4f,3b)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,_lastSec),HX_("_lastSec",5c,3c,65,11)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ChartingState_obj,_lastGfSection),HX_("_lastGfSection",91,b0,ee,10)},
	{::hx::fsObject /*  ::backend::ui::PsychUISlider */ ,(int)offsetof(ChartingState_obj,playbackSlider),HX_("playbackSlider",9c,52,41,1a)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(ChartingState_obj,mouseSnapCheckBox),HX_("mouseSnapCheckBox",52,7c,87,8c)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(ChartingState_obj,ignoreProgressCheckBox),HX_("ignoreProgressCheckBox",22,8c,d7,e4)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(ChartingState_obj,hitsoundPlayerStepper),HX_("hitsoundPlayerStepper",74,e4,11,db)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(ChartingState_obj,hitsoundOpponentStepper),HX_("hitsoundOpponentStepper",b8,4e,78,8b)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(ChartingState_obj,metronomeStepper),HX_("metronomeStepper",ff,b3,47,cf)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(ChartingState_obj,instVolumeStepper),HX_("instVolumeStepper",b1,fa,2f,51)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(ChartingState_obj,instMuteCheckBox),HX_("instMuteCheckBox",02,d7,bb,53)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(ChartingState_obj,playerVolumeStepper),HX_("playerVolumeStepper",36,6e,67,15)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(ChartingState_obj,playerMuteCheckBox),HX_("playerMuteCheckBox",1d,fb,a3,9a)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(ChartingState_obj,opponentVolumeStepper),HX_("opponentVolumeStepper",7a,6a,be,7a)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(ChartingState_obj,opponentMuteCheckBox),HX_("opponentMuteCheckBox",59,33,3e,9c)},
	{::hx::fsObject /*  ::backend::ui::PsychUIDropDownMenu */ ,(int)offsetof(ChartingState_obj,gameOverCharDropDown),HX_("gameOverCharDropDown",ad,60,0b,ba)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(ChartingState_obj,gameOverSndInputText),HX_("gameOverSndInputText",b4,70,d4,20)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(ChartingState_obj,gameOverLoopInputText),HX_("gameOverLoopInputText",8d,8c,1f,d0)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(ChartingState_obj,gameOverRetryInputText),HX_("gameOverRetryInputText",55,72,25,83)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(ChartingState_obj,noRGBCheckBox),HX_("noRGBCheckBox",8f,67,68,ff)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(ChartingState_obj,noteTextureInputText),HX_("noteTextureInputText",8e,a5,d1,31)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(ChartingState_obj,noteSplashesInputText),HX_("noteSplashesInputText",30,65,ff,7a)},
	{::hx::fsObject /*  ::backend::ui::PsychUIDropDownMenu */ ,(int)offsetof(ChartingState_obj,eventDropDown),HX_("eventDropDown",6b,ce,0b,a2)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(ChartingState_obj,value1InputText),HX_("value1InputText",17,f2,52,45)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(ChartingState_obj,value2InputText),HX_("value2InputText",f6,69,9d,05)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,selectedEventText),HX_("selectedEventText",0c,e8,ef,68)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,eventDescriptionText),HX_("eventDescriptionText",cf,9c,5a,19)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,eventsList),HX_("eventsList",17,98,ce,52)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,curEventSelected),HX_("curEventSelected",f5,b2,2f,83)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,susLengthLastVal),HX_("susLengthLastVal",94,01,95,df)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(ChartingState_obj,susLengthStepper),HX_("susLengthStepper",7a,e0,45,89)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(ChartingState_obj,strumTimeStepper),HX_("strumTimeStepper",bb,49,39,65)},
	{::hx::fsObject /*  ::backend::ui::PsychUIDropDownMenu */ ,(int)offsetof(ChartingState_obj,noteTypeDropDown),HX_("noteTypeDropDown",1d,20,c5,82)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(ChartingState_obj,noteTypes),HX_("noteTypes",27,bb,58,58)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(ChartingState_obj,mustHitCheckBox),HX_("mustHitCheckBox",0d,5c,9c,c1)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(ChartingState_obj,gfSectionCheckBox),HX_("gfSectionCheckBox",c9,21,3d,53)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(ChartingState_obj,altAnimSectionCheckBox),HX_("altAnimSectionCheckBox",6e,b2,4c,36)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(ChartingState_obj,changeBpmCheckBox),HX_("changeBpmCheckBox",92,18,ea,5b)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(ChartingState_obj,changeBpmStepper),HX_("changeBpmStepper",82,59,fd,1b)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(ChartingState_obj,beatsPerSecStepper),HX_("beatsPerSecStepper",40,8c,e3,41)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(ChartingState_obj,songNameInputText),HX_("songNameInputText",f7,80,7f,25)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(ChartingState_obj,allowVocalsCheckBox),HX_("allowVocalsCheckBox",0a,9b,3d,d8)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(ChartingState_obj,bpmStepper),HX_("bpmStepper",f2,97,4b,8f)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(ChartingState_obj,scrollSpeedStepper),HX_("scrollSpeedStepper",f7,27,74,31)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(ChartingState_obj,audioOffsetStepper),HX_("audioOffsetStepper",08,87,02,0a)},
	{::hx::fsObject /*  ::backend::ui::PsychUIDropDownMenu */ ,(int)offsetof(ChartingState_obj,stageDropDown),HX_("stageDropDown",0f,b5,6b,4d)},
	{::hx::fsObject /*  ::backend::ui::PsychUIDropDownMenu */ ,(int)offsetof(ChartingState_obj,playerDropDown),HX_("playerDropDown",b2,10,4f,fa)},
	{::hx::fsObject /*  ::backend::ui::PsychUIDropDownMenu */ ,(int)offsetof(ChartingState_obj,opponentDropDown),HX_("opponentDropDown",ee,7a,61,05)},
	{::hx::fsObject /*  ::backend::ui::PsychUIDropDownMenu */ ,(int)offsetof(ChartingState_obj,girlfriendDropDown),HX_("girlfriendDropDown",0b,38,e2,e1)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,lockedEvents),HX_("lockedEvents",c3,2b,2e,bf)},
	{::hx::fsObject /*  ::backend::ui::PsychUIButton */ ,(int)offsetof(ChartingState_obj,showLastGridButton),HX_("showLastGridButton",2b,e5,a5,42)},
	{::hx::fsObject /*  ::backend::ui::PsychUIButton */ ,(int)offsetof(ChartingState_obj,showNextGridButton),HX_("showNextGridButton",08,a6,bf,27)},
	{::hx::fsObject /*  ::backend::ui::PsychUIButton */ ,(int)offsetof(ChartingState_obj,noteTypeLabelsButton),HX_("noteTypeLabelsButton",3d,6d,a3,b3)},
	{::hx::fsObject /*  ::backend::ui::PsychUIButton */ ,(int)offsetof(ChartingState_obj,vortexEditorButton),HX_("vortexEditorButton",0d,f9,27,db)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,overwriteSavedSomething),HX_("overwriteSavedSomething",5e,f9,cc,b2)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,undoActions),HX_("undoActions",39,32,52,ed)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,currentUndo),HX_("currentUndo",fd,9e,3b,86)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,wavData),HX_("wavData",76,29,9d,3b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ChartingState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &ChartingState_obj::defaultEvents,HX_("defaultEvents",ba,22,e3,90)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &ChartingState_obj::keysArray,HX_("keysArray",05,67,3a,17)},
	{::hx::fsBool,(void *) &ChartingState_obj::SHOW_EVENT_COLUMN,HX_("SHOW_EVENT_COLUMN",7d,3b,98,48)},
	{::hx::fsInt,(void *) &ChartingState_obj::GRID_COLUMNS_PER_PLAYER,HX_("GRID_COLUMNS_PER_PLAYER",7e,2e,72,0e)},
	{::hx::fsInt,(void *) &ChartingState_obj::GRID_PLAYERS,HX_("GRID_PLAYERS",19,0c,53,a4)},
	{::hx::fsInt,(void *) &ChartingState_obj::GRID_SIZE,HX_("GRID_SIZE",1a,98,25,c9)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ChartingState_obj_sMemberFields[] = {
	HX_("BACKUP_EXT",c4,3a,e0,94),
	HX_("quantizations",52,ec,de,ff),
	HX_("quantColors",93,fc,30,18),
	HX_("curQuant",e3,78,95,a5),
	HX_("set_curQuant",60,50,a8,6f),
	HX_("updateVortexColor",8c,96,ea,45),
	HX_("sectionFirstNoteID",b8,aa,13,c9),
	HX_("sectionFirstEventID",aa,ed,70,e1),
	HX_("curSec",f1,3d,d0,3e),
	HX_("chartEditorSave",08,76,eb,91),
	HX_("mainBox",52,67,3c,3b),
	HX_("mainBoxPosition",1b,66,7b,2e),
	HX_("infoBox",3d,b6,ff,0d),
	HX_("infoBoxPosition",06,18,d8,2d),
	HX_("upperBox",c9,e5,6f,90),
	HX_("camUI",23,20,1c,41),
	HX_("prevGridBg",7e,39,99,18),
	HX_("gridBg",2b,ce,23,18),
	HX_("nextGridBg",7e,7f,55,cd),
	HX_("waveformSprite",62,23,1b,4c),
	HX_("scrollY",ac,33,d8,30),
	HX_("zoomList",11,71,af,a0),
	HX_("curZoom",b3,14,0e,bc),
	HX_("mustHitIndicator",a5,c2,e6,a5),
	HX_("eventIcon",b3,f0,bf,f4),
	HX_("icons",da,a2,d7,b6),
	HX_("events",19,4f,6a,96),
	HX_("notes",41,dc,ca,9f),
	HX_("behindRenderedNotes",b2,39,3d,33),
	HX_("curRenderedNotes",2c,e1,fb,dc),
	HX_("movingNotes",d3,56,e8,2f),
	HX_("eventLockOverlay",eb,e4,f5,67),
	HX_("vortexIndicator",81,a1,c1,1f),
	HX_("strumLineNotes",24,f1,48,a4),
	HX_("dummyArrow",81,8a,75,ae),
	HX_("isMovingNotes",09,a7,0c,39),
	HX_("movingNotesLastData",93,0d,86,fd),
	HX_("movingNotesLastY",70,7d,56,38),
	HX_("vocals",5e,10,51,59),
	HX_("opponentVocals",db,d1,18,64),
	HX_("timeLine",a1,9a,14,e8),
	HX_("infoText",3b,00,9e,3d),
	HX_("autoSaveIcon",e5,a3,b8,3a),
	HX_("outputTxt",ef,ad,3b,e5),
	HX_("selectionStart",76,58,7a,0f),
	HX_("selectionBox",1f,b5,7e,dd),
	HX_("_shouldReset",9d,26,a3,03),
	HX_("bg",c5,55,00,00),
	HX_("theme",09,7e,86,0f),
	HX_("copiedNotes",5d,6e,3c,8c),
	HX_("copiedEvents",7d,95,58,8d),
	HX_("_keysPressedBuffer",6f,93,48,e7),
	HX_("tipBg",00,e8,37,10),
	HX_("fullTipText",d9,c1,ff,ae),
	HX_("vortexEnabled",b3,8d,ea,81),
	HX_("waveformEnabled",84,2e,4a,6a),
	HX_("waveformTarget",ae,3a,72,0f),
	HX_("create",fc,66,0f,7c),
	HX_("gridColors",16,69,a5,fc),
	HX_("gridColorsOther",da,bd,9b,1b),
	HX_("changeTheme",79,26,4c,35),
	HX_("openNewChart",48,7a,1b,a7),
	HX_("prepareReload",40,b8,25,ca),
	HX_("onChartLoaded",a4,70,db,21),
	HX_("noteSelectionSine",67,79,94,37),
	HX_("selectedNotes",e6,b7,0c,96),
	HX_("ignoreClickForThisFrame",9c,43,5f,bb),
	HX_("outputAlpha",9d,04,68,75),
	HX_("songFinished",67,d0,4f,57),
	HX_("fileDialog",64,4c,b7,91),
	HX_("lastFocus",a2,8d,36,51),
	HX_("autoSaveTime",79,88,02,42),
	HX_("autoSaveCap",26,29,e4,90),
	HX_("backupLimit",99,07,44,7e),
	HX_("lastBeatHit",c7,9e,b0,28),
	HX_("update",09,86,05,87),
	HX_("moveSelectedNotes",15,ce,0c,78),
	HX_("stopMovingNotes",f1,d9,e3,39),
	HX_("makeNoteDataCopy",1f,64,e7,c4),
	HX_("updateScrollY",a3,98,46,fc),
	HX_("updateSelectionBox",c8,f0,8b,55),
	HX_("showOutput",de,b3,f5,75),
	HX_("resetSelectedNotes",97,88,21,31),
	HX_("onSelectNote",0d,2f,e9,8f),
	HX_("updateSelectedEventText",c3,c7,5c,42),
	HX_("createGrids",51,4e,6b,c3),
	HX_("cachedSectionRow",b7,63,20,17),
	HX_("cachedSectionTimes",a3,a2,98,8d),
	HX_("cachedSectionCrochets",02,3e,8f,ca),
	HX_("cachedSectionBPMs",77,c8,8b,1a),
	HX_("loadChart",d8,e8,ea,60),
	HX_("loadMusic",9f,1c,92,2b),
	HX_("onSongComplete",6d,9d,f8,6b),
	HX_("updateAudioVolume",c7,07,6d,92),
	HX_("playbackRate",9b,3a,8b,c0),
	HX_("setPitch",be,24,d5,d0),
	HX_("setSongPlaying",97,a3,62,ea),
	HX_("reloadNotes",28,36,6f,fb),
	HX_("createNote",0e,d9,97,5b),
	HX_("createEvent",7e,ff,3f,9f),
	HX_("_cacheSections",91,7b,ac,e7),
	HX_("showPreviousSection",f1,cd,3e,b0),
	HX_("showNextSection",35,17,39,ea),
	HX_("showNoteTypeLabels",c8,de,33,ff),
	HX_("forceDataUpdate",9e,b5,40,83),
	HX_("loadSection",5f,c4,75,2e),
	HX_("softReloadNotes",5e,65,41,cb),
	HX_("getMinNoteTime",db,f3,79,1e),
	HX_("getMaxNoteTime",ed,4e,94,59),
	HX_("positionNoteXByData",3e,56,29,e1),
	HX_("positionNoteYOnTime",2a,92,93,f2),
	HX_("characterData",73,e6,4f,3b),
	HX_("updateJsonData",9b,eb,1e,77),
	HX_("_lastSec",5c,3c,65,11),
	HX_("_lastGfSection",91,b0,ee,10),
	HX_("updateHeads",8a,3c,51,0a),
	HX_("playbackSlider",9c,52,41,1a),
	HX_("mouseSnapCheckBox",52,7c,87,8c),
	HX_("ignoreProgressCheckBox",22,8c,d7,e4),
	HX_("hitsoundPlayerStepper",74,e4,11,db),
	HX_("hitsoundOpponentStepper",b8,4e,78,8b),
	HX_("metronomeStepper",ff,b3,47,cf),
	HX_("instVolumeStepper",b1,fa,2f,51),
	HX_("instMuteCheckBox",02,d7,bb,53),
	HX_("playerVolumeStepper",36,6e,67,15),
	HX_("playerMuteCheckBox",1d,fb,a3,9a),
	HX_("opponentVolumeStepper",7a,6a,be,7a),
	HX_("opponentMuteCheckBox",59,33,3e,9c),
	HX_("addChartingTab",50,5d,a6,5d),
	HX_("gameOverCharDropDown",ad,60,0b,ba),
	HX_("gameOverSndInputText",b4,70,d4,20),
	HX_("gameOverLoopInputText",8d,8c,1f,d0),
	HX_("gameOverRetryInputText",55,72,25,83),
	HX_("noRGBCheckBox",8f,67,68,ff),
	HX_("noteTextureInputText",8e,a5,d1,31),
	HX_("noteSplashesInputText",30,65,ff,7a),
	HX_("addDataTab",2a,9e,63,79),
	HX_("eventDropDown",6b,ce,0b,a2),
	HX_("value1InputText",17,f2,52,45),
	HX_("value2InputText",f6,69,9d,05),
	HX_("selectedEventText",0c,e8,ef,68),
	HX_("eventDescriptionText",cf,9c,5a,19),
	HX_("eventsList",17,98,ce,52),
	HX_("curEventSelected",f5,b2,2f,83),
	HX_("addEventsTab",5b,9a,cb,0f),
	HX_("susLengthLastVal",94,01,95,df),
	HX_("susLengthStepper",7a,e0,45,89),
	HX_("strumTimeStepper",bb,49,39,65),
	HX_("noteTypeDropDown",1d,20,c5,82),
	HX_("noteTypes",27,bb,58,58),
	HX_("addNoteTab",62,29,de,b4),
	HX_("mustHitCheckBox",0d,5c,9c,c1),
	HX_("gfSectionCheckBox",c9,21,3d,53),
	HX_("altAnimSectionCheckBox",6e,b2,4c,36),
	HX_("changeBpmCheckBox",92,18,ea,5b),
	HX_("changeBpmStepper",82,59,fd,1b),
	HX_("beatsPerSecStepper",40,8c,e3,41),
	HX_("addSectionTab",f1,52,20,29),
	HX_("reloadNotesDropdowns",fa,bf,c5,8d),
	HX_("pasteCopiedNotesToSection",80,f6,a1,a2),
	HX_("songNameInputText",f7,80,7f,25),
	HX_("allowVocalsCheckBox",0a,9b,3d,d8),
	HX_("bpmStepper",f2,97,4b,8f),
	HX_("scrollSpeedStepper",f7,27,74,31),
	HX_("audioOffsetStepper",08,87,02,0a),
	HX_("stageDropDown",0f,b5,6b,4d),
	HX_("playerDropDown",b2,10,4f,fa),
	HX_("opponentDropDown",ee,7a,61,05),
	HX_("girlfriendDropDown",0b,38,e2,e1),
	HX_("addSongTab",5f,6d,b4,11),
	HX_("addFileTab",18,a5,d9,66),
	HX_("lockedEvents",c3,2b,2e,bf),
	HX_("addEditTab",4a,d6,31,8d),
	HX_("showLastGridButton",2b,e5,a5,42),
	HX_("showNextGridButton",08,a6,bf,27),
	HX_("noteTypeLabelsButton",3d,6d,a3,b3),
	HX_("vortexEditorButton",0d,f9,27,db),
	HX_("addViewTab",cf,d8,48,04),
	HX_("updateChartData",df,b6,6d,6d),
	HX_("saveChart",61,a4,60,d4),
	HX_("getCurChartSection",51,ba,35,ca),
	HX_("updateNotesRGB",75,ec,c5,a5),
	HX_("updateGridVisibility",21,34,2b,fe),
	HX_("adaptNotesToNewTimes",00,0a,63,23),
	HX_("UIEvent",26,fd,9f,07),
	HX_("updateUpperBoxBg",57,b3,77,c2),
	HX_("openEditorPlayState",66,fb,db,df),
	HX_("goToPlayState",3a,b5,7a,82),
	HX_("openSubState",5b,66,48,37),
	HX_("closeSubState",49,18,32,04),
	HX_("destroy",fa,2c,86,24),
	HX_("loadFileList",40,f1,5f,1a),
	HX_("loadCharacterFile",bf,34,63,a0),
	HX_("overwriteSavedSomething",5e,f9,cc,b2),
	HX_("overwriteCheck",bd,95,eb,bd),
	HX_("undoActions",39,32,52,ed),
	HX_("currentUndo",fd,9e,3b,86),
	HX_("addUndoAction",7b,f2,6a,9a),
	HX_("undo",24,c6,a9,4d),
	HX_("redo",fe,4d,a7,4b),
	HX_("actionPushNotes",71,c1,44,55),
	HX_("actionRemoveNotes",47,e5,06,02),
	HX_("actionReplaceNotes",43,08,78,b6),
	HX_("wavData",76,29,9d,3b),
	HX_("updateWaveform",a6,8a,94,26),
	HX_("waveformData",47,1c,55,96),
	::String(null()) };

static void ChartingState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ChartingState_obj::defaultEvents,"defaultEvents");
	HX_MARK_MEMBER_NAME(ChartingState_obj::keysArray,"keysArray");
	HX_MARK_MEMBER_NAME(ChartingState_obj::SHOW_EVENT_COLUMN,"SHOW_EVENT_COLUMN");
	HX_MARK_MEMBER_NAME(ChartingState_obj::GRID_COLUMNS_PER_PLAYER,"GRID_COLUMNS_PER_PLAYER");
	HX_MARK_MEMBER_NAME(ChartingState_obj::GRID_PLAYERS,"GRID_PLAYERS");
	HX_MARK_MEMBER_NAME(ChartingState_obj::GRID_SIZE,"GRID_SIZE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ChartingState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ChartingState_obj::defaultEvents,"defaultEvents");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::keysArray,"keysArray");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::SHOW_EVENT_COLUMN,"SHOW_EVENT_COLUMN");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::GRID_COLUMNS_PER_PLAYER,"GRID_COLUMNS_PER_PLAYER");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::GRID_PLAYERS,"GRID_PLAYERS");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::GRID_SIZE,"GRID_SIZE");
};

#endif

::hx::Class ChartingState_obj::__mClass;

static ::String ChartingState_obj_sStaticFields[] = {
	HX_("defaultEvents",ba,22,e3,90),
	HX_("keysArray",05,67,3a,17),
	HX_("SHOW_EVENT_COLUMN",7d,3b,98,48),
	HX_("GRID_COLUMNS_PER_PLAYER",7e,2e,72,0e),
	HX_("GRID_PLAYERS",19,0c,53,a4),
	HX_("GRID_SIZE",1a,98,25,c9),
	::String(null())
};

void ChartingState_obj::__register()
{
	ChartingState_obj _hx_dummy;
	ChartingState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.editors.ChartingState",19,00,5b,f8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ChartingState_obj::__GetStatic;
	__mClass->mSetStaticField = &ChartingState_obj::__SetStatic;
	__mClass->mMarkFunc = ChartingState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ChartingState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ChartingState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ChartingState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ChartingState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ChartingState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ChartingState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ChartingState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_70_boot)
HXDLIN(  70)		defaultEvents = ::Array_obj< ::Dynamic>::__new(17)->init(0,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_412,2))->init(1,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_413,2))->init(2,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_414,2))->init(3,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_415,2))->init(4,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_416,2))->init(5,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_417,2))->init(6,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_418,2))->init(7,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_419,2))->init(8,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_420,2))->init(9,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_421,2))->init(10,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_422,2))->init(11,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_423,2))->init(12,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_424,2))->init(13,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_425,2))->init(14,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_426,2))->init(15,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_427,2))->init(16,::Array_obj< ::String >::fromData( _hx_array_data_f85b0019_428,2));
            	}
{
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_90_boot)
HXDLIN(  90)		keysArray = ::Array_obj< int >::fromData( _hx_array_data_f85b0019_430,8);
            	}
{
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_91_boot)
HXDLIN(  91)		SHOW_EVENT_COLUMN = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_92_boot)
HXDLIN(  92)		GRID_COLUMNS_PER_PLAYER = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_93_boot)
HXDLIN(  93)		GRID_PLAYERS = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_27e1ce861cc941c0_94_boot)
HXDLIN(  94)		GRID_SIZE = 40;
            	}
}

} // end namespace states
} // end namespace editors
