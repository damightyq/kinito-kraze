// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_PsychCamera
#include <backend/PsychCamera.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIBox
#include <backend/ui/PsychUIBox.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIButton
#include <backend/ui/PsychUIButton.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUICheckBox
#include <backend/ui/PsychUICheckBox.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIDropDownMenu
#include <backend/ui/PsychUIDropDownMenu.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIEvent
#include <backend/ui/PsychUIEvent.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIInputText
#include <backend/ui/PsychUIInputText.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUINumericStepper
#include <backend/ui/PsychUINumericStepper.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIRadioGroup
#include <backend/ui/PsychUIRadioGroup.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUITab
#include <backend/ui/PsychUITab.h>
#endif
#ifndef INCLUDED_cutscenes_DialogueBoxPsych
#include <cutscenes/DialogueBoxPsych.h>
#endif
#ifndef INCLUDED_cutscenes_DialogueCharacter
#include <cutscenes/DialogueCharacter.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_lime_system_Clipboard
#include <lime/system/Clipboard.h>
#endif
#ifndef INCLUDED_objects_Alphabet
#include <objects/Alphabet.h>
#endif
#ifndef INCLUDED_objects_TypedAlphabet
#include <objects/TypedAlphabet.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_net_FileFilter
#include <openfl/net/FileFilter.h>
#endif
#ifndef INCLUDED_openfl_net_FileReference
#include <openfl/net/FileReference.h>
#endif
#ifndef INCLUDED_states_editors_DialogueCharacterEditorState
#include <states/editors/DialogueCharacterEditorState.h>
#endif
#ifndef INCLUDED_states_editors_MasterEditorMenu
#include <states/editors/MasterEditorMenu.h>
#endif
#ifndef INCLUDED_states_editors_content_BasePrompt
#include <states/editors/content/BasePrompt.h>
#endif
#ifndef INCLUDED_states_editors_content_ExitConfirmationPrompt
#include <states/editors/content/ExitConfirmationPrompt.h>
#endif
#ifndef INCLUDED_states_editors_content_Prompt
#include <states/editors/content/Prompt.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_17_new,"states.editors.DialogueCharacterEditorState","new",0x1b043bb9,"states.editors.DialogueCharacterEditorState.new","states/editors/DialogueCharacterEditorState.hx",17,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_56_create,"states.editors.DialogueCharacterEditorState","create",0x2407d943,"states.editors.DialogueCharacterEditorState.create","states/editors/DialogueCharacterEditorState.hx",56,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_145_addEditorBox,"states.editors.DialogueCharacterEditorState","addEditorBox",0x3e4fc184,"states.editors.DialogueCharacterEditorState.addEditorBox","states/editors/DialogueCharacterEditorState.hx",145,0x7bee4315)
static const ::String _hx_array_data_b303eb47_3[] = {
	HX_("Character Type",d1,82,ee,91),
};
static const ::String _hx_array_data_b303eb47_4[] = {
	HX_("Animations",0f,39,cd,79),HX_("Character",89,bb,a4,e3),
};
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_168_addTypeUI,"states.editors.DialogueCharacterEditorState","addTypeUI",0x3ba408a8,"states.editors.DialogueCharacterEditorState.addTypeUI","states/editors/DialogueCharacterEditorState.hx",168,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_163_addTypeUI,"states.editors.DialogueCharacterEditorState","addTypeUI",0x3ba408a8,"states.editors.DialogueCharacterEditorState.addTypeUI","states/editors/DialogueCharacterEditorState.hx",163,0x7bee4315)
static const ::String _hx_array_data_b303eb47_7[] = {
	HX_("Left",27,34,89,32),HX_("Center",f5,99,6f,3a),HX_("Right",bc,7b,91,7c),
};
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_193_addAnimationsUI,"states.editors.DialogueCharacterEditorState","addAnimationsUI",0x47a6d19d,"states.editors.DialogueCharacterEditorState.addAnimationsUI","states/editors/DialogueCharacterEditorState.hx",193,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_212_addAnimationsUI,"states.editors.DialogueCharacterEditorState","addAnimationsUI",0x47a6d19d,"states.editors.DialogueCharacterEditorState.addAnimationsUI","states/editors/DialogueCharacterEditorState.hx",212,0x7bee4315)
static const int _hx_array_data_b303eb47_12[] = {
	(int)0,(int)0,
};
static const int _hx_array_data_b303eb47_13[] = {
	(int)0,(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_254_addAnimationsUI,"states.editors.DialogueCharacterEditorState","addAnimationsUI",0x47a6d19d,"states.editors.DialogueCharacterEditorState.addAnimationsUI","states/editors/DialogueCharacterEditorState.hx",254,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_189_addAnimationsUI,"states.editors.DialogueCharacterEditorState","addAnimationsUI",0x47a6d19d,"states.editors.DialogueCharacterEditorState.addAnimationsUI","states/editors/DialogueCharacterEditorState.hx",189,0x7bee4315)
static const ::String _hx_array_data_b303eb47_16[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_290_reloadAnimationsDropDown,"states.editors.DialogueCharacterEditorState","reloadAnimationsDropDown",0x13676a00,"states.editors.DialogueCharacterEditorState.reloadAnimationsDropDown","states/editors/DialogueCharacterEditorState.hx",290,0x7bee4315)
static const ::String _hx_array_data_b303eb47_19[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_315_addCharacterUI,"states.editors.DialogueCharacterEditorState","addCharacterUI",0xb644bae3,"states.editors.DialogueCharacterEditorState.addCharacterUI","states/editors/DialogueCharacterEditorState.hx",315,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_330_addCharacterUI,"states.editors.DialogueCharacterEditorState","addCharacterUI",0xb644bae3,"states.editors.DialogueCharacterEditorState.addCharacterUI","states/editors/DialogueCharacterEditorState.hx",330,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_334_addCharacterUI,"states.editors.DialogueCharacterEditorState","addCharacterUI",0xb644bae3,"states.editors.DialogueCharacterEditorState.addCharacterUI","states/editors/DialogueCharacterEditorState.hx",334,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_337_addCharacterUI,"states.editors.DialogueCharacterEditorState","addCharacterUI",0xb644bae3,"states.editors.DialogueCharacterEditorState.addCharacterUI","states/editors/DialogueCharacterEditorState.hx",337,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_304_addCharacterUI,"states.editors.DialogueCharacterEditorState","addCharacterUI",0xb644bae3,"states.editors.DialogueCharacterEditorState.addCharacterUI","states/editors/DialogueCharacterEditorState.hx",304,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_345_updateCharTypeBox,"states.editors.DialogueCharacterEditorState","updateCharTypeBox",0xea9d44cb,"states.editors.DialogueCharacterEditorState.updateCharTypeBox","states/editors/DialogueCharacterEditorState.hx",345,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_361_reloadCharacter,"states.editors.DialogueCharacterEditorState","reloadCharacter",0x01b741e9,"states.editors.DialogueCharacterEditorState.reloadCharacter","states/editors/DialogueCharacterEditorState.hx",361,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_402_updateTextBox,"states.editors.DialogueCharacterEditorState","updateTextBox",0x84ffecee,"states.editors.DialogueCharacterEditorState.updateTextBox","states/editors/DialogueCharacterEditorState.hx",402,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_415_UIEvent,"states.editors.DialogueCharacterEditorState","UIEvent",0x590b88ff,"states.editors.DialogueCharacterEditorState.UIEvent","states/editors/DialogueCharacterEditorState.hx",415,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_441_update,"states.editors.DialogueCharacterEditorState","update",0x2efdf850,"states.editors.DialogueCharacterEditorState.update","states/editors/DialogueCharacterEditorState.hx",441,0x7bee4315)
static const int _hx_array_data_b303eb47_38[] = {
	(int)1,(int)1,(int)-1,(int)-1,
};
static const int _hx_array_data_b303eb47_39[] = {
	(int)1,(int)-1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_609_update,"states.editors.DialogueCharacterEditorState","update",0x2efdf850,"states.editors.DialogueCharacterEditorState.update","states/editors/DialogueCharacterEditorState.hx",609,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_621_loadCharacter,"states.editors.DialogueCharacterEditorState","loadCharacter",0xdf0f213c,"states.editors.DialogueCharacterEditorState.loadCharacter","states/editors/DialogueCharacterEditorState.hx",621,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_631_onLoadComplete,"states.editors.DialogueCharacterEditorState","onLoadComplete",0xc4cede05,"states.editors.DialogueCharacterEditorState.onLoadComplete","states/editors/DialogueCharacterEditorState.hx",631,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_674_onLoadCancel,"states.editors.DialogueCharacterEditorState","onLoadCancel",0x4ef09fc6,"states.editors.DialogueCharacterEditorState.onLoadCancel","states/editors/DialogueCharacterEditorState.hx",674,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_686_onLoadError,"states.editors.DialogueCharacterEditorState","onLoadError",0x3824e6fc,"states.editors.DialogueCharacterEditorState.onLoadError","states/editors/DialogueCharacterEditorState.hx",686,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_694_saveCharacter,"states.editors.DialogueCharacterEditorState","saveCharacter",0x8163d545,"states.editors.DialogueCharacterEditorState.saveCharacter","states/editors/DialogueCharacterEditorState.hx",694,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_710_onSaveComplete,"states.editors.DialogueCharacterEditorState","onSaveComplete",0x1dee3e1c,"states.editors.DialogueCharacterEditorState.onSaveComplete","states/editors/DialogueCharacterEditorState.hx",710,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_722_onSaveCancel,"states.editors.DialogueCharacterEditorState","onSaveCancel",0xe27efc1d,"states.editors.DialogueCharacterEditorState.onSaveCancel","states/editors/DialogueCharacterEditorState.hx",722,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_733_onSaveError,"states.editors.DialogueCharacterEditorState","onSaveError",0xab9aa285,"states.editors.DialogueCharacterEditorState.onSaveError","states/editors/DialogueCharacterEditorState.hx",733,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_741_ClipboardAdd,"states.editors.DialogueCharacterEditorState","ClipboardAdd",0x601b3b92,"states.editors.DialogueCharacterEditorState.ClipboardAdd","states/editors/DialogueCharacterEditorState.hx",741,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_23_boot,"states.editors.DialogueCharacterEditorState","boot",0x80c906b9,"states.editors.DialogueCharacterEditorState.boot","states/editors/DialogueCharacterEditorState.hx",23,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_30_boot,"states.editors.DialogueCharacterEditorState","boot",0x80c906b9,"states.editors.DialogueCharacterEditorState.boot","states/editors/DialogueCharacterEditorState.hx",30,0x7bee4315)
HX_LOCAL_STACK_FRAME(_hx_pos_bf8bb9c74f598b94_359_boot,"states.editors.DialogueCharacterEditorState","boot",0x80c906b9,"states.editors.DialogueCharacterEditorState.boot","states/editors/DialogueCharacterEditorState.hx",359,0x7bee4315)
namespace states{
namespace editors{

void DialogueCharacterEditorState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_17_new)
HXLINE( 620)		this->_file = null();
HXLINE( 440)		this->transitioning = false;
HXLINE( 439)		this->lastTab = HX_("Character",89,bb,a4,e3);
HXLINE( 438)		this->currentGhosts = 0;
HXLINE( 184)		this->animationArray = ::Array_obj< ::String >::__new(0);
HXLINE(  54)		this->unsavedProgress = false;
HXLINE(  53)		this->curAnim = 0;
HXLINE(  20)		this->daText = null();
HXLINE(  17)		super::__construct();
            	}

Dynamic DialogueCharacterEditorState_obj::__CreateEmpty() { return new DialogueCharacterEditorState_obj; }

void *DialogueCharacterEditorState_obj::_hx_vtable = 0;

Dynamic DialogueCharacterEditorState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DialogueCharacterEditorState_obj > _hx_result = new DialogueCharacterEditorState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DialogueCharacterEditorState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x53aaab8a) {
			if (inClassId<=(int)0x07c16e6f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x07c16e6f;
			} else {
				return inClassId==(int)0x53aaab8a;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

static ::backend::ui::PsychUIEvent_obj _hx_states_editors_DialogueCharacterEditorState__hx_backend_ui_PsychUIEvent= {
	( void (::hx::Object::*)(::String, ::Dynamic))&::states::editors::DialogueCharacterEditorState_obj::UIEvent,
};

void *DialogueCharacterEditorState_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x768fb553: return &_hx_states_editors_DialogueCharacterEditorState__hx_backend_ui_PsychUIEvent;
	}
	return super::_hx_getInterface(inHash);
}

void DialogueCharacterEditorState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_56_create)
HXLINE(  57)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE(  58)		this->camGame = this->initPsychCamera();
HXLINE(  59)		Float Alpha = ( (Float)(1) );
HXDLIN(  59)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(  59)		Float chroma = ((( (Float)(1) ) - ::Math_obj::abs(((Float)0.))) * ( (Float)(0) ));
HXDLIN(  59)		Float match = (((Float)0.5) - (chroma / ( (Float)(2) )));
HXDLIN(  59)		Float Hue = ( (Float)(0) );
HXDLIN(  59)		Float Chroma = chroma;
HXDLIN(  59)		Hue = ::hx::Mod(Hue,360);
HXDLIN(  59)		Float hueD = (Hue / ( (Float)(60) ));
HXDLIN(  59)		Float mid = ((Chroma * (( (Float)(1) ) - ::Math_obj::abs((::hx::Mod(hueD,2) - ( (Float)(1) ))))) + match);
HXDLIN(  59)		Chroma = (Chroma + match);
HXDLIN(  59)		switch((int)(::Std_obj::_hx_int(hueD))){
            			case (int)0: {
HXLINE(  59)				{
HXLINE(  59)					int Value = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(  59)					color = (color & -16711681);
HXDLIN(  59)					int color1;
HXDLIN(  59)					if ((Value > 255)) {
HXLINE(  59)						color1 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value < 0)) {
HXLINE(  59)							color1 = 0;
            						}
            						else {
HXLINE(  59)							color1 = Value;
            						}
            					}
HXDLIN(  59)					color = (color | (color1 << 16));
            				}
HXDLIN(  59)				{
HXLINE(  59)					int Value1 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(  59)					color = (color & -65281);
HXDLIN(  59)					int color2;
HXDLIN(  59)					if ((Value1 > 255)) {
HXLINE(  59)						color2 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value1 < 0)) {
HXLINE(  59)							color2 = 0;
            						}
            						else {
HXLINE(  59)							color2 = Value1;
            						}
            					}
HXDLIN(  59)					color = (color | (color2 << 8));
            				}
HXDLIN(  59)				{
HXLINE(  59)					int Value2 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(  59)					color = (color & -256);
HXDLIN(  59)					int color3;
HXDLIN(  59)					if ((Value2 > 255)) {
HXLINE(  59)						color3 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value2 < 0)) {
HXLINE(  59)							color3 = 0;
            						}
            						else {
HXLINE(  59)							color3 = Value2;
            						}
            					}
HXDLIN(  59)					color = (color | color3);
            				}
HXDLIN(  59)				{
HXLINE(  59)					int Value3 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(  59)					color = (color & 16777215);
HXDLIN(  59)					int color4;
HXDLIN(  59)					if ((Value3 > 255)) {
HXLINE(  59)						color4 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value3 < 0)) {
HXLINE(  59)							color4 = 0;
            						}
            						else {
HXLINE(  59)							color4 = Value3;
            						}
            					}
HXDLIN(  59)					color = (color | (color4 << 24));
            				}
            			}
            			break;
            			case (int)1: {
HXLINE(  59)				{
HXLINE(  59)					int Value4 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(  59)					color = (color & -16711681);
HXDLIN(  59)					int color5;
HXDLIN(  59)					if ((Value4 > 255)) {
HXLINE(  59)						color5 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value4 < 0)) {
HXLINE(  59)							color5 = 0;
            						}
            						else {
HXLINE(  59)							color5 = Value4;
            						}
            					}
HXDLIN(  59)					color = (color | (color5 << 16));
            				}
HXDLIN(  59)				{
HXLINE(  59)					int Value5 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(  59)					color = (color & -65281);
HXDLIN(  59)					int color6;
HXDLIN(  59)					if ((Value5 > 255)) {
HXLINE(  59)						color6 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value5 < 0)) {
HXLINE(  59)							color6 = 0;
            						}
            						else {
HXLINE(  59)							color6 = Value5;
            						}
            					}
HXDLIN(  59)					color = (color | (color6 << 8));
            				}
HXDLIN(  59)				{
HXLINE(  59)					int Value6 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(  59)					color = (color & -256);
HXDLIN(  59)					int color7;
HXDLIN(  59)					if ((Value6 > 255)) {
HXLINE(  59)						color7 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value6 < 0)) {
HXLINE(  59)							color7 = 0;
            						}
            						else {
HXLINE(  59)							color7 = Value6;
            						}
            					}
HXDLIN(  59)					color = (color | color7);
            				}
HXDLIN(  59)				{
HXLINE(  59)					int Value7 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(  59)					color = (color & 16777215);
HXDLIN(  59)					int color8;
HXDLIN(  59)					if ((Value7 > 255)) {
HXLINE(  59)						color8 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value7 < 0)) {
HXLINE(  59)							color8 = 0;
            						}
            						else {
HXLINE(  59)							color8 = Value7;
            						}
            					}
HXDLIN(  59)					color = (color | (color8 << 24));
            				}
            			}
            			break;
            			case (int)2: {
HXLINE(  59)				{
HXLINE(  59)					int Value8 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(  59)					color = (color & -16711681);
HXDLIN(  59)					int color9;
HXDLIN(  59)					if ((Value8 > 255)) {
HXLINE(  59)						color9 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value8 < 0)) {
HXLINE(  59)							color9 = 0;
            						}
            						else {
HXLINE(  59)							color9 = Value8;
            						}
            					}
HXDLIN(  59)					color = (color | (color9 << 16));
            				}
HXDLIN(  59)				{
HXLINE(  59)					int Value9 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(  59)					color = (color & -65281);
HXDLIN(  59)					int color10;
HXDLIN(  59)					if ((Value9 > 255)) {
HXLINE(  59)						color10 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value9 < 0)) {
HXLINE(  59)							color10 = 0;
            						}
            						else {
HXLINE(  59)							color10 = Value9;
            						}
            					}
HXDLIN(  59)					color = (color | (color10 << 8));
            				}
HXDLIN(  59)				{
HXLINE(  59)					int Value10 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(  59)					color = (color & -256);
HXDLIN(  59)					int color11;
HXDLIN(  59)					if ((Value10 > 255)) {
HXLINE(  59)						color11 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value10 < 0)) {
HXLINE(  59)							color11 = 0;
            						}
            						else {
HXLINE(  59)							color11 = Value10;
            						}
            					}
HXDLIN(  59)					color = (color | color11);
            				}
HXDLIN(  59)				{
HXLINE(  59)					int Value11 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(  59)					color = (color & 16777215);
HXDLIN(  59)					int color12;
HXDLIN(  59)					if ((Value11 > 255)) {
HXLINE(  59)						color12 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value11 < 0)) {
HXLINE(  59)							color12 = 0;
            						}
            						else {
HXLINE(  59)							color12 = Value11;
            						}
            					}
HXDLIN(  59)					color = (color | (color12 << 24));
            				}
            			}
            			break;
            			case (int)3: {
HXLINE(  59)				{
HXLINE(  59)					int Value12 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(  59)					color = (color & -16711681);
HXDLIN(  59)					int color13;
HXDLIN(  59)					if ((Value12 > 255)) {
HXLINE(  59)						color13 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value12 < 0)) {
HXLINE(  59)							color13 = 0;
            						}
            						else {
HXLINE(  59)							color13 = Value12;
            						}
            					}
HXDLIN(  59)					color = (color | (color13 << 16));
            				}
HXDLIN(  59)				{
HXLINE(  59)					int Value13 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(  59)					color = (color & -65281);
HXDLIN(  59)					int color14;
HXDLIN(  59)					if ((Value13 > 255)) {
HXLINE(  59)						color14 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value13 < 0)) {
HXLINE(  59)							color14 = 0;
            						}
            						else {
HXLINE(  59)							color14 = Value13;
            						}
            					}
HXDLIN(  59)					color = (color | (color14 << 8));
            				}
HXDLIN(  59)				{
HXLINE(  59)					int Value14 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(  59)					color = (color & -256);
HXDLIN(  59)					int color15;
HXDLIN(  59)					if ((Value14 > 255)) {
HXLINE(  59)						color15 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value14 < 0)) {
HXLINE(  59)							color15 = 0;
            						}
            						else {
HXLINE(  59)							color15 = Value14;
            						}
            					}
HXDLIN(  59)					color = (color | color15);
            				}
HXDLIN(  59)				{
HXLINE(  59)					int Value15 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(  59)					color = (color & 16777215);
HXDLIN(  59)					int color16;
HXDLIN(  59)					if ((Value15 > 255)) {
HXLINE(  59)						color16 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value15 < 0)) {
HXLINE(  59)							color16 = 0;
            						}
            						else {
HXLINE(  59)							color16 = Value15;
            						}
            					}
HXDLIN(  59)					color = (color | (color16 << 24));
            				}
            			}
            			break;
            			case (int)4: {
HXLINE(  59)				{
HXLINE(  59)					int Value16 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(  59)					color = (color & -16711681);
HXDLIN(  59)					int color17;
HXDLIN(  59)					if ((Value16 > 255)) {
HXLINE(  59)						color17 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value16 < 0)) {
HXLINE(  59)							color17 = 0;
            						}
            						else {
HXLINE(  59)							color17 = Value16;
            						}
            					}
HXDLIN(  59)					color = (color | (color17 << 16));
            				}
HXDLIN(  59)				{
HXLINE(  59)					int Value17 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(  59)					color = (color & -65281);
HXDLIN(  59)					int color18;
HXDLIN(  59)					if ((Value17 > 255)) {
HXLINE(  59)						color18 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value17 < 0)) {
HXLINE(  59)							color18 = 0;
            						}
            						else {
HXLINE(  59)							color18 = Value17;
            						}
            					}
HXDLIN(  59)					color = (color | (color18 << 8));
            				}
HXDLIN(  59)				{
HXLINE(  59)					int Value18 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(  59)					color = (color & -256);
HXDLIN(  59)					int color19;
HXDLIN(  59)					if ((Value18 > 255)) {
HXLINE(  59)						color19 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value18 < 0)) {
HXLINE(  59)							color19 = 0;
            						}
            						else {
HXLINE(  59)							color19 = Value18;
            						}
            					}
HXDLIN(  59)					color = (color | color19);
            				}
HXDLIN(  59)				{
HXLINE(  59)					int Value19 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(  59)					color = (color & 16777215);
HXDLIN(  59)					int color20;
HXDLIN(  59)					if ((Value19 > 255)) {
HXLINE(  59)						color20 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value19 < 0)) {
HXLINE(  59)							color20 = 0;
            						}
            						else {
HXLINE(  59)							color20 = Value19;
            						}
            					}
HXDLIN(  59)					color = (color | (color20 << 24));
            				}
            			}
            			break;
            			case (int)5: {
HXLINE(  59)				{
HXLINE(  59)					int Value20 = ::Math_obj::round((Chroma * ( (Float)(255) )));
HXDLIN(  59)					color = (color & -16711681);
HXDLIN(  59)					int color21;
HXDLIN(  59)					if ((Value20 > 255)) {
HXLINE(  59)						color21 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value20 < 0)) {
HXLINE(  59)							color21 = 0;
            						}
            						else {
HXLINE(  59)							color21 = Value20;
            						}
            					}
HXDLIN(  59)					color = (color | (color21 << 16));
            				}
HXDLIN(  59)				{
HXLINE(  59)					int Value21 = ::Math_obj::round((match * ( (Float)(255) )));
HXDLIN(  59)					color = (color & -65281);
HXDLIN(  59)					int color22;
HXDLIN(  59)					if ((Value21 > 255)) {
HXLINE(  59)						color22 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value21 < 0)) {
HXLINE(  59)							color22 = 0;
            						}
            						else {
HXLINE(  59)							color22 = Value21;
            						}
            					}
HXDLIN(  59)					color = (color | (color22 << 8));
            				}
HXDLIN(  59)				{
HXLINE(  59)					int Value22 = ::Math_obj::round((mid * ( (Float)(255) )));
HXDLIN(  59)					color = (color & -256);
HXDLIN(  59)					int color23;
HXDLIN(  59)					if ((Value22 > 255)) {
HXLINE(  59)						color23 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value22 < 0)) {
HXLINE(  59)							color23 = 0;
            						}
            						else {
HXLINE(  59)							color23 = Value22;
            						}
            					}
HXDLIN(  59)					color = (color | color23);
            				}
HXDLIN(  59)				{
HXLINE(  59)					int Value23 = ::Math_obj::round((Alpha * ( (Float)(255) )));
HXDLIN(  59)					color = (color & 16777215);
HXDLIN(  59)					int color24;
HXDLIN(  59)					if ((Value23 > 255)) {
HXLINE(  59)						color24 = 255;
            					}
            					else {
HXLINE(  59)						if ((Value23 < 0)) {
HXLINE(  59)							color24 = 0;
            						}
            						else {
HXLINE(  59)							color24 = Value23;
            						}
            					}
HXDLIN(  59)					color = (color | (color24 << 24));
            				}
            			}
            			break;
            		}
HXDLIN(  59)		this->camGame->bgColor = color;
HXLINE(  60)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  61)		{
HXLINE(  61)			 ::flixel::FlxCamera _hx_tmp = this->camHUD;
HXDLIN(  61)			_hx_tmp->bgColor = (_hx_tmp->bgColor & 16777215);
HXDLIN(  61)			 ::flixel::FlxCamera _hx_tmp1 = this->camHUD;
HXDLIN(  61)			_hx_tmp1->bgColor = (_hx_tmp1->bgColor | 0);
            		}
HXLINE(  62)		::flixel::FlxG_obj::cameras->add(this->camHUD,false).StaticCast<  ::flixel::FlxCamera >();
HXLINE(  64)		this->mainGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  65)		this->mainGroup->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camGame));
HXLINE(  66)		this->hudGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  67)		this->hudGroup->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camGame));
HXLINE(  68)		this->add(this->mainGroup);
HXLINE(  69)		this->add(this->hudGroup);
HXLINE(  71)		this->character =  ::cutscenes::DialogueCharacter_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  72)		{
HXLINE(  72)			 ::flixel::math::FlxBasePoint this1 = this->character->scrollFactor;
HXDLIN(  72)			this1->set_x(( (Float)(0) ));
HXDLIN(  72)			this1->set_y(( (Float)(0) ));
            		}
HXLINE(  73)		this->mainGroup->add(this->character).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  75)		this->ghostLoop =  ::cutscenes::DialogueCharacter_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  76)		this->ghostLoop->set_alpha(( (Float)(0) ));
HXLINE(  77)		this->ghostLoop->set_color(-65536);
HXLINE(  78)		this->ghostLoop->isGhost = true;
HXLINE(  79)		this->ghostLoop->jsonFile = this->character->jsonFile;
HXLINE(  80)		this->ghostLoop->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camGame));
HXLINE(  81)		this->mainGroup->add(this->ghostLoop).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  83)		this->ghostIdle =  ::cutscenes::DialogueCharacter_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  84)		this->ghostIdle->set_alpha(( (Float)(0) ));
HXLINE(  85)		this->ghostIdle->set_color(-16776961);
HXLINE(  86)		this->ghostIdle->isGhost = true;
HXLINE(  87)		this->ghostIdle->jsonFile = this->character->jsonFile;
HXLINE(  88)		this->ghostIdle->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camGame));
HXLINE(  89)		this->mainGroup->add(this->ghostIdle).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  91)		this->box =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,70,370,null());
HXLINE(  92)		this->box->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  93)		 ::flixel::FlxSprite _hx_tmp2 = this->box;
HXDLIN(  93)		::String parentFolder = null();
HXDLIN(  93)		if ((HX_("speech_bubble",49,db,97,da).indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE(  93)			::haxe::Log_obj::trace(HX_("speech_bubble",49,db,97,da), ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder)->init(1,true))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            		}
HXDLIN(  93)		 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(HX_("speech_bubble",49,db,97,da),parentFolder,true);
HXDLIN(  93)		bool xmlExists = false;
HXDLIN(  93)		::String xml = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("speech_bubble",49,db,97,da)) + HX_(".xml",69,3e,c3,1e)));
HXDLIN(  93)		if (::sys::FileSystem_obj::exists(xml)) {
HXLINE(  93)			xmlExists = true;
            		}
HXDLIN(  93)		 ::Dynamic _hx_tmp3;
HXDLIN(  93)		if (xmlExists) {
HXLINE(  93)			_hx_tmp3 = ::sys::io::File_obj::getContent(xml);
            		}
            		else {
HXLINE(  93)			::String key = (HX_("images/",77,50,74,c1) + HX_("speech_bubble",49,db,97,da));
HXDLIN(  93)			::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN(  93)			::String str = ( ( ::haxe::ds::StringMap)(this2) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXDLIN(  93)			if (::hx::IsNotNull( str )) {
HXLINE(  93)				key = str;
            			}
HXDLIN(  93)			_hx_tmp3 = ::backend::Paths_obj::getPath((key + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder,null());
            		}
HXDLIN(  93)		_hx_tmp2->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded,_hx_tmp3));
HXLINE(  94)		{
HXLINE(  94)			 ::flixel::math::FlxBasePoint this3 = this->box->scrollFactor;
HXDLIN(  94)			this3->set_x(( (Float)(0) ));
HXDLIN(  94)			this3->set_y(( (Float)(0) ));
            		}
HXLINE(  95)		this->box->animation->addByPrefix(HX_("normal",27,72,69,30),HX_("speech bubble normal",bd,d5,bc,a7),24,null(),null(),null());
HXLINE(  96)		this->box->animation->addByPrefix(HX_("center",d5,25,db,05),HX_("speech bubble middle",eb,36,b2,c3),24,null(),null(),null());
HXLINE(  97)		this->box->animation->play(HX_("normal",27,72,69,30),true,null(),null());
HXLINE(  98)		 ::flixel::FlxSprite _hx_tmp4 = this->box;
HXDLIN(  98)		_hx_tmp4->setGraphicSize(::Std_obj::_hx_int((this->box->get_width() * ((Float)0.9))),null());
HXLINE(  99)		this->box->updateHitbox();
HXLINE( 100)		this->hudGroup->add(this->box).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 102)		this->tipText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,10,(::flixel::FlxG_obj::width - 20),::states::editors::DialogueCharacterEditorState_obj::TIP_TEXT_MAIN,8,null());
HXLINE( 103)		 ::flixel::text::FlxText _hx_tmp5 = this->tipText;
HXDLIN( 103)		::String key1 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 103)		::Dynamic this4 = ::backend::Language_obj::phrases;
HXDLIN( 103)		::String str1 = ( ( ::haxe::ds::StringMap)(this4) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN( 103)		if (::hx::IsNotNull( str1 )) {
HXLINE( 103)			key1 = str1;
            		}
HXDLIN( 103)		::String folderKey = key1;
HXDLIN( 103)		::String file = ::backend::Paths_obj::modFolders(folderKey);
HXDLIN( 103)		::String _hx_tmp6;
HXDLIN( 103)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 103)			_hx_tmp6 = file;
            		}
            		else {
HXLINE( 103)			_hx_tmp6 = (HX_("assets/",4c,2a,dc,36) + folderKey);
            		}
HXDLIN( 103)		_hx_tmp5->setFormat(_hx_tmp6,16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 104)		this->tipText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 105)		{
HXLINE( 105)			 ::flixel::math::FlxBasePoint this5 = this->tipText->scrollFactor;
HXDLIN( 105)			this5->set_x(( (Float)(0) ));
HXDLIN( 105)			this5->set_y(( (Float)(0) ));
            		}
HXLINE( 106)		this->add(this->tipText);
HXLINE( 108)		this->offsetLoopText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,10,0,HX_("",00,00,00,00),32,null());
HXLINE( 109)		 ::flixel::text::FlxText _hx_tmp7 = this->offsetLoopText;
HXDLIN( 109)		::String key2 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 109)		::Dynamic this6 = ::backend::Language_obj::phrases;
HXDLIN( 109)		::String str2 = ( ( ::haxe::ds::StringMap)(this6) )->get_string(::StringTools_obj::trim(key2).toLowerCase());
HXDLIN( 109)		if (::hx::IsNotNull( str2 )) {
HXLINE( 109)			key2 = str2;
            		}
HXDLIN( 109)		::String folderKey1 = key2;
HXDLIN( 109)		::String file1 = ::backend::Paths_obj::modFolders(folderKey1);
HXDLIN( 109)		::String _hx_tmp8;
HXDLIN( 109)		if (::sys::FileSystem_obj::exists(file1)) {
HXLINE( 109)			_hx_tmp8 = file1;
            		}
            		else {
HXLINE( 109)			_hx_tmp8 = (HX_("assets/",4c,2a,dc,36) + folderKey1);
            		}
HXDLIN( 109)		_hx_tmp7->setFormat(_hx_tmp8,32,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 110)		this->offsetLoopText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 111)		{
HXLINE( 111)			 ::flixel::math::FlxBasePoint this7 = this->offsetLoopText->scrollFactor;
HXDLIN( 111)			this7->set_x(( (Float)(0) ));
HXDLIN( 111)			this7->set_y(( (Float)(0) ));
            		}
HXLINE( 112)		this->add(this->offsetLoopText);
HXLINE( 113)		this->offsetLoopText->set_visible(false);
HXLINE( 115)		this->offsetIdleText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,46,0,HX_("",00,00,00,00),32,null());
HXLINE( 116)		 ::flixel::text::FlxText _hx_tmp9 = this->offsetIdleText;
HXDLIN( 116)		::String key3 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 116)		::Dynamic this8 = ::backend::Language_obj::phrases;
HXDLIN( 116)		::String str3 = ( ( ::haxe::ds::StringMap)(this8) )->get_string(::StringTools_obj::trim(key3).toLowerCase());
HXDLIN( 116)		if (::hx::IsNotNull( str3 )) {
HXLINE( 116)			key3 = str3;
            		}
HXDLIN( 116)		::String folderKey2 = key3;
HXDLIN( 116)		::String file2 = ::backend::Paths_obj::modFolders(folderKey2);
HXDLIN( 116)		::String _hx_tmp10;
HXDLIN( 116)		if (::sys::FileSystem_obj::exists(file2)) {
HXLINE( 116)			_hx_tmp10 = file2;
            		}
            		else {
HXLINE( 116)			_hx_tmp10 = (HX_("assets/",4c,2a,dc,36) + folderKey2);
            		}
HXDLIN( 116)		_hx_tmp9->setFormat(_hx_tmp10,32,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 117)		this->offsetIdleText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 118)		{
HXLINE( 118)			 ::flixel::math::FlxBasePoint this9 = this->offsetIdleText->scrollFactor;
HXDLIN( 118)			this9->set_x(( (Float)(0) ));
HXDLIN( 118)			this9->set_y(( (Float)(0) ));
            		}
HXLINE( 119)		this->add(this->offsetIdleText);
HXLINE( 120)		this->offsetIdleText->set_visible(false);
HXLINE( 122)		this->animText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,22,(::flixel::FlxG_obj::width - 20),HX_("",00,00,00,00),8,null());
HXLINE( 123)		 ::flixel::text::FlxText _hx_tmp11 = this->animText;
HXDLIN( 123)		::String key4 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 123)		::Dynamic this10 = ::backend::Language_obj::phrases;
HXDLIN( 123)		::String str4 = ( ( ::haxe::ds::StringMap)(this10) )->get_string(::StringTools_obj::trim(key4).toLowerCase());
HXDLIN( 123)		if (::hx::IsNotNull( str4 )) {
HXLINE( 123)			key4 = str4;
            		}
HXDLIN( 123)		::String folderKey3 = key4;
HXDLIN( 123)		::String file3 = ::backend::Paths_obj::modFolders(folderKey3);
HXDLIN( 123)		::String _hx_tmp12;
HXDLIN( 123)		if (::sys::FileSystem_obj::exists(file3)) {
HXLINE( 123)			_hx_tmp12 = file3;
            		}
            		else {
HXLINE( 123)			_hx_tmp12 = (HX_("assets/",4c,2a,dc,36) + folderKey3);
            		}
HXDLIN( 123)		_hx_tmp11->setFormat(_hx_tmp12,24,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 124)		{
HXLINE( 124)			 ::flixel::math::FlxBasePoint this11 = this->animText->scrollFactor;
HXDLIN( 124)			this11->set_x(( (Float)(0) ));
HXDLIN( 124)			this11->set_y(( (Float)(0) ));
            		}
HXLINE( 125)		this->animText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 126)		this->add(this->animText);
HXLINE( 128)		this->reloadCharacter();
HXLINE( 129)		this->updateTextBox();
HXLINE( 131)		this->daText =  ::objects::TypedAlphabet_obj::__alloc( HX_CTX ,( (Float)(::cutscenes::DialogueBoxPsych_obj::DEFAULT_TEXT_X) ),( (Float)(::cutscenes::DialogueBoxPsych_obj::DEFAULT_TEXT_Y) ),HX_("",00,00,00,00),((Float)0.05),false);
HXLINE( 132)		this->daText->setScale(((Float)0.7),null());
HXLINE( 133)		this->daText->set_text(::states::editors::DialogueCharacterEditorState_obj::DEFAULT_TEXT);
HXLINE( 134)		this->hudGroup->add(this->daText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 136)		this->addEditorBox();
HXLINE( 137)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 138)		this->updateCharTypeBox();
HXLINE( 140)		this->super::create();
            	}


void DialogueCharacterEditorState_obj::addEditorBox(){
            	HX_GC_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_145_addEditorBox)
HXLINE( 146)		this->UI_typebox =  ::backend::ui::PsychUIBox_obj::__alloc( HX_CTX ,( (Float)(900) ),( (Float)((::flixel::FlxG_obj::height - 230)) ),120,180,::Array_obj< ::String >::fromData( _hx_array_data_b303eb47_3,1));
HXLINE( 147)		{
HXLINE( 147)			 ::flixel::math::FlxBasePoint this1 = this->UI_typebox->scrollFactor;
HXDLIN( 147)			this1->set_x(( (Float)(0) ));
HXDLIN( 147)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 148)		this->UI_typebox->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 149)		this->addTypeUI();
HXLINE( 150)		this->add(this->UI_typebox);
HXLINE( 152)		Float _hx_tmp = this->UI_typebox->x;
HXDLIN( 152)		Float _hx_tmp1 = ((_hx_tmp + this->UI_typebox->get_width()) + 10);
HXDLIN( 152)		this->UI_mainbox =  ::backend::ui::PsychUIBox_obj::__alloc( HX_CTX ,_hx_tmp1,( (Float)((::flixel::FlxG_obj::height - 300)) ),200,250,::Array_obj< ::String >::fromData( _hx_array_data_b303eb47_4,2));
HXLINE( 153)		{
HXLINE( 153)			 ::flixel::math::FlxBasePoint this2 = this->UI_mainbox->scrollFactor;
HXDLIN( 153)			this2->set_x(( (Float)(0) ));
HXDLIN( 153)			this2->set_y(( (Float)(0) ));
            		}
HXLINE( 154)		this->UI_mainbox->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 155)		this->addAnimationsUI();
HXLINE( 156)		this->addCharacterUI();
HXLINE( 157)		this->add(this->UI_mainbox);
HXLINE( 158)		this->UI_mainbox->set_selectedName(HX_("Character",89,bb,a4,e3));
HXLINE( 159)		this->lastTab = this->UI_mainbox->selectedName;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DialogueCharacterEditorState_obj,addEditorBox,(void))

void DialogueCharacterEditorState_obj::addTypeUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::DialogueCharacterEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_168_addTypeUI)
HXLINE( 169)			switch((int)(_gthis->characterTypeRadio->checked)){
            				case (int)0: {
HXLINE( 172)					_gthis->character->jsonFile->__SetField(HX_("dialogue_pos",ad,3b,6d,1a),HX_("left",07,08,b0,47),::hx::paccDynamic);
            				}
            				break;
            				case (int)1: {
HXLINE( 174)					_gthis->character->jsonFile->__SetField(HX_("dialogue_pos",ad,3b,6d,1a),HX_("center",d5,25,db,05),::hx::paccDynamic);
            				}
            				break;
            				case (int)2: {
HXLINE( 176)					_gthis->character->jsonFile->__SetField(HX_("dialogue_pos",ad,3b,6d,1a),HX_("right",dc,0b,64,e9),::hx::paccDynamic);
            				}
            				break;
            			}
HXLINE( 178)			_gthis->updateCharTypeBox();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_163_addTypeUI)
HXDLIN( 163)		 ::states::editors::DialogueCharacterEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 164)		 ::flixel::group::FlxTypedSpriteGroup tab_group = this->UI_typebox->getTab(HX_("Character Type",d1,82,ee,91))->menu;
HXLINE( 166)		this->characterTypeRadio =  ::backend::ui::PsychUIRadioGroup_obj::__alloc( HX_CTX ,( (Float)(10) ),( (Float)(20) ),::Array_obj< ::String >::fromData( _hx_array_data_b303eb47_7,3),40,null(),null(),null());
HXLINE( 167)		this->characterTypeRadio->set_checked(0);
HXLINE( 168)		this->characterTypeRadio->onClick =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE( 180)		tab_group->add(this->characterTypeRadio).StaticCast<  ::flixel::FlxSprite >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DialogueCharacterEditorState_obj,addTypeUI,(void))

void DialogueCharacterEditorState_obj::addAnimationsUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::DialogueCharacterEditorState,_gthis) HXARGC(2)
            		void _hx_run(int id,::String animation){
            			HX_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_193_addAnimationsUI)
HXLINE( 193)			if (_gthis->character->dialogueAnimations->exists(animation)) {
HXLINE( 194)				_gthis->ghostLoop->playAnim(animation,null());
HXLINE( 195)				_gthis->ghostIdle->playAnim(animation,true);
HXLINE( 197)				_gthis->curSelectedAnim = animation;
HXLINE( 198)				 ::Dynamic animShit = _gthis->character->dialogueAnimations->get(_gthis->curSelectedAnim);
HXLINE( 199)				 ::flixel::text::FlxText _gthis1 = _gthis->offsetLoopText;
HXDLIN( 199)				_gthis1->set_text((HX_("Loop: ",2a,ae,4d,96) + ::Std_obj::string( ::Dynamic(animShit->__Field(HX_("loop_offsets",65,0d,38,58),::hx::paccDynamic)))));
HXLINE( 200)				 ::flixel::text::FlxText _gthis2 = _gthis->offsetIdleText;
HXDLIN( 200)				_gthis2->set_text((HX_("Idle: ",da,3a,cf,0b) + ::Std_obj::string( ::Dynamic(animShit->__Field(HX_("idle_offsets",15,3e,2c,b8),::hx::paccDynamic)))));
HXLINE( 202)				_gthis->animationInputText->set_text(( (::String)(animShit->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ));
HXLINE( 203)				_gthis->loopInputText->set_text(( (::String)(animShit->__Field(HX_("loop_name",46,3d,8f,96),::hx::paccDynamic)) ));
HXLINE( 204)				_gthis->idleInputText->set_text(( (::String)(animShit->__Field(HX_("idle_name",96,be,e2,c5),::hx::paccDynamic)) ));
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::DialogueCharacterEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_212_addAnimationsUI)
HXLINE( 213)			::String theAnim = ::StringTools_obj::trim(_gthis->animationInputText->text);
HXLINE( 214)			if (_gthis->character->dialogueAnimations->exists(theAnim)) {
HXLINE( 216)				{
HXLINE( 216)					int _g = 0;
HXDLIN( 216)					int _g1 = ( (::Array< ::Dynamic>)(_gthis->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)) )->length;
HXDLIN( 216)					while((_g < _g1)){
HXLINE( 216)						_g = (_g + 1);
HXDLIN( 216)						int i = (_g - 1);
HXLINE( 217)						 ::Dynamic animArray =  ::Dynamic(_gthis->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic))->__GetItem(i);
HXLINE( 218)						if ((::StringTools_obj::trim(( (::String)(animArray->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) )) == theAnim)) {
HXLINE( 219)							animArray->__SetField(HX_("loop_name",46,3d,8f,96),_gthis->loopInputText->text,::hx::paccDynamic);
HXLINE( 220)							animArray->__SetField(HX_("idle_name",96,be,e2,c5),_gthis->idleInputText->text,::hx::paccDynamic);
HXLINE( 221)							goto _hx_goto_8;
            						}
            					}
            					_hx_goto_8:;
            				}
HXLINE( 225)				_gthis->character->reloadAnimations();
HXLINE( 226)				_gthis->ghostLoop->reloadAnimations();
HXLINE( 227)				_gthis->ghostIdle->reloadAnimations();
HXLINE( 228)				if ((_gthis->curSelectedAnim == theAnim)) {
HXLINE( 229)					_gthis->ghostLoop->playAnim(theAnim,null());
HXLINE( 230)					_gthis->ghostIdle->playAnim(theAnim,true);
            				}
            			}
            			else {
HXLINE( 235)				 ::Dynamic newAnim =  ::Dynamic(::hx::Anon_obj::Create(5)
            					->setFixed(0,HX_("loop_name",46,3d,8f,96),_gthis->loopInputText->text)
            					->setFixed(1,HX_("idle_offsets",15,3e,2c,b8),::Array_obj< int >::fromData( _hx_array_data_b303eb47_12,2))
            					->setFixed(2,HX_("idle_name",96,be,e2,c5),_gthis->idleInputText->text)
            					->setFixed(3,HX_("anim",11,86,71,40),theAnim)
            					->setFixed(4,HX_("loop_offsets",65,0d,38,58),::Array_obj< int >::fromData( _hx_array_data_b303eb47_13,2)));
HXLINE( 242)				( (::Array< ::Dynamic>)(_gthis->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)) )->push(newAnim);
HXLINE( 244)				::String lastSelected = _gthis->animationDropDown->selectedLabel;
HXLINE( 245)				_gthis->character->reloadAnimations();
HXLINE( 246)				_gthis->ghostLoop->reloadAnimations();
HXLINE( 247)				_gthis->ghostIdle->reloadAnimations();
HXLINE( 248)				_gthis->reloadAnimationsDropDown();
HXLINE( 249)				_gthis->animationDropDown->set_selectedLabel(lastSelected);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::DialogueCharacterEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_254_addAnimationsUI)
HXLINE( 254)			int _g = 0;
HXDLIN( 254)			int _g1 = ( (::Array< ::Dynamic>)(_gthis->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)) )->length;
HXDLIN( 254)			while((_g < _g1)){
HXLINE( 254)				_g = (_g + 1);
HXDLIN( 254)				int i = (_g - 1);
HXLINE( 255)				 ::Dynamic animArray =  ::Dynamic(_gthis->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic))->__GetItem(i);
HXLINE( 256)				bool removeUpdateButton;
HXDLIN( 256)				if (::hx::IsNotNull( animArray )) {
HXLINE( 256)					::String removeUpdateButton1 = ::StringTools_obj::trim(( (::String)(animArray->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ));
HXDLIN( 256)					removeUpdateButton = (removeUpdateButton1 == ::StringTools_obj::trim(_gthis->animationInputText->text));
            				}
            				else {
HXLINE( 256)					removeUpdateButton = false;
            				}
HXDLIN( 256)				if (removeUpdateButton) {
HXLINE( 257)					::String lastSelected = _gthis->animationDropDown->selectedLabel;
HXLINE( 258)					( (::Array< ::Dynamic>)(_gthis->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)) )->remove(animArray);
HXLINE( 259)					_gthis->character->reloadAnimations();
HXLINE( 260)					_gthis->ghostLoop->reloadAnimations();
HXLINE( 261)					_gthis->ghostIdle->reloadAnimations();
HXLINE( 262)					_gthis->reloadAnimationsDropDown();
HXLINE( 263)					bool removeUpdateButton2;
HXDLIN( 263)					if ((( (::Array< ::Dynamic>)(_gthis->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)) )->length > 0)) {
HXLINE( 263)						removeUpdateButton2 = (lastSelected == ::StringTools_obj::trim(( (::String)(animArray->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) )));
            					}
            					else {
HXLINE( 263)						removeUpdateButton2 = false;
            					}
HXDLIN( 263)					if (removeUpdateButton2) {
HXLINE( 264)						::String animToPlay = ( (::String)( ::Dynamic(_gthis->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic))->__GetItem(0)->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) );
HXLINE( 265)						_gthis->ghostLoop->playAnim(animToPlay,null());
HXLINE( 266)						_gthis->ghostIdle->playAnim(animToPlay,true);
            					}
HXLINE( 268)					_gthis->animationDropDown->set_selectedLabel(lastSelected);
HXLINE( 269)					_gthis->animationInputText->set_text(HX_("",00,00,00,00));
HXLINE( 270)					_gthis->loopInputText->set_text(HX_("",00,00,00,00));
HXLINE( 271)					_gthis->idleInputText->set_text(HX_("",00,00,00,00));
HXLINE( 272)					goto _hx_goto_9;
            				}
            			}
            			_hx_goto_9:;
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_189_addAnimationsUI)
HXDLIN( 189)		 ::states::editors::DialogueCharacterEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 190)		 ::flixel::group::FlxTypedSpriteGroup tab_group = this->UI_mainbox->getTab(HX_("Animations",0f,39,cd,79))->menu;
HXLINE( 192)		this->animationDropDown =  ::backend::ui::PsychUIDropDownMenu_obj::__alloc( HX_CTX ,( (Float)(10) ),( (Float)(30) ),::Array_obj< ::String >::fromData( _hx_array_data_b303eb47_16,1), ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE( 208)		this->animationInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,15,85,80,HX_("",00,00,00,00),8);
HXLINE( 209)		this->loopInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,this->animationInputText->x,(this->animationInputText->y + 35),150,HX_("",00,00,00,00),8);
HXLINE( 210)		this->idleInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,this->loopInputText->x,(this->loopInputText->y + 40),150,HX_("",00,00,00,00),8);
HXLINE( 212)		 ::backend::ui::PsychUIButton addUpdateButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,10,(this->idleInputText->y + 30),HX_("Add/Update",b7,cf,f4,ee), ::Dynamic(new _hx_Closure_1(_gthis)),null(),null());
HXLINE( 253)		 ::backend::ui::PsychUIButton removeUpdateButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,100,addUpdateButton->y,HX_("Remove",64,10,1d,39), ::Dynamic(new _hx_Closure_2(_gthis)),null(),null());
HXLINE( 277)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->animationDropDown->x,(this->animationDropDown->y - ( (Float)(18) )),0,HX_("Animations:",4b,b4,c4,19),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 278)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->animationInputText->x,(this->animationInputText->y - ( (Float)(18) )),0,HX_("Animation name:",53,2d,e4,9c),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 279)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->loopInputText->x,(this->loopInputText->y - ( (Float)(18) )),0,HX_("Loop name on .XML file:",0f,92,39,19),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 280)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->idleInputText->x,(this->idleInputText->y - ( (Float)(18) )),0,HX_("Idle/Finished name on .XML file:",26,01,6d,a4),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 281)		tab_group->add(this->animationInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 282)		tab_group->add(this->loopInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 283)		tab_group->add(this->idleInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 284)		tab_group->add(addUpdateButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 285)		tab_group->add(removeUpdateButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 286)		tab_group->add(this->animationDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 287)		this->reloadAnimationsDropDown();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DialogueCharacterEditorState_obj,addAnimationsUI,(void))

void DialogueCharacterEditorState_obj::reloadAnimationsDropDown(){
            	HX_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_290_reloadAnimationsDropDown)
HXLINE( 291)		this->animationArray = ::Array_obj< ::String >::__new(0);
HXLINE( 292)		{
HXLINE( 292)			int _g = 0;
HXDLIN( 292)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(this->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)) );
HXDLIN( 292)			while((_g < _g1->length)){
HXLINE( 292)				 ::Dynamic anim = _g1->__get(_g);
HXDLIN( 292)				_g = (_g + 1);
HXLINE( 293)				this->animationArray->push( ::Dynamic(anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)));
            			}
            		}
HXLINE( 296)		if ((this->animationArray->length < 1)) {
HXLINE( 296)			this->animationArray = ::Array_obj< ::String >::fromData( _hx_array_data_b303eb47_19,1);
            		}
HXLINE( 297)		this->animationDropDown->set_list(this->animationArray);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DialogueCharacterEditorState_obj,reloadAnimationsDropDown,(void))

void DialogueCharacterEditorState_obj::addCharacterUI(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::backend::ui::PsychUICheckBox,noAntialiasingCheckbox, ::states::editors::DialogueCharacterEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_315_addCharacterUI)
HXLINE( 316)			_gthis->character->jsonFile->__SetField(HX_("no_antialiasing",f2,74,67,98),noAntialiasingCheckbox->checked,::hx::paccDynamic);
HXLINE( 317)			_gthis->character->set_antialiasing(!(( (bool)(_gthis->character->jsonFile->__Field(HX_("no_antialiasing",f2,74,67,98),::hx::paccDynamic)) )));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::DialogueCharacterEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_330_addCharacterUI)
HXLINE( 330)			_gthis->reloadCharacter();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::DialogueCharacterEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_334_addCharacterUI)
HXLINE( 334)			_gthis->loadCharacter();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::states::editors::DialogueCharacterEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_337_addCharacterUI)
HXLINE( 337)			_gthis->saveCharacter();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_304_addCharacterUI)
HXDLIN( 304)		 ::states::editors::DialogueCharacterEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 305)		 ::flixel::group::FlxTypedSpriteGroup tab_group = this->UI_mainbox->getTab(HX_("Character",89,bb,a4,e3))->menu;
HXLINE( 307)		this->imageInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,10,30,80,( (::String)(this->character->jsonFile->__Field(HX_("image",5b,1f,69,bd),::hx::paccDynamic)) ),8);
HXLINE( 308)		this->xStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,this->imageInputText->x,(this->imageInputText->y + 50),10, ::Dynamic(this->character->jsonFile->__Field(HX_("position",a9,a0,fa,ca),::hx::paccDynamic))->__GetItem(0),-2000,2000,0,null(),null());
HXLINE( 309)		this->yStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,(this->imageInputText->x + 80),this->xStepper->y,10, ::Dynamic(this->character->jsonFile->__Field(HX_("position",a9,a0,fa,ca),::hx::paccDynamic))->__GetItem(1),-2000,2000,0,null(),null());
HXLINE( 310)		this->scaleStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,this->imageInputText->x,(this->xStepper->y + 50),((Float)0.05),this->character->jsonFile->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic),((Float)0.1),10,2,null(),null());
HXLINE( 312)		 ::backend::ui::PsychUICheckBox noAntialiasingCheckbox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,(this->scaleStepper->x + 80),this->scaleStepper->y,HX_("No Antialiasing",33,e6,a6,96),100,null());
HXLINE( 313)		noAntialiasingCheckbox->set_checked(::hx::IsEq( this->character->jsonFile->__Field(HX_("no_antialiasing",f2,74,67,98),::hx::paccDynamic),true ));
HXLINE( 314)		noAntialiasingCheckbox->onClick =  ::Dynamic(new _hx_Closure_0(noAntialiasingCheckbox,_gthis));
HXLINE( 320)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,(this->imageInputText->y - ( (Float)(18) )),0,HX_("Image file name:",b0,6b,31,2a),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 321)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,(this->xStepper->y - ( (Float)(18) )),0,HX_("Position Offset:",d0,42,f8,5c),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 322)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,(this->scaleStepper->y - ( (Float)(18) )),0,HX_("Scale:",90,5e,ba,70),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 323)		tab_group->add(this->imageInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 324)		tab_group->add(this->xStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 325)		tab_group->add(this->yStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 326)		tab_group->add(this->scaleStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 327)		tab_group->add(noAntialiasingCheckbox).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 329)		 ::backend::ui::PsychUIButton reloadImageButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,10,(this->scaleStepper->y + 60),HX_("Reload Image",54,43,aa,83), ::Dynamic(new _hx_Closure_1(_gthis)),null(),null());
HXLINE( 333)		 ::backend::ui::PsychUIButton loadButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,(reloadImageButton->x + 100),reloadImageButton->y,HX_("Load Character",2f,51,49,37), ::Dynamic(new _hx_Closure_2(_gthis)),null(),null());
HXLINE( 336)		 ::backend::ui::PsychUIButton saveButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,loadButton->x,(reloadImageButton->y - ( (Float)(25) )),HX_("Save Character",06,25,12,9f), ::Dynamic(new _hx_Closure_3(_gthis)),null(),null());
HXLINE( 339)		tab_group->add(reloadImageButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 340)		tab_group->add(loadButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 341)		tab_group->add(saveButton).StaticCast<  ::flixel::FlxSprite >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DialogueCharacterEditorState_obj,addCharacterUI,(void))

void DialogueCharacterEditorState_obj::updateCharTypeBox(){
            	HX_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_345_updateCharTypeBox)
HXLINE( 346)		::String _hx_switch_0 = ( (::String)(this->character->jsonFile->__Field(HX_("dialogue_pos",ad,3b,6d,1a),::hx::paccDynamic)) );
            		if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE( 351)			this->characterTypeRadio->set_checked(1);
HXDLIN( 351)			goto _hx_goto_25;
            		}
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE( 349)			this->characterTypeRadio->set_checked(0);
HXDLIN( 349)			goto _hx_goto_25;
            		}
            		/* default */{
HXLINE( 353)			this->characterTypeRadio->set_checked(2);
            		}
            		_hx_goto_25:;
HXLINE( 355)		this->reloadCharacter();
HXLINE( 356)		this->updateTextBox();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DialogueCharacterEditorState_obj,updateCharTypeBox,(void))

void DialogueCharacterEditorState_obj::reloadCharacter(){
            	HX_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_361_reloadCharacter)
HXLINE( 362)		::Array< ::Dynamic> charsArray = ::Array_obj< ::Dynamic>::__new(3)->init(0,this->character)->init(1,this->ghostLoop)->init(2,this->ghostIdle);
HXLINE( 363)		{
HXLINE( 363)			int _g = 0;
HXDLIN( 363)			while((_g < charsArray->length)){
HXLINE( 363)				 ::cutscenes::DialogueCharacter _hx_char = charsArray->__get(_g).StaticCast<  ::cutscenes::DialogueCharacter >();
HXDLIN( 363)				_g = (_g + 1);
HXLINE( 364)				::String key = ( (::String)((HX_("dialogue/",17,48,13,fa) + this->character->jsonFile->__Field(HX_("image",5b,1f,69,bd),::hx::paccDynamic))) );
HXDLIN( 364)				::String parentFolder = null();
HXDLIN( 364)				if ((key.indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE( 364)					::haxe::Log_obj::trace(key, ::Dynamic(::hx::Anon_obj::Create(5)
            						->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            						->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder)->init(1,true))
            						->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            						->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            						->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            				}
HXDLIN( 364)				 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(key,parentFolder,true);
HXDLIN( 364)				bool xmlExists = false;
HXDLIN( 364)				::String xml = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)));
HXDLIN( 364)				if (::sys::FileSystem_obj::exists(xml)) {
HXLINE( 364)					xmlExists = true;
            				}
HXDLIN( 364)				 ::Dynamic _hx_tmp;
HXDLIN( 364)				if (xmlExists) {
HXLINE( 364)					_hx_tmp = ::sys::io::File_obj::getContent(xml);
            				}
            				else {
HXLINE( 364)					::String key1 = (HX_("images/",77,50,74,c1) + key);
HXDLIN( 364)					::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 364)					::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN( 364)					if (::hx::IsNotNull( str )) {
HXLINE( 364)						key1 = str;
            					}
HXDLIN( 364)					_hx_tmp = ::backend::Paths_obj::getPath((key1 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder,null());
            				}
HXDLIN( 364)				_hx_char->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded,_hx_tmp));
HXLINE( 365)				_hx_char->jsonFile = this->character->jsonFile;
HXLINE( 366)				_hx_char->reloadAnimations();
HXLINE( 367)				Float _hx_tmp1 = _hx_char->get_width();
HXDLIN( 367)				_hx_char->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp1 * ::cutscenes::DialogueCharacter_obj::DEFAULT_SCALE) * ( (Float)(this->character->jsonFile->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic)) ))),null());
HXLINE( 368)				_hx_char->updateHitbox();
            			}
            		}
HXLINE( 370)		this->character->set_x(::cutscenes::DialogueBoxPsych_obj::LEFT_CHAR_X);
HXLINE( 371)		this->character->set_y(::cutscenes::DialogueBoxPsych_obj::DEFAULT_CHAR_Y);
HXLINE( 373)		::String _hx_switch_0 = ( (::String)(this->character->jsonFile->__Field(HX_("dialogue_pos",ad,3b,6d,1a),::hx::paccDynamic)) );
            		if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE( 378)			this->character->set_x((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )));
HXLINE( 379)			 ::cutscenes::DialogueCharacter fh = this->character;
HXDLIN( 379)			Float fh1 = fh->x;
HXDLIN( 379)			fh->set_x((fh1 - (this->character->get_width() / ( (Float)(2) ))));
HXLINE( 377)			goto _hx_goto_28;
            		}
            		if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE( 375)			 ::cutscenes::DialogueCharacter _hx_tmp2 = this->character;
HXDLIN( 375)			int _hx_tmp3 = ::flixel::FlxG_obj::width;
HXDLIN( 375)			Float _hx_tmp4 = (( (Float)(_hx_tmp3) ) - this->character->get_width());
HXDLIN( 375)			_hx_tmp2->set_x((_hx_tmp4 + ::cutscenes::DialogueBoxPsych_obj::RIGHT_CHAR_X));
HXDLIN( 375)			goto _hx_goto_28;
            		}
            		_hx_goto_28:;
HXLINE( 381)		 ::cutscenes::DialogueCharacter fh2 = this->character;
HXDLIN( 381)		fh2->set_x((fh2->x + ( ::Dynamic(this->character->jsonFile->__Field(HX_("position",a9,a0,fa,ca),::hx::paccDynamic))->__GetItem(0) + this->mainGroup->x)));
HXLINE( 382)		 ::cutscenes::DialogueCharacter fh3 = this->character;
HXDLIN( 382)		fh3->set_y((fh3->y + ( ::Dynamic(this->character->jsonFile->__Field(HX_("position",a9,a0,fa,ca),::hx::paccDynamic))->__GetItem(1) + this->mainGroup->y)));
HXLINE( 383)		this->character->playAnim(( (::String)( ::Dynamic(this->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic))->__GetItem(0)->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),null());
HXLINE( 384)		if ((( (::Array< ::Dynamic>)(this->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)) )->length > 0)) {
HXLINE( 385)			this->curSelectedAnim = ( (::String)( ::Dynamic(this->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic))->__GetItem(0)->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) );
HXLINE( 386)			 ::Dynamic animShit = this->character->dialogueAnimations->get(this->curSelectedAnim);
HXLINE( 387)			this->ghostLoop->playAnim(( (::String)(animShit->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),null());
HXLINE( 388)			this->ghostIdle->playAnim(( (::String)(animShit->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),true);
HXLINE( 389)			 ::flixel::text::FlxText _hx_tmp5 = this->offsetLoopText;
HXDLIN( 389)			_hx_tmp5->set_text((HX_("Loop: ",2a,ae,4d,96) + ::Std_obj::string( ::Dynamic(animShit->__Field(HX_("loop_offsets",65,0d,38,58),::hx::paccDynamic)))));
HXLINE( 390)			 ::flixel::text::FlxText _hx_tmp6 = this->offsetIdleText;
HXDLIN( 390)			_hx_tmp6->set_text((HX_("Idle: ",da,3a,cf,0b) + ::Std_obj::string( ::Dynamic(animShit->__Field(HX_("idle_offsets",15,3e,2c,b8),::hx::paccDynamic)))));
            		}
HXLINE( 393)		this->curAnim = 0;
HXLINE( 394)		this->animText->set_text(( (::String)(((((((HX_("Animation: ",8a,82,c4,19) +  ::Dynamic(this->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic))->__GetItem(this->curAnim)->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + (this->curAnim + 1)) + HX_(" / ",31,71,18,00)) + ( (::Array< ::Dynamic>)(this->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)) )->length) + HX_(") - Press W or S to scroll",f8,dc,4f,51))) ));
HXLINE( 398)		::backend::DiscordClient_obj::changePresence(HX_("Dialogue Character Editor",6c,bd,32,cb),( (::String)((HX_("Editting: ",be,88,46,a7) + this->character->jsonFile->__Field(HX_("image",5b,1f,69,bd),::hx::paccDynamic))) ),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(DialogueCharacterEditorState_obj,reloadCharacter,(void))

void DialogueCharacterEditorState_obj::updateTextBox(){
            	HX_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_402_updateTextBox)
HXLINE( 403)		this->box->set_flipX(false);
HXLINE( 404)		::String anim = HX_("normal",27,72,69,30);
HXLINE( 405)		::String _hx_switch_0 = ( (::String)(this->character->jsonFile->__Field(HX_("dialogue_pos",ad,3b,6d,1a),::hx::paccDynamic)) );
            		if (  (_hx_switch_0==HX_("center",d5,25,db,05)) ){
HXLINE( 409)			anim = HX_("center",d5,25,db,05);
HXDLIN( 409)			goto _hx_goto_30;
            		}
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE( 407)			this->box->set_flipX(true);
HXDLIN( 407)			goto _hx_goto_30;
            		}
            		_hx_goto_30:;
HXLINE( 411)		this->box->animation->play(anim,true,null(),null());
HXLINE( 412)		::cutscenes::DialogueBoxPsych_obj::updateBoxOffsets(this->box);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DialogueCharacterEditorState_obj,updateTextBox,(void))

void DialogueCharacterEditorState_obj::UIEvent(::String id, ::Dynamic sender){
            	HX_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_415_UIEvent)
HXLINE( 417)		if ((id == ::backend::ui::PsychUICheckBox_obj::CLICK_EVENT)) {
HXLINE( 418)			this->unsavedProgress = true;
            		}
HXLINE( 420)		bool _hx_tmp;
HXDLIN( 420)		if ((id == ::backend::ui::PsychUIInputText_obj::CHANGE_EVENT)) {
HXLINE( 420)			_hx_tmp = ::hx::IsInstanceEq( sender,this->imageInputText );
            		}
            		else {
HXLINE( 420)			_hx_tmp = false;
            		}
HXDLIN( 420)		if (_hx_tmp) {
HXLINE( 421)			this->character->jsonFile->__SetField(HX_("image",5b,1f,69,bd),this->imageInputText->text,::hx::paccDynamic);
HXLINE( 422)			this->unsavedProgress = true;
            		}
            		else {
HXLINE( 423)			bool _hx_tmp1;
HXDLIN( 423)			if ((id == ::backend::ui::PsychUINumericStepper_obj::CHANGE_EVENT)) {
HXLINE( 423)				_hx_tmp1 = ::Std_obj::isOfType(sender,::hx::ClassOf< ::backend::ui::PsychUINumericStepper >());
            			}
            			else {
HXLINE( 423)				_hx_tmp1 = false;
            			}
HXDLIN( 423)			if (_hx_tmp1) {
HXLINE( 424)				if (::hx::IsInstanceEq( sender,this->scaleStepper )) {
HXLINE( 425)					this->character->jsonFile->__SetField(HX_("scale",8a,ce,ce,78),this->scaleStepper->value,::hx::paccDynamic);
HXLINE( 426)					this->reloadCharacter();
            				}
            				else {
HXLINE( 427)					if (::hx::IsInstanceEq( sender,this->xStepper )) {
HXLINE( 428)						 ::Dynamic(this->character->jsonFile->__Field(HX_("position",a9,a0,fa,ca),::hx::paccDynamic))->__SetItem(0,this->xStepper->value);
HXLINE( 429)						this->reloadCharacter();
            					}
            					else {
HXLINE( 430)						if (::hx::IsInstanceEq( sender,this->yStepper )) {
HXLINE( 431)							 ::Dynamic(this->character->jsonFile->__Field(HX_("position",a9,a0,fa,ca),::hx::paccDynamic))->__SetItem(1,this->yStepper->value);
HXLINE( 432)							this->reloadCharacter();
            						}
            					}
            				}
HXLINE( 434)				this->unsavedProgress = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DialogueCharacterEditorState_obj,UIEvent,(void))

void DialogueCharacterEditorState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_441_update)
HXDLIN( 441)		 ::states::editors::DialogueCharacterEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 442)		this->super::update(elapsed);
HXLINE( 443)		if (this->transitioning) {
HXLINE( 444)			return;
            		}
HXLINE( 446)		if (::hx::IsNotNull( this->character->animation->_curAnim )) {
HXLINE( 447)			if (this->daText->finishedText) {
HXLINE( 448)				if (this->character->animationIsLoop()) {
HXLINE( 449)					this->character->playAnim(this->character->animation->_curAnim->name,true);
            				}
            			}
            			else {
HXLINE( 451)				if (this->character->animation->_curAnim->finished) {
HXLINE( 452)					this->character->animation->_curAnim->restart();
            				}
            			}
            		}
HXLINE( 456)		if (::hx::IsNull( ::backend::ui::PsychUIInputText_obj::focusOn )) {
HXLINE( 458)			::backend::ClientPrefs_obj::toggleVolumeKeys(true);
HXLINE( 459)			bool _hx_tmp;
HXDLIN( 459)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 459)			if (_this->keyManager->checkStatusUnsafe(32,_this->status)) {
HXLINE( 459)				_hx_tmp = (this->UI_mainbox->selectedName == HX_("Character",89,bb,a4,e3));
            			}
            			else {
HXLINE( 459)				_hx_tmp = false;
            			}
HXDLIN( 459)			if (_hx_tmp) {
HXLINE( 460)				this->character->playAnim(( (::String)( ::Dynamic(this->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic))->__GetItem(this->curAnim)->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),null());
HXLINE( 461)				this->daText->resetDialogue();
HXLINE( 462)				this->updateTextBox();
            			}
HXLINE( 466)			int offsetAdd = 1;
HXLINE( 467)			Float speed = ( (Float)(300) );
HXLINE( 468)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 468)			if (_this1->keyManager->checkStatusUnsafe(16,_this1->status)) {
HXLINE( 469)				speed = ( (Float)(1200) );
HXLINE( 470)				offsetAdd = 10;
            			}
HXLINE( 473)			::Array< int > negaMult = ::Array_obj< int >::fromData( _hx_array_data_b303eb47_38,4);
HXLINE( 474)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 474)			bool controlArray = _this2->keyManager->checkStatusUnsafe(74,_this2->status);
HXDLIN( 474)			 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 474)			bool controlArray1 = _this3->keyManager->checkStatusUnsafe(73,_this3->status);
HXDLIN( 474)			 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 474)			bool controlArray2 = _this4->keyManager->checkStatusUnsafe(76,_this4->status);
HXDLIN( 474)			 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 474)			::Array< bool > controlArray3 = ::Array_obj< bool >::__new(4)->init(0,controlArray)->init(1,controlArray1)->init(2,controlArray2)->init(3,_this5->keyManager->checkStatusUnsafe(75,_this5->status));
HXLINE( 475)			{
HXLINE( 475)				int _g = 0;
HXDLIN( 475)				int _g1 = controlArray3->length;
HXDLIN( 475)				while((_g < _g1)){
HXLINE( 475)					_g = (_g + 1);
HXDLIN( 475)					int i = (_g - 1);
HXLINE( 476)					if (controlArray3->__get(i)) {
HXLINE( 477)						if ((::hx::Mod(i,2) == 1)) {
HXLINE( 478)							 ::flixel::group::FlxTypedSpriteGroup fh = this->mainGroup;
HXDLIN( 478)							fh->set_y((fh->y + ((speed * elapsed) * ( (Float)(negaMult->__get(i)) ))));
            						}
            						else {
HXLINE( 480)							 ::flixel::group::FlxTypedSpriteGroup fh1 = this->mainGroup;
HXDLIN( 480)							fh1->set_x((fh1->x + ((speed * elapsed) * ( (Float)(negaMult->__get(i)) ))));
            						}
            					}
            				}
            			}
HXLINE( 485)			bool _hx_tmp1;
HXDLIN( 485)			bool _hx_tmp2;
HXDLIN( 485)			if ((this->UI_mainbox->selectedName == HX_("Animations",0f,39,cd,79))) {
HXLINE( 485)				_hx_tmp2 = ::hx::IsNotNull( this->curSelectedAnim );
            			}
            			else {
HXLINE( 485)				_hx_tmp2 = false;
            			}
HXDLIN( 485)			if (_hx_tmp2) {
HXLINE( 485)				_hx_tmp1 = this->character->dialogueAnimations->exists(this->curSelectedAnim);
            			}
            			else {
HXLINE( 485)				_hx_tmp1 = false;
            			}
HXDLIN( 485)			if (_hx_tmp1) {
HXLINE( 486)				bool moved = false;
HXLINE( 487)				 ::Dynamic animShit = this->character->dialogueAnimations->get(this->curSelectedAnim);
HXLINE( 488)				 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 488)				bool controlArrayLoop = _this6->keyManager->checkStatusUnsafe(65,_this6->status);
HXDLIN( 488)				 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 488)				bool controlArrayLoop1 = _this7->keyManager->checkStatusUnsafe(87,_this7->status);
HXDLIN( 488)				 ::flixel::input::keyboard::FlxKeyList _this8 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 488)				bool controlArrayLoop2 = _this8->keyManager->checkStatusUnsafe(68,_this8->status);
HXDLIN( 488)				 ::flixel::input::keyboard::FlxKeyList _this9 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 488)				::Array< bool > controlArrayLoop3 = ::Array_obj< bool >::__new(4)->init(0,controlArrayLoop)->init(1,controlArrayLoop1)->init(2,controlArrayLoop2)->init(3,_this9->keyManager->checkStatusUnsafe(83,_this9->status));
HXLINE( 489)				 ::flixel::input::keyboard::FlxKeyList _this10 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 489)				bool controlArrayIdle = _this10->keyManager->checkStatusUnsafe(37,_this10->status);
HXDLIN( 489)				 ::flixel::input::keyboard::FlxKeyList _this11 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 489)				bool controlArrayIdle1 = _this11->keyManager->checkStatusUnsafe(38,_this11->status);
HXDLIN( 489)				 ::flixel::input::keyboard::FlxKeyList _this12 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 489)				bool controlArrayIdle2 = _this12->keyManager->checkStatusUnsafe(39,_this12->status);
HXDLIN( 489)				 ::flixel::input::keyboard::FlxKeyList _this13 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 489)				::Array< bool > controlArrayIdle3 = ::Array_obj< bool >::__new(4)->init(0,controlArrayIdle)->init(1,controlArrayIdle1)->init(2,controlArrayIdle2)->init(3,_this13->keyManager->checkStatusUnsafe(40,_this13->status));
HXLINE( 490)				{
HXLINE( 490)					int _g2 = 0;
HXDLIN( 490)					int _g3 = controlArrayLoop3->length;
HXDLIN( 490)					while((_g2 < _g3)){
HXLINE( 490)						_g2 = (_g2 + 1);
HXDLIN( 490)						int i1 = (_g2 - 1);
HXLINE( 491)						if (controlArrayLoop3->__get(i1)) {
HXLINE( 492)							if ((::hx::Mod(i1,2) == 1)) {
HXLINE( 493)								::Array< int > base = ( (::Array< int >)(animShit->__Field(HX_("loop_offsets",65,0d,38,58),::hx::paccDynamic)) );
HXDLIN( 493)								int _hx_tmp3 = 1;
HXDLIN( 493)								base[_hx_tmp3] = (base->__get(_hx_tmp3) + (offsetAdd * negaMult->__get(i1)));
            							}
            							else {
HXLINE( 495)								::Array< int > base1 = ( (::Array< int >)(animShit->__Field(HX_("loop_offsets",65,0d,38,58),::hx::paccDynamic)) );
HXDLIN( 495)								int _hx_tmp4 = 0;
HXDLIN( 495)								base1[_hx_tmp4] = (base1->__get(_hx_tmp4) + (offsetAdd * negaMult->__get(i1)));
            							}
HXLINE( 497)							moved = true;
            						}
            					}
            				}
HXLINE( 500)				{
HXLINE( 500)					int _g4 = 0;
HXDLIN( 500)					int _g5 = controlArrayIdle3->length;
HXDLIN( 500)					while((_g4 < _g5)){
HXLINE( 500)						_g4 = (_g4 + 1);
HXDLIN( 500)						int i2 = (_g4 - 1);
HXLINE( 501)						if (controlArrayIdle3->__get(i2)) {
HXLINE( 502)							if ((::hx::Mod(i2,2) == 1)) {
HXLINE( 503)								::Array< int > base2 = ( (::Array< int >)(animShit->__Field(HX_("idle_offsets",15,3e,2c,b8),::hx::paccDynamic)) );
HXDLIN( 503)								int _hx_tmp5 = 1;
HXDLIN( 503)								base2[_hx_tmp5] = (base2->__get(_hx_tmp5) + (offsetAdd * negaMult->__get(i2)));
            							}
            							else {
HXLINE( 505)								::Array< int > base3 = ( (::Array< int >)(animShit->__Field(HX_("idle_offsets",15,3e,2c,b8),::hx::paccDynamic)) );
HXDLIN( 505)								int _hx_tmp6 = 0;
HXDLIN( 505)								base3[_hx_tmp6] = (base3->__get(_hx_tmp6) + (offsetAdd * negaMult->__get(i2)));
            							}
HXLINE( 507)							moved = true;
            						}
            					}
            				}
HXLINE( 511)				if (moved) {
HXLINE( 512)					 ::flixel::text::FlxText _hx_tmp7 = this->offsetLoopText;
HXDLIN( 512)					_hx_tmp7->set_text((HX_("Loop: ",2a,ae,4d,96) + ::Std_obj::string( ::Dynamic(animShit->__Field(HX_("loop_offsets",65,0d,38,58),::hx::paccDynamic)))));
HXLINE( 513)					 ::flixel::text::FlxText _hx_tmp8 = this->offsetIdleText;
HXDLIN( 513)					_hx_tmp8->set_text((HX_("Idle: ",da,3a,cf,0b) + ::Std_obj::string( ::Dynamic(animShit->__Field(HX_("idle_offsets",15,3e,2c,b8),::hx::paccDynamic)))));
HXLINE( 514)					{
HXLINE( 514)						 ::flixel::math::FlxBasePoint this1 = this->ghostLoop->offset;
HXDLIN( 514)						Float y = ( (Float)( ::Dynamic(animShit->__Field(HX_("loop_offsets",65,0d,38,58),::hx::paccDynamic))->__GetItem(1)) );
HXDLIN( 514)						this1->set_x(( (Float)( ::Dynamic(animShit->__Field(HX_("loop_offsets",65,0d,38,58),::hx::paccDynamic))->__GetItem(0)) ));
HXDLIN( 514)						this1->set_y(y);
            					}
HXLINE( 515)					{
HXLINE( 515)						 ::flixel::math::FlxBasePoint this2 = this->ghostIdle->offset;
HXDLIN( 515)						Float y1 = ( (Float)( ::Dynamic(animShit->__Field(HX_("idle_offsets",15,3e,2c,b8),::hx::paccDynamic))->__GetItem(1)) );
HXDLIN( 515)						this2->set_x(( (Float)( ::Dynamic(animShit->__Field(HX_("idle_offsets",15,3e,2c,b8),::hx::paccDynamic))->__GetItem(0)) ));
HXDLIN( 515)						this2->set_y(y1);
            					}
            				}
            			}
HXLINE( 519)			bool _hx_tmp9;
HXDLIN( 519)			 ::flixel::input::keyboard::FlxKeyList _this14 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 519)			if (_this14->keyManager->checkStatusUnsafe(81,_this14->status)) {
HXLINE( 519)				_hx_tmp9 = (this->camGame->zoom > ((Float)0.1));
            			}
            			else {
HXLINE( 519)				_hx_tmp9 = false;
            			}
HXDLIN( 519)			if (_hx_tmp9) {
HXLINE( 520)				 ::flixel::FlxCamera fh2 = this->camGame;
HXDLIN( 520)				fh2->set_zoom((fh2->zoom - (elapsed * this->camGame->zoom)));
HXLINE( 521)				if ((this->camGame->zoom < ((Float)0.1))) {
HXLINE( 521)					this->camGame->set_zoom(((Float)0.1));
            				}
            			}
HXLINE( 523)			bool _hx_tmp10;
HXDLIN( 523)			 ::flixel::input::keyboard::FlxKeyList _this15 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 523)			if (_this15->keyManager->checkStatusUnsafe(69,_this15->status)) {
HXLINE( 523)				_hx_tmp10 = (this->camGame->zoom < 1);
            			}
            			else {
HXLINE( 523)				_hx_tmp10 = false;
            			}
HXDLIN( 523)			if (_hx_tmp10) {
HXLINE( 524)				 ::flixel::FlxCamera fh3 = this->camGame;
HXDLIN( 524)				fh3->set_zoom((fh3->zoom + (elapsed * this->camGame->zoom)));
HXLINE( 525)				if ((this->camGame->zoom > 1)) {
HXLINE( 525)					this->camGame->set_zoom(( (Float)(1) ));
            				}
            			}
HXLINE( 527)			 ::flixel::input::keyboard::FlxKeyList _this16 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 527)			if (_this16->keyManager->checkStatusUnsafe(72,_this16->status)) {
HXLINE( 528)				if ((this->UI_mainbox->selectedName == HX_("Animations",0f,39,cd,79))) {
HXLINE( 529)					this->currentGhosts++;
HXLINE( 530)					if ((this->currentGhosts > 2)) {
HXLINE( 530)						this->currentGhosts = 0;
            					}
HXLINE( 532)					this->ghostLoop->set_visible((this->currentGhosts != 1));
HXLINE( 533)					this->ghostIdle->set_visible((this->currentGhosts != 2));
HXLINE( 534)					Float _hx_tmp11;
HXDLIN( 534)					if ((this->currentGhosts == 2)) {
HXLINE( 534)						_hx_tmp11 = ( (Float)(1) );
            					}
            					else {
HXLINE( 534)						_hx_tmp11 = ((Float)0.6);
            					}
HXDLIN( 534)					this->ghostLoop->set_alpha(_hx_tmp11);
HXLINE( 535)					Float _hx_tmp12;
HXDLIN( 535)					if ((this->currentGhosts == 1)) {
HXLINE( 535)						_hx_tmp12 = ( (Float)(1) );
            					}
            					else {
HXLINE( 535)						_hx_tmp12 = ((Float)0.6);
            					}
HXDLIN( 535)					this->ghostIdle->set_alpha(_hx_tmp12);
            				}
            				else {
HXLINE( 537)					this->hudGroup->set_visible(!(this->hudGroup->visible));
            				}
            			}
HXLINE( 540)			 ::flixel::input::keyboard::FlxKeyList _this17 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 540)			if (_this17->keyManager->checkStatusUnsafe(82,_this17->status)) {
HXLINE( 541)				this->camGame->set_zoom(( (Float)(1) ));
HXLINE( 542)				this->mainGroup->setPosition(0,0);
HXLINE( 543)				this->hudGroup->set_visible(true);
            			}
HXLINE( 546)			if ((this->UI_mainbox->selectedName != this->lastTab)) {
HXLINE( 547)				if ((this->UI_mainbox->selectedName == HX_("Animations",0f,39,cd,79))) {
HXLINE( 548)					this->hudGroup->set_alpha(( (Float)(0) ));
HXLINE( 549)					this->mainGroup->set_alpha(( (Float)(0) ));
HXLINE( 550)					this->ghostLoop->set_alpha(((Float)0.6));
HXLINE( 551)					this->ghostIdle->set_alpha(((Float)0.6));
HXLINE( 552)					this->tipText->set_text(::states::editors::DialogueCharacterEditorState_obj::TIP_TEXT_OFFSET);
HXLINE( 553)					this->offsetLoopText->set_visible(true);
HXLINE( 554)					this->offsetIdleText->set_visible(true);
HXLINE( 555)					this->animText->set_visible(false);
HXLINE( 556)					this->currentGhosts = 0;
            				}
            				else {
HXLINE( 558)					this->hudGroup->set_alpha(( (Float)(1) ));
HXLINE( 559)					this->mainGroup->set_alpha(( (Float)(1) ));
HXLINE( 560)					this->ghostLoop->set_alpha(( (Float)(0) ));
HXLINE( 561)					this->ghostIdle->set_alpha(( (Float)(0) ));
HXLINE( 562)					this->tipText->set_text(::states::editors::DialogueCharacterEditorState_obj::TIP_TEXT_MAIN);
HXLINE( 563)					this->offsetLoopText->set_visible(false);
HXLINE( 564)					this->offsetIdleText->set_visible(false);
HXLINE( 565)					this->animText->set_visible(true);
HXLINE( 566)					this->updateTextBox();
HXLINE( 567)					this->daText->resetDialogue();
HXLINE( 569)					if ((this->curAnim < 0)) {
HXLINE( 569)						this->curAnim = (( (::Array< ::Dynamic>)(this->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)) )->length - 1);
            					}
            					else {
HXLINE( 570)						if ((this->curAnim >= ( (::Array< ::Dynamic>)(this->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)) )->length)) {
HXLINE( 570)							this->curAnim = 0;
            						}
            					}
HXLINE( 572)					this->character->playAnim(( (::String)( ::Dynamic(this->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic))->__GetItem(this->curAnim)->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),null());
HXLINE( 573)					this->animText->set_text(( (::String)(((((((HX_("Animation: ",8a,82,c4,19) +  ::Dynamic(this->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic))->__GetItem(this->curAnim)->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + (this->curAnim + 1)) + HX_(" / ",31,71,18,00)) + ( (::Array< ::Dynamic>)(this->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)) )->length) + HX_(") - Press W or S to scroll",f8,dc,4f,51))) ));
            				}
HXLINE( 575)				this->lastTab = this->UI_mainbox->selectedName;
HXLINE( 576)				this->currentGhosts = 0;
            			}
HXLINE( 579)			if ((this->UI_mainbox->selectedName == HX_("Character",89,bb,a4,e3))) {
HXLINE( 581)				::Array< int > negaMult1 = ::Array_obj< int >::fromData( _hx_array_data_b303eb47_39,2);
HXLINE( 582)				 ::flixel::input::keyboard::FlxKeyList _this18 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 582)				bool controlAnim = _this18->keyManager->checkStatusUnsafe(87,_this18->status);
HXDLIN( 582)				 ::flixel::input::keyboard::FlxKeyList _this19 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 582)				::Array< bool > controlAnim1 = ::Array_obj< bool >::__new(2)->init(0,controlAnim)->init(1,_this19->keyManager->checkStatusUnsafe(83,_this19->status));
HXLINE( 584)				if (controlAnim1->contains(true)) {
HXLINE( 586)					{
HXLINE( 586)						int _g6 = 0;
HXDLIN( 586)						int _g7 = controlAnim1->length;
HXDLIN( 586)						while((_g6 < _g7)){
HXLINE( 586)							_g6 = (_g6 + 1);
HXDLIN( 586)							int i3 = (_g6 - 1);
HXLINE( 587)							bool _hx_tmp13;
HXDLIN( 587)							if (controlAnim1->__get(i3)) {
HXLINE( 587)								_hx_tmp13 = (( (::Array< ::Dynamic>)(this->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)) )->length > 0);
            							}
            							else {
HXLINE( 587)								_hx_tmp13 = false;
            							}
HXDLIN( 587)							if (_hx_tmp13) {
HXLINE( 588)								 ::states::editors::DialogueCharacterEditorState _hx_tmp14 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 588)								_hx_tmp14->curAnim = (_hx_tmp14->curAnim - negaMult1->__get(i3));
HXLINE( 589)								if ((this->curAnim < 0)) {
HXLINE( 589)									this->curAnim = (( (::Array< ::Dynamic>)(this->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)) )->length - 1);
            								}
            								else {
HXLINE( 590)									if ((this->curAnim >= ( (::Array< ::Dynamic>)(this->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)) )->length)) {
HXLINE( 590)										this->curAnim = 0;
            									}
            								}
HXLINE( 592)								::String animToPlay = ( (::String)( ::Dynamic(this->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic))->__GetItem(this->curAnim)->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) );
HXLINE( 593)								if (this->character->dialogueAnimations->exists(animToPlay)) {
HXLINE( 594)									this->character->playAnim(animToPlay,this->daText->finishedText);
            								}
            							}
            						}
            					}
HXLINE( 598)					this->animText->set_text(( (::String)(((((((HX_("Animation: ",8a,82,c4,19) +  ::Dynamic(this->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic))->__GetItem(this->curAnim)->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + (this->curAnim + 1)) + HX_(" / ",31,71,18,00)) + ( (::Array< ::Dynamic>)(this->character->jsonFile->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)) )->length) + HX_(") - Press W or S to scroll",f8,dc,4f,51))) ));
            				}
            			}
HXLINE( 602)			 ::flixel::input::keyboard::FlxKeyList _this20 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 602)			if (_this20->keyManager->checkStatusUnsafe(27,_this20->status)) {
HXLINE( 603)				if (!(this->unsavedProgress)) {
HXLINE( 605)					::backend::MusicBeatState_obj::switchState( ::states::editors::MasterEditorMenu_obj::__alloc( HX_CTX ));
HXLINE( 606)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp15 = ::flixel::FlxG_obj::sound;
HXDLIN( 606)					_hx_tmp15->playMusic(::backend::Paths_obj::returnSound((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)),null(),true,null()),null(),null(),null());
HXLINE( 607)					this->transitioning = true;
            				}
            				else {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::DialogueCharacterEditorState,_gthis) HXARGC(0)
            					void _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_609_update)
HXLINE( 609)						_gthis->transitioning = true;
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE( 609)					this->openSubState( ::states::editors::content::ExitConfirmationPrompt_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0(_gthis))));
            				}
            			}
HXLINE( 612)			this->ghostLoop->setPosition(this->character->x,this->character->y);
HXLINE( 613)			this->ghostIdle->setPosition(this->character->x,this->character->y);
HXLINE( 614)			this->hudGroup->set_x(this->mainGroup->x);
HXLINE( 615)			this->hudGroup->set_y(this->mainGroup->y);
            		}
            		else {
HXLINE( 617)			::backend::ClientPrefs_obj::toggleVolumeKeys(false);
            		}
            	}


void DialogueCharacterEditorState_obj::loadCharacter(){
            	HX_GC_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_621_loadCharacter)
HXLINE( 622)		 ::openfl::net::FileFilter jsonFilter =  ::openfl::net::FileFilter_obj::__alloc( HX_CTX ,HX_("JSON",28,0a,29,31),HX_("json",28,42,68,46),null());
HXLINE( 623)		this->_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE( 624)		this->_file->addEventListener(HX_("select",fc,1a,33,6a),this->onLoadComplete_dyn(),null(),null(),null());
HXLINE( 625)		this->_file->addEventListener(HX_("cancel",7a,ed,33,b8),this->onLoadCancel_dyn(),null(),null(),null());
HXLINE( 626)		this->_file->addEventListener(HX_("ioError",02,fe,41,76),this->onLoadError_dyn(),null(),null(),null());
HXLINE( 627)		this->_file->browse(::Array_obj< ::Dynamic>::__new(1)->init(0,jsonFilter));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DialogueCharacterEditorState_obj,loadCharacter,(void))

void DialogueCharacterEditorState_obj::onLoadComplete( ::openfl::events::Event _){
            	HX_GC_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_631_onLoadComplete)
HXLINE( 632)		this->_file->removeEventListener(HX_("select",fc,1a,33,6a),this->onLoadComplete_dyn(),null());
HXLINE( 633)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onLoadCancel_dyn(),null());
HXLINE( 634)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onLoadError_dyn(),null());
HXLINE( 637)		::String fullPath = null();
HXLINE( 639)		if (::hx::IsNotNull( this->_file->_hx___path )) {
HXLINE( 639)			fullPath = this->_file->_hx___path;
            		}
HXLINE( 641)		if (::hx::IsNotNull( fullPath )) {
HXLINE( 642)			::String rawJson = ::sys::io::File_obj::getContent(fullPath);
HXLINE( 643)			if (::hx::IsNotNull( rawJson )) {
HXLINE( 644)				 ::Dynamic loadedChar =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,rawJson)->doParse();
HXLINE( 645)				if (::hx::IsNotNull( loadedChar->__Field(HX_("dialogue_pos",ad,3b,6d,1a),::hx::paccDynamic) )) {
HXLINE( 647)					::String cutName = this->_file->get_name();
HXDLIN( 647)					::String cutName1 = cutName.substr(0,(this->_file->get_name().length - 5));
HXLINE( 648)					::haxe::Log_obj::trace((HX_("Successfully loaded file: ",84,24,61,ed) + cutName1),::hx::SourceInfo(HX_("source/states/editors/DialogueCharacterEditorState.hx",09,65,04,ac),648,HX_("states.editors.DialogueCharacterEditorState",47,eb,03,b3),HX_("onLoadComplete",be,4c,20,63)));
HXLINE( 649)					this->character->jsonFile = loadedChar;
HXLINE( 650)					this->reloadCharacter();
HXLINE( 651)					this->reloadAnimationsDropDown();
HXLINE( 652)					this->updateCharTypeBox();
HXLINE( 653)					this->updateTextBox();
HXLINE( 654)					this->daText->resetDialogue();
HXLINE( 655)					this->imageInputText->set_text(( (::String)(this->character->jsonFile->__Field(HX_("image",5b,1f,69,bd),::hx::paccDynamic)) ));
HXLINE( 656)					this->scaleStepper->set_value(( (Float)(this->character->jsonFile->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic)) ));
HXLINE( 657)					this->xStepper->set_value(( (Float)( ::Dynamic(this->character->jsonFile->__Field(HX_("position",a9,a0,fa,ca),::hx::paccDynamic))->__GetItem(0)) ));
HXLINE( 658)					this->yStepper->set_value(( (Float)( ::Dynamic(this->character->jsonFile->__Field(HX_("position",a9,a0,fa,ca),::hx::paccDynamic))->__GetItem(1)) ));
HXLINE( 659)					this->_file = null();
HXLINE( 660)					return;
            				}
            			}
            		}
HXLINE( 664)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DialogueCharacterEditorState_obj,onLoadComplete,(void))

void DialogueCharacterEditorState_obj::onLoadCancel( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_674_onLoadCancel)
HXLINE( 675)		this->_file->removeEventListener(HX_("select",fc,1a,33,6a),this->onLoadComplete_dyn(),null());
HXLINE( 676)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onLoadCancel_dyn(),null());
HXLINE( 677)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onLoadError_dyn(),null());
HXLINE( 678)		this->_file = null();
HXLINE( 679)		::haxe::Log_obj::trace(HX_("Cancelled file loading.",67,56,c5,a3),::hx::SourceInfo(HX_("source/states/editors/DialogueCharacterEditorState.hx",09,65,04,ac),679,HX_("states.editors.DialogueCharacterEditorState",47,eb,03,b3),HX_("onLoadCancel",3f,be,a2,45)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DialogueCharacterEditorState_obj,onLoadCancel,(void))

void DialogueCharacterEditorState_obj::onLoadError( ::openfl::events::IOErrorEvent _){
            	HX_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_686_onLoadError)
HXLINE( 687)		this->_file->removeEventListener(HX_("select",fc,1a,33,6a),this->onLoadComplete_dyn(),null());
HXLINE( 688)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onLoadCancel_dyn(),null());
HXLINE( 689)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onLoadError_dyn(),null());
HXLINE( 690)		this->_file = null();
HXLINE( 691)		::haxe::Log_obj::trace(HX_("Problem loading file",21,8c,56,d8),::hx::SourceInfo(HX_("source/states/editors/DialogueCharacterEditorState.hx",09,65,04,ac),691,HX_("states.editors.DialogueCharacterEditorState",47,eb,03,b3),HX_("onLoadError",a3,fa,a3,b0)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DialogueCharacterEditorState_obj,onLoadError,(void))

void DialogueCharacterEditorState_obj::saveCharacter(){
            	HX_GC_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_694_saveCharacter)
HXLINE( 695)		 ::Dynamic replacer = null();
HXDLIN( 695)		::String data = ::haxe::format::JsonPrinter_obj::print(this->character->jsonFile,replacer,HX_("\t",09,00,00,00));
HXLINE( 696)		if ((data.length > 0)) {
HXLINE( 698)			::Array< ::String > splittedImage = ::StringTools_obj::trim(this->imageInputText->text).split(HX_("_",5f,00,00,00));
HXLINE( 699)			::String characterName = ::StringTools_obj::replace(splittedImage->__get(0).toLowerCase(),HX_(" ",20,00,00,00),HX_("",00,00,00,00));
HXLINE( 701)			this->_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE( 702)			this->_file->addEventListener(HX_("select",fc,1a,33,6a),this->onSaveComplete_dyn(),null(),null(),null());
HXLINE( 703)			this->_file->addEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null(),null(),null());
HXLINE( 704)			this->_file->addEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null(),null(),null());
HXLINE( 705)			this->_file->save(data,(characterName + HX_(".json",56,f1,d6,c2)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DialogueCharacterEditorState_obj,saveCharacter,(void))

void DialogueCharacterEditorState_obj::onSaveComplete( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_710_onSaveComplete)
HXLINE( 711)		this->_file->removeEventListener(HX_("select",fc,1a,33,6a),this->onSaveComplete_dyn(),null());
HXLINE( 712)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE( 713)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE( 714)		this->_file = null();
HXLINE( 715)		::flixel::FlxG_obj::log->advanced(HX_("Successfully saved file.",c0,0d,09,f4),::flixel::_hx_system::debug::log::LogStyle_obj::NOTICE,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(DialogueCharacterEditorState_obj,onSaveComplete,(void))

void DialogueCharacterEditorState_obj::onSaveCancel( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_722_onSaveCancel)
HXLINE( 723)		this->_file->removeEventListener(HX_("select",fc,1a,33,6a),this->onSaveComplete_dyn(),null());
HXLINE( 724)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE( 725)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE( 726)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DialogueCharacterEditorState_obj,onSaveCancel,(void))

void DialogueCharacterEditorState_obj::onSaveError( ::openfl::events::IOErrorEvent _){
            	HX_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_733_onSaveError)
HXLINE( 734)		this->_file->removeEventListener(HX_("select",fc,1a,33,6a),this->onSaveComplete_dyn(),null());
HXLINE( 735)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE( 736)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE( 737)		this->_file = null();
HXLINE( 738)		::flixel::FlxG_obj::log->advanced(HX_("Problem saving file",41,4c,cd,8e),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DialogueCharacterEditorState_obj,onSaveError,(void))

::String DialogueCharacterEditorState_obj::ClipboardAdd(::String __o_prefix){
            		::String prefix = __o_prefix;
            		if (::hx::IsNull(__o_prefix)) prefix = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_741_ClipboardAdd)
HXLINE( 742)		if (::StringTools_obj::endsWith(prefix.toLowerCase(),HX_("v",76,00,00,00))) {
HXLINE( 744)			prefix = prefix.substring(0,(prefix.length - 1));
            		}
HXLINE( 747)		::String text = (prefix + ::StringTools_obj::replace(::lime::_hx_system::Clipboard_obj::get_text(),HX_("\n",0a,00,00,00),HX_("",00,00,00,00)));
HXLINE( 748)		return text;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DialogueCharacterEditorState_obj,ClipboardAdd,return )

::String DialogueCharacterEditorState_obj::TIP_TEXT_MAIN;

::String DialogueCharacterEditorState_obj::TIP_TEXT_OFFSET;

::String DialogueCharacterEditorState_obj::DEFAULT_TEXT;


::hx::ObjectPtr< DialogueCharacterEditorState_obj > DialogueCharacterEditorState_obj::__new() {
	::hx::ObjectPtr< DialogueCharacterEditorState_obj > __this = new DialogueCharacterEditorState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< DialogueCharacterEditorState_obj > DialogueCharacterEditorState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	DialogueCharacterEditorState_obj *__this = (DialogueCharacterEditorState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DialogueCharacterEditorState_obj), true, "states.editors.DialogueCharacterEditorState"));
	*(void **)__this = DialogueCharacterEditorState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DialogueCharacterEditorState_obj::DialogueCharacterEditorState_obj()
{
}

void DialogueCharacterEditorState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DialogueCharacterEditorState);
	HX_MARK_MEMBER_NAME(box,"box");
	HX_MARK_MEMBER_NAME(daText,"daText");
	HX_MARK_MEMBER_NAME(tipText,"tipText");
	HX_MARK_MEMBER_NAME(offsetLoopText,"offsetLoopText");
	HX_MARK_MEMBER_NAME(offsetIdleText,"offsetIdleText");
	HX_MARK_MEMBER_NAME(animText,"animText");
	HX_MARK_MEMBER_NAME(camGame,"camGame");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(mainGroup,"mainGroup");
	HX_MARK_MEMBER_NAME(hudGroup,"hudGroup");
	HX_MARK_MEMBER_NAME(character,"character");
	HX_MARK_MEMBER_NAME(ghostLoop,"ghostLoop");
	HX_MARK_MEMBER_NAME(ghostIdle,"ghostIdle");
	HX_MARK_MEMBER_NAME(curAnim,"curAnim");
	HX_MARK_MEMBER_NAME(unsavedProgress,"unsavedProgress");
	HX_MARK_MEMBER_NAME(UI_typebox,"UI_typebox");
	HX_MARK_MEMBER_NAME(UI_mainbox,"UI_mainbox");
	HX_MARK_MEMBER_NAME(characterTypeRadio,"characterTypeRadio");
	HX_MARK_MEMBER_NAME(curSelectedAnim,"curSelectedAnim");
	HX_MARK_MEMBER_NAME(animationArray,"animationArray");
	HX_MARK_MEMBER_NAME(animationDropDown,"animationDropDown");
	HX_MARK_MEMBER_NAME(animationInputText,"animationInputText");
	HX_MARK_MEMBER_NAME(loopInputText,"loopInputText");
	HX_MARK_MEMBER_NAME(idleInputText,"idleInputText");
	HX_MARK_MEMBER_NAME(imageInputText,"imageInputText");
	HX_MARK_MEMBER_NAME(scaleStepper,"scaleStepper");
	HX_MARK_MEMBER_NAME(xStepper,"xStepper");
	HX_MARK_MEMBER_NAME(yStepper,"yStepper");
	HX_MARK_MEMBER_NAME(currentGhosts,"currentGhosts");
	HX_MARK_MEMBER_NAME(lastTab,"lastTab");
	HX_MARK_MEMBER_NAME(transitioning,"transitioning");
	HX_MARK_MEMBER_NAME(_file,"_file");
	 ::backend::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DialogueCharacterEditorState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(box,"box");
	HX_VISIT_MEMBER_NAME(daText,"daText");
	HX_VISIT_MEMBER_NAME(tipText,"tipText");
	HX_VISIT_MEMBER_NAME(offsetLoopText,"offsetLoopText");
	HX_VISIT_MEMBER_NAME(offsetIdleText,"offsetIdleText");
	HX_VISIT_MEMBER_NAME(animText,"animText");
	HX_VISIT_MEMBER_NAME(camGame,"camGame");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(mainGroup,"mainGroup");
	HX_VISIT_MEMBER_NAME(hudGroup,"hudGroup");
	HX_VISIT_MEMBER_NAME(character,"character");
	HX_VISIT_MEMBER_NAME(ghostLoop,"ghostLoop");
	HX_VISIT_MEMBER_NAME(ghostIdle,"ghostIdle");
	HX_VISIT_MEMBER_NAME(curAnim,"curAnim");
	HX_VISIT_MEMBER_NAME(unsavedProgress,"unsavedProgress");
	HX_VISIT_MEMBER_NAME(UI_typebox,"UI_typebox");
	HX_VISIT_MEMBER_NAME(UI_mainbox,"UI_mainbox");
	HX_VISIT_MEMBER_NAME(characterTypeRadio,"characterTypeRadio");
	HX_VISIT_MEMBER_NAME(curSelectedAnim,"curSelectedAnim");
	HX_VISIT_MEMBER_NAME(animationArray,"animationArray");
	HX_VISIT_MEMBER_NAME(animationDropDown,"animationDropDown");
	HX_VISIT_MEMBER_NAME(animationInputText,"animationInputText");
	HX_VISIT_MEMBER_NAME(loopInputText,"loopInputText");
	HX_VISIT_MEMBER_NAME(idleInputText,"idleInputText");
	HX_VISIT_MEMBER_NAME(imageInputText,"imageInputText");
	HX_VISIT_MEMBER_NAME(scaleStepper,"scaleStepper");
	HX_VISIT_MEMBER_NAME(xStepper,"xStepper");
	HX_VISIT_MEMBER_NAME(yStepper,"yStepper");
	HX_VISIT_MEMBER_NAME(currentGhosts,"currentGhosts");
	HX_VISIT_MEMBER_NAME(lastTab,"lastTab");
	HX_VISIT_MEMBER_NAME(transitioning,"transitioning");
	HX_VISIT_MEMBER_NAME(_file,"_file");
	 ::backend::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val DialogueCharacterEditorState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"box") ) { return ::hx::Val( box ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { return ::hx::Val( _file ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"daText") ) { return ::hx::Val( daText ); }
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tipText") ) { return ::hx::Val( tipText ); }
		if (HX_FIELD_EQ(inName,"camGame") ) { return ::hx::Val( camGame ); }
		if (HX_FIELD_EQ(inName,"curAnim") ) { return ::hx::Val( curAnim ); }
		if (HX_FIELD_EQ(inName,"UIEvent") ) { return ::hx::Val( UIEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"lastTab") ) { return ::hx::Val( lastTab ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"animText") ) { return ::hx::Val( animText ); }
		if (HX_FIELD_EQ(inName,"hudGroup") ) { return ::hx::Val( hudGroup ); }
		if (HX_FIELD_EQ(inName,"xStepper") ) { return ::hx::Val( xStepper ); }
		if (HX_FIELD_EQ(inName,"yStepper") ) { return ::hx::Val( yStepper ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mainGroup") ) { return ::hx::Val( mainGroup ); }
		if (HX_FIELD_EQ(inName,"character") ) { return ::hx::Val( character ); }
		if (HX_FIELD_EQ(inName,"ghostLoop") ) { return ::hx::Val( ghostLoop ); }
		if (HX_FIELD_EQ(inName,"ghostIdle") ) { return ::hx::Val( ghostIdle ); }
		if (HX_FIELD_EQ(inName,"addTypeUI") ) { return ::hx::Val( addTypeUI_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"UI_typebox") ) { return ::hx::Val( UI_typebox ); }
		if (HX_FIELD_EQ(inName,"UI_mainbox") ) { return ::hx::Val( UI_mainbox ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onLoadError") ) { return ::hx::Val( onLoadError_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveError") ) { return ::hx::Val( onSaveError_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addEditorBox") ) { return ::hx::Val( addEditorBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"scaleStepper") ) { return ::hx::Val( scaleStepper ); }
		if (HX_FIELD_EQ(inName,"onLoadCancel") ) { return ::hx::Val( onLoadCancel_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveCancel") ) { return ::hx::Val( onSaveCancel_dyn() ); }
		if (HX_FIELD_EQ(inName,"ClipboardAdd") ) { return ::hx::Val( ClipboardAdd_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"loopInputText") ) { return ::hx::Val( loopInputText ); }
		if (HX_FIELD_EQ(inName,"idleInputText") ) { return ::hx::Val( idleInputText ); }
		if (HX_FIELD_EQ(inName,"updateTextBox") ) { return ::hx::Val( updateTextBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"currentGhosts") ) { return ::hx::Val( currentGhosts ); }
		if (HX_FIELD_EQ(inName,"transitioning") ) { return ::hx::Val( transitioning ); }
		if (HX_FIELD_EQ(inName,"loadCharacter") ) { return ::hx::Val( loadCharacter_dyn() ); }
		if (HX_FIELD_EQ(inName,"saveCharacter") ) { return ::hx::Val( saveCharacter_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"offsetLoopText") ) { return ::hx::Val( offsetLoopText ); }
		if (HX_FIELD_EQ(inName,"offsetIdleText") ) { return ::hx::Val( offsetIdleText ); }
		if (HX_FIELD_EQ(inName,"animationArray") ) { return ::hx::Val( animationArray ); }
		if (HX_FIELD_EQ(inName,"imageInputText") ) { return ::hx::Val( imageInputText ); }
		if (HX_FIELD_EQ(inName,"addCharacterUI") ) { return ::hx::Val( addCharacterUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"onLoadComplete") ) { return ::hx::Val( onLoadComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveComplete") ) { return ::hx::Val( onSaveComplete_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unsavedProgress") ) { return ::hx::Val( unsavedProgress ); }
		if (HX_FIELD_EQ(inName,"curSelectedAnim") ) { return ::hx::Val( curSelectedAnim ); }
		if (HX_FIELD_EQ(inName,"addAnimationsUI") ) { return ::hx::Val( addAnimationsUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"reloadCharacter") ) { return ::hx::Val( reloadCharacter_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"animationDropDown") ) { return ::hx::Val( animationDropDown ); }
		if (HX_FIELD_EQ(inName,"updateCharTypeBox") ) { return ::hx::Val( updateCharTypeBox_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"characterTypeRadio") ) { return ::hx::Val( characterTypeRadio ); }
		if (HX_FIELD_EQ(inName,"animationInputText") ) { return ::hx::Val( animationInputText ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"reloadAnimationsDropDown") ) { return ::hx::Val( reloadAnimationsDropDown_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool DialogueCharacterEditorState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"DEFAULT_TEXT") ) { outValue = ( DEFAULT_TEXT ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"TIP_TEXT_MAIN") ) { outValue = ( TIP_TEXT_MAIN ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"TIP_TEXT_OFFSET") ) { outValue = ( TIP_TEXT_OFFSET ); return true; }
	}
	return false;
}

::hx::Val DialogueCharacterEditorState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"box") ) { box=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { _file=inValue.Cast<  ::openfl::net::FileReference >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"daText") ) { daText=inValue.Cast<  ::objects::TypedAlphabet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tipText") ) { tipText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curAnim") ) { curAnim=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastTab") ) { lastTab=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"animText") ) { animText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hudGroup") ) { hudGroup=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"xStepper") ) { xStepper=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yStepper") ) { yStepper=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mainGroup") ) { mainGroup=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"character") ) { character=inValue.Cast<  ::cutscenes::DialogueCharacter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ghostLoop") ) { ghostLoop=inValue.Cast<  ::cutscenes::DialogueCharacter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ghostIdle") ) { ghostIdle=inValue.Cast<  ::cutscenes::DialogueCharacter >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"UI_typebox") ) { UI_typebox=inValue.Cast<  ::backend::ui::PsychUIBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UI_mainbox") ) { UI_mainbox=inValue.Cast<  ::backend::ui::PsychUIBox >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"scaleStepper") ) { scaleStepper=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"loopInputText") ) { loopInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"idleInputText") ) { idleInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentGhosts") ) { currentGhosts=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"transitioning") ) { transitioning=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"offsetLoopText") ) { offsetLoopText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetIdleText") ) { offsetIdleText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animationArray") ) { animationArray=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"imageInputText") ) { imageInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unsavedProgress") ) { unsavedProgress=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSelectedAnim") ) { curSelectedAnim=inValue.Cast< ::String >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"animationDropDown") ) { animationDropDown=inValue.Cast<  ::backend::ui::PsychUIDropDownMenu >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"characterTypeRadio") ) { characterTypeRadio=inValue.Cast<  ::backend::ui::PsychUIRadioGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animationInputText") ) { animationInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DialogueCharacterEditorState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"DEFAULT_TEXT") ) { DEFAULT_TEXT=ioValue.Cast< ::String >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"TIP_TEXT_MAIN") ) { TIP_TEXT_MAIN=ioValue.Cast< ::String >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"TIP_TEXT_OFFSET") ) { TIP_TEXT_OFFSET=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void DialogueCharacterEditorState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("box",0b,be,4a,00));
	outFields->push(HX_("daText",ca,52,61,0d));
	outFields->push(HX_("tipText",a8,a3,e6,87));
	outFields->push(HX_("offsetLoopText",e4,3f,e7,d5));
	outFields->push(HX_("offsetIdleText",94,58,69,d8));
	outFields->push(HX_("animText",5e,5b,4f,80));
	outFields->push(HX_("camGame",a1,47,50,cf));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("mainGroup",46,7c,98,b3));
	outFields->push(HX_("hudGroup",08,db,9f,66));
	outFields->push(HX_("character",a9,db,d1,41));
	outFields->push(HX_("ghostLoop",53,b5,84,1b));
	outFields->push(HX_("ghostIdle",03,b6,80,19));
	outFields->push(HX_("curAnim",b1,f7,86,ab));
	outFields->push(HX_("unsavedProgress",5b,33,8b,06));
	outFields->push(HX_("UI_typebox",66,d3,1f,32));
	outFields->push(HX_("UI_mainbox",47,c7,9d,74));
	outFields->push(HX_("characterTypeRadio",f8,32,87,6c));
	outFields->push(HX_("curSelectedAnim",ac,b7,5b,3f));
	outFields->push(HX_("animationArray",f5,ff,b2,35));
	outFields->push(HX_("animationDropDown",55,ef,bb,0d));
	outFields->push(HX_("animationInputText",33,7a,56,eb));
	outFields->push(HX_("loopInputText",d3,d6,31,a6));
	outFields->push(HX_("idleInputText",23,40,e8,3b));
	outFields->push(HX_("imageInputText",fc,06,6b,e2));
	outFields->push(HX_("scaleStepper",a7,a3,a9,18));
	outFields->push(HX_("xStepper",79,ab,56,1e));
	outFields->push(HX_("yStepper",98,1d,89,57));
	outFields->push(HX_("currentGhosts",5d,57,81,3d));
	outFields->push(HX_("lastTab",9f,a1,ad,d7));
	outFields->push(HX_("transitioning",6d,6a,93,94));
	outFields->push(HX_("_file",5b,ea,cc,f6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DialogueCharacterEditorState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(DialogueCharacterEditorState_obj,box),HX_("box",0b,be,4a,00)},
	{::hx::fsObject /*  ::objects::TypedAlphabet */ ,(int)offsetof(DialogueCharacterEditorState_obj,daText),HX_("daText",ca,52,61,0d)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(DialogueCharacterEditorState_obj,tipText),HX_("tipText",a8,a3,e6,87)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(DialogueCharacterEditorState_obj,offsetLoopText),HX_("offsetLoopText",e4,3f,e7,d5)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(DialogueCharacterEditorState_obj,offsetIdleText),HX_("offsetIdleText",94,58,69,d8)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(DialogueCharacterEditorState_obj,animText),HX_("animText",5e,5b,4f,80)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(DialogueCharacterEditorState_obj,camGame),HX_("camGame",a1,47,50,cf)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(DialogueCharacterEditorState_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(DialogueCharacterEditorState_obj,mainGroup),HX_("mainGroup",46,7c,98,b3)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(DialogueCharacterEditorState_obj,hudGroup),HX_("hudGroup",08,db,9f,66)},
	{::hx::fsObject /*  ::cutscenes::DialogueCharacter */ ,(int)offsetof(DialogueCharacterEditorState_obj,character),HX_("character",a9,db,d1,41)},
	{::hx::fsObject /*  ::cutscenes::DialogueCharacter */ ,(int)offsetof(DialogueCharacterEditorState_obj,ghostLoop),HX_("ghostLoop",53,b5,84,1b)},
	{::hx::fsObject /*  ::cutscenes::DialogueCharacter */ ,(int)offsetof(DialogueCharacterEditorState_obj,ghostIdle),HX_("ghostIdle",03,b6,80,19)},
	{::hx::fsInt,(int)offsetof(DialogueCharacterEditorState_obj,curAnim),HX_("curAnim",b1,f7,86,ab)},
	{::hx::fsBool,(int)offsetof(DialogueCharacterEditorState_obj,unsavedProgress),HX_("unsavedProgress",5b,33,8b,06)},
	{::hx::fsObject /*  ::backend::ui::PsychUIBox */ ,(int)offsetof(DialogueCharacterEditorState_obj,UI_typebox),HX_("UI_typebox",66,d3,1f,32)},
	{::hx::fsObject /*  ::backend::ui::PsychUIBox */ ,(int)offsetof(DialogueCharacterEditorState_obj,UI_mainbox),HX_("UI_mainbox",47,c7,9d,74)},
	{::hx::fsObject /*  ::backend::ui::PsychUIRadioGroup */ ,(int)offsetof(DialogueCharacterEditorState_obj,characterTypeRadio),HX_("characterTypeRadio",f8,32,87,6c)},
	{::hx::fsString,(int)offsetof(DialogueCharacterEditorState_obj,curSelectedAnim),HX_("curSelectedAnim",ac,b7,5b,3f)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(DialogueCharacterEditorState_obj,animationArray),HX_("animationArray",f5,ff,b2,35)},
	{::hx::fsObject /*  ::backend::ui::PsychUIDropDownMenu */ ,(int)offsetof(DialogueCharacterEditorState_obj,animationDropDown),HX_("animationDropDown",55,ef,bb,0d)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(DialogueCharacterEditorState_obj,animationInputText),HX_("animationInputText",33,7a,56,eb)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(DialogueCharacterEditorState_obj,loopInputText),HX_("loopInputText",d3,d6,31,a6)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(DialogueCharacterEditorState_obj,idleInputText),HX_("idleInputText",23,40,e8,3b)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(DialogueCharacterEditorState_obj,imageInputText),HX_("imageInputText",fc,06,6b,e2)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(DialogueCharacterEditorState_obj,scaleStepper),HX_("scaleStepper",a7,a3,a9,18)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(DialogueCharacterEditorState_obj,xStepper),HX_("xStepper",79,ab,56,1e)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(DialogueCharacterEditorState_obj,yStepper),HX_("yStepper",98,1d,89,57)},
	{::hx::fsInt,(int)offsetof(DialogueCharacterEditorState_obj,currentGhosts),HX_("currentGhosts",5d,57,81,3d)},
	{::hx::fsString,(int)offsetof(DialogueCharacterEditorState_obj,lastTab),HX_("lastTab",9f,a1,ad,d7)},
	{::hx::fsBool,(int)offsetof(DialogueCharacterEditorState_obj,transitioning),HX_("transitioning",6d,6a,93,94)},
	{::hx::fsObject /*  ::openfl::net::FileReference */ ,(int)offsetof(DialogueCharacterEditorState_obj,_file),HX_("_file",5b,ea,cc,f6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo DialogueCharacterEditorState_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &DialogueCharacterEditorState_obj::TIP_TEXT_MAIN,HX_("TIP_TEXT_MAIN",07,e5,35,ad)},
	{::hx::fsString,(void *) &DialogueCharacterEditorState_obj::TIP_TEXT_OFFSET,HX_("TIP_TEXT_OFFSET",e1,77,fe,7d)},
	{::hx::fsString,(void *) &DialogueCharacterEditorState_obj::DEFAULT_TEXT,HX_("DEFAULT_TEXT",4b,9c,59,2d)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String DialogueCharacterEditorState_obj_sMemberFields[] = {
	HX_("box",0b,be,4a,00),
	HX_("daText",ca,52,61,0d),
	HX_("tipText",a8,a3,e6,87),
	HX_("offsetLoopText",e4,3f,e7,d5),
	HX_("offsetIdleText",94,58,69,d8),
	HX_("animText",5e,5b,4f,80),
	HX_("camGame",a1,47,50,cf),
	HX_("camHUD",e8,2b,76,b7),
	HX_("mainGroup",46,7c,98,b3),
	HX_("hudGroup",08,db,9f,66),
	HX_("character",a9,db,d1,41),
	HX_("ghostLoop",53,b5,84,1b),
	HX_("ghostIdle",03,b6,80,19),
	HX_("curAnim",b1,f7,86,ab),
	HX_("unsavedProgress",5b,33,8b,06),
	HX_("create",fc,66,0f,7c),
	HX_("UI_typebox",66,d3,1f,32),
	HX_("UI_mainbox",47,c7,9d,74),
	HX_("addEditorBox",fd,df,01,35),
	HX_("characterTypeRadio",f8,32,87,6c),
	HX_("addTypeUI",8f,14,5b,0f),
	HX_("curSelectedAnim",ac,b7,5b,3f),
	HX_("animationArray",f5,ff,b2,35),
	HX_("animationDropDown",55,ef,bb,0d),
	HX_("animationInputText",33,7a,56,eb),
	HX_("loopInputText",d3,d6,31,a6),
	HX_("idleInputText",23,40,e8,3b),
	HX_("addAnimationsUI",c4,44,96,30),
	HX_("reloadAnimationsDropDown",f9,d9,c9,d3),
	HX_("imageInputText",fc,06,6b,e2),
	HX_("scaleStepper",a7,a3,a9,18),
	HX_("xStepper",79,ab,56,1e),
	HX_("yStepper",98,1d,89,57),
	HX_("addCharacterUI",9c,29,96,54),
	HX_("updateCharTypeBox",b2,0f,ad,84),
	HX_("reloadCharacter",10,b5,a6,ea),
	HX_("updateTextBox",55,78,28,6a),
	HX_("UIEvent",26,fd,9f,07),
	HX_("currentGhosts",5d,57,81,3d),
	HX_("lastTab",9f,a1,ad,d7),
	HX_("transitioning",6d,6a,93,94),
	HX_("update",09,86,05,87),
	HX_("_file",5b,ea,cc,f6),
	HX_("loadCharacter",a3,ac,37,c4),
	HX_("onLoadComplete",be,4c,20,63),
	HX_("onLoadCancel",3f,be,a2,45),
	HX_("onLoadError",a3,fa,a3,b0),
	HX_("saveCharacter",ac,60,8c,66),
	HX_("onSaveComplete",d5,ac,3f,bc),
	HX_("onSaveCancel",96,1a,31,d9),
	HX_("onSaveError",2c,b6,19,24),
	HX_("ClipboardAdd",0b,5a,cd,56),
	::String(null()) };

static void DialogueCharacterEditorState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DialogueCharacterEditorState_obj::TIP_TEXT_MAIN,"TIP_TEXT_MAIN");
	HX_MARK_MEMBER_NAME(DialogueCharacterEditorState_obj::TIP_TEXT_OFFSET,"TIP_TEXT_OFFSET");
	HX_MARK_MEMBER_NAME(DialogueCharacterEditorState_obj::DEFAULT_TEXT,"DEFAULT_TEXT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DialogueCharacterEditorState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DialogueCharacterEditorState_obj::TIP_TEXT_MAIN,"TIP_TEXT_MAIN");
	HX_VISIT_MEMBER_NAME(DialogueCharacterEditorState_obj::TIP_TEXT_OFFSET,"TIP_TEXT_OFFSET");
	HX_VISIT_MEMBER_NAME(DialogueCharacterEditorState_obj::DEFAULT_TEXT,"DEFAULT_TEXT");
};

#endif

::hx::Class DialogueCharacterEditorState_obj::__mClass;

static ::String DialogueCharacterEditorState_obj_sStaticFields[] = {
	HX_("TIP_TEXT_MAIN",07,e5,35,ad),
	HX_("TIP_TEXT_OFFSET",e1,77,fe,7d),
	HX_("DEFAULT_TEXT",4b,9c,59,2d),
	::String(null())
};

void DialogueCharacterEditorState_obj::__register()
{
	DialogueCharacterEditorState_obj _hx_dummy;
	DialogueCharacterEditorState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.editors.DialogueCharacterEditorState",47,eb,03,b3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DialogueCharacterEditorState_obj::__GetStatic;
	__mClass->mSetStaticField = &DialogueCharacterEditorState_obj::__SetStatic;
	__mClass->mMarkFunc = DialogueCharacterEditorState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(DialogueCharacterEditorState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DialogueCharacterEditorState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DialogueCharacterEditorState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DialogueCharacterEditorState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DialogueCharacterEditorState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DialogueCharacterEditorState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DialogueCharacterEditorState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_23_boot)
HXDLIN(  23)		TIP_TEXT_MAIN = HX_("JKLI - Move camera (Hold Shift to move 4x faster)\n\t\nQ/E - Zoom out/in\n\t\nR - Reset Camera\n\t\nH - Toggle Speech Bubble\n\t\nSpace - Reset text",22,20,84,b1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_30_boot)
HXDLIN(  30)		TIP_TEXT_OFFSET = HX_("JKLI - Move camera (Hold Shift to move 4x faster)\n\t\nQ/E - Zoom out/in\n\t\nR - Reset Camera\n\t\nH - Toggle Ghosts\n\t\nWASD - Move Looping animation offset (Red)\n\t\nArrow Keys - Move Idle/Finished animation offset (Blue)\n\t\nHold Shift to move offsets 10x faster",3a,70,f5,57);
            	}
{
            	HX_STACKFRAME(&_hx_pos_bf8bb9c74f598b94_359_boot)
HXDLIN( 359)		DEFAULT_TEXT = HX_("Lorem ipsum dolor sit amet",1e,d7,55,a4);
            	}
}

} // end namespace states
} // end namespace editors
