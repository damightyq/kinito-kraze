// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_states_editors_content_PsychJsonPrinter
#include <states/editors/content/PsychJsonPrinter.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6ce7e6fc01ae98e5_11_new,"states.editors.content.PsychJsonPrinter","new",0x9a1412f2,"states.editors.content.PsychJsonPrinter.new","states/editors/content/PsychJsonPrinter.hx",11,0xd378a39b)
HX_LOCAL_STACK_FRAME(_hx_pos_6ce7e6fc01ae98e5_25_fieldsString,"states.editors.content.PsychJsonPrinter","fieldsString",0x3ff6a758,"states.editors.content.PsychJsonPrinter.fieldsString","states/editors/content/PsychJsonPrinter.hx",25,0xd378a39b)
HX_LOCAL_STACK_FRAME(_hx_pos_6ce7e6fc01ae98e5_29_fieldsStringEx,"states.editors.content.PsychJsonPrinter","fieldsStringEx",0x287169eb,"states.editors.content.PsychJsonPrinter.fieldsStringEx","states/editors/content/PsychJsonPrinter.hx",29,0xd378a39b)
HX_LOCAL_STACK_FRAME(_hx_pos_6ce7e6fc01ae98e5_111_write,"states.editors.content.PsychJsonPrinter","write",0x8c9cf7f1,"states.editors.content.PsychJsonPrinter.write","states/editors/content/PsychJsonPrinter.hx",111,0xd378a39b)
static const ::String _hx_array_data_25b77200_10[] = {
	HX_("null",87,9e,0e,49),
};
static const ::String _hx_array_data_25b77200_11[] = {
	HX_("\"<fun>\"",09,3c,cc,8b),
};
static const ::String _hx_array_data_25b77200_12[] = {
	HX_("\"???\"",45,2f,74,bd),
};
HX_LOCAL_STACK_FRAME(_hx_pos_6ce7e6fc01ae98e5_15_print,"states.editors.content.PsychJsonPrinter","print",0x84cee33f,"states.editors.content.PsychJsonPrinter.print","states/editors/content/PsychJsonPrinter.hx",15,0xd378a39b)
namespace states{
namespace editors{
namespace content{

void PsychJsonPrinter_obj::__construct( ::Dynamic replacer,::String space){
            	HX_STACKFRAME(&_hx_pos_6ce7e6fc01ae98e5_11_new)
HXLINE(  22)		this->_singleLineCheckNext = false;
HXLINE(  13)		this->_ignoreTab = ::Array_obj< ::String >::__new(0);
HXLINE(  11)		super::__construct(replacer,space);
            	}

Dynamic PsychJsonPrinter_obj::__CreateEmpty() { return new PsychJsonPrinter_obj; }

void *PsychJsonPrinter_obj::_hx_vtable = 0;

Dynamic PsychJsonPrinter_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PsychJsonPrinter_obj > _hx_result = new PsychJsonPrinter_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PsychJsonPrinter_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x385642d1) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x385642d1;
	} else {
		return inClassId==(int)0x6f4536d4;
	}
}

void PsychJsonPrinter_obj::fieldsString( ::Dynamic v,::Array< ::String > fields){
            	HX_STACKFRAME(&_hx_pos_6ce7e6fc01ae98e5_25_fieldsString)
HXDLIN(  25)		this->fieldsStringEx(v,fields,null());
            	}


void PsychJsonPrinter_obj::fieldsStringEx( ::Dynamic v,::Array< ::String > fields, ::Dynamic __o_mapCheck){
            		 ::Dynamic mapCheck = __o_mapCheck;
            		if (::hx::IsNull(__o_mapCheck)) mapCheck = false;
            	HX_STACKFRAME(&_hx_pos_6ce7e6fc01ae98e5_29_fieldsStringEx)
HXLINE(  30)		{
HXLINE(  30)			 ::StringBuf _this = this->buf;
HXDLIN(  30)			{
HXLINE(  30)				if (::hx::IsNull( _this->charBuf )) {
HXLINE(  30)					_this->charBuf = ::Array_obj< char >::__new();
            				}
HXDLIN(  30)				_this->charBuf->push(123);
            			}
            		}
HXLINE(  31)		int len = fields->length;
HXLINE(  32)		int last = (len - 1);
HXLINE(  34)		bool hasArrayInsideIt = false;
HXLINE(  35)		if (this->_singleLineCheckNext) {
HXLINE(  37)			int _g = 0;
HXDLIN(  37)			::Array< ::String > _g1 = ::Reflect_obj::fields(v);
HXDLIN(  37)			while((_g < _g1->length)){
HXLINE(  37)				::String subv = _g1->__get(_g);
HXDLIN(  37)				_g = (_g + 1);
HXLINE(  39)				{
HXLINE(  39)					 ::ValueType _g2 = ::Type_obj::_hx_typeof(subv);
HXDLIN(  39)					switch((int)(_g2->_hx_getIndex())){
            						case (int)4: {
HXLINE(  42)							hasArrayInsideIt = true;
HXLINE(  43)							goto _hx_goto_2;
            						}
            						break;
            						case (int)6: {
HXLINE(  41)							if (::hx::IsPointerEq( _g2->_hx_getObject(0).StaticCast< ::hx::Class >(),::hx::ArrayBase::__mClass )) {
HXLINE(  42)								hasArrayInsideIt = true;
HXLINE(  43)								goto _hx_goto_2;
            							}
            						}
            						break;
            						default:{
            						}
            					}
            				}
            			}
            			_hx_goto_2:;
            		}
HXLINE(  49)		bool usedMapCheck = false;
HXLINE(  50)		bool first = true;
HXLINE(  51)		{
HXLINE(  51)			int _g3 = 0;
HXDLIN(  51)			int _g4 = len;
HXDLIN(  51)			while((_g3 < _g4)){
HXLINE(  51)				_g3 = (_g3 + 1);
HXDLIN(  51)				int i = (_g3 - 1);
HXLINE(  52)				::String f = fields->__get(i);
HXLINE(  53)				 ::Dynamic value = ::Reflect_obj::field(v,f);
HXLINE(  54)				if (::Reflect_obj::isFunction(value)) {
HXLINE(  55)					continue;
            				}
HXLINE(  56)				if (first) {
HXLINE(  58)					this->nind++;
HXLINE(  59)					first = false;
            				}
            				else {
HXLINE(  63)					{
HXLINE(  63)						 ::StringBuf _this1 = this->buf;
HXDLIN(  63)						{
HXLINE(  63)							if (::hx::IsNull( _this1->charBuf )) {
HXLINE(  63)								_this1->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN(  63)							_this1->charBuf->push(44);
            						}
            					}
HXLINE(  64)					bool _hx_tmp;
HXDLIN(  64)					if (this->_singleLineCheckNext) {
HXLINE(  64)						_hx_tmp = !(hasArrayInsideIt);
            					}
            					else {
HXLINE(  64)						_hx_tmp = false;
            					}
HXDLIN(  64)					if (_hx_tmp) {
HXLINE(  64)						 ::StringBuf _this2 = this->buf;
HXDLIN(  64)						{
HXLINE(  64)							if (::hx::IsNull( _this2->charBuf )) {
HXLINE(  64)								_this2->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN(  64)							_this2->charBuf->push(32);
            						}
            					}
            				}
HXLINE(  67)				 ::Dynamic _mapCheck = mapCheck;
HXLINE(  68)				if (( (bool)(_mapCheck) )) {
HXLINE(  70)					 ::ValueType _g5 = ::Type_obj::_hx_typeof(value);
HXDLIN(  70)					switch((int)(_g5->_hx_getIndex())){
            						case (int)4: {
HXLINE(  73)							usedMapCheck = true;
            						}
            						break;
            						case (int)6: {
HXLINE(  72)							::hx::Class _hx_switch_0 = _g5->_hx_getObject(0).StaticCast< ::hx::Class >();
            							if (  (_hx_switch_0==::hx::ArrayBase::__mClass) ||  (_hx_switch_0==::hx::ClassOf< ::haxe::ds::StringMap >()) ){
HXLINE(  73)								usedMapCheck = true;
HXDLIN(  73)								goto _hx_goto_4;
            							}
            							/* default */{
HXLINE(  75)								_mapCheck = false;
            							}
            							_hx_goto_4:;
            						}
            						break;
            						default:{
HXLINE(  75)							_mapCheck = false;
            						}
            					}
            				}
HXLINE(  79)				bool _hx_tmp1;
HXDLIN(  79)				bool _hx_tmp2;
HXDLIN(  79)				bool _hx_tmp3;
HXDLIN(  79)				if (this->_singleLineCheckNext) {
HXLINE(  79)					_hx_tmp3 = hasArrayInsideIt;
            				}
            				else {
HXLINE(  79)					_hx_tmp3 = true;
            				}
HXDLIN(  79)				if (!(_hx_tmp3)) {
HXLINE(  79)					_hx_tmp2 = ( (bool)(_mapCheck) );
            				}
            				else {
HXLINE(  79)					_hx_tmp2 = true;
            				}
HXDLIN(  79)				if (!(_hx_tmp2)) {
HXLINE(  79)					_hx_tmp1 = usedMapCheck;
            				}
            				else {
HXLINE(  79)					_hx_tmp1 = true;
            				}
HXDLIN(  79)				if (_hx_tmp1) {
HXLINE(  81)					if (this->pretty) {
HXLINE(  81)						 ::StringBuf _this3 = this->buf;
HXDLIN(  81)						{
HXLINE(  81)							if (::hx::IsNull( _this3->charBuf )) {
HXLINE(  81)								_this3->charBuf = ::Array_obj< char >::__new();
            							}
HXDLIN(  81)							_this3->charBuf->push(10);
            						}
            					}
HXLINE(  82)					if (this->pretty) {
HXLINE(  82)						::String v1 = ::StringTools_obj::lpad(HX_("",00,00,00,00),this->indent,(this->nind * this->indent.length));
HXDLIN(  82)						{
HXLINE(  82)							 ::StringBuf _this4 = this->buf;
HXDLIN(  82)							if (::hx::IsNotNull( _this4->charBuf )) {
HXLINE(  82)								_this4->flush();
            							}
HXDLIN(  82)							if (::hx::IsNull( _this4->b )) {
HXLINE(  82)								_this4->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(v1));
            							}
            							else {
HXLINE(  82)								::Array< ::String > _this5 = _this4->b;
HXDLIN(  82)								_this5->push(::Std_obj::string(v1));
            							}
            						}
            					}
            				}
HXLINE(  84)				this->quote(f);
HXLINE(  85)				{
HXLINE(  85)					 ::StringBuf _this6 = this->buf;
HXDLIN(  85)					{
HXLINE(  85)						if (::hx::IsNull( _this6->charBuf )) {
HXLINE(  85)							_this6->charBuf = ::Array_obj< char >::__new();
            						}
HXDLIN(  85)						_this6->charBuf->push(58);
            					}
            				}
HXLINE(  86)				if (this->pretty) {
HXLINE(  87)					 ::StringBuf _this7 = this->buf;
HXDLIN(  87)					{
HXLINE(  87)						if (::hx::IsNull( _this7->charBuf )) {
HXLINE(  87)							_this7->charBuf = ::Array_obj< char >::__new();
            						}
HXDLIN(  87)						_this7->charBuf->push(32);
            					}
            				}
HXLINE(  89)				bool doContain = this->_ignoreTab->contains(f);
HXLINE(  90)				if (doContain) {
HXLINE(  90)					this->_singleLineCheckNext = true;
            				}
HXLINE(  91)				this->write(f,value);
HXLINE(  92)				if (doContain) {
HXLINE(  92)					this->_singleLineCheckNext = false;
            				}
HXLINE(  94)				if ((i == last)) {
HXLINE(  95)					this->nind--;
HXLINE(  96)					if (!(this->_singleLineCheckNext)) {
HXLINE(  98)						if (this->pretty) {
HXLINE(  98)							 ::StringBuf _this8 = this->buf;
HXDLIN(  98)							{
HXLINE(  98)								if (::hx::IsNull( _this8->charBuf )) {
HXLINE(  98)									_this8->charBuf = ::Array_obj< char >::__new();
            								}
HXDLIN(  98)								_this8->charBuf->push(10);
            							}
            						}
HXLINE(  99)						if (this->pretty) {
HXLINE(  99)							::String v2 = ::StringTools_obj::lpad(HX_("",00,00,00,00),this->indent,(this->nind * this->indent.length));
HXDLIN(  99)							{
HXLINE(  99)								 ::StringBuf _this9 = this->buf;
HXDLIN(  99)								if (::hx::IsNotNull( _this9->charBuf )) {
HXLINE(  99)									_this9->flush();
            								}
HXDLIN(  99)								if (::hx::IsNull( _this9->b )) {
HXLINE(  99)									_this9->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(v2));
            								}
            								else {
HXLINE(  99)									::Array< ::String > _this10 = _this9->b;
HXDLIN(  99)									_this10->push(::Std_obj::string(v2));
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 103)		bool _hx_tmp4;
HXDLIN( 103)		if (!(hasArrayInsideIt)) {
HXLINE( 103)			_hx_tmp4 = usedMapCheck;
            		}
            		else {
HXLINE( 103)			_hx_tmp4 = true;
            		}
HXDLIN( 103)		if (_hx_tmp4) {
HXLINE( 105)			if (this->pretty) {
HXLINE( 105)				 ::StringBuf _this11 = this->buf;
HXDLIN( 105)				{
HXLINE( 105)					if (::hx::IsNull( _this11->charBuf )) {
HXLINE( 105)						_this11->charBuf = ::Array_obj< char >::__new();
            					}
HXDLIN( 105)					_this11->charBuf->push(10);
            				}
            			}
HXLINE( 106)			if (this->pretty) {
HXLINE( 106)				::String v3 = ::StringTools_obj::lpad(HX_("",00,00,00,00),this->indent,(this->nind * this->indent.length));
HXDLIN( 106)				{
HXLINE( 106)					 ::StringBuf _this12 = this->buf;
HXDLIN( 106)					if (::hx::IsNotNull( _this12->charBuf )) {
HXLINE( 106)						_this12->flush();
            					}
HXDLIN( 106)					if (::hx::IsNull( _this12->b )) {
HXLINE( 106)						_this12->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(v3));
            					}
            					else {
HXLINE( 106)						::Array< ::String > _this13 = _this12->b;
HXDLIN( 106)						_this13->push(::Std_obj::string(v3));
            					}
            				}
            			}
            		}
HXLINE( 108)		{
HXLINE( 108)			 ::StringBuf _this14 = this->buf;
HXDLIN( 108)			{
HXLINE( 108)				if (::hx::IsNull( _this14->charBuf )) {
HXLINE( 108)					_this14->charBuf = ::Array_obj< char >::__new();
            				}
HXDLIN( 108)				_this14->charBuf->push(125);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PsychJsonPrinter_obj,fieldsStringEx,(void))

void PsychJsonPrinter_obj::write( ::Dynamic k, ::Dynamic v){
            	HX_STACKFRAME(&_hx_pos_6ce7e6fc01ae98e5_111_write)
HXLINE( 112)		if (::hx::IsNotNull( this->replacer )) {
HXLINE( 113)			v = this->replacer(k,v);
            		}
HXLINE( 114)		{
HXLINE( 114)			 ::ValueType _g = ::Type_obj::_hx_typeof(v);
HXDLIN( 114)			switch((int)(_g->_hx_getIndex())){
            				case (int)0: {
HXLINE( 197)					 ::StringBuf _this = this->buf;
HXDLIN( 197)					if (::hx::IsNotNull( _this->charBuf )) {
HXLINE( 197)						_this->flush();
            					}
HXDLIN( 197)					if (::hx::IsNull( _this->b )) {
HXLINE( 197)						_this->b = ::Array_obj< ::String >::fromData( _hx_array_data_25b77200_10,1);
            					}
            					else {
HXLINE( 197)						_this->b->push(HX_("null",87,9e,0e,49));
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 120)					::String v1 = ( (::String)(v) );
HXDLIN( 120)					{
HXLINE( 120)						 ::StringBuf _this1 = this->buf;
HXDLIN( 120)						if (::hx::IsNotNull( _this1->charBuf )) {
HXLINE( 120)							_this1->flush();
            						}
HXDLIN( 120)						if (::hx::IsNull( _this1->b )) {
HXLINE( 120)							_this1->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(v1));
            						}
            						else {
HXLINE( 120)							::Array< ::String > _this2 = _this1->b;
HXDLIN( 120)							_this2->push(::Std_obj::string(v1));
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 122)					::String v2;
HXDLIN( 122)					if (::Math_obj::isFinite(( (Float)(v) ))) {
HXLINE( 122)						v2 = ::Std_obj::string(v);
            					}
            					else {
HXLINE( 122)						v2 = HX_("null",87,9e,0e,49);
            					}
HXDLIN( 122)					{
HXLINE( 122)						 ::StringBuf _this3 = this->buf;
HXDLIN( 122)						if (::hx::IsNotNull( _this3->charBuf )) {
HXLINE( 122)							_this3->flush();
            						}
HXDLIN( 122)						if (::hx::IsNull( _this3->b )) {
HXLINE( 122)							_this3->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(v2));
            						}
            						else {
HXLINE( 122)							::Array< ::String > _this4 = _this3->b;
HXDLIN( 122)							_this4->push(::Std_obj::string(v2));
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 195)					::String v3 = ( (::String)(v) );
HXDLIN( 195)					{
HXLINE( 195)						 ::StringBuf _this5 = this->buf;
HXDLIN( 195)						if (::hx::IsNotNull( _this5->charBuf )) {
HXLINE( 195)							_this5->flush();
            						}
HXDLIN( 195)						if (::hx::IsNull( _this5->b )) {
HXLINE( 195)							_this5->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(v3));
            						}
            						else {
HXLINE( 195)							::Array< ::String > _this6 = _this5->b;
HXDLIN( 195)							_this6->push(::Std_obj::string(v3));
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 118)					this->fieldsString(v,::Reflect_obj::fields(v));
            				}
            				break;
            				case (int)5: {
HXLINE( 124)					 ::StringBuf _this7 = this->buf;
HXDLIN( 124)					if (::hx::IsNotNull( _this7->charBuf )) {
HXLINE( 124)						_this7->flush();
            					}
HXDLIN( 124)					if (::hx::IsNull( _this7->b )) {
HXLINE( 124)						_this7->b = ::Array_obj< ::String >::fromData( _hx_array_data_25b77200_11,1);
            					}
            					else {
HXLINE( 124)						_this7->b->push(HX_("\"<fun>\"",09,3c,cc,8b));
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 125)					::hx::Class c = _g->_hx_getObject(0).StaticCast< ::hx::Class >();
HXLINE( 126)					if (::hx::IsPointerEq( c,::hx::ClassOf< ::String >() )) {
HXLINE( 127)						this->quote(( (::String)(v) ));
            					}
            					else {
HXLINE( 128)						if (::hx::IsPointerEq( c,::hx::ArrayBase::__mClass )) {
HXLINE( 129)							::cpp::VirtualArray v4 = ( (::cpp::VirtualArray)(v) );
HXLINE( 130)							{
HXLINE( 130)								 ::StringBuf _this8 = this->buf;
HXDLIN( 130)								{
HXLINE( 130)									if (::hx::IsNull( _this8->charBuf )) {
HXLINE( 130)										_this8->charBuf = ::Array_obj< char >::__new();
            									}
HXDLIN( 130)									_this8->charBuf->push(91);
            								}
            							}
HXLINE( 132)							int len = v4->get_length();
HXLINE( 133)							int last = (len - 1);
HXLINE( 135)							bool hasArrayInsideIt = false;
HXLINE( 136)							if (this->_singleLineCheckNext) {
HXLINE( 138)								int _g1 = 0;
HXDLIN( 138)								while((_g1 < v4->get_length())){
HXLINE( 138)									 ::Dynamic subv = v4->__get(_g1);
HXDLIN( 138)									_g1 = (_g1 + 1);
HXLINE( 140)									{
HXLINE( 140)										 ::ValueType _g2 = ::Type_obj::_hx_typeof(subv);
HXDLIN( 140)										switch((int)(_g2->_hx_getIndex())){
            											case (int)4: {
HXLINE( 143)												hasArrayInsideIt = true;
HXLINE( 144)												goto _hx_goto_6;
            											}
            											break;
            											case (int)6: {
HXLINE( 142)												if (::hx::IsPointerEq( _g2->_hx_getObject(0).StaticCast< ::hx::Class >(),::hx::ArrayBase::__mClass )) {
HXLINE( 143)													hasArrayInsideIt = true;
HXLINE( 144)													goto _hx_goto_6;
            												}
            											}
            											break;
            											default:{
            											}
            										}
            									}
            								}
            								_hx_goto_6:;
            							}
HXLINE( 150)							{
HXLINE( 150)								int _g3 = 0;
HXDLIN( 150)								int _g4 = len;
HXDLIN( 150)								while((_g3 < _g4)){
HXLINE( 150)									_g3 = (_g3 + 1);
HXDLIN( 150)									int i = (_g3 - 1);
HXLINE( 151)									if ((i > 0)) {
HXLINE( 153)										{
HXLINE( 153)											 ::StringBuf _this9 = this->buf;
HXDLIN( 153)											{
HXLINE( 153)												if (::hx::IsNull( _this9->charBuf )) {
HXLINE( 153)													_this9->charBuf = ::Array_obj< char >::__new();
            												}
HXDLIN( 153)												_this9->charBuf->push(44);
            											}
            										}
HXLINE( 154)										bool _hx_tmp;
HXDLIN( 154)										if (this->_singleLineCheckNext) {
HXLINE( 154)											_hx_tmp = !(hasArrayInsideIt);
            										}
            										else {
HXLINE( 154)											_hx_tmp = false;
            										}
HXDLIN( 154)										if (_hx_tmp) {
HXLINE( 154)											 ::StringBuf _this10 = this->buf;
HXDLIN( 154)											{
HXLINE( 154)												if (::hx::IsNull( _this10->charBuf )) {
HXLINE( 154)													_this10->charBuf = ::Array_obj< char >::__new();
            												}
HXDLIN( 154)												_this10->charBuf->push(32);
            											}
            										}
            									}
            									else {
HXLINE( 156)										this->nind++;
            									}
HXLINE( 158)									bool _hx_tmp1;
HXDLIN( 158)									if (this->_singleLineCheckNext) {
HXLINE( 158)										_hx_tmp1 = hasArrayInsideIt;
            									}
            									else {
HXLINE( 158)										_hx_tmp1 = true;
            									}
HXDLIN( 158)									if (_hx_tmp1) {
HXLINE( 160)										if (this->pretty) {
HXLINE( 160)											 ::StringBuf _this11 = this->buf;
HXDLIN( 160)											{
HXLINE( 160)												if (::hx::IsNull( _this11->charBuf )) {
HXLINE( 160)													_this11->charBuf = ::Array_obj< char >::__new();
            												}
HXDLIN( 160)												_this11->charBuf->push(10);
            											}
            										}
HXLINE( 161)										if (this->pretty) {
HXLINE( 161)											::String v5 = ::StringTools_obj::lpad(HX_("",00,00,00,00),this->indent,(this->nind * this->indent.length));
HXDLIN( 161)											{
HXLINE( 161)												 ::StringBuf _this12 = this->buf;
HXDLIN( 161)												if (::hx::IsNotNull( _this12->charBuf )) {
HXLINE( 161)													_this12->flush();
            												}
HXDLIN( 161)												if (::hx::IsNull( _this12->b )) {
HXLINE( 161)													_this12->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(v5));
            												}
            												else {
HXLINE( 161)													::Array< ::String > _this13 = _this12->b;
HXDLIN( 161)													_this13->push(::Std_obj::string(v5));
            												}
            											}
            										}
            									}
HXLINE( 164)									this->write(i,v4->__get(i));
HXLINE( 165)									if ((i == last)) {
HXLINE( 166)										this->nind--;
HXLINE( 167)										if (!(this->_singleLineCheckNext)) {
HXLINE( 169)											if (this->pretty) {
HXLINE( 169)												 ::StringBuf _this14 = this->buf;
HXDLIN( 169)												{
HXLINE( 169)													if (::hx::IsNull( _this14->charBuf )) {
HXLINE( 169)														_this14->charBuf = ::Array_obj< char >::__new();
            													}
HXDLIN( 169)													_this14->charBuf->push(10);
            												}
            											}
HXLINE( 170)											if (this->pretty) {
HXLINE( 170)												::String v6 = ::StringTools_obj::lpad(HX_("",00,00,00,00),this->indent,(this->nind * this->indent.length));
HXDLIN( 170)												{
HXLINE( 170)													 ::StringBuf _this15 = this->buf;
HXDLIN( 170)													if (::hx::IsNotNull( _this15->charBuf )) {
HXLINE( 170)														_this15->flush();
            													}
HXDLIN( 170)													if (::hx::IsNull( _this15->b )) {
HXLINE( 170)														_this15->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(v6));
            													}
            													else {
HXLINE( 170)														::Array< ::String > _this16 = _this15->b;
HXDLIN( 170)														_this16->push(::Std_obj::string(v6));
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXLINE( 174)							if (hasArrayInsideIt) {
HXLINE( 176)								if (this->pretty) {
HXLINE( 176)									 ::StringBuf _this17 = this->buf;
HXDLIN( 176)									{
HXLINE( 176)										if (::hx::IsNull( _this17->charBuf )) {
HXLINE( 176)											_this17->charBuf = ::Array_obj< char >::__new();
            										}
HXDLIN( 176)										_this17->charBuf->push(10);
            									}
            								}
HXLINE( 177)								if (this->pretty) {
HXLINE( 177)									::String v7 = ::StringTools_obj::lpad(HX_("",00,00,00,00),this->indent,(this->nind * this->indent.length));
HXDLIN( 177)									{
HXLINE( 177)										 ::StringBuf _this18 = this->buf;
HXDLIN( 177)										if (::hx::IsNotNull( _this18->charBuf )) {
HXLINE( 177)											_this18->flush();
            										}
HXDLIN( 177)										if (::hx::IsNull( _this18->b )) {
HXLINE( 177)											_this18->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(v7));
            										}
            										else {
HXLINE( 177)											::Array< ::String > _this19 = _this18->b;
HXDLIN( 177)											_this19->push(::Std_obj::string(v7));
            										}
            									}
            								}
            							}
HXLINE( 179)							{
HXLINE( 179)								 ::StringBuf _this20 = this->buf;
HXDLIN( 179)								{
HXLINE( 179)									if (::hx::IsNull( _this20->charBuf )) {
HXLINE( 179)										_this20->charBuf = ::Array_obj< char >::__new();
            									}
HXDLIN( 179)									_this20->charBuf->push(93);
            								}
            							}
            						}
            						else {
HXLINE( 180)							if (::hx::IsPointerEq( c,::hx::ClassOf< ::haxe::ds::StringMap >() )) {
HXLINE( 181)								 ::haxe::ds::StringMap v8 = ( ( ::haxe::ds::StringMap)(v) );
HXLINE( 182)								 ::Dynamic o =  ::Dynamic(::hx::Anon_obj::Create(0));
HXLINE( 183)								{
HXLINE( 183)									 ::Dynamic k1 = v8->keys();
HXDLIN( 183)									while(( (bool)(k1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 183)										::String k2 = ( (::String)(k1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 184)										::Reflect_obj::setField(o,k2,v8->get(k2));
            									}
            								}
HXLINE( 185)								this->fieldsStringEx(o,::Reflect_obj::fields(o),true);
            							}
            							else {
HXLINE( 186)								if (::hx::IsPointerEq( c,::hx::ClassOf< ::Date >() )) {
HXLINE( 187)									 ::Date v9 = ( ( ::Date)(v) );
HXLINE( 188)									this->quote(v9->toString());
            								}
            								else {
HXLINE( 190)									this->classString(v);
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 191)					::hx::Class _g5 = _g->_hx_getObject(0).StaticCast< ::hx::Class >();
HXDLIN( 191)					{
HXLINE( 192)						int i1 = _hx_getEnumValueIndex(v);
HXLINE( 193)						{
HXLINE( 193)							::String v10 = ::Std_obj::string(i1);
HXDLIN( 193)							{
HXLINE( 193)								 ::StringBuf _this21 = this->buf;
HXDLIN( 193)								if (::hx::IsNotNull( _this21->charBuf )) {
HXLINE( 193)									_this21->flush();
            								}
HXDLIN( 193)								if (::hx::IsNull( _this21->b )) {
HXLINE( 193)									_this21->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(v10));
            								}
            								else {
HXLINE( 193)									::Array< ::String > _this22 = _this21->b;
HXDLIN( 193)									_this22->push(::Std_obj::string(v10));
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)8: {
HXLINE( 116)					 ::StringBuf _this23 = this->buf;
HXDLIN( 116)					if (::hx::IsNotNull( _this23->charBuf )) {
HXLINE( 116)						_this23->flush();
            					}
HXDLIN( 116)					if (::hx::IsNull( _this23->b )) {
HXLINE( 116)						_this23->b = ::Array_obj< ::String >::fromData( _hx_array_data_25b77200_12,1);
            					}
            					else {
HXLINE( 116)						_this23->b->push(HX_("\"???\"",45,2f,74,bd));
            					}
            				}
            				break;
            			}
            		}
            	}


::String PsychJsonPrinter_obj::print( ::Dynamic o,::Array< ::String > ignoreTab){
            	HX_GC_STACKFRAME(&_hx_pos_6ce7e6fc01ae98e5_15_print)
HXLINE(  16)		 ::states::editors::content::PsychJsonPrinter printer =  ::states::editors::content::PsychJsonPrinter_obj::__alloc( HX_CTX ,null(),HX_("\t",09,00,00,00));
HXLINE(  17)		if (::hx::IsNotNull( ignoreTab )) {
HXLINE(  17)			printer->_ignoreTab = ignoreTab;
            		}
HXLINE(  18)		printer->write(HX_("",00,00,00,00),o);
HXLINE(  19)		return printer->buf->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PsychJsonPrinter_obj,print,return )


::hx::ObjectPtr< PsychJsonPrinter_obj > PsychJsonPrinter_obj::__new( ::Dynamic replacer,::String space) {
	::hx::ObjectPtr< PsychJsonPrinter_obj > __this = new PsychJsonPrinter_obj();
	__this->__construct(replacer,space);
	return __this;
}

::hx::ObjectPtr< PsychJsonPrinter_obj > PsychJsonPrinter_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic replacer,::String space) {
	PsychJsonPrinter_obj *__this = (PsychJsonPrinter_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PsychJsonPrinter_obj), true, "states.editors.content.PsychJsonPrinter"));
	*(void **)__this = PsychJsonPrinter_obj::_hx_vtable;
	__this->__construct(replacer,space);
	return __this;
}

PsychJsonPrinter_obj::PsychJsonPrinter_obj()
{
}

void PsychJsonPrinter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PsychJsonPrinter);
	HX_MARK_MEMBER_NAME(_ignoreTab,"_ignoreTab");
	HX_MARK_MEMBER_NAME(_singleLineCheckNext,"_singleLineCheckNext");
	 ::haxe::format::JsonPrinter_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PsychJsonPrinter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_ignoreTab,"_ignoreTab");
	HX_VISIT_MEMBER_NAME(_singleLineCheckNext,"_singleLineCheckNext");
	 ::haxe::format::JsonPrinter_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PsychJsonPrinter_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"write") ) { return ::hx::Val( write_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_ignoreTab") ) { return ::hx::Val( _ignoreTab ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fieldsString") ) { return ::hx::Val( fieldsString_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fieldsStringEx") ) { return ::hx::Val( fieldsStringEx_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_singleLineCheckNext") ) { return ::hx::Val( _singleLineCheckNext ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PsychJsonPrinter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"print") ) { outValue = print_dyn(); return true; }
	}
	return false;
}

::hx::Val PsychJsonPrinter_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"_ignoreTab") ) { _ignoreTab=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_singleLineCheckNext") ) { _singleLineCheckNext=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PsychJsonPrinter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_ignoreTab",24,4c,79,0a));
	outFields->push(HX_("_singleLineCheckNext",a0,02,36,09));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PsychJsonPrinter_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PsychJsonPrinter_obj,_ignoreTab),HX_("_ignoreTab",24,4c,79,0a)},
	{::hx::fsBool,(int)offsetof(PsychJsonPrinter_obj,_singleLineCheckNext),HX_("_singleLineCheckNext",a0,02,36,09)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PsychJsonPrinter_obj_sStaticStorageInfo = 0;
#endif

static ::String PsychJsonPrinter_obj_sMemberFields[] = {
	HX_("_ignoreTab",24,4c,79,0a),
	HX_("_singleLineCheckNext",a0,02,36,09),
	HX_("fieldsString",2a,cc,56,34),
	HX_("fieldsStringEx",3d,e7,c1,10),
	HX_("write",df,6c,59,d0),
	::String(null()) };

::hx::Class PsychJsonPrinter_obj::__mClass;

static ::String PsychJsonPrinter_obj_sStaticFields[] = {
	HX_("print",2d,58,8b,c8),
	::String(null())
};

void PsychJsonPrinter_obj::__register()
{
	PsychJsonPrinter_obj _hx_dummy;
	PsychJsonPrinter_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.editors.content.PsychJsonPrinter",00,72,b7,25);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PsychJsonPrinter_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PsychJsonPrinter_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PsychJsonPrinter_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PsychJsonPrinter_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PsychJsonPrinter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PsychJsonPrinter_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace editors
} // end namespace content
