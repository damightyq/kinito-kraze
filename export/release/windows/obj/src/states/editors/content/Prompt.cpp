// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIButton
#include <backend/ui/PsychUIButton.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_states_editors_content_BasePrompt
#include <states/editors/content/BasePrompt.h>
#endif
#ifndef INCLUDED_states_editors_content_Prompt
#include <states/editors/content/Prompt.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d49ebe038a204842_21_new,"states.editors.content.Prompt","new",0x38e1debf,"states.editors.content.Prompt.new","states/editors/content/Prompt.hx",21,0x558b4a2e)
HX_LOCAL_STACK_FRAME(_hx_pos_d49ebe038a204842_39_promptCreate,"states.editors.content.Prompt","promptCreate",0x9a31ad81,"states.editors.content.Prompt.promptCreate","states/editors/content/Prompt.hx",39,0x558b4a2e)
HX_LOCAL_STACK_FRAME(_hx_pos_d49ebe038a204842_37_promptCreate,"states.editors.content.Prompt","promptCreate",0x9a31ad81,"states.editors.content.Prompt.promptCreate","states/editors/content/Prompt.hx",37,0x558b4a2e)
HX_LOCAL_STACK_FRAME(_hx_pos_d49ebe038a204842_58_close,"states.editors.content.Prompt","close",0x4b58bbd7,"states.editors.content.Prompt.close","states/editors/content/Prompt.hx",58,0x558b4a2e)
namespace states{
namespace editors{
namespace content{

void Prompt_obj::__construct(::String title, ::Dynamic yesFunction, ::Dynamic noFunction,::String _yesTxt,::String _noTxt){
            	HX_STACKFRAME(&_hx_pos_d49ebe038a204842_21_new)
HXLINE(  26)		this->_noTxt = HX_("Cancel",9a,61,c8,ec);
HXLINE(  25)		this->_yesTxt = HX_("OK",1c,45,00,00);
HXLINE(  29)		if (::hx::IsNotNull( _yesTxt )) {
HXLINE(  29)			this->_yesTxt = _yesTxt;
            		}
HXLINE(  30)		if (::hx::IsNotNull( _noTxt )) {
HXLINE(  30)			this->_noTxt = _noTxt;
            		}
HXLINE(  31)		this->yesFunction = yesFunction;
HXLINE(  32)		this->noFunction = noFunction;
HXLINE(  33)		super::__construct(null(),null(),title,this->promptCreate_dyn(),null());
            	}

Dynamic Prompt_obj::__CreateEmpty() { return new Prompt_obj; }

void *Prompt_obj::_hx_vtable = 0;

Dynamic Prompt_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Prompt_obj > _hx_result = new Prompt_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool Prompt_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5661ffbf) {
		if (inClassId<=(int)0x3c0818b8) {
			if (inClassId<=(int)0x29854721) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x29854721;
			} else {
				return inClassId==(int)0x3c0818b8;
			}
		} else {
			return inClassId==(int)0x4d35a1ca || inClassId==(int)0x5661ffbf;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void Prompt_obj::promptCreate( ::states::editors::content::BasePrompt _){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::content::Prompt,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_d49ebe038a204842_39_promptCreate)
HXLINE(  40)			_gthis->yesFunction();
HXLINE(  41)			_gthis->close();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_d49ebe038a204842_37_promptCreate)
HXDLIN(  37)		 ::states::editors::content::Prompt _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  38)		int btnY = 390;
HXLINE(  39)		 ::backend::ui::PsychUIButton btn =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,btnY,this->_yesTxt, ::Dynamic(new _hx_Closure_0(_gthis)),null(),null());
HXLINE(  43)		btn->normalStyle->__SetField(HX_("bgColor",5e,81,83,f7),-65536,::hx::paccDynamic);
HXLINE(  44)		btn->normalStyle->__SetField(HX_("textColor",76,01,4a,e3),-1,::hx::paccDynamic);
HXLINE(  45)		{
HXLINE(  45)			int axes = 1;
HXDLIN(  45)			bool _hx_tmp;
HXDLIN(  45)			if ((axes != 1)) {
HXLINE(  45)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(  45)				_hx_tmp = true;
            			}
HXDLIN(  45)			if (_hx_tmp) {
HXLINE(  45)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  45)				btn->set_x(((( (Float)(_hx_tmp1) ) - btn->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  45)			bool _hx_tmp2;
HXDLIN(  45)			if ((axes != 16)) {
HXLINE(  45)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  45)				_hx_tmp2 = true;
            			}
HXDLIN(  45)			if (_hx_tmp2) {
HXLINE(  45)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  45)				btn->set_y(((( (Float)(_hx_tmp3) ) - btn->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  46)		btn->set_x((btn->x - ( (Float)(100) )));
HXLINE(  47)		btn->set_cameras(this->get_cameras());
HXLINE(  48)		this->add(btn);
HXLINE(  50)		 ::backend::ui::PsychUIButton btn1 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,btnY,this->_noTxt,this->close_dyn(),null(),null());
HXLINE(  51)		{
HXLINE(  51)			int axes1 = 1;
HXDLIN(  51)			bool _hx_tmp4;
HXDLIN(  51)			if ((axes1 != 1)) {
HXLINE(  51)				_hx_tmp4 = (axes1 == 17);
            			}
            			else {
HXLINE(  51)				_hx_tmp4 = true;
            			}
HXDLIN(  51)			if (_hx_tmp4) {
HXLINE(  51)				int _hx_tmp5 = ::flixel::FlxG_obj::width;
HXDLIN(  51)				btn1->set_x(((( (Float)(_hx_tmp5) ) - btn1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  51)			bool _hx_tmp6;
HXDLIN(  51)			if ((axes1 != 16)) {
HXLINE(  51)				_hx_tmp6 = (axes1 == 17);
            			}
            			else {
HXLINE(  51)				_hx_tmp6 = true;
            			}
HXDLIN(  51)			if (_hx_tmp6) {
HXLINE(  51)				int _hx_tmp7 = ::flixel::FlxG_obj::height;
HXDLIN(  51)				btn1->set_y(((( (Float)(_hx_tmp7) ) - btn1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  52)		btn1->set_x((btn1->x + 100));
HXLINE(  53)		btn1->set_cameras(this->get_cameras());
HXLINE(  54)		this->add(btn1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Prompt_obj,promptCreate,(void))

void Prompt_obj::close(){
            	HX_STACKFRAME(&_hx_pos_d49ebe038a204842_58_close)
HXLINE(  59)		if (::hx::IsNotNull( this->noFunction )) {
HXLINE(  59)			this->noFunction();
            		}
HXLINE(  60)		this->super::close();
            	}



::hx::ObjectPtr< Prompt_obj > Prompt_obj::__new(::String title, ::Dynamic yesFunction, ::Dynamic noFunction,::String _yesTxt,::String _noTxt) {
	::hx::ObjectPtr< Prompt_obj > __this = new Prompt_obj();
	__this->__construct(title,yesFunction,noFunction,_yesTxt,_noTxt);
	return __this;
}

::hx::ObjectPtr< Prompt_obj > Prompt_obj::__alloc(::hx::Ctx *_hx_ctx,::String title, ::Dynamic yesFunction, ::Dynamic noFunction,::String _yesTxt,::String _noTxt) {
	Prompt_obj *__this = (Prompt_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Prompt_obj), true, "states.editors.content.Prompt"));
	*(void **)__this = Prompt_obj::_hx_vtable;
	__this->__construct(title,yesFunction,noFunction,_yesTxt,_noTxt);
	return __this;
}

Prompt_obj::Prompt_obj()
{
}

void Prompt_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Prompt);
	HX_MARK_MEMBER_NAME(yesFunction,"yesFunction");
	HX_MARK_MEMBER_NAME(noFunction,"noFunction");
	HX_MARK_MEMBER_NAME(_yesTxt,"_yesTxt");
	HX_MARK_MEMBER_NAME(_noTxt,"_noTxt");
	 ::states::editors::content::BasePrompt_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Prompt_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(yesFunction,"yesFunction");
	HX_VISIT_MEMBER_NAME(noFunction,"noFunction");
	HX_VISIT_MEMBER_NAME(_yesTxt,"_yesTxt");
	HX_VISIT_MEMBER_NAME(_noTxt,"_noTxt");
	 ::states::editors::content::BasePrompt_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Prompt_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"close") ) { return ::hx::Val( close_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_noTxt") ) { return ::hx::Val( _noTxt ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_yesTxt") ) { return ::hx::Val( _yesTxt ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"noFunction") ) { return ::hx::Val( noFunction ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"yesFunction") ) { return ::hx::Val( yesFunction ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"promptCreate") ) { return ::hx::Val( promptCreate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Prompt_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_noTxt") ) { _noTxt=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_yesTxt") ) { _yesTxt=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"noFunction") ) { noFunction=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"yesFunction") ) { yesFunction=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Prompt_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_yesTxt",28,01,62,43));
	outFields->push(HX_("_noTxt",f0,eb,99,9b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Prompt_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Prompt_obj,yesFunction),HX_("yesFunction",5f,8f,f8,76)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Prompt_obj,noFunction),HX_("noFunction",79,70,b0,04)},
	{::hx::fsString,(int)offsetof(Prompt_obj,_yesTxt),HX_("_yesTxt",28,01,62,43)},
	{::hx::fsString,(int)offsetof(Prompt_obj,_noTxt),HX_("_noTxt",f0,eb,99,9b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Prompt_obj_sStaticStorageInfo = 0;
#endif

static ::String Prompt_obj_sMemberFields[] = {
	HX_("yesFunction",5f,8f,f8,76),
	HX_("noFunction",79,70,b0,04),
	HX_("_yesTxt",28,01,62,43),
	HX_("_noTxt",f0,eb,99,9b),
	HX_("promptCreate",c0,ff,4e,e6),
	HX_("close",b8,17,63,48),
	::String(null()) };

::hx::Class Prompt_obj::__mClass;

void Prompt_obj::__register()
{
	Prompt_obj _hx_dummy;
	Prompt_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.editors.content.Prompt",4d,13,46,8c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Prompt_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Prompt_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Prompt_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Prompt_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace editors
} // end namespace content
