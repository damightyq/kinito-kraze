// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_states_editors_content_BasePrompt
#include <states/editors/content/BasePrompt.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b26f98e3faf7c0c6_64_new,"states.editors.content.BasePrompt","new",0xdbf5b2b0,"states.editors.content.BasePrompt.new","states/editors/content/Prompt.hx",64,0x558b4a2e)
HX_LOCAL_STACK_FRAME(_hx_pos_b26f98e3faf7c0c6_85_create,"states.editors.content.BasePrompt","create",0x7227d6ac,"states.editors.content.BasePrompt.create","states/editors/content/Prompt.hx",85,0x558b4a2e)
HX_LOCAL_STACK_FRAME(_hx_pos_b26f98e3faf7c0c6_108_update,"states.editors.content.BasePrompt","update",0x7d1df5b9,"states.editors.content.BasePrompt.update","states/editors/content/Prompt.hx",108,0x558b4a2e)
HX_LOCAL_STACK_FRAME(_hx_pos_b26f98e3faf7c0c6_123_destroy,"states.editors.content.BasePrompt","destroy",0x83cf774a,"states.editors.content.BasePrompt.destroy","states/editors/content/Prompt.hx",123,0x558b4a2e)
namespace states{
namespace editors{
namespace content{

void BasePrompt_obj::__construct( ::Dynamic __o_sizeX, ::Dynamic __o_sizeY,::String title, ::Dynamic onCreate, ::Dynamic onUpdate){
            		 ::Dynamic sizeX = __o_sizeX;
            		if (::hx::IsNull(__o_sizeX)) sizeX = 420;
            		 ::Dynamic sizeY = __o_sizeY;
            		if (::hx::IsNull(__o_sizeY)) sizeY = 160;
            	HX_STACKFRAME(&_hx_pos_b26f98e3faf7c0c6_64_new)
HXLINE( 106)		this->_blockInput = ((Float)0.1);
HXLINE(  67)		this->_sizeY = ((Float)0);
HXLINE(  66)		this->_sizeX = ((Float)0);
HXLINE(  74)		this->_sizeX = ( (Float)(sizeX) );
HXLINE(  75)		this->_sizeY = ( (Float)(sizeY) );
HXLINE(  76)		this->_title = title;
HXLINE(  77)		this->onCreate = onCreate;
HXLINE(  78)		this->onUpdate = onUpdate;
HXLINE(  79)		super::__construct();
            	}

Dynamic BasePrompt_obj::__CreateEmpty() { return new BasePrompt_obj; }

void *BasePrompt_obj::_hx_vtable = 0;

Dynamic BasePrompt_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BasePrompt_obj > _hx_result = new BasePrompt_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool BasePrompt_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5661ffbf) {
		if (inClassId<=(int)0x4d35a1ca) {
			if (inClassId<=(int)0x3c0818b8) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x3c0818b8;
			} else {
				return inClassId==(int)0x4d35a1ca;
			}
		} else {
			return inClassId==(int)0x5661ffbf;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void BasePrompt_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_b26f98e3faf7c0c6_85_create)
HXLINE(  86)		this->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::flixel::FlxG_obj::cameras->list->__get((::flixel::FlxG_obj::cameras->list->length - 1)).StaticCast<  ::flixel::FlxCamera >()));
HXLINE(  87)		this->bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-16777216,null(),null());
HXLINE(  88)		this->bg->set_alpha(((Float)0.8));
HXLINE(  89)		{
HXLINE(  89)			 ::flixel::math::FlxBasePoint this1 = this->bg->scale;
HXDLIN(  89)			Float y = this->_sizeY;
HXDLIN(  89)			this1->set_x(this->_sizeX);
HXDLIN(  89)			this1->set_y(y);
            		}
HXLINE(  90)		this->bg->updateHitbox();
HXLINE(  91)		{
HXLINE(  91)			 ::flixel::FlxSprite _this = this->bg;
HXDLIN(  91)			int axes = 17;
HXDLIN(  91)			bool _hx_tmp;
HXDLIN(  91)			if ((axes != 1)) {
HXLINE(  91)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(  91)				_hx_tmp = true;
            			}
HXDLIN(  91)			if (_hx_tmp) {
HXLINE(  91)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  91)				_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  91)			bool _hx_tmp2;
HXDLIN(  91)			if ((axes != 16)) {
HXLINE(  91)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  91)				_hx_tmp2 = true;
            			}
HXDLIN(  91)			if (_hx_tmp2) {
HXLINE(  91)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  91)				_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  92)		 ::flixel::FlxSprite _hx_tmp4 = this->bg;
HXDLIN(  92)		_hx_tmp4->set_cameras(this->get_cameras());
HXLINE(  93)		this->add(this->bg);
HXLINE(  95)		this->titleText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,(this->bg->y + 30),400,this->_title,16,null());
HXLINE(  96)		{
HXLINE(  96)			 ::flixel::text::FlxText _this1 = this->titleText;
HXDLIN(  96)			int axes1 = 1;
HXDLIN(  96)			bool _hx_tmp5;
HXDLIN(  96)			if ((axes1 != 1)) {
HXLINE(  96)				_hx_tmp5 = (axes1 == 17);
            			}
            			else {
HXLINE(  96)				_hx_tmp5 = true;
            			}
HXDLIN(  96)			if (_hx_tmp5) {
HXLINE(  96)				int _hx_tmp6 = ::flixel::FlxG_obj::width;
HXDLIN(  96)				_this1->set_x(((( (Float)(_hx_tmp6) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  96)			bool _hx_tmp7;
HXDLIN(  96)			if ((axes1 != 16)) {
HXLINE(  96)				_hx_tmp7 = (axes1 == 17);
            			}
            			else {
HXLINE(  96)				_hx_tmp7 = true;
            			}
HXDLIN(  96)			if (_hx_tmp7) {
HXLINE(  96)				int _hx_tmp8 = ::flixel::FlxG_obj::height;
HXDLIN(  96)				_this1->set_y(((( (Float)(_hx_tmp8) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  97)		this->titleText->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  98)		 ::flixel::text::FlxText _hx_tmp9 = this->titleText;
HXDLIN(  98)		_hx_tmp9->set_cameras(this->get_cameras());
HXLINE(  99)		this->add(this->titleText);
HXLINE( 101)		if (::hx::IsNotNull( this->onCreate )) {
HXLINE( 102)			this->onCreate(::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 103)		this->super::create();
            	}


void BasePrompt_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_b26f98e3faf7c0c6_108_update)
HXLINE( 109)		this->super::update(elapsed);
HXLINE( 111)		this->_blockInput = ::Math_obj::max(( (Float)(0) ),(this->_blockInput - elapsed));
HXLINE( 112)		bool _hx_tmp;
HXDLIN( 112)		if ((this->_blockInput <= 0)) {
HXLINE( 112)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 112)			_hx_tmp = _this->keyManager->checkStatusUnsafe(27,_this->status);
            		}
            		else {
HXLINE( 112)			_hx_tmp = false;
            		}
HXDLIN( 112)		if (_hx_tmp) {
HXLINE( 114)			this->close();
HXLINE( 115)			return;
            		}
HXLINE( 118)		if (::hx::IsNotNull( this->onUpdate )) {
HXLINE( 119)			this->onUpdate(::hx::ObjectPtr<OBJ_>(this),elapsed);
            		}
            	}


void BasePrompt_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_b26f98e3faf7c0c6_123_destroy)
HXLINE( 124)		{
HXLINE( 124)			int _g = 0;
HXDLIN( 124)			::Array< ::Dynamic> _g1 = this->members;
HXDLIN( 124)			while((_g < _g1->length)){
HXLINE( 124)				 ::flixel::FlxBasic member = _g1->__get(_g).StaticCast<  ::flixel::FlxBasic >();
HXDLIN( 124)				_g = (_g + 1);
HXDLIN( 124)				::flixel::util::FlxDestroyUtil_obj::destroy(member);
            			}
            		}
HXLINE( 125)		this->super::destroy();
            	}



::hx::ObjectPtr< BasePrompt_obj > BasePrompt_obj::__new( ::Dynamic __o_sizeX, ::Dynamic __o_sizeY,::String title, ::Dynamic onCreate, ::Dynamic onUpdate) {
	::hx::ObjectPtr< BasePrompt_obj > __this = new BasePrompt_obj();
	__this->__construct(__o_sizeX,__o_sizeY,title,onCreate,onUpdate);
	return __this;
}

::hx::ObjectPtr< BasePrompt_obj > BasePrompt_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic __o_sizeX, ::Dynamic __o_sizeY,::String title, ::Dynamic onCreate, ::Dynamic onUpdate) {
	BasePrompt_obj *__this = (BasePrompt_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BasePrompt_obj), true, "states.editors.content.BasePrompt"));
	*(void **)__this = BasePrompt_obj::_hx_vtable;
	__this->__construct(__o_sizeX,__o_sizeY,title,onCreate,onUpdate);
	return __this;
}

BasePrompt_obj::BasePrompt_obj()
{
}

void BasePrompt_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BasePrompt);
	HX_MARK_MEMBER_NAME(_sizeX,"_sizeX");
	HX_MARK_MEMBER_NAME(_sizeY,"_sizeY");
	HX_MARK_MEMBER_NAME(_title,"_title");
	HX_MARK_MEMBER_NAME(onCreate,"onCreate");
	HX_MARK_MEMBER_NAME(onUpdate,"onUpdate");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(titleText,"titleText");
	HX_MARK_MEMBER_NAME(_blockInput,"_blockInput");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BasePrompt_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_sizeX,"_sizeX");
	HX_VISIT_MEMBER_NAME(_sizeY,"_sizeY");
	HX_VISIT_MEMBER_NAME(_title,"_title");
	HX_VISIT_MEMBER_NAME(onCreate,"onCreate");
	HX_VISIT_MEMBER_NAME(onUpdate,"onUpdate");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(titleText,"titleText");
	HX_VISIT_MEMBER_NAME(_blockInput,"_blockInput");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val BasePrompt_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_sizeX") ) { return ::hx::Val( _sizeX ); }
		if (HX_FIELD_EQ(inName,"_sizeY") ) { return ::hx::Val( _sizeY ); }
		if (HX_FIELD_EQ(inName,"_title") ) { return ::hx::Val( _title ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onCreate") ) { return ::hx::Val( onCreate ); }
		if (HX_FIELD_EQ(inName,"onUpdate") ) { return ::hx::Val( onUpdate ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"titleText") ) { return ::hx::Val( titleText ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_blockInput") ) { return ::hx::Val( _blockInput ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BasePrompt_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_sizeX") ) { _sizeX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_sizeY") ) { _sizeY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_title") ) { _title=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onCreate") ) { onCreate=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onUpdate") ) { onUpdate=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"titleText") ) { titleText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_blockInput") ) { _blockInput=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BasePrompt_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_sizeX",b8,4f,c0,78));
	outFields->push(HX_("_sizeY",b9,4f,c0,78));
	outFields->push(HX_("_title",d9,5c,22,0c));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("titleText",65,ba,a4,70));
	outFields->push(HX_("_blockInput",9c,34,0b,68));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BasePrompt_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(BasePrompt_obj,_sizeX),HX_("_sizeX",b8,4f,c0,78)},
	{::hx::fsFloat,(int)offsetof(BasePrompt_obj,_sizeY),HX_("_sizeY",b9,4f,c0,78)},
	{::hx::fsString,(int)offsetof(BasePrompt_obj,_title),HX_("_title",d9,5c,22,0c)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(BasePrompt_obj,onCreate),HX_("onCreate",7b,5d,bc,5b)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(BasePrompt_obj,onUpdate),HX_("onUpdate",88,7c,b2,66)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(BasePrompt_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(BasePrompt_obj,titleText),HX_("titleText",65,ba,a4,70)},
	{::hx::fsFloat,(int)offsetof(BasePrompt_obj,_blockInput),HX_("_blockInput",9c,34,0b,68)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BasePrompt_obj_sStaticStorageInfo = 0;
#endif

static ::String BasePrompt_obj_sMemberFields[] = {
	HX_("_sizeX",b8,4f,c0,78),
	HX_("_sizeY",b9,4f,c0,78),
	HX_("_title",d9,5c,22,0c),
	HX_("onCreate",7b,5d,bc,5b),
	HX_("onUpdate",88,7c,b2,66),
	HX_("bg",c5,55,00,00),
	HX_("titleText",65,ba,a4,70),
	HX_("create",fc,66,0f,7c),
	HX_("_blockInput",9c,34,0b,68),
	HX_("update",09,86,05,87),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

::hx::Class BasePrompt_obj::__mClass;

void BasePrompt_obj::__register()
{
	BasePrompt_obj _hx_dummy;
	BasePrompt_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.editors.content.BasePrompt",be,da,a2,83);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BasePrompt_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BasePrompt_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BasePrompt_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BasePrompt_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace editors
} // end namespace content
