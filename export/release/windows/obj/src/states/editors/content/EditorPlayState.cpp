// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Conductor
#include <backend/Conductor.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_CoolUtil
#include <backend/CoolUtil.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_Rating
#include <backend/Rating.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSort
#include <flixel/util/FlxSort.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_objects_Note
#include <objects/Note.h>
#endif
#ifndef INCLUDED_objects_NoteSplash
#include <objects/NoteSplash.h>
#endif
#ifndef INCLUDED_objects_StrumNote
#include <objects/StrumNote.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_states_editors_content_EditorPlayState
#include <states/editors/content/EditorPlayState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_94828a72d2e97540_16_new,"states.editors.content.EditorPlayState","new",0x3148b5b9,"states.editors.content.EditorPlayState.new","states/editors/content/EditorPlayState.hx",16,0xc0725b9a)
static const ::String _hx_array_data_7b036547_1[] = {
	HX_("note_left",b4,fe,20,a5),HX_("note_down",0f,ef,de,9f),HX_("note_up",c8,67,5c,4d),HX_("note_right",8f,ec,ca,4e),
};
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_86_create,"states.editors.content.EditorPlayState","create",0xf44b9f43,"states.editors.content.EditorPlayState.create","states/editors/content/EditorPlayState.hx",86,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_162_update,"states.editors.content.EditorPlayState","update",0xff41be50,"states.editors.content.EditorPlayState.update","states/editors/content/EditorPlayState.hx",162,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_210_update,"states.editors.content.EditorPlayState","update",0xff41be50,"states.editors.content.EditorPlayState.update","states/editors/content/EditorPlayState.hx",210,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_245_beatHit,"states.editors.content.EditorPlayState","beatHit",0x3079f056,"states.editors.content.EditorPlayState.beatHit","states/editors/content/EditorPlayState.hx",245,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_250_beatHit,"states.editors.content.EditorPlayState","beatHit",0x3079f056,"states.editors.content.EditorPlayState.beatHit","states/editors/content/EditorPlayState.hx",250,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_257_sectionHit,"states.editors.content.EditorPlayState","sectionHit",0x56f95d35,"states.editors.content.EditorPlayState.sectionHit","states/editors/content/EditorPlayState.hx",257,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_267_destroy,"states.editors.content.EditorPlayState","destroy",0xe0fb32d3,"states.editors.content.EditorPlayState.destroy","states/editors/content/EditorPlayState.hx",267,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_278_startSong,"states.editors.content.EditorPlayState","startSong",0x8d708b70,"states.editors.content.EditorPlayState.startSong","states/editors/content/EditorPlayState.hx",278,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_298_generateSong,"states.editors.content.EditorPlayState","generateSong",0xa6d61531,"states.editors.content.EditorPlayState.generateSong","states/editors/content/EditorPlayState.hx",298,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_444_generateStaticArrows,"states.editors.content.EditorPlayState","generateStaticArrows",0x8887cb34,"states.editors.content.EditorPlayState.generateStaticArrows","states/editors/content/EditorPlayState.hx",444,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_481_finishSong,"states.editors.content.EditorPlayState","finishSong",0x70be1d8f,"states.editors.content.EditorPlayState.finishSong","states/editors/content/EditorPlayState.hx",481,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_486_finishSong,"states.editors.content.EditorPlayState","finishSong",0x70be1d8f,"states.editors.content.EditorPlayState.finishSong","states/editors/content/EditorPlayState.hx",486,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_493_endSong,"states.editors.content.EditorPlayState","endSong",0xeaf1e329,"states.editors.content.EditorPlayState.endSong","states/editors/content/EditorPlayState.hx",493,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_492_endSong,"states.editors.content.EditorPlayState","endSong",0xeaf1e329,"states.editors.content.EditorPlayState.endSong","states/editors/content/EditorPlayState.hx",492,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_509_cachePopUpScore,"states.editors.content.EditorPlayState","cachePopUpScore",0x5db86d21,"states.editors.content.EditorPlayState.cachePopUpScore","states/editors/content/EditorPlayState.hx",509,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_646_popUpScore,"states.editors.content.EditorPlayState","popUpScore",0xd81e092d,"states.editors.content.EditorPlayState.popUpScore","states/editors/content/EditorPlayState.hx",646,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_521_popUpScore,"states.editors.content.EditorPlayState","popUpScore",0xd81e092d,"states.editors.content.EditorPlayState.popUpScore","states/editors/content/EditorPlayState.hx",521,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_631_popUpScore,"states.editors.content.EditorPlayState","popUpScore",0xd81e092d,"states.editors.content.EditorPlayState.popUpScore","states/editors/content/EditorPlayState.hx",631,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_655_onKeyPress,"states.editors.content.EditorPlayState","onKeyPress",0x82d4356a,"states.editors.content.EditorPlayState.onKeyPress","states/editors/content/EditorPlayState.hx",655,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_672_keyPressed,"states.editors.content.EditorPlayState","keyPressed",0x4099da8a,"states.editors.content.EditorPlayState.keyPressed","states/editors/content/EditorPlayState.hx",672,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_722_onKeyRelease,"states.editors.content.EditorPlayState","onKeyRelease",0x2762ef6e,"states.editors.content.EditorPlayState.onKeyRelease","states/editors/content/EditorPlayState.hx",722,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_731_keyReleased,"states.editors.content.EditorPlayState","keyReleased",0x4cdb6bd5,"states.editors.content.EditorPlayState.keyReleased","states/editors/content/EditorPlayState.hx",731,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_742_keysCheck,"states.editors.content.EditorPlayState","keysCheck",0xbf86804d,"states.editors.content.EditorPlayState.keysCheck","states/editors/content/EditorPlayState.hx",742,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_787_opponentNoteHit,"states.editors.content.EditorPlayState","opponentNoteHit",0xf0707c3d,"states.editors.content.EditorPlayState.opponentNoteHit","states/editors/content/EditorPlayState.hx",787,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_803_goodNoteHit,"states.editors.content.EditorPlayState","goodNoteHit",0xb093b41d,"states.editors.content.EditorPlayState.goodNoteHit","states/editors/content/EditorPlayState.hx",803,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_838_noteMiss,"states.editors.content.EditorPlayState","noteMiss",0x817f9015,"states.editors.content.EditorPlayState.noteMiss","states/editors/content/EditorPlayState.hx",838,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_835_noteMiss,"states.editors.content.EditorPlayState","noteMiss",0x817f9015,"states.editors.content.EditorPlayState.noteMiss","states/editors/content/EditorPlayState.hx",835,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_882_invalidateNote,"states.editors.content.EditorPlayState","invalidateNote",0xd2ff8e54,"states.editors.content.EditorPlayState.invalidateNote","states/editors/content/EditorPlayState.hx",882,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_889_spawnNoteSplashOnNote,"states.editors.content.EditorPlayState","spawnNoteSplashOnNote",0x44e1347e,"states.editors.content.EditorPlayState.spawnNoteSplashOnNote","states/editors/content/EditorPlayState.hx",889,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_896_spawnNoteSplash,"states.editors.content.EditorPlayState","spawnNoteSplash",0x09dc6fed,"states.editors.content.EditorPlayState.spawnNoteSplash","states/editors/content/EditorPlayState.hx",896,0xc0725b9a)
HX_LOCAL_STACK_FRAME(_hx_pos_94828a72d2e97540_904_updateScore,"states.editors.content.EditorPlayState","updateScore",0xec4142e2,"states.editors.content.EditorPlayState.updateScore","states/editors/content/EditorPlayState.hx",904,0xc0725b9a)
namespace states{
namespace editors{
namespace content{

void EditorPlayState_obj::__construct(::Array< ::Dynamic> noteList,::Array< ::Dynamic> allVocals){
            	HX_GC_STACKFRAME(&_hx_pos_94828a72d2e97540_16_new)
HXLINE( 243)		this->lastBeatHit = -1;
HXLINE(  66)		this->guitarHeroSustains = false;
HXLINE(  62)		this->timerToStart = ((Float)0);
HXLINE(  61)		this->startPos = ((Float)0);
HXLINE(  60)		this->startOffset = ((Float)0);
HXLINE(  57)		this->showRating = true;
HXLINE(  56)		this->showComboNum = true;
HXLINE(  55)		this->showCombo = false;
HXLINE(  53)		this->songSpeed = ((Float)1);
HXLINE(  52)		this->songLength = ((Float)0);
HXLINE(  51)		this->songMisses = 0;
HXLINE(  50)		this->songHits = 0;
HXLINE(  43)		this->keysArray = ::Array_obj< ::String >::fromData( _hx_array_data_7b036547_1,4);
HXLINE(  42)		this->lastScore = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  39)		this->combo = 0;
HXLINE(  31)		this->ratingsData = ::backend::Rating_obj::loadDefault();
HXLINE(  30)		this->unspawnNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  25)		this->inst =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXLINE(  24)		this->playbackRate = ((Float)1);
HXLINE(  22)		this->startingSong = true;
HXLINE(  21)		this->spawnTime = ((Float)2000);
HXLINE(  20)		this->noteKillOffset = ((Float)350);
HXLINE(  19)		this->finishTimer = null();
HXLINE(  71)		super::__construct();
HXLINE(  74)		this->vocals = allVocals->__get(0).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE(  75)		this->opponentVocals = allVocals->__get(1).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE(  76)		this->_noteList = noteList;
HXLINE(  77)		this->startPos = ::backend::Conductor_obj::songPosition;
HXLINE(  78)		::backend::Conductor_obj::songPosition = this->startPos;
HXLINE(  81)		this->playbackRate = ::flixel::FlxG_obj::sound->music->_pitch;
            	}

Dynamic EditorPlayState_obj::__CreateEmpty() { return new EditorPlayState_obj; }

void *EditorPlayState_obj::_hx_vtable = 0;

Dynamic EditorPlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EditorPlayState_obj > _hx_result = new EditorPlayState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool EditorPlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5661ffbf) {
		if (inClassId<=(int)0x3c0818b8) {
			if (inClassId<=(int)0x315c54d7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x315c54d7;
			} else {
				return inClassId==(int)0x3c0818b8;
			}
		} else {
			return inClassId==(int)0x5661ffbf;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void EditorPlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_94828a72d2e97540_86_create)
HXLINE(  87)		::backend::Conductor_obj::safeZoneOffset = (((::backend::ClientPrefs_obj::data->safeFrames / ( (Float)(60) )) * ( (Float)(1000) )) * this->playbackRate);
HXLINE(  88)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::backend::Conductor >();
HXDLIN(  88)		::backend::Conductor_obj::songPosition = (::backend::Conductor_obj::songPosition - this->startOffset);
HXLINE(  89)		this->startOffset = ::backend::Conductor_obj::crochet;
HXLINE(  90)		this->timerToStart = this->startOffset;
HXLINE(  92)		this->cachePopUpScore();
HXLINE(  93)		this->guitarHeroSustains = ::backend::ClientPrefs_obj::data->guitarHeroSustains;
HXLINE(  94)		if ((::backend::ClientPrefs_obj::data->hitsoundVolume > 0)) {
HXLINE(  94)			::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("hitsound",9c,79,fe,2c)),null(),true,null());
            		}
HXLINE(  97)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  97)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::backend::Paths_obj::image(HX_("menuDesat",26,91,04,72),null(),null()),null(),null(),null(),null(),null());
HXLINE(  98)		bg1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  99)		{
HXLINE(  99)			 ::flixel::math::FlxBasePoint this1 = bg1->scrollFactor;
HXDLIN(  99)			this1->set_x(( (Float)(0) ));
HXDLIN(  99)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 100)		bg1->set_color(-15724528);
HXLINE( 101)		bg1->set_alpha(((Float)0.9));
HXLINE( 102)		this->add(bg1);
HXLINE( 105)		this->comboGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 106)		this->add(this->comboGroup);
HXLINE( 107)		this->strumLineNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 108)		this->add(this->strumLineNotes);
HXLINE( 109)		this->grpNoteSplashes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 110)		this->add(this->grpNoteSplashes);
HXLINE( 112)		 ::objects::NoteSplash splash =  ::objects::NoteSplash_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 113)		this->grpNoteSplashes->add(splash).StaticCast<  ::objects::NoteSplash >();
HXLINE( 114)		splash->set_alpha(((Float)0.000001));
HXLINE( 116)		this->opponentStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 117)		this->playerStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 119)		this->generateStaticArrows(0);
HXLINE( 120)		this->generateStaticArrows(1);
HXLINE( 123)		this->scoreTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,(::flixel::FlxG_obj::height - 50),(::flixel::FlxG_obj::width - 20),HX_("",00,00,00,00),20,null());
HXLINE( 124)		 ::flixel::text::FlxText _hx_tmp1 = this->scoreTxt;
HXDLIN( 124)		::String key = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 124)		::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN( 124)		::String str = ( ( ::haxe::ds::StringMap)(this2) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXDLIN( 124)		if (::hx::IsNotNull( str )) {
HXLINE( 124)			key = str;
            		}
HXDLIN( 124)		::String folderKey = key;
HXDLIN( 124)		::String file = ::backend::Paths_obj::modFolders(folderKey);
HXDLIN( 124)		::String _hx_tmp2;
HXDLIN( 124)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 124)			_hx_tmp2 = file;
            		}
            		else {
HXLINE( 124)			_hx_tmp2 = (HX_("assets/",4c,2a,dc,36) + folderKey);
            		}
HXDLIN( 124)		_hx_tmp1->setFormat(_hx_tmp2,20,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 125)		{
HXLINE( 125)			 ::flixel::math::FlxBasePoint this3 = this->scoreTxt->scrollFactor;
HXDLIN( 125)			this3->set_x(( (Float)(0) ));
HXDLIN( 125)			this3->set_y(( (Float)(0) ));
            		}
HXLINE( 126)		this->scoreTxt->set_borderSize(((Float)1.25));
HXLINE( 127)		this->scoreTxt->set_visible(!(::backend::ClientPrefs_obj::data->hideHud));
HXLINE( 128)		this->add(this->scoreTxt);
HXLINE( 130)		this->dataTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,580,(::flixel::FlxG_obj::width - 20),HX_("Section: 0",25,1a,74,b5),20,null());
HXLINE( 131)		 ::flixel::text::FlxText _hx_tmp3 = this->dataTxt;
HXDLIN( 131)		::String key1 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 131)		::Dynamic this4 = ::backend::Language_obj::phrases;
HXDLIN( 131)		::String str1 = ( ( ::haxe::ds::StringMap)(this4) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN( 131)		if (::hx::IsNotNull( str1 )) {
HXLINE( 131)			key1 = str1;
            		}
HXDLIN( 131)		::String folderKey1 = key1;
HXDLIN( 131)		::String file1 = ::backend::Paths_obj::modFolders(folderKey1);
HXDLIN( 131)		::String _hx_tmp4;
HXDLIN( 131)		if (::sys::FileSystem_obj::exists(file1)) {
HXLINE( 131)			_hx_tmp4 = file1;
            		}
            		else {
HXLINE( 131)			_hx_tmp4 = (HX_("assets/",4c,2a,dc,36) + folderKey1);
            		}
HXDLIN( 131)		_hx_tmp3->setFormat(_hx_tmp4,20,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 132)		{
HXLINE( 132)			 ::flixel::math::FlxBasePoint this5 = this->dataTxt->scrollFactor;
HXDLIN( 132)			this5->set_x(( (Float)(0) ));
HXDLIN( 132)			this5->set_y(( (Float)(0) ));
            		}
HXLINE( 133)		this->dataTxt->set_borderSize(((Float)1.25));
HXLINE( 134)		this->add(this->dataTxt);
HXLINE( 136)		 ::flixel::text::FlxText tipText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,(::flixel::FlxG_obj::height - 24),0,HX_("Press ESC to Go Back to Chart Editor",56,a4,78,84),16,null());
HXLINE( 137)		::String key2 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 137)		::Dynamic this6 = ::backend::Language_obj::phrases;
HXDLIN( 137)		::String str2 = ( ( ::haxe::ds::StringMap)(this6) )->get_string(::StringTools_obj::trim(key2).toLowerCase());
HXDLIN( 137)		if (::hx::IsNotNull( str2 )) {
HXLINE( 137)			key2 = str2;
            		}
HXDLIN( 137)		::String folderKey2 = key2;
HXDLIN( 137)		::String file2 = ::backend::Paths_obj::modFolders(folderKey2);
HXDLIN( 137)		::String _hx_tmp5;
HXDLIN( 137)		if (::sys::FileSystem_obj::exists(file2)) {
HXLINE( 137)			_hx_tmp5 = file2;
            		}
            		else {
HXLINE( 137)			_hx_tmp5 = (HX_("assets/",4c,2a,dc,36) + folderKey2);
            		}
HXDLIN( 137)		tipText->setFormat(_hx_tmp5,16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 138)		tipText->set_borderSize(( (Float)(2) ));
HXLINE( 139)		{
HXLINE( 139)			 ::flixel::math::FlxBasePoint this7 = tipText->scrollFactor;
HXDLIN( 139)			this7->set_x(( (Float)(0) ));
HXDLIN( 139)			this7->set_y(( (Float)(0) ));
            		}
HXLINE( 140)		this->add(tipText);
HXLINE( 141)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 143)		this->generateSong();
HXLINE( 144)		this->_noteList = null();
HXLINE( 146)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyPress_dyn(),null(),null(),null());
HXLINE( 147)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->onKeyRelease_dyn(),null(),null(),null());
HXLINE( 151)		::backend::DiscordClient_obj::changePresence(HX_("Playtesting on Chart Editor",ac,6c,73,1c),( (::String)(::states::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),null(),true,this->songLength,null());
HXLINE( 153)		this->updateScore();
HXLINE( 154)		this->cachePopUpScore();
HXLINE( 156)		this->super::create();
HXLINE( 158)		this->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::flixel::FlxG_obj::cameras->list->__get((::flixel::FlxG_obj::cameras->list->length - 1)).StaticCast<  ::flixel::FlxCamera >()));
            	}


void EditorPlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_94828a72d2e97540_162_update)
HXDLIN( 162)		 ::states::editors::content::EditorPlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 163)		bool _hx_tmp;
HXDLIN( 163)		bool _hx_tmp1;
HXDLIN( 163)		if (!(::backend::Controls_obj::instance->get_BACK())) {
HXLINE( 163)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 163)			_hx_tmp1 = _this->keyManager->checkStatusUnsafe(27,_this->status);
            		}
            		else {
HXLINE( 163)			_hx_tmp1 = true;
            		}
HXDLIN( 163)		if (!(_hx_tmp1)) {
HXLINE( 163)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 163)			_hx_tmp = _this1->keyManager->checkStatusUnsafe(123,_this1->status);
            		}
            		else {
HXLINE( 163)			_hx_tmp = true;
            		}
HXDLIN( 163)		if (_hx_tmp) {
HXLINE( 165)			this->endSong();
HXLINE( 166)			this->super::update(elapsed);
HXLINE( 167)			return;
            		}
HXLINE( 170)		if (this->startingSong) {
HXLINE( 172)			 ::states::editors::content::EditorPlayState _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 172)			_hx_tmp2->timerToStart = (_hx_tmp2->timerToStart - (elapsed * ( (Float)(1000) )));
HXLINE( 173)			::backend::Conductor_obj::songPosition = (this->startPos - this->timerToStart);
HXLINE( 174)			if ((this->timerToStart < 0)) {
HXLINE( 174)				this->startSong();
            			}
            		}
            		else {
HXLINE( 178)			 ::Dynamic _hx_tmp3 = ::hx::ClassOf< ::backend::Conductor >();
HXDLIN( 178)			::backend::Conductor_obj::songPosition = (::backend::Conductor_obj::songPosition + ((elapsed * ( (Float)(1000) )) * this->playbackRate));
HXLINE( 179)			if ((::backend::Conductor_obj::songPosition >= 0)) {
HXLINE( 181)				Float timeDiff = ::Math_obj::abs(((this->inst->_time + ::backend::Conductor_obj::offset) - ::backend::Conductor_obj::songPosition));
HXLINE( 182)				Float a = (this->inst->_time + ::backend::Conductor_obj::offset);
HXDLIN( 182)				::backend::Conductor_obj::songPosition = (a + (::Math_obj::exp((-(elapsed) * ((Float)2.5))) * (::backend::Conductor_obj::songPosition - a)));
HXLINE( 183)				if ((timeDiff > (( (Float)(1000) ) * this->playbackRate))) {
HXLINE( 184)					int _hx_tmp4;
HXDLIN( 184)					if ((timeDiff < 0)) {
HXLINE( 184)						_hx_tmp4 = -1;
            					}
            					else {
HXLINE( 184)						_hx_tmp4 = 1;
            					}
HXDLIN( 184)					::backend::Conductor_obj::songPosition = (::backend::Conductor_obj::songPosition + (1000 * _hx_tmp4));
            				}
            			}
            		}
HXLINE( 188)		if (::hx::IsNotNull( this->unspawnNotes->__get(0).StaticCast<  ::objects::Note >() )) {
HXLINE( 190)			Float time = (this->spawnTime * this->playbackRate);
HXLINE( 191)			if ((this->songSpeed < 1)) {
HXLINE( 191)				time = (time / this->songSpeed);
            			}
HXLINE( 192)			if ((this->unspawnNotes->__get(0).StaticCast<  ::objects::Note >()->multSpeed < 1)) {
HXLINE( 192)				time = (time / this->unspawnNotes->__get(0).StaticCast<  ::objects::Note >()->multSpeed);
            			}
HXLINE( 194)			while(true){
HXLINE( 194)				bool _hx_tmp5;
HXDLIN( 194)				if ((this->unspawnNotes->length > 0)) {
HXLINE( 194)					_hx_tmp5 = ((this->unspawnNotes->__get(0).StaticCast<  ::objects::Note >()->strumTime - ::backend::Conductor_obj::songPosition) < time);
            				}
            				else {
HXLINE( 194)					_hx_tmp5 = false;
            				}
HXDLIN( 194)				if (!(_hx_tmp5)) {
HXLINE( 194)					goto _hx_goto_3;
            				}
HXLINE( 196)				 ::objects::Note dunceNote = this->unspawnNotes->__get(0).StaticCast<  ::objects::Note >();
HXLINE( 197)				this->notes->insert(0,dunceNote).StaticCast<  ::objects::Note >();
HXLINE( 198)				dunceNote->spawned = true;
HXLINE( 200)				int index = this->unspawnNotes->indexOf(dunceNote,null());
HXLINE( 201)				this->unspawnNotes->removeRange(index,1);
            			}
            			_hx_goto_3:;
            		}
HXLINE( 205)		this->keysCheck();
HXLINE( 206)		if ((this->notes->length > 0)) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,Float,fakeCrochet, ::states::editors::content::EditorPlayState,_gthis) HXARGC(1)
            			void _hx_run( ::objects::Note daNote){
            				HX_STACKFRAME(&_hx_pos_94828a72d2e97540_210_update)
HXLINE( 211)				 ::flixel::group::FlxTypedGroup strumGroup = _gthis->playerStrums;
HXLINE( 212)				if (!(daNote->mustPress)) {
HXLINE( 212)					strumGroup = _gthis->opponentStrums;
            				}
HXLINE( 214)				 ::objects::StrumNote strum = Dynamic( strumGroup->members->__get(daNote->noteData)).StaticCast<  ::objects::StrumNote >();
HXLINE( 215)				daNote->followStrumNote(strum,fakeCrochet,(_gthis->songSpeed / _gthis->playbackRate));
HXLINE( 217)				bool _hx_tmp;
HXDLIN( 217)				bool _hx_tmp1;
HXDLIN( 217)				bool _hx_tmp2;
HXDLIN( 217)				if (!(daNote->mustPress)) {
HXLINE( 217)					_hx_tmp2 = daNote->wasGoodHit;
            				}
            				else {
HXLINE( 217)					_hx_tmp2 = false;
            				}
HXDLIN( 217)				if (_hx_tmp2) {
HXLINE( 217)					_hx_tmp1 = !(daNote->hitByOpponent);
            				}
            				else {
HXLINE( 217)					_hx_tmp1 = false;
            				}
HXDLIN( 217)				if (_hx_tmp1) {
HXLINE( 217)					_hx_tmp = !(daNote->ignoreNote);
            				}
            				else {
HXLINE( 217)					_hx_tmp = false;
            				}
HXDLIN( 217)				if (_hx_tmp) {
HXLINE( 218)					_gthis->opponentNoteHit(daNote);
            				}
HXLINE( 220)				bool _hx_tmp3;
HXDLIN( 220)				if (daNote->isSustainNote) {
HXLINE( 220)					_hx_tmp3 = strum->sustainReduce;
            				}
            				else {
HXLINE( 220)					_hx_tmp3 = false;
            				}
HXDLIN( 220)				if (_hx_tmp3) {
HXLINE( 220)					daNote->clipToStrumNote(strum);
            				}
HXLINE( 223)				if (((::backend::Conductor_obj::songPosition - daNote->strumTime) > _gthis->noteKillOffset)) {
HXLINE( 225)					bool _hx_tmp4;
HXDLIN( 225)					bool _hx_tmp5;
HXDLIN( 225)					if (daNote->mustPress) {
HXLINE( 225)						_hx_tmp5 = !(daNote->ignoreNote);
            					}
            					else {
HXLINE( 225)						_hx_tmp5 = false;
            					}
HXDLIN( 225)					if (_hx_tmp5) {
HXLINE( 225)						if (!(daNote->tooLate)) {
HXLINE( 225)							_hx_tmp4 = !(daNote->wasGoodHit);
            						}
            						else {
HXLINE( 225)							_hx_tmp4 = true;
            						}
            					}
            					else {
HXLINE( 225)						_hx_tmp4 = false;
            					}
HXDLIN( 225)					if (_hx_tmp4) {
HXLINE( 226)						_gthis->noteMiss(daNote);
            					}
HXLINE( 228)					daNote->set_active(daNote->set_visible(false));
HXLINE( 229)					_gthis->invalidateNote(daNote);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 208)			Float fakeCrochet = ((( (Float)(60) ) / ( (Float)(::states::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) )) * ( (Float)(1000) ));
HXLINE( 209)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(fakeCrochet,_gthis)),null());
            		}
HXLINE( 234)		Float time1 = ::backend::CoolUtil_obj::floorDecimal(((::backend::Conductor_obj::songPosition - ( (Float)(::backend::ClientPrefs_obj::data->noteOffset) )) / ( (Float)(1000) )),1);
HXLINE( 235)		Float songLen = ::backend::CoolUtil_obj::floorDecimal((this->songLength / ( (Float)(1000) )),1);
HXLINE( 236)		this->dataTxt->set_text(((((((HX_("Time: ",13,50,66,53) + time1) + HX_(" / ",31,71,18,00)) + songLen) + (HX_("\n\nSection: ",eb,fa,bc,b5) + this->curSection)) + (HX_("\nBeat: ",46,f5,52,6b) + this->curBeat)) + (HX_("\nStep: ",9c,9c,08,dd) + this->curStep)));
HXLINE( 240)		this->super::update(elapsed);
            	}


void EditorPlayState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_94828a72d2e97540_245_beatHit)
HXLINE( 246)		if ((this->lastBeatHit >= this->curBeat)) {
HXLINE( 248)			return;
            		}
HXLINE( 250)		{
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,int,a1, ::Dynamic,_g) HXARGC(2)
            			int _hx_run( ::objects::Note a2, ::objects::Note a3){
            				HX_STACKFRAME(&_hx_pos_94828a72d2e97540_250_beatHit)
HXLINE( 250)				return ( (int)(_g(a1,a2,a3)) );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 250)			int order;
HXDLIN( 250)			if (::backend::ClientPrefs_obj::data->downScroll) {
HXLINE( 250)				order = -1;
            			}
            			else {
HXLINE( 250)				order = 1;
            			}
HXDLIN( 250)			 ::Dynamic _g = ::flixel::util::FlxSort_obj::byY_dyn();
HXDLIN( 250)			int a1 = order;
HXDLIN( 250)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(a1,_g));
HXDLIN( 250)			this->notes->members->sort(_hx_tmp);
            		}
HXLINE( 252)		this->super::beatHit();
HXLINE( 253)		this->lastBeatHit = this->curBeat;
            	}


void EditorPlayState_obj::sectionHit(){
            	HX_STACKFRAME(&_hx_pos_94828a72d2e97540_257_sectionHit)
HXLINE( 258)		if (::hx::IsNotNull(  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection) )) {
HXLINE( 260)			if (( (bool)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE( 261)				::backend::Conductor_obj::set_bpm(( (Float)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
            			}
            		}
HXLINE( 263)		this->super::sectionHit();
            	}


void EditorPlayState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_94828a72d2e97540_267_destroy)
HXLINE( 268)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyPress_dyn(),null());
HXLINE( 269)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->onKeyRelease_dyn(),null());
HXLINE( 270)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 271)		::objects::NoteSplash_obj::configs->clear();
HXLINE( 272)		::flixel::FlxG_obj::sound->list->remove(this->inst,null()).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE( 273)		::flixel::util::FlxDestroyUtil_obj::destroy(this->inst);
HXLINE( 274)		this->super::destroy();
            	}


void EditorPlayState_obj::startSong(){
            	HX_STACKFRAME(&_hx_pos_94828a72d2e97540_278_startSong)
HXLINE( 279)		this->startingSong = false;
HXLINE( 280)		this->inst->loadEmbedded(::flixel::FlxG_obj::sound->music->_sound,null(),null(),null());
HXLINE( 281)		this->inst->looped = false;
HXLINE( 282)		this->inst->onComplete = this->finishSong_dyn();
HXLINE( 283)		 ::flixel::sound::FlxSound _hx_tmp = this->inst;
HXDLIN( 283)		 ::flixel::sound::FlxSound _hx_tmp1 = this->vocals;
HXDLIN( 283)		_hx_tmp->set_volume(_hx_tmp1->set_volume(this->opponentVocals->set_volume(( (Float)(1) ))));
HXLINE( 284)		::flixel::FlxG_obj::sound->list->add(this->inst).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE( 286)		::flixel::FlxG_obj::sound->music->pause();
HXLINE( 287)		this->inst->play(null(),null(),null());
HXLINE( 288)		this->vocals->play(null(),null(),null());
HXLINE( 289)		this->opponentVocals->play(null(),null(),null());
HXLINE( 290)		 ::flixel::sound::FlxSound _hx_tmp2 = this->inst;
HXDLIN( 290)		 ::flixel::sound::FlxSound _hx_tmp3 = this->vocals;
HXDLIN( 290)		_hx_tmp2->set_time(_hx_tmp3->set_time(this->opponentVocals->set_time((this->startPos - ::backend::Conductor_obj::offset))));
HXLINE( 293)		this->songLength = this->inst->_length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(EditorPlayState_obj,startSong,(void))

void EditorPlayState_obj::generateSong(){
            	HX_GC_STACKFRAME(&_hx_pos_94828a72d2e97540_298_generateSong)
HXLINE( 300)		this->songSpeed = ( (Float)(::states::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
HXLINE( 301)		 ::Dynamic defaultValue = null();
HXDLIN( 301)		defaultValue = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("scrolltype",47,55,ef,1f));
HXDLIN( 301)		::String songSpeedType;
HXDLIN( 301)		if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("scrolltype",47,55,ef,1f))) {
HXLINE( 301)			songSpeedType = ::backend::ClientPrefs_obj::data->gameplaySettings->get_string(HX_("scrolltype",47,55,ef,1f));
            		}
            		else {
HXLINE( 301)			songSpeedType = ( (::String)(defaultValue) );
            		}
HXLINE( 302)		::String _hx_switch_0 = songSpeedType;
            		if (  (_hx_switch_0==HX_("constant",64,c1,9d,a5)) ){
HXLINE( 307)			 ::Dynamic defaultValue1 = null();
HXDLIN( 307)			defaultValue1 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
HXDLIN( 307)			 ::Dynamic _hx_tmp;
HXDLIN( 307)			if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("scrollspeed",5a,70,19,38))) {
HXLINE( 307)				_hx_tmp = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
            			}
            			else {
HXLINE( 307)				_hx_tmp = defaultValue1;
            			}
HXDLIN( 307)			this->songSpeed = ( (Float)(_hx_tmp) );
HXDLIN( 307)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==HX_("multiplicative",96,7a,3f,fa)) ){
HXLINE( 305)			Float _hx_tmp1 = ( (Float)(::states::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
HXDLIN( 305)			 ::Dynamic defaultValue2 = null();
HXDLIN( 305)			defaultValue2 = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
HXDLIN( 305)			 ::Dynamic _hx_tmp2;
HXDLIN( 305)			if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(HX_("scrollspeed",5a,70,19,38))) {
HXLINE( 305)				_hx_tmp2 = ::backend::ClientPrefs_obj::data->gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
            			}
            			else {
HXLINE( 305)				_hx_tmp2 = defaultValue2;
            			}
HXDLIN( 305)			this->songSpeed = (_hx_tmp1 * ( (Float)(_hx_tmp2) ));
HXDLIN( 305)			goto _hx_goto_11;
            		}
            		_hx_goto_11:;
HXLINE( 309)		this->noteKillOffset = ::Math_obj::max(::backend::Conductor_obj::stepCrochet,((( (Float)(350) ) / this->songSpeed) * this->playbackRate));
HXLINE( 311)		 ::Dynamic songData = ::states::PlayState_obj::SONG;
HXLINE( 312)		::backend::Conductor_obj::set_bpm(( (Float)(songData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE( 314)		 ::flixel::sound::FlxSound _hx_tmp3 = this->inst;
HXDLIN( 314)		 ::flixel::sound::FlxSound _hx_tmp4 = this->vocals;
HXDLIN( 314)		_hx_tmp3->set_volume(_hx_tmp4->set_volume(this->opponentVocals->set_volume(( (Float)(0) ))));
HXLINE( 316)		this->notes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 317)		this->add(this->notes);
HXLINE( 319)		Float daBpm;
HXDLIN( 319)		if (::hx::IsEq(  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(0)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic),true )) {
HXLINE( 319)			daBpm = ( (Float)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(0)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 319)			daBpm = ( (Float)(::states::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            		}
HXLINE( 320)		 ::objects::Note oldNote = null();
HXLINE( 323)		int noteSec = 0;
HXLINE( 324)		Float secTime = ( (Float)(0) );
HXLINE( 325)		::Array< Float > cachedSectionTimes = ::Array_obj< Float >::__new(0);
HXLINE( 327)		if (::hx::IsNotNull( ::states::PlayState_obj::SONG )) {
HXLINE( 329)			Float tempBpm = daBpm;
HXLINE( 330)			{
HXLINE( 330)				int _g_current = 0;
HXDLIN( 330)				::Array< ::Dynamic> _g_array = ( (::Array< ::Dynamic>)(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN( 330)				while((_g_current < _g_array->length)){
HXLINE( 330)					 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN( 330)					_g_current = (_g_current + 1);
HXDLIN( 330)					int _g_key = (_g_current - 1);
HXDLIN( 330)					int secNum = _g_key;
HXDLIN( 330)					 ::Dynamic section = _g_value;
HXLINE( 331)					{
HXLINE( 332)						if (::hx::IsEq(  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(noteSec)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic),true )) {
HXLINE( 333)							tempBpm = ( (Float)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(noteSec)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            						}
HXLINE( 335)						secTime = (secTime + (((( (Float)(60) ) / tempBpm) * ( (Float)(1000) )) * (( (Float)(::Math_obj::round((( (Float)(4) ) * ( (Float)(section->__Field(HX_("sectionBeats",18,52,2e,0f),::hx::paccDynamic)) )))) ) / ( (Float)(4) ))));
HXLINE( 336)						cachedSectionTimes->push(secTime);
            					}
            				}
            			}
            		}
HXLINE( 341)		{
HXLINE( 341)			int _g = 0;
HXDLIN( 341)			::Array< ::Dynamic> _g1 = this->_noteList;
HXDLIN( 341)			while((_g < _g1->length)){
HXLINE( 341)				 ::objects::Note note = _g1->__get(_g).StaticCast<  ::objects::Note >();
HXDLIN( 341)				_g = (_g + 1);
HXLINE( 343)				bool _hx_tmp5;
HXDLIN( 343)				if (::hx::IsNotNull( note )) {
HXLINE( 343)					_hx_tmp5 = (note->strumTime < this->startPos);
            				}
            				else {
HXLINE( 343)					_hx_tmp5 = true;
            				}
HXDLIN( 343)				if (_hx_tmp5) {
HXLINE( 343)					continue;
            				}
HXLINE( 345)				while(true){
HXLINE( 345)					bool _hx_tmp6;
HXDLIN( 345)					if ((cachedSectionTimes->length > (noteSec + 1))) {
HXLINE( 345)						_hx_tmp6 = (cachedSectionTimes->__get((noteSec + 1)) <= note->strumTime);
            					}
            					else {
HXLINE( 345)						_hx_tmp6 = false;
            					}
HXDLIN( 345)					if (!(_hx_tmp6)) {
HXLINE( 345)						goto _hx_goto_14;
            					}
HXLINE( 347)					noteSec = (noteSec + 1);
HXLINE( 348)					if (::hx::IsEq(  ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(noteSec)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic),true )) {
HXLINE( 349)						daBpm = ( (Float)( ::Dynamic(::states::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(noteSec)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            					}
            				}
            				_hx_goto_14:;
HXLINE( 352)				int idx = this->_noteList->indexOf(note,null());
HXLINE( 353)				if ((idx != 0)) {
HXLINE( 355)					int _g2 = 0;
HXDLIN( 355)					::Array< ::Dynamic> _g3 = this->unspawnNotes;
HXDLIN( 355)					while((_g2 < _g3->length)){
HXLINE( 355)						 ::objects::Note evilNote = _g3->__get(_g2).StaticCast<  ::objects::Note >();
HXDLIN( 355)						_g2 = (_g2 + 1);
HXLINE( 356)						bool matches;
HXDLIN( 356)						bool matches1;
HXDLIN( 356)						if ((note->noteData == evilNote->noteData)) {
HXLINE( 356)							matches1 = (note->mustPress == evilNote->mustPress);
            						}
            						else {
HXLINE( 356)							matches1 = false;
            						}
HXDLIN( 356)						if (matches1) {
HXLINE( 356)							matches = (note->noteType == evilNote->noteType);
            						}
            						else {
HXLINE( 356)							matches = false;
            						}
HXLINE( 357)						bool _hx_tmp7;
HXDLIN( 357)						if (matches) {
HXLINE( 357)							_hx_tmp7 = (::Math_obj::abs((note->strumTime - evilNote->strumTime)) < ((Float)0.0000001));
            						}
            						else {
HXLINE( 357)							_hx_tmp7 = false;
            						}
HXDLIN( 357)						if (_hx_tmp7) {
HXLINE( 358)							if ((evilNote->tail->length > 0)) {
HXLINE( 359)								int _g4 = 0;
HXDLIN( 359)								::Array< ::Dynamic> _g5 = evilNote->tail;
HXDLIN( 359)								while((_g4 < _g5->length)){
HXLINE( 359)									 ::objects::Note tail = _g5->__get(_g4).StaticCast<  ::objects::Note >();
HXDLIN( 359)									_g4 = (_g4 + 1);
HXLINE( 361)									tail->destroy();
HXLINE( 362)									this->unspawnNotes->remove(tail);
            								}
            							}
HXLINE( 364)							evilNote->destroy();
HXLINE( 365)							this->unspawnNotes->remove(evilNote);
            						}
            					}
            				}
HXLINE( 371)				 ::objects::Note swagNote =  ::objects::Note_obj::__alloc( HX_CTX ,note->strumTime,note->noteData,oldNote,false,null(),::hx::ObjectPtr<OBJ_>(this));
HXLINE( 372)				swagNote->mustPress = note->mustPress;
HXLINE( 373)				swagNote->sustainLength = note->sustainLength;
HXLINE( 374)				swagNote->gfNote = note->gfNote;
HXLINE( 375)				swagNote->set_noteType(note->noteType);
HXLINE( 377)				{
HXLINE( 377)					 ::flixel::math::FlxBasePoint this1 = swagNote->scrollFactor;
HXDLIN( 377)					this1->set_x(( (Float)(0) ));
HXDLIN( 377)					this1->set_y(( (Float)(0) ));
            				}
HXLINE( 378)				this->unspawnNotes->push(swagNote);
HXLINE( 380)				Float curStepCrochet = (((( (Float)(60) ) / daBpm) * ( (Float)(1000) )) / ((Float)4.0));
HXLINE( 381)				int roundSus = ::Math_obj::round((swagNote->sustainLength / ::backend::Conductor_obj::stepCrochet));
HXLINE( 382)				if ((roundSus > 0)) {
HXLINE( 384)					int _g6 = 0;
HXDLIN( 384)					int _g7 = roundSus;
HXDLIN( 384)					while((_g6 < _g7)){
HXLINE( 384)						_g6 = (_g6 + 1);
HXDLIN( 384)						int susNote = (_g6 - 1);
HXLINE( 386)						oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::objects::Note >();
HXLINE( 388)						 ::objects::Note sustainNote =  ::objects::Note_obj::__alloc( HX_CTX ,(swagNote->strumTime + (curStepCrochet * ( (Float)(susNote) ))),note->noteData,oldNote,true,null(),::hx::ObjectPtr<OBJ_>(this));
HXLINE( 389)						sustainNote->mustPress = swagNote->mustPress;
HXLINE( 390)						sustainNote->gfNote = swagNote->gfNote;
HXLINE( 391)						sustainNote->set_noteType(swagNote->noteType);
HXLINE( 392)						{
HXLINE( 392)							 ::flixel::math::FlxBasePoint this2 = sustainNote->scrollFactor;
HXDLIN( 392)							this2->set_x(( (Float)(0) ));
HXDLIN( 392)							this2->set_y(( (Float)(0) ));
            						}
HXLINE( 393)						sustainNote->parent = swagNote;
HXLINE( 394)						this->unspawnNotes->push(sustainNote);
HXLINE( 395)						swagNote->tail->push(sustainNote);
HXLINE( 397)						sustainNote->correctionOffset = (swagNote->get_height() / ( (Float)(2) ));
HXLINE( 398)						if (!(::states::PlayState_obj::get_isPixelStage())) {
HXLINE( 400)							if (oldNote->isSustainNote) {
HXLINE( 402)								oldNote->scale->set_y((oldNote->scale->y * (( (Float)(::objects::Note_obj::SUSTAIN_SIZE) ) / ( (Float)(oldNote->frameHeight) ))));
HXLINE( 403)								oldNote->scale->set_y((oldNote->scale->y / this->playbackRate));
HXLINE( 404)								oldNote->resizeByRatio((curStepCrochet / ::backend::Conductor_obj::stepCrochet));
            							}
HXLINE( 407)							if (::backend::ClientPrefs_obj::data->downScroll) {
HXLINE( 408)								sustainNote->correctionOffset = ( (Float)(0) );
            							}
            						}
            						else {
HXLINE( 410)							if (oldNote->isSustainNote) {
HXLINE( 412)								oldNote->scale->set_y((oldNote->scale->y / this->playbackRate));
HXLINE( 413)								oldNote->resizeByRatio((curStepCrochet / ::backend::Conductor_obj::stepCrochet));
            							}
            						}
HXLINE( 416)						if (sustainNote->mustPress) {
HXLINE( 416)							sustainNote->set_x((sustainNote->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            						}
            						else {
HXLINE( 417)							if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE( 419)								sustainNote->set_x((sustainNote->x + 310));
HXLINE( 420)								if ((sustainNote->noteData > 1)) {
HXLINE( 421)									sustainNote->set_x((sustainNote->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 25)));
            								}
            							}
            						}
            					}
            				}
HXLINE( 426)				if (swagNote->mustPress) {
HXLINE( 428)					swagNote->set_x((swagNote->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            				}
            				else {
HXLINE( 430)					if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE( 432)						swagNote->set_x((swagNote->x + 310));
HXLINE( 433)						if ((swagNote->noteData > 1)) {
HXLINE( 435)							swagNote->set_x((swagNote->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 25)));
            						}
            					}
            				}
HXLINE( 438)				oldNote = swagNote;
            			}
            		}
HXLINE( 440)		this->unspawnNotes->sort(::states::PlayState_obj::sortByTime_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC0(EditorPlayState_obj,generateSong,(void))

void EditorPlayState_obj::generateStaticArrows(int player){
            	HX_GC_STACKFRAME(&_hx_pos_94828a72d2e97540_444_generateStaticArrows)
HXLINE( 445)		Float strumLineX;
HXDLIN( 445)		if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE( 445)			strumLineX = ( (Float)(::states::PlayState_obj::STRUM_X_MIDDLESCROLL) );
            		}
            		else {
HXLINE( 445)			strumLineX = ( (Float)(::states::PlayState_obj::STRUM_X) );
            		}
HXLINE( 446)		Float strumLineY;
HXDLIN( 446)		if (::backend::ClientPrefs_obj::data->downScroll) {
HXLINE( 446)			strumLineY = ( (Float)((::flixel::FlxG_obj::height - 150)) );
            		}
            		else {
HXLINE( 446)			strumLineY = ( (Float)(50) );
            		}
HXLINE( 447)		{
HXLINE( 447)			int _g = 0;
HXDLIN( 447)			while((_g < 4)){
HXLINE( 447)				_g = (_g + 1);
HXDLIN( 447)				int i = (_g - 1);
HXLINE( 450)				Float targetAlpha = ( (Float)(1) );
HXLINE( 451)				if ((player < 1)) {
HXLINE( 453)					if (!(::backend::ClientPrefs_obj::data->opponentStrums)) {
HXLINE( 453)						targetAlpha = ( (Float)(0) );
            					}
            					else {
HXLINE( 454)						if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE( 454)							targetAlpha = ((Float)0.35);
            						}
            					}
            				}
HXLINE( 457)				 ::objects::StrumNote babyArrow =  ::objects::StrumNote_obj::__alloc( HX_CTX ,strumLineX,strumLineY,i,player);
HXLINE( 458)				babyArrow->downScroll = ::backend::ClientPrefs_obj::data->downScroll;
HXLINE( 459)				babyArrow->set_alpha(targetAlpha);
HXLINE( 461)				if ((player == 1)) {
HXLINE( 462)					this->playerStrums->add(babyArrow).StaticCast<  ::objects::StrumNote >();
            				}
            				else {
HXLINE( 465)					if (::backend::ClientPrefs_obj::data->middleScroll) {
HXLINE( 467)						babyArrow->set_x((babyArrow->x + 310));
HXLINE( 468)						if ((i > 1)) {
HXLINE( 469)							babyArrow->set_x((babyArrow->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 25)));
            						}
            					}
HXLINE( 472)					this->opponentStrums->add(babyArrow).StaticCast<  ::objects::StrumNote >();
            				}
HXLINE( 475)				this->strumLineNotes->add(babyArrow).StaticCast<  ::objects::StrumNote >();
HXLINE( 476)				babyArrow->playerPosition();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,generateStaticArrows,(void))

void EditorPlayState_obj::finishSong(){
            	HX_GC_STACKFRAME(&_hx_pos_94828a72d2e97540_481_finishSong)
HXDLIN( 481)		 ::states::editors::content::EditorPlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 482)		if ((::backend::ClientPrefs_obj::data->noteOffset <= 0)) {
HXLINE( 483)			this->endSong();
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::content::EditorPlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_94828a72d2e97540_486_finishSong)
HXLINE( 486)				_gthis->endSong();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 485)			 ::flixel::util::FlxTimer _hx_tmp =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN( 485)			this->finishTimer = _hx_tmp->start((( (Float)(::backend::ClientPrefs_obj::data->noteOffset) ) / ( (Float)(1000) )), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(EditorPlayState_obj,finishSong,(void))

void EditorPlayState_obj::endSong(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::content::EditorPlayState,_gthis) HXARGC(1)
            		void _hx_run( ::objects::Note note){
            			HX_STACKFRAME(&_hx_pos_94828a72d2e97540_493_endSong)
HXLINE( 493)			_gthis->invalidateNote(note);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_94828a72d2e97540_492_endSong)
HXDLIN( 492)		 ::states::editors::content::EditorPlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 493)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE( 494)		{
HXLINE( 494)			int _g = 0;
HXDLIN( 494)			::Array< ::Dynamic> _g1 = this->unspawnNotes;
HXDLIN( 494)			while((_g < _g1->length)){
HXLINE( 494)				 ::objects::Note note = _g1->__get(_g).StaticCast<  ::objects::Note >();
HXDLIN( 494)				_g = (_g + 1);
HXLINE( 495)				if (::hx::IsNotNull( note )) {
HXLINE( 495)					this->invalidateNote(note);
            				}
            			}
            		}
HXLINE( 497)		this->inst->pause();
HXLINE( 498)		this->vocals->pause();
HXLINE( 499)		this->opponentVocals->pause();
HXLINE( 501)		if (::hx::IsNotNull( this->finishTimer )) {
HXLINE( 502)			this->finishTimer->destroy();
            		}
HXLINE( 504)		 ::flixel::sound::FlxSound _hx_tmp = ::flixel::FlxG_obj::sound->music;
HXDLIN( 504)		 ::flixel::sound::FlxSound _hx_tmp1 = this->vocals;
HXDLIN( 504)		::backend::Conductor_obj::songPosition = _hx_tmp->set_time(_hx_tmp1->set_time(this->opponentVocals->set_time((this->startPos - ::backend::Conductor_obj::offset))));
HXLINE( 505)		this->close();
            	}


HX_DEFINE_DYNAMIC_FUNC0(EditorPlayState_obj,endSong,(void))

void EditorPlayState_obj::cachePopUpScore(){
            	HX_STACKFRAME(&_hx_pos_94828a72d2e97540_509_cachePopUpScore)
HXLINE( 510)		::String uiFolder = HX_("",00,00,00,00);
HXLINE( 511)		if ((::states::PlayState_obj::stageUI != HX_("normal",27,72,69,30))) {
HXLINE( 512)			uiFolder = (::states::PlayState_obj::uiPrefix + HX_("UI/",5b,bf,40,00));
            		}
HXLINE( 514)		{
HXLINE( 514)			int _g = 0;
HXDLIN( 514)			::Array< ::Dynamic> _g1 = this->ratingsData;
HXDLIN( 514)			while((_g < _g1->length)){
HXLINE( 514)				 ::backend::Rating rating = _g1->__get(_g).StaticCast<  ::backend::Rating >();
HXDLIN( 514)				_g = (_g + 1);
HXLINE( 515)				::backend::Paths_obj::image(((uiFolder + rating->image) + ::states::PlayState_obj::uiPostfix),null(),null());
            			}
            		}
HXLINE( 516)		{
HXLINE( 517)			::backend::Paths_obj::image((((uiFolder + HX_("num",46,de,53,00)) + 0) + ::states::PlayState_obj::uiPostfix),null(),null());
HXDLIN( 517)			::backend::Paths_obj::image((((uiFolder + HX_("num",46,de,53,00)) + 1) + ::states::PlayState_obj::uiPostfix),null(),null());
HXDLIN( 517)			::backend::Paths_obj::image((((uiFolder + HX_("num",46,de,53,00)) + 2) + ::states::PlayState_obj::uiPostfix),null(),null());
HXDLIN( 517)			::backend::Paths_obj::image((((uiFolder + HX_("num",46,de,53,00)) + 3) + ::states::PlayState_obj::uiPostfix),null(),null());
HXDLIN( 517)			::backend::Paths_obj::image((((uiFolder + HX_("num",46,de,53,00)) + 4) + ::states::PlayState_obj::uiPostfix),null(),null());
HXDLIN( 517)			::backend::Paths_obj::image((((uiFolder + HX_("num",46,de,53,00)) + 5) + ::states::PlayState_obj::uiPostfix),null(),null());
HXDLIN( 517)			::backend::Paths_obj::image((((uiFolder + HX_("num",46,de,53,00)) + 6) + ::states::PlayState_obj::uiPostfix),null(),null());
HXDLIN( 517)			::backend::Paths_obj::image((((uiFolder + HX_("num",46,de,53,00)) + 7) + ::states::PlayState_obj::uiPostfix),null(),null());
HXDLIN( 517)			::backend::Paths_obj::image((((uiFolder + HX_("num",46,de,53,00)) + 8) + ::states::PlayState_obj::uiPostfix),null(),null());
HXDLIN( 517)			::backend::Paths_obj::image((((uiFolder + HX_("num",46,de,53,00)) + 9) + ::states::PlayState_obj::uiPostfix),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(EditorPlayState_obj,cachePopUpScore,(void))

void EditorPlayState_obj::popUpScore( ::objects::Note note){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,comboSpr1, ::flixel::FlxSprite,rating) HXARGC(1)
            		void _hx_run( ::flixel::tweens::FlxTween tween){
            			HX_GC_STACKFRAME(&_hx_pos_94828a72d2e97540_646_popUpScore)
HXLINE( 647)			comboSpr1->destroy();
HXLINE( 648)			rating->destroy();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_94828a72d2e97540_521_popUpScore)
HXLINE( 522)		Float noteDiff = ::Math_obj::abs(((note->strumTime - ::backend::Conductor_obj::songPosition) + ::backend::ClientPrefs_obj::data->ratingOffset));
HXLINE( 523)		this->vocals->set_volume(( (Float)(1) ));
HXLINE( 525)		bool _hx_tmp;
HXDLIN( 525)		if (!(::backend::ClientPrefs_obj::data->comboStacking)) {
HXLINE( 525)			_hx_tmp = (this->comboGroup->group->members->get_length() > 0);
            		}
            		else {
HXLINE( 525)			_hx_tmp = false;
            		}
HXDLIN( 525)		if (_hx_tmp) {
HXLINE( 527)			 ::Dynamic filter = null();
HXDLIN( 527)			 ::flixel::group::FlxTypedGroupIterator spr =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->comboGroup->group->members,filter);
HXDLIN( 527)			while(spr->hasNext()){
HXLINE( 527)				 ::flixel::FlxSprite spr1 = spr->next().StaticCast<  ::flixel::FlxSprite >();
HXLINE( 529)				if (::hx::IsNull( spr1 )) {
HXLINE( 529)					continue;
            				}
HXLINE( 531)				this->comboGroup->remove(spr1,null()).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 532)				spr1->destroy();
            			}
            		}
HXLINE( 536)		Float placement = (( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.35));
HXLINE( 537)		 ::flixel::FlxSprite rating =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 538)		int score = 350;
HXLINE( 541)		 ::backend::Rating daRating = ::backend::Conductor_obj::judgeNote(this->ratingsData,(noteDiff / this->playbackRate));
HXLINE( 543)		note->ratingMod = daRating->ratingMod;
HXLINE( 544)		if (!(note->ratingDisabled)) {
HXLINE( 544)			daRating->hits++;
            		}
HXLINE( 545)		note->rating = daRating->name;
HXLINE( 546)		score = daRating->score;
HXLINE( 548)		bool _hx_tmp1;
HXDLIN( 548)		if (daRating->noteSplash) {
HXLINE( 548)			_hx_tmp1 = !(( (bool)(note->noteSplashData->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 548)			_hx_tmp1 = false;
            		}
HXDLIN( 548)		if (_hx_tmp1) {
HXLINE( 549)			this->spawnNoteSplashOnNote(note);
            		}
HXLINE( 551)		if (!(note->ratingDisabled)) {
HXLINE( 552)			this->songHits++;
            		}
HXLINE( 554)		::String uiFolder = HX_("",00,00,00,00);
HXLINE( 555)		bool antialias = ::backend::ClientPrefs_obj::data->antialiasing;
HXLINE( 556)		if ((::states::PlayState_obj::stageUI != HX_("normal",27,72,69,30))) {
HXLINE( 558)			uiFolder = (::states::PlayState_obj::uiPrefix + HX_("UI/",5b,bf,40,00));
HXLINE( 559)			antialias = !(::states::PlayState_obj::get_isPixelStage());
            		}
HXLINE( 562)		 ::flixel::FlxSprite rating1 = rating;
HXDLIN( 562)		rating1->loadGraphic(::backend::Paths_obj::image(((uiFolder + daRating->image) + ::states::PlayState_obj::uiPostfix),null(),null()),null(),null(),null(),null(),null());
HXLINE( 563)		{
HXLINE( 563)			int axes = 17;
HXDLIN( 563)			bool _hx_tmp2;
HXDLIN( 563)			if ((axes != 1)) {
HXLINE( 563)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE( 563)				_hx_tmp2 = true;
            			}
HXDLIN( 563)			if (_hx_tmp2) {
HXLINE( 563)				 ::flixel::FlxSprite rating2 = rating;
HXDLIN( 563)				int _hx_tmp3 = ::flixel::FlxG_obj::width;
HXDLIN( 563)				rating2->set_x(((( (Float)(_hx_tmp3) ) - rating->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 563)			bool _hx_tmp4;
HXDLIN( 563)			if ((axes != 16)) {
HXLINE( 563)				_hx_tmp4 = (axes == 17);
            			}
            			else {
HXLINE( 563)				_hx_tmp4 = true;
            			}
HXDLIN( 563)			if (_hx_tmp4) {
HXLINE( 563)				 ::flixel::FlxSprite rating3 = rating;
HXDLIN( 563)				int _hx_tmp5 = ::flixel::FlxG_obj::height;
HXDLIN( 563)				rating3->set_y(((( (Float)(_hx_tmp5) ) - rating->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 564)		rating->set_x((placement - ( (Float)(40) )));
HXLINE( 565)		rating->set_y((rating->y - ( (Float)(60) )));
HXLINE( 566)		rating->acceleration->set_y(((( (Float)(550) ) * this->playbackRate) * this->playbackRate));
HXLINE( 567)		{
HXLINE( 567)			 ::flixel::math::FlxBasePoint this1 = rating->velocity;
HXDLIN( 567)			Float rating4 = rating->velocity->y;
HXDLIN( 567)			int y = ::flixel::FlxG_obj::random->_hx_int(140,175,null());
HXDLIN( 567)			this1->set_y((rating4 - (( (Float)(y) ) * this->playbackRate)));
            		}
HXLINE( 568)		{
HXLINE( 568)			 ::flixel::math::FlxBasePoint this2 = rating->velocity;
HXDLIN( 568)			Float rating5 = rating->velocity->x;
HXDLIN( 568)			int x = ::flixel::FlxG_obj::random->_hx_int(0,10,null());
HXDLIN( 568)			this2->set_x((rating5 - (( (Float)(x) ) * this->playbackRate)));
            		}
HXLINE( 569)		bool _hx_tmp6;
HXDLIN( 569)		if (!(::backend::ClientPrefs_obj::data->hideHud)) {
HXLINE( 569)			_hx_tmp6 = this->showRating;
            		}
            		else {
HXLINE( 569)			_hx_tmp6 = false;
            		}
HXDLIN( 569)		rating->set_visible(_hx_tmp6);
HXLINE( 570)		rating->set_x((rating->x + ::backend::ClientPrefs_obj::data->comboOffset->__get(0)));
HXLINE( 571)		rating->set_y((rating->y - ( (Float)(::backend::ClientPrefs_obj::data->comboOffset->__get(1)) )));
HXLINE( 572)		rating->set_antialiasing(antialias);
HXLINE( 574)		 ::flixel::FlxSprite comboSpr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 574)		 ::flixel::FlxSprite comboSpr1 = comboSpr->loadGraphic(::backend::Paths_obj::image(((uiFolder + HX_("combo",4e,28,5d,4a)) + ::states::PlayState_obj::uiPostfix),null(),null()),null(),null(),null(),null(),null());
HXLINE( 575)		{
HXLINE( 575)			int axes1 = 17;
HXDLIN( 575)			bool _hx_tmp7;
HXDLIN( 575)			if ((axes1 != 1)) {
HXLINE( 575)				_hx_tmp7 = (axes1 == 17);
            			}
            			else {
HXLINE( 575)				_hx_tmp7 = true;
            			}
HXDLIN( 575)			if (_hx_tmp7) {
HXLINE( 575)				 ::flixel::FlxSprite comboSpr2 = comboSpr1;
HXDLIN( 575)				int _hx_tmp8 = ::flixel::FlxG_obj::width;
HXDLIN( 575)				comboSpr2->set_x(((( (Float)(_hx_tmp8) ) - comboSpr1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 575)			bool _hx_tmp9;
HXDLIN( 575)			if ((axes1 != 16)) {
HXLINE( 575)				_hx_tmp9 = (axes1 == 17);
            			}
            			else {
HXLINE( 575)				_hx_tmp9 = true;
            			}
HXDLIN( 575)			if (_hx_tmp9) {
HXLINE( 575)				 ::flixel::FlxSprite comboSpr3 = comboSpr1;
HXDLIN( 575)				int _hx_tmp10 = ::flixel::FlxG_obj::height;
HXDLIN( 575)				comboSpr3->set_y(((( (Float)(_hx_tmp10) ) - comboSpr1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 576)		comboSpr1->set_x(placement);
HXLINE( 577)		{
HXLINE( 577)			 ::flixel::math::FlxBasePoint this3 = comboSpr1->acceleration;
HXDLIN( 577)			int y1 = ::flixel::FlxG_obj::random->_hx_int(200,300,null());
HXDLIN( 577)			this3->set_y(((( (Float)(y1) ) * this->playbackRate) * this->playbackRate));
            		}
HXLINE( 578)		{
HXLINE( 578)			 ::flixel::math::FlxBasePoint this4 = comboSpr1->velocity;
HXDLIN( 578)			Float comboSpr4 = comboSpr1->velocity->y;
HXDLIN( 578)			int y2 = ::flixel::FlxG_obj::random->_hx_int(140,160,null());
HXDLIN( 578)			this4->set_y((comboSpr4 - (( (Float)(y2) ) * this->playbackRate)));
            		}
HXLINE( 579)		bool _hx_tmp11;
HXDLIN( 579)		if (!(::backend::ClientPrefs_obj::data->hideHud)) {
HXLINE( 579)			_hx_tmp11 = this->showCombo;
            		}
            		else {
HXLINE( 579)			_hx_tmp11 = false;
            		}
HXDLIN( 579)		comboSpr1->set_visible(_hx_tmp11);
HXLINE( 580)		comboSpr1->set_x((comboSpr1->x + ::backend::ClientPrefs_obj::data->comboOffset->__get(0)));
HXLINE( 581)		comboSpr1->set_y((comboSpr1->y - ( (Float)(::backend::ClientPrefs_obj::data->comboOffset->__get(1)) )));
HXLINE( 582)		comboSpr1->set_antialiasing(antialias);
HXLINE( 583)		comboSpr1->set_y((comboSpr1->y + 60));
HXLINE( 584)		{
HXLINE( 584)			 ::flixel::math::FlxBasePoint this5 = comboSpr1->velocity;
HXDLIN( 584)			Float comboSpr5 = comboSpr1->velocity->x;
HXDLIN( 584)			int x1 = ::flixel::FlxG_obj::random->_hx_int(1,10,null());
HXDLIN( 584)			this5->set_x((comboSpr5 + (( (Float)(x1) ) * this->playbackRate)));
            		}
HXLINE( 585)		this->comboGroup->add(rating).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 587)		if (!(::states::PlayState_obj::get_isPixelStage())) {
HXLINE( 589)			 ::flixel::FlxSprite rating6 = rating;
HXDLIN( 589)			rating6->setGraphicSize(::Std_obj::_hx_int((rating->get_width() * ((Float)0.7))),null());
HXLINE( 590)			 ::flixel::FlxSprite comboSpr6 = comboSpr1;
HXDLIN( 590)			comboSpr6->setGraphicSize(::Std_obj::_hx_int((comboSpr1->get_width() * ((Float)0.7))),null());
            		}
            		else {
HXLINE( 594)			 ::flixel::FlxSprite rating7 = rating;
HXDLIN( 594)			Float _hx_tmp12 = rating->get_width();
HXDLIN( 594)			rating7->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp12 * ::states::PlayState_obj::daPixelZoom) * ((Float)0.85))),null());
HXLINE( 595)			 ::flixel::FlxSprite comboSpr7 = comboSpr1;
HXDLIN( 595)			Float _hx_tmp13 = comboSpr1->get_width();
HXDLIN( 595)			comboSpr7->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp13 * ::states::PlayState_obj::daPixelZoom) * ((Float)0.85))),null());
            		}
HXLINE( 598)		comboSpr1->updateHitbox();
HXLINE( 599)		rating->updateHitbox();
HXLINE( 601)		int daLoop = 0;
HXLINE( 602)		Float xThing = ( (Float)(0) );
HXLINE( 603)		if (this->showCombo) {
HXLINE( 604)			this->comboGroup->add(comboSpr1).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE( 606)		::String separatedScore = ::StringTools_obj::lpad(::Std_obj::string(this->combo),HX_("0",30,00,00,00),3);
HXLINE( 607)		{
HXLINE( 607)			int _g = 0;
HXDLIN( 607)			int _g1 = separatedScore.length;
HXDLIN( 607)			while((_g < _g1)){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,numScore2) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween tween){
            					HX_GC_STACKFRAME(&_hx_pos_94828a72d2e97540_631_popUpScore)
HXLINE( 631)					numScore2->destroy();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 607)				_g = (_g + 1);
HXDLIN( 607)				int i = (_g - 1);
HXLINE( 609)				 ::flixel::FlxSprite numScore =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 609)				::String numScore1 = ((uiFolder + HX_("num",46,de,53,00)) + ::Std_obj::parseInt(separatedScore.charAt(i)));
HXDLIN( 609)				 ::flixel::FlxSprite numScore2 = numScore->loadGraphic(::backend::Paths_obj::image((numScore1 + ::states::PlayState_obj::uiPostfix),null(),null()),null(),null(),null(),null(),null());
HXLINE( 610)				{
HXLINE( 610)					int axes2 = 17;
HXDLIN( 610)					bool _hx_tmp14;
HXDLIN( 610)					if ((axes2 != 1)) {
HXLINE( 610)						_hx_tmp14 = (axes2 == 17);
            					}
            					else {
HXLINE( 610)						_hx_tmp14 = true;
            					}
HXDLIN( 610)					if (_hx_tmp14) {
HXLINE( 610)						 ::flixel::FlxSprite numScore3 = numScore2;
HXDLIN( 610)						int _hx_tmp15 = ::flixel::FlxG_obj::width;
HXDLIN( 610)						numScore3->set_x(((( (Float)(_hx_tmp15) ) - numScore2->get_width()) / ( (Float)(2) )));
            					}
HXDLIN( 610)					bool _hx_tmp16;
HXDLIN( 610)					if ((axes2 != 16)) {
HXLINE( 610)						_hx_tmp16 = (axes2 == 17);
            					}
            					else {
HXLINE( 610)						_hx_tmp16 = true;
            					}
HXDLIN( 610)					if (_hx_tmp16) {
HXLINE( 610)						 ::flixel::FlxSprite numScore4 = numScore2;
HXDLIN( 610)						int _hx_tmp17 = ::flixel::FlxG_obj::height;
HXDLIN( 610)						numScore4->set_y(((( (Float)(_hx_tmp17) ) - numScore2->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE( 611)				numScore2->set_x((((placement + (43 * daLoop)) - ( (Float)(90) )) + ::backend::ClientPrefs_obj::data->comboOffset->__get(2)));
HXLINE( 612)				numScore2->set_y((numScore2->y + (80 - ::backend::ClientPrefs_obj::data->comboOffset->__get(3))));
HXLINE( 614)				if (!(::states::PlayState_obj::get_isPixelStage())) {
HXLINE( 614)					 ::flixel::FlxSprite numScore5 = numScore2;
HXDLIN( 614)					numScore5->setGraphicSize(::Std_obj::_hx_int((numScore2->get_width() * ((Float)0.5))),null());
            				}
            				else {
HXLINE( 615)					 ::flixel::FlxSprite numScore6 = numScore2;
HXDLIN( 615)					Float _hx_tmp18 = numScore2->get_width();
HXDLIN( 615)					numScore6->setGraphicSize(::Std_obj::_hx_int((_hx_tmp18 * ::states::PlayState_obj::daPixelZoom)),null());
            				}
HXLINE( 616)				numScore2->updateHitbox();
HXLINE( 618)				{
HXLINE( 618)					 ::flixel::math::FlxBasePoint this6 = numScore2->acceleration;
HXDLIN( 618)					int y3 = ::flixel::FlxG_obj::random->_hx_int(200,300,null());
HXDLIN( 618)					this6->set_y(((( (Float)(y3) ) * this->playbackRate) * this->playbackRate));
            				}
HXLINE( 619)				{
HXLINE( 619)					 ::flixel::math::FlxBasePoint this7 = numScore2->velocity;
HXDLIN( 619)					Float numScore7 = numScore2->velocity->y;
HXDLIN( 619)					int y4 = ::flixel::FlxG_obj::random->_hx_int(140,160,null());
HXDLIN( 619)					this7->set_y((numScore7 - (( (Float)(y4) ) * this->playbackRate)));
            				}
HXLINE( 620)				{
HXLINE( 620)					 ::flixel::math::FlxBasePoint this8 = numScore2->velocity;
HXDLIN( 620)					Float x2 = ::flixel::FlxG_obj::random->_hx_float(-5,5,null());
HXDLIN( 620)					this8->set_x((x2 * this->playbackRate));
            				}
HXLINE( 621)				numScore2->set_visible(!(::backend::ClientPrefs_obj::data->hideHud));
HXLINE( 622)				numScore2->set_antialiasing(antialias);
HXLINE( 625)				if (this->showComboNum) {
HXLINE( 626)					this->comboGroup->add(numScore2).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE( 628)				::flixel::tweens::FlxTween_obj::tween(numScore2, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(((Float)0.2) / this->playbackRate), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),((::backend::Conductor_obj::crochet * ((Float)0.002)) / this->playbackRate))
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(numScore2)))));
HXLINE( 636)				daLoop = (daLoop + 1);
HXLINE( 637)				if ((numScore2->x > xThing)) {
HXLINE( 637)					xThing = numScore2->x;
            				}
            			}
            		}
HXLINE( 639)		comboSpr1->set_x((xThing + 50));
HXLINE( 640)		::flixel::tweens::FlxTween_obj::tween(rating, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(((Float)0.2) / this->playbackRate), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((::backend::Conductor_obj::crochet * ((Float)0.001)) / this->playbackRate))));
HXLINE( 644)		::flixel::tweens::FlxTween_obj::tween(comboSpr1, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(((Float)0.2) / this->playbackRate), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((::backend::Conductor_obj::crochet * ((Float)0.002)) / this->playbackRate))
            			->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(comboSpr1,rating)))));
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,popUpScore,(void))

void EditorPlayState_obj::onKeyPress( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_94828a72d2e97540_655_onKeyPress)
HXLINE( 656)		int eventKey = event->keyCode;
HXLINE( 657)		int key = ::states::PlayState_obj::getKeyFromEvent(this->keysArray,eventKey);
HXLINE( 660)		if (!(::backend::Controls_obj::instance->controllerMode)) {
HXLINE( 667)			if (::flixel::FlxG_obj::keys->checkStatus(eventKey,2)) {
HXLINE( 667)				this->keyPressed(key);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,onKeyPress,(void))

void EditorPlayState_obj::keyPressed(int key){
            	HX_STACKFRAME(&_hx_pos_94828a72d2e97540_672_keyPressed)
HXLINE( 673)		if ((key < 0)) {
HXLINE( 673)			return;
            		}
HXLINE( 676)		Float lastTime = ::backend::Conductor_obj::songPosition;
HXLINE( 677)		if ((::backend::Conductor_obj::songPosition >= 0)) {
HXLINE( 677)			::backend::Conductor_obj::songPosition = (this->inst->_time + ::backend::Conductor_obj::offset);
            		}
HXLINE( 680)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 680)		{
HXLINE( 680)			int _g1 = 0;
HXDLIN( 680)			::Array< ::Dynamic> _g2 = this->notes->members;
HXDLIN( 680)			while((_g1 < _g2->length)){
HXLINE( 680)				 ::objects::Note v = _g2->__get(_g1).StaticCast<  ::objects::Note >();
HXDLIN( 680)				_g1 = (_g1 + 1);
HXLINE( 681)				bool _hx_tmp;
HXDLIN( 681)				bool _hx_tmp1;
HXDLIN( 681)				bool _hx_tmp2;
HXDLIN( 681)				bool _hx_tmp3;
HXDLIN( 681)				bool _hx_tmp4;
HXDLIN( 681)				bool _hx_tmp5;
HXDLIN( 681)				bool _hx_tmp6;
HXDLIN( 681)				if (::hx::IsNotNull( v )) {
HXLINE( 681)					_hx_tmp6 = v->canBeHit;
            				}
            				else {
HXLINE( 681)					_hx_tmp6 = false;
            				}
HXDLIN( 681)				if (_hx_tmp6) {
HXLINE( 681)					_hx_tmp5 = v->mustPress;
            				}
            				else {
HXLINE( 681)					_hx_tmp5 = false;
            				}
HXDLIN( 681)				if (_hx_tmp5) {
HXLINE( 681)					_hx_tmp4 = !(v->tooLate);
            				}
            				else {
HXLINE( 681)					_hx_tmp4 = false;
            				}
HXDLIN( 681)				if (_hx_tmp4) {
HXLINE( 681)					_hx_tmp3 = !(v->wasGoodHit);
            				}
            				else {
HXLINE( 681)					_hx_tmp3 = false;
            				}
HXDLIN( 681)				if (_hx_tmp3) {
HXLINE( 681)					_hx_tmp2 = !(v->blockHit);
            				}
            				else {
HXLINE( 681)					_hx_tmp2 = false;
            				}
HXDLIN( 681)				if (_hx_tmp2) {
HXLINE( 681)					_hx_tmp1 = !(v->isSustainNote);
            				}
            				else {
HXLINE( 681)					_hx_tmp1 = false;
            				}
HXDLIN( 681)				if (_hx_tmp1) {
HXLINE( 681)					_hx_tmp = (v->noteData == key);
            				}
            				else {
HXLINE( 681)					_hx_tmp = false;
            				}
HXLINE( 680)				if (_hx_tmp) {
HXLINE( 680)					_g->push(v);
            				}
            			}
            		}
HXDLIN( 680)		::Array< ::Dynamic> plrInputNotes = _g;
HXLINE( 684)		plrInputNotes->sort(::states::PlayState_obj::sortHitNotes_dyn());
HXLINE( 686)		bool shouldMiss = !(::backend::ClientPrefs_obj::data->ghostTapping);
HXLINE( 688)		if ((plrInputNotes->length != 0)) {
HXLINE( 689)			 ::objects::Note funnyNote = plrInputNotes->__get(0).StaticCast<  ::objects::Note >();
HXLINE( 692)			if ((plrInputNotes->length > 1)) {
HXLINE( 693)				 ::objects::Note doubleNote = plrInputNotes->__get(1).StaticCast<  ::objects::Note >();
HXLINE( 695)				if ((doubleNote->noteData == funnyNote->noteData)) {
HXLINE( 697)					if ((::Math_obj::abs((doubleNote->strumTime - funnyNote->strumTime)) < ((Float)1.0))) {
HXLINE( 698)						this->invalidateNote(doubleNote);
            					}
            					else {
HXLINE( 699)						if ((doubleNote->strumTime < funnyNote->strumTime)) {
HXLINE( 702)							funnyNote = doubleNote;
            						}
            					}
            				}
            			}
HXLINE( 707)			this->goodNoteHit(funnyNote);
            		}
HXLINE( 711)		::backend::Conductor_obj::songPosition = lastTime;
HXLINE( 713)		 ::objects::StrumNote spr = Dynamic( this->playerStrums->members->__get(key)).StaticCast<  ::objects::StrumNote >();
HXLINE( 714)		bool _hx_tmp7;
HXDLIN( 714)		if (::hx::IsNotNull( spr )) {
HXLINE( 714)			_hx_tmp7 = (spr->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            		}
            		else {
HXLINE( 714)			_hx_tmp7 = false;
            		}
HXDLIN( 714)		if (_hx_tmp7) {
HXLINE( 716)			spr->playAnim(HX_("pressed",a2,d2,e6,39),null());
HXLINE( 717)			spr->resetAnim = ( (Float)(0) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,keyPressed,(void))

void EditorPlayState_obj::onKeyRelease( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_94828a72d2e97540_722_onKeyRelease)
HXLINE( 723)		int eventKey = event->keyCode;
HXLINE( 724)		int key = ::states::PlayState_obj::getKeyFromEvent(this->keysArray,eventKey);
HXLINE( 727)		bool _hx_tmp;
HXDLIN( 727)		if (!(::backend::Controls_obj::instance->controllerMode)) {
HXLINE( 727)			_hx_tmp = (key > -1);
            		}
            		else {
HXLINE( 727)			_hx_tmp = false;
            		}
HXDLIN( 727)		if (_hx_tmp) {
HXLINE( 727)			this->keyReleased(key);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,onKeyRelease,(void))

void EditorPlayState_obj::keyReleased(int key){
            	HX_STACKFRAME(&_hx_pos_94828a72d2e97540_731_keyReleased)
HXLINE( 732)		 ::objects::StrumNote spr = Dynamic( this->playerStrums->members->__get(key)).StaticCast<  ::objects::StrumNote >();
HXLINE( 733)		if (::hx::IsNotNull( spr )) {
HXLINE( 735)			spr->playAnim(HX_("static",ae,dc,fb,05),null());
HXLINE( 736)			spr->resetAnim = ( (Float)(0) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,keyReleased,(void))

void EditorPlayState_obj::keysCheck(){
            	HX_GC_STACKFRAME(&_hx_pos_94828a72d2e97540_742_keysCheck)
HXLINE( 744)		::Array< bool > holdArray = ::Array_obj< bool >::__new(0);
HXLINE( 745)		::Array< bool > pressArray = ::Array_obj< bool >::__new(0);
HXLINE( 746)		::Array< bool > releaseArray = ::Array_obj< bool >::__new(0);
HXLINE( 747)		{
HXLINE( 747)			int _g = 0;
HXDLIN( 747)			::Array< ::String > _g1 = this->keysArray;
HXDLIN( 747)			while((_g < _g1->length)){
HXLINE( 747)				::String key = _g1->__get(_g);
HXDLIN( 747)				_g = (_g + 1);
HXLINE( 749)				holdArray->push(::backend::Controls_obj::instance->pressed(key));
HXLINE( 750)				pressArray->push(::backend::Controls_obj::instance->justPressed(key));
HXLINE( 751)				releaseArray->push(::backend::Controls_obj::instance->justReleased(key));
            			}
            		}
HXLINE( 755)		bool _hx_tmp;
HXDLIN( 755)		if (::backend::Controls_obj::instance->controllerMode) {
HXLINE( 755)			_hx_tmp = pressArray->contains(true);
            		}
            		else {
HXLINE( 755)			_hx_tmp = false;
            		}
HXDLIN( 755)		if (_hx_tmp) {
HXLINE( 756)			int _g2 = 0;
HXDLIN( 756)			int _g3 = pressArray->length;
HXDLIN( 756)			while((_g2 < _g3)){
HXLINE( 756)				_g2 = (_g2 + 1);
HXDLIN( 756)				int i = (_g2 - 1);
HXLINE( 757)				if (pressArray->__get(i)) {
HXLINE( 758)					this->keyPressed(i);
            				}
            			}
            		}
HXLINE( 761)		if ((this->notes->length > 0)) {
HXLINE( 762)			 ::Dynamic filter = null();
HXDLIN( 762)			 ::flixel::group::FlxTypedGroupIterator n =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->notes->members,filter);
HXDLIN( 762)			while(n->hasNext()){
HXLINE( 762)				 ::objects::Note n1 = n->next().StaticCast<  ::objects::Note >();
HXLINE( 763)				bool canHit;
HXDLIN( 763)				bool canHit1;
HXDLIN( 763)				bool canHit2;
HXDLIN( 763)				bool canHit3;
HXDLIN( 763)				bool canHit4;
HXDLIN( 763)				if (::hx::IsNotNull( n1 )) {
HXLINE( 763)					canHit4 = n1->canBeHit;
            				}
            				else {
HXLINE( 763)					canHit4 = false;
            				}
HXDLIN( 763)				if (canHit4) {
HXLINE( 763)					canHit3 = n1->mustPress;
            				}
            				else {
HXLINE( 763)					canHit3 = false;
            				}
HXDLIN( 763)				if (canHit3) {
HXLINE( 763)					canHit2 = !(n1->tooLate);
            				}
            				else {
HXLINE( 763)					canHit2 = false;
            				}
HXDLIN( 763)				if (canHit2) {
HXLINE( 763)					canHit1 = !(n1->wasGoodHit);
            				}
            				else {
HXLINE( 763)					canHit1 = false;
            				}
HXDLIN( 763)				if (canHit1) {
HXLINE( 763)					canHit = !(n1->blockHit);
            				}
            				else {
HXLINE( 763)					canHit = false;
            				}
HXLINE( 766)				if (this->guitarHeroSustains) {
HXLINE( 767)					bool canHit5;
HXDLIN( 767)					if (canHit) {
HXLINE( 767)						canHit5 = ::hx::IsNotNull( n1->parent );
            					}
            					else {
HXLINE( 767)						canHit5 = false;
            					}
HXDLIN( 767)					if (canHit5) {
HXLINE( 767)						canHit = n1->parent->wasGoodHit;
            					}
            					else {
HXLINE( 767)						canHit = false;
            					}
            				}
HXLINE( 769)				bool _hx_tmp1;
HXDLIN( 769)				if (canHit) {
HXLINE( 769)					_hx_tmp1 = n1->isSustainNote;
            				}
            				else {
HXLINE( 769)					_hx_tmp1 = false;
            				}
HXDLIN( 769)				if (_hx_tmp1) {
HXLINE( 770)					bool released = !(holdArray->__get(n1->noteData));
HXLINE( 772)					if (!(released)) {
HXLINE( 773)						this->goodNoteHit(n1);
            					}
            				}
            			}
            		}
HXLINE( 779)		bool _hx_tmp2;
HXDLIN( 779)		if (::backend::Controls_obj::instance->controllerMode) {
HXLINE( 779)			_hx_tmp2 = releaseArray->contains(true);
            		}
            		else {
HXLINE( 779)			_hx_tmp2 = false;
            		}
HXDLIN( 779)		if (_hx_tmp2) {
HXLINE( 780)			int _g4 = 0;
HXDLIN( 780)			int _g5 = releaseArray->length;
HXDLIN( 780)			while((_g4 < _g5)){
HXLINE( 780)				_g4 = (_g4 + 1);
HXDLIN( 780)				int i1 = (_g4 - 1);
HXLINE( 781)				if (releaseArray->__get(i1)) {
HXLINE( 782)					this->keyReleased(i1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(EditorPlayState_obj,keysCheck,(void))

void EditorPlayState_obj::opponentNoteHit( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_94828a72d2e97540_787_opponentNoteHit)
HXLINE( 788)		bool _hx_tmp;
HXDLIN( 788)		if (( (bool)(::states::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE( 788)			_hx_tmp = (this->opponentVocals->_length <= 0);
            		}
            		else {
HXLINE( 788)			_hx_tmp = false;
            		}
HXDLIN( 788)		if (_hx_tmp) {
HXLINE( 789)			this->vocals->set_volume(( (Float)(1) ));
            		}
HXLINE( 791)		 ::objects::StrumNote strum = Dynamic( this->opponentStrums->members->__get(::Std_obj::_hx_int(::Math_obj::abs(( (Float)(note->noteData) ))))).StaticCast<  ::objects::StrumNote >();
HXLINE( 792)		if (::hx::IsNotNull( strum )) {
HXLINE( 793)			strum->playAnim(HX_("confirm",00,9d,39,10),true);
HXLINE( 794)			strum->resetAnim = (((::backend::Conductor_obj::stepCrochet * ((Float)1.25)) / ( (Float)(1000) )) / this->playbackRate);
            		}
HXLINE( 796)		note->hitByOpponent = true;
HXLINE( 798)		if (!(note->isSustainNote)) {
HXLINE( 799)			this->invalidateNote(note);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,opponentNoteHit,(void))

void EditorPlayState_obj::goodNoteHit( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_94828a72d2e97540_803_goodNoteHit)
HXLINE( 804)		if (note->wasGoodHit) {
HXLINE( 804)			return;
            		}
HXLINE( 806)		note->wasGoodHit = true;
HXLINE( 807)		bool _hx_tmp;
HXDLIN( 807)		if ((note->get_hitsoundVolume() > 0)) {
HXLINE( 807)			_hx_tmp = !(note->hitsoundDisabled);
            		}
            		else {
HXLINE( 807)			_hx_tmp = false;
            		}
HXDLIN( 807)		if (_hx_tmp) {
HXLINE( 808)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 808)			 ::openfl::media::Sound _hx_tmp2 = ::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + note->hitsound),null(),true,null());
HXDLIN( 808)			_hx_tmp1->play(_hx_tmp2,note->get_hitsoundVolume(),null(),null(),null(),null());
            		}
HXLINE( 810)		if (note->hitCausesMiss) {
HXLINE( 811)			this->noteMiss(note);
HXLINE( 812)			bool _hx_tmp3;
HXDLIN( 812)			if (!(( (bool)(note->noteSplashData->__Field(HX_("disabled",7c,41,04,7c),::hx::paccDynamic)) ))) {
HXLINE( 812)				_hx_tmp3 = !(note->isSustainNote);
            			}
            			else {
HXLINE( 812)				_hx_tmp3 = false;
            			}
HXDLIN( 812)			if (_hx_tmp3) {
HXLINE( 813)				this->spawnNoteSplashOnNote(note);
            			}
HXLINE( 815)			if (!(note->isSustainNote)) {
HXLINE( 816)				this->invalidateNote(note);
            			}
HXLINE( 817)			return;
            		}
HXLINE( 820)		if (!(note->isSustainNote)) {
HXLINE( 822)			this->combo++;
HXLINE( 823)			if ((this->combo > 9999)) {
HXLINE( 823)				this->combo = 9999;
            			}
HXLINE( 824)			this->popUpScore(note);
            		}
HXLINE( 827)		 ::objects::StrumNote spr = Dynamic( this->playerStrums->members->__get(note->noteData)).StaticCast<  ::objects::StrumNote >();
HXLINE( 828)		if (::hx::IsNotNull( spr )) {
HXLINE( 828)			spr->playAnim(HX_("confirm",00,9d,39,10),true);
            		}
HXLINE( 829)		this->vocals->set_volume(( (Float)(1) ));
HXLINE( 831)		if (!(note->isSustainNote)) {
HXLINE( 832)			this->invalidateNote(note);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,goodNoteHit,(void))

void EditorPlayState_obj::noteMiss( ::objects::Note daNote){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::states::editors::content::EditorPlayState,_gthis, ::objects::Note,daNote) HXARGC(1)
            		void _hx_run( ::objects::Note note){
            			HX_STACKFRAME(&_hx_pos_94828a72d2e97540_838_noteMiss)
HXLINE( 838)			bool _hx_tmp;
HXDLIN( 838)			bool _hx_tmp1;
HXDLIN( 838)			bool _hx_tmp2;
HXDLIN( 838)			bool _hx_tmp3;
HXDLIN( 838)			if (::hx::IsInstanceNotEq( daNote,note )) {
HXLINE( 838)				_hx_tmp3 = daNote->mustPress;
            			}
            			else {
HXLINE( 838)				_hx_tmp3 = false;
            			}
HXDLIN( 838)			if (_hx_tmp3) {
HXLINE( 838)				_hx_tmp2 = (daNote->noteData == note->noteData);
            			}
            			else {
HXLINE( 838)				_hx_tmp2 = false;
            			}
HXDLIN( 838)			if (_hx_tmp2) {
HXLINE( 838)				_hx_tmp1 = (daNote->isSustainNote == note->isSustainNote);
            			}
            			else {
HXLINE( 838)				_hx_tmp1 = false;
            			}
HXDLIN( 838)			if (_hx_tmp1) {
HXLINE( 838)				_hx_tmp = (::Math_obj::abs((daNote->strumTime - note->strumTime)) < 1);
            			}
            			else {
HXLINE( 838)				_hx_tmp = false;
            			}
HXDLIN( 838)			if (_hx_tmp) {
HXLINE( 839)				_gthis->invalidateNote(daNote);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_94828a72d2e97540_835_noteMiss)
HXDLIN( 835)		 ::states::editors::content::EditorPlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 837)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis,daNote)),null());
HXLINE( 842)		bool _hx_tmp;
HXDLIN( 842)		bool _hx_tmp1;
HXDLIN( 842)		if (::hx::IsNotNull( daNote )) {
HXLINE( 842)			_hx_tmp1 = this->guitarHeroSustains;
            		}
            		else {
HXLINE( 842)			_hx_tmp1 = false;
            		}
HXDLIN( 842)		if (_hx_tmp1) {
HXLINE( 842)			_hx_tmp = ::hx::IsNull( daNote->parent );
            		}
            		else {
HXLINE( 842)			_hx_tmp = false;
            		}
HXDLIN( 842)		if (_hx_tmp) {
HXLINE( 843)			if ((daNote->tail->length > 0)) {
HXLINE( 844)				daNote->set_alpha(((Float)0.35));
HXLINE( 845)				{
HXLINE( 845)					int _g = 0;
HXDLIN( 845)					::Array< ::Dynamic> _g1 = daNote->tail;
HXDLIN( 845)					while((_g < _g1->length)){
HXLINE( 845)						 ::objects::Note childNote = _g1->__get(_g).StaticCast<  ::objects::Note >();
HXDLIN( 845)						_g = (_g + 1);
HXLINE( 846)						childNote->set_alpha(daNote->alpha);
HXLINE( 847)						childNote->missed = true;
HXLINE( 848)						childNote->canBeHit = false;
HXLINE( 849)						childNote->ignoreNote = true;
HXLINE( 850)						childNote->tooLate = true;
            					}
            				}
HXLINE( 852)				daNote->missed = true;
HXLINE( 853)				daNote->canBeHit = false;
            			}
HXLINE( 856)			if (daNote->missed) {
HXLINE( 857)				return;
            			}
            		}
HXLINE( 860)		bool _hx_tmp2;
HXDLIN( 860)		bool _hx_tmp3;
HXDLIN( 860)		bool _hx_tmp4;
HXDLIN( 860)		if (::hx::IsNotNull( daNote )) {
HXLINE( 860)			_hx_tmp4 = this->guitarHeroSustains;
            		}
            		else {
HXLINE( 860)			_hx_tmp4 = false;
            		}
HXDLIN( 860)		if (_hx_tmp4) {
HXLINE( 860)			_hx_tmp3 = ::hx::IsNotNull( daNote->parent );
            		}
            		else {
HXLINE( 860)			_hx_tmp3 = false;
            		}
HXDLIN( 860)		if (_hx_tmp3) {
HXLINE( 860)			_hx_tmp2 = daNote->isSustainNote;
            		}
            		else {
HXLINE( 860)			_hx_tmp2 = false;
            		}
HXDLIN( 860)		if (_hx_tmp2) {
HXLINE( 861)			if (daNote->missed) {
HXLINE( 862)				return;
            			}
HXLINE( 864)			 ::objects::Note parentNote = daNote->parent;
HXLINE( 865)			bool _hx_tmp5;
HXDLIN( 865)			if (parentNote->wasGoodHit) {
HXLINE( 865)				_hx_tmp5 = (parentNote->tail->length > 0);
            			}
            			else {
HXLINE( 865)				_hx_tmp5 = false;
            			}
HXDLIN( 865)			if (_hx_tmp5) {
HXLINE( 866)				int _g2 = 0;
HXDLIN( 866)				::Array< ::Dynamic> _g3 = parentNote->tail;
HXDLIN( 866)				while((_g2 < _g3->length)){
HXLINE( 866)					 ::objects::Note child = _g3->__get(_g2).StaticCast<  ::objects::Note >();
HXDLIN( 866)					_g2 = (_g2 + 1);
HXDLIN( 866)					if (::hx::IsInstanceNotEq( child,daNote )) {
HXLINE( 867)						child->missed = true;
HXLINE( 868)						child->canBeHit = false;
HXLINE( 869)						child->ignoreNote = true;
HXLINE( 870)						child->tooLate = true;
            					}
            				}
            			}
            		}
HXLINE( 876)		this->songMisses++;
HXLINE( 877)		this->updateScore();
HXLINE( 878)		this->vocals->set_volume(( (Float)(0) ));
HXLINE( 879)		this->combo = 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,noteMiss,(void))

void EditorPlayState_obj::invalidateNote( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_94828a72d2e97540_882_invalidateNote)
HXLINE( 883)		note->kill();
HXLINE( 884)		this->notes->remove(note,true).StaticCast<  ::objects::Note >();
HXLINE( 885)		note->destroy();
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,invalidateNote,(void))

void EditorPlayState_obj::spawnNoteSplashOnNote( ::objects::Note note){
            	HX_STACKFRAME(&_hx_pos_94828a72d2e97540_889_spawnNoteSplashOnNote)
HXDLIN( 889)		if (::hx::IsNotNull( note )) {
HXLINE( 890)			 ::objects::StrumNote strum = Dynamic( this->playerStrums->members->__get(note->noteData)).StaticCast<  ::objects::StrumNote >();
HXLINE( 891)			if (::hx::IsNotNull( strum )) {
HXLINE( 892)				this->spawnNoteSplash(strum->x,strum->y,note->noteData,note,strum);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EditorPlayState_obj,spawnNoteSplashOnNote,(void))

void EditorPlayState_obj::spawnNoteSplash(Float x,Float y,int data, ::objects::Note note, ::objects::StrumNote strum){
            	HX_GC_STACKFRAME(&_hx_pos_94828a72d2e97540_896_spawnNoteSplash)
HXLINE( 897)		 ::objects::NoteSplash splash =  ::objects::NoteSplash_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 898)		splash->babyArrow = strum;
HXLINE( 899)		splash->spawnSplashNote(null(),null(),null(),note,null());
HXLINE( 900)		this->grpNoteSplashes->add(splash).StaticCast<  ::objects::NoteSplash >();
            	}


HX_DEFINE_DYNAMIC_FUNC5(EditorPlayState_obj,spawnNoteSplash,(void))

void EditorPlayState_obj::updateScore(){
            	HX_STACKFRAME(&_hx_pos_94828a72d2e97540_904_updateScore)
HXDLIN( 904)		this->scoreTxt->set_text((((HX_("Hits: ",86,19,c9,8b) + this->songHits) + HX_(" | Misses: ",f4,d7,bf,55)) + this->songMisses));
            	}


HX_DEFINE_DYNAMIC_FUNC0(EditorPlayState_obj,updateScore,(void))


::hx::ObjectPtr< EditorPlayState_obj > EditorPlayState_obj::__new(::Array< ::Dynamic> noteList,::Array< ::Dynamic> allVocals) {
	::hx::ObjectPtr< EditorPlayState_obj > __this = new EditorPlayState_obj();
	__this->__construct(noteList,allVocals);
	return __this;
}

::hx::ObjectPtr< EditorPlayState_obj > EditorPlayState_obj::__alloc(::hx::Ctx *_hx_ctx,::Array< ::Dynamic> noteList,::Array< ::Dynamic> allVocals) {
	EditorPlayState_obj *__this = (EditorPlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EditorPlayState_obj), true, "states.editors.content.EditorPlayState"));
	*(void **)__this = EditorPlayState_obj::_hx_vtable;
	__this->__construct(noteList,allVocals);
	return __this;
}

EditorPlayState_obj::EditorPlayState_obj()
{
}

void EditorPlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EditorPlayState);
	HX_MARK_MEMBER_NAME(finishTimer,"finishTimer");
	HX_MARK_MEMBER_NAME(noteKillOffset,"noteKillOffset");
	HX_MARK_MEMBER_NAME(spawnTime,"spawnTime");
	HX_MARK_MEMBER_NAME(startingSong,"startingSong");
	HX_MARK_MEMBER_NAME(playbackRate,"playbackRate");
	HX_MARK_MEMBER_NAME(inst,"inst");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(opponentVocals,"opponentVocals");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_MARK_MEMBER_NAME(ratingsData,"ratingsData");
	HX_MARK_MEMBER_NAME(comboGroup,"comboGroup");
	HX_MARK_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_MARK_MEMBER_NAME(opponentStrums,"opponentStrums");
	HX_MARK_MEMBER_NAME(playerStrums,"playerStrums");
	HX_MARK_MEMBER_NAME(grpNoteSplashes,"grpNoteSplashes");
	HX_MARK_MEMBER_NAME(combo,"combo");
	HX_MARK_MEMBER_NAME(lastRating,"lastRating");
	HX_MARK_MEMBER_NAME(lastCombo,"lastCombo");
	HX_MARK_MEMBER_NAME(lastScore,"lastScore");
	HX_MARK_MEMBER_NAME(keysArray,"keysArray");
	HX_MARK_MEMBER_NAME(songHits,"songHits");
	HX_MARK_MEMBER_NAME(songMisses,"songMisses");
	HX_MARK_MEMBER_NAME(songLength,"songLength");
	HX_MARK_MEMBER_NAME(songSpeed,"songSpeed");
	HX_MARK_MEMBER_NAME(showCombo,"showCombo");
	HX_MARK_MEMBER_NAME(showComboNum,"showComboNum");
	HX_MARK_MEMBER_NAME(showRating,"showRating");
	HX_MARK_MEMBER_NAME(startOffset,"startOffset");
	HX_MARK_MEMBER_NAME(startPos,"startPos");
	HX_MARK_MEMBER_NAME(timerToStart,"timerToStart");
	HX_MARK_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_MARK_MEMBER_NAME(dataTxt,"dataTxt");
	HX_MARK_MEMBER_NAME(guitarHeroSustains,"guitarHeroSustains");
	HX_MARK_MEMBER_NAME(_noteList,"_noteList");
	HX_MARK_MEMBER_NAME(lastBeatHit,"lastBeatHit");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void EditorPlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(finishTimer,"finishTimer");
	HX_VISIT_MEMBER_NAME(noteKillOffset,"noteKillOffset");
	HX_VISIT_MEMBER_NAME(spawnTime,"spawnTime");
	HX_VISIT_MEMBER_NAME(startingSong,"startingSong");
	HX_VISIT_MEMBER_NAME(playbackRate,"playbackRate");
	HX_VISIT_MEMBER_NAME(inst,"inst");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(opponentVocals,"opponentVocals");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_VISIT_MEMBER_NAME(ratingsData,"ratingsData");
	HX_VISIT_MEMBER_NAME(comboGroup,"comboGroup");
	HX_VISIT_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_VISIT_MEMBER_NAME(opponentStrums,"opponentStrums");
	HX_VISIT_MEMBER_NAME(playerStrums,"playerStrums");
	HX_VISIT_MEMBER_NAME(grpNoteSplashes,"grpNoteSplashes");
	HX_VISIT_MEMBER_NAME(combo,"combo");
	HX_VISIT_MEMBER_NAME(lastRating,"lastRating");
	HX_VISIT_MEMBER_NAME(lastCombo,"lastCombo");
	HX_VISIT_MEMBER_NAME(lastScore,"lastScore");
	HX_VISIT_MEMBER_NAME(keysArray,"keysArray");
	HX_VISIT_MEMBER_NAME(songHits,"songHits");
	HX_VISIT_MEMBER_NAME(songMisses,"songMisses");
	HX_VISIT_MEMBER_NAME(songLength,"songLength");
	HX_VISIT_MEMBER_NAME(songSpeed,"songSpeed");
	HX_VISIT_MEMBER_NAME(showCombo,"showCombo");
	HX_VISIT_MEMBER_NAME(showComboNum,"showComboNum");
	HX_VISIT_MEMBER_NAME(showRating,"showRating");
	HX_VISIT_MEMBER_NAME(startOffset,"startOffset");
	HX_VISIT_MEMBER_NAME(startPos,"startPos");
	HX_VISIT_MEMBER_NAME(timerToStart,"timerToStart");
	HX_VISIT_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_VISIT_MEMBER_NAME(dataTxt,"dataTxt");
	HX_VISIT_MEMBER_NAME(guitarHeroSustains,"guitarHeroSustains");
	HX_VISIT_MEMBER_NAME(_noteList,"_noteList");
	HX_VISIT_MEMBER_NAME(lastBeatHit,"lastBeatHit");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val EditorPlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"inst") ) { return ::hx::Val( inst ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		if (HX_FIELD_EQ(inName,"combo") ) { return ::hx::Val( combo ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dataTxt") ) { return ::hx::Val( dataTxt ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"endSong") ) { return ::hx::Val( endSong_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"songHits") ) { return ::hx::Val( songHits ); }
		if (HX_FIELD_EQ(inName,"startPos") ) { return ::hx::Val( startPos ); }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { return ::hx::Val( scoreTxt ); }
		if (HX_FIELD_EQ(inName,"noteMiss") ) { return ::hx::Val( noteMiss_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"spawnTime") ) { return ::hx::Val( spawnTime ); }
		if (HX_FIELD_EQ(inName,"lastCombo") ) { return ::hx::Val( lastCombo ); }
		if (HX_FIELD_EQ(inName,"lastScore") ) { return ::hx::Val( lastScore ); }
		if (HX_FIELD_EQ(inName,"keysArray") ) { return ::hx::Val( keysArray ); }
		if (HX_FIELD_EQ(inName,"songSpeed") ) { return ::hx::Val( songSpeed ); }
		if (HX_FIELD_EQ(inName,"showCombo") ) { return ::hx::Val( showCombo ); }
		if (HX_FIELD_EQ(inName,"_noteList") ) { return ::hx::Val( _noteList ); }
		if (HX_FIELD_EQ(inName,"startSong") ) { return ::hx::Val( startSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"keysCheck") ) { return ::hx::Val( keysCheck_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"comboGroup") ) { return ::hx::Val( comboGroup ); }
		if (HX_FIELD_EQ(inName,"lastRating") ) { return ::hx::Val( lastRating ); }
		if (HX_FIELD_EQ(inName,"songMisses") ) { return ::hx::Val( songMisses ); }
		if (HX_FIELD_EQ(inName,"songLength") ) { return ::hx::Val( songLength ); }
		if (HX_FIELD_EQ(inName,"showRating") ) { return ::hx::Val( showRating ); }
		if (HX_FIELD_EQ(inName,"sectionHit") ) { return ::hx::Val( sectionHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"finishSong") ) { return ::hx::Val( finishSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"popUpScore") ) { return ::hx::Val( popUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyPress") ) { return ::hx::Val( onKeyPress_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyPressed") ) { return ::hx::Val( keyPressed_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"finishTimer") ) { return ::hx::Val( finishTimer ); }
		if (HX_FIELD_EQ(inName,"ratingsData") ) { return ::hx::Val( ratingsData ); }
		if (HX_FIELD_EQ(inName,"startOffset") ) { return ::hx::Val( startOffset ); }
		if (HX_FIELD_EQ(inName,"lastBeatHit") ) { return ::hx::Val( lastBeatHit ); }
		if (HX_FIELD_EQ(inName,"keyReleased") ) { return ::hx::Val( keyReleased_dyn() ); }
		if (HX_FIELD_EQ(inName,"goodNoteHit") ) { return ::hx::Val( goodNoteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateScore") ) { return ::hx::Val( updateScore_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"startingSong") ) { return ::hx::Val( startingSong ); }
		if (HX_FIELD_EQ(inName,"playbackRate") ) { return ::hx::Val( playbackRate ); }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { return ::hx::Val( unspawnNotes ); }
		if (HX_FIELD_EQ(inName,"playerStrums") ) { return ::hx::Val( playerStrums ); }
		if (HX_FIELD_EQ(inName,"showComboNum") ) { return ::hx::Val( showComboNum ); }
		if (HX_FIELD_EQ(inName,"timerToStart") ) { return ::hx::Val( timerToStart ); }
		if (HX_FIELD_EQ(inName,"generateSong") ) { return ::hx::Val( generateSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyRelease") ) { return ::hx::Val( onKeyRelease_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"noteKillOffset") ) { return ::hx::Val( noteKillOffset ); }
		if (HX_FIELD_EQ(inName,"opponentVocals") ) { return ::hx::Val( opponentVocals ); }
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { return ::hx::Val( strumLineNotes ); }
		if (HX_FIELD_EQ(inName,"opponentStrums") ) { return ::hx::Val( opponentStrums ); }
		if (HX_FIELD_EQ(inName,"invalidateNote") ) { return ::hx::Val( invalidateNote_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"grpNoteSplashes") ) { return ::hx::Val( grpNoteSplashes ); }
		if (HX_FIELD_EQ(inName,"cachePopUpScore") ) { return ::hx::Val( cachePopUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"opponentNoteHit") ) { return ::hx::Val( opponentNoteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"spawnNoteSplash") ) { return ::hx::Val( spawnNoteSplash_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"guitarHeroSustains") ) { return ::hx::Val( guitarHeroSustains ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"generateStaticArrows") ) { return ::hx::Val( generateStaticArrows_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"spawnNoteSplashOnNote") ) { return ::hx::Val( spawnNoteSplashOnNote_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val EditorPlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"inst") ) { inst=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"combo") ) { combo=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dataTxt") ) { dataTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"songHits") ) { songHits=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startPos") ) { startPos=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { scoreTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"spawnTime") ) { spawnTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastCombo") ) { lastCombo=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastScore") ) { lastScore=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysArray") ) { keysArray=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songSpeed") ) { songSpeed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showCombo") ) { showCombo=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_noteList") ) { _noteList=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"comboGroup") ) { comboGroup=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastRating") ) { lastRating=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songMisses") ) { songMisses=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songLength") ) { songLength=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showRating") ) { showRating=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"finishTimer") ) { finishTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratingsData") ) { ratingsData=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startOffset") ) { startOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastBeatHit") ) { lastBeatHit=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"startingSong") ) { startingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playbackRate") ) { playbackRate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { unspawnNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playerStrums") ) { playerStrums=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showComboNum") ) { showComboNum=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timerToStart") ) { timerToStart=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"noteKillOffset") ) { noteKillOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opponentVocals") ) { opponentVocals=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { strumLineNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opponentStrums") ) { opponentStrums=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"grpNoteSplashes") ) { grpNoteSplashes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"guitarHeroSustains") ) { guitarHeroSustains=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EditorPlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("finishTimer",72,e2,3a,37));
	outFields->push(HX_("noteKillOffset",63,b4,6d,a3));
	outFields->push(HX_("spawnTime",e8,cf,87,ac));
	outFields->push(HX_("startingSong",b5,31,61,33));
	outFields->push(HX_("playbackRate",9b,3a,8b,c0));
	outFields->push(HX_("inst",c6,43,bb,45));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("opponentVocals",db,d1,18,64));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("unspawnNotes",9f,67,f2,45));
	outFields->push(HX_("ratingsData",00,fb,a3,bb));
	outFields->push(HX_("comboGroup",11,20,ea,a7));
	outFields->push(HX_("strumLineNotes",24,f1,48,a4));
	outFields->push(HX_("opponentStrums",87,04,01,1c));
	outFields->push(HX_("playerStrums",4b,e1,2a,0d));
	outFields->push(HX_("grpNoteSplashes",2c,f3,de,7b));
	outFields->push(HX_("combo",4e,28,5d,4a));
	outFields->push(HX_("lastRating",13,17,65,86));
	outFields->push(HX_("lastCombo",18,56,0a,97));
	outFields->push(HX_("lastScore",1c,a1,86,c5));
	outFields->push(HX_("keysArray",05,67,3a,17));
	outFields->push(HX_("songHits",35,a1,e6,32));
	outFields->push(HX_("songMisses",1f,08,d9,b1));
	outFields->push(HX_("songLength",9b,3a,8c,fa));
	outFields->push(HX_("songSpeed",72,df,e3,b0));
	outFields->push(HX_("showCombo",11,8e,c1,78));
	outFields->push(HX_("showComboNum",b5,68,a3,9d));
	outFields->push(HX_("showRating",fa,d8,fe,24));
	outFields->push(HX_("startOffset",95,f5,25,d8));
	outFields->push(HX_("startPos",52,0a,99,42));
	outFields->push(HX_("timerToStart",a2,db,42,55));
	outFields->push(HX_("scoreTxt",3e,12,c4,0e));
	outFields->push(HX_("dataTxt",66,86,d9,11));
	outFields->push(HX_("guitarHeroSustains",74,ae,d8,47));
	outFields->push(HX_("_noteList",cf,38,7c,9e));
	outFields->push(HX_("lastBeatHit",c7,9e,b0,28));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EditorPlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(EditorPlayState_obj,finishTimer),HX_("finishTimer",72,e2,3a,37)},
	{::hx::fsFloat,(int)offsetof(EditorPlayState_obj,noteKillOffset),HX_("noteKillOffset",63,b4,6d,a3)},
	{::hx::fsFloat,(int)offsetof(EditorPlayState_obj,spawnTime),HX_("spawnTime",e8,cf,87,ac)},
	{::hx::fsBool,(int)offsetof(EditorPlayState_obj,startingSong),HX_("startingSong",b5,31,61,33)},
	{::hx::fsFloat,(int)offsetof(EditorPlayState_obj,playbackRate),HX_("playbackRate",9b,3a,8b,c0)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(EditorPlayState_obj,inst),HX_("inst",c6,43,bb,45)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(EditorPlayState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(EditorPlayState_obj,opponentVocals),HX_("opponentVocals",db,d1,18,64)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(EditorPlayState_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(EditorPlayState_obj,unspawnNotes),HX_("unspawnNotes",9f,67,f2,45)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(EditorPlayState_obj,ratingsData),HX_("ratingsData",00,fb,a3,bb)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(EditorPlayState_obj,comboGroup),HX_("comboGroup",11,20,ea,a7)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(EditorPlayState_obj,strumLineNotes),HX_("strumLineNotes",24,f1,48,a4)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(EditorPlayState_obj,opponentStrums),HX_("opponentStrums",87,04,01,1c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(EditorPlayState_obj,playerStrums),HX_("playerStrums",4b,e1,2a,0d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(EditorPlayState_obj,grpNoteSplashes),HX_("grpNoteSplashes",2c,f3,de,7b)},
	{::hx::fsInt,(int)offsetof(EditorPlayState_obj,combo),HX_("combo",4e,28,5d,4a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(EditorPlayState_obj,lastRating),HX_("lastRating",13,17,65,86)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(EditorPlayState_obj,lastCombo),HX_("lastCombo",18,56,0a,97)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(EditorPlayState_obj,lastScore),HX_("lastScore",1c,a1,86,c5)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(EditorPlayState_obj,keysArray),HX_("keysArray",05,67,3a,17)},
	{::hx::fsInt,(int)offsetof(EditorPlayState_obj,songHits),HX_("songHits",35,a1,e6,32)},
	{::hx::fsInt,(int)offsetof(EditorPlayState_obj,songMisses),HX_("songMisses",1f,08,d9,b1)},
	{::hx::fsFloat,(int)offsetof(EditorPlayState_obj,songLength),HX_("songLength",9b,3a,8c,fa)},
	{::hx::fsFloat,(int)offsetof(EditorPlayState_obj,songSpeed),HX_("songSpeed",72,df,e3,b0)},
	{::hx::fsBool,(int)offsetof(EditorPlayState_obj,showCombo),HX_("showCombo",11,8e,c1,78)},
	{::hx::fsBool,(int)offsetof(EditorPlayState_obj,showComboNum),HX_("showComboNum",b5,68,a3,9d)},
	{::hx::fsBool,(int)offsetof(EditorPlayState_obj,showRating),HX_("showRating",fa,d8,fe,24)},
	{::hx::fsFloat,(int)offsetof(EditorPlayState_obj,startOffset),HX_("startOffset",95,f5,25,d8)},
	{::hx::fsFloat,(int)offsetof(EditorPlayState_obj,startPos),HX_("startPos",52,0a,99,42)},
	{::hx::fsFloat,(int)offsetof(EditorPlayState_obj,timerToStart),HX_("timerToStart",a2,db,42,55)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(EditorPlayState_obj,scoreTxt),HX_("scoreTxt",3e,12,c4,0e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(EditorPlayState_obj,dataTxt),HX_("dataTxt",66,86,d9,11)},
	{::hx::fsBool,(int)offsetof(EditorPlayState_obj,guitarHeroSustains),HX_("guitarHeroSustains",74,ae,d8,47)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(EditorPlayState_obj,_noteList),HX_("_noteList",cf,38,7c,9e)},
	{::hx::fsInt,(int)offsetof(EditorPlayState_obj,lastBeatHit),HX_("lastBeatHit",c7,9e,b0,28)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *EditorPlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String EditorPlayState_obj_sMemberFields[] = {
	HX_("finishTimer",72,e2,3a,37),
	HX_("noteKillOffset",63,b4,6d,a3),
	HX_("spawnTime",e8,cf,87,ac),
	HX_("startingSong",b5,31,61,33),
	HX_("playbackRate",9b,3a,8b,c0),
	HX_("inst",c6,43,bb,45),
	HX_("vocals",5e,10,51,59),
	HX_("opponentVocals",db,d1,18,64),
	HX_("notes",41,dc,ca,9f),
	HX_("unspawnNotes",9f,67,f2,45),
	HX_("ratingsData",00,fb,a3,bb),
	HX_("comboGroup",11,20,ea,a7),
	HX_("strumLineNotes",24,f1,48,a4),
	HX_("opponentStrums",87,04,01,1c),
	HX_("playerStrums",4b,e1,2a,0d),
	HX_("grpNoteSplashes",2c,f3,de,7b),
	HX_("combo",4e,28,5d,4a),
	HX_("lastRating",13,17,65,86),
	HX_("lastCombo",18,56,0a,97),
	HX_("lastScore",1c,a1,86,c5),
	HX_("keysArray",05,67,3a,17),
	HX_("songHits",35,a1,e6,32),
	HX_("songMisses",1f,08,d9,b1),
	HX_("songLength",9b,3a,8c,fa),
	HX_("songSpeed",72,df,e3,b0),
	HX_("showCombo",11,8e,c1,78),
	HX_("showComboNum",b5,68,a3,9d),
	HX_("showRating",fa,d8,fe,24),
	HX_("startOffset",95,f5,25,d8),
	HX_("startPos",52,0a,99,42),
	HX_("timerToStart",a2,db,42,55),
	HX_("scoreTxt",3e,12,c4,0e),
	HX_("dataTxt",66,86,d9,11),
	HX_("guitarHeroSustains",74,ae,d8,47),
	HX_("_noteList",cf,38,7c,9e),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("lastBeatHit",c7,9e,b0,28),
	HX_("beatHit",7d,ea,04,74),
	HX_("sectionHit",6e,f5,cd,be),
	HX_("destroy",fa,2c,86,24),
	HX_("startSong",57,9d,4b,05),
	HX_("generateSong",aa,ed,2b,1f),
	HX_("generateStaticArrows",ad,44,90,42),
	HX_("finishSong",c8,b5,92,d8),
	HX_("endSong",50,dd,7c,2e),
	HX_("cachePopUpScore",48,66,94,1e),
	HX_("popUpScore",66,a1,f2,3f),
	HX_("onKeyPress",a3,cd,a8,ea),
	HX_("keyPressed",c3,72,6e,a8),
	HX_("onKeyRelease",e7,c7,b8,9f),
	HX_("keyReleased",7c,05,0c,bf),
	HX_("keysCheck",34,92,61,37),
	HX_("opponentNoteHit",64,75,4c,b1),
	HX_("goodNoteHit",c4,4d,c4,22),
	HX_("noteMiss",0e,78,8f,57),
	HX_("invalidateNote",0d,37,d7,6e),
	HX_("spawnNoteSplashOnNote",e5,04,43,52),
	HX_("spawnNoteSplash",14,69,b8,ca),
	HX_("updateScore",89,dc,71,5e),
	::String(null()) };

::hx::Class EditorPlayState_obj::__mClass;

void EditorPlayState_obj::__register()
{
	EditorPlayState_obj _hx_dummy;
	EditorPlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.editors.content.EditorPlayState",47,65,03,7b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EditorPlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EditorPlayState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EditorPlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EditorPlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace editors
} // end namespace content
