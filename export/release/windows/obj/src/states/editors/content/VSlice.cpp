// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_backend_Difficulty
#include <backend/Difficulty.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_states_MainMenuState
#include <states/MainMenuState.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_states_editors_content_VSlice
#include <states/editors/content/VSlice.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_2e0cdb438c3f1633_92_convertToPsych,"states.editors.content.VSlice","convertToPsych",0xd63be0b6,"states.editors.content.VSlice.convertToPsych","states/editors/content/VSlice.hx",92,0xbdca5ad6)
HX_LOCAL_STACK_FRAME(_hx_pos_2e0cdb438c3f1633_318_export,"states.editors.content.VSlice","export",0x70d00d1d,"states.editors.content.VSlice.export","states/editors/content/VSlice.hx",318,0xbdca5ad6)
HX_LOCAL_STACK_FRAME(_hx_pos_2e0cdb438c3f1633_462_emptySection,"states.editors.content.VSlice","emptySection",0xb2bf2f41,"states.editors.content.VSlice.emptySection","states/editors/content/VSlice.hx",462,0xbdca5ad6)
HX_LOCAL_STACK_FRAME(_hx_pos_2e0cdb438c3f1633_470_sortByTime,"states.editors.content.VSlice","sortByTime",0x4494ffab,"states.editors.content.VSlice.sortByTime","states/editors/content/VSlice.hx",470,0xbdca5ad6)
HX_LOCAL_STACK_FRAME(_hx_pos_2e0cdb438c3f1633_89_boot,"states.editors.content.VSlice","boot",0xc77c939b,"states.editors.content.VSlice.boot","states/editors/content/VSlice.hx",89,0xbdca5ad6)
HX_LOCAL_STACK_FRAME(_hx_pos_2e0cdb438c3f1633_90_boot,"states.editors.content.VSlice","boot",0xc77c939b,"states.editors.content.VSlice.boot","states/editors/content/VSlice.hx",90,0xbdca5ad6)
namespace states{
namespace editors{
namespace content{

void VSlice_obj::__construct() { }

Dynamic VSlice_obj::__CreateEmpty() { return new VSlice_obj; }

void *VSlice_obj::_hx_vtable = 0;

Dynamic VSlice_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VSlice_obj > _hx_result = new VSlice_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool VSlice_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5346dab1;
}

::String VSlice_obj::metadataVersion;

::String VSlice_obj::chartVersion;

 ::Dynamic VSlice_obj::convertToPsych( ::Dynamic chart, ::Dynamic metadata){
            	HX_GC_STACKFRAME(&_hx_pos_2e0cdb438c3f1633_92_convertToPsych)
HXLINE(  93)		 ::haxe::ds::StringMap songDifficulties =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  94)		::Array< ::Dynamic> timeChanges = ( (::Array< ::Dynamic>)(metadata->__Field(HX_("timeChanges",76,58,22,3f),::hx::paccDynamic)) );
HXLINE(  95)		timeChanges->sort(::states::editors::content::VSlice_obj::sortByTime_dyn());
HXLINE(  97)		Float songBpm = ( (Float)(timeChanges->__get(0)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE(  98)		timeChanges->shift();
HXLINE( 100)		::String stage = ( (::String)( ::Dynamic(metadata->__Field(HX_("playData",3e,ba,76,32),::hx::paccDynamic))->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) );
HXLINE( 101)		::String _hx_switch_0 = stage;
            		if (  (_hx_switch_0==HX_("limoRide",b7,15,7a,e4)) ){
HXLINE( 110)			stage = HX_("limo",1f,17,b3,47);
HXDLIN( 110)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("mainStage",c5,33,af,9d)) ){
HXLINE( 104)			stage = HX_("stage",be,6a,0b,84);
HXDLIN( 104)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("mallXmas",1b,06,6c,b4)) ){
HXLINE( 112)			stage = HX_("mall",d4,3a,56,48);
HXDLIN( 112)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("phillyTrain",80,9b,65,bb)) ){
HXLINE( 108)			stage = HX_("philly",28,77,5e,ef);
HXDLIN( 108)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("spookyMansion",24,c4,ab,7a)) ){
HXLINE( 106)			stage = HX_("spooky",eb,bd,9e,c1);
HXDLIN( 106)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("tankmanBattlefield",72,e4,00,e5)) ){
HXLINE( 114)			stage = HX_("tank",ea,ba,f6,4c);
HXDLIN( 114)			goto _hx_goto_0;
            		}
            		_hx_goto_0:;
HXLINE( 116)		Float lastNoteTime = ( (Float)(0) );
HXLINE( 117)		 ::haxe::ds::StringMap notesMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 118)		{
HXLINE( 118)			int _g = 0;
HXDLIN( 118)			::Array< ::String > _g1 = ( (::Array< ::String >)( ::Dynamic(metadata->__Field(HX_("playData",3e,ba,76,32),::hx::paccDynamic))->__Field(HX_("difficulties",59,c7,5e,02),::hx::paccDynamic)) );
HXDLIN( 118)			while((_g < _g1->length)){
HXLINE( 118)				::String diff = _g1->__get(_g);
HXDLIN( 118)				_g = (_g + 1);
HXLINE( 120)				::Array< ::Dynamic> notes = ( (::Array< ::Dynamic>)(::Reflect_obj::field( ::Dynamic(chart->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)),diff)) );
HXLINE( 121)				if (::hx::IsNull( notes )) {
HXLINE( 121)					notes = ::Array_obj< ::Dynamic>::__new(0);
            				}
HXLINE( 122)				notes->sort(::states::editors::content::VSlice_obj::sortByTime_dyn());
HXLINE( 124)				notesMap->set(diff,notes);
HXLINE( 126)				 ::Dynamic lastNote = notes->__get((notes->length - 1));
HXLINE( 127)				bool _hx_tmp;
HXDLIN( 127)				if ((notes->length > 0)) {
HXLINE( 127)					_hx_tmp = ::hx::IsGreater( lastNote->__Field(HX_("t",74,00,00,00),::hx::paccDynamic),lastNoteTime );
            				}
            				else {
HXLINE( 127)					_hx_tmp = false;
            				}
HXDLIN( 127)				if (_hx_tmp) {
HXLINE( 128)					lastNoteTime = ( (Float)(lastNote->__Field(HX_("t",74,00,00,00),::hx::paccDynamic)) );
            				}
            			}
            		}
HXLINE( 131)		::Array< bool > sectionMustHits = ::Array_obj< bool >::__new(0);
HXLINE( 133)		::cpp::VirtualArray focusCameraEvents = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 134)		::cpp::VirtualArray allEvents = ( (::cpp::VirtualArray)(chart->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) );
HXLINE( 135)		bool _hx_tmp1;
HXDLIN( 135)		if (::hx::IsNotNull( allEvents )) {
HXLINE( 135)			_hx_tmp1 = (allEvents->get_length() > 0);
            		}
            		else {
HXLINE( 135)			_hx_tmp1 = false;
            		}
HXDLIN( 135)		if (_hx_tmp1) {
HXLINE( 137)			Float time = ( (Float)(0) );
HXLINE( 138)			allEvents->sort(::states::editors::content::VSlice_obj::sortByTime_dyn());
HXLINE( 140)			::cpp::VirtualArray _g2 = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 140)			int _g3 = 0;
HXDLIN( 140)			::cpp::VirtualArray _g4 = allEvents;
HXDLIN( 140)			while((_g3 < _g4->get_length())){
HXLINE( 140)				 ::Dynamic v = _g4->__get(_g3);
HXDLIN( 140)				_g3 = (_g3 + 1);
HXDLIN( 140)				bool focusCameraEvents1;
HXDLIN( 140)				if (::hx::IsEq( v->__Field(HX_("e",65,00,00,00),::hx::paccDynamic),HX_("FocusCamera",7d,24,ca,ee) )) {
HXLINE( 140)					bool focusCameraEvents2;
HXDLIN( 140)					if (::hx::IsNotEq( v->__Field(HX_("v",76,00,00,00),::hx::paccDynamic),0 )) {
HXLINE( 140)						focusCameraEvents2 = ::hx::IsEq( v->__Field(HX_("v",76,00,00,00),::hx::paccDynamic),1 );
            					}
            					else {
HXLINE( 140)						focusCameraEvents2 = true;
            					}
HXDLIN( 140)					if (!(focusCameraEvents2)) {
HXLINE( 140)						focusCameraEvents1 = ::hx::IsNotNull(  ::Dynamic(v->__Field(HX_("v",76,00,00,00),::hx::paccDynamic))->__Field(HX_("char",d6,5e,bf,41),::hx::paccDynamic) );
            					}
            					else {
HXLINE( 140)						focusCameraEvents1 = true;
            					}
            				}
            				else {
HXLINE( 140)					focusCameraEvents1 = false;
            				}
HXDLIN( 140)				if (focusCameraEvents1) {
HXLINE( 140)					_g2->push(v);
            				}
            			}
HXDLIN( 140)			focusCameraEvents = _g2;
HXLINE( 141)			if ((focusCameraEvents->get_length() > 0)) {
HXLINE( 143)				int focusEventNum = 0;
HXLINE( 144)				bool lastMustHit = false;
HXLINE( 145)				while(::hx::IsLess( time,focusCameraEvents->__get((focusCameraEvents->get_length() - 1))->__Field(HX_("t",74,00,00,00),::hx::paccDynamic) )){
HXLINE( 147)					Float bpm = songBpm;
HXLINE( 148)					Float sectionTime = ( (Float)(0) );
HXLINE( 149)					if ((timeChanges->length > 0)) {
HXLINE( 151)						int _g5 = 0;
HXDLIN( 151)						while((_g5 < timeChanges->length)){
HXLINE( 151)							 ::Dynamic bpmChange = timeChanges->__get(_g5);
HXDLIN( 151)							_g5 = (_g5 + 1);
HXLINE( 153)							if (::hx::IsLess( time,bpmChange->__Field(HX_("t",74,00,00,00),::hx::paccDynamic) )) {
HXLINE( 153)								goto _hx_goto_4;
            							}
HXLINE( 154)							bpm = ( (Float)(bpmChange->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            						}
            						_hx_goto_4:;
            					}
HXLINE( 158)					{
HXLINE( 158)						int _g6 = focusEventNum;
HXDLIN( 158)						int _g7 = focusCameraEvents->get_length();
HXDLIN( 158)						while((_g6 < _g7)){
HXLINE( 158)							_g6 = (_g6 + 1);
HXDLIN( 158)							int i = (_g6 - 1);
HXLINE( 160)							 ::Dynamic focusEvent = focusCameraEvents->__get(i);
HXLINE( 161)							if (::hx::IsLess( (time + 1),focusEvent->__Field(HX_("t",74,00,00,00),::hx::paccDynamic) )) {
HXLINE( 163)								focusEventNum = i;
HXLINE( 164)								goto _hx_goto_5;
            							}
HXLINE( 167)							 ::Dynamic _hx_char =  ::Dynamic( ::Dynamic(focusEvent->__Field(HX_("v",76,00,00,00),::hx::paccDynamic))->__Field(HX_("char",d6,5e,bf,41),::hx::paccDynamic));
HXLINE( 168)							if (::hx::IsNotNull( _hx_char )) {
HXLINE( 169)								_hx_char = ::Std_obj::string(_hx_char);
            							}
            							else {
HXLINE( 171)								_hx_char = ::Std_obj::string( ::Dynamic(focusEvent->__Field(HX_("v",76,00,00,00),::hx::paccDynamic)));
            							}
HXLINE( 173)							if (::hx::IsNull( _hx_char )) {
HXLINE( 173)								_hx_char = HX_("1",31,00,00,00);
            							}
HXLINE( 174)							lastMustHit = ::hx::IsEq( _hx_char,HX_("0",30,00,00,00) );
            						}
            						_hx_goto_5:;
            					}
HXLINE( 176)					sectionMustHits->push(lastMustHit);
HXLINE( 177)					sectionTime = (((( (Float)(60) ) / bpm) * ( (Float)(1000) )) * ( (Float)(4) ));
HXLINE( 178)					time = (time + sectionTime);
            				}
            			}
            		}
HXLINE( 182)		if ((sectionMustHits->length < 1)) {
HXLINE( 182)			sectionMustHits->push(false);
            		}
HXLINE( 184)		::Array< ::Dynamic> baseSections = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 185)		::Array< Float > sectionTimes = ::Array_obj< Float >::__new(0);
HXLINE( 186)		Float bpm1 = songBpm;
HXLINE( 187)		Float lastBpm = songBpm;
HXLINE( 188)		Float time1 = ( (Float)(0) );
HXLINE( 189)		while((time1 < lastNoteTime)){
HXLINE( 191)			Float sectionTime1 = ( (Float)(0) );
HXLINE( 192)			if ((timeChanges->length > 0)) {
HXLINE( 194)				int _g8 = 0;
HXDLIN( 194)				while((_g8 < timeChanges->length)){
HXLINE( 194)					 ::Dynamic bpmChange1 = timeChanges->__get(_g8);
HXDLIN( 194)					_g8 = (_g8 + 1);
HXLINE( 196)					if (::hx::IsLess( time1,bpmChange1->__Field(HX_("t",74,00,00,00),::hx::paccDynamic) )) {
HXLINE( 196)						goto _hx_goto_7;
            					}
HXLINE( 197)					bpm1 = ( (Float)(bpmChange1->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            				}
            				_hx_goto_7:;
            			}
HXLINE( 200)			sectionTime1 = (((( (Float)(60) ) / bpm1) * ( (Float)(1000) )) * ( (Float)(4) ));
HXLINE( 201)			sectionTimes->push(time1);
HXLINE( 202)			time1 = (time1 + sectionTime1);
HXLINE( 204)			 ::Dynamic sec = ::states::editors::content::VSlice_obj::emptySection();
HXLINE( 205)			int _hx_tmp2;
HXDLIN( 205)			if ((baseSections->length >= sectionMustHits->length)) {
HXLINE( 205)				_hx_tmp2 = (sectionMustHits->length - 1);
            			}
            			else {
HXLINE( 205)				_hx_tmp2 = baseSections->length;
            			}
HXDLIN( 205)			sec->__SetField(HX_("mustHitSection",3b,5f,87,62),sectionMustHits->__get(_hx_tmp2),::hx::paccDynamic);
HXLINE( 206)			if ((lastBpm != bpm1)) {
HXLINE( 208)				sec->__SetField(HX_("changeBPM",4f,4f,f8,1d),true,::hx::paccDynamic);
HXLINE( 209)				sec->__SetField(HX_("bpm",df,be,4a,00),bpm1,::hx::paccDynamic);
HXLINE( 210)				lastBpm = bpm1;
            			}
HXLINE( 212)			baseSections->push(sec);
            		}
HXLINE( 217)		{
HXLINE( 217)			int _g9 = 0;
HXDLIN( 217)			::Array< ::String > _g10 = ( (::Array< ::String >)( ::Dynamic(metadata->__Field(HX_("playData",3e,ba,76,32),::hx::paccDynamic))->__Field(HX_("difficulties",59,c7,5e,02),::hx::paccDynamic)) );
HXDLIN( 217)			while((_g9 < _g10->length)){
HXLINE( 217)				::String diff1 = _g10->__get(_g9);
HXDLIN( 217)				_g9 = (_g9 + 1);
HXLINE( 219)				Float scrollSpeed;
HXDLIN( 219)				if (::Reflect_obj::hasField( ::Dynamic(chart->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic)),diff1)) {
HXLINE( 219)					scrollSpeed = ( (Float)(::Reflect_obj::field( ::Dynamic(chart->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic)),diff1)) );
            				}
            				else {
HXLINE( 219)					scrollSpeed = ( (Float)(::Reflect_obj::field( ::Dynamic(chart->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic)),HX_("default",c1,d8,c3,9b))) );
            				}
HXLINE( 220)				::Array< ::Dynamic> notes1 = ( (::Array< ::Dynamic>)(notesMap->get(diff1)) );
HXLINE( 222)				::Array< ::Dynamic> sectionData = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 223)				{
HXLINE( 223)					int _g11 = 0;
HXDLIN( 223)					while((_g11 < baseSections->length)){
HXLINE( 223)						 ::Dynamic section = baseSections->__get(_g11);
HXDLIN( 223)						_g11 = (_g11 + 1);
HXLINE( 225)						 ::Dynamic sec1 = ::states::editors::content::VSlice_obj::emptySection();
HXLINE( 226)						sec1->__SetField(HX_("mustHitSection",3b,5f,87,62),section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 227)						if (::Reflect_obj::hasField(section,HX_("changeBPM",4f,4f,f8,1d))) {
HXLINE( 229)							sec1->__SetField(HX_("changeBPM",4f,4f,f8,1d),section->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic),::hx::paccDynamic);
HXLINE( 230)							sec1->__SetField(HX_("bpm",df,be,4a,00),section->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic),::hx::paccDynamic);
            						}
HXLINE( 232)						sectionData->push(sec1);
            					}
            				}
HXLINE( 235)				int noteSec = 0;
HXLINE( 236)				Float time2 = ( (Float)(0) );
HXLINE( 237)				{
HXLINE( 237)					int _g12 = 0;
HXDLIN( 237)					while((_g12 < notes1->length)){
HXLINE( 237)						 ::Dynamic note = notes1->__get(_g12);
HXDLIN( 237)						_g12 = (_g12 + 1);
HXLINE( 239)						while(true){
HXLINE( 239)							bool _hx_tmp3;
HXDLIN( 239)							if (((noteSec + 1) < sectionTimes->length)) {
HXLINE( 239)								_hx_tmp3 = ::hx::IsLessEq( sectionTimes->__get((noteSec + 1)),note->__Field(HX_("t",74,00,00,00),::hx::paccDynamic) );
            							}
            							else {
HXLINE( 239)								_hx_tmp3 = false;
            							}
HXDLIN( 239)							if (!(_hx_tmp3)) {
HXLINE( 239)								goto _hx_goto_11;
            							}
HXLINE( 240)							noteSec = (noteSec + 1);
            						}
            						_hx_goto_11:;
HXLINE( 242)						 ::Dynamic psychNote;
HXDLIN( 242)						if (::hx::IsNotNull( note->__Field(HX_("l",6c,00,00,00),::hx::paccDynamic) )) {
HXLINE( 242)							psychNote =  ::Dynamic(note->__Field(HX_("l",6c,00,00,00),::hx::paccDynamic));
            						}
            						else {
HXLINE( 242)							psychNote = 0;
            						}
HXDLIN( 242)						::cpp::VirtualArray psychNote1 = ::cpp::VirtualArray_obj::__new(3)->init(0, ::Dynamic(note->__Field(HX_("t",74,00,00,00),::hx::paccDynamic)))->init(1, ::Dynamic(note->__Field(HX_("d",64,00,00,00),::hx::paccDynamic)))->init(2,psychNote);
HXLINE( 243)						bool _hx_tmp4;
HXDLIN( 243)						bool _hx_tmp5;
HXDLIN( 243)						if (::hx::IsNotNull( note->__Field(HX_("k",6b,00,00,00),::hx::paccDynamic) )) {
HXLINE( 243)							_hx_tmp5 = (( (::String)(note->__Field(HX_("k",6b,00,00,00),::hx::paccDynamic)) ).length > 0);
            						}
            						else {
HXLINE( 243)							_hx_tmp5 = false;
            						}
HXDLIN( 243)						if (_hx_tmp5) {
HXLINE( 243)							_hx_tmp4 = ::hx::IsNotEq( note->__Field(HX_("k",6b,00,00,00),::hx::paccDynamic),HX_("normal",27,72,69,30) );
            						}
            						else {
HXLINE( 243)							_hx_tmp4 = false;
            						}
HXDLIN( 243)						if (_hx_tmp4) {
HXLINE( 243)							psychNote1->push( ::Dynamic(note->__Field(HX_("k",6b,00,00,00),::hx::paccDynamic)));
            						}
HXLINE( 245)						if (::hx::IsNotNull( sectionData->__get(noteSec) )) {
HXLINE( 246)							( (::cpp::VirtualArray)(sectionData->__get(noteSec)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(psychNote1);
            						}
            					}
            				}
HXLINE( 249)				 ::Dynamic swagSong =  ::Dynamic(::hx::Anon_obj::Create(12)
            					->setFixed(0,HX_("speed",87,97,69,81),scrollSpeed)
            					->setFixed(1,HX_("stage",be,6a,0b,84),stage)
            					->setFixed(2,HX_("player1",b0,09,15,8a), ::Dynamic( ::Dynamic( ::Dynamic(metadata->__Field(HX_("playData",3e,ba,76,32),::hx::paccDynamic))->__Field(HX_("characters",aa,58,ce,55),::hx::paccDynamic))->__Field(HX_("player",61,eb,b8,37),::hx::paccDynamic)))
            					->setFixed(3,HX_("player2",b1,09,15,8a), ::Dynamic( ::Dynamic( ::Dynamic(metadata->__Field(HX_("playData",3e,ba,76,32),::hx::paccDynamic))->__Field(HX_("characters",aa,58,ce,55),::hx::paccDynamic))->__Field(HX_("opponent",9d,b9,b8,f8),::hx::paccDynamic)))
            					->setFixed(4,HX_("events",19,4f,6a,96),::cpp::VirtualArray_obj::__new(0))
            					->setFixed(5,HX_("notes",41,dc,ca,9f),sectionData)
            					->setFixed(6,HX_("gfVersion",b9,c6,7d,f3), ::Dynamic( ::Dynamic( ::Dynamic(metadata->__Field(HX_("playData",3e,ba,76,32),::hx::paccDynamic))->__Field(HX_("characters",aa,58,ce,55),::hx::paccDynamic))->__Field(HX_("girlfriend",ba,91,48,98),::hx::paccDynamic)))
            					->setFixed(7,HX_("format",37,8f,8e,fd),HX_("psych_v1_convert",33,b9,d0,ee))
            					->setFixed(8,HX_("bpm",df,be,4a,00),songBpm)
            					->setFixed(9,HX_("needsVoices",be,05,e9,0d),true)
            					->setFixed(10,HX_("song",d5,23,58,4c), ::Dynamic(metadata->__Field(HX_("songName",c0,d0,d7,36),::hx::paccDynamic)))
            					->setFixed(11,HX_("offset",93,97,3f,60),( (Float)(0) )));
HXLINE( 265)				::Reflect_obj::setField(swagSong,HX_("artist",c7,f2,48,b9), ::Dynamic(metadata->__Field(HX_("artist",c7,f2,48,b9),::hx::paccDynamic)));
HXLINE( 266)				::Reflect_obj::setField(swagSong,HX_("charter",cb,68,7b,cf), ::Dynamic(metadata->__Field(HX_("charter",cb,68,7b,cf),::hx::paccDynamic)));
HXLINE( 267)				::Reflect_obj::setField(swagSong,HX_("generatedBy",46,6b,37,46),((HX_("Psych Engine v",5d,a0,37,c7) + ::states::MainMenuState_obj::psychEngineVersion) + HX_(" - Chart Editor V-Slice Importer",35,f1,ba,c7)));
HXLINE( 268)				songDifficulties->set(diff1,swagSong);
            			}
            		}
HXLINE( 270)		 ::Dynamic pack =  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("events",19,4f,6a,96),null())
            			->setFixed(1,HX_("difficulties",59,c7,5e,02),songDifficulties));
HXLINE( 272)		::cpp::VirtualArray fileEvents = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 273)		::cpp::VirtualArray _g13 = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 273)		{
HXLINE( 273)			int _g14 = 0;
HXDLIN( 273)			::cpp::VirtualArray _g15 = allEvents;
HXDLIN( 273)			while((_g14 < _g15->get_length())){
HXLINE( 273)				 ::Dynamic v1 = _g15->__get(_g14);
HXDLIN( 273)				_g14 = (_g14 + 1);
HXDLIN( 273)				if (!(focusCameraEvents->contains(v1))) {
HXLINE( 273)					_g13->push(v1);
            				}
            			}
            		}
HXDLIN( 273)		::cpp::VirtualArray remainingEvents = _g13;
HXLINE( 274)		if ((remainingEvents->get_length() > 0)) {
HXLINE( 276)			{
HXLINE( 276)				int _g_current = 0;
HXDLIN( 276)				::cpp::VirtualArray _g_array = remainingEvents;
HXDLIN( 276)				while((_g_current < _g_array->get_length())){
HXLINE( 276)					 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN( 276)					_g_current = (_g_current + 1);
HXDLIN( 276)					int _g_key = (_g_current - 1);
HXDLIN( 276)					int num = _g_key;
HXDLIN( 276)					 ::Dynamic event = _g_value;
HXLINE( 277)					{
HXLINE( 278)						::cpp::VirtualArray fields = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 279)						if (::hx::IsNotNull( event->__Field(HX_("v",76,00,00,00),::hx::paccDynamic) )) {
HXLINE( 281)							 ::ValueType _g16 = ::Type_obj::_hx_typeof( ::Dynamic(event->__Field(HX_("v",76,00,00,00),::hx::paccDynamic)));
HXDLIN( 281)							switch((int)(_g16->_hx_getIndex())){
            								case (int)4: {
HXLINE( 284)									int _g17 = 0;
HXDLIN( 284)									::Array< ::String > _g18 = ::Reflect_obj::fields( ::Dynamic(event->__Field(HX_("v",76,00,00,00),::hx::paccDynamic)));
HXDLIN( 284)									while((_g17 < _g18->length)){
HXLINE( 284)										::String field = _g18->__get(_g17);
HXDLIN( 284)										_g17 = (_g17 + 1);
HXLINE( 286)										fields->push(::Std_obj::string(::Reflect_obj::field( ::Dynamic(event->__Field(HX_("v",76,00,00,00),::hx::paccDynamic)),field)));
HXLINE( 287)										if ((fields->get_length() == 2)) {
HXLINE( 287)											goto _hx_goto_14;
            										}
            									}
            									_hx_goto_14:;
            								}
            								break;
            								case (int)6: {
HXLINE( 291)									::hx::Class _hx_switch_1 = _g16->_hx_getObject(0).StaticCast< ::hx::Class >();
            									if (  (_hx_switch_1==::hx::ArrayBase::__mClass) ){
HXLINE( 292)										::cpp::VirtualArray arr = ( (::cpp::VirtualArray)(event->__Field(HX_("v",76,00,00,00),::hx::paccDynamic)) );
HXLINE( 293)										bool _hx_tmp6;
HXDLIN( 293)										if (::hx::IsNotNull( arr )) {
HXLINE( 293)											_hx_tmp6 = (arr->get_length() > 0);
            										}
            										else {
HXLINE( 293)											_hx_tmp6 = false;
            										}
HXDLIN( 293)										if (_hx_tmp6) {
HXLINE( 295)											int _g19 = 0;
HXDLIN( 295)											while((_g19 < arr->get_length())){
HXLINE( 295)												 ::Dynamic value = arr->__get(_g19);
HXDLIN( 295)												_g19 = (_g19 + 1);
HXLINE( 297)												fields->push(::Std_obj::string(value));
HXLINE( 299)												if ((fields->get_length() == 2)) {
HXLINE( 299)													goto _hx_goto_16;
            												}
            											}
            											_hx_goto_16:;
            										}
HXLINE( 291)										goto _hx_goto_15;
            									}
            									if (  (_hx_switch_1==::hx::ClassOf< ::String >()) ){
HXLINE( 290)										fields->push( ::Dynamic(event->__Field(HX_("v",76,00,00,00),::hx::paccDynamic)));
HXDLIN( 290)										goto _hx_goto_15;
            									}
            									/* default */{
HXLINE( 303)										fields->push(::Std_obj::string( ::Dynamic(event->__Field(HX_("v",76,00,00,00),::hx::paccDynamic))));
            									}
            									_hx_goto_15:;
            								}
            								break;
            								default:{
HXLINE( 303)									fields->push(::Std_obj::string( ::Dynamic(event->__Field(HX_("v",76,00,00,00),::hx::paccDynamic))));
            								}
            							}
            						}
HXLINE( 306)						while((fields->get_length() < 2)){
HXLINE( 306)							fields->push(HX_("",00,00,00,00));
            						}
HXLINE( 308)						fields->insert(0, ::Dynamic(event->__Field(HX_("e",65,00,00,00),::hx::paccDynamic)));
HXLINE( 309)						fileEvents->push(::cpp::VirtualArray_obj::__new(2)->init(0, ::Dynamic(event->__Field(HX_("t",74,00,00,00),::hx::paccDynamic)))->init(1,::cpp::VirtualArray_obj::__new(1)->init(0,fields)));
            					}
            				}
            			}
HXLINE( 311)			fileEvents->sort(::states::editors::content::VSlice_obj::sortByTime_dyn());
HXLINE( 312)			pack->__SetField(HX_("events",19,4f,6a,96), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("events",19,4f,6a,96),fileEvents)
            				->setFixed(1,HX_("format",37,8f,8e,fd),HX_("psych_v1_convert",33,b9,d0,ee))),::hx::paccDynamic);
            		}
HXLINE( 314)		return pack;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(VSlice_obj,convertToPsych,return )

 ::Dynamic VSlice_obj::_hx_export( ::Dynamic songData,::String difficultyName){
            	HX_GC_STACKFRAME(&_hx_pos_2e0cdb438c3f1633_318_export)
HXLINE( 319)		::Array< ::Dynamic> events = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 320)		bool _hx_tmp;
HXDLIN( 320)		if (::hx::IsNotNull( songData->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic) )) {
HXLINE( 320)			_hx_tmp = (( (::cpp::VirtualArray)(songData->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) )->get_length() > 0);
            		}
            		else {
HXLINE( 320)			_hx_tmp = false;
            		}
HXDLIN( 320)		if (_hx_tmp) {
HXLINE( 322)			int _g = 0;
HXDLIN( 322)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)(songData->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) );
HXDLIN( 322)			while((_g < _g1->get_length())){
HXLINE( 322)				 ::Dynamic event = _g1->__get(_g);
HXDLIN( 322)				_g = (_g + 1);
HXLINE( 324)				::Array< ::Dynamic> subEvents = ( (::Array< ::Dynamic>)(event->__GetItem(1)) );
HXLINE( 325)				bool _hx_tmp1;
HXDLIN( 325)				if (::hx::IsNotNull( subEvents )) {
HXLINE( 325)					_hx_tmp1 = (subEvents->length > 0);
            				}
            				else {
HXLINE( 325)					_hx_tmp1 = false;
            				}
HXDLIN( 325)				if (_hx_tmp1) {
HXLINE( 326)					int _g2 = 0;
HXDLIN( 326)					while((_g2 < subEvents->length)){
HXLINE( 326)						::cpp::VirtualArray lilEvent = ::cpp::VirtualArray( subEvents->__get(_g2));
HXDLIN( 326)						_g2 = (_g2 + 1);
HXLINE( 327)						events->push( ::Dynamic(::hx::Anon_obj::Create(3)
            							->setFixed(0,HX_("e",65,00,00,00),( (::String)(lilEvent->__get(0)) ))
            							->setFixed(1,HX_("t",74,00,00,00),event->__GetItem(0))
            							->setFixed(2,HX_("v",76,00,00,00), ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("value1",a0,03,b7,4f),lilEvent->__get(1))
            								->setFixed(1,HX_("value2",a1,03,b7,4f),lilEvent->__get(2))))));
            					}
            				}
            			}
            		}
HXLINE( 331)		::Array< ::Dynamic> notes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 332)		::String generatedBy = ((HX_("Psych Engine v",5d,a0,37,c7) + ::states::MainMenuState_obj::psychEngineVersion) + HX_(" - Chart Editor V-Slice Exporter",04,43,5d,ac));
HXLINE( 333)		::Array< ::Dynamic> timeChanges = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 335)		Float time = ( (Float)(0) );
HXLINE( 336)		Float bpm = ( (Float)(songData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 337)		timeChanges->push( ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("t",74,00,00,00),( (Float)(0) ))
            			->setFixed(1,HX_("bpm",df,be,4a,00),bpm)));
HXLINE( 338)		bool lastMustHit = false;
HXLINE( 339)		if (::hx::IsNotNull( songData->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic) )) {
HXLINE( 341)			int _g3 = 0;
HXDLIN( 341)			::Array< ::Dynamic> _g4 = ( (::Array< ::Dynamic>)(songData->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN( 341)			while((_g3 < _g4->length)){
HXLINE( 341)				 ::Dynamic section = _g4->__get(_g3);
HXDLIN( 341)				_g3 = (_g3 + 1);
HXLINE( 344)				bool _hx_tmp2;
HXDLIN( 344)				if (::hx::IsNotNull( section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic) )) {
HXLINE( 344)					_hx_tmp2 = (( (::cpp::VirtualArray)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->get_length() > 0);
            				}
            				else {
HXLINE( 344)					_hx_tmp2 = false;
            				}
HXDLIN( 344)				if (_hx_tmp2) {
HXLINE( 346)					int _g5 = 0;
HXDLIN( 346)					::cpp::VirtualArray _g6 = ( (::cpp::VirtualArray)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 346)					while((_g5 < _g6->get_length())){
HXLINE( 346)						 ::Dynamic note = _g6->__get(_g5);
HXDLIN( 346)						_g5 = (_g5 + 1);
HXLINE( 348)						 ::Dynamic vsliceNote =  ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("d",64,00,00,00),note->__GetItem(1))
            							->setFixed(1,HX_("t",74,00,00,00),note->__GetItem(0)));
HXLINE( 349)						if (::hx::IsGreater( note->__GetItem(2),0 )) {
HXLINE( 350)							vsliceNote->__SetField(HX_("l",6c,00,00,00),note->__GetItem(2),::hx::paccDynamic);
            						}
HXLINE( 351)						bool _hx_tmp3;
HXDLIN( 351)						if (::hx::IsNotNull( note->__GetItem(3) )) {
HXLINE( 351)							_hx_tmp3 = ::hx::IsGreater( note->__GetItem(3)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),0 );
            						}
            						else {
HXLINE( 351)							_hx_tmp3 = false;
            						}
HXDLIN( 351)						if (_hx_tmp3) {
HXLINE( 352)							vsliceNote->__SetField(HX_("k",6b,00,00,00),note->__GetItem(3),::hx::paccDynamic);
            						}
HXLINE( 354)						notes->push(vsliceNote);
            					}
            				}
HXLINE( 359)				Float beat = ((( (Float)(60) ) / bpm) * ( (Float)(1000) ));
HXLINE( 360)				if (( (bool)(section->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE( 362)					bpm = ( (Float)(section->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 363)					beat = ((( (Float)(60) ) / bpm) * ( (Float)(1000) ));
HXLINE( 364)					timeChanges->push( ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("t",74,00,00,00),time)
            						->setFixed(1,HX_("bpm",df,be,4a,00),bpm)));
            				}
HXLINE( 367)				if (::hx::IsNotEq( lastMustHit,section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic) )) {
HXLINE( 369)					int _hx_tmp4;
HXDLIN( 369)					if (( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE( 369)						_hx_tmp4 = 0;
            					}
            					else {
HXLINE( 369)						_hx_tmp4 = 1;
            					}
HXDLIN( 369)					events->push( ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("e",65,00,00,00),HX_("FocusCamera",7d,24,ca,ee))
            						->setFixed(1,HX_("t",74,00,00,00),time)
            						->setFixed(2,HX_("v",76,00,00,00), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("char",d6,5e,bf,41),_hx_tmp4)))));
HXLINE( 370)					lastMustHit = ( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
            				}
HXLINE( 373)				int rowRound = ::Math_obj::round((( (Float)(4) ) * ( (Float)(section->__Field(HX_("sectionBeats",18,52,2e,0f),::hx::paccDynamic)) )));
HXLINE( 374)				time = (time + (beat * (( (Float)(rowRound) ) / ( (Float)(4) ))));
            			}
            		}
HXLINE( 377)		events->sort(::states::editors::content::VSlice_obj::sortByTime_dyn());
HXLINE( 378)		notes->sort(::states::editors::content::VSlice_obj::sortByTime_dyn());
HXLINE( 381)		::String composer = HX_("Unknown",6a,4b,cc,ae);
HXLINE( 382)		if (::Reflect_obj::hasField(songData,HX_("artist",c7,f2,48,b9))) {
HXLINE( 382)			composer = ( (::String)(::Reflect_obj::field(songData,HX_("artist",c7,f2,48,b9))) );
            		}
            		else {
HXLINE( 383)			if (::Reflect_obj::hasField(songData,HX_("composer",20,37,ce,81))) {
HXLINE( 383)				composer = ( (::String)(::Reflect_obj::field(songData,HX_("composer",20,37,ce,81))) );
            			}
            		}
HXLINE( 385)		::String charter = HX_("Unknown",6a,4b,cc,ae);
HXLINE( 386)		if (::Reflect_obj::hasField(songData,HX_("charter",cb,68,7b,cf))) {
HXLINE( 386)			composer = ( (::String)(::Reflect_obj::field(songData,HX_("charter",cb,68,7b,cf))) );
            		}
HXLINE( 389)		::Array< ::String > diffs = null();
HXLINE( 391)		 ::haxe::ds::StringMap scrollSpeed =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 392)		 ::haxe::ds::StringMap notesMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 393)		if (::hx::IsNull( difficultyName )) {
HXLINE( 395)			::Array< ::String > diffs1 = ::backend::Difficulty_obj::list->copy();
HXLINE( 396)			{
HXLINE( 396)				int _g_current = 0;
HXDLIN( 396)				::Array< ::String > _g_array = diffs1;
HXDLIN( 396)				while((_g_current < _g_array->length)){
HXLINE( 396)					::String _g_value = _g_array->__get(_g_current);
HXDLIN( 396)					_g_current = (_g_current + 1);
HXDLIN( 396)					int _g_key = (_g_current - 1);
HXDLIN( 396)					int num = _g_key;
HXDLIN( 396)					::String diff = _g_value;
HXLINE( 397)					{
HXLINE( 398)						 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 398)						 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 398)						diff = ::StringTools_obj::trim(hideChars->replace(invalidChars->replace(diff,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
HXDLIN( 398)						diffs1[num] = diff;
HXLINE( 399)						scrollSpeed->set(diff, ::Dynamic(songData->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)));
HXLINE( 400)						notesMap->set(diff,notes);
            					}
            				}
            			}
            		}
            		else {
HXLINE( 405)			 ::Dynamic num1 = null();
HXDLIN( 405)			 ::Dynamic canTranslate = false;
HXDLIN( 405)			if (::hx::IsNull( canTranslate )) {
HXLINE( 405)				canTranslate = true;
            			}
HXDLIN( 405)			 ::Dynamic diffName;
HXDLIN( 405)			if (::hx::IsNull( num1 )) {
HXLINE( 405)				diffName = ::states::PlayState_obj::storyDifficulty;
            			}
            			else {
HXLINE( 405)				diffName = num1;
            			}
HXDLIN( 405)			::String diffName1 = ::backend::Difficulty_obj::list->__get(( (int)(diffName) ));
HXDLIN( 405)			if (::hx::IsNull( diffName1 )) {
HXLINE(  64)				diffName1 = ::backend::Difficulty_obj::defaultDifficulty;
            			}
HXLINE( 405)			::String diff1;
HXDLIN( 405)			if (( (bool)(canTranslate) )) {
HXLINE( 405)				::String key = (HX_("difficulty_",c4,25,f6,54) + diffName1);
HXDLIN( 405)				::cpp::VirtualArray values = null();
HXDLIN( 405)				::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 405)				 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN( 405)				::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars1->replace(::StringTools_obj::replace(key,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN( 405)				if (::hx::IsNull( str )) {
HXLINE(  62)					str = diffName1;
            				}
HXLINE( 405)				if (::hx::IsNull( str )) {
HXLINE(  68)					str = key;
            				}
HXLINE( 405)				if (::hx::IsNotNull( values )) {
HXLINE( 405)					int _g_current1 = 0;
HXDLIN( 405)					::cpp::VirtualArray _g_array1 = values;
HXDLIN( 405)					while((_g_current1 < _g_array1->get_length())){
HXLINE( 405)						 ::Dynamic _g_value1 = _g_array1->__get(_g_current1);
HXDLIN( 405)						_g_current1 = (_g_current1 + 1);
HXDLIN( 405)						int _g_key1 = (_g_current1 - 1);
HXDLIN( 405)						int num2 = _g_key1;
HXDLIN( 405)						 ::Dynamic value = _g_value1;
HXLINE(  72)						str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num2 + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            					}
            				}
HXLINE( 405)				diff1 = str;
            			}
            			else {
HXLINE( 405)				diff1 = diffName1;
            			}
HXLINE( 406)			if (::hx::IsNull( diff1 )) {
HXLINE( 406)				diff1 = ::backend::Difficulty_obj::defaultDifficulty;
            			}
HXLINE( 407)			 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 407)			 ::EReg hideChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 407)			diff1 = ::StringTools_obj::trim(hideChars2->replace(invalidChars1->replace(diff1,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
HXLINE( 409)			scrollSpeed->set(diff1, ::Dynamic(songData->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)));
HXLINE( 410)			notesMap->set(diff1,notes);
            		}
HXLINE( 414)		 ::Dynamic chart =  ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("events",19,4f,6a,96),events)
            			->setFixed(1,HX_("notes",41,dc,ca,9f),notesMap)
            			->setFixed(2,HX_("scrollSpeed",3a,e0,46,cb),scrollSpeed)
            			->setFixed(3,HX_("generatedBy",46,6b,37,46),generatedBy)
            			->setFixed(4,HX_("version",18,e7,f1,7c),::states::editors::content::VSlice_obj::chartVersion));
HXLINE( 422)		::String stage = ( (::String)(songData->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) );
HXLINE( 423)		::String _hx_switch_0 = stage;
            		if (  (_hx_switch_0==HX_("limo",1f,17,b3,47)) ){
HXLINE( 432)			stage = HX_("limoRide",b7,15,7a,e4);
HXDLIN( 432)			goto _hx_goto_25;
            		}
            		if (  (_hx_switch_0==HX_("mall",d4,3a,56,48)) ){
HXLINE( 434)			stage = HX_("mallXmas",1b,06,6c,b4);
HXDLIN( 434)			goto _hx_goto_25;
            		}
            		if (  (_hx_switch_0==HX_("philly",28,77,5e,ef)) ){
HXLINE( 430)			stage = HX_("phillyTrain",80,9b,65,bb);
HXDLIN( 430)			goto _hx_goto_25;
            		}
            		if (  (_hx_switch_0==HX_("spooky",eb,bd,9e,c1)) ){
HXLINE( 428)			stage = HX_("spookyMansion",24,c4,ab,7a);
HXDLIN( 428)			goto _hx_goto_25;
            		}
            		if (  (_hx_switch_0==HX_("stage",be,6a,0b,84)) ){
HXLINE( 426)			stage = HX_("mainStage",c5,33,af,9d);
HXDLIN( 426)			goto _hx_goto_25;
            		}
            		if (  (_hx_switch_0==HX_("tank",ea,ba,f6,4c)) ){
HXLINE( 436)			stage = HX_("tankmanBattlefield",72,e4,00,e5);
HXDLIN( 436)			goto _hx_goto_25;
            		}
            		_hx_goto_25:;
HXLINE( 439)		::String songData1 = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXLINE( 446)		::String metadata;
HXDLIN( 446)		if (::hx::IsNotNull( songData->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic) )) {
HXLINE( 446)			metadata = ( (::String)(songData->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 446)			metadata = HX_("",00,00,00,00);
            		}
HXLINE( 444)		 ::Dynamic metadata1 =  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("girlfriend",ba,91,48,98),metadata)
            			->setFixed(1,HX_("opponent",9d,b9,b8,f8), ::Dynamic(songData->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)))
            			->setFixed(2,HX_("player",61,eb,b8,37), ::Dynamic(songData->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic))));
HXLINE( 449)		::String metadata2;
HXDLIN( 449)		if (!(::states::PlayState_obj::get_isPixelStage())) {
HXLINE( 449)			metadata2 = HX_("funkin",31,b2,4f,6f);
            		}
            		else {
HXLINE( 449)			metadata2 = HX_("pixel",86,c6,a3,c2);
            		}
HXLINE( 438)		 ::Dynamic metadata3 =  ::Dynamic(::hx::Anon_obj::Create(8)
            			->setFixed(0,HX_("timeFormat",24,d7,57,9b),HX_("ms",66,5f,00,00))
            			->setFixed(1,HX_("artist",c7,f2,48,b9),composer)
            			->setFixed(2,HX_("charter",cb,68,7b,cf),charter)
            			->setFixed(3,HX_("playData",3e,ba,76,32), ::Dynamic(::hx::Anon_obj::Create(4)
            				->setFixed(0,HX_("stage",be,6a,0b,84),stage)
            				->setFixed(1,HX_("noteStyle",df,ef,aa,c1),metadata2)
            				->setFixed(2,HX_("difficulties",59,c7,5e,02),diffs)
            				->setFixed(3,HX_("characters",aa,58,ce,55),metadata1)))
            			->setFixed(4,HX_("songName",c0,d0,d7,36),songData1)
            			->setFixed(5,HX_("timeChanges",76,58,22,3f),timeChanges)
            			->setFixed(6,HX_("generatedBy",46,6b,37,46),generatedBy)
            			->setFixed(7,HX_("version",18,e7,f1,7c),::states::editors::content::VSlice_obj::metadataVersion));
HXLINE( 457)		return  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("metadata",6f,e7,19,40),metadata3)
            			->setFixed(1,HX_("chart",de,9c,b3,45),chart));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(VSlice_obj,_hx_export,return )

 ::Dynamic VSlice_obj::emptySection(){
            	HX_STACKFRAME(&_hx_pos_2e0cdb438c3f1633_462_emptySection)
HXDLIN( 462)		return  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("sectionNotes",1c,c8,a7,fe),::cpp::VirtualArray_obj::__new(0))
            			->setFixed(1,HX_("sectionBeats",18,52,2e,0f),( (Float)(4) ))
            			->setFixed(2,HX_("mustHitSection",3b,5f,87,62),true));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(VSlice_obj,emptySection,return )

int VSlice_obj::sortByTime( ::Dynamic Obj1, ::Dynamic Obj2){
            	HX_STACKFRAME(&_hx_pos_2e0cdb438c3f1633_470_sortByTime)
HXDLIN( 470)		Float Value1 = ( (Float)(Obj1->__Field(HX_("t",74,00,00,00),::hx::paccDynamic)) );
HXDLIN( 470)		Float Value2 = ( (Float)(Obj2->__Field(HX_("t",74,00,00,00),::hx::paccDynamic)) );
HXDLIN( 470)		int result = 0;
HXDLIN( 470)		if ((Value1 < Value2)) {
HXDLIN( 470)			result = -1;
            		}
            		else {
HXDLIN( 470)			if ((Value1 > Value2)) {
HXDLIN( 470)				result = 1;
            			}
            		}
HXDLIN( 470)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(VSlice_obj,sortByTime,return )


VSlice_obj::VSlice_obj()
{
}

bool VSlice_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"export") ) { outValue = _hx_export_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sortByTime") ) { outValue = sortByTime_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"chartVersion") ) { outValue = ( chartVersion ); return true; }
		if (HX_FIELD_EQ(inName,"emptySection") ) { outValue = emptySection_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"convertToPsych") ) { outValue = convertToPsych_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"metadataVersion") ) { outValue = ( metadataVersion ); return true; }
	}
	return false;
}

bool VSlice_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"chartVersion") ) { chartVersion=ioValue.Cast< ::String >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"metadataVersion") ) { metadataVersion=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *VSlice_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo VSlice_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &VSlice_obj::metadataVersion,HX_("metadataVersion",69,83,23,81)},
	{::hx::fsString,(void *) &VSlice_obj::chartVersion,HX_("chartVersion",da,e9,39,c8)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void VSlice_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VSlice_obj::metadataVersion,"metadataVersion");
	HX_MARK_MEMBER_NAME(VSlice_obj::chartVersion,"chartVersion");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VSlice_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VSlice_obj::metadataVersion,"metadataVersion");
	HX_VISIT_MEMBER_NAME(VSlice_obj::chartVersion,"chartVersion");
};

#endif

::hx::Class VSlice_obj::__mClass;

static ::String VSlice_obj_sStaticFields[] = {
	HX_("metadataVersion",69,83,23,81),
	HX_("chartVersion",da,e9,39,c8),
	HX_("convertToPsych",0d,14,18,49),
	HX_("export",74,91,7d,c4),
	HX_("emptySection",d8,0e,33,b9),
	HX_("sortByTime",82,fb,30,6f),
	::String(null())
};

void VSlice_obj::__register()
{
	VSlice_obj _hx_dummy;
	VSlice_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.editors.content.VSlice",a5,89,ff,16);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &VSlice_obj::__GetStatic;
	__mClass->mSetStaticField = &VSlice_obj::__SetStatic;
	__mClass->mMarkFunc = VSlice_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(VSlice_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< VSlice_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VSlice_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VSlice_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VSlice_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void VSlice_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2e0cdb438c3f1633_89_boot)
HXDLIN(  89)		metadataVersion = HX_("2.2.3",bb,ea,96,e8);
            	}
{
            	HX_STACKFRAME(&_hx_pos_2e0cdb438c3f1633_90_boot)
HXDLIN(  90)		chartVersion = HX_("2.0.0",36,66,95,e8);
            	}
}

} // end namespace states
} // end namespace editors
} // end namespace content
