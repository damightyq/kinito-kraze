// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIEvent
#include <backend/ui/PsychUIEvent.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_objects_Note
#include <objects/Note.h>
#endif
#ifndef INCLUDED_states_editors_ChartingState
#include <states/editors/ChartingState.h>
#endif
#ifndef INCLUDED_states_editors_content_EventMetaNote
#include <states/editors/content/EventMetaNote.h>
#endif
#ifndef INCLUDED_states_editors_content_MetaNote
#include <states/editors/content/MetaNote.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9b7d2cfc88033795_142_new,"states.editors.content.EventMetaNote","new",0x6ce77dfa,"states.editors.content.EventMetaNote.new","states/editors/content/MetaNote.hx",142,0x36c1a55b)
HX_LOCAL_STACK_FRAME(_hx_pos_9b7d2cfc88033795_159_draw,"states.editors.content.EventMetaNote","draw",0xd714652a,"states.editors.content.EventMetaNote.draw","states/editors/content/MetaNote.hx",159,0x36c1a55b)
HX_LOCAL_STACK_FRAME(_hx_pos_9b7d2cfc88033795_169_setSustainLength,"states.editors.content.EventMetaNote","setSustainLength",0x6e27930d,"states.editors.content.EventMetaNote.setSustainLength","states/editors/content/MetaNote.hx",169,0x36c1a55b)
HX_LOCAL_STACK_FRAME(_hx_pos_9b7d2cfc88033795_173_updateEventText,"states.editors.content.EventMetaNote","updateEventText",0xd3405338,"states.editors.content.EventMetaNote.updateEventText","states/editors/content/MetaNote.hx",173,0x36c1a55b)
HX_LOCAL_STACK_FRAME(_hx_pos_9b7d2cfc88033795_189_destroy,"states.editors.content.EventMetaNote","destroy",0xd4a9af94,"states.editors.content.EventMetaNote.destroy","states/editors/content/MetaNote.hx",189,0x36c1a55b)
namespace states{
namespace editors{
namespace content{

void EventMetaNote_obj::__construct(Float time, ::Dynamic eventData){
            	HX_GC_STACKFRAME(&_hx_pos_9b7d2cfc88033795_142_new)
HXLINE( 143)		super::__construct(time,-1,eventData);
HXLINE( 144)		this->isEvent = true;
HXLINE( 145)		this->events = ( (::Array< ::Dynamic>)(eventData->__GetItem(1)) );
HXLINE( 148)		this->loadGraphic(::backend::Paths_obj::image(HX_("editors/eventIcon",4a,94,cb,76),null(),null()),null(),null(),null(),null(),null());
HXLINE( 149)		this->setGraphicSize(::states::editors::ChartingState_obj::GRID_SIZE,null());
HXLINE( 150)		this->updateHitbox();
HXLINE( 152)		this->eventText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,400,HX_("",00,00,00,00),12,null());
HXLINE( 153)		 ::flixel::text::FlxText _hx_tmp = this->eventText;
HXDLIN( 153)		::String key = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 153)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 153)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXDLIN( 153)		if (::hx::IsNotNull( str )) {
HXLINE( 153)			key = str;
            		}
HXDLIN( 153)		::String folderKey = key;
HXDLIN( 153)		::String file = ::backend::Paths_obj::modFolders(folderKey);
HXDLIN( 153)		::String _hx_tmp1;
HXDLIN( 153)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 153)			_hx_tmp1 = file;
            		}
            		else {
HXLINE( 153)			_hx_tmp1 = (HX_("assets/",4c,2a,dc,36) + folderKey);
            		}
HXDLIN( 153)		_hx_tmp->setFormat(_hx_tmp1,12,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE( 154)		this->eventText->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 155)		this->updateEventText();
            	}

Dynamic EventMetaNote_obj::__CreateEmpty() { return new EventMetaNote_obj; }

void *EventMetaNote_obj::_hx_vtable = 0;

Dynamic EventMetaNote_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EventMetaNote_obj > _hx_result = new EventMetaNote_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool EventMetaNote_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4fc1a498) {
		if (inClassId<=(int)0x4a40bf4c) {
			if (inClassId<=(int)0x2c01639b) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
			} else {
				return inClassId==(int)0x4a40bf4c;
			}
		} else {
			return inClassId==(int)0x4fc1a498;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x75aeabe6 || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7dab0655;
		}
	}
}

void EventMetaNote_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_9b7d2cfc88033795_159_draw)
HXLINE( 160)		bool _hx_tmp;
HXDLIN( 160)		bool _hx_tmp1;
HXDLIN( 160)		if (::hx::IsNotNull( this->eventText )) {
HXLINE( 160)			_hx_tmp1 = this->eventText->exists;
            		}
            		else {
HXLINE( 160)			_hx_tmp1 = false;
            		}
HXDLIN( 160)		if (_hx_tmp1) {
HXLINE( 160)			_hx_tmp = this->eventText->visible;
            		}
            		else {
HXLINE( 160)			_hx_tmp = false;
            		}
HXDLIN( 160)		if (_hx_tmp) {
HXLINE( 162)			 ::flixel::text::FlxText _hx_tmp2 = this->eventText;
HXDLIN( 162)			Float _hx_tmp3 = this->y;
HXDLIN( 162)			Float _hx_tmp4 = (_hx_tmp3 + (this->get_height() / ( (Float)(2) )));
HXDLIN( 162)			_hx_tmp2->set_y((_hx_tmp4 - (this->eventText->get_height() / ( (Float)(2) ))));
HXLINE( 163)			this->eventText->set_alpha(this->alpha);
HXLINE( 164)			this->eventText->draw();
            		}
HXLINE( 166)		this->super::draw();
            	}


void EventMetaNote_obj::setSustainLength(Float v,Float stepCrochet,::hx::Null< Float >  __o_zoom){
            		Float zoom = __o_zoom.Default(1);
            	HX_STACKFRAME(&_hx_pos_9b7d2cfc88033795_169_setSustainLength)
            	}


void EventMetaNote_obj::updateEventText(){
            	HX_STACKFRAME(&_hx_pos_9b7d2cfc88033795_173_updateEventText)
HXLINE( 174)		Float myTime = ( (Float)(::Math_obj::floor(this->strumTime)) );
HXLINE( 175)		if ((this->events->length == 1)) {
HXLINE( 177)			::Array< ::String > event = this->events->__get(0).StaticCast< ::Array< ::String > >();
HXLINE( 178)			this->eventText->set_text((((((((HX_("Event: ",20,dd,eb,d3) + event->__get(0)) + HX_(" (",08,1c,00,00)) + myTime) + HX_(" ms)\nValue 1: ",21,97,f0,d0)) + event->__get(1)) + HX_("\nValue 2: ",bf,11,b4,9b)) + event->__get(2)));
            		}
            		else {
HXLINE( 180)			if ((this->events->length > 1)) {
HXLINE( 182)				::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN( 182)				{
HXLINE( 182)					int _g1 = 0;
HXDLIN( 182)					::Array< ::Dynamic> _g2 = this->events;
HXDLIN( 182)					while((_g1 < _g2->length)){
HXLINE( 182)						::Array< ::String > event1 = _g2->__get(_g1).StaticCast< ::Array< ::String > >();
HXDLIN( 182)						_g1 = (_g1 + 1);
HXDLIN( 182)						_g->push(event1->__get(0));
            					}
            				}
HXDLIN( 182)				::Array< ::String > eventNames = _g;
HXLINE( 183)				 ::flixel::text::FlxText _hx_tmp = this->eventText;
HXDLIN( 183)				::String _hx_tmp1 = ((((HX_("",00,00,00,00) + this->events->length) + HX_(" Events (",a1,ff,cd,f8)) + myTime) + HX_(" ms):\n",33,9f,3b,da));
HXDLIN( 183)				_hx_tmp->set_text((_hx_tmp1 + eventNames->join(HX_(", ",74,26,00,00))));
            			}
            			else {
HXLINE( 185)				this->eventText->set_text(HX_("ERROR FAILSAFE",a3,75,a9,f6));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(EventMetaNote_obj,updateEventText,(void))

void EventMetaNote_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_9b7d2cfc88033795_189_destroy)
HXLINE( 190)		this->eventText = ( ( ::flixel::text::FlxText)(::flixel::util::FlxDestroyUtil_obj::destroy(this->eventText)) );
HXLINE( 191)		this->super::destroy();
            	}



::hx::ObjectPtr< EventMetaNote_obj > EventMetaNote_obj::__new(Float time, ::Dynamic eventData) {
	::hx::ObjectPtr< EventMetaNote_obj > __this = new EventMetaNote_obj();
	__this->__construct(time,eventData);
	return __this;
}

::hx::ObjectPtr< EventMetaNote_obj > EventMetaNote_obj::__alloc(::hx::Ctx *_hx_ctx,Float time, ::Dynamic eventData) {
	EventMetaNote_obj *__this = (EventMetaNote_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EventMetaNote_obj), true, "states.editors.content.EventMetaNote"));
	*(void **)__this = EventMetaNote_obj::_hx_vtable;
	__this->__construct(time,eventData);
	return __this;
}

EventMetaNote_obj::EventMetaNote_obj()
{
}

void EventMetaNote_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EventMetaNote);
	HX_MARK_MEMBER_NAME(eventText,"eventText");
	HX_MARK_MEMBER_NAME(events,"events");
	 ::states::editors::content::MetaNote_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void EventMetaNote_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(eventText,"eventText");
	HX_VISIT_MEMBER_NAME(events,"events");
	 ::states::editors::content::MetaNote_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val EventMetaNote_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"events") ) { return ::hx::Val( events ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"eventText") ) { return ::hx::Val( eventText ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateEventText") ) { return ::hx::Val( updateEventText_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"setSustainLength") ) { return ::hx::Val( setSustainLength_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val EventMetaNote_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"events") ) { events=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"eventText") ) { eventText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EventMetaNote_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("eventText",e7,d5,06,fc));
	outFields->push(HX_("events",19,4f,6a,96));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EventMetaNote_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(EventMetaNote_obj,eventText),HX_("eventText",e7,d5,06,fc)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(EventMetaNote_obj,events),HX_("events",19,4f,6a,96)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *EventMetaNote_obj_sStaticStorageInfo = 0;
#endif

static ::String EventMetaNote_obj_sMemberFields[] = {
	HX_("eventText",e7,d5,06,fc),
	HX_("draw",04,2c,70,42),
	HX_("setSustainLength",e7,38,ff,3c),
	HX_("events",19,4f,6a,96),
	HX_("updateEventText",9e,a6,91,4b),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

::hx::Class EventMetaNote_obj::__mClass;

void EventMetaNote_obj::__register()
{
	EventMetaNote_obj _hx_dummy;
	EventMetaNote_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.editors.content.EventMetaNote",08,b9,a6,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EventMetaNote_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EventMetaNote_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EventMetaNote_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EventMetaNote_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace editors
} // end namespace content
