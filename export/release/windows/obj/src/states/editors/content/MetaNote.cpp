// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIEvent
#include <backend/ui/PsychUIEvent.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_objects_Note
#include <objects/Note.h>
#endif
#ifndef INCLUDED_shaders_RGBPalette
#include <shaders/RGBPalette.h>
#endif
#ifndef INCLUDED_shaders_RGBShaderReference
#include <shaders/RGBShaderReference.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_states_editors_ChartingState
#include <states/editors/ChartingState.h>
#endif
#ifndef INCLUDED_states_editors_content_MetaNote
#include <states/editors/content/MetaNote.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f97c2f79d04a61c2_7_new,"states.editors.content.MetaNote","new",0x6b205432,"states.editors.content.MetaNote.new","states/editors/content/MetaNote.hx",7,0x36c1a55b)
HX_LOCAL_STACK_FRAME(_hx_pos_f97c2f79d04a61c2_25_changeNoteData,"states.editors.content.MetaNote","changeNoteData",0xbfa6023a,"states.editors.content.MetaNote.changeNoteData","states/editors/content/MetaNote.hx",25,0x36c1a55b)
HX_LOCAL_STACK_FRAME(_hx_pos_f97c2f79d04a61c2_50_setStrumTime,"states.editors.content.MetaNote","setStrumTime",0xcc925fe2,"states.editors.content.MetaNote.setStrumTime","states/editors/content/MetaNote.hx",50,0x36c1a55b)
HX_LOCAL_STACK_FRAME(_hx_pos_f97c2f79d04a61c2_57_setSustainLength,"states.editors.content.MetaNote","setSustainLength",0x668b39d5,"states.editors.content.MetaNote.setSustainLength","states/editors/content/MetaNote.hx",57,0x36c1a55b)
HX_LOCAL_STACK_FRAME(_hx_pos_f97c2f79d04a61c2_75_get_hasSustain,"states.editors.content.MetaNote","get_hasSustain",0x0f6eb620,"states.editors.content.MetaNote.get_hasSustain","states/editors/content/MetaNote.hx",75,0x36c1a55b)
HX_LOCAL_STACK_FRAME(_hx_pos_f97c2f79d04a61c2_78_updateSustainToZoom,"states.editors.content.MetaNote","updateSustainToZoom",0xeb12db3a,"states.editors.content.MetaNote.updateSustainToZoom","states/editors/content/MetaNote.hx",78,0x36c1a55b)
HX_LOCAL_STACK_FRAME(_hx_pos_f97c2f79d04a61c2_84_updateSustainToStepCrochet,"states.editors.content.MetaNote","updateSustainToStepCrochet",0xe3cc0201,"states.editors.content.MetaNote.updateSustainToStepCrochet","states/editors/content/MetaNote.hx",84,0x36c1a55b)
HX_LOCAL_STACK_FRAME(_hx_pos_f97c2f79d04a61c2_91_findNoteTypeText,"states.editors.content.MetaNote","findNoteTypeText",0x5ed2f560,"states.editors.content.MetaNote.findNoteTypeText","states/editors/content/MetaNote.hx",91,0x36c1a55b)
HX_LOCAL_STACK_FRAME(_hx_pos_f97c2f79d04a61c2_112_draw,"states.editors.content.MetaNote","draw",0x4a96fff2,"states.editors.content.MetaNote.draw","states/editors/content/MetaNote.hx",112,0x36c1a55b)
HX_LOCAL_STACK_FRAME(_hx_pos_f97c2f79d04a61c2_132_destroy,"states.editors.content.MetaNote","destroy",0x4d7601cc,"states.editors.content.MetaNote.destroy","states/editors/content/MetaNote.hx",132,0x36c1a55b)
HX_LOCAL_STACK_FRAME(_hx_pos_f97c2f79d04a61c2_9_boot,"states.editors.content.MetaNote","boot",0x49425820,"states.editors.content.MetaNote.boot","states/editors/content/MetaNote.hx",9,0x36c1a55b)
namespace states{
namespace editors{
namespace content{

void MetaNote_obj::__construct(Float time,int data,::cpp::VirtualArray songData){
            	HX_STACKFRAME(&_hx_pos_f97c2f79d04a61c2_7_new)
HXLINE(  55)		this->_lastZoom = ((Float)-1);
HXLINE(  14)		this->chartNoteData = 0;
HXLINE(  13)		this->chartY = ((Float)0);
HXLINE(  10)		this->isEvent = false;
HXLINE(  18)		super::__construct(time,data,null(),false,true,null());
HXLINE(  19)		this->songData = songData;
HXLINE(  20)		this->strumTime = time;
HXLINE(  21)		this->chartNoteData = data;
            	}

Dynamic MetaNote_obj::__CreateEmpty() { return new MetaNote_obj; }

void *MetaNote_obj::_hx_vtable = 0;

Dynamic MetaNote_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MetaNote_obj > _hx_result = new MetaNote_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool MetaNote_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x75aeabe6) {
		if (inClassId<=(int)0x4a40bf4c) {
			if (inClassId<=(int)0x2c01639b) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
			} else {
				return inClassId==(int)0x4a40bf4c;
			}
		} else {
			return inClassId==(int)0x75aeabe6;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void MetaNote_obj::changeNoteData(int v){
            	HX_GC_STACKFRAME(&_hx_pos_f97c2f79d04a61c2_25_changeNoteData)
HXLINE(  26)		this->chartNoteData = v;
HXLINE(  27)		this->songData->set(1,v);
HXLINE(  28)		this->noteData = ::hx::Mod(v,::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER);
HXLINE(  29)		this->mustPress = (v < ::states::editors::ChartingState_obj::GRID_COLUMNS_PER_PLAYER);
HXLINE(  31)		if (!(::states::PlayState_obj::get_isPixelStage())) {
HXLINE(  32)			this->loadNoteAnims();
            		}
            		else {
HXLINE(  34)			this->loadPixelNoteAnims();
            		}
HXLINE(  36)		if (::objects::Note_obj::globalRgbShaders->contains(this->rgbShader->parent)) {
HXLINE(  37)			this->rgbShader =  ::shaders::RGBShaderReference_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),::objects::Note_obj::initializeGlobalRGBShader(this->noteData));
            		}
HXLINE(  39)		this->animation->play((::objects::Note_obj::colArray->__get(::hx::Mod(this->noteData,::objects::Note_obj::colArray->length)) + HX_("Scroll",2d,4c,f9,7b)),null(),null(),null());
HXLINE(  40)		this->updateHitbox();
HXLINE(  41)		Float _hx_tmp = this->get_width();
HXDLIN(  41)		if ((_hx_tmp > this->get_height())) {
HXLINE(  42)			this->setGraphicSize(::states::editors::ChartingState_obj::GRID_SIZE,null());
            		}
            		else {
HXLINE(  44)			this->setGraphicSize(0,::states::editors::ChartingState_obj::GRID_SIZE);
            		}
HXLINE(  46)		this->updateHitbox();
            	}


HX_DEFINE_DYNAMIC_FUNC1(MetaNote_obj,changeNoteData,(void))

void MetaNote_obj::setStrumTime(Float v){
            	HX_STACKFRAME(&_hx_pos_f97c2f79d04a61c2_50_setStrumTime)
HXLINE(  51)		this->songData->set(0,v);
HXLINE(  52)		this->strumTime = v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MetaNote_obj,setStrumTime,(void))

void MetaNote_obj::setSustainLength(Float v,Float stepCrochet,::hx::Null< Float >  __o_zoom){
            		Float zoom = __o_zoom.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_f97c2f79d04a61c2_57_setSustainLength)
HXLINE(  58)		this->_lastZoom = zoom;
HXLINE(  59)		v = (( (Float)(::Math_obj::round((v / (stepCrochet / ( (Float)(2) ))))) ) * (stepCrochet / ( (Float)(2) )));
HXLINE(  60)		this->songData->set(2,(this->sustainLength = ::Math_obj::max(::Math_obj::min(v,(stepCrochet * ( (Float)(128) ))),( (Float)(0) ))));
HXLINE(  62)		if ((this->sustainLength > 0)) {
HXLINE(  64)			if (::hx::IsNull( this->sustainSprite )) {
HXLINE(  66)				this->sustainSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-1,null(),null());
HXLINE(  67)				this->sustainSprite->scrollFactor->set_x(( (Float)(0) ));
            			}
HXLINE(  69)			this->sustainSprite->setGraphicSize(8,::Math_obj::max((( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ) / ( (Float)(4) )),((( (Float)(::Math_obj::round((((v * ( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) )) + ::states::editors::ChartingState_obj::GRID_SIZE) / stepCrochet))) ) * zoom) - (( (Float)(::states::editors::ChartingState_obj::GRID_SIZE) ) / ( (Float)(2) )))));
HXLINE(  70)			this->sustainSprite->updateHitbox();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(MetaNote_obj,setSustainLength,(void))

bool MetaNote_obj::get_hasSustain(){
            	HX_STACKFRAME(&_hx_pos_f97c2f79d04a61c2_75_get_hasSustain)
HXDLIN(  75)		if (!(this->isEvent)) {
HXDLIN(  75)			return (this->sustainLength > 0);
            		}
            		else {
HXDLIN(  75)			return false;
            		}
HXDLIN(  75)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MetaNote_obj,get_hasSustain,return )

void MetaNote_obj::updateSustainToZoom(Float stepCrochet,::hx::Null< Float >  __o_zoom){
            		Float zoom = __o_zoom.Default(1);
            	HX_STACKFRAME(&_hx_pos_f97c2f79d04a61c2_78_updateSustainToZoom)
HXLINE(  79)		if ((this->_lastZoom == zoom)) {
HXLINE(  79)			return;
            		}
HXLINE(  80)		this->setSustainLength(this->sustainLength,stepCrochet,zoom);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MetaNote_obj,updateSustainToZoom,(void))

void MetaNote_obj::updateSustainToStepCrochet(Float stepCrochet){
            	HX_STACKFRAME(&_hx_pos_f97c2f79d04a61c2_84_updateSustainToStepCrochet)
HXLINE(  85)		if ((this->_lastZoom < 0)) {
HXLINE(  85)			return;
            		}
HXLINE(  86)		this->setSustainLength(this->sustainLength,stepCrochet,this->_lastZoom);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MetaNote_obj,updateSustainToStepCrochet,(void))

 ::flixel::text::FlxText MetaNote_obj::findNoteTypeText(int num){
            	HX_GC_STACKFRAME(&_hx_pos_f97c2f79d04a61c2_91_findNoteTypeText)
HXLINE(  92)		 ::flixel::text::FlxText txt = null();
HXLINE(  93)		if ((num != 0)) {
HXLINE(  95)			if (!(::states::editors::content::MetaNote_obj::noteTypeTexts->exists(num))) {
HXLINE(  97)				int txt1 = ::states::editors::ChartingState_obj::GRID_SIZE;
HXDLIN(  97)				::String txt2;
HXDLIN(  97)				if ((num > 0)) {
HXLINE(  97)					txt2 = ::Std_obj::string(num);
            				}
            				else {
HXLINE(  97)					txt2 = HX_("?",3f,00,00,00);
            				}
HXDLIN(  97)				txt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,txt1,txt2,16,null());
HXLINE(  98)				txt->set_autoSize(false);
HXLINE(  99)				txt->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 100)				txt->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::SHADOW_dyn());
HXLINE( 101)				{
HXLINE( 101)					 ::flixel::math::FlxBasePoint this1 = txt->shadowOffset;
HXDLIN( 101)					this1->set_x(( (Float)(2) ));
HXDLIN( 101)					this1->set_y(( (Float)(2) ));
            				}
HXLINE( 102)				txt->set_borderColor(-16777216);
HXLINE( 103)				txt->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 104)				::states::editors::content::MetaNote_obj::noteTypeTexts->set(num,txt);
            			}
            			else {
HXLINE( 106)				txt = ( ( ::flixel::text::FlxText)(::states::editors::content::MetaNote_obj::noteTypeTexts->get(num)) );
            			}
            		}
HXLINE( 108)		return (this->_noteTypeText = txt);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MetaNote_obj,findNoteTypeText,return )

void MetaNote_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_f97c2f79d04a61c2_112_draw)
HXLINE( 113)		bool _hx_tmp;
HXDLIN( 113)		bool _hx_tmp1;
HXDLIN( 113)		bool _hx_tmp2;
HXDLIN( 113)		if (::hx::IsNotNull( this->sustainSprite )) {
HXLINE( 113)			_hx_tmp2 = this->sustainSprite->exists;
            		}
            		else {
HXLINE( 113)			_hx_tmp2 = false;
            		}
HXDLIN( 113)		if (_hx_tmp2) {
HXLINE( 113)			_hx_tmp1 = this->sustainSprite->visible;
            		}
            		else {
HXLINE( 113)			_hx_tmp1 = false;
            		}
HXDLIN( 113)		if (_hx_tmp1) {
HXLINE( 113)			_hx_tmp = (this->sustainLength > 0);
            		}
            		else {
HXLINE( 113)			_hx_tmp = false;
            		}
HXDLIN( 113)		if (_hx_tmp) {
HXLINE( 115)			 ::flixel::FlxSprite _hx_tmp3 = this->sustainSprite;
HXDLIN( 115)			Float _hx_tmp4 = this->x;
HXDLIN( 115)			Float _hx_tmp5 = (_hx_tmp4 + (this->get_width() / ( (Float)(2) )));
HXDLIN( 115)			_hx_tmp3->set_x((_hx_tmp5 - (this->sustainSprite->get_width() / ( (Float)(2) ))));
HXLINE( 116)			 ::flixel::FlxSprite _hx_tmp6 = this->sustainSprite;
HXDLIN( 116)			Float _hx_tmp7 = this->y;
HXDLIN( 116)			_hx_tmp6->set_y((_hx_tmp7 + (this->get_height() / ( (Float)(2) ))));
HXLINE( 117)			this->sustainSprite->set_alpha(this->alpha);
HXLINE( 118)			this->sustainSprite->draw();
            		}
HXLINE( 120)		this->super::draw();
HXLINE( 122)		bool _hx_tmp8;
HXDLIN( 122)		bool _hx_tmp9;
HXDLIN( 122)		if (::hx::IsNotNull( this->_noteTypeText )) {
HXLINE( 122)			_hx_tmp9 = this->_noteTypeText->exists;
            		}
            		else {
HXLINE( 122)			_hx_tmp9 = false;
            		}
HXDLIN( 122)		if (_hx_tmp9) {
HXLINE( 122)			_hx_tmp8 = this->_noteTypeText->visible;
            		}
            		else {
HXLINE( 122)			_hx_tmp8 = false;
            		}
HXDLIN( 122)		if (_hx_tmp8) {
HXLINE( 124)			 ::flixel::text::FlxText _hx_tmp10 = this->_noteTypeText;
HXDLIN( 124)			Float _hx_tmp11 = this->x;
HXDLIN( 124)			Float _hx_tmp12 = (_hx_tmp11 + (this->get_width() / ( (Float)(2) )));
HXDLIN( 124)			_hx_tmp10->set_x((_hx_tmp12 - (this->_noteTypeText->get_width() / ( (Float)(2) ))));
HXLINE( 125)			 ::flixel::text::FlxText _hx_tmp13 = this->_noteTypeText;
HXDLIN( 125)			Float _hx_tmp14 = this->y;
HXDLIN( 125)			Float _hx_tmp15 = (_hx_tmp14 + (this->get_height() / ( (Float)(2) )));
HXDLIN( 125)			_hx_tmp13->set_y((_hx_tmp15 - (this->_noteTypeText->get_height() / ( (Float)(2) ))));
HXLINE( 126)			this->_noteTypeText->set_alpha(this->alpha);
HXLINE( 127)			this->_noteTypeText->draw();
            		}
            	}


void MetaNote_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_f97c2f79d04a61c2_132_destroy)
HXLINE( 133)		this->sustainSprite = ( ( ::flixel::FlxSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(this->sustainSprite)) );
HXLINE( 134)		this->super::destroy();
            	}


 ::haxe::ds::IntMap MetaNote_obj::noteTypeTexts;


::hx::ObjectPtr< MetaNote_obj > MetaNote_obj::__new(Float time,int data,::cpp::VirtualArray songData) {
	::hx::ObjectPtr< MetaNote_obj > __this = new MetaNote_obj();
	__this->__construct(time,data,songData);
	return __this;
}

::hx::ObjectPtr< MetaNote_obj > MetaNote_obj::__alloc(::hx::Ctx *_hx_ctx,Float time,int data,::cpp::VirtualArray songData) {
	MetaNote_obj *__this = (MetaNote_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MetaNote_obj), true, "states.editors.content.MetaNote"));
	*(void **)__this = MetaNote_obj::_hx_vtable;
	__this->__construct(time,data,songData);
	return __this;
}

MetaNote_obj::MetaNote_obj()
{
}

void MetaNote_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MetaNote);
	HX_MARK_MEMBER_NAME(isEvent,"isEvent");
	HX_MARK_MEMBER_NAME(songData,"songData");
	HX_MARK_MEMBER_NAME(sustainSprite,"sustainSprite");
	HX_MARK_MEMBER_NAME(chartY,"chartY");
	HX_MARK_MEMBER_NAME(chartNoteData,"chartNoteData");
	HX_MARK_MEMBER_NAME(_lastZoom,"_lastZoom");
	HX_MARK_MEMBER_NAME(_noteTypeText,"_noteTypeText");
	 ::objects::Note_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MetaNote_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(isEvent,"isEvent");
	HX_VISIT_MEMBER_NAME(songData,"songData");
	HX_VISIT_MEMBER_NAME(sustainSprite,"sustainSprite");
	HX_VISIT_MEMBER_NAME(chartY,"chartY");
	HX_VISIT_MEMBER_NAME(chartNoteData,"chartNoteData");
	HX_VISIT_MEMBER_NAME(_lastZoom,"_lastZoom");
	HX_VISIT_MEMBER_NAME(_noteTypeText,"_noteTypeText");
	 ::objects::Note_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MetaNote_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"chartY") ) { return ::hx::Val( chartY ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isEvent") ) { return ::hx::Val( isEvent ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"songData") ) { return ::hx::Val( songData ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_lastZoom") ) { return ::hx::Val( _lastZoom ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hasSustain") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_hasSustain() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setStrumTime") ) { return ::hx::Val( setStrumTime_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sustainSprite") ) { return ::hx::Val( sustainSprite ); }
		if (HX_FIELD_EQ(inName,"chartNoteData") ) { return ::hx::Val( chartNoteData ); }
		if (HX_FIELD_EQ(inName,"_noteTypeText") ) { return ::hx::Val( _noteTypeText ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"changeNoteData") ) { return ::hx::Val( changeNoteData_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_hasSustain") ) { return ::hx::Val( get_hasSustain_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"setSustainLength") ) { return ::hx::Val( setSustainLength_dyn() ); }
		if (HX_FIELD_EQ(inName,"findNoteTypeText") ) { return ::hx::Val( findNoteTypeText_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"updateSustainToZoom") ) { return ::hx::Val( updateSustainToZoom_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"updateSustainToStepCrochet") ) { return ::hx::Val( updateSustainToStepCrochet_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MetaNote_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"noteTypeTexts") ) { outValue = ( noteTypeTexts ); return true; }
	}
	return false;
}

::hx::Val MetaNote_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"chartY") ) { chartY=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isEvent") ) { isEvent=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"songData") ) { songData=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_lastZoom") ) { _lastZoom=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sustainSprite") ) { sustainSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chartNoteData") ) { chartNoteData=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_noteTypeText") ) { _noteTypeText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MetaNote_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"noteTypeTexts") ) { noteTypeTexts=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
	}
	return false;
}

void MetaNote_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("isEvent",d0,6b,4a,12));
	outFields->push(HX_("songData",9f,b4,3b,30));
	outFields->push(HX_("sustainSprite",08,e9,2a,a1));
	outFields->push(HX_("chartY",bb,a5,75,b7));
	outFields->push(HX_("chartNoteData",3a,e2,50,e5));
	outFields->push(HX_("_lastZoom",e8,b3,d7,2b));
	outFields->push(HX_("hasSustain",69,e4,a4,84));
	outFields->push(HX_("_noteTypeText",78,79,93,f1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MetaNote_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(MetaNote_obj,isEvent),HX_("isEvent",d0,6b,4a,12)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(MetaNote_obj,songData),HX_("songData",9f,b4,3b,30)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MetaNote_obj,sustainSprite),HX_("sustainSprite",08,e9,2a,a1)},
	{::hx::fsFloat,(int)offsetof(MetaNote_obj,chartY),HX_("chartY",bb,a5,75,b7)},
	{::hx::fsInt,(int)offsetof(MetaNote_obj,chartNoteData),HX_("chartNoteData",3a,e2,50,e5)},
	{::hx::fsFloat,(int)offsetof(MetaNote_obj,_lastZoom),HX_("_lastZoom",e8,b3,d7,2b)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MetaNote_obj,_noteTypeText),HX_("_noteTypeText",78,79,93,f1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MetaNote_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &MetaNote_obj::noteTypeTexts,HX_("noteTypeTexts",ba,df,24,31)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MetaNote_obj_sMemberFields[] = {
	HX_("isEvent",d0,6b,4a,12),
	HX_("songData",9f,b4,3b,30),
	HX_("sustainSprite",08,e9,2a,a1),
	HX_("chartY",bb,a5,75,b7),
	HX_("chartNoteData",3a,e2,50,e5),
	HX_("changeNoteData",cc,b8,d1,aa),
	HX_("setStrumTime",f4,ed,70,18),
	HX_("_lastZoom",e8,b3,d7,2b),
	HX_("setSustainLength",e7,38,ff,3c),
	HX_("get_hasSustain",b2,6c,9a,fa),
	HX_("updateSustainToZoom",68,13,ce,f7),
	HX_("updateSustainToStepCrochet",93,4b,78,04),
	HX_("_noteTypeText",78,79,93,f1),
	HX_("findNoteTypeText",72,f4,46,35),
	HX_("draw",04,2c,70,42),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

static void MetaNote_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MetaNote_obj::noteTypeTexts,"noteTypeTexts");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MetaNote_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MetaNote_obj::noteTypeTexts,"noteTypeTexts");
};

#endif

::hx::Class MetaNote_obj::__mClass;

static ::String MetaNote_obj_sStaticFields[] = {
	HX_("noteTypeTexts",ba,df,24,31),
	::String(null())
};

void MetaNote_obj::__register()
{
	MetaNote_obj _hx_dummy;
	MetaNote_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.editors.content.MetaNote",40,13,ba,f0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MetaNote_obj::__GetStatic;
	__mClass->mSetStaticField = &MetaNote_obj::__SetStatic;
	__mClass->mMarkFunc = MetaNote_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MetaNote_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MetaNote_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MetaNote_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MetaNote_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MetaNote_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MetaNote_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MetaNote_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_f97c2f79d04a61c2_9_boot)
HXDLIN(   9)		noteTypeTexts =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace states
} // end namespace editors
} // end namespace content
