// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIButton
#include <backend/ui/PsychUIButton.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUICheckBox
#include <backend/ui/PsychUICheckBox.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIEvent
#include <backend/ui/PsychUIEvent.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIRadioGroup
#include <backend/ui/PsychUIRadioGroup.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIRadioItem
#include <backend/ui/PsychUIRadioItem.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_net_FileFilter
#include <openfl/net/FileFilter.h>
#endif
#ifndef INCLUDED_states_editors_content_FileDialogHandler
#include <states/editors/content/FileDialogHandler.h>
#endif
#ifndef INCLUDED_states_editors_content_PreloadListSubState
#include <states/editors/content/PreloadListSubState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1e955f20e1d8150f_14_new,"states.editors.content.PreloadListSubState","new",0x7d9f4d81,"states.editors.content.PreloadListSubState.new","states/editors/content/PreloadListSubState.hx",14,0x29b07252)
HX_LOCAL_STACK_FRAME(_hx_pos_1e955f20e1d8150f_69_create,"states.editors.content.PreloadListSubState","create",0xd520147b,"states.editors.content.PreloadListSubState.create","states/editors/content/PreloadListSubState.hx",69,0x29b07252)
HX_LOCAL_STACK_FRAME(_hx_pos_1e955f20e1d8150f_86_create,"states.editors.content.PreloadListSubState","create",0xd520147b,"states.editors.content.PreloadListSubState.create","states/editors/content/PreloadListSubState.hx",86,0x29b07252)
HX_LOCAL_STACK_FRAME(_hx_pos_1e955f20e1d8150f_113_create,"states.editors.content.PreloadListSubState","create",0xd520147b,"states.editors.content.PreloadListSubState.create","states/editors/content/PreloadListSubState.hx",113,0x29b07252)
HX_LOCAL_STACK_FRAME(_hx_pos_1e955f20e1d8150f_157_create,"states.editors.content.PreloadListSubState","create",0xd520147b,"states.editors.content.PreloadListSubState.create","states/editors/content/PreloadListSubState.hx",157,0x29b07252)
HX_LOCAL_STACK_FRAME(_hx_pos_1e955f20e1d8150f_153_create,"states.editors.content.PreloadListSubState","create",0xd520147b,"states.editors.content.PreloadListSubState.create","states/editors/content/PreloadListSubState.hx",153,0x29b07252)
HX_LOCAL_STACK_FRAME(_hx_pos_1e955f20e1d8150f_183_create,"states.editors.content.PreloadListSubState","create",0xd520147b,"states.editors.content.PreloadListSubState.create","states/editors/content/PreloadListSubState.hx",183,0x29b07252)
HX_LOCAL_STACK_FRAME(_hx_pos_1e955f20e1d8150f_178_create,"states.editors.content.PreloadListSubState","create",0xd520147b,"states.editors.content.PreloadListSubState.create","states/editors/content/PreloadListSubState.hx",178,0x29b07252)
HX_LOCAL_STACK_FRAME(_hx_pos_1e955f20e1d8150f_191_create,"states.editors.content.PreloadListSubState","create",0xd520147b,"states.editors.content.PreloadListSubState.create","states/editors/content/PreloadListSubState.hx",191,0x29b07252)
HX_LOCAL_STACK_FRAME(_hx_pos_1e955f20e1d8150f_41_create,"states.editors.content.PreloadListSubState","create",0xd520147b,"states.editors.content.PreloadListSubState.create","states/editors/content/PreloadListSubState.hx",41,0x29b07252)
HX_LOCAL_STACK_FRAME(_hx_pos_1e955f20e1d8150f_209_update,"states.editors.content.PreloadListSubState","update",0xe0163388,"states.editors.content.PreloadListSubState.update","states/editors/content/PreloadListSubState.hx",209,0x29b07252)
HX_LOCAL_STACK_FRAME(_hx_pos_1e955f20e1d8150f_229_UIEvent,"states.editors.content.PreloadListSubState","UIEvent",0x9d271ec7,"states.editors.content.PreloadListSubState.UIEvent","states/editors/content/PreloadListSubState.hx",229,0x29b07252)
HX_LOCAL_STACK_FRAME(_hx_pos_1e955f20e1d8150f_237_updateButtons,"states.editors.content.PreloadListSubState","updateButtons",0xf5f94799,"states.editors.content.PreloadListSubState.updateButtons","states/editors/content/PreloadListSubState.hx",237,0x29b07252)
HX_LOCAL_STACK_FRAME(_hx_pos_1e955f20e1d8150f_256_getCurLoadFilters,"states.editors.content.PreloadListSubState","getCurLoadFilters",0xbdc5e6ac,"states.editors.content.PreloadListSubState.getCurLoadFilters","states/editors/content/PreloadListSubState.hx",256,0x29b07252)
HX_LOCAL_STACK_FRAME(_hx_pos_1e955f20e1d8150f_261_getCurCheckedName,"states.editors.content.PreloadListSubState","getCurCheckedName",0xbb54f789,"states.editors.content.PreloadListSubState.getCurCheckedName","states/editors/content/PreloadListSubState.hx",261,0x29b07252)
HX_LOCAL_STACK_FRAME(_hx_pos_1e955f20e1d8150f_266_showOutput,"states.editors.content.PreloadListSubState","showOutput",0x09448cdd,"states.editors.content.PreloadListSubState.showOutput","states/editors/content/PreloadListSubState.hx",266,0x29b07252)
HX_LOCAL_STACK_FRAME(_hx_pos_1e955f20e1d8150f_276_destroy,"states.editors.content.PreloadListSubState","destroy",0xba0d4e9b,"states.editors.content.PreloadListSubState.destroy","states/editors/content/PreloadListSubState.hx",276,0x29b07252)
namespace states{
namespace editors{
namespace content{

void PreloadListSubState_obj::__construct( ::Dynamic saveCallback,::Array< ::String > locked, ::haxe::ds::StringMap list){
            	HX_GC_STACKFRAME(&_hx_pos_1e955f20e1d8150f_14_new)
HXLINE( 264)		this->outputTime = ((Float)0);
HXLINE(  33)		this->fileDialog =  ::states::editors::content::FileDialogHandler_obj::__alloc( HX_CTX );
HXLINE(  18)		this->preloadListKeys = ::Array_obj< ::String >::__new(0);
HXLINE(  22)		this->saveCallback = saveCallback;
HXLINE(  23)		::Array< ::String > _hx_tmp;
HXDLIN(  23)		if (::hx::IsNotNull( this->lockedList )) {
HXLINE(  23)			_hx_tmp = locked;
            		}
            		else {
HXLINE(  23)			_hx_tmp = ::Array_obj< ::String >::__new(0);
            		}
HXDLIN(  23)		this->lockedList = _hx_tmp;
HXLINE(  24)		 ::haxe::ds::StringMap _hx_tmp1;
HXDLIN(  24)		if (::hx::IsNotNull( list )) {
HXLINE(  24)			_hx_tmp1 = list;
            		}
            		else {
HXLINE(  24)			_hx_tmp1 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
HXDLIN(  24)		this->preloadList = _hx_tmp1;
HXLINE(  26)		{
HXLINE(  26)			::Dynamic map = this->preloadList;
HXDLIN(  26)			::Dynamic _g_map = map;
HXDLIN(  26)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN(  26)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  26)				::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  26)				int _g_value = ( (int)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN(  26)				::String _g_key = key;
HXDLIN(  26)				::String k = _g_key;
HXDLIN(  26)				int v = _g_value;
HXLINE(  27)				this->preloadListKeys->push(k);
            			}
            		}
HXLINE(  29)		super::__construct();
            	}

Dynamic PreloadListSubState_obj::__CreateEmpty() { return new PreloadListSubState_obj; }

void *PreloadListSubState_obj::_hx_vtable = 0;

Dynamic PreloadListSubState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PreloadListSubState_obj > _hx_result = new PreloadListSubState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool PreloadListSubState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5661ffbf) {
		if (inClassId<=(int)0x3c0818b8) {
			if (inClassId<=(int)0x028a7083) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x028a7083;
			} else {
				return inClassId==(int)0x3c0818b8;
			}
		} else {
			return inClassId==(int)0x5661ffbf;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

static ::backend::ui::PsychUIEvent_obj _hx_states_editors_content_PreloadListSubState__hx_backend_ui_PsychUIEvent= {
	( void (::hx::Object::*)(::String, ::Dynamic))&::states::editors::content::PreloadListSubState_obj::UIEvent,
};

void *PreloadListSubState_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x768fb553: return &_hx_states_editors_content_PreloadListSubState__hx_backend_ui_PsychUIEvent;
	}
	return super::_hx_getInterface(inHash);
}

void PreloadListSubState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::content::PreloadListSubState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_1e955f20e1d8150f_69_create)
HXLINE(  70)			if ((_gthis->radioGrp->checked < 0)) {
HXLINE(  70)				return;
            			}
HXLINE(  72)			::String name;
HXDLIN(  72)			if (::hx::IsNotNull( _gthis->radioGrp->checkedRadio )) {
HXLINE(  72)				name = _gthis->radioGrp->checkedRadio->text->text;
            			}
            			else {
HXLINE(  72)				name = HX_("",00,00,00,00);
            			}
HXLINE(  73)			if (!(_gthis->preloadList->exists(name))) {
HXLINE(  73)				return;
            			}
HXLINE(  75)			_gthis->preloadList->remove(name);
HXLINE(  76)			_gthis->preloadListKeys->remove(name);
HXLINE(  77)			_gthis->radioGrp->set_labels(_gthis->preloadListKeys);
HXLINE(  78)			_gthis->updateButtons();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::content::PreloadListSubState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_1e955f20e1d8150f_86_create)
HXLINE(  87)			::String name;
HXDLIN(  87)			if (::hx::IsNotNull( _gthis->radioGrp->checkedRadio )) {
HXLINE(  87)				name = _gthis->radioGrp->checkedRadio->text->text;
            			}
            			else {
HXLINE(  87)				name = HX_("",00,00,00,00);
            			}
HXLINE(  88)			if (!(_gthis->preloadList->exists(name))) {
HXLINE(  88)				return;
            			}
HXLINE(  90)			int filters = 0;
HXLINE(  91)			if (_gthis->lqCheckBox->checked) {
HXLINE(  91)				filters = (filters | 1);
            			}
HXLINE(  92)			if (_gthis->hqCheckBox->checked) {
HXLINE(  92)				filters = (filters | 2);
            			}
HXLINE(  93)			if (_gthis->smCheckBox->checked) {
HXLINE(  93)				filters = (filters | 4);
            			}
HXLINE(  94)			_gthis->preloadList->set(name,filters);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::content::PreloadListSubState,_gthis) HXARGC(2)
            		void _hx_run( ::haxe::io::Path path,bool isFolder){
            			HX_GC_STACKFRAME(&_hx_pos_1e955f20e1d8150f_113_create)
HXLINE( 114)			::String exePath = ::StringTools_obj::replace(::Sys_obj::getCwd(),HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE( 115)			if (::StringTools_obj::startsWith(path->dir,exePath)) {
HXLINE( 117)				::String pathStr = path->dir.substr(exePath.length,null());
HXLINE( 118)				::Array< ::String > split = pathStr.split(HX_("/",2f,00,00,00));
HXLINE( 119)				::String _hx_switch_0 = split->__get(0);
            				if (  (_hx_switch_0==HX_("assets",83,48,03,4c)) ||  (_hx_switch_0==HX_("mods",71,d3,60,48)) ){
HXLINE( 122)					{
HXLINE( 124)						::String _hx_switch_1 = split->__get(1);
            						if (  (_hx_switch_1==HX_("images",b8,50,92,fe)) ||  (_hx_switch_1==HX_("music",a5,d0,5a,10)) ||  (_hx_switch_1==HX_("songs",fe,36,c7,80)) ||  (_hx_switch_1==HX_("sounds",c4,a8,2e,32)) ){
HXLINE( 127)							split->shift();
HXLINE( 130)							::String pathStr1 = (split->join(HX_("/",2f,00,00,00)) + HX_("/",2f,00,00,00));
HXDLIN( 130)							pathStr = (pathStr1 + path->file);
HXLINE( 131)							bool addToList;
HXDLIN( 131)							if (isFolder) {
HXLINE( 131)								addToList = !(::StringTools_obj::endsWith(pathStr,HX_("/",2f,00,00,00)));
            							}
            							else {
HXLINE( 131)								addToList = false;
            							}
HXDLIN( 131)							if (addToList) {
HXLINE( 131)								pathStr = (pathStr + HX_("/",2f,00,00,00));
            							}
HXLINE( 133)							if (!(_gthis->lockedList->contains(pathStr))) {
HXLINE( 135)								_gthis->preloadList->set(pathStr,(1 | 2));
HXLINE( 136)								_gthis->preloadListKeys->push(pathStr);
HXLINE( 137)								_gthis->radioGrp->set_labels(_gthis->preloadListKeys);
HXLINE( 138)								_gthis->showOutput((HX_("File added to preload: ",2e,ea,94,bd) + pathStr),null());
            							}
            							else {
HXLINE( 140)								_gthis->showOutput(HX_("File is already preloaded automatically!",10,d8,c6,bc),true);
            							}
HXLINE( 141)							return;
HXLINE( 126)							goto _hx_goto_3;
            						}
            						_hx_goto_3:;
HXLINE( 124)						::String _hx_switch_2 = split->__get(2);
            						if (  (_hx_switch_2==HX_("images",b8,50,92,fe)) ||  (_hx_switch_2==HX_("music",a5,d0,5a,10)) ||  (_hx_switch_2==HX_("songs",fe,36,c7,80)) ||  (_hx_switch_2==HX_("sounds",c4,a8,2e,32)) ){
HXLINE( 127)							split->shift();
HXLINE( 128)							split->shift();
HXLINE( 130)							::String pathStr2 = (split->join(HX_("/",2f,00,00,00)) + HX_("/",2f,00,00,00));
HXDLIN( 130)							pathStr = (pathStr2 + path->file);
HXLINE( 131)							bool addToList1;
HXDLIN( 131)							if (isFolder) {
HXLINE( 131)								addToList1 = !(::StringTools_obj::endsWith(pathStr,HX_("/",2f,00,00,00)));
            							}
            							else {
HXLINE( 131)								addToList1 = false;
            							}
HXDLIN( 131)							if (addToList1) {
HXLINE( 131)								pathStr = (pathStr + HX_("/",2f,00,00,00));
            							}
HXLINE( 133)							if (!(_gthis->lockedList->contains(pathStr))) {
HXLINE( 135)								_gthis->preloadList->set(pathStr,(1 | 2));
HXLINE( 136)								_gthis->preloadListKeys->push(pathStr);
HXLINE( 137)								_gthis->radioGrp->set_labels(_gthis->preloadListKeys);
HXLINE( 138)								_gthis->showOutput((HX_("File added to preload: ",2e,ea,94,bd) + pathStr),null());
            							}
            							else {
HXLINE( 140)								_gthis->showOutput(HX_("File is already preloaded automatically!",10,d8,c6,bc),true);
            							}
HXLINE( 141)							return;
HXLINE( 126)							goto _hx_goto_4;
            						}
            						_hx_goto_4:;
            					}
HXLINE( 144)					_gthis->showOutput(HX_("File must be inside images/music/songs subfolder!",fc,9e,b7,c9),true);
HXLINE( 121)					goto _hx_goto_2;
            				}
            				/* default */{
HXLINE( 146)					_gthis->showOutput(HX_("File must be inside assets/mods folder!",16,36,57,0e),true);
            				}
            				_hx_goto_2:;
            			}
            			else {
HXLINE( 149)				_gthis->showOutput(HX_("File is not inside Psych Engine's folder!",2b,e3,1c,ba),true);
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_4, ::Dynamic,addToList, ::states::editors::content::PreloadListSubState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::Dynamic,addToList, ::states::editors::content::PreloadListSubState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_1e955f20e1d8150f_157_create)
HXLINE( 158)				 ::haxe::io::Path path =  ::haxe::io::Path_obj::__alloc( HX_CTX ,::StringTools_obj::replace(_gthis->fileDialog->path,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00)));
HXLINE( 160)				::String ext = path->ext;
HXLINE( 161)				if (::hx::IsNotNull( ext )) {
HXLINE( 161)					ext = ext.toLowerCase();
            				}
HXLINE( 163)				::String _hx_switch_3 = ext;
            				if (  (_hx_switch_3==HX_("ogg",4f,94,54,00)) ||  (_hx_switch_3==HX_("png",a9,5c,55,00)) ){
HXLINE( 166)					addToList(path,false);
HXDLIN( 166)					goto _hx_goto_5;
            				}
            				/* default */{
HXLINE( 168)					_gthis->showOutput((HX_("Unsupported Extension: ",ba,1f,ce,27) + ext),true);
            				}
            				_hx_goto_5:;
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_1e955f20e1d8150f_153_create)
HXLINE( 154)			if (!(_gthis->fileDialog->completed)) {
HXLINE( 154)				return;
            			}
HXLINE( 156)			 ::states::editors::content::FileDialogHandler _gthis1 = _gthis->fileDialog;
HXDLIN( 156)			_gthis1->open(null(),HX_("Load a .PNG/.OGG File...",ce,62,23,59),::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::net::FileFilter_obj::__alloc( HX_CTX ,HX_("Image/Audio",a2,0b,52,7d),HX_("*.png;*.ogg",15,f0,eb,2e),null())), ::Dynamic(new _hx_Closure_3(addToList,_gthis)),null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_6, ::Dynamic,addToList, ::states::editors::content::PreloadListSubState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_5, ::states::editors::content::PreloadListSubState,_gthis, ::Dynamic,addToList) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_1e955f20e1d8150f_183_create)
HXLINE( 183)				 ::Dynamic addToList1 = addToList;
HXDLIN( 183)				addToList1( ::haxe::io::Path_obj::__alloc( HX_CTX ,::StringTools_obj::replace(_gthis->fileDialog->path,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00))),true);
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_1e955f20e1d8150f_178_create)
HXLINE( 179)			if (!(_gthis->fileDialog->completed)) {
HXLINE( 179)				return;
            			}
HXLINE( 181)			_gthis->fileDialog->openDirectory(HX_("Load a folder...",a7,e4,8a,a6), ::Dynamic(new _hx_Closure_5(_gthis,addToList)),null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::states::editors::content::PreloadListSubState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_1e955f20e1d8150f_191_create)
HXLINE( 192)			if (!(_gthis->fileDialog->completed)) {
HXLINE( 192)				return;
            			}
HXLINE( 194)			if (::hx::IsNotNull( _gthis->saveCallback )) {
HXLINE( 194)				_gthis->saveCallback(_gthis->preloadList);
            			}
HXLINE( 195)			_gthis->close();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_1e955f20e1d8150f_41_create)
HXDLIN(  41)		 ::states::editors::content::PreloadListSubState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  42)		this->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::flixel::FlxG_obj::cameras->list->__get((::flixel::FlxG_obj::cameras->list->length - 1)).StaticCast<  ::flixel::FlxCamera >()));
HXLINE(  43)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-16777216,null(),null());
HXLINE(  44)		bg->set_alpha(((Float)0.8));
HXLINE(  45)		{
HXLINE(  45)			 ::flixel::math::FlxBasePoint this1 = bg->scale;
HXDLIN(  45)			this1->set_x(( (Float)(520) ));
HXDLIN(  45)			this1->set_y(( (Float)(520) ));
            		}
HXLINE(  46)		bg->updateHitbox();
HXLINE(  47)		{
HXLINE(  47)			int axes = 17;
HXDLIN(  47)			bool _hx_tmp;
HXDLIN(  47)			if ((axes != 1)) {
HXLINE(  47)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(  47)				_hx_tmp = true;
            			}
HXDLIN(  47)			if (_hx_tmp) {
HXLINE(  47)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  47)				bg->set_x(((( (Float)(_hx_tmp1) ) - bg->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  47)			bool _hx_tmp2;
HXDLIN(  47)			if ((axes != 16)) {
HXLINE(  47)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  47)				_hx_tmp2 = true;
            			}
HXDLIN(  47)			if (_hx_tmp2) {
HXLINE(  47)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  47)				bg->set_y(((( (Float)(_hx_tmp3) ) - bg->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  48)		bg->set_cameras(this->get_cameras());
HXLINE(  49)		this->add(bg);
HXLINE(  51)		 ::flixel::text::FlxText titleText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,(bg->y + 30),400,HX_("Preload List",55,04,a8,f3),24,null());
HXLINE(  52)		{
HXLINE(  52)			int axes1 = 1;
HXDLIN(  52)			bool _hx_tmp4;
HXDLIN(  52)			if ((axes1 != 1)) {
HXLINE(  52)				_hx_tmp4 = (axes1 == 17);
            			}
            			else {
HXLINE(  52)				_hx_tmp4 = true;
            			}
HXDLIN(  52)			if (_hx_tmp4) {
HXLINE(  52)				int _hx_tmp5 = ::flixel::FlxG_obj::width;
HXDLIN(  52)				titleText->set_x(((( (Float)(_hx_tmp5) ) - titleText->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  52)			bool _hx_tmp6;
HXDLIN(  52)			if ((axes1 != 16)) {
HXLINE(  52)				_hx_tmp6 = (axes1 == 17);
            			}
            			else {
HXLINE(  52)				_hx_tmp6 = true;
            			}
HXDLIN(  52)			if (_hx_tmp6) {
HXLINE(  52)				int _hx_tmp7 = ::flixel::FlxG_obj::height;
HXDLIN(  52)				titleText->set_y(((( (Float)(_hx_tmp7) ) - titleText->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  53)		titleText->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  54)		titleText->set_cameras(this->get_cameras());
HXLINE(  55)		this->add(titleText);
HXLINE(  57)		Float bg1 = bg->x;
HXDLIN(  57)		Float btn = ((bg1 + bg->get_width()) - ( (Float)(40) ));
HXDLIN(  57)		 ::backend::ui::PsychUIButton btn1 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,btn,bg->y,HX_("X",58,00,00,00),this->close_dyn(),40,null());
HXLINE(  58)		btn1->set_cameras(this->get_cameras());
HXLINE(  59)		this->add(btn1);
HXLINE(  61)		this->outputTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,24,640,800,HX_("",00,00,00,00),24,null());
HXLINE(  62)		this->outputTxt->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_FAST_dyn());
HXLINE(  63)		this->outputTxt->set_borderSize(( (Float)(1) ));
HXLINE(  64)		 ::flixel::text::FlxText _hx_tmp8 = this->outputTxt;
HXDLIN(  64)		_hx_tmp8->set_cameras(this->get_cameras());
HXLINE(  65)		this->outputTxt->set_alpha(( (Float)(0) ));
HXLINE(  66)		this->add(this->outputTxt);
HXLINE(  68)		this->removeButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,0,HX_("X",58,00,00,00), ::Dynamic(new _hx_Closure_0(_gthis)),20,null());
HXLINE(  80)		 ::backend::ui::PsychUIButton _hx_tmp9 = this->removeButton;
HXDLIN(  80)		_hx_tmp9->set_cameras(this->get_cameras());
HXLINE(  81)		this->removeButton->normalStyle->__SetField(HX_("bgColor",5e,81,83,f7),-65536,::hx::paccDynamic);
HXLINE(  82)		this->removeButton->normalStyle->__SetField(HX_("textColor",76,01,4a,e3),-1,::hx::paccDynamic);
HXLINE(  83)		this->add(this->removeButton);
HXLINE(  85)		 ::Dynamic updateFilters =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE(  96)		Float bg2 = bg->x;
HXDLIN(  96)		Float _hx_tmp10 = ((bg2 + bg->get_width()) - ( (Float)(100) ));
HXDLIN(  96)		Float bg3 = bg->y;
HXDLIN(  96)		Float _hx_tmp11 = ((bg3 + bg->get_height()) - ( (Float)(130) ));
HXDLIN(  96)		this->lqCheckBox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,_hx_tmp10,_hx_tmp11,HX_("Low Qual.",b3,53,85,7d),0,updateFilters);
HXLINE(  97)		this->hqCheckBox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,this->lqCheckBox->x,(this->lqCheckBox->y + 22),HX_("High Qual.",41,69,7a,3e),0,updateFilters);
HXLINE(  98)		this->smCheckBox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,this->hqCheckBox->x,(this->hqCheckBox->y + 22),HX_("Story Mode",ae,07,32,40),0,updateFilters);
HXLINE(  99)		 ::backend::ui::PsychUICheckBox _hx_tmp12 = this->lqCheckBox;
HXDLIN(  99)		_hx_tmp12->set_cameras(this->get_cameras());
HXLINE( 100)		 ::backend::ui::PsychUICheckBox _hx_tmp13 = this->hqCheckBox;
HXDLIN( 100)		_hx_tmp13->set_cameras(this->get_cameras());
HXLINE( 101)		 ::backend::ui::PsychUICheckBox _hx_tmp14 = this->smCheckBox;
HXDLIN( 101)		_hx_tmp14->set_cameras(this->get_cameras());
HXLINE( 102)		this->add(this->lqCheckBox);
HXLINE( 103)		this->add(this->hqCheckBox);
HXLINE( 104)		this->add(this->smCheckBox);
HXLINE( 106)		this->radioGrp =  ::backend::ui::PsychUIRadioGroup_obj::__alloc( HX_CTX ,(bg->x + 60),(bg->y + 80),this->preloadListKeys,25,15,false,280);
HXLINE( 107)		 ::backend::ui::PsychUIRadioGroup _hx_tmp15 = this->radioGrp;
HXDLIN( 107)		_hx_tmp15->set_cameras(this->get_cameras());
HXLINE( 108)		this->add(this->radioGrp);
HXLINE( 110)		this->removeButton->set_x((this->radioGrp->x - ( (Float)(30) )));
HXLINE( 112)		 ::Dynamic addToList =  ::Dynamic(new _hx_Closure_2(_gthis));
HXLINE( 152)		Float bg4 = bg->y;
HXDLIN( 152)		 ::backend::ui::PsychUIButton loadFileBtn =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,((bg4 + bg->get_height()) - ( (Float)(40) )),HX_("Load File",b6,46,44,c5), ::Dynamic(new _hx_Closure_4(addToList,_gthis)),null(),null());
HXLINE( 172)		{
HXLINE( 172)			int axes2 = 1;
HXDLIN( 172)			bool _hx_tmp16;
HXDLIN( 172)			if ((axes2 != 1)) {
HXLINE( 172)				_hx_tmp16 = (axes2 == 17);
            			}
            			else {
HXLINE( 172)				_hx_tmp16 = true;
            			}
HXDLIN( 172)			if (_hx_tmp16) {
HXLINE( 172)				int _hx_tmp17 = ::flixel::FlxG_obj::width;
HXDLIN( 172)				loadFileBtn->set_x(((( (Float)(_hx_tmp17) ) - loadFileBtn->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 172)			bool _hx_tmp18;
HXDLIN( 172)			if ((axes2 != 16)) {
HXLINE( 172)				_hx_tmp18 = (axes2 == 17);
            			}
            			else {
HXLINE( 172)				_hx_tmp18 = true;
            			}
HXDLIN( 172)			if (_hx_tmp18) {
HXLINE( 172)				int _hx_tmp19 = ::flixel::FlxG_obj::height;
HXDLIN( 172)				loadFileBtn->set_y(((( (Float)(_hx_tmp19) ) - loadFileBtn->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 173)		loadFileBtn->set_cameras(this->get_cameras());
HXLINE( 174)		loadFileBtn->set_x((loadFileBtn->x - ( (Float)(120) )));
HXLINE( 175)		this->add(loadFileBtn);
HXLINE( 177)		Float bg5 = bg->y;
HXDLIN( 177)		 ::backend::ui::PsychUIButton loadFolderBtn =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,((bg5 + bg->get_height()) - ( (Float)(40) )),HX_("Load Folder",68,f1,52,48), ::Dynamic(new _hx_Closure_6(addToList,_gthis)),null(),null());
HXLINE( 186)		{
HXLINE( 186)			int axes3 = 1;
HXDLIN( 186)			bool _hx_tmp20;
HXDLIN( 186)			if ((axes3 != 1)) {
HXLINE( 186)				_hx_tmp20 = (axes3 == 17);
            			}
            			else {
HXLINE( 186)				_hx_tmp20 = true;
            			}
HXDLIN( 186)			if (_hx_tmp20) {
HXLINE( 186)				int _hx_tmp21 = ::flixel::FlxG_obj::width;
HXDLIN( 186)				loadFolderBtn->set_x(((( (Float)(_hx_tmp21) ) - loadFolderBtn->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 186)			bool _hx_tmp22;
HXDLIN( 186)			if ((axes3 != 16)) {
HXLINE( 186)				_hx_tmp22 = (axes3 == 17);
            			}
            			else {
HXLINE( 186)				_hx_tmp22 = true;
            			}
HXDLIN( 186)			if (_hx_tmp22) {
HXLINE( 186)				int _hx_tmp23 = ::flixel::FlxG_obj::height;
HXDLIN( 186)				loadFolderBtn->set_y(((( (Float)(_hx_tmp23) ) - loadFolderBtn->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 187)		loadFolderBtn->set_cameras(this->get_cameras());
HXLINE( 188)		this->add(loadFolderBtn);
HXLINE( 190)		Float bg6 = bg->y;
HXDLIN( 190)		 ::backend::ui::PsychUIButton saveBtn =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,((bg6 + bg->get_height()) - ( (Float)(40) )),HX_("Save",5d,b7,26,37), ::Dynamic(new _hx_Closure_7(_gthis)),null(),null());
HXLINE( 197)		{
HXLINE( 197)			int axes4 = 1;
HXDLIN( 197)			bool _hx_tmp24;
HXDLIN( 197)			if ((axes4 != 1)) {
HXLINE( 197)				_hx_tmp24 = (axes4 == 17);
            			}
            			else {
HXLINE( 197)				_hx_tmp24 = true;
            			}
HXDLIN( 197)			if (_hx_tmp24) {
HXLINE( 197)				int _hx_tmp25 = ::flixel::FlxG_obj::width;
HXDLIN( 197)				saveBtn->set_x(((( (Float)(_hx_tmp25) ) - saveBtn->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 197)			bool _hx_tmp26;
HXDLIN( 197)			if ((axes4 != 16)) {
HXLINE( 197)				_hx_tmp26 = (axes4 == 17);
            			}
            			else {
HXLINE( 197)				_hx_tmp26 = true;
            			}
HXDLIN( 197)			if (_hx_tmp26) {
HXLINE( 197)				int _hx_tmp27 = ::flixel::FlxG_obj::height;
HXDLIN( 197)				saveBtn->set_y(((( (Float)(_hx_tmp27) ) - saveBtn->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 198)		saveBtn->set_cameras(this->get_cameras());
HXLINE( 199)		saveBtn->set_x((saveBtn->x + 120));
HXLINE( 200)		saveBtn->normalStyle->__SetField(HX_("bgColor",5e,81,83,f7),-16744448,::hx::paccDynamic);
HXLINE( 201)		saveBtn->normalStyle->__SetField(HX_("textColor",76,01,4a,e3),-1,::hx::paccDynamic);
HXLINE( 202)		this->add(saveBtn);
HXLINE( 204)		this->updateButtons();
HXLINE( 205)		this->super::create();
            	}


void PreloadListSubState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_1e955f20e1d8150f_209_update)
HXLINE( 210)		this->super::update(elapsed);
HXLINE( 212)		this->outputTime = ::Math_obj::max(( (Float)(0) ),(this->outputTime - elapsed));
HXLINE( 213)		this->outputTxt->set_alpha(this->outputTime);
HXLINE( 214)		if (!(this->fileDialog->completed)) {
HXLINE( 214)			return;
            		}
HXLINE( 216)		if (::backend::Controls_obj::instance->get_BACK()) {
HXLINE( 218)			this->close();
            		}
HXLINE( 221)		 ::backend::ui::PsychUIRadioItem checked = this->radioGrp->checkedRadio;
HXLINE( 222)		if (::hx::IsNotNull( checked )) {
HXLINE( 223)			this->removeButton->set_y((checked->y - ( (Float)(1) )));
            		}
            	}


void PreloadListSubState_obj::UIEvent(::String id, ::Dynamic sender){
            	HX_STACKFRAME(&_hx_pos_1e955f20e1d8150f_229_UIEvent)
HXDLIN( 229)		if ((id == ::backend::ui::PsychUIRadioGroup_obj::CLICK_EVENT)) {
HXLINE( 232)			this->updateButtons();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PreloadListSubState_obj,UIEvent,(void))

void PreloadListSubState_obj::updateButtons(){
            	HX_STACKFRAME(&_hx_pos_1e955f20e1d8150f_237_updateButtons)
HXLINE( 238)		 ::backend::ui::PsychUIRadioItem checked = this->radioGrp->checkedRadio;
HXLINE( 239)		if (::hx::IsNotNull( checked )) {
HXLINE( 241)			int filters;
HXDLIN( 241)			if (::hx::IsNotNull( this->radioGrp->checkedRadio )) {
HXLINE( 241)				::String key;
HXDLIN( 241)				if (::hx::IsNotNull( this->radioGrp->checkedRadio )) {
HXLINE( 241)					key = this->radioGrp->checkedRadio->text->text;
            				}
            				else {
HXLINE( 241)					key = HX_("",00,00,00,00);
            				}
HXDLIN( 241)				filters = this->preloadList->get_int(key);
            			}
            			else {
HXLINE( 241)				filters = 0;
            			}
HXLINE( 242)			this->lqCheckBox->set_checked(((filters & 1) == 1));
HXLINE( 243)			this->hqCheckBox->set_checked(((filters & 2) == 2));
HXLINE( 244)			this->smCheckBox->set_checked(((filters & 4) == 4));
            		}
HXLINE( 247)		bool vis = ::hx::IsNotNull( checked );
HXLINE( 248)		 ::backend::ui::PsychUIButton _hx_tmp = this->removeButton;
HXDLIN( 248)		_hx_tmp->set_visible(this->removeButton->set_active(vis));
HXLINE( 249)		 ::backend::ui::PsychUICheckBox _hx_tmp1 = this->lqCheckBox;
HXDLIN( 249)		_hx_tmp1->set_visible(this->lqCheckBox->set_active(vis));
HXLINE( 250)		 ::backend::ui::PsychUICheckBox _hx_tmp2 = this->hqCheckBox;
HXDLIN( 250)		_hx_tmp2->set_visible(this->hqCheckBox->set_active(vis));
HXLINE( 251)		 ::backend::ui::PsychUICheckBox _hx_tmp3 = this->smCheckBox;
HXDLIN( 251)		_hx_tmp3->set_visible(this->smCheckBox->set_active(vis));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PreloadListSubState_obj,updateButtons,(void))

int PreloadListSubState_obj::getCurLoadFilters(){
            	HX_STACKFRAME(&_hx_pos_1e955f20e1d8150f_256_getCurLoadFilters)
HXDLIN( 256)		if (::hx::IsNotNull( this->radioGrp->checkedRadio )) {
HXDLIN( 256)			::String key;
HXDLIN( 256)			if (::hx::IsNotNull( this->radioGrp->checkedRadio )) {
HXDLIN( 256)				key = this->radioGrp->checkedRadio->text->text;
            			}
            			else {
HXDLIN( 256)				key = HX_("",00,00,00,00);
            			}
HXDLIN( 256)			return this->preloadList->get_int(key);
            		}
            		else {
HXDLIN( 256)			return 0;
            		}
HXDLIN( 256)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(PreloadListSubState_obj,getCurLoadFilters,return )

::String PreloadListSubState_obj::getCurCheckedName(){
            	HX_STACKFRAME(&_hx_pos_1e955f20e1d8150f_261_getCurCheckedName)
HXDLIN( 261)		if (::hx::IsNotNull( this->radioGrp->checkedRadio )) {
HXDLIN( 261)			return this->radioGrp->checkedRadio->text->text;
            		}
            		else {
HXDLIN( 261)			return HX_("",00,00,00,00);
            		}
HXDLIN( 261)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(PreloadListSubState_obj,getCurCheckedName,return )

void PreloadListSubState_obj::showOutput(::String txt,::hx::Null< bool >  __o_isError){
            		bool isError = __o_isError.Default(false);
            	HX_STACKFRAME(&_hx_pos_1e955f20e1d8150f_266_showOutput)
HXLINE( 267)		int _hx_tmp;
HXDLIN( 267)		if (isError) {
HXLINE( 267)			_hx_tmp = -65536;
            		}
            		else {
HXLINE( 267)			_hx_tmp = -1;
            		}
HXDLIN( 267)		this->outputTxt->set_color(_hx_tmp);
HXLINE( 268)		this->outputTxt->set_text(txt);
HXLINE( 269)		this->outputTime = ( (Float)(3) );
HXLINE( 271)		if (isError) {
HXLINE( 271)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 271)			_hx_tmp1->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("cancelMenu",39,a4,43,b7)),null(),true,null()),((Float)0.4),null(),null(),null(),null());
            		}
            		else {
HXLINE( 272)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN( 272)			_hx_tmp2->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("scrollMenu",4c,d4,18,06)),null(),true,null()),((Float)0.4),null(),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PreloadListSubState_obj,showOutput,(void))

void PreloadListSubState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_1e955f20e1d8150f_276_destroy)
HXLINE( 277)		{
HXLINE( 277)			int _g = 0;
HXDLIN( 277)			::Array< ::Dynamic> _g1 = this->members;
HXDLIN( 277)			while((_g < _g1->length)){
HXLINE( 277)				 ::flixel::FlxBasic member = _g1->__get(_g).StaticCast<  ::flixel::FlxBasic >();
HXDLIN( 277)				_g = (_g + 1);
HXDLIN( 277)				::flixel::util::FlxDestroyUtil_obj::destroy(member);
            			}
            		}
HXLINE( 278)		this->fileDialog = ( ( ::states::editors::content::FileDialogHandler)(::flixel::util::FlxDestroyUtil_obj::destroy(this->fileDialog)) );
HXLINE( 279)		this->super::destroy();
            	}



::hx::ObjectPtr< PreloadListSubState_obj > PreloadListSubState_obj::__new( ::Dynamic saveCallback,::Array< ::String > locked, ::haxe::ds::StringMap list) {
	::hx::ObjectPtr< PreloadListSubState_obj > __this = new PreloadListSubState_obj();
	__this->__construct(saveCallback,locked,list);
	return __this;
}

::hx::ObjectPtr< PreloadListSubState_obj > PreloadListSubState_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic saveCallback,::Array< ::String > locked, ::haxe::ds::StringMap list) {
	PreloadListSubState_obj *__this = (PreloadListSubState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PreloadListSubState_obj), true, "states.editors.content.PreloadListSubState"));
	*(void **)__this = PreloadListSubState_obj::_hx_vtable;
	__this->__construct(saveCallback,locked,list);
	return __this;
}

PreloadListSubState_obj::PreloadListSubState_obj()
{
}

void PreloadListSubState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PreloadListSubState);
	HX_MARK_MEMBER_NAME(lockedList,"lockedList");
	HX_MARK_MEMBER_NAME(preloadList,"preloadList");
	HX_MARK_MEMBER_NAME(preloadListKeys,"preloadListKeys");
	HX_MARK_MEMBER_NAME(saveCallback,"saveCallback");
	HX_MARK_MEMBER_NAME(outputTxt,"outputTxt");
	HX_MARK_MEMBER_NAME(fileDialog,"fileDialog");
	HX_MARK_MEMBER_NAME(radioGrp,"radioGrp");
	HX_MARK_MEMBER_NAME(removeButton,"removeButton");
	HX_MARK_MEMBER_NAME(lqCheckBox,"lqCheckBox");
	HX_MARK_MEMBER_NAME(hqCheckBox,"hqCheckBox");
	HX_MARK_MEMBER_NAME(smCheckBox,"smCheckBox");
	HX_MARK_MEMBER_NAME(outputTime,"outputTime");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PreloadListSubState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lockedList,"lockedList");
	HX_VISIT_MEMBER_NAME(preloadList,"preloadList");
	HX_VISIT_MEMBER_NAME(preloadListKeys,"preloadListKeys");
	HX_VISIT_MEMBER_NAME(saveCallback,"saveCallback");
	HX_VISIT_MEMBER_NAME(outputTxt,"outputTxt");
	HX_VISIT_MEMBER_NAME(fileDialog,"fileDialog");
	HX_VISIT_MEMBER_NAME(radioGrp,"radioGrp");
	HX_VISIT_MEMBER_NAME(removeButton,"removeButton");
	HX_VISIT_MEMBER_NAME(lqCheckBox,"lqCheckBox");
	HX_VISIT_MEMBER_NAME(hqCheckBox,"hqCheckBox");
	HX_VISIT_MEMBER_NAME(smCheckBox,"smCheckBox");
	HX_VISIT_MEMBER_NAME(outputTime,"outputTime");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PreloadListSubState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"UIEvent") ) { return ::hx::Val( UIEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"radioGrp") ) { return ::hx::Val( radioGrp ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"outputTxt") ) { return ::hx::Val( outputTxt ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lockedList") ) { return ::hx::Val( lockedList ); }
		if (HX_FIELD_EQ(inName,"fileDialog") ) { return ::hx::Val( fileDialog ); }
		if (HX_FIELD_EQ(inName,"lqCheckBox") ) { return ::hx::Val( lqCheckBox ); }
		if (HX_FIELD_EQ(inName,"hqCheckBox") ) { return ::hx::Val( hqCheckBox ); }
		if (HX_FIELD_EQ(inName,"smCheckBox") ) { return ::hx::Val( smCheckBox ); }
		if (HX_FIELD_EQ(inName,"outputTime") ) { return ::hx::Val( outputTime ); }
		if (HX_FIELD_EQ(inName,"showOutput") ) { return ::hx::Val( showOutput_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"preloadList") ) { return ::hx::Val( preloadList ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"saveCallback") ) { return ::hx::Val( saveCallback ); }
		if (HX_FIELD_EQ(inName,"removeButton") ) { return ::hx::Val( removeButton ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateButtons") ) { return ::hx::Val( updateButtons_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"preloadListKeys") ) { return ::hx::Val( preloadListKeys ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getCurLoadFilters") ) { return ::hx::Val( getCurLoadFilters_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCurCheckedName") ) { return ::hx::Val( getCurCheckedName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PreloadListSubState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"radioGrp") ) { radioGrp=inValue.Cast<  ::backend::ui::PsychUIRadioGroup >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"outputTxt") ) { outputTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lockedList") ) { lockedList=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fileDialog") ) { fileDialog=inValue.Cast<  ::states::editors::content::FileDialogHandler >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lqCheckBox") ) { lqCheckBox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hqCheckBox") ) { hqCheckBox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"smCheckBox") ) { smCheckBox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"outputTime") ) { outputTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"preloadList") ) { preloadList=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"saveCallback") ) { saveCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"removeButton") ) { removeButton=inValue.Cast<  ::backend::ui::PsychUIButton >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"preloadListKeys") ) { preloadListKeys=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PreloadListSubState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("lockedList",88,9a,bb,3e));
	outFields->push(HX_("preloadList",c7,a8,09,f4));
	outFields->push(HX_("preloadListKeys",5b,26,9b,44));
	outFields->push(HX_("outputTxt",ef,ad,3b,e5));
	outFields->push(HX_("fileDialog",64,4c,b7,91));
	outFields->push(HX_("radioGrp",aa,c1,70,f4));
	outFields->push(HX_("removeButton",56,fd,0d,49));
	outFields->push(HX_("lqCheckBox",c8,31,89,c2));
	outFields->push(HX_("hqCheckBox",4c,52,5f,c1));
	outFields->push(HX_("smCheckBox",dd,d4,cc,b8));
	outFields->push(HX_("outputTime",ae,1b,f1,ae));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PreloadListSubState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PreloadListSubState_obj,lockedList),HX_("lockedList",88,9a,bb,3e)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PreloadListSubState_obj,preloadList),HX_("preloadList",c7,a8,09,f4)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PreloadListSubState_obj,preloadListKeys),HX_("preloadListKeys",5b,26,9b,44)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PreloadListSubState_obj,saveCallback),HX_("saveCallback",22,e6,8e,91)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PreloadListSubState_obj,outputTxt),HX_("outputTxt",ef,ad,3b,e5)},
	{::hx::fsObject /*  ::states::editors::content::FileDialogHandler */ ,(int)offsetof(PreloadListSubState_obj,fileDialog),HX_("fileDialog",64,4c,b7,91)},
	{::hx::fsObject /*  ::backend::ui::PsychUIRadioGroup */ ,(int)offsetof(PreloadListSubState_obj,radioGrp),HX_("radioGrp",aa,c1,70,f4)},
	{::hx::fsObject /*  ::backend::ui::PsychUIButton */ ,(int)offsetof(PreloadListSubState_obj,removeButton),HX_("removeButton",56,fd,0d,49)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(PreloadListSubState_obj,lqCheckBox),HX_("lqCheckBox",c8,31,89,c2)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(PreloadListSubState_obj,hqCheckBox),HX_("hqCheckBox",4c,52,5f,c1)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(PreloadListSubState_obj,smCheckBox),HX_("smCheckBox",dd,d4,cc,b8)},
	{::hx::fsFloat,(int)offsetof(PreloadListSubState_obj,outputTime),HX_("outputTime",ae,1b,f1,ae)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PreloadListSubState_obj_sStaticStorageInfo = 0;
#endif

static ::String PreloadListSubState_obj_sMemberFields[] = {
	HX_("lockedList",88,9a,bb,3e),
	HX_("preloadList",c7,a8,09,f4),
	HX_("preloadListKeys",5b,26,9b,44),
	HX_("saveCallback",22,e6,8e,91),
	HX_("outputTxt",ef,ad,3b,e5),
	HX_("fileDialog",64,4c,b7,91),
	HX_("radioGrp",aa,c1,70,f4),
	HX_("removeButton",56,fd,0d,49),
	HX_("lqCheckBox",c8,31,89,c2),
	HX_("hqCheckBox",4c,52,5f,c1),
	HX_("smCheckBox",dd,d4,cc,b8),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("UIEvent",26,fd,9f,07),
	HX_("updateButtons",38,b7,e3,95),
	HX_("getCurLoadFilters",cb,11,ca,a1),
	HX_("getCurCheckedName",a8,22,59,9f),
	HX_("outputTime",ae,1b,f1,ae),
	HX_("showOutput",de,b3,f5,75),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

::hx::Class PreloadListSubState_obj::__mClass;

void PreloadListSubState_obj::__register()
{
	PreloadListSubState_obj _hx_dummy;
	PreloadListSubState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.editors.content.PreloadListSubState",0f,79,b0,a7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PreloadListSubState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PreloadListSubState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PreloadListSubState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PreloadListSubState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace editors
} // end namespace content
