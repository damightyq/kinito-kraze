// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_backend_WeekData
#include <backend/WeekData.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIBox
#include <backend/ui/PsychUIBox.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIButton
#include <backend/ui/PsychUIButton.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUICheckBox
#include <backend/ui/PsychUICheckBox.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIEvent
#include <backend/ui/PsychUIEvent.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIInputText
#include <backend/ui/PsychUIInputText.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUITab
#include <backend/ui/PsychUITab.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_objects_MenuCharacter
#include <objects/MenuCharacter.h>
#endif
#ifndef INCLUDED_objects_MenuItem
#include <objects/MenuItem.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_net_FileFilter
#include <openfl/net/FileFilter.h>
#endif
#ifndef INCLUDED_openfl_net_FileReference
#include <openfl/net/FileReference.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_states_editors_MasterEditorMenu
#include <states/editors/MasterEditorMenu.h>
#endif
#ifndef INCLUDED_states_editors_WeekEditorFreeplayState
#include <states/editors/WeekEditorFreeplayState.h>
#endif
#ifndef INCLUDED_states_editors_WeekEditorState
#include <states/editors/WeekEditorState.h>
#endif
#ifndef INCLUDED_states_editors_content_BasePrompt
#include <states/editors/content/BasePrompt.h>
#endif
#ifndef INCLUDED_states_editors_content_ExitConfirmationPrompt
#include <states/editors/content/ExitConfirmationPrompt.h>
#endif
#ifndef INCLUDED_states_editors_content_Prompt
#include <states/editors/content/Prompt.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1c627f19952ad1ec_20_new,"states.editors.WeekEditorState","new",0xe7bbf6ee,"states.editors.WeekEditorState.new","states/editors/WeekEditorState.hx",20,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_41_create,"states.editors.WeekEditorState","create",0xa19f4d2e,"states.editors.WeekEditorState.create","states/editors/WeekEditorState.hx",41,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_118_addEditorBox,"states.editors.WeekEditorState","addEditorBox",0xd7b377af,"states.editors.WeekEditorState.addEditorBox","states/editors/WeekEditorState.hx",118,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_123_addEditorBox,"states.editors.WeekEditorState","addEditorBox",0xd7b377af,"states.editors.WeekEditorState.addEditorBox","states/editors/WeekEditorState.hx",123,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_127_addEditorBox,"states.editors.WeekEditorState","addEditorBox",0xd7b377af,"states.editors.WeekEditorState.addEditorBox","states/editors/WeekEditorState.hx",127,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_106_addEditorBox,"states.editors.WeekEditorState","addEditorBox",0xd7b377af,"states.editors.WeekEditorState.addEditorBox","states/editors/WeekEditorState.hx",106,0x758a91c4)
static const ::String _hx_array_data_ba26a7fc_6[] = {
	HX_("Other",b0,d6,a3,c9),HX_("Week",14,8c,ce,39),
};
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_164_addWeekUI,"states.editors.WeekEditorState","addWeekUI",0x5d194957,"states.editors.WeekEditorState.addWeekUI","states/editors/WeekEditorState.hx",164,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_147_addWeekUI,"states.editors.WeekEditorState","addWeekUI",0x5d194957,"states.editors.WeekEditorState.addWeekUI","states/editors/WeekEditorState.hx",147,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_198_addOtherUI,"states.editors.WeekEditorState","addOtherUI",0x82081835,"states.editors.WeekEditorState.addOtherUI","states/editors/WeekEditorState.hx",198,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_207_addOtherUI,"states.editors.WeekEditorState","addOtherUI",0x82081835,"states.editors.WeekEditorState.addOtherUI","states/editors/WeekEditorState.hx",207,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_193_addOtherUI,"states.editors.WeekEditorState","addOtherUI",0x82081835,"states.editors.WeekEditorState.addOtherUI","states/editors/WeekEditorState.hx",193,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_226_reloadAllShit,"states.editors.WeekEditorState","reloadAllShit",0xe02e9f36,"states.editors.WeekEditorState.reloadAllShit","states/editors/WeekEditorState.hx",226,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_260_updateText,"states.editors.WeekEditorState","updateText",0x92329e88,"states.editors.WeekEditorState.updateText","states/editors/WeekEditorState.hx",260,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_285_reloadBG,"states.editors.WeekEditorState","reloadBG",0xced92c10,"states.editors.WeekEditorState.reloadBG","states/editors/WeekEditorState.hx",285,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_303_reloadWeekThing,"states.editors.WeekEditorState","reloadWeekThing",0xc1a0e04f,"states.editors.WeekEditorState.reloadWeekThing","states/editors/WeekEditorState.hx",303,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_330_UIEvent,"states.editors.WeekEditorState","UIEvent",0xbff982b4,"states.editors.WeekEditorState.UIEvent","states/editors/WeekEditorState.hx",330,0x758a91c4)
static const int _hx_array_data_ba26a7fc_24[] = {
	(int)146,(int)113,(int)253,
};
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_390_update,"states.editors.WeekEditorState","update",0xac956c3b,"states.editors.WeekEditorState.update","states/editors/WeekEditorState.hx",390,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_408_update,"states.editors.WeekEditorState","update",0xac956c3b,"states.editors.WeekEditorState.update","states/editors/WeekEditorState.hx",408,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_419_recalculateStuffPosition,"states.editors.WeekEditorState","recalculateStuffPosition",0x2875371c,"states.editors.WeekEditorState.recalculateStuffPosition","states/editors/WeekEditorState.hx",419,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_425_loadWeek,"states.editors.WeekEditorState","loadWeek",0x559087ec,"states.editors.WeekEditorState.loadWeek","states/editors/WeekEditorState.hx",425,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_437_onLoadComplete,"states.editors.WeekEditorState","onLoadComplete",0x472cb4f0,"states.editors.WeekEditorState.onLoadComplete","states/editors/WeekEditorState.hx",437,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_476_onLoadCancel,"states.editors.WeekEditorState","onLoadCancel",0xe85455f1,"states.editors.WeekEditorState.onLoadCancel","states/editors/WeekEditorState.hx",476,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_488_onLoadError,"states.editors.WeekEditorState","onLoadError",0x178a5f31,"states.editors.WeekEditorState.onLoadError","states/editors/WeekEditorState.hx",488,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_496_saveWeek,"states.editors.WeekEditorState","saveWeek",0x98aa5083,"states.editors.WeekEditorState.saveWeek","states/editors/WeekEditorState.hx",496,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_509_onSaveComplete,"states.editors.WeekEditorState","onSaveComplete",0xa04c1507,"states.editors.WeekEditorState.onSaveComplete","states/editors/WeekEditorState.hx",509,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_522_onSaveCancel,"states.editors.WeekEditorState","onSaveCancel",0x7be2b248,"states.editors.WeekEditorState.onSaveCancel","states/editors/WeekEditorState.hx",522,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_534_onSaveError,"states.editors.WeekEditorState","onSaveError",0x8b001aba,"states.editors.WeekEditorState.onSaveError","states/editors/WeekEditorState.hx",534,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_30_boot,"states.editors.WeekEditorState","boot",0xd4d519e4,"states.editors.WeekEditorState.boot","states/editors/WeekEditorState.hx",30,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_145_boot,"states.editors.WeekEditorState","boot",0xd4d519e4,"states.editors.WeekEditorState.boot","states/editors/WeekEditorState.hx",145,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_434_boot,"states.editors.WeekEditorState","boot",0xd4d519e4,"states.editors.WeekEditorState.boot","states/editors/WeekEditorState.hx",434,0x758a91c4)
HX_LOCAL_STACK_FRAME(_hx_pos_1c627f19952ad1ec_435_boot,"states.editors.WeekEditorState","boot",0xd4d519e4,"states.editors.WeekEditorState.boot","states/editors/WeekEditorState.hx",435,0x758a91c4)
namespace states{
namespace editors{

void WeekEditorState_obj::__construct( ::Dynamic weekFile){
            	HX_STACKFRAME(&_hx_pos_1c627f19952ad1ec_20_new)
HXLINE(  32)		this->weekFile = null();
HXLINE(  35)		super::__construct();
HXLINE(  36)		this->weekFile = ::backend::WeekData_obj::createWeekFile();
HXLINE(  37)		if (::hx::IsNotNull( weekFile )) {
HXLINE(  37)			this->weekFile = weekFile;
            		}
            		else {
HXLINE(  38)			::states::editors::WeekEditorState_obj::weekFileName = HX_("week1",bd,95,be,c7);
            		}
            	}

Dynamic WeekEditorState_obj::__CreateEmpty() { return new WeekEditorState_obj; }

void *WeekEditorState_obj::_hx_vtable = 0;

Dynamic WeekEditorState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< WeekEditorState_obj > _hx_result = new WeekEditorState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool WeekEditorState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x53aaab8a) {
			if (inClassId<=(int)0x12c27b0c) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x12c27b0c;
			} else {
				return inClassId==(int)0x53aaab8a;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

static ::backend::ui::PsychUIEvent_obj _hx_states_editors_WeekEditorState__hx_backend_ui_PsychUIEvent= {
	( void (::hx::Object::*)(::String, ::Dynamic))&::states::editors::WeekEditorState_obj::UIEvent,
};

void *WeekEditorState_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x768fb553: return &_hx_states_editors_WeekEditorState__hx_backend_ui_PsychUIEvent;
	}
	return super::_hx_getInterface(inHash);
}

void WeekEditorState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_1c627f19952ad1ec_41_create)
HXLINE(  42)		this->txtWeekTitle =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.7)),10,0,HX_("",00,00,00,00),32,null());
HXLINE(  43)		 ::flixel::text::FlxText _hx_tmp = this->txtWeekTitle;
HXDLIN(  43)		::String key = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN(  43)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(  43)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXDLIN(  43)		if (::hx::IsNotNull( str )) {
HXLINE(  43)			key = str;
            		}
HXDLIN(  43)		::String folderKey = key;
HXDLIN(  43)		::String file = ::backend::Paths_obj::modFolders(folderKey);
HXDLIN(  43)		::String _hx_tmp1;
HXDLIN(  43)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE(  43)			_hx_tmp1 = file;
            		}
            		else {
HXLINE(  43)			_hx_tmp1 = (HX_("assets/",4c,2a,dc,36) + folderKey);
            		}
HXDLIN(  43)		_hx_tmp->setFormat(_hx_tmp1,32,-1,HX_("right",dc,0b,64,e9),null(),null(),null());
HXLINE(  44)		this->txtWeekTitle->set_alpha(((Float)0.7));
HXLINE(  46)		::String parentFolder = null();
HXDLIN(  46)		if ((HX_("campaign_menu_UI_assets",fd,f3,ba,6a).indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE(  46)			::haxe::Log_obj::trace(HX_("campaign_menu_UI_assets",fd,f3,ba,6a), ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder)->init(1,true))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            		}
HXDLIN(  46)		 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(HX_("campaign_menu_UI_assets",fd,f3,ba,6a),parentFolder,true);
HXDLIN(  46)		bool xmlExists = false;
HXDLIN(  46)		::String xml = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("campaign_menu_UI_assets",fd,f3,ba,6a)) + HX_(".xml",69,3e,c3,1e)));
HXDLIN(  46)		if (::sys::FileSystem_obj::exists(xml)) {
HXLINE(  46)			xmlExists = true;
            		}
HXDLIN(  46)		 ::Dynamic ui_tex;
HXDLIN(  46)		if (xmlExists) {
HXLINE(  46)			ui_tex = ::sys::io::File_obj::getContent(xml);
            		}
            		else {
HXLINE(  46)			::String key1 = (HX_("images/",77,50,74,c1) + HX_("campaign_menu_UI_assets",fd,f3,ba,6a));
HXDLIN(  46)			::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN(  46)			::String str1 = ( ( ::haxe::ds::StringMap)(this2) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN(  46)			if (::hx::IsNotNull( str1 )) {
HXLINE(  46)				key1 = str1;
            			}
HXDLIN(  46)			ui_tex = ::backend::Paths_obj::getPath((key1 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder,null());
            		}
HXDLIN(  46)		 ::flixel::graphics::frames::FlxAtlasFrames ui_tex1 = ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded,ui_tex);
HXLINE(  47)		 ::flixel::FlxSprite bgYellow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,56,null())->makeGraphic(::flixel::FlxG_obj::width,386,-405679,null(),null());
HXLINE(  48)		this->bgSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,56,null());
HXLINE(  49)		this->bgSprite->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  51)		this->weekThing =  ::objects::MenuItem_obj::__alloc( HX_CTX ,( (Float)(0) ),(this->bgSprite->y + 396),::states::editors::WeekEditorState_obj::weekFileName);
HXLINE(  52)		 ::objects::MenuItem fh = this->weekThing;
HXDLIN(  52)		Float fh1 = fh->y;
HXDLIN(  52)		fh->set_y((fh1 + (this->weekThing->get_height() + 20)));
HXLINE(  53)		this->weekThing->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  54)		this->add(this->weekThing);
HXLINE(  56)		 ::flixel::FlxSprite blackBarThingie =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,56,-16777216,null(),null());
HXLINE(  57)		this->add(blackBarThingie);
HXLINE(  59)		this->grpWeekCharacters =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  61)		this->lock =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  62)		this->lock->set_frames(ui_tex1);
HXLINE(  63)		this->lock->animation->addByPrefix(HX_("lock",eb,9b,b7,47),HX_("lock",eb,9b,b7,47),null(),null(),null(),null());
HXLINE(  64)		this->lock->animation->play(HX_("lock",eb,9b,b7,47),null(),null(),null());
HXLINE(  65)		this->lock->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  66)		this->add(this->lock);
HXLINE(  68)		this->missingFileText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,::flixel::FlxG_obj::width,HX_("",00,00,00,00),null(),null());
HXLINE(  69)		 ::flixel::text::FlxText _hx_tmp2 = this->missingFileText;
HXDLIN(  69)		::String key2 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN(  69)		::Dynamic this3 = ::backend::Language_obj::phrases;
HXDLIN(  69)		::String str2 = ( ( ::haxe::ds::StringMap)(this3) )->get_string(::StringTools_obj::trim(key2).toLowerCase());
HXDLIN(  69)		if (::hx::IsNotNull( str2 )) {
HXLINE(  69)			key2 = str2;
            		}
HXDLIN(  69)		::String folderKey1 = key2;
HXDLIN(  69)		::String file1 = ::backend::Paths_obj::modFolders(folderKey1);
HXDLIN(  69)		::String _hx_tmp3;
HXDLIN(  69)		if (::sys::FileSystem_obj::exists(file1)) {
HXLINE(  69)			_hx_tmp3 = file1;
            		}
            		else {
HXLINE(  69)			_hx_tmp3 = (HX_("assets/",4c,2a,dc,36) + folderKey1);
            		}
HXDLIN(  69)		_hx_tmp2->setFormat(_hx_tmp3,24,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  70)		this->missingFileText->set_borderSize(( (Float)(2) ));
HXLINE(  71)		this->missingFileText->set_visible(false);
HXLINE(  72)		this->add(this->missingFileText);
HXLINE(  74)		::Array< ::String > charArray = ( (::Array< ::String >)(this->weekFile->__Field(HX_("weekCharacters",be,b5,7f,1d),::hx::paccDynamic)) );
HXLINE(  75)		{
HXLINE(  76)			{
HXLINE(  77)				 ::objects::MenuCharacter weekCharacterThing =  ::objects::MenuCharacter_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.25)) - ( (Float)(150) )),charArray->__get(0));
HXLINE(  78)				weekCharacterThing->set_y((weekCharacterThing->y + 70));
HXLINE(  79)				this->grpWeekCharacters->add(weekCharacterThing).StaticCast<  ::objects::MenuCharacter >();
            			}
HXLINE(  76)			{
HXLINE(  77)				 ::objects::MenuCharacter weekCharacterThing1 =  ::objects::MenuCharacter_obj::__alloc( HX_CTX ,(((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.25)) * ( (Float)(2) )) - ( (Float)(150) )),charArray->__get(1));
HXLINE(  78)				weekCharacterThing1->set_y((weekCharacterThing1->y + 70));
HXLINE(  79)				this->grpWeekCharacters->add(weekCharacterThing1).StaticCast<  ::objects::MenuCharacter >();
            			}
HXLINE(  76)			{
HXLINE(  77)				 ::objects::MenuCharacter weekCharacterThing2 =  ::objects::MenuCharacter_obj::__alloc( HX_CTX ,(((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.25)) * ( (Float)(3) )) - ( (Float)(150) )),charArray->__get(2));
HXLINE(  78)				weekCharacterThing2->set_y((weekCharacterThing2->y + 70));
HXLINE(  79)				this->grpWeekCharacters->add(weekCharacterThing2).StaticCast<  ::objects::MenuCharacter >();
            			}
            		}
HXLINE(  82)		this->add(bgYellow);
HXLINE(  83)		this->add(this->bgSprite);
HXLINE(  84)		this->add(this->grpWeekCharacters);
HXLINE(  86)		 ::flixel::FlxSprite tracksSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.07)),(this->bgSprite->y + 435),null());
HXDLIN(  86)		 ::flixel::FlxSprite tracksSprite1 = tracksSprite->loadGraphic(::backend::Paths_obj::image(HX_("Menu_Tracks",68,85,99,50),null(),null()),null(),null(),null(),null(),null());
HXLINE(  87)		tracksSprite1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  88)		this->add(tracksSprite1);
HXLINE(  90)		this->txtTracklist =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.05)),(tracksSprite1->y + 60),0,HX_("",00,00,00,00),32,null());
HXLINE(  91)		this->txtTracklist->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  92)		 ::flixel::text::FlxText _hx_tmp4 = this->txtTracklist;
HXDLIN(  92)		::String key3 = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN(  92)		::Dynamic this4 = ::backend::Language_obj::phrases;
HXDLIN(  92)		::String str3 = ( ( ::haxe::ds::StringMap)(this4) )->get_string(::StringTools_obj::trim(key3).toLowerCase());
HXDLIN(  92)		if (::hx::IsNotNull( str3 )) {
HXLINE(  92)			key3 = str3;
            		}
HXDLIN(  92)		::String folderKey2 = key3;
HXDLIN(  92)		::String file2 = ::backend::Paths_obj::modFolders(folderKey2);
HXDLIN(  92)		::String _hx_tmp5;
HXDLIN(  92)		if (::sys::FileSystem_obj::exists(file2)) {
HXLINE(  92)			_hx_tmp5 = file2;
            		}
            		else {
HXLINE(  92)			_hx_tmp5 = (HX_("assets/",4c,2a,dc,36) + folderKey2);
            		}
HXDLIN(  92)		_hx_tmp4->set_font(_hx_tmp5);
HXLINE(  93)		this->txtTracklist->set_color(-1747081);
HXLINE(  94)		this->add(this->txtTracklist);
HXLINE(  95)		this->add(this->txtWeekTitle);
HXLINE(  97)		this->addEditorBox();
HXLINE(  98)		this->reloadAllShit();
HXLINE( 100)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 102)		this->super::create();
            	}


void WeekEditorState_obj::addEditorBox(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_1c627f19952ad1ec_118_addEditorBox)
HXLINE( 118)			::states::editors::WeekEditorState_obj::loadWeek();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::WeekEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_1c627f19952ad1ec_123_addEditorBox)
HXLINE( 123)			::backend::MusicBeatState_obj::switchState( ::states::editors::WeekEditorFreeplayState_obj::__alloc( HX_CTX ,_gthis->weekFile));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::WeekEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_1c627f19952ad1ec_127_addEditorBox)
HXLINE( 127)			::states::editors::WeekEditorState_obj::saveWeek(_gthis->weekFile);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_1c627f19952ad1ec_106_addEditorBox)
HXDLIN( 106)		 ::states::editors::WeekEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 107)		this->UI_box =  ::backend::ui::PsychUIBox_obj::__alloc( HX_CTX ,( (Float)(::flixel::FlxG_obj::width) ),( (Float)(::flixel::FlxG_obj::height) ),250,375,::Array_obj< ::String >::fromData( _hx_array_data_ba26a7fc_6,2));
HXLINE( 108)		 ::backend::ui::PsychUIBox fh = this->UI_box;
HXDLIN( 108)		Float fh1 = fh->x;
HXDLIN( 108)		fh->set_x((fh1 - this->UI_box->get_width()));
HXLINE( 109)		 ::backend::ui::PsychUIBox fh2 = this->UI_box;
HXDLIN( 109)		Float fh3 = fh2->y;
HXDLIN( 109)		fh2->set_y((fh3 - this->UI_box->get_height()));
HXLINE( 110)		{
HXLINE( 110)			 ::flixel::math::FlxBasePoint this1 = this->UI_box->scrollFactor;
HXDLIN( 110)			this1->set_x(( (Float)(0) ));
HXDLIN( 110)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 111)		this->add(this->UI_box);
HXLINE( 112)		this->addOtherUI();
HXLINE( 113)		this->addWeekUI();
HXLINE( 115)		this->UI_box->set_selectedName(HX_("Week",14,8c,ce,39));
HXLINE( 116)		this->add(this->UI_box);
HXLINE( 118)		 ::backend::ui::PsychUIButton loadWeekButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,650,HX_("Load Week",2e,d8,7d,d0), ::Dynamic(new _hx_Closure_0()),null(),null());
HXLINE( 119)		{
HXLINE( 119)			int axes = 1;
HXDLIN( 119)			bool _hx_tmp;
HXDLIN( 119)			if ((axes != 1)) {
HXLINE( 119)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE( 119)				_hx_tmp = true;
            			}
HXDLIN( 119)			if (_hx_tmp) {
HXLINE( 119)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 119)				loadWeekButton->set_x(((( (Float)(_hx_tmp1) ) - loadWeekButton->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 119)			bool _hx_tmp2;
HXDLIN( 119)			if ((axes != 16)) {
HXLINE( 119)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE( 119)				_hx_tmp2 = true;
            			}
HXDLIN( 119)			if (_hx_tmp2) {
HXLINE( 119)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 119)				loadWeekButton->set_y(((( (Float)(_hx_tmp3) ) - loadWeekButton->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 120)		loadWeekButton->set_x((loadWeekButton->x - ( (Float)(120) )));
HXLINE( 121)		this->add(loadWeekButton);
HXLINE( 123)		 ::backend::ui::PsychUIButton freeplayButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,650,HX_("Freeplay",c0,4c,38,fc), ::Dynamic(new _hx_Closure_1(_gthis)),null(),null());
HXLINE( 124)		{
HXLINE( 124)			int axes1 = 1;
HXDLIN( 124)			bool _hx_tmp4;
HXDLIN( 124)			if ((axes1 != 1)) {
HXLINE( 124)				_hx_tmp4 = (axes1 == 17);
            			}
            			else {
HXLINE( 124)				_hx_tmp4 = true;
            			}
HXDLIN( 124)			if (_hx_tmp4) {
HXLINE( 124)				int _hx_tmp5 = ::flixel::FlxG_obj::width;
HXDLIN( 124)				freeplayButton->set_x(((( (Float)(_hx_tmp5) ) - freeplayButton->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 124)			bool _hx_tmp6;
HXDLIN( 124)			if ((axes1 != 16)) {
HXLINE( 124)				_hx_tmp6 = (axes1 == 17);
            			}
            			else {
HXLINE( 124)				_hx_tmp6 = true;
            			}
HXDLIN( 124)			if (_hx_tmp6) {
HXLINE( 124)				int _hx_tmp7 = ::flixel::FlxG_obj::height;
HXDLIN( 124)				freeplayButton->set_y(((( (Float)(_hx_tmp7) ) - freeplayButton->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 125)		this->add(freeplayButton);
HXLINE( 127)		 ::backend::ui::PsychUIButton saveWeekButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,650,HX_("Save Week",b7,93,f3,43), ::Dynamic(new _hx_Closure_2(_gthis)),null(),null());
HXLINE( 128)		{
HXLINE( 128)			int axes2 = 1;
HXDLIN( 128)			bool _hx_tmp8;
HXDLIN( 128)			if ((axes2 != 1)) {
HXLINE( 128)				_hx_tmp8 = (axes2 == 17);
            			}
            			else {
HXLINE( 128)				_hx_tmp8 = true;
            			}
HXDLIN( 128)			if (_hx_tmp8) {
HXLINE( 128)				int _hx_tmp9 = ::flixel::FlxG_obj::width;
HXDLIN( 128)				saveWeekButton->set_x(((( (Float)(_hx_tmp9) ) - saveWeekButton->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 128)			bool _hx_tmp10;
HXDLIN( 128)			if ((axes2 != 16)) {
HXLINE( 128)				_hx_tmp10 = (axes2 == 17);
            			}
            			else {
HXLINE( 128)				_hx_tmp10 = true;
            			}
HXDLIN( 128)			if (_hx_tmp10) {
HXLINE( 128)				int _hx_tmp11 = ::flixel::FlxG_obj::height;
HXDLIN( 128)				saveWeekButton->set_y(((( (Float)(_hx_tmp11) ) - saveWeekButton->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 129)		saveWeekButton->set_x((saveWeekButton->x + 120));
HXLINE( 130)		this->add(saveWeekButton);
            	}


HX_DEFINE_DYNAMIC_FUNC0(WeekEditorState_obj,addEditorBox,(void))

void WeekEditorState_obj::addWeekUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::WeekEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_1c627f19952ad1ec_164_addWeekUI)
HXLINE( 165)			_gthis->weekFile->__SetField(HX_("hideStoryMode",d6,b4,4e,4c),_gthis->hideCheckbox->checked,::hx::paccDynamic);
HXLINE( 166)			::states::editors::WeekEditorState_obj::unsavedProgress = true;
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_1c627f19952ad1ec_147_addWeekUI)
HXDLIN( 147)		 ::states::editors::WeekEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 148)		 ::flixel::group::FlxTypedSpriteGroup tab_group = this->UI_box->getTab(HX_("Week",14,8c,ce,39))->menu;
HXLINE( 150)		this->songsInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,10,30,200,HX_("",00,00,00,00),8);
HXLINE( 152)		this->opponentInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,10,(this->songsInputText->y + 40),70,HX_("",00,00,00,00),8);
HXLINE( 153)		this->boyfriendInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,(this->opponentInputText->x + 75),this->opponentInputText->y,70,HX_("",00,00,00,00),8);
HXLINE( 154)		this->girlfriendInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,(this->boyfriendInputText->x + 75),this->opponentInputText->y,70,HX_("",00,00,00,00),8);
HXLINE( 156)		this->backgroundInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,10,(this->opponentInputText->y + 40),120,HX_("",00,00,00,00),8);
HXLINE( 157)		this->displayNameInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,10,(this->backgroundInputText->y + 60),200,HX_("",00,00,00,00),8);
HXLINE( 158)		this->weekNameInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,10,(this->displayNameInputText->y + 60),150,HX_("",00,00,00,00),8);
HXLINE( 159)		this->weekFileInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,10,(this->weekNameInputText->y + 40),100,HX_("",00,00,00,00),8);
HXLINE( 160)		this->reloadWeekThing();
HXLINE( 162)		this->hideCheckbox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)(10) ),(this->weekFileInputText->y + 40),HX_("Hide Week from Story Mode?",e9,44,47,9f),100,null());
HXLINE( 163)		this->hideCheckbox->onClick =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE( 169)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->songsInputText->x,(this->songsInputText->y - ( (Float)(18) )),0,HX_("Songs:",9c,5b,1d,62),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 170)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->opponentInputText->x,(this->opponentInputText->y - ( (Float)(18) )),0,HX_("Characters:",30,d4,f1,a2),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 171)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->backgroundInputText->x,(this->backgroundInputText->y - ( (Float)(18) )),0,HX_("Background Asset:",3c,3a,bd,00),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 172)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->displayNameInputText->x,(this->displayNameInputText->y - ( (Float)(18) )),0,HX_("Display Name:",f1,22,dc,c9),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 173)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->weekNameInputText->x,(this->weekNameInputText->y - ( (Float)(18) )),0,HX_("Week Name (for Reset Score Menu):",65,4b,f0,34),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 174)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->weekFileInputText->x,(this->weekFileInputText->y - ( (Float)(18) )),0,HX_("Week File:",12,ad,1e,e4),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 176)		tab_group->add(this->songsInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 177)		tab_group->add(this->opponentInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 178)		tab_group->add(this->boyfriendInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 179)		tab_group->add(this->girlfriendInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 180)		tab_group->add(this->backgroundInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 182)		tab_group->add(this->displayNameInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 183)		tab_group->add(this->weekNameInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 184)		tab_group->add(this->weekFileInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 185)		tab_group->add(this->hideCheckbox).StaticCast<  ::flixel::FlxSprite >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(WeekEditorState_obj,addWeekUI,(void))

void WeekEditorState_obj::addOtherUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::WeekEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_1c627f19952ad1ec_198_addOtherUI)
HXLINE( 199)			_gthis->weekFile->__SetField(HX_("startUnlocked",a5,96,c9,60),!(_gthis->lockedCheckbox->checked),::hx::paccDynamic);
HXLINE( 200)			_gthis->lock->set_visible(_gthis->lockedCheckbox->checked);
HXLINE( 201)			int _hx_tmp;
HXDLIN( 201)			if (_gthis->lockedCheckbox->checked) {
HXLINE( 201)				_hx_tmp = 1;
            			}
            			else {
HXLINE( 201)				_hx_tmp = 0;
            			}
HXDLIN( 201)			_gthis->hiddenUntilUnlockCheckbox->set_alpha((((Float)0.4) + (((Float)0.6) * ( (Float)(_hx_tmp) ))));
HXLINE( 202)			::states::editors::WeekEditorState_obj::unsavedProgress = true;
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::WeekEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_1c627f19952ad1ec_207_addOtherUI)
HXLINE( 208)			_gthis->weekFile->__SetField(HX_("hiddenUntilUnlocked",17,ed,31,dc),_gthis->hiddenUntilUnlockCheckbox->checked,::hx::paccDynamic);
HXLINE( 209)			::states::editors::WeekEditorState_obj::unsavedProgress = true;
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_1c627f19952ad1ec_193_addOtherUI)
HXDLIN( 193)		 ::states::editors::WeekEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 194)		 ::flixel::group::FlxTypedSpriteGroup tab_group = this->UI_box->getTab(HX_("Other",b0,d6,a3,c9))->menu;
HXLINE( 196)		this->lockedCheckbox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)(10) ),( (Float)(30) ),HX_("Week starts Locked",8d,ae,bb,b8),100,null());
HXLINE( 197)		this->lockedCheckbox->onClick =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE( 205)		this->hiddenUntilUnlockCheckbox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)(10) ),(this->lockedCheckbox->y + 25),HX_("Hidden until Unlocked",db,63,35,4b),110,null());
HXLINE( 206)		this->hiddenUntilUnlockCheckbox->onClick =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE( 211)		this->hiddenUntilUnlockCheckbox->set_alpha(((Float)0.4));
HXLINE( 213)		this->weekBeforeInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,10,(this->hiddenUntilUnlockCheckbox->y + 55),100,HX_("",00,00,00,00),8);
HXLINE( 214)		this->difficultiesInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,10,(this->weekBeforeInputText->y + 60),200,HX_("",00,00,00,00),8);
HXLINE( 216)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->weekBeforeInputText->x,(this->weekBeforeInputText->y - ( (Float)(28) )),0,HX_("Week File name of the Week you have\nto finish for Unlocking:",ab,92,1d,1c),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 217)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->difficultiesInputText->x,(this->difficultiesInputText->y - ( (Float)(20) )),0,HX_("Difficulties:",a1,f6,7f,58),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 218)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->difficultiesInputText->x,(this->difficultiesInputText->y + 20),0,HX_("Default difficulties are \"Easy, Normal, Hard\"\nwithout quotes.",cd,54,6a,47),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 219)		tab_group->add(this->weekBeforeInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 220)		tab_group->add(this->difficultiesInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 221)		tab_group->add(this->hiddenUntilUnlockCheckbox).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 222)		tab_group->add(this->lockedCheckbox).StaticCast<  ::flixel::FlxSprite >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(WeekEditorState_obj,addOtherUI,(void))

void WeekEditorState_obj::reloadAllShit(){
            	HX_STACKFRAME(&_hx_pos_1c627f19952ad1ec_226_reloadAllShit)
HXLINE( 227)		::String weekString = ( (::String)( ::Dynamic(this->weekFile->__Field(HX_("songs",fe,36,c7,80),::hx::paccDynamic))->__GetItem(0)->__GetItem(0)) );
HXLINE( 228)		{
HXLINE( 228)			int _g = 1;
HXDLIN( 228)			int _g1 = ( (::cpp::VirtualArray)(this->weekFile->__Field(HX_("songs",fe,36,c7,80),::hx::paccDynamic)) )->get_length();
HXDLIN( 228)			while((_g < _g1)){
HXLINE( 228)				_g = (_g + 1);
HXDLIN( 228)				int i = (_g - 1);
HXLINE( 229)				weekString = (weekString + (HX_(", ",74,26,00,00) +  ::Dynamic(this->weekFile->__Field(HX_("songs",fe,36,c7,80),::hx::paccDynamic))->__GetItem(i)->__GetItem(0)));
            			}
            		}
HXLINE( 231)		this->songsInputText->set_text(weekString);
HXLINE( 232)		this->backgroundInputText->set_text(( (::String)(this->weekFile->__Field(HX_("weekBackground",02,f1,ce,ed),::hx::paccDynamic)) ));
HXLINE( 233)		this->displayNameInputText->set_text(( (::String)(this->weekFile->__Field(HX_("storyName",e0,50,20,29),::hx::paccDynamic)) ));
HXLINE( 234)		this->weekNameInputText->set_text(( (::String)(this->weekFile->__Field(HX_("weekName",5f,08,2f,30),::hx::paccDynamic)) ));
HXLINE( 235)		this->weekFileInputText->set_text(::states::editors::WeekEditorState_obj::weekFileName);
HXLINE( 237)		this->opponentInputText->set_text(( (::String)( ::Dynamic(this->weekFile->__Field(HX_("weekCharacters",be,b5,7f,1d),::hx::paccDynamic))->__GetItem(0)) ));
HXLINE( 238)		this->boyfriendInputText->set_text(( (::String)( ::Dynamic(this->weekFile->__Field(HX_("weekCharacters",be,b5,7f,1d),::hx::paccDynamic))->__GetItem(1)) ));
HXLINE( 239)		this->girlfriendInputText->set_text(( (::String)( ::Dynamic(this->weekFile->__Field(HX_("weekCharacters",be,b5,7f,1d),::hx::paccDynamic))->__GetItem(2)) ));
HXLINE( 241)		this->hideCheckbox->set_checked( ::Dynamic(this->weekFile->__Field(HX_("hideStoryMode",d6,b4,4e,4c),::hx::paccDynamic)));
HXLINE( 243)		this->weekBeforeInputText->set_text(( (::String)(this->weekFile->__Field(HX_("weekBefore",93,97,02,5d),::hx::paccDynamic)) ));
HXLINE( 245)		this->difficultiesInputText->set_text(HX_("",00,00,00,00));
HXLINE( 246)		if (::hx::IsNotNull( this->weekFile->__Field(HX_("difficulties",59,c7,5e,02),::hx::paccDynamic) )) {
HXLINE( 246)			this->difficultiesInputText->set_text(( (::String)(this->weekFile->__Field(HX_("difficulties",59,c7,5e,02),::hx::paccDynamic)) ));
            		}
HXLINE( 248)		this->lockedCheckbox->set_checked(!(( (bool)(this->weekFile->__Field(HX_("startUnlocked",a5,96,c9,60),::hx::paccDynamic)) )));
HXLINE( 249)		this->lock->set_visible(this->lockedCheckbox->checked);
HXLINE( 251)		this->hiddenUntilUnlockCheckbox->set_checked( ::Dynamic(this->weekFile->__Field(HX_("hiddenUntilUnlocked",17,ed,31,dc),::hx::paccDynamic)));
HXLINE( 252)		int _hx_tmp;
HXDLIN( 252)		if (this->lockedCheckbox->checked) {
HXLINE( 252)			_hx_tmp = 1;
            		}
            		else {
HXLINE( 252)			_hx_tmp = 0;
            		}
HXDLIN( 252)		this->hiddenUntilUnlockCheckbox->set_alpha((((Float)0.4) + (((Float)0.6) * ( (Float)(_hx_tmp) ))));
HXLINE( 254)		this->reloadBG();
HXLINE( 255)		this->reloadWeekThing();
HXLINE( 256)		this->updateText();
            	}


HX_DEFINE_DYNAMIC_FUNC0(WeekEditorState_obj,reloadAllShit,(void))

void WeekEditorState_obj::updateText(){
            	HX_STACKFRAME(&_hx_pos_1c627f19952ad1ec_260_updateText)
HXLINE( 261)		{
HXLINE( 261)			int _g = 0;
HXDLIN( 261)			int _g1 = this->grpWeekCharacters->length;
HXDLIN( 261)			while((_g < _g1)){
HXLINE( 261)				_g = (_g + 1);
HXDLIN( 261)				int i = (_g - 1);
HXLINE( 262)				Dynamic( this->grpWeekCharacters->members->__get(i)).StaticCast<  ::objects::MenuCharacter >()->changeCharacter(( (::String)( ::Dynamic(this->weekFile->__Field(HX_("weekCharacters",be,b5,7f,1d),::hx::paccDynamic))->__GetItem(i)) ));
            			}
            		}
HXLINE( 265)		::Array< ::String > stringThing = ::Array_obj< ::String >::__new(0);
HXLINE( 266)		{
HXLINE( 266)			int _g2 = 0;
HXDLIN( 266)			int _g3 = ( (::cpp::VirtualArray)(this->weekFile->__Field(HX_("songs",fe,36,c7,80),::hx::paccDynamic)) )->get_length();
HXDLIN( 266)			while((_g2 < _g3)){
HXLINE( 266)				_g2 = (_g2 + 1);
HXDLIN( 266)				int i1 = (_g2 - 1);
HXLINE( 267)				stringThing->push( ::Dynamic(this->weekFile->__Field(HX_("songs",fe,36,c7,80),::hx::paccDynamic))->__GetItem(i1)->__GetItem(0));
            			}
            		}
HXLINE( 270)		this->txtTracklist->set_text(HX_("",00,00,00,00));
HXLINE( 271)		{
HXLINE( 271)			int _g4 = 0;
HXDLIN( 271)			int _g5 = stringThing->length;
HXDLIN( 271)			while((_g4 < _g5)){
HXLINE( 271)				_g4 = (_g4 + 1);
HXDLIN( 271)				int i2 = (_g4 - 1);
HXLINE( 273)				 ::flixel::text::FlxText fh = this->txtTracklist;
HXDLIN( 273)				fh->set_text((fh->text + (stringThing->__get(i2) + HX_("\n",0a,00,00,00))));
            			}
            		}
HXLINE( 276)		 ::flixel::text::FlxText _hx_tmp = this->txtTracklist;
HXDLIN( 276)		_hx_tmp->set_text(this->txtTracklist->text.toUpperCase());
HXLINE( 278)		{
HXLINE( 278)			 ::flixel::text::FlxText _this = this->txtTracklist;
HXDLIN( 278)			int axes = 1;
HXDLIN( 278)			bool _hx_tmp1;
HXDLIN( 278)			if ((axes != 1)) {
HXLINE( 278)				_hx_tmp1 = (axes == 17);
            			}
            			else {
HXLINE( 278)				_hx_tmp1 = true;
            			}
HXDLIN( 278)			if (_hx_tmp1) {
HXLINE( 278)				int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN( 278)				_this->set_x(((( (Float)(_hx_tmp2) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 278)			bool _hx_tmp3;
HXDLIN( 278)			if ((axes != 16)) {
HXLINE( 278)				_hx_tmp3 = (axes == 17);
            			}
            			else {
HXLINE( 278)				_hx_tmp3 = true;
            			}
HXDLIN( 278)			if (_hx_tmp3) {
HXLINE( 278)				int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN( 278)				_this->set_y(((( (Float)(_hx_tmp4) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 279)		 ::flixel::text::FlxText fh1 = this->txtTracklist;
HXDLIN( 279)		fh1->set_x((fh1->x - (( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.35))));
HXLINE( 281)		 ::flixel::text::FlxText _hx_tmp5 = this->txtWeekTitle;
HXDLIN( 281)		_hx_tmp5->set_text(( (::String)(this->weekFile->__Field(HX_("storyName",e0,50,20,29),::hx::paccDynamic)) ).toUpperCase());
HXLINE( 282)		 ::flixel::text::FlxText _hx_tmp6 = this->txtWeekTitle;
HXDLIN( 282)		int _hx_tmp7 = ::flixel::FlxG_obj::width;
HXDLIN( 282)		_hx_tmp6->set_x((( (Float)(_hx_tmp7) ) - (this->txtWeekTitle->get_width() + 10)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(WeekEditorState_obj,updateText,(void))

void WeekEditorState_obj::reloadBG(){
            	HX_STACKFRAME(&_hx_pos_1c627f19952ad1ec_285_reloadBG)
HXLINE( 286)		this->bgSprite->set_visible(true);
HXLINE( 287)		::String assetName = ( (::String)(this->weekFile->__Field(HX_("weekBackground",02,f1,ce,ed),::hx::paccDynamic)) );
HXLINE( 289)		bool isMissing = true;
HXLINE( 290)		bool _hx_tmp;
HXDLIN( 290)		if (::hx::IsNotNull( assetName )) {
HXLINE( 290)			_hx_tmp = (assetName.length > 0);
            		}
            		else {
HXLINE( 290)			_hx_tmp = false;
            		}
HXDLIN( 290)		if (_hx_tmp) {
HXLINE( 291)			bool _hx_tmp1;
HXDLIN( 291)			if (!(::sys::FileSystem_obj::exists(::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + (HX_("menubackgrounds/menu_",57,51,99,49) + assetName)) + HX_(".png",3b,2d,bd,1e)))))) {
HXLINE( 291)				_hx_tmp1 = ::openfl::utils::Assets_obj::exists(::backend::Paths_obj::getPath(((HX_("images/menubackgrounds/menu_",80,93,47,d3) + assetName) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),null(),null()),HX_("IMAGE",3b,57,57,3b));
            			}
            			else {
HXLINE( 291)				_hx_tmp1 = true;
            			}
HXDLIN( 291)			if (_hx_tmp1) {
HXLINE( 293)				 ::flixel::FlxSprite _hx_tmp2 = this->bgSprite;
HXDLIN( 293)				_hx_tmp2->loadGraphic(::backend::Paths_obj::image((HX_("menubackgrounds/menu_",57,51,99,49) + assetName),null(),null()),null(),null(),null(),null(),null());
HXLINE( 294)				isMissing = false;
            			}
            		}
HXLINE( 298)		if (isMissing) {
HXLINE( 299)			this->bgSprite->set_visible(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(WeekEditorState_obj,reloadBG,(void))

void WeekEditorState_obj::reloadWeekThing(){
            	HX_STACKFRAME(&_hx_pos_1c627f19952ad1ec_303_reloadWeekThing)
HXLINE( 304)		this->weekThing->set_visible(true);
HXLINE( 305)		this->missingFileText->set_visible(false);
HXLINE( 306)		::String assetName = ::StringTools_obj::trim(this->weekFileInputText->text);
HXLINE( 308)		bool isMissing = true;
HXLINE( 309)		bool _hx_tmp;
HXDLIN( 309)		if (::hx::IsNotNull( assetName )) {
HXLINE( 309)			_hx_tmp = (assetName.length > 0);
            		}
            		else {
HXLINE( 309)			_hx_tmp = false;
            		}
HXDLIN( 309)		if (_hx_tmp) {
HXLINE( 310)			bool _hx_tmp1;
HXDLIN( 310)			if (!(::sys::FileSystem_obj::exists(::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + (HX_("storymenu/",9b,19,38,af) + assetName)) + HX_(".png",3b,2d,bd,1e)))))) {
HXLINE( 310)				_hx_tmp1 = ::openfl::utils::Assets_obj::exists(::backend::Paths_obj::getPath(((HX_("images/storymenu/",d2,44,94,b2) + assetName) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),null(),null()),HX_("IMAGE",3b,57,57,3b));
            			}
            			else {
HXLINE( 310)				_hx_tmp1 = true;
            			}
HXDLIN( 310)			if (_hx_tmp1) {
HXLINE( 312)				 ::objects::MenuItem _hx_tmp2 = this->weekThing;
HXDLIN( 312)				_hx_tmp2->loadGraphic(::backend::Paths_obj::image((HX_("storymenu/",9b,19,38,af) + assetName),null(),null()),null(),null(),null(),null(),null());
HXLINE( 313)				isMissing = false;
            			}
            		}
HXLINE( 317)		if (isMissing) {
HXLINE( 318)			this->weekThing->set_visible(false);
HXLINE( 319)			this->missingFileText->set_visible(true);
HXLINE( 320)			this->missingFileText->set_text(((HX_("MISSING FILE: images/storymenu/",96,57,11,26) + assetName) + HX_(".png",3b,2d,bd,1e)));
            		}
HXLINE( 322)		this->recalculateStuffPosition();
HXLINE( 326)		::backend::DiscordClient_obj::changePresence(HX_("Week Editor",59,6c,6c,6d),(HX_("Editting: ",be,88,46,a7) + ::states::editors::WeekEditorState_obj::weekFileName),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(WeekEditorState_obj,reloadWeekThing,(void))

void WeekEditorState_obj::UIEvent(::String id, ::Dynamic sender){
            	HX_STACKFRAME(&_hx_pos_1c627f19952ad1ec_330_UIEvent)
HXLINE( 331)		if ((id == ::backend::ui::PsychUICheckBox_obj::CLICK_EVENT)) {
HXLINE( 332)			::states::editors::WeekEditorState_obj::unsavedProgress = true;
            		}
HXLINE( 334)		bool _hx_tmp;
HXDLIN( 334)		if ((id == ::backend::ui::PsychUIInputText_obj::CHANGE_EVENT)) {
HXLINE( 334)			_hx_tmp = ::Std_obj::isOfType(sender,::hx::ClassOf< ::backend::ui::PsychUIInputText >());
            		}
            		else {
HXLINE( 334)			_hx_tmp = false;
            		}
HXDLIN( 334)		if (_hx_tmp) {
HXLINE( 335)			if (::hx::IsInstanceEq( sender,this->weekFileInputText )) {
HXLINE( 336)				::states::editors::WeekEditorState_obj::weekFileName = ::StringTools_obj::trim(this->weekFileInputText->text);
HXLINE( 337)				::states::editors::WeekEditorState_obj::unsavedProgress = true;
HXLINE( 338)				this->reloadWeekThing();
            			}
            			else {
HXLINE( 339)				bool _hx_tmp1;
HXDLIN( 339)				bool _hx_tmp2;
HXDLIN( 339)				if (::hx::IsInstanceNotEq( sender,this->opponentInputText )) {
HXLINE( 339)					_hx_tmp2 = ::hx::IsInstanceEq( sender,this->boyfriendInputText );
            				}
            				else {
HXLINE( 339)					_hx_tmp2 = true;
            				}
HXDLIN( 339)				if (!(_hx_tmp2)) {
HXLINE( 339)					_hx_tmp1 = ::hx::IsInstanceEq( sender,this->girlfriendInputText );
            				}
            				else {
HXLINE( 339)					_hx_tmp1 = true;
            				}
HXDLIN( 339)				if (_hx_tmp1) {
HXLINE( 340)					 ::Dynamic(this->weekFile->__Field(HX_("weekCharacters",be,b5,7f,1d),::hx::paccDynamic))->__SetItem(0,::StringTools_obj::trim(this->opponentInputText->text));
HXLINE( 341)					 ::Dynamic(this->weekFile->__Field(HX_("weekCharacters",be,b5,7f,1d),::hx::paccDynamic))->__SetItem(1,::StringTools_obj::trim(this->boyfriendInputText->text));
HXLINE( 342)					 ::Dynamic(this->weekFile->__Field(HX_("weekCharacters",be,b5,7f,1d),::hx::paccDynamic))->__SetItem(2,::StringTools_obj::trim(this->girlfriendInputText->text));
HXLINE( 343)					::states::editors::WeekEditorState_obj::unsavedProgress = true;
HXLINE( 344)					this->updateText();
            				}
            				else {
HXLINE( 345)					if (::hx::IsInstanceEq( sender,this->backgroundInputText )) {
HXLINE( 346)						this->weekFile->__SetField(HX_("weekBackground",02,f1,ce,ed),::StringTools_obj::trim(this->backgroundInputText->text),::hx::paccDynamic);
HXLINE( 347)						::states::editors::WeekEditorState_obj::unsavedProgress = true;
HXLINE( 348)						this->reloadBG();
            					}
            					else {
HXLINE( 349)						if (::hx::IsInstanceEq( sender,this->displayNameInputText )) {
HXLINE( 350)							this->weekFile->__SetField(HX_("storyName",e0,50,20,29),::StringTools_obj::trim(this->displayNameInputText->text),::hx::paccDynamic);
HXLINE( 351)							::states::editors::WeekEditorState_obj::unsavedProgress = true;
HXLINE( 352)							this->updateText();
            						}
            						else {
HXLINE( 353)							if (::hx::IsInstanceEq( sender,this->weekNameInputText )) {
HXLINE( 354)								this->weekFile->__SetField(HX_("weekName",5f,08,2f,30),::StringTools_obj::trim(this->weekNameInputText->text),::hx::paccDynamic);
HXLINE( 355)								::states::editors::WeekEditorState_obj::unsavedProgress = true;
            							}
            							else {
HXLINE( 356)								if (::hx::IsInstanceEq( sender,this->songsInputText )) {
HXLINE( 357)									::Array< ::String > splittedText = ::StringTools_obj::trim(this->songsInputText->text).split(HX_(",",2c,00,00,00));
HXLINE( 358)									{
HXLINE( 358)										int _g = 0;
HXDLIN( 358)										int _g1 = splittedText->length;
HXDLIN( 358)										while((_g < _g1)){
HXLINE( 358)											_g = (_g + 1);
HXDLIN( 358)											int i = (_g - 1);
HXLINE( 359)											splittedText[i] = ::StringTools_obj::trim(splittedText->__get(i));
            										}
            									}
HXLINE( 362)									while((splittedText->length < ( (::cpp::VirtualArray)(this->weekFile->__Field(HX_("songs",fe,36,c7,80),::hx::paccDynamic)) )->get_length())){
HXLINE( 363)										( (::cpp::VirtualArray)(this->weekFile->__Field(HX_("songs",fe,36,c7,80),::hx::paccDynamic)) )->pop();
            									}
HXLINE( 366)									{
HXLINE( 366)										int _g2 = 0;
HXDLIN( 366)										int _g3 = splittedText->length;
HXDLIN( 366)										while((_g2 < _g3)){
HXLINE( 366)											_g2 = (_g2 + 1);
HXDLIN( 366)											int i1 = (_g2 - 1);
HXLINE( 367)											if ((i1 >= ( (::cpp::VirtualArray)(this->weekFile->__Field(HX_("songs",fe,36,c7,80),::hx::paccDynamic)) )->get_length())) {
HXLINE( 368)												( (::cpp::VirtualArray)(this->weekFile->__Field(HX_("songs",fe,36,c7,80),::hx::paccDynamic)) )->push(::cpp::VirtualArray_obj::__new(3)->init(0,splittedText->__get(i1))->init(1,HX_("face",9d,b4,b5,43))->init(2,::cpp::VirtualArray_obj::__new(3)->init(0,146)->init(1,113)->init(2,253)));
            											}
            											else {
HXLINE( 370)												 ::Dynamic(this->weekFile->__Field(HX_("songs",fe,36,c7,80),::hx::paccDynamic))->__GetItem(i1)->__SetItem(0,splittedText->__get(i1));
HXLINE( 371)												bool _hx_tmp3;
HXDLIN( 371)												if (::hx::IsNotNull(  ::Dynamic(this->weekFile->__Field(HX_("songs",fe,36,c7,80),::hx::paccDynamic))->__GetItem(i1)->__GetItem(1) )) {
HXLINE( 371)													_hx_tmp3 = ( (bool)( ::Dynamic(this->weekFile->__Field(HX_("songs",fe,36,c7,80),::hx::paccDynamic))->__GetItem(i1)->__GetItem(1)) );
            												}
            												else {
HXLINE( 371)													_hx_tmp3 = true;
            												}
HXDLIN( 371)												if (_hx_tmp3) {
HXLINE( 372)													 ::Dynamic(this->weekFile->__Field(HX_("songs",fe,36,c7,80),::hx::paccDynamic))->__GetItem(i1)->__SetItem(1,HX_("face",9d,b4,b5,43));
HXLINE( 373)													 ::Dynamic(this->weekFile->__Field(HX_("songs",fe,36,c7,80),::hx::paccDynamic))->__GetItem(i1)->__SetItem(2,::Array_obj< int >::fromData( _hx_array_data_ba26a7fc_24,3));
            												}
            											}
            										}
            									}
HXLINE( 377)									this->updateText();
HXLINE( 378)									::states::editors::WeekEditorState_obj::unsavedProgress = true;
            								}
            								else {
HXLINE( 379)									if (::hx::IsInstanceEq( sender,this->weekBeforeInputText )) {
HXLINE( 380)										this->weekFile->__SetField(HX_("weekBefore",93,97,02,5d),::StringTools_obj::trim(this->weekBeforeInputText->text),::hx::paccDynamic);
HXLINE( 381)										::states::editors::WeekEditorState_obj::unsavedProgress = true;
            									}
            									else {
HXLINE( 382)										if (::hx::IsInstanceEq( sender,this->difficultiesInputText )) {
HXLINE( 383)											this->weekFile->__SetField(HX_("difficulties",59,c7,5e,02),::StringTools_obj::trim(this->difficultiesInputText->text),::hx::paccDynamic);
HXLINE( 384)											::states::editors::WeekEditorState_obj::unsavedProgress = true;
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(WeekEditorState_obj,UIEvent,(void))

void WeekEditorState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_1c627f19952ad1ec_390_update)
HXLINE( 391)		if (::hx::IsNotNull( ::states::editors::WeekEditorState_obj::loadedWeek )) {
HXLINE( 392)			this->weekFile = ::states::editors::WeekEditorState_obj::loadedWeek;
HXLINE( 393)			::states::editors::WeekEditorState_obj::loadedWeek = null();
HXLINE( 395)			this->reloadAllShit();
            		}
HXLINE( 398)		if (::hx::IsNull( ::backend::ui::PsychUIInputText_obj::focusOn )) {
HXLINE( 400)			::backend::ClientPrefs_obj::toggleVolumeKeys(true);
HXLINE( 401)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 401)			if (_this->keyManager->checkStatusUnsafe(27,_this->status)) {
HXLINE( 403)				if (!(::states::editors::WeekEditorState_obj::unsavedProgress)) {
HXLINE( 405)					::backend::MusicBeatState_obj::switchState( ::states::editors::MasterEditorMenu_obj::__alloc( HX_CTX ));
HXLINE( 406)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 406)					_hx_tmp->playMusic(::backend::Paths_obj::returnSound((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)),null(),true,null()),null(),null(),null());
            				}
            				else {
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            					void _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_1c627f19952ad1ec_408_update)
HXLINE( 408)						::states::editors::WeekEditorState_obj::unsavedProgress = false;
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE( 408)					this->openSubState( ::states::editors::content::ExitConfirmationPrompt_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0())));
            				}
            			}
            		}
            		else {
HXLINE( 411)			::backend::ClientPrefs_obj::toggleVolumeKeys(false);
            		}
HXLINE( 413)		this->super::update(elapsed);
HXLINE( 415)		this->lock->set_y(this->weekThing->y);
HXLINE( 416)		this->missingFileText->set_y((this->weekThing->y + 36));
            	}


void WeekEditorState_obj::recalculateStuffPosition(){
            	HX_STACKFRAME(&_hx_pos_1c627f19952ad1ec_419_recalculateStuffPosition)
HXLINE( 420)		{
HXLINE( 420)			 ::objects::MenuItem _this = this->weekThing;
HXDLIN( 420)			int axes = 1;
HXDLIN( 420)			bool _hx_tmp;
HXDLIN( 420)			if ((axes != 1)) {
HXLINE( 420)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE( 420)				_hx_tmp = true;
            			}
HXDLIN( 420)			if (_hx_tmp) {
HXLINE( 420)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 420)				_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 420)			bool _hx_tmp2;
HXDLIN( 420)			if ((axes != 16)) {
HXLINE( 420)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE( 420)				_hx_tmp2 = true;
            			}
HXDLIN( 420)			if (_hx_tmp2) {
HXLINE( 420)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 420)				_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 421)		 ::flixel::FlxSprite _hx_tmp4 = this->lock;
HXDLIN( 421)		Float _hx_tmp5 = (this->weekThing->get_width() + 10);
HXDLIN( 421)		_hx_tmp4->set_x((_hx_tmp5 + this->weekThing->x));
            	}


HX_DEFINE_DYNAMIC_FUNC0(WeekEditorState_obj,recalculateStuffPosition,(void))

bool WeekEditorState_obj::unsavedProgress;

::String WeekEditorState_obj::weekFileName;

 ::openfl::net::FileReference WeekEditorState_obj::_file;

void WeekEditorState_obj::loadWeek(){
            	HX_GC_STACKFRAME(&_hx_pos_1c627f19952ad1ec_425_loadWeek)
HXLINE( 426)		 ::openfl::net::FileFilter jsonFilter =  ::openfl::net::FileFilter_obj::__alloc( HX_CTX ,HX_("JSON",28,0a,29,31),HX_("json",28,42,68,46),null());
HXLINE( 427)		::states::editors::WeekEditorState_obj::_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE( 428)		::states::editors::WeekEditorState_obj::_file->addEventListener(HX_("select",fc,1a,33,6a),::states::editors::WeekEditorState_obj::onLoadComplete_dyn(),null(),null(),null());
HXLINE( 429)		::states::editors::WeekEditorState_obj::_file->addEventListener(HX_("cancel",7a,ed,33,b8),::states::editors::WeekEditorState_obj::onLoadCancel_dyn(),null(),null(),null());
HXLINE( 430)		::states::editors::WeekEditorState_obj::_file->addEventListener(HX_("ioError",02,fe,41,76),::states::editors::WeekEditorState_obj::onLoadError_dyn(),null(),null(),null());
HXLINE( 431)		::states::editors::WeekEditorState_obj::_file->browse(::Array_obj< ::Dynamic>::__new(1)->init(0,jsonFilter));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(WeekEditorState_obj,loadWeek,(void))

 ::Dynamic WeekEditorState_obj::loadedWeek;

bool WeekEditorState_obj::loadError;

void WeekEditorState_obj::onLoadComplete( ::openfl::events::Event _){
            	HX_GC_STACKFRAME(&_hx_pos_1c627f19952ad1ec_437_onLoadComplete)
HXLINE( 438)		::states::editors::WeekEditorState_obj::_file->removeEventListener(HX_("select",fc,1a,33,6a),::states::editors::WeekEditorState_obj::onLoadComplete_dyn(),null());
HXLINE( 439)		::states::editors::WeekEditorState_obj::_file->removeEventListener(HX_("cancel",7a,ed,33,b8),::states::editors::WeekEditorState_obj::onLoadCancel_dyn(),null());
HXLINE( 440)		::states::editors::WeekEditorState_obj::_file->removeEventListener(HX_("ioError",02,fe,41,76),::states::editors::WeekEditorState_obj::onLoadError_dyn(),null());
HXLINE( 443)		::String fullPath = null();
HXLINE( 445)		if (::hx::IsNotNull( ::states::editors::WeekEditorState_obj::_file->_hx___path )) {
HXLINE( 445)			fullPath = ::states::editors::WeekEditorState_obj::_file->_hx___path;
            		}
HXLINE( 447)		if (::hx::IsNotNull( fullPath )) {
HXLINE( 448)			::String rawJson = ::sys::io::File_obj::getContent(fullPath);
HXLINE( 449)			if (::hx::IsNotNull( rawJson )) {
HXLINE( 450)				::states::editors::WeekEditorState_obj::loadedWeek =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,rawJson)->doParse();
HXLINE( 451)				bool _hx_tmp;
HXDLIN( 451)				if (::hx::IsNotNull( ::states::editors::WeekEditorState_obj::loadedWeek->__Field(HX_("weekCharacters",be,b5,7f,1d),::hx::paccDynamic) )) {
HXLINE( 451)					_hx_tmp = ::hx::IsNotNull( ::states::editors::WeekEditorState_obj::loadedWeek->__Field(HX_("weekName",5f,08,2f,30),::hx::paccDynamic) );
            				}
            				else {
HXLINE( 451)					_hx_tmp = false;
            				}
HXDLIN( 451)				if (_hx_tmp) {
HXLINE( 453)					::String cutName = ::states::editors::WeekEditorState_obj::_file->get_name();
HXDLIN( 453)					::String cutName1 = cutName.substr(0,(::states::editors::WeekEditorState_obj::_file->get_name().length - 5));
HXLINE( 454)					::haxe::Log_obj::trace((HX_("Successfully loaded file: ",84,24,61,ed) + cutName1),::hx::SourceInfo(HX_("source/states/editors/WeekEditorState.hx",50,48,e4,71),454,HX_("states.editors.WeekEditorState",fc,a7,26,ba),HX_("onLoadComplete",be,4c,20,63)));
HXLINE( 455)					::states::editors::WeekEditorState_obj::loadError = false;
HXLINE( 457)					::states::editors::WeekEditorState_obj::weekFileName = cutName1;
HXLINE( 458)					::states::editors::WeekEditorState_obj::_file = null();
HXLINE( 459)					::states::editors::WeekEditorState_obj::unsavedProgress = false;
HXLINE( 460)					return;
            				}
            			}
            		}
HXLINE( 464)		::states::editors::WeekEditorState_obj::loadError = true;
HXLINE( 465)		::states::editors::WeekEditorState_obj::loadedWeek = null();
HXLINE( 466)		::states::editors::WeekEditorState_obj::_file = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(WeekEditorState_obj,onLoadComplete,(void))

void WeekEditorState_obj::onLoadCancel( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_1c627f19952ad1ec_476_onLoadCancel)
HXLINE( 477)		::states::editors::WeekEditorState_obj::_file->removeEventListener(HX_("select",fc,1a,33,6a),::states::editors::WeekEditorState_obj::onLoadComplete_dyn(),null());
HXLINE( 478)		::states::editors::WeekEditorState_obj::_file->removeEventListener(HX_("cancel",7a,ed,33,b8),::states::editors::WeekEditorState_obj::onLoadCancel_dyn(),null());
HXLINE( 479)		::states::editors::WeekEditorState_obj::_file->removeEventListener(HX_("ioError",02,fe,41,76),::states::editors::WeekEditorState_obj::onLoadError_dyn(),null());
HXLINE( 480)		::states::editors::WeekEditorState_obj::_file = null();
HXLINE( 481)		::haxe::Log_obj::trace(HX_("Cancelled file loading.",67,56,c5,a3),::hx::SourceInfo(HX_("source/states/editors/WeekEditorState.hx",50,48,e4,71),481,HX_("states.editors.WeekEditorState",fc,a7,26,ba),HX_("onLoadCancel",3f,be,a2,45)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(WeekEditorState_obj,onLoadCancel,(void))

void WeekEditorState_obj::onLoadError( ::openfl::events::IOErrorEvent _){
            	HX_STACKFRAME(&_hx_pos_1c627f19952ad1ec_488_onLoadError)
HXLINE( 489)		::states::editors::WeekEditorState_obj::_file->removeEventListener(HX_("select",fc,1a,33,6a),::states::editors::WeekEditorState_obj::onLoadComplete_dyn(),null());
HXLINE( 490)		::states::editors::WeekEditorState_obj::_file->removeEventListener(HX_("cancel",7a,ed,33,b8),::states::editors::WeekEditorState_obj::onLoadCancel_dyn(),null());
HXLINE( 491)		::states::editors::WeekEditorState_obj::_file->removeEventListener(HX_("ioError",02,fe,41,76),::states::editors::WeekEditorState_obj::onLoadError_dyn(),null());
HXLINE( 492)		::states::editors::WeekEditorState_obj::_file = null();
HXLINE( 493)		::haxe::Log_obj::trace(HX_("Problem loading file",21,8c,56,d8),::hx::SourceInfo(HX_("source/states/editors/WeekEditorState.hx",50,48,e4,71),493,HX_("states.editors.WeekEditorState",fc,a7,26,ba),HX_("onLoadError",a3,fa,a3,b0)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(WeekEditorState_obj,onLoadError,(void))

void WeekEditorState_obj::saveWeek( ::Dynamic weekFile){
            	HX_GC_STACKFRAME(&_hx_pos_1c627f19952ad1ec_496_saveWeek)
HXLINE( 497)		 ::Dynamic replacer = null();
HXDLIN( 497)		::String data = ::haxe::format::JsonPrinter_obj::print(weekFile,replacer,HX_("\t",09,00,00,00));
HXLINE( 498)		if ((data.length > 0)) {
HXLINE( 500)			::states::editors::WeekEditorState_obj::_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE( 501)			::states::editors::WeekEditorState_obj::_file->addEventListener(HX_("select",fc,1a,33,6a),::states::editors::WeekEditorState_obj::onSaveComplete_dyn(),null(),null(),null());
HXLINE( 502)			::states::editors::WeekEditorState_obj::_file->addEventListener(HX_("cancel",7a,ed,33,b8),::states::editors::WeekEditorState_obj::onSaveCancel_dyn(),null(),null(),null());
HXLINE( 503)			::states::editors::WeekEditorState_obj::_file->addEventListener(HX_("ioError",02,fe,41,76),::states::editors::WeekEditorState_obj::onSaveError_dyn(),null(),null(),null());
HXLINE( 504)			::states::editors::WeekEditorState_obj::_file->save(data,(::states::editors::WeekEditorState_obj::weekFileName + HX_(".json",56,f1,d6,c2)));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(WeekEditorState_obj,saveWeek,(void))

void WeekEditorState_obj::onSaveComplete( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_1c627f19952ad1ec_509_onSaveComplete)
HXLINE( 510)		::states::editors::WeekEditorState_obj::_file->removeEventListener(HX_("select",fc,1a,33,6a),::states::editors::WeekEditorState_obj::onSaveComplete_dyn(),null());
HXLINE( 511)		::states::editors::WeekEditorState_obj::_file->removeEventListener(HX_("cancel",7a,ed,33,b8),::states::editors::WeekEditorState_obj::onSaveCancel_dyn(),null());
HXLINE( 512)		::states::editors::WeekEditorState_obj::_file->removeEventListener(HX_("ioError",02,fe,41,76),::states::editors::WeekEditorState_obj::onSaveError_dyn(),null());
HXLINE( 513)		::states::editors::WeekEditorState_obj::_file = null();
HXLINE( 514)		::flixel::FlxG_obj::log->advanced(HX_("Successfully saved file.",c0,0d,09,f4),::flixel::_hx_system::debug::log::LogStyle_obj::NOTICE,null());
HXLINE( 515)		::states::editors::WeekEditorState_obj::unsavedProgress = false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(WeekEditorState_obj,onSaveComplete,(void))

void WeekEditorState_obj::onSaveCancel( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_1c627f19952ad1ec_522_onSaveCancel)
HXLINE( 523)		::states::editors::WeekEditorState_obj::_file->removeEventListener(HX_("select",fc,1a,33,6a),::states::editors::WeekEditorState_obj::onSaveComplete_dyn(),null());
HXLINE( 524)		::states::editors::WeekEditorState_obj::_file->removeEventListener(HX_("cancel",7a,ed,33,b8),::states::editors::WeekEditorState_obj::onSaveCancel_dyn(),null());
HXLINE( 525)		::states::editors::WeekEditorState_obj::_file->removeEventListener(HX_("ioError",02,fe,41,76),::states::editors::WeekEditorState_obj::onSaveError_dyn(),null());
HXLINE( 526)		::states::editors::WeekEditorState_obj::_file = null();
HXLINE( 527)		::haxe::Log_obj::trace(HX_("Cancelled file saving.",9f,4a,9f,f3),::hx::SourceInfo(HX_("source/states/editors/WeekEditorState.hx",50,48,e4,71),527,HX_("states.editors.WeekEditorState",fc,a7,26,ba),HX_("onSaveCancel",96,1a,31,d9)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(WeekEditorState_obj,onSaveCancel,(void))

void WeekEditorState_obj::onSaveError( ::openfl::events::IOErrorEvent _){
            	HX_STACKFRAME(&_hx_pos_1c627f19952ad1ec_534_onSaveError)
HXLINE( 535)		::states::editors::WeekEditorState_obj::_file->removeEventListener(HX_("select",fc,1a,33,6a),::states::editors::WeekEditorState_obj::onSaveComplete_dyn(),null());
HXLINE( 536)		::states::editors::WeekEditorState_obj::_file->removeEventListener(HX_("cancel",7a,ed,33,b8),::states::editors::WeekEditorState_obj::onSaveCancel_dyn(),null());
HXLINE( 537)		::states::editors::WeekEditorState_obj::_file->removeEventListener(HX_("ioError",02,fe,41,76),::states::editors::WeekEditorState_obj::onSaveError_dyn(),null());
HXLINE( 538)		::states::editors::WeekEditorState_obj::_file = null();
HXLINE( 539)		::flixel::FlxG_obj::log->advanced(HX_("Problem saving file",41,4c,cd,8e),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(WeekEditorState_obj,onSaveError,(void))


::hx::ObjectPtr< WeekEditorState_obj > WeekEditorState_obj::__new( ::Dynamic weekFile) {
	::hx::ObjectPtr< WeekEditorState_obj > __this = new WeekEditorState_obj();
	__this->__construct(weekFile);
	return __this;
}

::hx::ObjectPtr< WeekEditorState_obj > WeekEditorState_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic weekFile) {
	WeekEditorState_obj *__this = (WeekEditorState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(WeekEditorState_obj), true, "states.editors.WeekEditorState"));
	*(void **)__this = WeekEditorState_obj::_hx_vtable;
	__this->__construct(weekFile);
	return __this;
}

WeekEditorState_obj::WeekEditorState_obj()
{
}

void WeekEditorState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(WeekEditorState);
	HX_MARK_MEMBER_NAME(txtWeekTitle,"txtWeekTitle");
	HX_MARK_MEMBER_NAME(bgSprite,"bgSprite");
	HX_MARK_MEMBER_NAME(lock,"lock");
	HX_MARK_MEMBER_NAME(txtTracklist,"txtTracklist");
	HX_MARK_MEMBER_NAME(grpWeekCharacters,"grpWeekCharacters");
	HX_MARK_MEMBER_NAME(weekThing,"weekThing");
	HX_MARK_MEMBER_NAME(missingFileText,"missingFileText");
	HX_MARK_MEMBER_NAME(weekFile,"weekFile");
	HX_MARK_MEMBER_NAME(UI_box,"UI_box");
	HX_MARK_MEMBER_NAME(songsInputText,"songsInputText");
	HX_MARK_MEMBER_NAME(backgroundInputText,"backgroundInputText");
	HX_MARK_MEMBER_NAME(displayNameInputText,"displayNameInputText");
	HX_MARK_MEMBER_NAME(weekNameInputText,"weekNameInputText");
	HX_MARK_MEMBER_NAME(weekFileInputText,"weekFileInputText");
	HX_MARK_MEMBER_NAME(opponentInputText,"opponentInputText");
	HX_MARK_MEMBER_NAME(boyfriendInputText,"boyfriendInputText");
	HX_MARK_MEMBER_NAME(girlfriendInputText,"girlfriendInputText");
	HX_MARK_MEMBER_NAME(hideCheckbox,"hideCheckbox");
	HX_MARK_MEMBER_NAME(weekBeforeInputText,"weekBeforeInputText");
	HX_MARK_MEMBER_NAME(difficultiesInputText,"difficultiesInputText");
	HX_MARK_MEMBER_NAME(lockedCheckbox,"lockedCheckbox");
	HX_MARK_MEMBER_NAME(hiddenUntilUnlockCheckbox,"hiddenUntilUnlockCheckbox");
	 ::backend::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void WeekEditorState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(txtWeekTitle,"txtWeekTitle");
	HX_VISIT_MEMBER_NAME(bgSprite,"bgSprite");
	HX_VISIT_MEMBER_NAME(lock,"lock");
	HX_VISIT_MEMBER_NAME(txtTracklist,"txtTracklist");
	HX_VISIT_MEMBER_NAME(grpWeekCharacters,"grpWeekCharacters");
	HX_VISIT_MEMBER_NAME(weekThing,"weekThing");
	HX_VISIT_MEMBER_NAME(missingFileText,"missingFileText");
	HX_VISIT_MEMBER_NAME(weekFile,"weekFile");
	HX_VISIT_MEMBER_NAME(UI_box,"UI_box");
	HX_VISIT_MEMBER_NAME(songsInputText,"songsInputText");
	HX_VISIT_MEMBER_NAME(backgroundInputText,"backgroundInputText");
	HX_VISIT_MEMBER_NAME(displayNameInputText,"displayNameInputText");
	HX_VISIT_MEMBER_NAME(weekNameInputText,"weekNameInputText");
	HX_VISIT_MEMBER_NAME(weekFileInputText,"weekFileInputText");
	HX_VISIT_MEMBER_NAME(opponentInputText,"opponentInputText");
	HX_VISIT_MEMBER_NAME(boyfriendInputText,"boyfriendInputText");
	HX_VISIT_MEMBER_NAME(girlfriendInputText,"girlfriendInputText");
	HX_VISIT_MEMBER_NAME(hideCheckbox,"hideCheckbox");
	HX_VISIT_MEMBER_NAME(weekBeforeInputText,"weekBeforeInputText");
	HX_VISIT_MEMBER_NAME(difficultiesInputText,"difficultiesInputText");
	HX_VISIT_MEMBER_NAME(lockedCheckbox,"lockedCheckbox");
	HX_VISIT_MEMBER_NAME(hiddenUntilUnlockCheckbox,"hiddenUntilUnlockCheckbox");
	 ::backend::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val WeekEditorState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"lock") ) { return ::hx::Val( lock ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"UI_box") ) { return ::hx::Val( UI_box ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"UIEvent") ) { return ::hx::Val( UIEvent_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bgSprite") ) { return ::hx::Val( bgSprite ); }
		if (HX_FIELD_EQ(inName,"weekFile") ) { return ::hx::Val( weekFile ); }
		if (HX_FIELD_EQ(inName,"reloadBG") ) { return ::hx::Val( reloadBG_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"weekThing") ) { return ::hx::Val( weekThing ); }
		if (HX_FIELD_EQ(inName,"addWeekUI") ) { return ::hx::Val( addWeekUI_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addOtherUI") ) { return ::hx::Val( addOtherUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateText") ) { return ::hx::Val( updateText_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"txtWeekTitle") ) { return ::hx::Val( txtWeekTitle ); }
		if (HX_FIELD_EQ(inName,"txtTracklist") ) { return ::hx::Val( txtTracklist ); }
		if (HX_FIELD_EQ(inName,"addEditorBox") ) { return ::hx::Val( addEditorBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"hideCheckbox") ) { return ::hx::Val( hideCheckbox ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"reloadAllShit") ) { return ::hx::Val( reloadAllShit_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"songsInputText") ) { return ::hx::Val( songsInputText ); }
		if (HX_FIELD_EQ(inName,"lockedCheckbox") ) { return ::hx::Val( lockedCheckbox ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"missingFileText") ) { return ::hx::Val( missingFileText ); }
		if (HX_FIELD_EQ(inName,"reloadWeekThing") ) { return ::hx::Val( reloadWeekThing_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"grpWeekCharacters") ) { return ::hx::Val( grpWeekCharacters ); }
		if (HX_FIELD_EQ(inName,"weekNameInputText") ) { return ::hx::Val( weekNameInputText ); }
		if (HX_FIELD_EQ(inName,"weekFileInputText") ) { return ::hx::Val( weekFileInputText ); }
		if (HX_FIELD_EQ(inName,"opponentInputText") ) { return ::hx::Val( opponentInputText ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"boyfriendInputText") ) { return ::hx::Val( boyfriendInputText ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"backgroundInputText") ) { return ::hx::Val( backgroundInputText ); }
		if (HX_FIELD_EQ(inName,"girlfriendInputText") ) { return ::hx::Val( girlfriendInputText ); }
		if (HX_FIELD_EQ(inName,"weekBeforeInputText") ) { return ::hx::Val( weekBeforeInputText ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"displayNameInputText") ) { return ::hx::Val( displayNameInputText ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"difficultiesInputText") ) { return ::hx::Val( difficultiesInputText ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"recalculateStuffPosition") ) { return ::hx::Val( recalculateStuffPosition_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"hiddenUntilUnlockCheckbox") ) { return ::hx::Val( hiddenUntilUnlockCheckbox ); }
	}
	return super::__Field(inName,inCallProp);
}

bool WeekEditorState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { outValue = ( _file ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"loadWeek") ) { outValue = loadWeek_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"saveWeek") ) { outValue = saveWeek_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loadError") ) { outValue = ( loadError ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"loadedWeek") ) { outValue = ( loadedWeek ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onLoadError") ) { outValue = onLoadError_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onSaveError") ) { outValue = onSaveError_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"weekFileName") ) { outValue = ( weekFileName ); return true; }
		if (HX_FIELD_EQ(inName,"onLoadCancel") ) { outValue = onLoadCancel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onSaveCancel") ) { outValue = onSaveCancel_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"onLoadComplete") ) { outValue = onLoadComplete_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onSaveComplete") ) { outValue = onSaveComplete_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unsavedProgress") ) { outValue = ( unsavedProgress ); return true; }
	}
	return false;
}

::hx::Val WeekEditorState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"lock") ) { lock=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { UI_box=inValue.Cast<  ::backend::ui::PsychUIBox >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bgSprite") ) { bgSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"weekFile") ) { weekFile=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"weekThing") ) { weekThing=inValue.Cast<  ::objects::MenuItem >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"txtWeekTitle") ) { txtWeekTitle=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"txtTracklist") ) { txtTracklist=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hideCheckbox") ) { hideCheckbox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"songsInputText") ) { songsInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lockedCheckbox") ) { lockedCheckbox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"missingFileText") ) { missingFileText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"grpWeekCharacters") ) { grpWeekCharacters=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"weekNameInputText") ) { weekNameInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"weekFileInputText") ) { weekFileInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opponentInputText") ) { opponentInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"boyfriendInputText") ) { boyfriendInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"backgroundInputText") ) { backgroundInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"girlfriendInputText") ) { girlfriendInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"weekBeforeInputText") ) { weekBeforeInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"displayNameInputText") ) { displayNameInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"difficultiesInputText") ) { difficultiesInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"hiddenUntilUnlockCheckbox") ) { hiddenUntilUnlockCheckbox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool WeekEditorState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { _file=ioValue.Cast<  ::openfl::net::FileReference >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loadError") ) { loadError=ioValue.Cast< bool >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"loadedWeek") ) { loadedWeek=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"weekFileName") ) { weekFileName=ioValue.Cast< ::String >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unsavedProgress") ) { unsavedProgress=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void WeekEditorState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("txtWeekTitle",74,f4,3f,69));
	outFields->push(HX_("bgSprite",aa,c7,9c,98));
	outFields->push(HX_("lock",eb,9b,b7,47));
	outFields->push(HX_("txtTracklist",d9,6f,f5,3e));
	outFields->push(HX_("grpWeekCharacters",83,fc,76,59));
	outFields->push(HX_("weekThing",5a,43,fd,71));
	outFields->push(HX_("missingFileText",cf,06,fb,c0));
	outFields->push(HX_("weekFile",90,64,eb,2a));
	outFields->push(HX_("UI_box",60,07,ac,43));
	outFields->push(HX_("songsInputText",f9,62,7c,e3));
	outFields->push(HX_("backgroundInputText",09,e8,4a,ec));
	outFields->push(HX_("displayNameInputText",6a,3a,0e,bb));
	outFields->push(HX_("weekNameInputText",78,dd,49,37));
	outFields->push(HX_("weekFileInputText",27,f3,62,96));
	outFields->push(HX_("opponentInputText",7a,14,8b,a4));
	outFields->push(HX_("boyfriendInputText",0d,c3,47,c4));
	outFields->push(HX_("girlfriendInputText",bd,d0,af,b8));
	outFields->push(HX_("hideCheckbox",25,55,fb,6d));
	outFields->push(HX_("weekBeforeInputText",c4,c7,2c,00));
	outFields->push(HX_("difficultiesInputText",3e,6f,eb,34));
	outFields->push(HX_("lockedCheckbox",6d,ad,e9,73));
	outFields->push(HX_("hiddenUntilUnlockCheckbox",1b,7d,ad,69));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo WeekEditorState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(WeekEditorState_obj,txtWeekTitle),HX_("txtWeekTitle",74,f4,3f,69)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(WeekEditorState_obj,bgSprite),HX_("bgSprite",aa,c7,9c,98)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(WeekEditorState_obj,lock),HX_("lock",eb,9b,b7,47)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(WeekEditorState_obj,txtTracklist),HX_("txtTracklist",d9,6f,f5,3e)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(WeekEditorState_obj,grpWeekCharacters),HX_("grpWeekCharacters",83,fc,76,59)},
	{::hx::fsObject /*  ::objects::MenuItem */ ,(int)offsetof(WeekEditorState_obj,weekThing),HX_("weekThing",5a,43,fd,71)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(WeekEditorState_obj,missingFileText),HX_("missingFileText",cf,06,fb,c0)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(WeekEditorState_obj,weekFile),HX_("weekFile",90,64,eb,2a)},
	{::hx::fsObject /*  ::backend::ui::PsychUIBox */ ,(int)offsetof(WeekEditorState_obj,UI_box),HX_("UI_box",60,07,ac,43)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(WeekEditorState_obj,songsInputText),HX_("songsInputText",f9,62,7c,e3)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(WeekEditorState_obj,backgroundInputText),HX_("backgroundInputText",09,e8,4a,ec)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(WeekEditorState_obj,displayNameInputText),HX_("displayNameInputText",6a,3a,0e,bb)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(WeekEditorState_obj,weekNameInputText),HX_("weekNameInputText",78,dd,49,37)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(WeekEditorState_obj,weekFileInputText),HX_("weekFileInputText",27,f3,62,96)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(WeekEditorState_obj,opponentInputText),HX_("opponentInputText",7a,14,8b,a4)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(WeekEditorState_obj,boyfriendInputText),HX_("boyfriendInputText",0d,c3,47,c4)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(WeekEditorState_obj,girlfriendInputText),HX_("girlfriendInputText",bd,d0,af,b8)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(WeekEditorState_obj,hideCheckbox),HX_("hideCheckbox",25,55,fb,6d)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(WeekEditorState_obj,weekBeforeInputText),HX_("weekBeforeInputText",c4,c7,2c,00)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(WeekEditorState_obj,difficultiesInputText),HX_("difficultiesInputText",3e,6f,eb,34)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(WeekEditorState_obj,lockedCheckbox),HX_("lockedCheckbox",6d,ad,e9,73)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(WeekEditorState_obj,hiddenUntilUnlockCheckbox),HX_("hiddenUntilUnlockCheckbox",1b,7d,ad,69)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo WeekEditorState_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &WeekEditorState_obj::unsavedProgress,HX_("unsavedProgress",5b,33,8b,06)},
	{::hx::fsString,(void *) &WeekEditorState_obj::weekFileName,HX_("weekFileName",fb,8a,f9,ab)},
	{::hx::fsObject /*  ::openfl::net::FileReference */ ,(void *) &WeekEditorState_obj::_file,HX_("_file",5b,ea,cc,f6)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &WeekEditorState_obj::loadedWeek,HX_("loadedWeek",99,ba,82,b0)},
	{::hx::fsBool,(void *) &WeekEditorState_obj::loadError,HX_("loadError",c2,17,61,8e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String WeekEditorState_obj_sMemberFields[] = {
	HX_("txtWeekTitle",74,f4,3f,69),
	HX_("bgSprite",aa,c7,9c,98),
	HX_("lock",eb,9b,b7,47),
	HX_("txtTracklist",d9,6f,f5,3e),
	HX_("grpWeekCharacters",83,fc,76,59),
	HX_("weekThing",5a,43,fd,71),
	HX_("missingFileText",cf,06,fb,c0),
	HX_("weekFile",90,64,eb,2a),
	HX_("create",fc,66,0f,7c),
	HX_("UI_box",60,07,ac,43),
	HX_("addEditorBox",fd,df,01,35),
	HX_("songsInputText",f9,62,7c,e3),
	HX_("backgroundInputText",09,e8,4a,ec),
	HX_("displayNameInputText",6a,3a,0e,bb),
	HX_("weekNameInputText",78,dd,49,37),
	HX_("weekFileInputText",27,f3,62,96),
	HX_("opponentInputText",7a,14,8b,a4),
	HX_("boyfriendInputText",0d,c3,47,c4),
	HX_("girlfriendInputText",bd,d0,af,b8),
	HX_("hideCheckbox",25,55,fb,6d),
	HX_("addWeekUI",49,c4,28,b7),
	HX_("weekBeforeInputText",c4,c7,2c,00),
	HX_("difficultiesInputText",3e,6f,eb,34),
	HX_("lockedCheckbox",6d,ad,e9,73),
	HX_("hiddenUntilUnlockCheckbox",1b,7d,ad,69),
	HX_("addOtherUI",03,31,84,f5),
	HX_("reloadAllShit",28,7b,7b,27),
	HX_("updateText",56,b7,ae,05),
	HX_("reloadBG",5e,d5,dd,38),
	HX_("reloadWeekThing",c1,1c,d2,1a),
	HX_("UIEvent",26,fd,9f,07),
	HX_("update",09,86,05,87),
	HX_("recalculateStuffPosition",6a,dc,65,b6),
	::String(null()) };

static void WeekEditorState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(WeekEditorState_obj::unsavedProgress,"unsavedProgress");
	HX_MARK_MEMBER_NAME(WeekEditorState_obj::weekFileName,"weekFileName");
	HX_MARK_MEMBER_NAME(WeekEditorState_obj::_file,"_file");
	HX_MARK_MEMBER_NAME(WeekEditorState_obj::loadedWeek,"loadedWeek");
	HX_MARK_MEMBER_NAME(WeekEditorState_obj::loadError,"loadError");
};

#ifdef HXCPP_VISIT_ALLOCS
static void WeekEditorState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(WeekEditorState_obj::unsavedProgress,"unsavedProgress");
	HX_VISIT_MEMBER_NAME(WeekEditorState_obj::weekFileName,"weekFileName");
	HX_VISIT_MEMBER_NAME(WeekEditorState_obj::_file,"_file");
	HX_VISIT_MEMBER_NAME(WeekEditorState_obj::loadedWeek,"loadedWeek");
	HX_VISIT_MEMBER_NAME(WeekEditorState_obj::loadError,"loadError");
};

#endif

::hx::Class WeekEditorState_obj::__mClass;

static ::String WeekEditorState_obj_sStaticFields[] = {
	HX_("unsavedProgress",5b,33,8b,06),
	HX_("weekFileName",fb,8a,f9,ab),
	HX_("_file",5b,ea,cc,f6),
	HX_("loadWeek",3a,31,95,bf),
	HX_("loadedWeek",99,ba,82,b0),
	HX_("loadError",c2,17,61,8e),
	HX_("onLoadComplete",be,4c,20,63),
	HX_("onLoadCancel",3f,be,a2,45),
	HX_("onLoadError",a3,fa,a3,b0),
	HX_("saveWeek",d1,f9,ae,02),
	HX_("onSaveComplete",d5,ac,3f,bc),
	HX_("onSaveCancel",96,1a,31,d9),
	HX_("onSaveError",2c,b6,19,24),
	::String(null())
};

void WeekEditorState_obj::__register()
{
	WeekEditorState_obj _hx_dummy;
	WeekEditorState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.editors.WeekEditorState",fc,a7,26,ba);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &WeekEditorState_obj::__GetStatic;
	__mClass->mSetStaticField = &WeekEditorState_obj::__SetStatic;
	__mClass->mMarkFunc = WeekEditorState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(WeekEditorState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(WeekEditorState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< WeekEditorState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = WeekEditorState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WeekEditorState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WeekEditorState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void WeekEditorState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_1c627f19952ad1ec_30_boot)
HXDLIN(  30)		unsavedProgress = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1c627f19952ad1ec_145_boot)
HXDLIN( 145)		weekFileName = HX_("week1",bd,95,be,c7);
            	}
{
            	HX_STACKFRAME(&_hx_pos_1c627f19952ad1ec_434_boot)
HXDLIN( 434)		loadedWeek = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_1c627f19952ad1ec_435_boot)
HXDLIN( 435)		loadError = false;
            	}
}

} // end namespace states
} // end namespace editors
