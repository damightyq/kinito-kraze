// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_PsychCamera
#include <backend/PsychCamera.h>
#endif
#ifndef INCLUDED_backend_StageData
#include <backend/StageData.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIBox
#include <backend/ui/PsychUIBox.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIButton
#include <backend/ui/PsychUIButton.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUICheckBox
#include <backend/ui/PsychUICheckBox.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIDropDownMenu
#include <backend/ui/PsychUIDropDownMenu.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIEvent
#include <backend/ui/PsychUIEvent.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIInputText
#include <backend/ui/PsychUIInputText.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUINumericStepper
#include <backend/ui/PsychUINumericStepper.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIRadioGroup
#include <backend/ui/PsychUIRadioGroup.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIRadioItem
#include <backend/ui/PsychUIRadioItem.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUITab
#include <backend/ui/PsychUITab.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_objects_Character
#include <objects/Character.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_net_FileFilter
#include <openfl/net/FileFilter.h>
#endif
#ifndef INCLUDED_openfl_net_FileReference
#include <openfl/net/FileReference.h>
#endif
#ifndef INCLUDED_psychlua_ModchartSprite
#include <psychlua/ModchartSprite.h>
#endif
#ifndef INCLUDED_states_editors_MasterEditorMenu
#include <states/editors/MasterEditorMenu.h>
#endif
#ifndef INCLUDED_states_editors_StageEditorAnimationSubstate
#include <states/editors/StageEditorAnimationSubstate.h>
#endif
#ifndef INCLUDED_states_editors_StageEditorMetaSprite
#include <states/editors/StageEditorMetaSprite.h>
#endif
#ifndef INCLUDED_states_editors_StageEditorState
#include <states/editors/StageEditorState.h>
#endif
#ifndef INCLUDED_states_editors_content_BasePrompt
#include <states/editors/content/BasePrompt.h>
#endif
#ifndef INCLUDED_states_editors_content_ExitConfirmationPrompt
#include <states/editors/content/ExitConfirmationPrompt.h>
#endif
#ifndef INCLUDED_states_editors_content_PreloadListSubState
#include <states/editors/content/PreloadListSubState.h>
#endif
#ifndef INCLUDED_states_editors_content_Prompt
#include <states/editors/content/Prompt.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_29_new,"states.editors.StageEditorState","new",0xcf3f6d0c,"states.editors.StageEditorState.new","states/editors/StageEditorState.hx",29,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_66_create,"states.editors.StageEditorState","create",0x20fdfdd0,"states.editors.StageEditorState.create","states/editors/StageEditorState.hx",66,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_118_loadJsonAssetDirectory,"states.editors.StageEditorState","loadJsonAssetDirectory",0xcdf5b53f,"states.editors.StageEditorState.loadJsonAssetDirectory","states/editors/StageEditorState.hx",118,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_129_addHelpScreen,"states.editors.StageEditorState","addHelpScreen",0x71dcde3a,"states.editors.StageEditorState.addHelpScreen","states/editors/StageEditorState.hx",129,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_177_updateSpriteList,"states.editors.StageEditorState","updateSpriteList",0x9ca3c240,"states.editors.StageEditorState.updateSpriteList","states/editors/StageEditorState.hx",177,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_209_screenUI,"states.editors.StageEditorState","screenUI",0x74952c94,"states.editors.StageEditorState.screenUI","states/editors/StageEditorState.hx",209,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_244_screenUI,"states.editors.StageEditorState","screenUI",0x74952c94,"states.editors.StageEditorState.screenUI","states/editors/StageEditorState.hx",244,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_205_screenUI,"states.editors.StageEditorState","screenUI",0x74952c94,"states.editors.StageEditorState.screenUI","states/editors/StageEditorState.hx",205,0xcafb7822)
static const ::String _hx_array_data_81b1371a_12[] = {
	HX_("Sprite List",59,e2,06,27),
};
static const ::String _hx_array_data_81b1371a_13[] = {
	HX_("dad",47,36,4c,00),HX_("boyfriend",6a,29,b8,e6),HX_("gf",1f,5a,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_296_addSpriteListBox,"states.editors.StageEditorState","addSpriteListBox",0xbd8bb3bb,"states.editors.StageEditorState.addSpriteListBox","states/editors/StageEditorState.hx",296,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_305_addSpriteListBox,"states.editors.StageEditorState","addSpriteListBox",0xbd8bb3bb,"states.editors.StageEditorState.addSpriteListBox","states/editors/StageEditorState.hx",305,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_323_addSpriteListBox,"states.editors.StageEditorState","addSpriteListBox",0xbd8bb3bb,"states.editors.StageEditorState.addSpriteListBox","states/editors/StageEditorState.hx",323,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_340_addSpriteListBox,"states.editors.StageEditorState","addSpriteListBox",0xbd8bb3bb,"states.editors.StageEditorState.addSpriteListBox","states/editors/StageEditorState.hx",340,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_347_addSpriteListBox,"states.editors.StageEditorState","addSpriteListBox",0xbd8bb3bb,"states.editors.StageEditorState.addSpriteListBox","states/editors/StageEditorState.hx",347,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_429_addSpriteListBox,"states.editors.StageEditorState","addSpriteListBox",0xbd8bb3bb,"states.editors.StageEditorState.addSpriteListBox","states/editors/StageEditorState.hx",429,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_292_addSpriteListBox,"states.editors.StageEditorState","addSpriteListBox",0xbd8bb3bb,"states.editors.StageEditorState.addSpriteListBox","states/editors/StageEditorState.hx",292,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_449_showOutput,"states.editors.StageEditorState","showOutput",0x55da44b2,"states.editors.StageEditorState.showOutput","states/editors/StageEditorState.hx",449,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_460_findUnoccupiedName,"states.editors.StageEditorState","findUnoccupiedName",0xa96b928f,"states.editors.StageEditorState.findUnoccupiedName","states/editors/StageEditorState.hx",460,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_488_insertMeta,"states.editors.StageEditorState","insertMeta",0x0e28db72,"states.editors.StageEditorState.insertMeta","states/editors/StageEditorState.hx",488,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_516_spriteCreatePopup,"states.editors.StageEditorState","spriteCreatePopup",0xec539337,"states.editors.StageEditorState.spriteCreatePopup","states/editors/StageEditorState.hx",516,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_521_spriteCreatePopup,"states.editors.StageEditorState","spriteCreatePopup",0xec539337,"states.editors.StageEditorState.spriteCreatePopup","states/editors/StageEditorState.hx",521,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_526_spriteCreatePopup,"states.editors.StageEditorState","spriteCreatePopup",0xec539337,"states.editors.StageEditorState.spriteCreatePopup","states/editors/StageEditorState.hx",526,0xcafb7822)
static const int _hx_array_data_81b1371a_32[] = {
	(int)200,(int)200,
};
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_499_spriteCreatePopup,"states.editors.StageEditorState","spriteCreatePopup",0xec539337,"states.editors.StageEditorState.spriteCreatePopup","states/editors/StageEditorState.hx",499,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_541_updateSpriteListRadio,"states.editors.StageEditorState","updateSpriteListRadio",0xfe99969b,"states.editors.StageEditorState.updateSpriteListRadio","states/editors/StageEditorState.hx",541,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_577_editorUI,"states.editors.StageEditorState","editorUI",0x8dd40515,"states.editors.StageEditorState.editorUI","states/editors/StageEditorState.hx",577,0xcafb7822)
static const ::String _hx_array_data_81b1371a_39[] = {
	HX_("Meta",e5,76,32,33),HX_("Data",4a,82,3c,2d),HX_("Object",df,f2,d3,49),
};
static const ::String _hx_array_data_81b1371a_40[] = {
	HX_("Stage",9e,da,38,17),
};
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_624_addDataTab,"states.editors.StageEditorState","addDataTab",0x59482efe,"states.editors.StageEditorState.addDataTab","states/editors/StageEditorState.hx",624,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_628_addDataTab,"states.editors.StageEditorState","addDataTab",0x59482efe,"states.editors.StageEditorState.addDataTab","states/editors/StageEditorState.hx",628,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_639_addDataTab,"states.editors.StageEditorState","addDataTab",0x59482efe,"states.editors.StageEditorState.addDataTab","states/editors/StageEditorState.hx",639,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_644_addDataTab,"states.editors.StageEditorState","addDataTab",0x59482efe,"states.editors.StageEditorState.addDataTab","states/editors/StageEditorState.hx",644,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_670_addDataTab,"states.editors.StageEditorState","addDataTab",0x59482efe,"states.editors.StageEditorState.addDataTab","states/editors/StageEditorState.hx",670,0xcafb7822)
static const Float _hx_array_data_81b1371a_47[] = {
	(Float)0,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_688_addDataTab,"states.editors.StageEditorState","addDataTab",0x59482efe,"states.editors.StageEditorState.addDataTab","states/editors/StageEditorState.hx",688,0xcafb7822)
static const Float _hx_array_data_81b1371a_49[] = {
	(Float)0,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_706_addDataTab,"states.editors.StageEditorState","addDataTab",0x59482efe,"states.editors.StageEditorState.addDataTab","states/editors/StageEditorState.hx",706,0xcafb7822)
static const Float _hx_array_data_81b1371a_51[] = {
	(Float)0,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_718_addDataTab,"states.editors.StageEditorState","addDataTab",0x59482efe,"states.editors.StageEditorState.addDataTab","states/editors/StageEditorState.hx",718,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_725_addDataTab,"states.editors.StageEditorState","addDataTab",0x59482efe,"states.editors.StageEditorState.addDataTab","states/editors/StageEditorState.hx",725,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_609_addDataTab,"states.editors.StageEditorState","addDataTab",0x59482efe,"states.editors.StageEditorState.addDataTab","states/editors/StageEditorState.hx",609,0xcafb7822)
static const ::String _hx_array_data_81b1371a_55[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_747__updateCamera,"states.editors.StageEditorState","_updateCamera",0x7b352c19,"states.editors.StageEditorState._updateCamera","states/editors/StageEditorState.hx",747,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_772_getSelected,"states.editors.StageEditorState","getSelected",0xdf7b15bd,"states.editors.StageEditorState.getSelected","states/editors/StageEditorState.hx",772,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_792_addObjectTab,"states.editors.StageEditorState","addObjectTab",0x51a0a449,"states.editors.StageEditorState.addObjectTab","states/editors/StageEditorState.hx",792,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_829_addObjectTab,"states.editors.StageEditorState","addObjectTab",0x51a0a449,"states.editors.StageEditorState.addObjectTab","states/editors/StageEditorState.hx",829,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_836_addObjectTab,"states.editors.StageEditorState","addObjectTab",0x51a0a449,"states.editors.StageEditorState.addObjectTab","states/editors/StageEditorState.hx",836,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_859_addObjectTab,"states.editors.StageEditorState","addObjectTab",0x51a0a449,"states.editors.StageEditorState.addObjectTab","states/editors/StageEditorState.hx",859,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_868_addObjectTab,"states.editors.StageEditorState","addObjectTab",0x51a0a449,"states.editors.StageEditorState.addObjectTab","states/editors/StageEditorState.hx",868,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_884_addObjectTab,"states.editors.StageEditorState","addObjectTab",0x51a0a449,"states.editors.StageEditorState.addObjectTab","states/editors/StageEditorState.hx",884,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_902_addObjectTab,"states.editors.StageEditorState","addObjectTab",0x51a0a449,"states.editors.StageEditorState.addObjectTab","states/editors/StageEditorState.hx",902,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_912_addObjectTab,"states.editors.StageEditorState","addObjectTab",0x51a0a449,"states.editors.StageEditorState.addObjectTab","states/editors/StageEditorState.hx",912,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_931_addObjectTab,"states.editors.StageEditorState","addObjectTab",0x51a0a449,"states.editors.StageEditorState.addObjectTab","states/editors/StageEditorState.hx",931,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_940_addObjectTab,"states.editors.StageEditorState","addObjectTab",0x51a0a449,"states.editors.StageEditorState.addObjectTab","states/editors/StageEditorState.hx",940,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_968_addObjectTab,"states.editors.StageEditorState","addObjectTab",0x51a0a449,"states.editors.StageEditorState.addObjectTab","states/editors/StageEditorState.hx",968,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_784_addObjectTab,"states.editors.StageEditorState","addObjectTab",0x51a0a449,"states.editors.StageEditorState.addObjectTab","states/editors/StageEditorState.hx",784,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1037_addMetaTab,"states.editors.StageEditorState","addMetaTab",0x68f6cd43,"states.editors.StageEditorState.addMetaTab","states/editors/StageEditorState.hx",1037,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1011_addMetaTab,"states.editors.StageEditorState","addMetaTab",0x68f6cd43,"states.editors.StageEditorState.addMetaTab","states/editors/StageEditorState.hx",1011,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1053_addMetaTab,"states.editors.StageEditorState","addMetaTab",0x68f6cd43,"states.editors.StageEditorState.addMetaTab","states/editors/StageEditorState.hx",1053,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1060_addMetaTab,"states.editors.StageEditorState","addMetaTab",0x68f6cd43,"states.editors.StageEditorState.addMetaTab","states/editors/StageEditorState.hx",1060,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1070_addMetaTab,"states.editors.StageEditorState","addMetaTab",0x68f6cd43,"states.editors.StageEditorState.addMetaTab","states/editors/StageEditorState.hx",1070,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1080_addMetaTab,"states.editors.StageEditorState","addMetaTab",0x68f6cd43,"states.editors.StageEditorState.addMetaTab","states/editors/StageEditorState.hx",1080,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_992_addMetaTab,"states.editors.StageEditorState","addMetaTab",0x68f6cd43,"states.editors.StageEditorState.addMetaTab","states/editors/StageEditorState.hx",992,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1102_addStageTab,"states.editors.StageEditorState","addStageTab",0x1cbfd224,"states.editors.StageEditorState.addStageTab","states/editors/StageEditorState.hx",1102,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1115_addStageTab,"states.editors.StageEditorState","addStageTab",0x1cbfd224,"states.editors.StageEditorState.addStageTab","states/editors/StageEditorState.hx",1115,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1129_addStageTab,"states.editors.StageEditorState","addStageTab",0x1cbfd224,"states.editors.StageEditorState.addStageTab","states/editors/StageEditorState.hx",1129,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1099_addStageTab,"states.editors.StageEditorState","addStageTab",0x1cbfd224,"states.editors.StageEditorState.addStageTab","states/editors/StageEditorState.hx",1099,0xcafb7822)
static const ::String _hx_array_data_81b1371a_94[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1163_updateStageDataUI,"states.editors.StageEditorState","updateStageDataUI",0x7c7c1e7f,"states.editors.StageEditorState.updateStageDataUI","states/editors/StageEditorState.hx",1163,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1206_updateSelectedUI,"states.editors.StageEditorState","updateSelectedUI",0x7633b8ac,"states.editors.StageEditorState.updateSelectedUI","states/editors/StageEditorState.hx",1206,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1263_reloadCharacters,"states.editors.StageEditorState","reloadCharacters",0xccaea137,"states.editors.StageEditorState.reloadCharacters","states/editors/StageEditorState.hx",1263,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1285_reloadStageDropDown,"states.editors.StageEditorState","reloadStageDropDown",0x571b82a2,"states.editors.StageEditorState.reloadStageDropDown","states/editors/StageEditorState.hx",1285,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1305_checkUIOnObject,"states.editors.StageEditorState","checkUIOnObject",0x7e114126,"states.editors.StageEditorState.checkUIOnObject","states/editors/StageEditorState.hx",1305,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1320_UIEvent,"states.editors.StageEditorState","UIEvent",0xb3755fd2,"states.editors.StageEditorState.UIEvent","states/editors/StageEditorState.hx",1320,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1336_update,"states.editors.StageEditorState","update",0x2bf41cdd,"states.editors.StageEditorState.update","states/editors/StageEditorState.hx",1336,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1484_draw,"states.editors.StageEditorState","draw",0x81ada5d8,"states.editors.StageEditorState.draw","states/editors/StageEditorState.hx",1484,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1503_focusOnTarget,"states.editors.StageEditorState","focusOnTarget",0xe8f34974,"states.editors.StageEditorState.focusOnTarget","states/editors/StageEditorState.hx",1503,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1540_repositionGirlfriend,"states.editors.StageEditorState","repositionGirlfriend",0x3cb4b20a,"states.editors.StageEditorState.repositionGirlfriend","states/editors/StageEditorState.hx",1540,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1546_repositionDad,"states.editors.StageEditorState","repositionDad",0xe1072bf7,"states.editors.StageEditorState.repositionDad","states/editors/StageEditorState.hx",1546,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1552_repositionBoyfriend,"states.editors.StageEditorState","repositionBoyfriend",0xb05a831a,"states.editors.StageEditorState.repositionBoyfriend","states/editors/StageEditorState.hx",1552,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1559_drawDebugOnCamera,"states.editors.StageEditorState","drawDebugOnCamera",0x2e0f399f,"states.editors.StageEditorState.drawDebugOnCamera","states/editors/StageEditorState.hx",1559,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1596_saveObjectsToJson,"states.editors.StageEditorState","saveObjectsToJson",0xf1f29566,"states.editors.StageEditorState.saveObjectsToJson","states/editors/StageEditorState.hx",1596,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1603_saveData,"states.editors.StageEditorState","saveData",0xa4fde3db,"states.editors.StageEditorState.saveData","states/editors/StageEditorState.hx",1603,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1620_onSaveComplete,"states.editors.StageEditorState","onSaveComplete",0x229f37a9,"states.editors.StageEditorState.onSaveComplete","states/editors/StageEditorState.hx",1620,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1633_onSaveCancel,"states.editors.StageEditorState","onSaveCancel",0xe7fa886a,"states.editors.StageEditorState.onSaveCancel","states/editors/StageEditorState.hx",1633,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1645_onSaveError,"states.editors.StageEditorState","onSaveError",0x2c33ded8,"states.editors.StageEditorState.onSaveError","states/editors/StageEditorState.hx",1645,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1655_loadImage,"states.editors.StageEditorState","loadImage",0x2e94d101,"states.editors.StageEditorState.loadImage","states/editors/StageEditorState.hx",1655,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1681_onLoadComplete,"states.editors.StageEditorState","onLoadComplete",0xc97fd792,"states.editors.StageEditorState.onLoadComplete","states/editors/StageEditorState.hx",1681,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1669_onLoadComplete,"states.editors.StageEditorState","onLoadComplete",0xc97fd792,"states.editors.StageEditorState.onLoadComplete","states/editors/StageEditorState.hx",1669,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1739_onLoadComplete,"states.editors.StageEditorState","onLoadComplete",0xc97fd792,"states.editors.StageEditorState.onLoadComplete","states/editors/StageEditorState.hx",1739,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1735_onLoadComplete,"states.editors.StageEditorState","onLoadComplete",0xc97fd792,"states.editors.StageEditorState.onLoadComplete","states/editors/StageEditorState.hx",1735,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1763_onLoadComplete,"states.editors.StageEditorState","onLoadComplete",0xc97fd792,"states.editors.StageEditorState.onLoadComplete","states/editors/StageEditorState.hx",1763,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1727_onLoadComplete,"states.editors.StageEditorState","onLoadComplete",0xc97fd792,"states.editors.StageEditorState.onLoadComplete","states/editors/StageEditorState.hx",1727,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1783_tryLoadImage,"states.editors.StageEditorState","tryLoadImage",0x9a38d06e,"states.editors.StageEditorState.tryLoadImage","states/editors/StageEditorState.hx",1783,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1794_onLoadCancel,"states.editors.StageEditorState","onLoadCancel",0x546c2c13,"states.editors.StageEditorState.onLoadCancel","states/editors/StageEditorState.hx",1794,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1813_onLoadError,"states.editors.StageEditorState","onLoadError",0xb8be234f,"states.editors.StageEditorState.onLoadError","states/editors/StageEditorState.hx",1813,0xcafb7822)
HX_LOCAL_STACK_FRAME(_hx_pos_775c3ef8cb7e424a_1829_destroy,"states.editors.StageEditorState","destroy",0xd05b8fa6,"states.editors.StageEditorState.destroy","states/editors/StageEditorState.hx",1829,0xcafb7822)
namespace states{
namespace editors{

void StageEditorState_obj::__construct(::String __o_stageToLoad, ::Dynamic cachedJson){
            		::String stageToLoad = __o_stageToLoad;
            		if (::hx::IsNull(__o_stageToLoad)) stageToLoad = HX_("stage",be,6a,0b,84);
            	HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_29_new)
HXLINE(1654)		this->_makeNewSprite = null();
HXLINE(1482)		this->curFilters = (1 | 2);
HXLINE(1334)		this->outputTime = ((Float)0);
HXLINE( 127)		this->showSelectionQuad = true;
HXLINE(  64)		this->selectionSprites =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  62)		this->unsavedProgress = false;
HXLINE(  54)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE(  45)		this->stageSprites = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  32)		this->maxZoom = 2;
HXLINE(  31)		this->minZoom = ((Float)0.1);
HXLINE(  48)		this->lastLoadedStage = stageToLoad;
HXLINE(  49)		this->stageJson = cachedJson;
HXLINE(  50)		super::__construct();
            	}

Dynamic StageEditorState_obj::__CreateEmpty() { return new StageEditorState_obj; }

void *StageEditorState_obj::_hx_vtable = 0;

Dynamic StageEditorState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StageEditorState_obj > _hx_result = new StageEditorState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool StageEditorState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x53aaab8a) {
			if (inClassId<=(int)0x295c9e42) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x295c9e42;
			} else {
				return inClassId==(int)0x53aaab8a;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

static ::backend::ui::PsychUIEvent_obj _hx_states_editors_StageEditorState__hx_backend_ui_PsychUIEvent= {
	( void (::hx::Object::*)(::String, ::Dynamic))&::states::editors::StageEditorState_obj::UIEvent,
};

void *StageEditorState_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x768fb553: return &_hx_states_editors_StageEditorState__hx_backend_ui_PsychUIEvent;
	}
	return super::_hx_getInterface(inHash);
}

void StageEditorState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_66_create)
HXLINE(  67)		::backend::Paths_obj::clearStoredMemory();
HXLINE(  68)		::backend::Paths_obj::clearUnusedMemory();
HXLINE(  70)		this->camGame = this->initPsychCamera();
HXLINE(  71)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE(  72)		{
HXLINE(  72)			 ::flixel::FlxCamera _hx_tmp = this->camHUD;
HXDLIN(  72)			_hx_tmp->bgColor = (_hx_tmp->bgColor & 16777215);
HXDLIN(  72)			 ::flixel::FlxCamera _hx_tmp1 = this->camHUD;
HXDLIN(  72)			_hx_tmp1->bgColor = (_hx_tmp1->bgColor | 0);
            		}
HXLINE(  73)		::flixel::FlxG_obj::cameras->add(this->camHUD,false).StaticCast<  ::flixel::FlxCamera >();
HXLINE(  76)		::backend::DiscordClient_obj::changePresence(HX_("Stage Editor",0f,63,39,a5),(HX_("Stage: ",c4,70,1b,fb) + this->lastLoadedStage),null(),null(),null(),null());
HXLINE(  79)		if (::hx::IsNull( this->stageJson )) {
HXLINE(  79)			this->stageJson = ::backend::StageData_obj::getStageFile(this->lastLoadedStage);
            		}
HXLINE(  80)		::flixel::FlxG_obj::camera->follow(null(),::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),0);
HXLINE(  82)		this->loadJsonAssetDirectory();
HXLINE(  83)		::String _hx_tmp2;
HXDLIN(  83)		if (::hx::IsNotNull( this->stageJson->__Field(HX_("_editorMeta",31,60,20,9c),::hx::paccDynamic) )) {
HXLINE(  83)			_hx_tmp2 = ( (::String)( ::Dynamic(this->stageJson->__Field(HX_("_editorMeta",31,60,20,9c),::hx::paccDynamic))->__Field(HX_("gf",1f,5a,00,00),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(  83)			_hx_tmp2 = HX_("gf",1f,5a,00,00);
            		}
HXDLIN(  83)		this->gf =  ::objects::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),_hx_tmp2,null());
HXLINE(  84)		this->gf->set_visible(!(( (bool)(this->stageJson->__Field(HX_("hide_girlfriend",57,bd,d9,f9),::hx::paccDynamic)) )));
HXLINE(  85)		{
HXLINE(  85)			 ::flixel::math::FlxBasePoint this1 = this->gf->scrollFactor;
HXDLIN(  85)			this1->set_x(((Float)0.95));
HXDLIN(  85)			this1->set_y(((Float)0.95));
            		}
HXLINE(  86)		::String _hx_tmp3;
HXDLIN(  86)		if (::hx::IsNotNull( this->stageJson->__Field(HX_("_editorMeta",31,60,20,9c),::hx::paccDynamic) )) {
HXLINE(  86)			_hx_tmp3 = ( (::String)( ::Dynamic(this->stageJson->__Field(HX_("_editorMeta",31,60,20,9c),::hx::paccDynamic))->__Field(HX_("dad",47,36,4c,00),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(  86)			_hx_tmp3 = HX_("dad",47,36,4c,00);
            		}
HXDLIN(  86)		this->dad =  ::objects::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),_hx_tmp3,null());
HXLINE(  87)		::String _hx_tmp4;
HXDLIN(  87)		if (::hx::IsNotNull( this->stageJson->__Field(HX_("_editorMeta",31,60,20,9c),::hx::paccDynamic) )) {
HXLINE(  87)			_hx_tmp4 = ( (::String)( ::Dynamic(this->stageJson->__Field(HX_("_editorMeta",31,60,20,9c),::hx::paccDynamic))->__Field(HX_("boyfriend",6a,29,b8,e6),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(  87)			_hx_tmp4 = HX_("bf",c4,55,00,00);
            		}
HXDLIN(  87)		this->boyfriend =  ::objects::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),_hx_tmp4,true);
HXLINE(  89)		{
HXLINE(  90)			{
HXLINE(  91)				 ::flixel::FlxSprite spr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-16711936,null(),null());
HXLINE(  92)				spr->set_alpha(((Float)0.8));
HXLINE(  93)				this->selectionSprites->add(spr).StaticCast<  ::flixel::FlxSprite >();
            			}
HXLINE(  90)			{
HXLINE(  91)				 ::flixel::FlxSprite spr1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-16711936,null(),null());
HXLINE(  92)				spr1->set_alpha(((Float)0.8));
HXLINE(  93)				this->selectionSprites->add(spr1).StaticCast<  ::flixel::FlxSprite >();
            			}
HXLINE(  90)			{
HXLINE(  91)				 ::flixel::FlxSprite spr2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-16711936,null(),null());
HXLINE(  92)				spr2->set_alpha(((Float)0.8));
HXLINE(  93)				this->selectionSprites->add(spr2).StaticCast<  ::flixel::FlxSprite >();
            			}
HXLINE(  90)			{
HXLINE(  91)				 ::flixel::FlxSprite spr3 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-16711936,null(),null());
HXLINE(  92)				spr3->set_alpha(((Float)0.8));
HXLINE(  93)				this->selectionSprites->add(spr3).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
HXLINE(  96)		::flixel::FlxG_obj::camera->set_zoom(( (Float)(this->stageJson->__Field(HX_("defaultZoom",74,9c,b7,22),::hx::paccDynamic)) ));
HXLINE(  97)		this->repositionGirlfriend();
HXLINE(  98)		this->repositionDad();
HXLINE(  99)		this->repositionBoyfriend();
HXLINE( 100)		 ::flixel::math::FlxBasePoint point = this->focusOnTarget(HX_("boyfriend",6a,29,b8,e6));
HXLINE( 101)		{
HXLINE( 101)			 ::flixel::math::FlxBasePoint this2 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN( 101)			Float y = (point->y - (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )));
HXDLIN( 101)			this2->set_x((point->x - (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
HXDLIN( 101)			this2->set_y(y);
            		}
HXLINE( 103)		this->screenUI();
HXLINE( 104)		this->spriteCreatePopup();
HXLINE( 105)		this->editorUI();
HXLINE( 107)		this->add(this->camFollow);
HXLINE( 108)		this->updateSpriteList();
HXLINE( 110)		this->addHelpScreen();
HXLINE( 111)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 112)		this->animationEditor =  ::states::editors::StageEditorAnimationSubstate_obj::__alloc( HX_CTX );
HXLINE( 114)		this->super::create();
            	}


void StageEditorState_obj::loadJsonAssetDirectory(){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_118_loadJsonAssetDirectory)
HXLINE( 119)		::String directory = HX_("shared",a5,5e,2b,1d);
HXLINE( 120)		::String weekDir = ( (::String)(this->stageJson->__Field(HX_("directory",6d,f2,44,10),::hx::paccDynamic)) );
HXLINE( 121)		bool _hx_tmp;
HXDLIN( 121)		bool _hx_tmp1;
HXDLIN( 121)		if (::hx::IsNotNull( weekDir )) {
HXLINE( 121)			_hx_tmp1 = (weekDir.length > 0);
            		}
            		else {
HXLINE( 121)			_hx_tmp1 = false;
            		}
HXDLIN( 121)		if (_hx_tmp1) {
HXLINE( 121)			_hx_tmp = (weekDir != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 121)			_hx_tmp = false;
            		}
HXDLIN( 121)		if (_hx_tmp) {
HXLINE( 121)			directory = weekDir;
            		}
HXLINE( 123)		::backend::Paths_obj::setCurrentLevel(directory);
HXLINE( 124)		::haxe::Log_obj::trace((HX_("Setting asset folder to ",b3,9c,5c,a5) + directory),::hx::SourceInfo(HX_("source/states/editors/StageEditorState.hx",16,7c,21,9d),124,HX_("states.editors.StageEditorState",1a,37,b1,81),HX_("loadJsonAssetDirectory",6b,36,11,9e)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,loadJsonAssetDirectory,(void))

void StageEditorState_obj::addHelpScreen(){
            	HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_129_addHelpScreen)
HXLINE( 133)		::String btn = HX_("F2",2c,3d,00,00);
HXLINE( 136)		::Array< ::String > str = ::Array_obj< ::String >::__new(9)->init(0,HX_("E/Q - Camera Zoom In/Out",a2,41,5f,1d))->init(1,HX_("J/K/L/I - Move Camera",be,82,c9,cf))->init(2,HX_("R - Reset Camera Zoom",fc,06,e0,e9))->init(3,HX_("Arrow Keys/Mouse & Right Click - Move Object",a6,ef,7e,5c))->init(4,HX_("",00,00,00,00))->init(5,((HX_("",00,00,00,00) + btn) + HX_(" - Toggle HUD",5e,3b,6f,1b)))->init(6,HX_("F12 - Toggle Selection Rectangle",db,e0,eb,a1))->init(7,HX_("Hold Shift - Move Objects and Camera 4x faster",fc,d6,5f,53))->init(8,HX_("Hold Control - Move Objects pixel-by-pixel and Camera 4x slower",fd,34,5d,c5));
HXLINE( 147)		this->helpBg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-16777216,null(),null());
HXLINE( 148)		{
HXLINE( 148)			 ::flixel::math::FlxBasePoint this1 = this->helpBg->scale;
HXDLIN( 148)			Float y = ( (Float)(::flixel::FlxG_obj::height) );
HXDLIN( 148)			this1->set_x(( (Float)(::flixel::FlxG_obj::width) ));
HXDLIN( 148)			this1->set_y(y);
            		}
HXLINE( 149)		this->helpBg->updateHitbox();
HXLINE( 150)		this->helpBg->set_alpha(((Float)0.6));
HXLINE( 151)		this->helpBg->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 152)		 ::flixel::FlxSprite _hx_tmp = this->helpBg;
HXDLIN( 152)		_hx_tmp->set_active(this->helpBg->set_visible(false));
HXLINE( 153)		this->add(this->helpBg);
HXLINE( 155)		this->helpTexts =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 156)		this->helpTexts->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 157)		{
HXLINE( 157)			int _g_current = 0;
HXDLIN( 157)			::Array< ::String > _g_array = str;
HXDLIN( 157)			while((_g_current < _g_array->length)){
HXLINE( 157)				::String _g_value = _g_array->__get(_g_current);
HXDLIN( 157)				_g_current = (_g_current + 1);
HXDLIN( 157)				int _g_key = (_g_current - 1);
HXDLIN( 157)				int i = _g_key;
HXDLIN( 157)				::String txt = _g_value;
HXLINE( 158)				{
HXLINE( 159)					if ((txt.length < 1)) {
HXLINE( 159)						continue;
            					}
HXLINE( 161)					 ::flixel::text::FlxText helpText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,680,txt,16,null());
HXLINE( 162)					helpText->setFormat(null(),16,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_FAST_dyn(),-16777216,null());
HXLINE( 163)					helpText->set_borderColor(-16777216);
HXLINE( 164)					{
HXLINE( 164)						 ::flixel::math::FlxBasePoint this2 = helpText->scrollFactor;
HXDLIN( 164)						this2->set_x(( (Float)(0) ));
HXDLIN( 164)						this2->set_y(( (Float)(0) ));
            					}
HXLINE( 165)					helpText->set_borderSize(( (Float)(1) ));
HXLINE( 166)					{
HXLINE( 166)						int axes = 17;
HXDLIN( 166)						bool _hx_tmp1;
HXDLIN( 166)						if ((axes != 1)) {
HXLINE( 166)							_hx_tmp1 = (axes == 17);
            						}
            						else {
HXLINE( 166)							_hx_tmp1 = true;
            						}
HXDLIN( 166)						if (_hx_tmp1) {
HXLINE( 166)							int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN( 166)							helpText->set_x(((( (Float)(_hx_tmp2) ) - helpText->get_width()) / ( (Float)(2) )));
            						}
HXDLIN( 166)						bool _hx_tmp3;
HXDLIN( 166)						if ((axes != 16)) {
HXLINE( 166)							_hx_tmp3 = (axes == 17);
            						}
            						else {
HXLINE( 166)							_hx_tmp3 = true;
            						}
HXDLIN( 166)						if (_hx_tmp3) {
HXLINE( 166)							int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN( 166)							helpText->set_y(((( (Float)(_hx_tmp4) ) - helpText->get_height()) / ( (Float)(2) )));
            						}
            					}
HXLINE( 167)					this->add(helpText);
HXLINE( 168)					helpText->set_y((helpText->y + (((( (Float)(i) ) - (( (Float)(str->length) ) / ( (Float)(2) ))) * ( (Float)(32) )) + 16)));
HXLINE( 169)					helpText->set_active(false);
HXLINE( 170)					this->helpTexts->add(helpText).StaticCast<  ::flixel::FlxSprite >();
            				}
            			}
            		}
HXLINE( 172)		 ::flixel::group::FlxTypedSpriteGroup _hx_tmp5 = this->helpTexts;
HXDLIN( 172)		_hx_tmp5->set_active(this->helpTexts->set_visible(false));
HXLINE( 173)		this->add(this->helpTexts);
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,addHelpScreen,(void))

void StageEditorState_obj::updateSpriteList(){
            	HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_177_updateSpriteList)
HXLINE( 178)		{
HXLINE( 178)			int _g = 0;
HXDLIN( 178)			::Array< ::Dynamic> _g1 = this->stageSprites;
HXDLIN( 178)			while((_g < _g1->length)){
HXLINE( 178)				 ::states::editors::StageEditorMetaSprite spr = _g1->__get(_g).StaticCast<  ::states::editors::StageEditorMetaSprite >();
HXDLIN( 178)				_g = (_g + 1);
HXLINE( 179)				bool _hx_tmp;
HXDLIN( 179)				if (::hx::IsNotNull( spr )) {
HXLINE( 179)					_hx_tmp = !(::backend::StageData_obj::reservedNames->contains(spr->type));
            				}
            				else {
HXLINE( 179)					_hx_tmp = false;
            				}
HXDLIN( 179)				if (_hx_tmp) {
HXLINE( 180)					spr->sprite = ( ( ::flixel::FlxSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(spr->sprite)) );
            				}
            			}
            		}
HXLINE( 182)		this->stageSprites = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 183)		 ::haxe::ds::StringMap list =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 184)		bool _hx_tmp1;
HXDLIN( 184)		if (::hx::IsNotNull( this->stageJson->__Field(HX_("objects",d4,68,4f,82),::hx::paccDynamic) )) {
HXLINE( 184)			_hx_tmp1 = (( (::cpp::VirtualArray)(this->stageJson->__Field(HX_("objects",d4,68,4f,82),::hx::paccDynamic)) )->get_length() > 0);
            		}
            		else {
HXLINE( 184)			_hx_tmp1 = false;
            		}
HXDLIN( 184)		if (_hx_tmp1) {
HXLINE( 186)			list = ::backend::StageData_obj::addObjectsToState(( (::cpp::VirtualArray)(this->stageJson->__Field(HX_("objects",d4,68,4f,82),::hx::paccDynamic)) ),this->gf,this->dad,this->boyfriend,null(),true);
HXLINE( 187)			{
HXLINE( 187)				::Dynamic map = list;
HXDLIN( 187)				::Dynamic _g_map = map;
HXDLIN( 187)				 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 187)				while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 187)					::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 187)					 ::flixel::FlxSprite _g_value = ( ( ::flixel::FlxSprite)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN( 187)					::String _g_key = key;
HXDLIN( 187)					::String key1 = _g_key;
HXDLIN( 187)					 ::flixel::FlxSprite spr1 = _g_value;
HXLINE( 188)					this->stageSprites[spr1->ID] =  ::states::editors::StageEditorMetaSprite_obj::__alloc( HX_CTX , ::Dynamic(this->stageJson->__Field(HX_("objects",d4,68,4f,82),::hx::paccDynamic))->__GetItem(spr1->ID),spr1);
            				}
            			}
            		}
HXLINE( 194)		{
HXLINE( 194)			{
HXLINE( 194)				::String character = HX_("gf",1f,5a,00,00);
HXLINE( 195)				if (!(list->exists(character))) {
HXLINE( 196)					::Array< ::Dynamic> _hx_tmp2 = this->stageSprites;
HXDLIN( 196)					 ::Dynamic _hx_tmp3 = ::Reflect_obj::field(::hx::ObjectPtr<OBJ_>(this),character);
HXDLIN( 196)					_hx_tmp2->push( ::states::editors::StageEditorMetaSprite_obj::__alloc( HX_CTX , ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("type",ba,f2,08,4d),character)),( ( ::flixel::FlxSprite)(_hx_tmp3) )));
            				}
            			}
HXLINE( 194)			{
HXLINE( 194)				::String character1 = HX_("dad",47,36,4c,00);
HXLINE( 195)				if (!(list->exists(character1))) {
HXLINE( 196)					::Array< ::Dynamic> _hx_tmp4 = this->stageSprites;
HXDLIN( 196)					 ::Dynamic _hx_tmp5 = ::Reflect_obj::field(::hx::ObjectPtr<OBJ_>(this),character1);
HXDLIN( 196)					_hx_tmp4->push( ::states::editors::StageEditorMetaSprite_obj::__alloc( HX_CTX , ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("type",ba,f2,08,4d),character1)),( ( ::flixel::FlxSprite)(_hx_tmp5) )));
            				}
            			}
HXLINE( 194)			{
HXLINE( 194)				::String character2 = HX_("boyfriend",6a,29,b8,e6);
HXLINE( 195)				if (!(list->exists(character2))) {
HXLINE( 196)					::Array< ::Dynamic> _hx_tmp6 = this->stageSprites;
HXDLIN( 196)					 ::Dynamic _hx_tmp7 = ::Reflect_obj::field(::hx::ObjectPtr<OBJ_>(this),character2);
HXDLIN( 196)					_hx_tmp6->push( ::states::editors::StageEditorMetaSprite_obj::__alloc( HX_CTX , ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("type",ba,f2,08,4d),character2)),( ( ::flixel::FlxSprite)(_hx_tmp7) )));
            				}
            			}
            		}
HXLINE( 198)		this->updateSpriteListRadio();
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,updateSpriteList,(void))

void StageEditorState_obj::screenUI(){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::states::editors::StageEditorState,_gthis,::Array< ::Dynamic>,lowQualityCheckbox,::Array< ::Dynamic>,highQualityCheckbox) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_209_screenUI)
HXLINE( 210)			_gthis->curFilters = 0;
HXLINE( 211)			if (lowQualityCheckbox->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->checked) {
HXLINE( 211)				 ::states::editors::StageEditorState _gthis1 = _gthis;
HXDLIN( 211)				_gthis1->curFilters = (_gthis1->curFilters | 1);
            			}
HXLINE( 212)			if (highQualityCheckbox->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->checked) {
HXLINE( 212)				 ::states::editors::StageEditorState _gthis2 = _gthis;
HXDLIN( 212)				_gthis2->curFilters = (_gthis2->curFilters | 2);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_244_screenUI)
HXLINE( 246)			 ::flixel::math::FlxBasePoint point = _gthis->focusOnTarget(_gthis->focusRadioGroup->labels->__get(_gthis->focusRadioGroup->checked));
HXLINE( 247)			_gthis->camFollow->setPosition(point->x,point->y);
HXLINE( 248)			::flixel::FlxG_obj::camera->target = _gthis->camFollow;
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_205_screenUI)
HXDLIN( 205)		 ::states::editors::StageEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 206)		::Array< ::Dynamic> lowQualityCheckbox = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 207)		::Array< ::Dynamic> highQualityCheckbox = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 208)		 ::Dynamic visibilityFilterUpdate =  ::Dynamic(new _hx_Closure_0(_gthis,lowQualityCheckbox,highQualityCheckbox));
HXLINE( 215)		this->spriteList_box =  ::backend::ui::PsychUIBox_obj::__alloc( HX_CTX ,( (Float)(25) ),( (Float)(40) ),250,200,::Array_obj< ::String >::fromData( _hx_array_data_81b1371a_12,1));
HXLINE( 216)		{
HXLINE( 216)			 ::flixel::math::FlxBasePoint this1 = this->spriteList_box->scrollFactor;
HXDLIN( 216)			this1->set_x(( (Float)(0) ));
HXDLIN( 216)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 217)		this->spriteList_box->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 218)		this->add(this->spriteList_box);
HXLINE( 219)		this->addSpriteListBox();
HXLINE( 221)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(::flixel::FlxG_obj::height - 60),null())->makeGraphic(1,1,-16777216,null(),null());
HXLINE( 222)		bg->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 223)		bg->set_alpha(((Float)0.4));
HXLINE( 224)		{
HXLINE( 224)			 ::flixel::math::FlxBasePoint this2 = bg->scale;
HXDLIN( 224)			Float y = (( (Float)(::flixel::FlxG_obj::height) ) - bg->y);
HXDLIN( 224)			this2->set_x(( (Float)(::flixel::FlxG_obj::width) ));
HXDLIN( 224)			this2->set_y(y);
            		}
HXLINE( 225)		bg->updateHitbox();
HXLINE( 226)		this->add(bg);
HXLINE( 228)		 ::flixel::text::FlxText tipText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,(::flixel::FlxG_obj::height - 44),300,HX_("Press F1 for Help",b0,ec,b9,d4),20,null());
HXLINE( 229)		tipText->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 230)		tipText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 231)		{
HXLINE( 231)			 ::flixel::math::FlxBasePoint this3 = tipText->scrollFactor;
HXDLIN( 231)			this3->set_x(( (Float)(0) ));
HXDLIN( 231)			this3->set_y(( (Float)(0) ));
            		}
HXLINE( 232)		{
HXLINE( 232)			int axes = 1;
HXDLIN( 232)			bool _hx_tmp;
HXDLIN( 232)			if ((axes != 1)) {
HXLINE( 232)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE( 232)				_hx_tmp = true;
            			}
HXDLIN( 232)			if (_hx_tmp) {
HXLINE( 232)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 232)				tipText->set_x(((( (Float)(_hx_tmp1) ) - tipText->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 232)			bool _hx_tmp2;
HXDLIN( 232)			if ((axes != 16)) {
HXLINE( 232)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE( 232)				_hx_tmp2 = true;
            			}
HXDLIN( 232)			if (_hx_tmp2) {
HXLINE( 232)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 232)				tipText->set_y(((( (Float)(_hx_tmp3) ) - tipText->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 233)		tipText->set_active(false);
HXLINE( 234)		this->add(tipText);
HXLINE( 236)		 ::flixel::text::FlxText targetTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,30,(::flixel::FlxG_obj::height - 52),300,HX_("Camera Target",6c,97,cc,70),16,null());
HXLINE( 237)		targetTxt->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 238)		targetTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 239)		{
HXLINE( 239)			 ::flixel::math::FlxBasePoint this4 = targetTxt->scrollFactor;
HXDLIN( 239)			this4->set_x(( (Float)(0) ));
HXDLIN( 239)			this4->set_y(( (Float)(0) ));
            		}
HXLINE( 240)		targetTxt->set_active(false);
HXLINE( 241)		this->add(targetTxt);
HXLINE( 243)		this->focusRadioGroup =  ::backend::ui::PsychUIRadioGroup_obj::__alloc( HX_CTX ,targetTxt->x,( (Float)((::flixel::FlxG_obj::height - 24)) ),::Array_obj< ::String >::fromData( _hx_array_data_81b1371a_13,3),10,0,true,null());
HXLINE( 244)		this->focusRadioGroup->onClick =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE( 250)		this->focusRadioGroup->radios->__get(0).StaticCast<  ::backend::ui::PsychUIRadioItem >()->set_label(HX_("Opponent",bd,75,6a,d2));
HXLINE( 251)		this->focusRadioGroup->radios->__get(1).StaticCast<  ::backend::ui::PsychUIRadioItem >()->set_label(HX_("Boyfriend",4a,09,8b,88));
HXLINE( 252)		this->focusRadioGroup->radios->__get(2).StaticCast<  ::backend::ui::PsychUIRadioItem >()->set_label(HX_("Girlfriend",da,95,f9,8e));
HXLINE( 254)		{
HXLINE( 254)			int _g = 0;
HXDLIN( 254)			::Array< ::Dynamic> _g1 = this->focusRadioGroup->radios;
HXDLIN( 254)			while((_g < _g1->length)){
HXLINE( 254)				 ::backend::ui::PsychUIRadioItem radio = _g1->__get(_g).StaticCast<  ::backend::ui::PsychUIRadioItem >();
HXDLIN( 254)				_g = (_g + 1);
HXLINE( 255)				radio->text->set_size(11);
            			}
            		}
HXLINE( 257)		this->focusRadioGroup->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 258)		this->add(this->focusRadioGroup);
HXLINE( 260)		lowQualityCheckbox[0] =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)((::flixel::FlxG_obj::width - 240)) ),( (Float)((::flixel::FlxG_obj::height - 36)) ),HX_("Can see Low Quality Sprites?",7b,00,83,55),90,null());
HXLINE( 261)		lowQualityCheckbox->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 262)		lowQualityCheckbox->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->onClick = visibilityFilterUpdate;
HXLINE( 263)		lowQualityCheckbox->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->set_checked(false);
HXLINE( 264)		this->add(lowQualityCheckbox->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >());
HXLINE( 266)		highQualityCheckbox[0] =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)((::flixel::FlxG_obj::width - 120)) ),( (Float)((::flixel::FlxG_obj::height - 36)) ),HX_("Can see High Quality Sprites?",53,fb,69,2b),90,null());
HXLINE( 267)		highQualityCheckbox->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 268)		highQualityCheckbox->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->onClick = visibilityFilterUpdate;
HXLINE( 269)		highQualityCheckbox->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >()->set_checked(true);
HXLINE( 270)		this->add(highQualityCheckbox->__get(0).StaticCast<  ::backend::ui::PsychUICheckBox >());
HXLINE( 271)		visibilityFilterUpdate();
HXLINE( 273)		this->posTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,50,500,HX_("X: 0\nY: 0",69,06,3c,d9),24,null());
HXLINE( 274)		 ::flixel::text::FlxText _hx_tmp4 = this->posTxt;
HXDLIN( 274)		::String key = (HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82));
HXDLIN( 274)		::Dynamic this5 = ::backend::Language_obj::phrases;
HXDLIN( 274)		::String str = ( ( ::haxe::ds::StringMap)(this5) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXDLIN( 274)		if (::hx::IsNotNull( str )) {
HXLINE( 274)			key = str;
            		}
HXDLIN( 274)		::String folderKey = key;
HXDLIN( 274)		::String file = ::backend::Paths_obj::modFolders(folderKey);
HXDLIN( 274)		::String _hx_tmp5;
HXDLIN( 274)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 274)			_hx_tmp5 = file;
            		}
            		else {
HXLINE( 274)			_hx_tmp5 = (HX_("assets/",4c,2a,dc,36) + folderKey);
            		}
HXDLIN( 274)		_hx_tmp4->setFormat(_hx_tmp5,24,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 275)		this->posTxt->set_borderSize(( (Float)(2) ));
HXLINE( 276)		this->posTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 277)		{
HXLINE( 277)			 ::flixel::text::FlxText _this = this->posTxt;
HXDLIN( 277)			int axes1 = 1;
HXDLIN( 277)			bool _hx_tmp6;
HXDLIN( 277)			if ((axes1 != 1)) {
HXLINE( 277)				_hx_tmp6 = (axes1 == 17);
            			}
            			else {
HXLINE( 277)				_hx_tmp6 = true;
            			}
HXDLIN( 277)			if (_hx_tmp6) {
HXLINE( 277)				int _hx_tmp7 = ::flixel::FlxG_obj::width;
HXDLIN( 277)				_this->set_x(((( (Float)(_hx_tmp7) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 277)			bool _hx_tmp8;
HXDLIN( 277)			if ((axes1 != 16)) {
HXLINE( 277)				_hx_tmp8 = (axes1 == 17);
            			}
            			else {
HXLINE( 277)				_hx_tmp8 = true;
            			}
HXDLIN( 277)			if (_hx_tmp8) {
HXLINE( 277)				int _hx_tmp9 = ::flixel::FlxG_obj::height;
HXDLIN( 277)				_this->set_y(((( (Float)(_hx_tmp9) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 278)		this->posTxt->set_visible(false);
HXLINE( 279)		this->add(this->posTxt);
HXLINE( 281)		this->outputTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,800,HX_("",00,00,00,00),24,null());
HXLINE( 282)		this->outputTxt->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 283)		this->outputTxt->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_FAST_dyn());
HXLINE( 284)		this->outputTxt->set_borderSize(( (Float)(1) ));
HXLINE( 285)		this->outputTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 286)		{
HXLINE( 286)			 ::flixel::text::FlxText _this1 = this->outputTxt;
HXDLIN( 286)			int axes2 = 17;
HXDLIN( 286)			bool _hx_tmp10;
HXDLIN( 286)			if ((axes2 != 1)) {
HXLINE( 286)				_hx_tmp10 = (axes2 == 17);
            			}
            			else {
HXLINE( 286)				_hx_tmp10 = true;
            			}
HXDLIN( 286)			if (_hx_tmp10) {
HXLINE( 286)				int _hx_tmp11 = ::flixel::FlxG_obj::width;
HXDLIN( 286)				_this1->set_x(((( (Float)(_hx_tmp11) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 286)			bool _hx_tmp12;
HXDLIN( 286)			if ((axes2 != 16)) {
HXLINE( 286)				_hx_tmp12 = (axes2 == 17);
            			}
            			else {
HXLINE( 286)				_hx_tmp12 = true;
            			}
HXDLIN( 286)			if (_hx_tmp12) {
HXLINE( 286)				int _hx_tmp13 = ::flixel::FlxG_obj::height;
HXDLIN( 286)				_this1->set_y(((( (Float)(_hx_tmp13) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 287)		this->outputTxt->set_alpha(( (Float)(0) ));
HXLINE( 288)		this->add(this->outputTxt);
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,screenUI,(void))

void StageEditorState_obj::addSpriteListBox(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_296_addSpriteListBox)
HXLINE( 297)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 297)			::String _hx_tmp1 = (HX_("Selected sprite: ",30,ec,91,04) + _gthis->spriteListRadioGroup->checkedRadio->get_label());
HXDLIN( 297)			_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("source/states/editors/StageEditorState.hx",16,7c,21,9d),297,HX_("states.editors.StageEditorState",1a,37,b1,81),HX_("addSpriteListBox",e7,cb,14,58)));
HXLINE( 298)			_gthis->updateSelectedUI();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_305_addSpriteListBox)
HXLINE( 306)			int selected = _gthis->spriteListRadioGroup->checked;
HXLINE( 307)			if ((selected < 0)) {
HXLINE( 307)				return;
            			}
HXLINE( 309)			int selected1 = ((_gthis->spriteListRadioGroup->labels->length - selected) - 1);
HXLINE( 310)			 ::states::editors::StageEditorMetaSprite spr = _gthis->stageSprites->__get(selected1).StaticCast<  ::states::editors::StageEditorMetaSprite >();
HXLINE( 311)			if (::hx::IsNull( spr )) {
HXLINE( 311)				return;
            			}
HXLINE( 313)			int newSel = ::Std_obj::_hx_int(::Math_obj::min(( (Float)((_gthis->stageSprites->length - 1)) ),( (Float)((selected1 + 1)) )));
HXLINE( 314)			_gthis->stageSprites->remove(spr);
HXLINE( 315)			_gthis->stageSprites->insert(newSel,spr);
HXLINE( 317)			_gthis->updateSpriteListRadio();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_323_addSpriteListBox)
HXLINE( 324)			int selected = _gthis->spriteListRadioGroup->checked;
HXLINE( 325)			if ((selected < 0)) {
HXLINE( 325)				return;
            			}
HXLINE( 327)			int selected1 = ((_gthis->spriteListRadioGroup->labels->length - selected) - 1);
HXLINE( 328)			 ::states::editors::StageEditorMetaSprite spr = _gthis->stageSprites->__get(selected1).StaticCast<  ::states::editors::StageEditorMetaSprite >();
HXLINE( 329)			if (::hx::IsNull( spr )) {
HXLINE( 329)				return;
            			}
HXLINE( 331)			int newSel = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),( (Float)((selected1 - 1)) )));
HXLINE( 332)			_gthis->stageSprites->remove(spr);
HXLINE( 333)			_gthis->stageSprites->insert(newSel,spr);
HXLINE( 335)			_gthis->updateSpriteListRadio();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_340_addSpriteListBox)
HXLINE( 340)			 ::flixel::group::FlxTypedSpriteGroup _gthis1 = _gthis->createPopup;
HXDLIN( 340)			_gthis1->set_visible(_gthis->createPopup->set_active(true));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_347_addSpriteListBox)
HXLINE( 348)			int selected = _gthis->spriteListRadioGroup->checked;
HXLINE( 349)			if ((selected < 0)) {
HXLINE( 349)				return;
            			}
HXLINE( 351)			int selected1 = ((_gthis->spriteListRadioGroup->labels->length - selected) - 1);
HXLINE( 352)			 ::states::editors::StageEditorMetaSprite spr = _gthis->stageSprites->__get(selected1).StaticCast<  ::states::editors::StageEditorMetaSprite >();
HXLINE( 353)			bool buttonDuplicate;
HXDLIN( 353)			if (::hx::IsNotNull( spr )) {
HXLINE( 353)				buttonDuplicate = ::backend::StageData_obj::reservedNames->contains(spr->type);
            			}
            			else {
HXLINE( 353)				buttonDuplicate = true;
            			}
HXDLIN( 353)			if (buttonDuplicate) {
HXLINE( 353)				return;
            			}
HXLINE( 355)			 ::psychlua::ModchartSprite copiedSpr =  ::psychlua::ModchartSprite_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 356)			 ::states::editors::StageEditorMetaSprite copiedMeta =  ::states::editors::StageEditorMetaSprite_obj::__alloc( HX_CTX ,null(),copiedSpr);
HXLINE( 357)			{
HXLINE( 357)				int _g = 0;
HXDLIN( 357)				::Array< ::String > _g1 = ::Reflect_obj::fields(spr);
HXDLIN( 357)				while((_g < _g1->length)){
HXLINE( 357)					::String field = _g1->__get(_g);
HXDLIN( 357)					_g = (_g + 1);
HXLINE( 359)					if ((field == HX_("sprite",05,dc,95,c3))) {
HXLINE( 359)						continue;
            					}
HXLINE( 361)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 363)						 ::Dynamic fld = ::Reflect_obj::getProperty(spr,field);
HXLINE( 364)						if (::Std_obj::isOfType(fld,::hx::ArrayBase::__mClass)) {
HXLINE( 366)							::cpp::VirtualArray arr = ( (::cpp::VirtualArray)(fld) );
HXLINE( 367)							arr = arr->copy();
HXLINE( 368)							if (::hx::IsNotNull( arr )) {
HXLINE( 370)								int _g_current = 0;
HXDLIN( 370)								::cpp::VirtualArray _g_array = arr;
HXDLIN( 370)								while((_g_current < _g_array->get_length())){
HXLINE( 370)									 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN( 370)									_g_current = (_g_current + 1);
HXDLIN( 370)									int _g_key = (_g_current - 1);
HXDLIN( 370)									int k = _g_key;
HXDLIN( 370)									 ::Dynamic v = _g_value;
HXLINE( 371)									{
HXLINE( 372)										::Array< int > indices = ( (::Array< int >)(v->__Field(HX_("indices",27,47,54,e3),::hx::paccDynamic)) );
HXLINE( 373)										if (::hx::IsNotNull( indices )) {
HXLINE( 373)											indices = indices->copy();
            										}
HXLINE( 375)										::Array< int > offs = ( (::Array< int >)(v->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic)) );
HXLINE( 376)										if (::hx::IsNotNull( offs )) {
HXLINE( 376)											offs = offs->copy();
            										}
HXLINE( 378)										fld->__SetItem(k, ::Dynamic(::hx::Anon_obj::Create(6)
            											->setFixed(0,HX_("offsets",80,09,65,d7),offs)
            											->setFixed(1,HX_("indices",27,47,54,e3),indices)
            											->setFixed(2,HX_("fps",e9,c7,4d,00), ::Dynamic(v->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)))
            											->setFixed(3,HX_("anim",11,86,71,40), ::Dynamic(v->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)))
            											->setFixed(4,HX_("loop",64,a6,b7,47), ::Dynamic(v->__Field(HX_("loop",64,a6,b7,47),::hx::paccDynamic)))
            											->setFixed(5,HX_("name",4b,72,ff,48), ::Dynamic(v->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)))));
            									}
            								}
            							}
HXLINE( 388)							fld = arr;
            						}
HXLINE( 391)						::Reflect_obj::setProperty(copiedMeta,field,fld);
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g2 = _hx_e;
HXLINE( 394)							{
HXLINE( 394)								null();
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
HXLINE( 400)			if (::hx::IsNotNull( copiedMeta->animations )) {
HXLINE( 402)				int _g_current1 = 0;
HXDLIN( 402)				::Array< ::Dynamic> _g_array1 = copiedMeta->animations;
HXDLIN( 402)				while((_g_current1 < _g_array1->length)){
HXLINE( 402)					 ::Dynamic _g_value1 = _g_array1->__get(_g_current1);
HXDLIN( 402)					_g_current1 = (_g_current1 + 1);
HXDLIN( 402)					int _g_key1 = (_g_current1 - 1);
HXDLIN( 402)					int num = _g_key1;
HXDLIN( 402)					 ::Dynamic anim = _g_value1;
HXLINE( 403)					{
HXLINE( 404)						bool buttonDuplicate1;
HXDLIN( 404)						if (::hx::IsNotNull( anim )) {
HXLINE( 404)							buttonDuplicate1 = ::hx::IsNull( anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic) );
            						}
            						else {
HXLINE( 404)							buttonDuplicate1 = true;
            						}
HXDLIN( 404)						if (buttonDuplicate1) {
HXLINE( 404)							continue;
            						}
HXLINE( 406)						bool buttonDuplicate2;
HXDLIN( 406)						if (::hx::IsNotNull( anim->__Field(HX_("indices",27,47,54,e3),::hx::paccDynamic) )) {
HXLINE( 406)							buttonDuplicate2 = (( (::Array< int >)(anim->__Field(HX_("indices",27,47,54,e3),::hx::paccDynamic)) )->length > 0);
            						}
            						else {
HXLINE( 406)							buttonDuplicate2 = false;
            						}
HXDLIN( 406)						if (buttonDuplicate2) {
HXLINE( 407)							copiedSpr->animation->addByIndices(( (::String)(anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),( (::String)(anim->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ),( (::Array< int >)(anim->__Field(HX_("indices",27,47,54,e3),::hx::paccDynamic)) ),HX_("",00,00,00,00),anim->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic),anim->__Field(HX_("loop",64,a6,b7,47),::hx::paccDynamic),null(),null());
            						}
            						else {
HXLINE( 409)							copiedSpr->animation->addByPrefix(( (::String)(anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),( (::String)(anim->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ),anim->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic),anim->__Field(HX_("loop",64,a6,b7,47),::hx::paccDynamic),null(),null());
            						}
HXLINE( 411)						bool buttonDuplicate3;
HXDLIN( 411)						if (::hx::IsNotNull( anim->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic) )) {
HXLINE( 411)							buttonDuplicate3 = (( (::Array< int >)(anim->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic)) )->length > 1);
            						}
            						else {
HXLINE( 411)							buttonDuplicate3 = false;
            						}
HXDLIN( 411)						if (buttonDuplicate3) {
HXLINE( 412)							copiedSpr->addOffset(( (::String)(anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),( (Float)( ::Dynamic(anim->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic))->__GetItem(0)) ),( (Float)( ::Dynamic(anim->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic))->__GetItem(1)) ));
            						}
HXLINE( 414)						bool buttonDuplicate4;
HXDLIN( 414)						if (::hx::IsNotNull( copiedSpr->animation->_curAnim )) {
HXLINE( 414)							buttonDuplicate4 = ::hx::IsEq( copiedMeta->firstAnimation,anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic) );
            						}
            						else {
HXLINE( 414)							buttonDuplicate4 = true;
            						}
HXDLIN( 414)						if (buttonDuplicate4) {
HXLINE( 415)							copiedSpr->playAnim(( (::String)(anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),true,null(),null());
            						}
            					}
            				}
            			}
HXLINE( 418)			copiedMeta->setScale(copiedMeta->scale->__get(0),copiedMeta->scale->__get(1));
HXLINE( 419)			copiedMeta->setScrollFactor(copiedMeta->scroll->__get(0),copiedMeta->scroll->__get(1));
HXLINE( 420)			copiedMeta->name = _gthis->findUnoccupiedName(((HX_("",00,00,00,00) + copiedMeta->name) + HX_("_copy",94,d7,d5,f4)));
HXLINE( 421)			_gthis->insertMeta(copiedMeta,1);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_429_addSpriteListBox)
HXLINE( 430)			int selected = _gthis->spriteListRadioGroup->checked;
HXLINE( 431)			if ((selected < 0)) {
HXLINE( 431)				return;
            			}
HXLINE( 433)			int selected1 = ((_gthis->spriteListRadioGroup->labels->length - selected) - 1);
HXLINE( 434)			 ::states::editors::StageEditorMetaSprite spr = _gthis->stageSprites->__get(selected1).StaticCast<  ::states::editors::StageEditorMetaSprite >();
HXLINE( 435)			bool buttonDelete;
HXDLIN( 435)			if (::hx::IsNotNull( spr )) {
HXLINE( 435)				buttonDelete = ::backend::StageData_obj::reservedNames->contains(spr->type);
            			}
            			else {
HXLINE( 435)				buttonDelete = true;
            			}
HXDLIN( 435)			if (buttonDelete) {
HXLINE( 435)				return;
            			}
HXLINE( 437)			_gthis->stageSprites->remove(spr);
HXLINE( 438)			spr->sprite = ( ( ::flixel::FlxSprite)(::flixel::util::FlxDestroyUtil_obj::destroy(spr->sprite)) );
HXLINE( 440)			_gthis->updateSpriteListRadio();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_292_addSpriteListBox)
HXDLIN( 292)		 ::states::editors::StageEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 293)		 ::flixel::group::FlxTypedSpriteGroup tab_group = this->spriteList_box->getTab(HX_("Sprite List",59,e2,06,27))->menu;
HXLINE( 294)		this->spriteListRadioGroup =  ::backend::ui::PsychUIRadioGroup_obj::__alloc( HX_CTX ,( (Float)(10) ),( (Float)(10) ),::Array_obj< ::String >::__new(0),25,18,false,200);
HXLINE( 295)		this->spriteListRadioGroup->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 296)		this->spriteListRadioGroup->onClick =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE( 300)		tab_group->add(this->spriteListRadioGroup).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 302)		Float buttonX = this->spriteList_box->x;
HXDLIN( 302)		Float buttonX1 = ((buttonX + this->spriteList_box->get_width()) - ( (Float)(10) ));
HXLINE( 303)		Float buttonY = (this->spriteListRadioGroup->y - ( (Float)(30) ));
HXLINE( 304)		 ::backend::ui::PsychUIButton buttonMoveUp =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,buttonX1,buttonY,HX_("Move Up",0a,58,b5,17), ::Dynamic(new _hx_Closure_1(_gthis)),null(),null());
HXLINE( 319)		buttonMoveUp->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 320)		tab_group->add(buttonMoveUp).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 322)		 ::backend::ui::PsychUIButton buttonMoveDown =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,buttonX1,(buttonY + 30),HX_("Move Down",d1,f3,85,66), ::Dynamic(new _hx_Closure_2(_gthis)),null(),null());
HXLINE( 337)		buttonMoveDown->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 338)		tab_group->add(buttonMoveDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 340)		 ::backend::ui::PsychUIButton buttonCreate =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,buttonX1,(buttonY + 60),HX_("New",40,88,3b,00), ::Dynamic(new _hx_Closure_3(_gthis)),null(),null());
HXLINE( 341)		buttonCreate->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 342)		buttonCreate->normalStyle->__SetField(HX_("bgColor",5e,81,83,f7),-16744448,::hx::paccDynamic);
HXLINE( 343)		buttonCreate->normalStyle->__SetField(HX_("textColor",76,01,4a,e3),-1,::hx::paccDynamic);
HXLINE( 344)		tab_group->add(buttonCreate).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 346)		 ::backend::ui::PsychUIButton buttonDuplicate =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,buttonX1,(buttonY + 90),HX_("Duplicate",6b,01,ea,42), ::Dynamic(new _hx_Closure_4(_gthis)),null(),null());
HXLINE( 423)		buttonDuplicate->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 424)		buttonDuplicate->normalStyle->__SetField(HX_("bgColor",5e,81,83,f7),-16776961,::hx::paccDynamic);
HXLINE( 425)		buttonDuplicate->normalStyle->__SetField(HX_("textColor",76,01,4a,e3),-1,::hx::paccDynamic);
HXLINE( 426)		tab_group->add(buttonDuplicate).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 428)		 ::backend::ui::PsychUIButton buttonDelete =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,buttonX1,(buttonY + 120),HX_("Delete",4b,34,6d,9f), ::Dynamic(new _hx_Closure_5(_gthis)),null(),null());
HXLINE( 442)		buttonDelete->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 443)		buttonDelete->normalStyle->__SetField(HX_("bgColor",5e,81,83,f7),-65536,::hx::paccDynamic);
HXLINE( 444)		buttonDelete->normalStyle->__SetField(HX_("textColor",76,01,4a,e3),-1,::hx::paccDynamic);
HXLINE( 445)		tab_group->add(buttonDelete).StaticCast<  ::flixel::FlxSprite >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,addSpriteListBox,(void))

void StageEditorState_obj::showOutput(::String txt,::hx::Null< bool >  __o_isError){
            		bool isError = __o_isError.Default(false);
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_449_showOutput)
HXLINE( 450)		int _hx_tmp;
HXDLIN( 450)		if (isError) {
HXLINE( 450)			_hx_tmp = -65536;
            		}
            		else {
HXLINE( 450)			_hx_tmp = -1;
            		}
HXDLIN( 450)		this->outputTxt->set_color(_hx_tmp);
HXLINE( 451)		this->outputTxt->set_text(txt);
HXLINE( 452)		this->outputTime = ( (Float)(3) );
HXLINE( 454)		if (isError) {
HXLINE( 454)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 454)			_hx_tmp1->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("cancelMenu",39,a4,43,b7)),null(),true,null()),((Float)0.4),null(),null(),null(),null());
            		}
            		else {
HXLINE( 455)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN( 455)			_hx_tmp2->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("scrollMenu",4c,d4,18,06)),null(),true,null()),((Float)0.4),null(),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(StageEditorState_obj,showOutput,(void))

::String StageEditorState_obj::findUnoccupiedName(::String __o_prefix){
            		::String prefix = __o_prefix;
            		if (::hx::IsNull(__o_prefix)) prefix = HX_("sprite",05,dc,95,c3);
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_460_findUnoccupiedName)
HXLINE( 461)		int num = 1;
HXLINE( 462)		::String name = HX_("unnamed",c0,86,15,93);
HXLINE( 463)		while(true){
HXLINE( 465)			bool cantUseName = false;
HXLINE( 467)			name = (prefix + num);
HXLINE( 468)			{
HXLINE( 468)				int _g = 0;
HXDLIN( 468)				::Array< ::Dynamic> _g1 = this->stageSprites;
HXDLIN( 468)				while((_g < _g1->length)){
HXLINE( 468)					 ::states::editors::StageEditorMetaSprite basic = _g1->__get(_g).StaticCast<  ::states::editors::StageEditorMetaSprite >();
HXDLIN( 468)					_g = (_g + 1);
HXLINE( 470)					if ((basic->name == name)) {
HXLINE( 472)						cantUseName = true;
HXLINE( 473)						goto _hx_goto_26;
            					}
            				}
            				_hx_goto_26:;
            			}
HXLINE( 477)			if (cantUseName) {
HXLINE( 479)				num = (num + 1);
HXLINE( 480)				continue;
            			}
HXLINE( 482)			goto _hx_goto_25;
            		}
            		_hx_goto_25:;
HXLINE( 484)		return name;
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageEditorState_obj,findUnoccupiedName,return )

void StageEditorState_obj::insertMeta( ::states::editors::StageEditorMetaSprite meta,::hx::Null< int >  __o_insertOffset){
            		int insertOffset = __o_insertOffset.Default(0);
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_488_insertMeta)
HXLINE( 489)		int num = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(this->spriteListRadioGroup->labels->length) ),( (Float)((((this->spriteListRadioGroup->labels->length - this->spriteListRadioGroup->checked) - 1) + insertOffset)) ))));
HXLINE( 490)		this->stageSprites->insert(num,meta);
HXLINE( 491)		this->updateSpriteListRadio();
HXLINE( 492)		 ::flixel::group::FlxTypedSpriteGroup _hx_tmp = this->createPopup;
HXDLIN( 492)		_hx_tmp->set_visible(this->createPopup->set_active(false));
HXLINE( 493)		this->spriteListRadioGroup->set_checked(((this->spriteListRadioGroup->labels->length - num) - 1));
HXLINE( 494)		this->updateSelectedUI();
HXLINE( 495)		this->unsavedProgress = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(StageEditorState_obj,insertMeta,(void))

void StageEditorState_obj::spriteCreatePopup(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_516_spriteCreatePopup)
HXLINE( 516)			_gthis->loadImage(HX_("sprite",05,dc,95,c3));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_521_spriteCreatePopup)
HXLINE( 521)			_gthis->loadImage(HX_("animatedSprite",08,df,a8,cb));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_526_spriteCreatePopup)
HXLINE( 527)			 ::Dynamic meta =  ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("name",4b,72,ff,48),_gthis->findUnoccupiedName(null()))
            				->setFixed(1,HX_("type",ba,f2,08,4d),HX_("square",9d,00,f2,58))
            				->setFixed(2,HX_("scale",8a,ce,ce,78),::Array_obj< int >::fromData( _hx_array_data_81b1371a_32,2)));
HXDLIN( 527)			 ::states::editors::StageEditorMetaSprite meta1 =  ::states::editors::StageEditorMetaSprite_obj::__alloc( HX_CTX ,meta, ::psychlua::ModchartSprite_obj::__alloc( HX_CTX ,null(),null()));
HXLINE( 528)			meta1->sprite->makeGraphic(1,1,-1,null(),null());
HXLINE( 529)			{
HXLINE( 529)				 ::flixel::math::FlxBasePoint this1 = meta1->sprite->scale;
HXDLIN( 529)				this1->set_x(( (Float)(200) ));
HXDLIN( 529)				this1->set_y(( (Float)(200) ));
            			}
HXLINE( 530)			meta1->sprite->updateHitbox();
HXLINE( 531)			{
HXLINE( 531)				 ::flixel::FlxSprite _this = meta1->sprite;
HXDLIN( 531)				int axes = 17;
HXDLIN( 531)				bool btn;
HXDLIN( 531)				if ((axes != 1)) {
HXLINE( 531)					btn = (axes == 17);
            				}
            				else {
HXLINE( 531)					btn = true;
            				}
HXDLIN( 531)				if (btn) {
HXLINE( 531)					int btn1 = ::flixel::FlxG_obj::width;
HXDLIN( 531)					_this->set_x(((( (Float)(btn1) ) - _this->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 531)				bool btn2;
HXDLIN( 531)				if ((axes != 16)) {
HXLINE( 531)					btn2 = (axes == 17);
            				}
            				else {
HXLINE( 531)					btn2 = true;
            				}
HXDLIN( 531)				if (btn2) {
HXLINE( 531)					int btn3 = ::flixel::FlxG_obj::height;
HXDLIN( 531)					_this->set_y(((( (Float)(btn3) ) - _this->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 532)			_gthis->insertMeta(meta1,null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_499_spriteCreatePopup)
HXDLIN( 499)		 ::states::editors::StageEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 500)		this->createPopup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 501)		this->createPopup->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 503)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-16777216,null(),null());
HXLINE( 504)		bg->set_alpha(((Float)0.6));
HXLINE( 505)		{
HXLINE( 505)			 ::flixel::math::FlxBasePoint this1 = bg->scale;
HXDLIN( 505)			this1->set_x(( (Float)(300) ));
HXDLIN( 505)			this1->set_y(( (Float)(240) ));
            		}
HXLINE( 506)		bg->updateHitbox();
HXLINE( 507)		{
HXLINE( 507)			int axes = 17;
HXDLIN( 507)			bool _hx_tmp;
HXDLIN( 507)			if ((axes != 1)) {
HXLINE( 507)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE( 507)				_hx_tmp = true;
            			}
HXDLIN( 507)			if (_hx_tmp) {
HXLINE( 507)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 507)				bg->set_x(((( (Float)(_hx_tmp1) ) - bg->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 507)			bool _hx_tmp2;
HXDLIN( 507)			if ((axes != 16)) {
HXLINE( 507)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE( 507)				_hx_tmp2 = true;
            			}
HXDLIN( 507)			if (_hx_tmp2) {
HXLINE( 507)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 507)				bg->set_y(((( (Float)(_hx_tmp3) ) - bg->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 508)		this->createPopup->add(bg).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 510)		 ::flixel::text::FlxText txt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,(bg->y + 10),180,HX_("New Sprite",05,28,3b,91),24,null());
HXLINE( 511)		{
HXLINE( 511)			int axes1 = 1;
HXDLIN( 511)			bool _hx_tmp4;
HXDLIN( 511)			if ((axes1 != 1)) {
HXLINE( 511)				_hx_tmp4 = (axes1 == 17);
            			}
            			else {
HXLINE( 511)				_hx_tmp4 = true;
            			}
HXDLIN( 511)			if (_hx_tmp4) {
HXLINE( 511)				int _hx_tmp5 = ::flixel::FlxG_obj::width;
HXDLIN( 511)				txt->set_x(((( (Float)(_hx_tmp5) ) - txt->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 511)			bool _hx_tmp6;
HXDLIN( 511)			if ((axes1 != 16)) {
HXLINE( 511)				_hx_tmp6 = (axes1 == 17);
            			}
            			else {
HXLINE( 511)				_hx_tmp6 = true;
            			}
HXDLIN( 511)			if (_hx_tmp6) {
HXLINE( 511)				int _hx_tmp7 = ::flixel::FlxG_obj::height;
HXDLIN( 511)				txt->set_y(((( (Float)(_hx_tmp7) ) - txt->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 512)		txt->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 513)		this->createPopup->add(txt).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 515)		int btnY = 320;
HXLINE( 516)		 ::backend::ui::PsychUIButton btn =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,btnY,HX_("No Animation",65,b2,1a,df), ::Dynamic(new _hx_Closure_0(_gthis)),null(),null());
HXLINE( 517)		{
HXLINE( 517)			int axes2 = 1;
HXDLIN( 517)			bool _hx_tmp8;
HXDLIN( 517)			if ((axes2 != 1)) {
HXLINE( 517)				_hx_tmp8 = (axes2 == 17);
            			}
            			else {
HXLINE( 517)				_hx_tmp8 = true;
            			}
HXDLIN( 517)			if (_hx_tmp8) {
HXLINE( 517)				int _hx_tmp9 = ::flixel::FlxG_obj::width;
HXDLIN( 517)				btn->set_x(((( (Float)(_hx_tmp9) ) - btn->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 517)			bool _hx_tmp10;
HXDLIN( 517)			if ((axes2 != 16)) {
HXLINE( 517)				_hx_tmp10 = (axes2 == 17);
            			}
            			else {
HXLINE( 517)				_hx_tmp10 = true;
            			}
HXDLIN( 517)			if (_hx_tmp10) {
HXLINE( 517)				int _hx_tmp11 = ::flixel::FlxG_obj::height;
HXDLIN( 517)				btn->set_y(((( (Float)(_hx_tmp11) ) - btn->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 518)		this->createPopup->add(btn).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 520)		btnY = (btnY + 50);
HXLINE( 521)		 ::backend::ui::PsychUIButton btn1 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,btnY,HX_("Animated",c3,2e,a4,62), ::Dynamic(new _hx_Closure_1(_gthis)),null(),null());
HXLINE( 522)		{
HXLINE( 522)			int axes3 = 1;
HXDLIN( 522)			bool _hx_tmp12;
HXDLIN( 522)			if ((axes3 != 1)) {
HXLINE( 522)				_hx_tmp12 = (axes3 == 17);
            			}
            			else {
HXLINE( 522)				_hx_tmp12 = true;
            			}
HXDLIN( 522)			if (_hx_tmp12) {
HXLINE( 522)				int _hx_tmp13 = ::flixel::FlxG_obj::width;
HXDLIN( 522)				btn1->set_x(((( (Float)(_hx_tmp13) ) - btn1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 522)			bool _hx_tmp14;
HXDLIN( 522)			if ((axes3 != 16)) {
HXLINE( 522)				_hx_tmp14 = (axes3 == 17);
            			}
            			else {
HXLINE( 522)				_hx_tmp14 = true;
            			}
HXDLIN( 522)			if (_hx_tmp14) {
HXLINE( 522)				int _hx_tmp15 = ::flixel::FlxG_obj::height;
HXDLIN( 522)				btn1->set_y(((( (Float)(_hx_tmp15) ) - btn1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 523)		this->createPopup->add(btn1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 525)		btnY = (btnY + 50);
HXLINE( 526)		 ::backend::ui::PsychUIButton btn2 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,btnY,HX_("Solid Color",6e,ab,47,83), ::Dynamic(new _hx_Closure_2(_gthis)),null(),null());
HXLINE( 534)		{
HXLINE( 534)			int axes4 = 1;
HXDLIN( 534)			bool _hx_tmp16;
HXDLIN( 534)			if ((axes4 != 1)) {
HXLINE( 534)				_hx_tmp16 = (axes4 == 17);
            			}
            			else {
HXLINE( 534)				_hx_tmp16 = true;
            			}
HXDLIN( 534)			if (_hx_tmp16) {
HXLINE( 534)				int _hx_tmp17 = ::flixel::FlxG_obj::width;
HXDLIN( 534)				btn2->set_x(((( (Float)(_hx_tmp17) ) - btn2->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 534)			bool _hx_tmp18;
HXDLIN( 534)			if ((axes4 != 16)) {
HXLINE( 534)				_hx_tmp18 = (axes4 == 17);
            			}
            			else {
HXLINE( 534)				_hx_tmp18 = true;
            			}
HXDLIN( 534)			if (_hx_tmp18) {
HXLINE( 534)				int _hx_tmp19 = ::flixel::FlxG_obj::height;
HXDLIN( 534)				btn2->set_y(((( (Float)(_hx_tmp19) ) - btn2->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 535)		this->createPopup->add(btn2).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 536)		this->add(this->createPopup);
HXLINE( 537)		 ::flixel::group::FlxTypedSpriteGroup _hx_tmp20 = this->createPopup;
HXDLIN( 537)		_hx_tmp20->set_visible(this->createPopup->set_active(false));
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,spriteCreatePopup,(void))

void StageEditorState_obj::updateSpriteListRadio(){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_541_updateSpriteListRadio)
HXLINE( 542)		::String _sel;
HXDLIN( 542)		if (::hx::IsNotNull( this->spriteListRadioGroup->checkedRadio )) {
HXLINE( 542)			_sel = this->spriteListRadioGroup->checkedRadio->get_label();
            		}
            		else {
HXLINE( 542)			_sel = null();
            		}
HXLINE( 543)		::Array< ::String > nameList = ::Array_obj< ::String >::__new(0);
HXLINE( 544)		{
HXLINE( 544)			int _g = 0;
HXDLIN( 544)			::Array< ::Dynamic> _g1 = this->stageSprites;
HXDLIN( 544)			while((_g < _g1->length)){
HXLINE( 544)				 ::states::editors::StageEditorMetaSprite spr = _g1->__get(_g).StaticCast<  ::states::editors::StageEditorMetaSprite >();
HXDLIN( 544)				_g = (_g + 1);
HXLINE( 546)				if (::hx::IsNull( spr )) {
HXLINE( 546)					continue;
            				}
HXLINE( 548)				::String _hx_switch_0 = spr->type;
            				if (  (_hx_switch_0==HX_("boyfriend",6a,29,b8,e6)) ){
HXLINE( 553)					nameList->push(HX_("- Boyfriend -",64,4f,1b,83));
HXDLIN( 553)					goto _hx_goto_35;
            				}
            				if (  (_hx_switch_0==HX_("dad",47,36,4c,00)) ){
HXLINE( 555)					nameList->push(HX_("- Opponent -",1d,e8,b4,c4));
HXDLIN( 555)					goto _hx_goto_35;
            				}
            				if (  (_hx_switch_0==HX_("gf",1f,5a,00,00)) ){
HXLINE( 551)					nameList->push(HX_("- Girlfriend -",3a,b4,75,61));
HXDLIN( 551)					goto _hx_goto_35;
            				}
            				/* default */{
HXLINE( 557)					nameList->push(spr->name);
            				}
            				_hx_goto_35:;
            			}
            		}
HXLINE( 560)		nameList->reverse();
HXLINE( 562)		this->spriteListRadioGroup->set_labels(nameList);
HXLINE( 563)		{
HXLINE( 563)			int _g2 = 0;
HXDLIN( 563)			::Array< ::Dynamic> _g3 = this->spriteListRadioGroup->radios;
HXDLIN( 563)			while((_g2 < _g3->length)){
HXLINE( 563)				 ::backend::ui::PsychUIRadioItem radio = _g3->__get(_g2).StaticCast<  ::backend::ui::PsychUIRadioItem >();
HXDLIN( 563)				_g2 = (_g2 + 1);
HXLINE( 565)				if ((radio->get_label() == _sel)) {
HXLINE( 567)					this->spriteListRadioGroup->set_checkedRadio(radio);
HXLINE( 568)					goto _hx_goto_36;
            				}
            			}
            			_hx_goto_36:;
            		}
HXLINE( 572)		int maxNum = 19;
HXLINE( 573)		 ::backend::ui::PsychUIBox _hx_tmp = this->spriteList_box;
HXDLIN( 573)		_hx_tmp->resize(250,::Std_obj::_hx_int(((::Math_obj::min(( (Float)(maxNum) ),( (Float)(this->spriteListRadioGroup->labels->length) )) * ( (Float)(25) )) + 35)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,updateSpriteListRadio,(void))

void StageEditorState_obj::editorUI(){
            	HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_577_editorUI)
HXLINE( 578)		this->UI_box =  ::backend::ui::PsychUIBox_obj::__alloc( HX_CTX ,( (Float)((::flixel::FlxG_obj::width - 225)) ),( (Float)(10) ),200,400,::Array_obj< ::String >::fromData( _hx_array_data_81b1371a_39,3));
HXLINE( 579)		this->UI_box->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 580)		{
HXLINE( 580)			 ::flixel::math::FlxBasePoint this1 = this->UI_box->scrollFactor;
HXDLIN( 580)			this1->set_x(( (Float)(0) ));
HXDLIN( 580)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 581)		this->add(this->UI_box);
HXLINE( 582)		this->UI_box->set_selectedName(HX_("Data",4a,82,3c,2d));
HXLINE( 584)		this->UI_stagebox =  ::backend::ui::PsychUIBox_obj::__alloc( HX_CTX ,( (Float)((::flixel::FlxG_obj::width - 275)) ),( (Float)(25) ),250,100,::Array_obj< ::String >::fromData( _hx_array_data_81b1371a_40,1));
HXLINE( 585)		this->UI_stagebox->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 586)		{
HXLINE( 586)			 ::flixel::math::FlxBasePoint this2 = this->UI_stagebox->scrollFactor;
HXDLIN( 586)			this2->set_x(( (Float)(0) ));
HXDLIN( 586)			this2->set_y(( (Float)(0) ));
            		}
HXLINE( 587)		this->add(this->UI_stagebox);
HXLINE( 588)		 ::backend::ui::PsychUIBox fh = this->UI_box;
HXDLIN( 588)		Float fh1 = fh->y;
HXDLIN( 588)		Float _hx_tmp = this->UI_stagebox->y;
HXDLIN( 588)		fh->set_y((fh1 + (_hx_tmp + this->UI_stagebox->get_height())));
HXLINE( 590)		this->addDataTab();
HXLINE( 591)		this->addObjectTab();
HXLINE( 592)		this->addMetaTab();
HXLINE( 593)		this->addStageTab();
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,editorUI,(void))

void StageEditorState_obj::addDataTab(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_624_addDataTab)
HXLINE( 624)			_gthis->saveData();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::StageEditorState,_gthis) HXARGC(2)
            		void _hx_run(int sel,::String selected){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_628_addDataTab)
HXLINE( 629)			_gthis->stageJson->__SetField(HX_("directory",6d,f2,44,10),selected,::hx::paccDynamic);
HXLINE( 630)			_gthis->saveObjectsToJson();
HXLINE( 631)			::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = (::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true);
HXLINE( 632)			::backend::MusicBeatState_obj::switchState( ::states::editors::StageEditorState_obj::__alloc( HX_CTX ,_gthis->lastLoadedStage,_gthis->stageJson));
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::StageEditorState,_gthis) HXARGC(2)
            		void _hx_run(::String old,::String cur){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_639_addDataTab)
HXLINE( 639)			_gthis->stageJson->__SetField(HX_("stageUI",92,60,ca,2d),_gthis->uiInputText->text,::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_644_addDataTab)
HXLINE( 645)			_gthis->stageJson->__SetField(HX_("hide_girlfriend",57,bd,d9,f9),_gthis->hideGirlfriendCheckbox->checked,::hx::paccDynamic);
HXLINE( 646)			_gthis->gf->set_visible(!(_gthis->hideGirlfriendCheckbox->checked));
HXLINE( 647)			if ((_gthis->focusRadioGroup->checked > -1)) {
HXLINE( 649)				 ::flixel::math::FlxBasePoint point = _gthis->focusOnTarget(_gthis->focusRadioGroup->labels->__get(_gthis->focusRadioGroup->checked));
HXLINE( 650)				_gthis->camFollow->setPosition(point->x,point->y);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_670_addDataTab)
HXLINE( 671)			if (::hx::IsNull( _gthis->stageJson->__Field(HX_("camera_opponent",b7,ed,08,84),::hx::paccDynamic) )) {
HXLINE( 671)				_gthis->stageJson->__SetField(HX_("camera_opponent",b7,ed,08,84),::Array_obj< Float >::fromData( _hx_array_data_81b1371a_47,2),::hx::paccDynamic);
            			}
HXLINE( 672)			 ::Dynamic(_gthis->stageJson->__Field(HX_("camera_opponent",b7,ed,08,84),::hx::paccDynamic))->__SetItem(0,_gthis->camDadStepperX->value);
HXLINE( 673)			 ::Dynamic(_gthis->stageJson->__Field(HX_("camera_opponent",b7,ed,08,84),::hx::paccDynamic))->__SetItem(1,_gthis->camDadStepperY->value);
HXLINE( 674)			_gthis->_updateCamera();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_688_addDataTab)
HXLINE( 689)			if (::hx::IsNull( _gthis->stageJson->__Field(HX_("camera_girlfriend",54,80,21,bf),::hx::paccDynamic) )) {
HXLINE( 689)				_gthis->stageJson->__SetField(HX_("camera_girlfriend",54,80,21,bf),::Array_obj< Float >::fromData( _hx_array_data_81b1371a_49,2),::hx::paccDynamic);
            			}
HXLINE( 690)			 ::Dynamic(_gthis->stageJson->__Field(HX_("camera_girlfriend",54,80,21,bf),::hx::paccDynamic))->__SetItem(0,_gthis->camGfStepperX->value);
HXLINE( 691)			 ::Dynamic(_gthis->stageJson->__Field(HX_("camera_girlfriend",54,80,21,bf),::hx::paccDynamic))->__SetItem(1,_gthis->camGfStepperY->value);
HXLINE( 692)			_gthis->_updateCamera();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_706_addDataTab)
HXLINE( 707)			if (::hx::IsNull( _gthis->stageJson->__Field(HX_("camera_boyfriend",10,8c,95,41),::hx::paccDynamic) )) {
HXLINE( 707)				_gthis->stageJson->__SetField(HX_("camera_boyfriend",10,8c,95,41),::Array_obj< Float >::fromData( _hx_array_data_81b1371a_51,2),::hx::paccDynamic);
            			}
HXLINE( 708)			 ::Dynamic(_gthis->stageJson->__Field(HX_("camera_boyfriend",10,8c,95,41),::hx::paccDynamic))->__SetItem(0,_gthis->camBfStepperX->value);
HXLINE( 709)			 ::Dynamic(_gthis->stageJson->__Field(HX_("camera_boyfriend",10,8c,95,41),::hx::paccDynamic))->__SetItem(1,_gthis->camBfStepperY->value);
HXLINE( 710)			_gthis->_updateCamera();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_718_addDataTab)
HXLINE( 719)			_gthis->stageJson->__SetField(HX_("defaultZoom",74,9c,b7,22),_gthis->zoomStepper->value,::hx::paccDynamic);
HXLINE( 720)			::flixel::FlxG_obj::camera->set_zoom(( (Float)(_gthis->stageJson->__Field(HX_("defaultZoom",74,9c,b7,22),::hx::paccDynamic)) ));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_725_addDataTab)
HXLINE( 726)			_gthis->stageJson->__SetField(HX_("camera_speed",2d,2f,ab,11),_gthis->cameraSpeedStepper->value,::hx::paccDynamic);
HXLINE( 727)			::flixel::FlxG_obj::camera->set_followLerp((((Float)0.04) * ( (Float)(_gthis->stageJson->__Field(HX_("camera_speed",2d,2f,ab,11),::hx::paccDynamic)) )));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_609_addDataTab)
HXDLIN( 609)		 ::states::editors::StageEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 610)		 ::flixel::group::FlxTypedSpriteGroup tab_group = this->UI_box->getTab(HX_("Data",4a,82,3c,2d))->menu;
HXLINE( 612)		int objX = 10;
HXLINE( 613)		int objY = 20;
HXLINE( 614)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,objX,(objY - 18),150,HX_("Compiled Assets:",c8,8a,3b,e6),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 616)		::Array< ::String > folderList = ::Array_obj< ::String >::fromData( _hx_array_data_81b1371a_55,1);
HXLINE( 618)		{
HXLINE( 618)			int _g = 0;
HXDLIN( 618)			::Array< ::String > _g1 = ::sys::FileSystem_obj::readDirectory(HX_("assets/",4c,2a,dc,36));
HXDLIN( 618)			while((_g < _g1->length)){
HXLINE( 618)				::String folder = _g1->__get(_g);
HXDLIN( 618)				_g = (_g + 1);
HXLINE( 619)				bool _hx_tmp;
HXDLIN( 619)				bool _hx_tmp1;
HXDLIN( 619)				if (::sys::FileSystem_obj::isDirectory((HX_("assets/",4c,2a,dc,36) + folder))) {
HXLINE( 619)					_hx_tmp1 = (folder != HX_("shared",a5,5e,2b,1d));
            				}
            				else {
HXLINE( 619)					_hx_tmp1 = false;
            				}
HXDLIN( 619)				if (_hx_tmp1) {
HXLINE( 619)					_hx_tmp = !(::backend::Mods_obj::ignoreModFolders->contains(folder));
            				}
            				else {
HXLINE( 619)					_hx_tmp = false;
            				}
HXDLIN( 619)				if (_hx_tmp) {
HXLINE( 620)					folderList->push(folder);
            				}
            			}
            		}
HXLINE( 623)		Float saveButton = (this->UI_box->get_width() - ( (Float)(90) ));
HXDLIN( 623)		 ::backend::ui::PsychUIButton saveButton1 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,saveButton,(this->UI_box->get_height() - ( (Float)(50) )),HX_("Save",5d,b7,26,37), ::Dynamic(new _hx_Closure_0(_gthis)),null(),null());
HXLINE( 626)		tab_group->add(saveButton1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 628)		this->directoryDropDown =  ::backend::ui::PsychUIDropDownMenu_obj::__alloc( HX_CTX ,( (Float)(objX) ),( (Float)(objY) ),folderList, ::Dynamic(new _hx_Closure_1(_gthis)),null());
HXLINE( 634)		this->directoryDropDown->set_selectedLabel(( (::String)(this->stageJson->__Field(HX_("directory",6d,f2,44,10),::hx::paccDynamic)) ));
HXLINE( 636)		objY = (objY + 50);
HXLINE( 637)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,objX,(objY - 18),100,HX_("UI Style:",55,9a,a0,d6),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 638)		::String _hx_tmp2;
HXDLIN( 638)		if (::hx::IsNotNull( this->stageJson->__Field(HX_("stageUI",92,60,ca,2d),::hx::paccDynamic) )) {
HXLINE( 638)			_hx_tmp2 = ( (::String)(this->stageJson->__Field(HX_("stageUI",92,60,ca,2d),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 638)			_hx_tmp2 = HX_("",00,00,00,00);
            		}
HXDLIN( 638)		this->uiInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,objX,objY,100,_hx_tmp2,8);
HXLINE( 639)		this->uiInputText->onChange =  ::Dynamic(new _hx_Closure_2(_gthis));
HXLINE( 641)		objY = (objY + 30);
HXLINE( 642)		this->hideGirlfriendCheckbox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)(objX) ),( (Float)(objY) ),HX_("Hide Girlfriend?",e7,68,bd,74),100,null());
HXLINE( 643)		this->hideGirlfriendCheckbox->onClick =  ::Dynamic(new _hx_Closure_3(_gthis));
HXLINE( 653)		this->hideGirlfriendCheckbox->set_checked(!(this->gf->visible));
HXLINE( 655)		objY = (objY + 50);
HXLINE( 656)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,objX,(objY - 18),100,HX_("Camera Offsets:",95,67,28,7d),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 658)		objY = (objY + 20);
HXLINE( 659)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,objX,(objY - 18),100,HX_("Opponent:",dd,8f,bc,4a),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 661)		Float cx = ( (Float)(0) );
HXLINE( 662)		Float cy = ( (Float)(0) );
HXLINE( 663)		bool _hx_tmp3;
HXDLIN( 663)		if (::hx::IsNotNull( this->stageJson->__Field(HX_("camera_opponent",b7,ed,08,84),::hx::paccDynamic) )) {
HXLINE( 663)			_hx_tmp3 = (( (::Array< Float >)(this->stageJson->__Field(HX_("camera_opponent",b7,ed,08,84),::hx::paccDynamic)) )->length > 1);
            		}
            		else {
HXLINE( 663)			_hx_tmp3 = false;
            		}
HXDLIN( 663)		if (_hx_tmp3) {
HXLINE( 665)			cx = ( (Float)( ::Dynamic(this->stageJson->__Field(HX_("camera_opponent",b7,ed,08,84),::hx::paccDynamic))->__GetItem(0)) );
HXLINE( 666)			cy = ( (Float)( ::Dynamic(this->stageJson->__Field(HX_("camera_opponent",b7,ed,08,84),::hx::paccDynamic))->__GetItem(0)) );
            		}
HXLINE( 668)		this->camDadStepperX =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,objX,objY,50,cx,-10000,10000,0,null(),null());
HXLINE( 669)		this->camDadStepperY =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,(objX + 80),objY,50,cy,-10000,10000,0,null(),null());
HXLINE( 670)		this->camDadStepperX->onValueChange = (this->camDadStepperY->onValueChange =  ::Dynamic(new _hx_Closure_4(_gthis)));
HXLINE( 677)		objY = (objY + 40);
HXLINE( 678)		Float cx1 = ( (Float)(0) );
HXLINE( 679)		Float cy1 = ( (Float)(0) );
HXLINE( 680)		bool _hx_tmp4;
HXDLIN( 680)		if (::hx::IsNotNull( this->stageJson->__Field(HX_("camera_girlfriend",54,80,21,bf),::hx::paccDynamic) )) {
HXLINE( 680)			_hx_tmp4 = (( (::Array< Float >)(this->stageJson->__Field(HX_("camera_girlfriend",54,80,21,bf),::hx::paccDynamic)) )->length > 1);
            		}
            		else {
HXLINE( 680)			_hx_tmp4 = false;
            		}
HXDLIN( 680)		if (_hx_tmp4) {
HXLINE( 682)			cx1 = ( (Float)( ::Dynamic(this->stageJson->__Field(HX_("camera_girlfriend",54,80,21,bf),::hx::paccDynamic))->__GetItem(0)) );
HXLINE( 683)			cy1 = ( (Float)( ::Dynamic(this->stageJson->__Field(HX_("camera_girlfriend",54,80,21,bf),::hx::paccDynamic))->__GetItem(0)) );
            		}
HXLINE( 685)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,objX,(objY - 18),100,HX_("Girlfriend:",20,89,69,8b),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 686)		this->camGfStepperX =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,objX,objY,50,cx1,-10000,10000,0,null(),null());
HXLINE( 687)		this->camGfStepperY =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,(objX + 80),objY,50,cy1,-10000,10000,0,null(),null());
HXLINE( 688)		this->camGfStepperX->onValueChange = (this->camGfStepperY->onValueChange =  ::Dynamic(new _hx_Closure_5(_gthis)));
HXLINE( 695)		objY = (objY + 40);
HXLINE( 696)		Float cx2 = ( (Float)(0) );
HXLINE( 697)		Float cy2 = ( (Float)(0) );
HXLINE( 698)		bool _hx_tmp5;
HXDLIN( 698)		if (::hx::IsNotNull( this->stageJson->__Field(HX_("camera_boyfriend",10,8c,95,41),::hx::paccDynamic) )) {
HXLINE( 698)			_hx_tmp5 = (( (::Array< Float >)(this->stageJson->__Field(HX_("camera_boyfriend",10,8c,95,41),::hx::paccDynamic)) )->length > 1);
            		}
            		else {
HXLINE( 698)			_hx_tmp5 = false;
            		}
HXDLIN( 698)		if (_hx_tmp5) {
HXLINE( 700)			cx2 = ( (Float)( ::Dynamic(this->stageJson->__Field(HX_("camera_boyfriend",10,8c,95,41),::hx::paccDynamic))->__GetItem(0)) );
HXLINE( 701)			cy2 = ( (Float)( ::Dynamic(this->stageJson->__Field(HX_("camera_boyfriend",10,8c,95,41),::hx::paccDynamic))->__GetItem(0)) );
            		}
HXLINE( 703)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,objX,(objY - 18),100,HX_("Boyfriend:",b0,17,1d,f1),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 704)		this->camBfStepperX =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,objX,objY,50,cx2,-10000,10000,0,null(),null());
HXLINE( 705)		this->camBfStepperY =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,(objX + 80),objY,50,cy2,-10000,10000,0,null(),null());
HXLINE( 706)		this->camBfStepperX->onValueChange = (this->camBfStepperY->onValueChange =  ::Dynamic(new _hx_Closure_6(_gthis)));
HXLINE( 713)		objY = (objY + 50);
HXLINE( 714)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,objX,(objY - 18),100,HX_("Camera Data:",15,a7,8d,8f),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 715)		objY = (objY + 20);
HXLINE( 716)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,objX,(objY - 18),100,HX_("Zoom:",a7,7d,c3,1b),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 717)		this->zoomStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,objX,objY,((Float)0.05),this->stageJson->__Field(HX_("defaultZoom",74,9c,b7,22),::hx::paccDynamic),this->minZoom,this->maxZoom,2,null(),null());
HXLINE( 718)		this->zoomStepper->onValueChange =  ::Dynamic(new _hx_Closure_7(_gthis));
HXLINE( 723)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(objX + 80),(objY - 18),100,HX_("Speed:",f3,72,8f,ef),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 724)		Float _hx_tmp6;
HXDLIN( 724)		if (::hx::IsNotNull( this->stageJson->__Field(HX_("camera_speed",2d,2f,ab,11),::hx::paccDynamic) )) {
HXLINE( 724)			_hx_tmp6 = ( (Float)(this->stageJson->__Field(HX_("camera_speed",2d,2f,ab,11),::hx::paccDynamic)) );
            		}
            		else {
HXLINE( 724)			_hx_tmp6 = ( (Float)(1) );
            		}
HXDLIN( 724)		this->cameraSpeedStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,(objX + 80),objY,((Float)0.1),_hx_tmp6,0,10,2,null(),null());
HXLINE( 725)		this->cameraSpeedStepper->onValueChange =  ::Dynamic(new _hx_Closure_8(_gthis));
HXLINE( 729)		::flixel::FlxG_obj::camera->set_followLerp((((Float)0.04) * this->cameraSpeedStepper->value));
HXLINE( 731)		tab_group->add(this->hideGirlfriendCheckbox).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 732)		tab_group->add(this->camDadStepperX).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 733)		tab_group->add(this->camDadStepperY).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 734)		tab_group->add(this->camGfStepperX).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 735)		tab_group->add(this->camGfStepperY).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 736)		tab_group->add(this->camBfStepperX).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 737)		tab_group->add(this->camBfStepperY).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 738)		tab_group->add(this->zoomStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 739)		tab_group->add(this->cameraSpeedStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 741)		tab_group->add(this->uiInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 742)		tab_group->add(this->directoryDropDown).StaticCast<  ::flixel::FlxSprite >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,addDataTab,(void))

void StageEditorState_obj::_updateCamera(){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_747__updateCamera)
HXDLIN( 747)		if ((this->focusRadioGroup->checked > -1)) {
HXLINE( 749)			 ::flixel::math::FlxBasePoint point = this->focusOnTarget(this->focusRadioGroup->labels->__get(this->focusRadioGroup->checked));
HXLINE( 750)			this->camFollow->setPosition(point->x,point->y);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,_updateCamera,(void))

 ::states::editors::StageEditorMetaSprite StageEditorState_obj::getSelected(::hx::Null< bool >  __o_blockReserved){
            		bool blockReserved = __o_blockReserved.Default(true);
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_772_getSelected)
HXLINE( 773)		int selected = this->spriteListRadioGroup->checked;
HXLINE( 774)		if ((selected >= 0)) {
HXLINE( 776)			 ::states::editors::StageEditorMetaSprite spr = this->stageSprites->__get(((this->spriteListRadioGroup->labels->length - selected) - 1)).StaticCast<  ::states::editors::StageEditorMetaSprite >();
HXLINE( 777)			bool _hx_tmp;
HXDLIN( 777)			if (::hx::IsNotNull( spr )) {
HXLINE( 777)				if (blockReserved) {
HXLINE( 777)					_hx_tmp = !(::backend::StageData_obj::reservedNames->contains(spr->type));
            				}
            				else {
HXLINE( 777)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 777)				_hx_tmp = false;
            			}
HXDLIN( 777)			if (_hx_tmp) {
HXLINE( 778)				return spr;
            			}
            		}
HXLINE( 780)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageEditorState_obj,getSelected,return )

void StageEditorState_obj::addObjectTab(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::StageEditorState,_gthis) HXARGC(2)
            		void _hx_run(::String old,::String cur){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_792_addObjectTab)
HXLINE( 794)			 ::states::editors::StageEditorMetaSprite selected = _gthis->getSelected(null());
HXLINE( 795)			if (::hx::IsNotNull( selected )) {
HXLINE( 797)				::String changedName = _gthis->nameInputText->text;
HXLINE( 798)				if ((changedName.length < 1)) {
HXLINE( 800)					_gthis->showOutput(HX_("Sprite name cannot be empty!",8e,87,20,bf),true);
HXLINE( 801)					return;
            				}
HXLINE( 804)				if (::backend::StageData_obj::reservedNames->contains(changedName)) {
HXLINE( 806)					_gthis->showOutput(HX_("To avoid conflicts, this name cannot be used!",0c,ba,c3,6a),true);
HXLINE( 807)					return;
            				}
HXLINE( 810)				{
HXLINE( 810)					int _g = 0;
HXDLIN( 810)					::Array< ::Dynamic> _g1 = _gthis->stageSprites;
HXDLIN( 810)					while((_g < _g1->length)){
HXLINE( 810)						 ::states::editors::StageEditorMetaSprite basic = _g1->__get(_g).StaticCast<  ::states::editors::StageEditorMetaSprite >();
HXDLIN( 810)						_g = (_g + 1);
HXLINE( 812)						bool _hx_tmp;
HXDLIN( 812)						if (::hx::IsInstanceNotEq( selected,basic )) {
HXLINE( 812)							_hx_tmp = (basic->name == changedName);
            						}
            						else {
HXLINE( 812)							_hx_tmp = false;
            						}
HXDLIN( 812)						if (_hx_tmp) {
HXLINE( 814)							_gthis->showOutput(((HX_("Name \"",2d,6b,0d,52) + changedName) + HX_("\" is already in use!",95,94,14,a4)),true);
HXLINE( 815)							return;
            						}
            					}
            				}
HXLINE( 819)				selected->name = changedName;
HXLINE( 820)				_gthis->spriteListRadioGroup->checkedRadio->set_label(selected->name);
HXLINE( 821)				_gthis->outputTime = ( (Float)(0) );
HXLINE( 822)				_gthis->outputTxt->set_alpha(( (Float)(0) ));
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_829_addObjectTab)
HXLINE( 830)			::haxe::Log_obj::trace(HX_("attempt to load image",13,46,ea,c3),::hx::SourceInfo(HX_("source/states/editors/StageEditorState.hx",16,7c,21,9d),830,HX_("states.editors.StageEditorState",1a,37,b1,81),HX_("addObjectTab",75,36,d7,42)));
HXLINE( 831)			_gthis->loadImage(null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_836_addObjectTab)
HXLINE( 837)			 ::states::editors::StageEditorMetaSprite selected = _gthis->getSelected(null());
HXLINE( 838)			if (::hx::IsNull( selected )) {
HXLINE( 839)				return;
            			}
HXLINE( 841)			if ((selected->type != HX_("animatedSprite",08,df,a8,cb))) {
HXLINE( 843)				_gthis->showOutput(HX_("Only Animated Sprites can hold Animation data.",d2,2b,aa,78),true);
HXLINE( 844)				return;
            			}
HXLINE( 847)			_gthis->destroySubStates = false;
HXLINE( 848)			_gthis->persistentDraw = false;
HXLINE( 849)			_gthis->animationEditor->target = selected;
HXLINE( 850)			_gthis->unsavedProgress = true;
HXLINE( 851)			_gthis->openSubState(_gthis->animationEditor);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::states::editors::StageEditorState,_gthis) HXARGC(2)
            		void _hx_run(::String old,::String cur){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_859_addObjectTab)
HXLINE( 861)			 ::states::editors::StageEditorMetaSprite selected = _gthis->getSelected(null());
HXLINE( 862)			if (::hx::IsNotNull( selected )) {
HXLINE( 863)				selected->set_color(_gthis->colorInputText->text);
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_868_addObjectTab)
HXLINE( 870)			 ::states::editors::StageEditorMetaSprite selected = _gthis->getSelected(null());
HXLINE( 871)			if (::hx::IsNotNull( selected )) {
HXLINE( 872)				selected->setScale(_gthis->scaleStepperX->value,_gthis->scaleStepperY->value);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_884_addObjectTab)
HXLINE( 886)			 ::states::editors::StageEditorMetaSprite selected = _gthis->getSelected(null());
HXLINE( 887)			if (::hx::IsNotNull( selected )) {
HXLINE( 888)				selected->setScrollFactor(_gthis->scrollStepperX->value,_gthis->scrollStepperY->value);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_902_addObjectTab)
HXLINE( 904)			 ::states::editors::StageEditorMetaSprite selected = _gthis->getSelected(null());
HXLINE( 905)			if (::hx::IsNotNull( selected )) {
HXLINE( 906)				selected->set_alpha(_gthis->alphaStepper->value);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_912_addObjectTab)
HXLINE( 914)			 ::states::editors::StageEditorMetaSprite selected = _gthis->getSelected(null());
HXLINE( 915)			if (::hx::IsNotNull( selected )) {
HXLINE( 917)				if ((selected->type != HX_("square",9d,00,f2,58))) {
HXLINE( 918)					selected->set_antialiasing(_gthis->antialiasingCheckbox->checked);
            				}
            				else {
HXLINE( 921)					_gthis->antialiasingCheckbox->set_checked(false);
HXLINE( 922)					selected->set_antialiasing(false);
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_931_addObjectTab)
HXLINE( 933)			 ::states::editors::StageEditorMetaSprite selected = _gthis->getSelected(null());
HXLINE( 934)			if (::hx::IsNotNull( selected )) {
HXLINE( 935)				selected->set_angle(_gthis->angleStepper->value);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_940_addObjectTab)
HXLINE( 942)			 ::states::editors::StageEditorMetaSprite selected = _gthis->getSelected(null());
HXLINE( 943)			if (::hx::IsNotNull( selected )) {
HXLINE( 945)				if ((selected->type != HX_("square",9d,00,f2,58))) {
HXLINE( 947)					selected->set_flipX(_gthis->flipXCheckBox->checked);
HXLINE( 948)					selected->set_flipY(_gthis->flipYCheckBox->checked);
            				}
            				else {
HXLINE( 952)					 ::backend::ui::PsychUICheckBox _gthis1 = _gthis->flipXCheckBox;
HXDLIN( 952)					_gthis1->set_checked(_gthis->flipYCheckBox->set_checked(false));
HXLINE( 953)					selected->set_flipX(selected->set_flipY(false));
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_10, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_968_addObjectTab)
HXLINE( 970)			 ::states::editors::StageEditorMetaSprite selected = _gthis->getSelected(null());
HXLINE( 971)			if (::hx::IsNotNull( selected )) {
HXLINE( 973)				int filt = 0;
HXLINE( 974)				if (_gthis->lowQualityCheckbox->checked) {
HXLINE( 974)					filt = (filt | 1);
            				}
HXLINE( 975)				if (_gthis->highQualityCheckbox->checked) {
HXLINE( 975)					filt = (filt | 2);
            				}
HXLINE( 976)				selected->filters = filt;
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_784_addObjectTab)
HXDLIN( 784)		 ::states::editors::StageEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 785)		 ::flixel::group::FlxTypedSpriteGroup tab_group = this->UI_box->getTab(HX_("Object",df,f2,d3,49))->menu;
HXLINE( 787)		int objX = 10;
HXLINE( 788)		int objY = 30;
HXLINE( 789)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,objX,(objY - 18),150,HX_("Name (for Lua/HScript):",c3,6c,96,62),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 790)		this->nameInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,objX,objY,120,HX_("",00,00,00,00),8);
HXLINE( 791)		 ::backend::ui::PsychUIInputText _hx_tmp = this->nameInputText;
HXDLIN( 791)		_hx_tmp->set_customFilterPattern( ::EReg_obj::__alloc( HX_CTX ,HX_("[^a-zA-Z0-9_\\-]*",e4,6d,c5,4f),HX_("g",67,00,00,00)));
HXLINE( 792)		this->nameInputText->onChange =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE( 825)		tab_group->add(this->nameInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 827)		objY = (objY + 35);
HXLINE( 828)		this->imgTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,objX,(objY - 15),200,HX_("Image: ",a1,46,c5,8e),8,null());
HXLINE( 829)		 ::backend::ui::PsychUIButton imgButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,objX,objY,HX_("Change Image",ab,ac,ad,96), ::Dynamic(new _hx_Closure_1(_gthis)),null(),null());
HXLINE( 833)		tab_group->add(imgButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 834)		tab_group->add(this->imgTxt).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 836)		 ::backend::ui::PsychUIButton animationsButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,(objX + 90),objY,HX_("Animations",0f,39,cd,79), ::Dynamic(new _hx_Closure_2(_gthis)),null(),null());
HXLINE( 853)		tab_group->add(animationsButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 855)		objY = (objY + 45);
HXLINE( 856)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,objX,(objY - 18),80,HX_("Color:",97,39,1b,fb),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 857)		this->colorInputText =  ::backend::ui::PsychUIInputText_obj::__alloc( HX_CTX ,objX,objY,80,HX_("FFFFFF",c0,27,82,79),8);
HXLINE( 858)		this->colorInputText->set_filterMode(3);
HXLINE( 859)		this->colorInputText->onChange =  ::Dynamic(new _hx_Closure_3(_gthis));
HXLINE( 865)		tab_group->add(this->colorInputText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 867)		 ::Dynamic updateScale =  ::Dynamic(new _hx_Closure_4(_gthis));
HXLINE( 875)		objY = (objY + 45);
HXLINE( 876)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,objX,(objY - 18),100,HX_("Scale (X/Y):",e1,c9,97,8d),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 877)		this->scaleStepperX =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,objX,objY,((Float)0.05),1,((Float)0.05),10,2,null(),null());
HXLINE( 878)		this->scaleStepperY =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,(objX + 70),objY,((Float)0.05),1,((Float)0.05),10,2,null(),null());
HXLINE( 879)		this->scaleStepperX->onValueChange = (this->scaleStepperY->onValueChange = updateScale);
HXLINE( 880)		tab_group->add(this->scaleStepperX).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 881)		tab_group->add(this->scaleStepperY).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 883)		 ::Dynamic updateScroll =  ::Dynamic(new _hx_Closure_5(_gthis));
HXLINE( 891)		objY = (objY + 40);
HXLINE( 892)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,objX,(objY - 18),150,HX_("Scroll Factor (X/Y):",c9,d2,a8,35),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 893)		this->scrollStepperX =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,objX,objY,((Float)0.05),1,0,10,2,null(),null());
HXLINE( 894)		this->scrollStepperY =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,(objX + 70),objY,((Float)0.05),1,0,10,2,null(),null());
HXLINE( 895)		this->scrollStepperX->onValueChange = (this->scrollStepperY->onValueChange = updateScroll);
HXLINE( 896)		tab_group->add(this->scrollStepperX).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 897)		tab_group->add(this->scrollStepperY).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 899)		objY = (objY + 40);
HXLINE( 900)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,objX,(objY - 18),80,HX_("Opacity:",2f,70,fe,e6),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 901)		this->alphaStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,objX,objY,((Float)0.1),1,0,1,2,null(),true);
HXLINE( 902)		this->alphaStepper->onValueChange =  ::Dynamic(new _hx_Closure_6(_gthis));
HXLINE( 908)		tab_group->add(this->alphaStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 910)		this->antialiasingCheckbox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)((objX + 90)) ),( (Float)(objY) ),HX_("Anti-Aliasing",9d,02,6c,80),80,null());
HXLINE( 911)		this->antialiasingCheckbox->onClick =  ::Dynamic(new _hx_Closure_7(_gthis));
HXLINE( 926)		tab_group->add(this->antialiasingCheckbox).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 928)		objY = (objY + 40);
HXLINE( 929)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,objX,(objY - 18),80,HX_("Angle:",27,89,ad,97),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 930)		this->angleStepper =  ::backend::ui::PsychUINumericStepper_obj::__alloc( HX_CTX ,objX,objY,10,0,0,360,0,null(),null());
HXLINE( 931)		this->angleStepper->onValueChange =  ::Dynamic(new _hx_Closure_8(_gthis));
HXLINE( 937)		tab_group->add(this->angleStepper).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 939)		 ::Dynamic updateFlip =  ::Dynamic(new _hx_Closure_9(_gthis));
HXLINE( 958)		objY = (objY + 25);
HXLINE( 959)		this->flipXCheckBox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)(objX) ),( (Float)(objY) ),HX_("Flip X",45,68,fe,71),60,null());
HXLINE( 960)		this->flipXCheckBox->onClick = updateFlip;
HXLINE( 961)		this->flipYCheckBox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)((objX + 90)) ),( (Float)(objY) ),HX_("Flip Y",46,68,fe,71),60,null());
HXLINE( 962)		this->flipYCheckBox->onClick = updateFlip;
HXLINE( 963)		tab_group->add(this->flipXCheckBox).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 964)		tab_group->add(this->flipYCheckBox).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 966)		objY = (objY + 45);
HXLINE( 967)		 ::Dynamic recalcFilter =  ::Dynamic(new _hx_Closure_10(_gthis));
HXLINE( 979)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(objX + 60),(objY - 18),100,HX_("Visible in:",e7,11,18,b8),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 980)		this->lowQualityCheckbox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)(objX) ),( (Float)(objY) ),HX_("Low Quality",f3,10,75,e8),70,null());
HXLINE( 981)		this->highQualityCheckbox =  ::backend::ui::PsychUICheckBox_obj::__alloc( HX_CTX ,( (Float)((objX + 90)) ),( (Float)(objY) ),HX_("High Quality",01,26,05,a1),70,null());
HXLINE( 982)		this->lowQualityCheckbox->onClick = recalcFilter;
HXLINE( 983)		this->highQualityCheckbox->onClick = recalcFilter;
HXLINE( 984)		tab_group->add(this->lowQualityCheckbox).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 985)		tab_group->add(this->highQualityCheckbox).StaticCast<  ::flixel::FlxSprite >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,addObjectTab,(void))

void StageEditorState_obj::addMetaTab(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::StageEditorState,_gthis) HXARGC(1)
            			void _hx_run( ::haxe::ds::StringMap newSave){
            				HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1037_addMetaTab)
HXLINE(1038)				int len = 0;
HXLINE(1039)				{
HXLINE(1039)					 ::Dynamic name = newSave->keys();
HXDLIN(1039)					while(( (bool)(name->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1039)						::String name1 = ( (::String)(name->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1040)						len = (len + 1);
            					}
            				}
HXLINE(1042)				_gthis->stageJson->__SetField(HX_("preload",c9,47,43,35), ::Dynamic(::hx::Anon_obj::Create(0)),::hx::paccDynamic);
HXLINE(1043)				{
HXLINE(1043)					::Dynamic map = newSave;
HXDLIN(1043)					::Dynamic _g_map = map;
HXDLIN(1043)					 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN(1043)					while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1043)						::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(1043)						int _g_value = ( (int)(::haxe::IMap_obj::get(_g_map,key)) );
HXDLIN(1043)						::String _g_key = key;
HXDLIN(1043)						::String key1 = _g_key;
HXDLIN(1043)						int value = _g_value;
HXLINE(1045)						::Reflect_obj::setField( ::Dynamic(_gthis->stageJson->__Field(HX_("preload",c9,47,43,35),::hx::paccDynamic)),key1,value);
            					}
            				}
HXLINE(1047)				_gthis->unsavedProgress = true;
HXLINE(1048)				_gthis->showOutput(((HX_("Saved new Preload List with ",a8,0b,c1,c2) + len) + HX_(" files/folders!",74,bc,5d,54)),null());
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1011_addMetaTab)
HXLINE(1012)			::Array< ::String > lockedList = ::Array_obj< ::String >::__new(0);
HXLINE(1013)			 ::haxe::ds::StringMap currentMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1014)			{
HXLINE(1014)				int _g = 0;
HXDLIN(1014)				::Array< ::Dynamic> _g1 = _gthis->stageSprites;
HXDLIN(1014)				while((_g < _g1->length)){
HXLINE(1014)					 ::states::editors::StageEditorMetaSprite spr = _g1->__get(_g).StaticCast<  ::states::editors::StageEditorMetaSprite >();
HXDLIN(1014)					_g = (_g + 1);
HXLINE(1016)					bool openPreloadButton;
HXDLIN(1016)					if (::hx::IsNotNull( spr )) {
HXLINE(1016)						openPreloadButton = ::backend::StageData_obj::reservedNames->contains(spr->type);
            					}
            					else {
HXLINE(1016)						openPreloadButton = true;
            					}
HXDLIN(1016)					if (openPreloadButton) {
HXLINE(1016)						continue;
            					}
HXLINE(1018)					::String _hx_switch_0 = spr->type;
            					if (  (_hx_switch_0==HX_("animatedSprite",08,df,a8,cb)) ||  (_hx_switch_0==HX_("sprite",05,dc,95,c3)) ){
HXLINE(1021)						bool openPreloadButton1;
HXDLIN(1021)						bool openPreloadButton2;
HXDLIN(1021)						if (::hx::IsNotNull( spr->image )) {
HXLINE(1021)							openPreloadButton2 = (spr->image.length > 0);
            						}
            						else {
HXLINE(1021)							openPreloadButton2 = false;
            						}
HXDLIN(1021)						if (openPreloadButton2) {
HXLINE(1021)							openPreloadButton1 = !(lockedList->contains(spr->image));
            						}
            						else {
HXLINE(1021)							openPreloadButton1 = false;
            						}
HXDLIN(1021)						if (openPreloadButton1) {
HXLINE(1022)							lockedList->push(spr->image);
            						}
HXLINE(1021)						goto _hx_goto_79;
            					}
            					_hx_goto_79:;
            				}
            			}
HXLINE(1026)			if (::hx::IsNotNull( _gthis->stageJson->__Field(HX_("preload",c9,47,43,35),::hx::paccDynamic) )) {
HXLINE(1028)				int _g2 = 0;
HXDLIN(1028)				::Array< ::String > _g3 = ::Reflect_obj::fields( ::Dynamic(_gthis->stageJson->__Field(HX_("preload",c9,47,43,35),::hx::paccDynamic)));
HXDLIN(1028)				while((_g2 < _g3->length)){
HXLINE(1028)					::String field = _g3->__get(_g2);
HXDLIN(1028)					_g2 = (_g2 + 1);
HXLINE(1030)					bool openPreloadButton3;
HXDLIN(1030)					if (!(currentMap->exists(field))) {
HXLINE(1030)						openPreloadButton3 = !(lockedList->contains(field));
            					}
            					else {
HXLINE(1030)						openPreloadButton3 = false;
            					}
HXDLIN(1030)					if (openPreloadButton3) {
HXLINE(1031)						currentMap->set(field,( (int)(::Reflect_obj::field( ::Dynamic(_gthis->stageJson->__Field(HX_("preload",c9,47,43,35),::hx::paccDynamic)),field)) ));
            					}
            				}
            			}
HXLINE(1035)			_gthis->destroySubStates = true;
HXLINE(1036)			 ::states::editors::StageEditorState _gthis1 = _gthis;
HXDLIN(1036)			_gthis1->openSubState( ::states::editors::content::PreloadListSubState_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0(_gthis)),lockedList,currentMap));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::StageEditorState,_gthis) HXARGC(2)
            		void _hx_run(::String data,::String _hx_char){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1053_addMetaTab)
HXLINE(1054)			if (::hx::IsNull( _gthis->stageJson->__Field(HX_("_editorMeta",31,60,20,9c),::hx::paccDynamic) )) {
HXLINE(1054)				_gthis->stageJson->__SetField(HX_("_editorMeta",31,60,20,9c), ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("boyfriend",6a,29,b8,e6),HX_("bf",c4,55,00,00))
            					->setFixed(1,HX_("gf",1f,5a,00,00),HX_("gf",1f,5a,00,00))
            					->setFixed(2,HX_("dad",47,36,4c,00),HX_("dad",47,36,4c,00))),::hx::paccDynamic);
            			}
HXLINE(1055)			::Reflect_obj::setField( ::Dynamic(_gthis->stageJson->__Field(HX_("_editorMeta",31,60,20,9c),::hx::paccDynamic)),data,_hx_char);
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::states::editors::StageEditorState,_gthis, ::Dynamic,setMetaData) HXARGC(2)
            		void _hx_run(int sel,::String selected){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1060_addMetaTab)
HXLINE(1061)			bool _hx_tmp;
HXDLIN(1061)			if (::hx::IsNotNull( selected )) {
HXLINE(1061)				_hx_tmp = (selected.length < 1);
            			}
            			else {
HXLINE(1061)				_hx_tmp = true;
            			}
HXDLIN(1061)			if (_hx_tmp) {
HXLINE(1061)				return;
            			}
HXLINE(1062)			_gthis->dad->changeCharacter(selected);
HXLINE(1063)			setMetaData(HX_("dad",47,36,4c,00),selected);
HXLINE(1064)			_gthis->repositionDad();
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_4, ::states::editors::StageEditorState,_gthis, ::Dynamic,setMetaData) HXARGC(2)
            		void _hx_run(int sel,::String selected){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1070_addMetaTab)
HXLINE(1071)			bool _hx_tmp;
HXDLIN(1071)			if (::hx::IsNotNull( selected )) {
HXLINE(1071)				_hx_tmp = (selected.length < 1);
            			}
            			else {
HXLINE(1071)				_hx_tmp = true;
            			}
HXDLIN(1071)			if (_hx_tmp) {
HXLINE(1071)				return;
            			}
HXLINE(1072)			_gthis->gf->changeCharacter(selected);
HXLINE(1073)			setMetaData(HX_("gf",1f,5a,00,00),selected);
HXLINE(1074)			_gthis->repositionGirlfriend();
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_5, ::states::editors::StageEditorState,_gthis, ::Dynamic,setMetaData) HXARGC(2)
            		void _hx_run(int sel,::String selected){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1080_addMetaTab)
HXLINE(1081)			bool _hx_tmp;
HXDLIN(1081)			if (::hx::IsNotNull( selected )) {
HXLINE(1081)				_hx_tmp = (selected.length < 1);
            			}
            			else {
HXLINE(1081)				_hx_tmp = true;
            			}
HXDLIN(1081)			if (_hx_tmp) {
HXLINE(1081)				return;
            			}
HXLINE(1082)			_gthis->boyfriend->changeCharacter(selected);
HXLINE(1083)			setMetaData(HX_("boyfriend",6a,29,b8,e6),selected);
HXLINE(1084)			_gthis->repositionBoyfriend();
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_992_addMetaTab)
HXDLIN( 992)		 ::states::editors::StageEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 993)		 ::flixel::group::FlxTypedSpriteGroup tab_group = this->UI_box->getTab(HX_("Meta",e5,76,32,33))->menu;
HXLINE( 995)		::String defaultDirectory = null();
HXDLIN( 995)		bool allowDuplicates = false;
HXDLIN( 995)		if (::hx::IsNull( defaultDirectory )) {
HXLINE(  69)			defaultDirectory = HX_("assets/shared/",1e,69,1e,47);
            		}
HXLINE(  70)		defaultDirectory = ::StringTools_obj::trim(defaultDirectory);
HXLINE( 995)		if (!(::StringTools_obj::endsWith(defaultDirectory,HX_("/",2f,00,00,00)))) {
HXLINE( 995)			defaultDirectory = (defaultDirectory + HX_("/",2f,00,00,00));
            		}
HXDLIN( 995)		if (!(::StringTools_obj::startsWith(defaultDirectory,HX_("assets/",4c,2a,dc,36)))) {
HXLINE(  72)			defaultDirectory = (HX_("assets/",4c,2a,dc,36) + defaultDirectory);
            		}
HXLINE( 995)		::Array< ::String > mergedList = ::Array_obj< ::String >::__new(0);
HXDLIN( 995)		::Array< ::String > foldersToCheck = ::Array_obj< ::String >::__new(0);
HXDLIN( 995)		if (::sys::FileSystem_obj::exists((defaultDirectory + HX_("data/characterList.txt",c4,ce,ff,de)))) {
HXLINE( 995)			foldersToCheck->push((defaultDirectory + HX_("data/characterList.txt",c4,ce,ff,de)));
            		}
HXDLIN( 995)		bool _hx_tmp;
HXDLIN( 995)		if (::hx::IsNotNull( ::backend::Paths_obj::currentLevel )) {
HXLINE( 995)			_hx_tmp = (::backend::Paths_obj::currentLevel != defaultDirectory);
            		}
            		else {
HXLINE( 995)			_hx_tmp = false;
            		}
HXDLIN( 995)		if (_hx_tmp) {
HXLINE( 995)			::String folder = ::backend::Paths_obj::currentLevel;
HXDLIN( 995)			if (::hx::IsNull( folder )) {
HXLINE( 104)				folder = HX_("shared",a5,5e,2b,1d);
            			}
HXLINE( 995)			::String pth = (((HX_("assets/",4c,2a,dc,36) + folder) + HX_("/",2f,00,00,00)) + HX_("data/characterList.txt",c4,ce,ff,de));
HXDLIN( 995)			bool _hx_tmp1;
HXDLIN( 995)			if (!(foldersToCheck->contains(pth))) {
HXLINE( 995)				_hx_tmp1 = ::sys::FileSystem_obj::exists(pth);
            			}
            			else {
HXLINE( 995)				_hx_tmp1 = false;
            			}
HXDLIN( 995)			if (_hx_tmp1) {
HXLINE( 995)				foldersToCheck->push(pth);
            			}
            		}
HXDLIN( 995)		{
HXLINE( 995)			{
HXLINE( 995)				int _g = 0;
HXDLIN( 995)				::Array< ::String > _g1 = ::backend::Mods_obj::globalMods;
HXDLIN( 995)				while((_g < _g1->length)){
HXLINE( 995)					::String mod = _g1->__get(_g);
HXDLIN( 995)					_g = (_g + 1);
HXDLIN( 995)					::String key = ((mod + HX_("/",2f,00,00,00)) + HX_("data/characterList.txt",c4,ce,ff,de));
HXDLIN( 995)					if (::hx::IsNull( key )) {
HXLINE( 115)						key = HX_("",00,00,00,00);
            					}
HXLINE( 995)					::String folder1 = (HX_("mods/",9e,2f,58,0c) + key);
HXDLIN( 995)					bool _hx_tmp2;
HXDLIN( 995)					if (::sys::FileSystem_obj::exists(folder1)) {
HXLINE( 995)						_hx_tmp2 = !(foldersToCheck->contains(folder1));
            					}
            					else {
HXLINE( 995)						_hx_tmp2 = false;
            					}
HXDLIN( 995)					if (_hx_tmp2) {
HXLINE( 995)						foldersToCheck->push(folder1);
            					}
            				}
            			}
HXDLIN( 995)			::String key1 = HX_("data/characterList.txt",c4,ce,ff,de);
HXDLIN( 995)			if (::hx::IsNull( key1 )) {
HXLINE( 120)				key1 = HX_("",00,00,00,00);
            			}
HXLINE( 995)			::String folder2 = (HX_("mods/",9e,2f,58,0c) + key1);
HXDLIN( 995)			bool _hx_tmp3;
HXDLIN( 995)			if (::sys::FileSystem_obj::exists(folder2)) {
HXLINE( 995)				_hx_tmp3 = !(foldersToCheck->contains(folder2));
            			}
            			else {
HXLINE( 995)				_hx_tmp3 = false;
            			}
HXDLIN( 995)			if (_hx_tmp3) {
HXLINE( 995)				::String key2 = HX_("data/characterList.txt",c4,ce,ff,de);
HXDLIN( 995)				if (::hx::IsNull( key2 )) {
HXLINE( 121)					key2 = HX_("",00,00,00,00);
            				}
HXLINE( 995)				foldersToCheck->push((HX_("mods/",9e,2f,58,0c) + key2));
            			}
HXDLIN( 995)			bool _hx_tmp4;
HXDLIN( 995)			if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE( 995)				_hx_tmp4 = (::backend::Mods_obj::currentModDirectory.length > 0);
            			}
            			else {
HXLINE( 995)				_hx_tmp4 = false;
            			}
HXDLIN( 995)			if (_hx_tmp4) {
HXLINE( 995)				::String key3 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + HX_("data/characterList.txt",c4,ce,ff,de));
HXDLIN( 995)				if (::hx::IsNull( key3 )) {
HXLINE( 126)					key3 = HX_("",00,00,00,00);
            				}
HXLINE( 995)				::String folder3 = (HX_("mods/",9e,2f,58,0c) + key3);
HXDLIN( 995)				bool _hx_tmp5;
HXDLIN( 995)				if (::sys::FileSystem_obj::exists(folder3)) {
HXLINE( 995)					_hx_tmp5 = !(foldersToCheck->contains(folder3));
            				}
            				else {
HXLINE( 995)					_hx_tmp5 = false;
            				}
HXDLIN( 995)				if (_hx_tmp5) {
HXLINE( 995)					foldersToCheck->push(folder3);
            				}
            			}
            		}
HXDLIN( 995)		::Array< ::String > paths = foldersToCheck;
HXDLIN( 995)		::String defaultPath = (defaultDirectory + HX_("data/characterList.txt",c4,ce,ff,de));
HXDLIN( 995)		if (paths->contains(defaultPath)) {
HXLINE( 995)			paths->remove(defaultPath);
HXDLIN( 995)			paths->insert(0,defaultPath);
            		}
HXDLIN( 995)		{
HXLINE( 995)			int _g2 = 0;
HXDLIN( 995)			while((_g2 < paths->length)){
HXLINE( 995)				::String file = paths->__get(_g2);
HXDLIN( 995)				_g2 = (_g2 + 1);
HXDLIN( 995)				::String daList = null();
HXDLIN( 995)				if (::sys::FileSystem_obj::exists(file)) {
HXLINE(  48)					daList = ::sys::io::File_obj::getContent(file);
            				}
HXLINE( 995)				::Array< ::String > list;
HXDLIN( 995)				if (::hx::IsNotNull( daList )) {
HXLINE( 995)					::Array< ::String > daList1 = ::Array_obj< ::String >::__new(0);
HXLINE(  69)					daList1 = ::StringTools_obj::trim(daList).split(HX_("\n",0a,00,00,00));
HXLINE( 995)					{
HXLINE( 995)						int _g3 = 0;
HXDLIN( 995)						int _g4 = daList1->length;
HXDLIN( 995)						while((_g3 < _g4)){
HXLINE( 995)							_g3 = (_g3 + 1);
HXDLIN( 995)							int i = (_g3 - 1);
HXDLIN( 995)							daList1[i] = ::StringTools_obj::trim(daList1->__get(i));
            						}
            					}
HXDLIN( 995)					list = daList1;
            				}
            				else {
HXLINE( 995)					list = ::Array_obj< ::String >::__new(0);
            				}
HXDLIN( 995)				{
HXLINE( 995)					int _g5 = 0;
HXDLIN( 995)					while((_g5 < list->length)){
HXLINE( 995)						::String value = list->__get(_g5);
HXDLIN( 995)						_g5 = (_g5 + 1);
HXDLIN( 995)						bool _hx_tmp6;
HXDLIN( 995)						bool _hx_tmp7;
HXDLIN( 995)						if (!(allowDuplicates)) {
HXLINE( 995)							_hx_tmp7 = !(mergedList->contains(value));
            						}
            						else {
HXLINE( 995)							_hx_tmp7 = true;
            						}
HXDLIN( 995)						if (_hx_tmp7) {
HXLINE( 995)							_hx_tmp6 = (value.length > 0);
            						}
            						else {
HXLINE( 995)							_hx_tmp6 = false;
            						}
HXDLIN( 995)						if (_hx_tmp6) {
HXLINE( 995)							mergedList->push(value);
            						}
            					}
            				}
            			}
            		}
HXDLIN( 995)		::Array< ::String > characterList = mergedList;
HXLINE( 996)		::Array< ::String > foldersToCheck1 = ::Array_obj< ::String >::__new(0);
HXDLIN( 996)		if (::sys::FileSystem_obj::exists((HX_("assets/shared/",1e,69,1e,47) + HX_("characters/",45,3c,bf,be)))) {
HXLINE( 996)			foldersToCheck1->push((HX_("assets/shared/",1e,69,1e,47) + HX_("characters/",45,3c,bf,be)));
            		}
HXDLIN( 996)		bool _hx_tmp8;
HXDLIN( 996)		if (::hx::IsNotNull( ::backend::Paths_obj::currentLevel )) {
HXLINE( 996)			_hx_tmp8 = (::backend::Paths_obj::currentLevel != HX_("assets/shared/",1e,69,1e,47));
            		}
            		else {
HXLINE( 996)			_hx_tmp8 = false;
            		}
HXDLIN( 996)		if (_hx_tmp8) {
HXLINE( 996)			::String folder4 = ::backend::Paths_obj::currentLevel;
HXDLIN( 996)			if (::hx::IsNull( folder4 )) {
HXLINE( 104)				folder4 = HX_("shared",a5,5e,2b,1d);
            			}
HXLINE( 996)			::String pth1 = (((HX_("assets/",4c,2a,dc,36) + folder4) + HX_("/",2f,00,00,00)) + HX_("characters/",45,3c,bf,be));
HXDLIN( 996)			bool _hx_tmp9;
HXDLIN( 996)			if (!(foldersToCheck1->contains(pth1))) {
HXLINE( 996)				_hx_tmp9 = ::sys::FileSystem_obj::exists(pth1);
            			}
            			else {
HXLINE( 996)				_hx_tmp9 = false;
            			}
HXDLIN( 996)			if (_hx_tmp9) {
HXLINE( 996)				foldersToCheck1->push(pth1);
            			}
            		}
HXDLIN( 996)		{
HXLINE( 996)			{
HXLINE( 996)				int _g6 = 0;
HXDLIN( 996)				::Array< ::String > _g7 = ::backend::Mods_obj::globalMods;
HXDLIN( 996)				while((_g6 < _g7->length)){
HXLINE( 996)					::String mod1 = _g7->__get(_g6);
HXDLIN( 996)					_g6 = (_g6 + 1);
HXDLIN( 996)					::String key4 = ((mod1 + HX_("/",2f,00,00,00)) + HX_("characters/",45,3c,bf,be));
HXDLIN( 996)					if (::hx::IsNull( key4 )) {
HXLINE( 115)						key4 = HX_("",00,00,00,00);
            					}
HXLINE( 996)					::String folder5 = (HX_("mods/",9e,2f,58,0c) + key4);
HXDLIN( 996)					bool _hx_tmp10;
HXDLIN( 996)					if (::sys::FileSystem_obj::exists(folder5)) {
HXLINE( 996)						_hx_tmp10 = !(foldersToCheck1->contains(folder5));
            					}
            					else {
HXLINE( 996)						_hx_tmp10 = false;
            					}
HXDLIN( 996)					if (_hx_tmp10) {
HXLINE( 996)						foldersToCheck1->push(folder5);
            					}
            				}
            			}
HXDLIN( 996)			::String key5 = HX_("characters/",45,3c,bf,be);
HXDLIN( 996)			if (::hx::IsNull( key5 )) {
HXLINE( 120)				key5 = HX_("",00,00,00,00);
            			}
HXLINE( 996)			::String folder6 = (HX_("mods/",9e,2f,58,0c) + key5);
HXDLIN( 996)			bool _hx_tmp11;
HXDLIN( 996)			if (::sys::FileSystem_obj::exists(folder6)) {
HXLINE( 996)				_hx_tmp11 = !(foldersToCheck1->contains(folder6));
            			}
            			else {
HXLINE( 996)				_hx_tmp11 = false;
            			}
HXDLIN( 996)			if (_hx_tmp11) {
HXLINE( 996)				::String key6 = HX_("characters/",45,3c,bf,be);
HXDLIN( 996)				if (::hx::IsNull( key6 )) {
HXLINE( 121)					key6 = HX_("",00,00,00,00);
            				}
HXLINE( 996)				foldersToCheck1->push((HX_("mods/",9e,2f,58,0c) + key6));
            			}
HXDLIN( 996)			bool _hx_tmp12;
HXDLIN( 996)			if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE( 996)				_hx_tmp12 = (::backend::Mods_obj::currentModDirectory.length > 0);
            			}
            			else {
HXLINE( 996)				_hx_tmp12 = false;
            			}
HXDLIN( 996)			if (_hx_tmp12) {
HXLINE( 996)				::String key7 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + HX_("characters/",45,3c,bf,be));
HXDLIN( 996)				if (::hx::IsNull( key7 )) {
HXLINE( 126)					key7 = HX_("",00,00,00,00);
            				}
HXLINE( 996)				::String folder7 = (HX_("mods/",9e,2f,58,0c) + key7);
HXDLIN( 996)				bool _hx_tmp13;
HXDLIN( 996)				if (::sys::FileSystem_obj::exists(folder7)) {
HXLINE( 996)					_hx_tmp13 = !(foldersToCheck1->contains(folder7));
            				}
            				else {
HXLINE( 996)					_hx_tmp13 = false;
            				}
HXDLIN( 996)				if (_hx_tmp13) {
HXLINE( 996)					foldersToCheck1->push(folder7);
            				}
            			}
            		}
HXDLIN( 996)		::Array< ::String > foldersToCheck2 = foldersToCheck1;
HXLINE( 997)		{
HXLINE( 997)			int _g8 = 0;
HXDLIN( 997)			while((_g8 < foldersToCheck2->length)){
HXLINE( 997)				::String folder8 = foldersToCheck2->__get(_g8);
HXDLIN( 997)				_g8 = (_g8 + 1);
HXLINE( 998)				{
HXLINE( 998)					int _g9 = 0;
HXDLIN( 998)					::Array< ::String > _g10 = ::sys::FileSystem_obj::readDirectory(folder8);
HXDLIN( 998)					while((_g9 < _g10->length)){
HXLINE( 998)						::String file1 = _g10->__get(_g9);
HXDLIN( 998)						_g9 = (_g9 + 1);
HXLINE( 999)						if (::StringTools_obj::endsWith(file1.toLowerCase(),HX_(".json",56,f1,d6,c2))) {
HXLINE(1001)							::String charToCheck = file1.substr(0,(file1.length - 5));
HXLINE(1002)							if (!(characterList->contains(charToCheck))) {
HXLINE(1003)								characterList->push(charToCheck);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1006)		if ((characterList->length < 1)) {
HXLINE(1006)			characterList->push(HX_("",00,00,00,00));
            		}
HXLINE(1008)		int objX = 10;
HXLINE(1009)		int objY = 20;
HXLINE(1011)		 ::backend::ui::PsychUIButton openPreloadButton =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,objX,objY,HX_("Preload List",55,04,a8,f3), ::Dynamic(new _hx_Closure_1(_gthis)),null(),null());
HXLINE(1052)		 ::Dynamic setMetaData =  ::Dynamic(new _hx_Closure_2(_gthis));
HXLINE(1058)		objY = (objY + 60);
HXLINE(1059)		this->oppDropdown =  ::backend::ui::PsychUIDropDownMenu_obj::__alloc( HX_CTX ,( (Float)(objX) ),( (Float)(objY) ),characterList, ::Dynamic(new _hx_Closure_3(_gthis,setMetaData)),null());
HXLINE(1066)		this->oppDropdown->set_selectedLabel(this->dad->curCharacter);
HXLINE(1068)		objY = (objY + 60);
HXLINE(1069)		this->gfDropdown =  ::backend::ui::PsychUIDropDownMenu_obj::__alloc( HX_CTX ,( (Float)(objX) ),( (Float)(objY) ),characterList, ::Dynamic(new _hx_Closure_4(_gthis,setMetaData)),null());
HXLINE(1076)		this->gfDropdown->set_selectedLabel(this->gf->curCharacter);
HXLINE(1078)		objY = (objY + 60);
HXLINE(1079)		this->plDropdown =  ::backend::ui::PsychUIDropDownMenu_obj::__alloc( HX_CTX ,( (Float)(objX) ),( (Float)(objY) ),characterList, ::Dynamic(new _hx_Closure_5(_gthis,setMetaData)),null());
HXLINE(1086)		this->plDropdown->set_selectedLabel(this->boyfriend->curCharacter);
HXLINE(1088)		tab_group->add(openPreloadButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1089)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->plDropdown->x,(this->plDropdown->y - ( (Float)(18) )),100,HX_("Player:",99,31,66,57),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1090)		tab_group->add(this->plDropdown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1091)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->gfDropdown->x,(this->gfDropdown->y - ( (Float)(18) )),100,HX_("Girlfriend:",20,89,69,8b),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1092)		tab_group->add(this->gfDropdown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1093)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->oppDropdown->x,(this->oppDropdown->y - ( (Float)(18) )),100,HX_("Opponent:",dd,8f,bc,4a),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1094)		tab_group->add(this->oppDropdown).StaticCast<  ::flixel::FlxSprite >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,addMetaTab,(void))

void StageEditorState_obj::addStageTab(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1102_addStageTab)
HXLINE(1104)			::backend::DiscordClient_obj::changePresence(HX_("Stage Editor",0f,63,39,a5),(HX_("Stage: ",c4,70,1b,fb) + _gthis->lastLoadedStage),null(),null(),null(),null());
HXLINE(1107)			_gthis->stageJson = ::backend::StageData_obj::getStageFile(_gthis->lastLoadedStage);
HXLINE(1108)			_gthis->updateSpriteList();
HXLINE(1109)			_gthis->updateStageDataUI();
HXLINE(1110)			_gthis->reloadCharacters();
HXLINE(1111)			_gthis->reloadStageDropDown();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1115_addStageTab)
HXLINE(1117)			::backend::DiscordClient_obj::changePresence(HX_("Stage Editor",0f,63,39,a5),HX_("New Stage",be,9e,93,0d),null(),null(),null(),null());
HXLINE(1120)			_gthis->stageJson = ::backend::StageData_obj::dummy();
HXLINE(1121)			_gthis->updateSpriteList();
HXLINE(1122)			_gthis->updateStageDataUI();
HXLINE(1123)			_gthis->reloadCharacters();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::states::editors::StageEditorState,_gthis) HXARGC(2)
            		void _hx_run(int sel,::String selected){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1129_addStageTab)
HXLINE(1130)			::String characterPath = ((HX_("stages/",9a,7a,ca,2d) + selected) + HX_(".json",56,f1,d6,c2));
HXLINE(1131)			::String path = ::backend::Paths_obj::getPath(characterPath,HX_("TEXT",ad,94,ba,37),null(),true);
HXLINE(1133)			if (::sys::FileSystem_obj::exists(path)) {
HXLINE(1138)				_gthis->stageJson = ::backend::StageData_obj::getStageFile(selected);
HXLINE(1139)				_gthis->lastLoadedStage = selected;
HXLINE(1141)				::backend::DiscordClient_obj::changePresence(HX_("Stage Editor",0f,63,39,a5),(HX_("Stage: ",c4,70,1b,fb) + _gthis->lastLoadedStage),null(),null(),null(),null());
HXLINE(1143)				_gthis->updateSpriteList();
HXLINE(1144)				_gthis->updateStageDataUI();
HXLINE(1145)				_gthis->reloadCharacters();
HXLINE(1146)				_gthis->reloadStageDropDown();
            			}
            			else {
HXLINE(1150)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1150)				_hx_tmp->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("cancelMenu",39,a4,43,b7)),null(),true,null()),null(),null(),null(),null(),null());
HXLINE(1151)				_gthis->reloadStageDropDown();
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1099_addStageTab)
HXDLIN(1099)		 ::states::editors::StageEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1100)		 ::flixel::group::FlxTypedSpriteGroup tab_group = this->UI_stagebox->getTab(HX_("Stage",9e,da,38,17))->menu;
HXLINE(1101)		 ::backend::ui::PsychUIButton reloadStage =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,140,10,HX_("Reload",79,c7,73,38), ::Dynamic(new _hx_Closure_0(_gthis)),null(),null());
HXLINE(1114)		 ::backend::ui::PsychUIButton dummyStage =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,140,40,HX_("Load Template",74,05,aa,0c), ::Dynamic(new _hx_Closure_1(_gthis)),null(),null());
HXLINE(1125)		dummyStage->normalStyle->__SetField(HX_("bgColor",5e,81,83,f7),-65536,::hx::paccDynamic);
HXLINE(1126)		dummyStage->normalStyle->__SetField(HX_("textColor",76,01,4a,e3),-1,::hx::paccDynamic);
HXLINE(1128)		this->stageDropDown =  ::backend::ui::PsychUIDropDownMenu_obj::__alloc( HX_CTX ,( (Float)(10) ),( (Float)(30) ),::Array_obj< ::String >::fromData( _hx_array_data_81b1371a_94,1), ::Dynamic(new _hx_Closure_2(_gthis)),null());
HXLINE(1154)		this->reloadStageDropDown();
HXLINE(1156)		tab_group->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->stageDropDown->x,(this->stageDropDown->y - ( (Float)(18) )),60,HX_("Stage:",dc,6f,86,3a),null(),null())).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1157)		tab_group->add(reloadStage).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1158)		tab_group->add(dummyStage).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1159)		tab_group->add(this->stageDropDown).StaticCast<  ::flixel::FlxSprite >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,addStageTab,(void))

void StageEditorState_obj::updateStageDataUI(){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1163_updateStageDataUI)
HXLINE(1165)		::String _hx_tmp;
HXDLIN(1165)		if (::hx::IsNotNull( this->stageJson->__Field(HX_("stageUI",92,60,ca,2d),::hx::paccDynamic) )) {
HXLINE(1165)			_hx_tmp = ( (::String)(this->stageJson->__Field(HX_("stageUI",92,60,ca,2d),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(1165)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN(1165)		this->uiInputText->set_text(_hx_tmp);
HXLINE(1167)		this->hideGirlfriendCheckbox->set_checked( ::Dynamic(this->stageJson->__Field(HX_("hide_girlfriend",57,bd,d9,f9),::hx::paccDynamic)));
HXLINE(1168)		this->gf->set_visible(!(this->hideGirlfriendCheckbox->checked));
HXLINE(1170)		 ::backend::ui::PsychUINumericStepper _hx_tmp1 = this->zoomStepper;
HXDLIN(1170)		_hx_tmp1->set_value(::flixel::FlxG_obj::camera->set_zoom(( (Float)(this->stageJson->__Field(HX_("defaultZoom",74,9c,b7,22),::hx::paccDynamic)) )));
HXLINE(1172)		if (::hx::IsNotNull( this->stageJson->__Field(HX_("camera_speed",2d,2f,ab,11),::hx::paccDynamic) )) {
HXLINE(1172)			this->cameraSpeedStepper->set_value(( (Float)(this->stageJson->__Field(HX_("camera_speed",2d,2f,ab,11),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE(1173)			this->cameraSpeedStepper->set_value(( (Float)(1) ));
            		}
HXLINE(1174)		::flixel::FlxG_obj::camera->set_followLerp((((Float)0.04) * this->cameraSpeedStepper->value));
HXLINE(1176)		bool _hx_tmp2;
HXDLIN(1176)		if (::hx::IsNotNull( this->stageJson->__Field(HX_("camera_opponent",b7,ed,08,84),::hx::paccDynamic) )) {
HXLINE(1176)			_hx_tmp2 = (( (::Array< Float >)(this->stageJson->__Field(HX_("camera_opponent",b7,ed,08,84),::hx::paccDynamic)) )->length > 1);
            		}
            		else {
HXLINE(1176)			_hx_tmp2 = false;
            		}
HXDLIN(1176)		if (_hx_tmp2) {
HXLINE(1178)			this->camDadStepperX->set_value(( (Float)( ::Dynamic(this->stageJson->__Field(HX_("camera_opponent",b7,ed,08,84),::hx::paccDynamic))->__GetItem(0)) ));
HXLINE(1179)			this->camDadStepperY->set_value(( (Float)( ::Dynamic(this->stageJson->__Field(HX_("camera_opponent",b7,ed,08,84),::hx::paccDynamic))->__GetItem(1)) ));
            		}
            		else {
HXLINE(1181)			 ::backend::ui::PsychUINumericStepper _hx_tmp3 = this->camDadStepperX;
HXDLIN(1181)			_hx_tmp3->set_value(this->camDadStepperY->set_value(( (Float)(0) )));
            		}
HXLINE(1183)		bool _hx_tmp4;
HXDLIN(1183)		if (::hx::IsNotNull( this->stageJson->__Field(HX_("camera_girlfriend",54,80,21,bf),::hx::paccDynamic) )) {
HXLINE(1183)			_hx_tmp4 = (( (::Array< Float >)(this->stageJson->__Field(HX_("camera_girlfriend",54,80,21,bf),::hx::paccDynamic)) )->length > 1);
            		}
            		else {
HXLINE(1183)			_hx_tmp4 = false;
            		}
HXDLIN(1183)		if (_hx_tmp4) {
HXLINE(1185)			this->camGfStepperX->set_value(( (Float)( ::Dynamic(this->stageJson->__Field(HX_("camera_girlfriend",54,80,21,bf),::hx::paccDynamic))->__GetItem(0)) ));
HXLINE(1186)			this->camGfStepperY->set_value(( (Float)( ::Dynamic(this->stageJson->__Field(HX_("camera_girlfriend",54,80,21,bf),::hx::paccDynamic))->__GetItem(1)) ));
            		}
            		else {
HXLINE(1188)			 ::backend::ui::PsychUINumericStepper _hx_tmp5 = this->camGfStepperX;
HXDLIN(1188)			_hx_tmp5->set_value(this->camGfStepperY->set_value(( (Float)(0) )));
            		}
HXLINE(1190)		bool _hx_tmp6;
HXDLIN(1190)		if (::hx::IsNotNull( this->stageJson->__Field(HX_("camera_boyfriend",10,8c,95,41),::hx::paccDynamic) )) {
HXLINE(1190)			_hx_tmp6 = (( (::Array< Float >)(this->stageJson->__Field(HX_("camera_boyfriend",10,8c,95,41),::hx::paccDynamic)) )->length > 1);
            		}
            		else {
HXLINE(1190)			_hx_tmp6 = false;
            		}
HXDLIN(1190)		if (_hx_tmp6) {
HXLINE(1192)			this->camBfStepperX->set_value(( (Float)( ::Dynamic(this->stageJson->__Field(HX_("camera_boyfriend",10,8c,95,41),::hx::paccDynamic))->__GetItem(0)) ));
HXLINE(1193)			this->camBfStepperY->set_value(( (Float)( ::Dynamic(this->stageJson->__Field(HX_("camera_boyfriend",10,8c,95,41),::hx::paccDynamic))->__GetItem(1)) ));
            		}
            		else {
HXLINE(1195)			 ::backend::ui::PsychUINumericStepper _hx_tmp7 = this->camBfStepperX;
HXDLIN(1195)			_hx_tmp7->set_value(this->camBfStepperY->set_value(( (Float)(0) )));
            		}
HXLINE(1197)		if ((this->focusRadioGroup->checked > -1)) {
HXLINE(1199)			 ::flixel::math::FlxBasePoint point = this->focusOnTarget(this->focusRadioGroup->labels->__get(this->focusRadioGroup->checked));
HXLINE(1200)			this->camFollow->setPosition(point->x,point->y);
            		}
HXLINE(1202)		this->loadJsonAssetDirectory();
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,updateStageDataUI,(void))

void StageEditorState_obj::updateSelectedUI(){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1206_updateSelectedUI)
HXLINE(1207)		this->posTxt->set_visible(false);
HXLINE(1208)		 ::states::editors::StageEditorMetaSprite selected = this->getSelected(false);
HXLINE(1209)		if (::hx::IsNull( selected )) {
HXLINE(1209)			return;
            		}
HXLINE(1211)		Float displayX = ( (Float)(::Math_obj::round(selected->get_x())) );
HXLINE(1212)		Float displayY = ( (Float)(::Math_obj::round(selected->get_y())) );
HXLINE(1214)		 ::objects::Character _hx_char = ( ( ::objects::Character)(selected->sprite) );
HXLINE(1215)		if (::hx::IsNotNull( _hx_char )) {
HXLINE(1217)			displayX = (displayX - _hx_char->positionArray->__get(0));
HXLINE(1218)			displayY = (displayY - _hx_char->positionArray->__get(1));
            		}
HXLINE(1221)		this->posTxt->set_text((((HX_("X: ",fe,f8,42,00) + displayX) + HX_("\nY: ",75,dd,df,06)) + displayY));
HXLINE(1222)		this->posTxt->set_visible(true);
HXLINE(1224)		 ::states::editors::StageEditorMetaSprite selected1 = this->getSelected(null());
HXLINE(1225)		if (::hx::IsNull( selected1 )) {
HXLINE(1225)			return;
            		}
HXLINE(1228)		this->colorInputText->set_text(selected1->color);
HXLINE(1229)		this->nameInputText->set_text(selected1->name);
HXLINE(1230)		this->imgTxt->set_text((HX_("Image: ",a1,46,c5,8e) + selected1->image));
HXLINE(1233)		if ((selected1->type != HX_("square",9d,00,f2,58))) {
HXLINE(1235)			 ::backend::ui::PsychUINumericStepper _hx_tmp = this->scaleStepperX;
HXDLIN(1235)			_hx_tmp->set_decimals(this->scaleStepperY->set_decimals(2));
HXLINE(1236)			 ::backend::ui::PsychUINumericStepper _hx_tmp1 = this->scaleStepperX;
HXDLIN(1236)			_hx_tmp1->set_max(this->scaleStepperY->set_max(( (Float)(10) )));
HXLINE(1237)			 ::backend::ui::PsychUINumericStepper _hx_tmp2 = this->scaleStepperX;
HXDLIN(1237)			_hx_tmp2->set_min(this->scaleStepperY->set_min(((Float)0.05)));
HXLINE(1238)			this->scaleStepperX->step = (this->scaleStepperY->step = ((Float)0.05));
            		}
            		else {
HXLINE(1242)			 ::backend::ui::PsychUINumericStepper _hx_tmp3 = this->scaleStepperX;
HXDLIN(1242)			_hx_tmp3->set_decimals(this->scaleStepperY->set_decimals(0));
HXLINE(1243)			 ::backend::ui::PsychUINumericStepper _hx_tmp4 = this->scaleStepperX;
HXDLIN(1243)			_hx_tmp4->set_max(this->scaleStepperY->set_max(( (Float)(10000) )));
HXLINE(1244)			 ::backend::ui::PsychUINumericStepper _hx_tmp5 = this->scaleStepperX;
HXDLIN(1244)			_hx_tmp5->set_min(this->scaleStepperY->set_min(( (Float)(50) )));
HXLINE(1245)			this->scaleStepperX->step = (this->scaleStepperY->step = ( (Float)(50) ));
            		}
HXLINE(1247)		this->scaleStepperX->set_value(selected1->scale->__get(0));
HXLINE(1248)		this->scaleStepperY->set_value(selected1->scale->__get(1));
HXLINE(1249)		this->scrollStepperX->set_value(selected1->scroll->__get(0));
HXLINE(1250)		this->scrollStepperY->set_value(selected1->scroll->__get(1));
HXLINE(1251)		 ::backend::ui::PsychUINumericStepper _hx_tmp6 = this->angleStepper;
HXDLIN(1251)		_hx_tmp6->set_value(selected1->get_angle());
HXLINE(1252)		 ::backend::ui::PsychUINumericStepper _hx_tmp7 = this->alphaStepper;
HXDLIN(1252)		_hx_tmp7->set_value(selected1->get_alpha());
HXLINE(1255)		this->antialiasingCheckbox->set_checked(selected1->antialiasing);
HXLINE(1256)		 ::backend::ui::PsychUICheckBox _hx_tmp8 = this->flipXCheckBox;
HXDLIN(1256)		_hx_tmp8->set_checked(selected1->get_flipX());
HXLINE(1257)		 ::backend::ui::PsychUICheckBox _hx_tmp9 = this->flipYCheckBox;
HXDLIN(1257)		_hx_tmp9->set_checked(selected1->get_flipY());
HXLINE(1258)		this->lowQualityCheckbox->set_checked(((selected1->filters & 1) == 1));
HXLINE(1259)		this->highQualityCheckbox->set_checked(((selected1->filters & 2) == 2));
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,updateSelectedUI,(void))

void StageEditorState_obj::reloadCharacters(){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1263_reloadCharacters)
HXLINE(1264)		if (::hx::IsNotNull( this->stageJson->__Field(HX_("_editorMeta",31,60,20,9c),::hx::paccDynamic) )) {
HXLINE(1266)			this->gf->changeCharacter(( (::String)( ::Dynamic(this->stageJson->__Field(HX_("_editorMeta",31,60,20,9c),::hx::paccDynamic))->__Field(HX_("gf",1f,5a,00,00),::hx::paccDynamic)) ));
HXLINE(1267)			this->dad->changeCharacter(( (::String)( ::Dynamic(this->stageJson->__Field(HX_("_editorMeta",31,60,20,9c),::hx::paccDynamic))->__Field(HX_("dad",47,36,4c,00),::hx::paccDynamic)) ));
HXLINE(1268)			this->boyfriend->changeCharacter(( (::String)( ::Dynamic(this->stageJson->__Field(HX_("_editorMeta",31,60,20,9c),::hx::paccDynamic))->__Field(HX_("boyfriend",6a,29,b8,e6),::hx::paccDynamic)) ));
            		}
HXLINE(1270)		this->repositionGirlfriend();
HXLINE(1271)		this->repositionDad();
HXLINE(1272)		this->repositionBoyfriend();
HXLINE(1274)		this->focusRadioGroup->set_checked(-1);
HXLINE(1275)		::flixel::FlxG_obj::camera->target = null();
HXLINE(1276)		 ::flixel::math::FlxBasePoint point = this->focusOnTarget(HX_("boyfriend",6a,29,b8,e6));
HXLINE(1277)		{
HXLINE(1277)			 ::flixel::math::FlxBasePoint this1 = ::flixel::FlxG_obj::camera->scroll;
HXDLIN(1277)			Float y = (point->y - (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )));
HXDLIN(1277)			this1->set_x((point->x - (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
HXDLIN(1277)			this1->set_y(y);
            		}
HXLINE(1278)		::flixel::FlxG_obj::camera->set_zoom(( (Float)(this->stageJson->__Field(HX_("defaultZoom",74,9c,b7,22),::hx::paccDynamic)) ));
HXLINE(1279)		this->oppDropdown->set_selectedLabel(this->dad->curCharacter);
HXLINE(1280)		this->gfDropdown->set_selectedLabel(this->gf->curCharacter);
HXLINE(1281)		this->plDropdown->set_selectedLabel(this->boyfriend->curCharacter);
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,reloadCharacters,(void))

void StageEditorState_obj::reloadStageDropDown(){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1285_reloadStageDropDown)
HXLINE(1286)		::Array< ::String > stageList = ::Array_obj< ::String >::__new(0);
HXLINE(1287)		::Array< ::String > foldersToCheck = ::Array_obj< ::String >::__new(0);
HXDLIN(1287)		if (::sys::FileSystem_obj::exists((HX_("assets/shared/",1e,69,1e,47) + HX_("stages/",9a,7a,ca,2d)))) {
HXLINE(1287)			foldersToCheck->push((HX_("assets/shared/",1e,69,1e,47) + HX_("stages/",9a,7a,ca,2d)));
            		}
HXDLIN(1287)		bool _hx_tmp;
HXDLIN(1287)		if (::hx::IsNotNull( ::backend::Paths_obj::currentLevel )) {
HXLINE(1287)			_hx_tmp = (::backend::Paths_obj::currentLevel != HX_("assets/shared/",1e,69,1e,47));
            		}
            		else {
HXLINE(1287)			_hx_tmp = false;
            		}
HXDLIN(1287)		if (_hx_tmp) {
HXLINE(1287)			::String folder = ::backend::Paths_obj::currentLevel;
HXDLIN(1287)			if (::hx::IsNull( folder )) {
HXLINE(1287)				folder = HX_("shared",a5,5e,2b,1d);
            			}
HXDLIN(1287)			::String pth = (((HX_("assets/",4c,2a,dc,36) + folder) + HX_("/",2f,00,00,00)) + HX_("stages/",9a,7a,ca,2d));
HXDLIN(1287)			bool _hx_tmp1;
HXDLIN(1287)			if (!(foldersToCheck->contains(pth))) {
HXLINE(1287)				_hx_tmp1 = ::sys::FileSystem_obj::exists(pth);
            			}
            			else {
HXLINE(1287)				_hx_tmp1 = false;
            			}
HXDLIN(1287)			if (_hx_tmp1) {
HXLINE(1287)				foldersToCheck->push(pth);
            			}
            		}
HXDLIN(1287)		{
HXLINE(1287)			{
HXLINE(1287)				int _g = 0;
HXDLIN(1287)				::Array< ::String > _g1 = ::backend::Mods_obj::globalMods;
HXDLIN(1287)				while((_g < _g1->length)){
HXLINE(1287)					::String mod = _g1->__get(_g);
HXDLIN(1287)					_g = (_g + 1);
HXDLIN(1287)					::String key = ((mod + HX_("/",2f,00,00,00)) + HX_("stages/",9a,7a,ca,2d));
HXDLIN(1287)					if (::hx::IsNull( key )) {
HXLINE(1287)						key = HX_("",00,00,00,00);
            					}
HXDLIN(1287)					::String folder1 = (HX_("mods/",9e,2f,58,0c) + key);
HXDLIN(1287)					bool _hx_tmp2;
HXDLIN(1287)					if (::sys::FileSystem_obj::exists(folder1)) {
HXLINE(1287)						_hx_tmp2 = !(foldersToCheck->contains(folder1));
            					}
            					else {
HXLINE(1287)						_hx_tmp2 = false;
            					}
HXDLIN(1287)					if (_hx_tmp2) {
HXLINE(1287)						foldersToCheck->push(folder1);
            					}
            				}
            			}
HXDLIN(1287)			::String key1 = HX_("stages/",9a,7a,ca,2d);
HXDLIN(1287)			if (::hx::IsNull( key1 )) {
HXLINE(1287)				key1 = HX_("",00,00,00,00);
            			}
HXDLIN(1287)			::String folder2 = (HX_("mods/",9e,2f,58,0c) + key1);
HXDLIN(1287)			bool _hx_tmp3;
HXDLIN(1287)			if (::sys::FileSystem_obj::exists(folder2)) {
HXLINE(1287)				_hx_tmp3 = !(foldersToCheck->contains(folder2));
            			}
            			else {
HXLINE(1287)				_hx_tmp3 = false;
            			}
HXDLIN(1287)			if (_hx_tmp3) {
HXLINE(1287)				::String key2 = HX_("stages/",9a,7a,ca,2d);
HXDLIN(1287)				if (::hx::IsNull( key2 )) {
HXLINE(1287)					key2 = HX_("",00,00,00,00);
            				}
HXDLIN(1287)				foldersToCheck->push((HX_("mods/",9e,2f,58,0c) + key2));
            			}
HXDLIN(1287)			bool _hx_tmp4;
HXDLIN(1287)			if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE(1287)				_hx_tmp4 = (::backend::Mods_obj::currentModDirectory.length > 0);
            			}
            			else {
HXLINE(1287)				_hx_tmp4 = false;
            			}
HXDLIN(1287)			if (_hx_tmp4) {
HXLINE(1287)				::String key3 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + HX_("stages/",9a,7a,ca,2d));
HXDLIN(1287)				if (::hx::IsNull( key3 )) {
HXLINE(1287)					key3 = HX_("",00,00,00,00);
            				}
HXDLIN(1287)				::String folder3 = (HX_("mods/",9e,2f,58,0c) + key3);
HXDLIN(1287)				bool _hx_tmp5;
HXDLIN(1287)				if (::sys::FileSystem_obj::exists(folder3)) {
HXLINE(1287)					_hx_tmp5 = !(foldersToCheck->contains(folder3));
            				}
            				else {
HXLINE(1287)					_hx_tmp5 = false;
            				}
HXDLIN(1287)				if (_hx_tmp5) {
HXLINE(1287)					foldersToCheck->push(folder3);
            				}
            			}
            		}
HXDLIN(1287)		::Array< ::String > foldersToCheck1 = foldersToCheck;
HXLINE(1288)		{
HXLINE(1288)			int _g2 = 0;
HXDLIN(1288)			while((_g2 < foldersToCheck1->length)){
HXLINE(1288)				::String folder4 = foldersToCheck1->__get(_g2);
HXDLIN(1288)				_g2 = (_g2 + 1);
HXLINE(1289)				{
HXLINE(1289)					int _g3 = 0;
HXDLIN(1289)					::Array< ::String > _g4 = ::sys::FileSystem_obj::readDirectory(folder4);
HXDLIN(1289)					while((_g3 < _g4->length)){
HXLINE(1289)						::String file = _g4->__get(_g3);
HXDLIN(1289)						_g3 = (_g3 + 1);
HXLINE(1290)						if (::StringTools_obj::endsWith(file.toLowerCase(),HX_(".json",56,f1,d6,c2))) {
HXLINE(1292)							::String stageToCheck = file.substr(0,(file.length - HX_(".json",56,f1,d6,c2).length));
HXLINE(1293)							if (!(stageList->contains(stageToCheck))) {
HXLINE(1294)								stageList->push(stageToCheck);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1297)		if ((stageList->length < 1)) {
HXLINE(1297)			stageList->push(HX_("",00,00,00,00));
            		}
HXLINE(1298)		this->stageDropDown->set_list(stageList);
HXLINE(1299)		this->stageDropDown->set_selectedLabel(this->lastLoadedStage);
HXLINE(1300)		this->directoryDropDown->set_selectedLabel(( (::String)(this->stageJson->__Field(HX_("directory",6d,f2,44,10),::hx::paccDynamic)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,reloadStageDropDown,(void))

void StageEditorState_obj::checkUIOnObject(){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1305_checkUIOnObject)
HXDLIN(1305)		if ((this->UI_box->selectedName == HX_("Object",df,f2,d3,49))) {
HXLINE(1307)			int selected = this->spriteListRadioGroup->checked;
HXLINE(1308)			if ((selected >= 0)) {
HXLINE(1310)				 ::states::editors::StageEditorMetaSprite spr = this->stageSprites->__get(((this->spriteListRadioGroup->labels->length - selected) - 1)).StaticCast<  ::states::editors::StageEditorMetaSprite >();
HXLINE(1311)				bool _hx_tmp;
HXDLIN(1311)				if (::hx::IsNotNull( spr )) {
HXLINE(1311)					_hx_tmp = ::backend::StageData_obj::reservedNames->contains(spr->type);
            				}
            				else {
HXLINE(1311)					_hx_tmp = false;
            				}
HXDLIN(1311)				if (_hx_tmp) {
HXLINE(1312)					this->UI_box->set_selectedName(HX_("Data",4a,82,3c,2d));
            				}
            			}
            			else {
HXLINE(1314)				this->UI_box->set_selectedName(HX_("Data",4a,82,3c,2d));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,checkUIOnObject,(void))

void StageEditorState_obj::UIEvent(::String id, ::Dynamic sender){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1320_UIEvent)
HXDLIN(1320)		::String _hx_switch_0 = id;
            		if (  (_hx_switch_0==::backend::ui::PsychUINumericStepper_obj::CHANGE_EVENT) ||  (_hx_switch_0==::backend::ui::PsychUIInputText_obj::CHANGE_EVENT) ){
HXLINE(1330)			this->unsavedProgress = true;
HXDLIN(1330)			goto _hx_goto_103;
            		}
            		if (  (_hx_switch_0==::backend::ui::PsychUIBox_obj::CLICK_EVENT) ||  (_hx_switch_0==::backend::ui::PsychUIRadioGroup_obj::CLICK_EVENT) ){
HXLINE(1323)			bool _hx_tmp;
HXDLIN(1323)			if (::hx::IsInstanceNotEq( sender,this->spriteListRadioGroup )) {
HXLINE(1323)				_hx_tmp = ::hx::IsInstanceEq( sender,this->UI_box );
            			}
            			else {
HXLINE(1323)				_hx_tmp = true;
            			}
HXDLIN(1323)			if (_hx_tmp) {
HXLINE(1324)				this->checkUIOnObject();
            			}
HXLINE(1323)			goto _hx_goto_103;
            		}
            		if (  (_hx_switch_0==::backend::ui::PsychUICheckBox_obj::CLICK_EVENT) ){
HXLINE(1327)			this->unsavedProgress = true;
HXDLIN(1327)			goto _hx_goto_103;
            		}
            		_hx_goto_103:;
            	}


HX_DEFINE_DYNAMIC_FUNC2(StageEditorState_obj,UIEvent,(void))

void StageEditorState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1336_update)
HXLINE(1337)		bool _hx_tmp;
HXDLIN(1337)		if (this->createPopup->visible) {
HXLINE(1337)			if ((::flixel::FlxG_obj::mouse->_rightButton->current != 2)) {
HXLINE(1337)				if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE(1337)					_hx_tmp = !(::flixel::FlxG_obj::mouse->overlaps(this->createPopup,this->camHUD));
            				}
            				else {
HXLINE(1337)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE(1337)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(1337)			_hx_tmp = false;
            		}
HXDLIN(1337)		if (_hx_tmp) {
HXLINE(1338)			 ::flixel::group::FlxTypedSpriteGroup _hx_tmp1 = this->createPopup;
HXDLIN(1338)			_hx_tmp1->set_visible(this->createPopup->set_active(false));
            		}
HXLINE(1340)		{
HXLINE(1340)			int _g = 0;
HXDLIN(1340)			::Array< ::Dynamic> _g1 = this->stageSprites;
HXDLIN(1340)			while((_g < _g1->length)){
HXLINE(1340)				 ::states::editors::StageEditorMetaSprite basic = _g1->__get(_g).StaticCast<  ::states::editors::StageEditorMetaSprite >();
HXDLIN(1340)				_g = (_g + 1);
HXLINE(1341)				basic->update(this->curFilters,elapsed);
            			}
            		}
HXLINE(1343)		this->super::update(elapsed);
HXLINE(1345)		this->outputTime = ::Math_obj::max(( (Float)(0) ),(this->outputTime - elapsed));
HXLINE(1346)		this->outputTxt->set_alpha(this->outputTime);
HXLINE(1348)		if (::hx::IsNotNull( ::backend::ui::PsychUIInputText_obj::focusOn )) {
HXLINE(1348)			return;
            		}
HXLINE(1350)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1350)		if (_this->keyManager->checkStatusUnsafe(27,_this->status)) {
HXLINE(1352)			if (!(this->unsavedProgress)) {
HXLINE(1354)				::backend::MusicBeatState_obj::switchState( ::states::editors::MasterEditorMenu_obj::__alloc( HX_CTX ));
HXLINE(1355)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN(1355)				_hx_tmp2->playMusic(::backend::Paths_obj::returnSound((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)),null(),true,null()),null(),null(),null());
            			}
            			else {
HXLINE(1357)				this->openSubState( ::states::editors::content::ExitConfirmationPrompt_obj::__alloc( HX_CTX ,null()));
            			}
HXLINE(1358)			return;
            		}
HXLINE(1361)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1361)		if (_this1->keyManager->checkStatusUnsafe(87,_this1->status)) {
HXLINE(1363)			 ::backend::ui::PsychUIRadioGroup _hx_tmp3 = this->spriteListRadioGroup;
HXDLIN(1363)			_hx_tmp3->set_checked(::flixel::math::FlxMath_obj::wrap((this->spriteListRadioGroup->checked - 1),0,(this->spriteListRadioGroup->labels->length - 1)));
HXLINE(1364)			::haxe::Log_obj::trace(this->spriteListRadioGroup->checked,::hx::SourceInfo(HX_("source/states/editors/StageEditorState.hx",16,7c,21,9d),1364,HX_("states.editors.StageEditorState",1a,37,b1,81),HX_("update",09,86,05,87)));
HXLINE(1365)			this->checkUIOnObject();
HXLINE(1366)			this->updateSelectedUI();
            		}
            		else {
HXLINE(1368)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1368)			if (_this2->keyManager->checkStatusUnsafe(83,_this2->status)) {
HXLINE(1370)				 ::backend::ui::PsychUIRadioGroup _hx_tmp4 = this->spriteListRadioGroup;
HXDLIN(1370)				_hx_tmp4->set_checked(::flixel::math::FlxMath_obj::wrap((this->spriteListRadioGroup->checked + 1),0,(this->spriteListRadioGroup->labels->length - 1)));
HXLINE(1371)				::haxe::Log_obj::trace(this->spriteListRadioGroup->checked,::hx::SourceInfo(HX_("source/states/editors/StageEditorState.hx",16,7c,21,9d),1371,HX_("states.editors.StageEditorState",1a,37,b1,81),HX_("update",09,86,05,87)));
HXLINE(1372)				this->checkUIOnObject();
HXLINE(1373)				this->updateSelectedUI();
            			}
            		}
HXLINE(1376)		bool _hx_tmp5;
HXDLIN(1376)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1376)		if (!(_this3->keyManager->checkStatusUnsafe(112,_this3->status))) {
HXLINE(1376)			if (this->helpBg->visible) {
HXLINE(1376)				 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1376)				_hx_tmp5 = _this4->keyManager->checkStatusUnsafe(27,_this4->status);
            			}
            			else {
HXLINE(1376)				_hx_tmp5 = false;
            			}
            		}
            		else {
HXLINE(1376)			_hx_tmp5 = true;
            		}
HXDLIN(1376)		if (_hx_tmp5) {
HXLINE(1378)			this->helpBg->set_visible(!(this->helpBg->visible));
HXLINE(1379)			this->helpTexts->set_visible(this->helpBg->visible);
            		}
HXLINE(1385)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1385)		if (_this5->keyManager->checkStatusUnsafe(113,_this5->status)) {
HXLINE(1388)			this->UI_box->set_visible(!(this->UI_box->visible));
HXLINE(1389)			this->UI_box->set_active(!(this->UI_box->active));
HXLINE(1391)			::Array< ::Dynamic> objs = ::Array_obj< ::Dynamic>::__new(3)->init(0,this->UI_stagebox)->init(1,this->spriteListRadioGroup)->init(2,this->spriteList_box);
HXLINE(1392)			{
HXLINE(1392)				int _g2 = 0;
HXDLIN(1392)				while((_g2 < objs->length)){
HXLINE(1392)					 ::flixel::group::FlxTypedSpriteGroup obj = objs->__get(_g2).StaticCast<  ::flixel::group::FlxTypedSpriteGroup >();
HXDLIN(1392)					_g2 = (_g2 + 1);
HXLINE(1394)					obj->set_visible(this->UI_box->visible);
HXLINE(1395)					if (!(::Std_obj::isOfType(obj,::hx::ClassOf< ::flixel::text::FlxText >()))) {
HXLINE(1395)						obj->set_active(this->UI_box->active);
            					}
            				}
            			}
HXLINE(1397)			this->spriteListRadioGroup->updateRadioItems();
            		}
HXLINE(1400)		 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1400)		if (_this6->keyManager->checkStatusUnsafe(123,_this6->status)) {
HXLINE(1401)			this->showSelectionQuad = !(this->showSelectionQuad);
            		}
HXLINE(1403)		Float shiftMult = ( (Float)(1) );
HXLINE(1404)		Float ctrlMult = ( (Float)(1) );
HXLINE(1405)		 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1405)		if (_this7->keyManager->checkStatusUnsafe(16,_this7->status)) {
HXLINE(1405)			shiftMult = ( (Float)(4) );
            		}
HXLINE(1406)		 ::flixel::input::keyboard::FlxKeyList _this8 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1406)		if (_this8->keyManager->checkStatusUnsafe(17,_this8->status)) {
HXLINE(1406)			ctrlMult = ((Float)0.25);
            		}
HXLINE(1409)		Float camX = ( (Float)(0) );
HXLINE(1410)		Float camY = ( (Float)(0) );
HXLINE(1411)		Float camMove = (((elapsed * ( (Float)(500) )) * shiftMult) * ctrlMult);
HXLINE(1412)		 ::flixel::input::keyboard::FlxKeyList _this9 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1412)		if (_this9->keyManager->checkStatusUnsafe(74,_this9->status)) {
HXLINE(1412)			camX = (camX - camMove);
            		}
HXLINE(1413)		 ::flixel::input::keyboard::FlxKeyList _this10 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1413)		if (_this10->keyManager->checkStatusUnsafe(75,_this10->status)) {
HXLINE(1413)			camY = (camY + camMove);
            		}
HXLINE(1414)		 ::flixel::input::keyboard::FlxKeyList _this11 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1414)		if (_this11->keyManager->checkStatusUnsafe(76,_this11->status)) {
HXLINE(1414)			camX = (camX + camMove);
            		}
HXLINE(1415)		 ::flixel::input::keyboard::FlxKeyList _this12 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1415)		if (_this12->keyManager->checkStatusUnsafe(73,_this12->status)) {
HXLINE(1415)			camY = (camY - camMove);
            		}
HXLINE(1417)		bool _hx_tmp6;
HXDLIN(1417)		if ((camX == 0)) {
HXLINE(1417)			_hx_tmp6 = (camY != 0);
            		}
            		else {
HXLINE(1417)			_hx_tmp6 = true;
            		}
HXDLIN(1417)		if (_hx_tmp6) {
HXLINE(1419)			 ::flixel::FlxCamera fh = ::flixel::FlxG_obj::camera;
HXDLIN(1419)			fh->scroll->set_x((fh->scroll->x + camX));
HXLINE(1420)			 ::flixel::FlxCamera fh1 = ::flixel::FlxG_obj::camera;
HXDLIN(1420)			fh1->scroll->set_y((fh1->scroll->y + camY));
HXLINE(1421)			if (::hx::IsNotNull( ::flixel::FlxG_obj::camera->target )) {
HXLINE(1421)				::flixel::FlxG_obj::camera->target = null();
            			}
HXLINE(1422)			if ((this->focusRadioGroup->checked > -1)) {
HXLINE(1422)				this->focusRadioGroup->set_checked(-1);
            			}
            		}
HXLINE(1425)		Float lastZoom = ::flixel::FlxG_obj::camera->zoom;
HXLINE(1426)		bool _hx_tmp7;
HXDLIN(1426)		 ::flixel::input::keyboard::FlxKeyList _this13 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1426)		if (_this13->keyManager->checkStatusUnsafe(82,_this13->status)) {
HXLINE(1426)			 ::flixel::input::keyboard::FlxKeyList _this14 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1426)			_hx_tmp7 = !(_this14->keyManager->checkStatusUnsafe(17,_this14->status));
            		}
            		else {
HXLINE(1426)			_hx_tmp7 = false;
            		}
HXDLIN(1426)		if (_hx_tmp7) {
HXLINE(1427)			::flixel::FlxG_obj::camera->set_zoom(( (Float)(this->stageJson->__Field(HX_("defaultZoom",74,9c,b7,22),::hx::paccDynamic)) ));
            		}
            		else {
HXLINE(1428)			bool _hx_tmp8;
HXDLIN(1428)			 ::flixel::input::keyboard::FlxKeyList _this15 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1428)			if (_this15->keyManager->checkStatusUnsafe(69,_this15->status)) {
HXLINE(1428)				_hx_tmp8 = (::flixel::FlxG_obj::camera->zoom < this->maxZoom);
            			}
            			else {
HXLINE(1428)				_hx_tmp8 = false;
            			}
HXDLIN(1428)			if (_hx_tmp8) {
HXLINE(1429)				::flixel::FlxG_obj::camera->set_zoom(::Math_obj::min(( (Float)(this->maxZoom) ),(::flixel::FlxG_obj::camera->zoom + (((elapsed * ::flixel::FlxG_obj::camera->zoom) * shiftMult) * ctrlMult))));
            			}
            			else {
HXLINE(1430)				bool _hx_tmp9;
HXDLIN(1430)				 ::flixel::input::keyboard::FlxKeyList _this16 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1430)				if (_this16->keyManager->checkStatusUnsafe(81,_this16->status)) {
HXLINE(1430)					_hx_tmp9 = (::flixel::FlxG_obj::camera->zoom > this->minZoom);
            				}
            				else {
HXLINE(1430)					_hx_tmp9 = false;
            				}
HXDLIN(1430)				if (_hx_tmp9) {
HXLINE(1431)					::flixel::FlxG_obj::camera->set_zoom(::Math_obj::max(this->minZoom,(::flixel::FlxG_obj::camera->zoom - (((elapsed * ::flixel::FlxG_obj::camera->zoom) * shiftMult) * ctrlMult))));
            				}
            			}
            		}
HXLINE(1434)		Float shiftMult1 = ( (Float)(1) );
HXLINE(1435)		Float ctrlMult1 = ( (Float)(1) );
HXLINE(1436)		 ::flixel::input::keyboard::FlxKeyList _this17 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1436)		if (_this17->keyManager->checkStatusUnsafe(16,_this17->status)) {
HXLINE(1436)			shiftMult1 = ( (Float)(4) );
            		}
HXLINE(1437)		 ::flixel::input::keyboard::FlxKeyList _this18 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1437)		if (_this18->keyManager->checkStatusUnsafe(17,_this18->status)) {
HXLINE(1437)			ctrlMult1 = ((Float)0.2);
            		}
HXLINE(1439)		Float moveX = ( (Float)(0) );
HXLINE(1440)		Float moveY = ( (Float)(0) );
HXLINE(1441)		 ::flixel::input::keyboard::FlxKeyList _this19 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1441)		if (_this19->keyManager->checkStatusUnsafe(37,_this19->status)) {
HXLINE(1441)			moveX = (moveX - ((( (Float)(5) ) * shiftMult1) * ctrlMult1));
            		}
HXLINE(1442)		 ::flixel::input::keyboard::FlxKeyList _this20 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1442)		if (_this20->keyManager->checkStatusUnsafe(39,_this20->status)) {
HXLINE(1442)			moveX = (moveX + ((( (Float)(5) ) * shiftMult1) * ctrlMult1));
            		}
HXLINE(1443)		 ::flixel::input::keyboard::FlxKeyList _this21 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1443)		if (_this21->keyManager->checkStatusUnsafe(38,_this21->status)) {
HXLINE(1443)			moveY = (moveY - ((( (Float)(5) ) * shiftMult1) * ctrlMult1));
            		}
HXLINE(1444)		 ::flixel::input::keyboard::FlxKeyList _this22 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1444)		if (_this22->keyManager->checkStatusUnsafe(40,_this22->status)) {
HXLINE(1444)			moveY = (moveY + ((( (Float)(5) ) * shiftMult1) * ctrlMult1));
            		}
HXLINE(1446)		bool _hx_tmp10;
HXDLIN(1446)		 ::flixel::input::mouse::FlxMouseButton _this23 = ::flixel::FlxG_obj::mouse->_rightButton;
HXDLIN(1446)		bool _hx_tmp11;
HXDLIN(1446)		if ((_this23->current != 1)) {
HXLINE(1446)			_hx_tmp11 = (_this23->current == 2);
            		}
            		else {
HXLINE(1446)			_hx_tmp11 = true;
            		}
HXDLIN(1446)		if (_hx_tmp11) {
HXLINE(1446)			 ::flixel::input::mouse::FlxMouse _this24 = ::flixel::FlxG_obj::mouse;
HXDLIN(1446)			if (((_this24->screenX - _this24->_prevScreenX) == 0)) {
HXLINE(1446)				 ::flixel::input::mouse::FlxMouse _this25 = ::flixel::FlxG_obj::mouse;
HXDLIN(1446)				_hx_tmp10 = ((_this25->screenY - _this25->_prevScreenY) != 0);
            			}
            			else {
HXLINE(1446)				_hx_tmp10 = true;
            			}
            		}
            		else {
HXLINE(1446)			_hx_tmp10 = false;
            		}
HXDLIN(1446)		if (_hx_tmp10) {
HXLINE(1448)			 ::flixel::input::mouse::FlxMouse _this26 = ::flixel::FlxG_obj::mouse;
HXDLIN(1448)			moveX = (moveX + (( (Float)((_this26->screenX - _this26->_prevScreenX)) ) * ctrlMult1));
HXLINE(1449)			 ::flixel::input::mouse::FlxMouse _this27 = ::flixel::FlxG_obj::mouse;
HXDLIN(1449)			moveY = (moveY + (( (Float)((_this27->screenY - _this27->_prevScreenY)) ) * ctrlMult1));
HXLINE(1450)			this->_updateCamera();
            		}
HXLINE(1453)		bool _hx_tmp12;
HXDLIN(1453)		if ((moveX == 0)) {
HXLINE(1453)			_hx_tmp12 = (moveY != 0);
            		}
            		else {
HXLINE(1453)			_hx_tmp12 = true;
            		}
HXDLIN(1453)		if (_hx_tmp12) {
HXLINE(1455)			int selected = this->spriteListRadioGroup->checked;
HXLINE(1456)			if ((selected < 0)) {
HXLINE(1456)				return;
            			}
HXLINE(1458)			 ::states::editors::StageEditorMetaSprite spr = this->stageSprites->__get(((this->spriteListRadioGroup->labels->length - selected) - 1)).StaticCast<  ::states::editors::StageEditorMetaSprite >();
HXLINE(1459)			if (::hx::IsNotNull( spr )) {
HXLINE(1461)				Float displayX = ( (Float)(::Math_obj::round((spr->get_x() + moveX))) );
HXLINE(1462)				spr->set_x(displayX);
HXLINE(1461)				Float displayY = ( (Float)(::Math_obj::round((spr->get_y() + moveY))) );
HXLINE(1463)				spr->set_y(displayY);
HXLINE(1464)				 ::objects::Character _hx_char = ( ( ::objects::Character)(spr->sprite) );
HXLINE(1465)				::String _hx_switch_0 = spr->type;
            				if (  (_hx_switch_0==HX_("boyfriend",6a,29,b8,e6)) ){
HXLINE(1468)					::cpp::VirtualArray _hx_tmp13 = ( (::cpp::VirtualArray)(this->stageJson->__Field(HX_("boyfriend",6a,29,b8,e6),::hx::paccDynamic)) );
HXDLIN(1468)					Float displayX1 = spr->get_x();
HXDLIN(1468)					displayX = (displayX1 - _hx_char->positionArray->__get(0));
HXDLIN(1468)					_hx_tmp13->set(0,displayX);
HXLINE(1469)					::cpp::VirtualArray _hx_tmp14 = ( (::cpp::VirtualArray)(this->stageJson->__Field(HX_("boyfriend",6a,29,b8,e6),::hx::paccDynamic)) );
HXDLIN(1469)					Float displayY1 = spr->get_y();
HXDLIN(1469)					displayY = (displayY1 - _hx_char->positionArray->__get(1));
HXDLIN(1469)					_hx_tmp14->set(1,displayY);
HXLINE(1467)					goto _hx_goto_107;
            				}
            				if (  (_hx_switch_0==HX_("dad",47,36,4c,00)) ){
HXLINE(1474)					::cpp::VirtualArray _hx_tmp15 = ( (::cpp::VirtualArray)(this->stageJson->__Field(HX_("opponent",9d,b9,b8,f8),::hx::paccDynamic)) );
HXDLIN(1474)					Float displayX2 = spr->get_x();
HXDLIN(1474)					displayX = (displayX2 - _hx_char->positionArray->__get(0));
HXDLIN(1474)					_hx_tmp15->set(0,displayX);
HXLINE(1475)					::cpp::VirtualArray _hx_tmp16 = ( (::cpp::VirtualArray)(this->stageJson->__Field(HX_("opponent",9d,b9,b8,f8),::hx::paccDynamic)) );
HXDLIN(1475)					Float displayY2 = spr->get_y();
HXDLIN(1475)					displayY = (displayY2 - _hx_char->positionArray->__get(1));
HXDLIN(1475)					_hx_tmp16->set(1,displayY);
HXLINE(1473)					goto _hx_goto_107;
            				}
            				if (  (_hx_switch_0==HX_("gf",1f,5a,00,00)) ){
HXLINE(1471)					::cpp::VirtualArray _hx_tmp17 = ( (::cpp::VirtualArray)(this->stageJson->__Field(HX_("girlfriend",ba,91,48,98),::hx::paccDynamic)) );
HXDLIN(1471)					Float displayX3 = spr->get_x();
HXDLIN(1471)					displayX = (displayX3 - _hx_char->positionArray->__get(0));
HXDLIN(1471)					_hx_tmp17->set(0,displayX);
HXLINE(1472)					::cpp::VirtualArray _hx_tmp18 = ( (::cpp::VirtualArray)(this->stageJson->__Field(HX_("girlfriend",ba,91,48,98),::hx::paccDynamic)) );
HXDLIN(1472)					Float displayY3 = spr->get_y();
HXDLIN(1472)					displayY = (displayY3 - _hx_char->positionArray->__get(1));
HXDLIN(1472)					_hx_tmp18->set(1,displayY);
HXLINE(1470)					goto _hx_goto_107;
            				}
            				_hx_goto_107:;
HXLINE(1477)				this->posTxt->set_text((((HX_("X: ",fe,f8,42,00) + displayX) + HX_("\nY: ",75,dd,df,06)) + displayY));
            			}
            		}
            	}


void StageEditorState_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1484_draw)
HXLINE(1485)		bool _hx_tmp;
HXDLIN(1485)		if (!(this->persistentDraw)) {
HXLINE(1485)			_hx_tmp = ::hx::IsNull( this->subState );
            		}
            		else {
HXLINE(1485)			_hx_tmp = true;
            		}
HXDLIN(1485)		if (_hx_tmp) {
HXLINE(1488)			{
HXLINE(1488)				int _g = 0;
HXDLIN(1488)				::Array< ::Dynamic> _g1 = this->stageSprites;
HXDLIN(1488)				while((_g < _g1->length)){
HXLINE(1488)					 ::states::editors::StageEditorMetaSprite basic = _g1->__get(_g).StaticCast<  ::states::editors::StageEditorMetaSprite >();
HXDLIN(1488)					_g = (_g + 1);
HXLINE(1489)					if (basic->get_visible()) {
HXLINE(1490)						basic->draw(this->curFilters);
            					}
            				}
            			}
HXLINE(1492)			bool _hx_tmp1;
HXDLIN(1492)			if (this->showSelectionQuad) {
HXLINE(1492)				_hx_tmp1 = ::hx::IsNotNull( this->spriteListRadioGroup->checkedRadio );
            			}
            			else {
HXLINE(1492)				_hx_tmp1 = false;
            			}
HXDLIN(1492)			if (_hx_tmp1) {
HXLINE(1494)				 ::states::editors::StageEditorMetaSprite spr = this->stageSprites->__get(((this->spriteListRadioGroup->labels->length - this->spriteListRadioGroup->checked) - 1)).StaticCast<  ::states::editors::StageEditorMetaSprite >();
HXLINE(1495)				if (::hx::IsNotNull( spr )) {
HXLINE(1495)					this->drawDebugOnCamera(spr->sprite);
            				}
            			}
            		}
HXLINE(1499)		this->super::draw();
            	}


 ::flixel::math::FlxBasePoint StageEditorState_obj::focusOnTarget(::String target){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1503_focusOnTarget)
HXLINE(1504)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(0,0);
HXDLIN(1504)		point->_inPool = false;
HXDLIN(1504)		 ::flixel::math::FlxBasePoint point1 = point;
HXDLIN(1504)		point1->_weak = true;
HXDLIN(1504)		 ::flixel::math::FlxBasePoint focusPoint = point1;
HXLINE(1505)		::String _hx_switch_0 = target;
            		if (  (_hx_switch_0==HX_("boyfriend",6a,29,b8,e6)) ){
HXLINE(1508)			{
HXLINE(1508)				Float focusPoint1 = focusPoint->x;
HXDLIN(1508)				Float x = this->boyfriend->getMidpoint(null())->x;
HXDLIN(1508)				focusPoint->set_x((focusPoint1 + ((x - this->boyfriend->cameraPosition->__get(0)) - ( (Float)(100) ))));
            			}
HXLINE(1509)			{
HXLINE(1509)				Float focusPoint2 = focusPoint->y;
HXDLIN(1509)				Float y = this->boyfriend->getMidpoint(null())->y;
HXDLIN(1509)				focusPoint->set_y((focusPoint2 + ((y + this->boyfriend->cameraPosition->__get(1)) - ( (Float)(100) ))));
            			}
HXLINE(1510)			bool _hx_tmp;
HXDLIN(1510)			if (::hx::IsNotNull( this->stageJson->__Field(HX_("camera_boyfriend",10,8c,95,41),::hx::paccDynamic) )) {
HXLINE(1510)				_hx_tmp = (( (::Array< Float >)(this->stageJson->__Field(HX_("camera_boyfriend",10,8c,95,41),::hx::paccDynamic)) )->length > 1);
            			}
            			else {
HXLINE(1510)				_hx_tmp = false;
            			}
HXDLIN(1510)			if (_hx_tmp) {
HXLINE(1512)				focusPoint->set_x((focusPoint->x +  ::Dynamic(this->stageJson->__Field(HX_("camera_boyfriend",10,8c,95,41),::hx::paccDynamic))->__GetItem(0)));
HXLINE(1513)				focusPoint->set_y((focusPoint->y +  ::Dynamic(this->stageJson->__Field(HX_("camera_boyfriend",10,8c,95,41),::hx::paccDynamic))->__GetItem(1)));
            			}
HXLINE(1507)			goto _hx_goto_111;
            		}
            		if (  (_hx_switch_0==HX_("dad",47,36,4c,00)) ){
HXLINE(1516)			{
HXLINE(1516)				Float focusPoint3 = focusPoint->x;
HXDLIN(1516)				Float x1 = this->dad->getMidpoint(null())->x;
HXDLIN(1516)				focusPoint->set_x((focusPoint3 + ((x1 + this->dad->cameraPosition->__get(0)) + 150)));
            			}
HXLINE(1517)			{
HXLINE(1517)				Float focusPoint4 = focusPoint->y;
HXDLIN(1517)				Float y1 = this->dad->getMidpoint(null())->y;
HXDLIN(1517)				focusPoint->set_y((focusPoint4 + ((y1 + this->dad->cameraPosition->__get(1)) - ( (Float)(100) ))));
            			}
HXLINE(1518)			bool _hx_tmp1;
HXDLIN(1518)			if (::hx::IsNotNull( this->stageJson->__Field(HX_("camera_opponent",b7,ed,08,84),::hx::paccDynamic) )) {
HXLINE(1518)				_hx_tmp1 = (( (::Array< Float >)(this->stageJson->__Field(HX_("camera_opponent",b7,ed,08,84),::hx::paccDynamic)) )->length > 1);
            			}
            			else {
HXLINE(1518)				_hx_tmp1 = false;
            			}
HXDLIN(1518)			if (_hx_tmp1) {
HXLINE(1520)				focusPoint->set_x((focusPoint->x +  ::Dynamic(this->stageJson->__Field(HX_("camera_opponent",b7,ed,08,84),::hx::paccDynamic))->__GetItem(0)));
HXLINE(1521)				focusPoint->set_y((focusPoint->y +  ::Dynamic(this->stageJson->__Field(HX_("camera_opponent",b7,ed,08,84),::hx::paccDynamic))->__GetItem(1)));
            			}
HXLINE(1515)			goto _hx_goto_111;
            		}
            		if (  (_hx_switch_0==HX_("gf",1f,5a,00,00)) ){
HXLINE(1524)			if (this->gf->visible) {
HXLINE(1526)				{
HXLINE(1526)					Float focusPoint5 = focusPoint->x;
HXDLIN(1526)					Float x2 = this->gf->getMidpoint(null())->x;
HXDLIN(1526)					focusPoint->set_x((focusPoint5 + (x2 + this->gf->cameraPosition->__get(0))));
            				}
HXLINE(1527)				{
HXLINE(1527)					Float focusPoint6 = focusPoint->y;
HXDLIN(1527)					Float y2 = this->gf->getMidpoint(null())->y;
HXDLIN(1527)					focusPoint->set_y((focusPoint6 + (y2 + this->gf->cameraPosition->__get(1))));
            				}
            			}
HXLINE(1530)			bool _hx_tmp2;
HXDLIN(1530)			if (::hx::IsNotNull( this->stageJson->__Field(HX_("camera_girlfriend",54,80,21,bf),::hx::paccDynamic) )) {
HXLINE(1530)				_hx_tmp2 = (( (::Array< Float >)(this->stageJson->__Field(HX_("camera_girlfriend",54,80,21,bf),::hx::paccDynamic)) )->length > 1);
            			}
            			else {
HXLINE(1530)				_hx_tmp2 = false;
            			}
HXDLIN(1530)			if (_hx_tmp2) {
HXLINE(1532)				focusPoint->set_x((focusPoint->x +  ::Dynamic(this->stageJson->__Field(HX_("camera_girlfriend",54,80,21,bf),::hx::paccDynamic))->__GetItem(0)));
HXLINE(1533)				focusPoint->set_y((focusPoint->y +  ::Dynamic(this->stageJson->__Field(HX_("camera_girlfriend",54,80,21,bf),::hx::paccDynamic))->__GetItem(1)));
            			}
HXLINE(1523)			goto _hx_goto_111;
            		}
            		_hx_goto_111:;
HXLINE(1536)		return focusPoint;
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageEditorState_obj,focusOnTarget,return )

void StageEditorState_obj::repositionGirlfriend(){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1540_repositionGirlfriend)
HXLINE(1541)		this->gf->setPosition( ::Dynamic(this->stageJson->__Field(HX_("girlfriend",ba,91,48,98),::hx::paccDynamic))->__GetItem(0), ::Dynamic(this->stageJson->__Field(HX_("girlfriend",ba,91,48,98),::hx::paccDynamic))->__GetItem(1));
HXLINE(1542)		 ::objects::Character fh = this->gf;
HXDLIN(1542)		fh->set_x((fh->x + this->gf->positionArray->__get(0)));
HXLINE(1543)		 ::objects::Character fh1 = this->gf;
HXDLIN(1543)		fh1->set_y((fh1->y + this->gf->positionArray->__get(1)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,repositionGirlfriend,(void))

void StageEditorState_obj::repositionDad(){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1546_repositionDad)
HXLINE(1547)		this->dad->setPosition( ::Dynamic(this->stageJson->__Field(HX_("opponent",9d,b9,b8,f8),::hx::paccDynamic))->__GetItem(0), ::Dynamic(this->stageJson->__Field(HX_("opponent",9d,b9,b8,f8),::hx::paccDynamic))->__GetItem(1));
HXLINE(1548)		 ::objects::Character fh = this->dad;
HXDLIN(1548)		fh->set_x((fh->x + this->dad->positionArray->__get(0)));
HXLINE(1549)		 ::objects::Character fh1 = this->dad;
HXDLIN(1549)		fh1->set_y((fh1->y + this->dad->positionArray->__get(1)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,repositionDad,(void))

void StageEditorState_obj::repositionBoyfriend(){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1552_repositionBoyfriend)
HXLINE(1553)		this->boyfriend->setPosition( ::Dynamic(this->stageJson->__Field(HX_("boyfriend",6a,29,b8,e6),::hx::paccDynamic))->__GetItem(0), ::Dynamic(this->stageJson->__Field(HX_("boyfriend",6a,29,b8,e6),::hx::paccDynamic))->__GetItem(1));
HXLINE(1554)		 ::objects::Character fh = this->boyfriend;
HXDLIN(1554)		fh->set_x((fh->x + this->boyfriend->positionArray->__get(0)));
HXLINE(1555)		 ::objects::Character fh1 = this->boyfriend;
HXDLIN(1555)		fh1->set_y((fh1->y + this->boyfriend->positionArray->__get(1)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,repositionBoyfriend,(void))

void StageEditorState_obj::drawDebugOnCamera( ::flixel::FlxSprite spr){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1559_drawDebugOnCamera)
HXLINE(1560)		bool _hx_tmp;
HXDLIN(1560)		if (::hx::IsNotNull( spr )) {
HXLINE(1560)			_hx_tmp = !(spr->isOnScreen(::flixel::FlxG_obj::camera));
            		}
            		else {
HXLINE(1560)			_hx_tmp = true;
            		}
HXDLIN(1560)		if (_hx_tmp) {
HXLINE(1561)			return;
            		}
HXLINE(1564)		int lineSize = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(2) ),( (Float)(::Math_obj::floor((( (Float)(3) ) / ::flixel::FlxG_obj::camera->zoom))) )));
HXLINE(1566)		Float sprX = (spr->x - spr->offset->x);
HXLINE(1567)		Float sprY = (spr->y - spr->offset->y);
HXLINE(1568)		int sprWidth = ::Std_obj::_hx_int((( (Float)(spr->frameWidth) ) * spr->scale->x));
HXLINE(1569)		int sprHeight = ::Std_obj::_hx_int((( (Float)(spr->frameHeight) ) * spr->scale->y));
HXLINE(1570)		{
HXLINE(1570)			int _g_current = 0;
HXDLIN(1570)			::Array< ::Dynamic> _g_array = this->selectionSprites->group->members;
HXDLIN(1570)			while((_g_current < _g_array->length)){
HXLINE(1570)				 ::flixel::FlxSprite _g_value = _g_array->__get(_g_current).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(1570)				_g_current = (_g_current + 1);
HXDLIN(1570)				int _g_key = (_g_current - 1);
HXDLIN(1570)				int num = _g_key;
HXDLIN(1570)				 ::flixel::FlxSprite sel = _g_value;
HXLINE(1571)				{
HXLINE(1572)					sel->set_x(sprX);
HXLINE(1573)					sel->set_y(sprY);
HXLINE(1574)					switch((int)(num)){
            						case (int)0: {
HXLINE(1577)							sel->setGraphicSize(sprWidth,lineSize);
            						}
            						break;
            						case (int)1: {
HXLINE(1579)							sel->setGraphicSize(sprWidth,lineSize);
HXLINE(1580)							sel->set_y((sel->y + (sprHeight - lineSize)));
            						}
            						break;
            						case (int)2: {
HXLINE(1582)							sel->setGraphicSize(lineSize,sprHeight);
            						}
            						break;
            						case (int)3: {
HXLINE(1584)							sel->setGraphicSize(lineSize,sprHeight);
HXLINE(1585)							sel->set_x((sel->x + (sprWidth - lineSize)));
            						}
            						break;
            					}
HXLINE(1587)					sel->updateHitbox();
HXLINE(1588)					{
HXLINE(1588)						 ::flixel::math::FlxBasePoint this1 = sel->scrollFactor;
HXDLIN(1588)						Float y = spr->scrollFactor->y;
HXDLIN(1588)						this1->set_x(spr->scrollFactor->x);
HXDLIN(1588)						this1->set_y(y);
            					}
            				}
            			}
            		}
HXLINE(1590)		this->selectionSprites->draw();
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageEditorState_obj,drawDebugOnCamera,(void))

void StageEditorState_obj::saveObjectsToJson(){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1596_saveObjectsToJson)
HXLINE(1597)		this->stageJson->__SetField(HX_("objects",d4,68,4f,82),::cpp::VirtualArray_obj::__new(0),::hx::paccDynamic);
HXLINE(1598)		{
HXLINE(1598)			int _g = 0;
HXDLIN(1598)			::Array< ::Dynamic> _g1 = this->stageSprites;
HXDLIN(1598)			while((_g < _g1->length)){
HXLINE(1598)				 ::states::editors::StageEditorMetaSprite basic = _g1->__get(_g).StaticCast<  ::states::editors::StageEditorMetaSprite >();
HXDLIN(1598)				_g = (_g + 1);
HXLINE(1599)				::cpp::VirtualArray _hx_tmp = ( (::cpp::VirtualArray)(this->stageJson->__Field(HX_("objects",d4,68,4f,82),::hx::paccDynamic)) );
HXDLIN(1599)				_hx_tmp->push(basic->formatToJson());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,saveObjectsToJson,(void))

void StageEditorState_obj::saveData(){
            	HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1603_saveData)
HXLINE(1604)		if (::hx::IsNotNull( this->_file )) {
HXLINE(1604)			return;
            		}
HXLINE(1606)		this->saveObjectsToJson();
HXLINE(1607)		 ::Dynamic replacer = null();
HXDLIN(1607)		::String data = ::haxe::format::JsonPrinter_obj::print(this->stageJson,replacer,HX_("\t",09,00,00,00));
HXLINE(1608)		if ((data.length > 0)) {
HXLINE(1610)			this->_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE(1611)			this->_file->addEventListener(HX_("select",fc,1a,33,6a),this->onSaveComplete_dyn(),null(),null(),null());
HXLINE(1612)			this->_file->addEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null(),null(),null());
HXLINE(1613)			this->_file->addEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null(),null(),null());
HXLINE(1614)			this->_file->save(data,((HX_("",00,00,00,00) + this->lastLoadedStage) + HX_(".json",56,f1,d6,c2)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageEditorState_obj,saveData,(void))

void StageEditorState_obj::onSaveComplete( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1620_onSaveComplete)
HXLINE(1621)		if (::hx::IsNull( this->_file )) {
HXLINE(1621)			return;
            		}
HXLINE(1622)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(1623)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(1624)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(1625)		this->_file = null();
HXLINE(1626)		::flixel::FlxG_obj::log->advanced(HX_("Successfully saved file.",c0,0d,09,f4),::flixel::_hx_system::debug::log::LogStyle_obj::NOTICE,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageEditorState_obj,onSaveComplete,(void))

void StageEditorState_obj::onSaveCancel( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1633_onSaveCancel)
HXLINE(1634)		if (::hx::IsNull( this->_file )) {
HXLINE(1634)			return;
            		}
HXLINE(1635)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(1636)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(1637)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(1638)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageEditorState_obj,onSaveCancel,(void))

void StageEditorState_obj::onSaveError( ::openfl::events::IOErrorEvent _){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1645_onSaveError)
HXLINE(1646)		if (::hx::IsNull( this->_file )) {
HXLINE(1646)			return;
            		}
HXLINE(1647)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(1648)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(1649)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(1650)		this->_file = null();
HXLINE(1651)		::flixel::FlxG_obj::log->advanced(HX_("Problem saving file",41,4c,cd,8e),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageEditorState_obj,onSaveError,(void))

void StageEditorState_obj::loadImage(::String onNewSprite){
            	HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1655_loadImage)
HXLINE(1656)		if (::hx::IsNotNull( this->_file )) {
HXLINE(1656)			return;
            		}
HXLINE(1658)		this->_makeNewSprite = onNewSprite;
HXLINE(1659)		this->_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE(1660)		this->_file->addEventListener(HX_("select",fc,1a,33,6a),this->onLoadComplete_dyn(),null(),null(),null());
HXLINE(1661)		this->_file->addEventListener(HX_("cancel",7a,ed,33,b8),this->onLoadCancel_dyn(),null(),null(),null());
HXLINE(1662)		this->_file->addEventListener(HX_("ioError",02,fe,41,76),this->onLoadError_dyn(),null(),null(),null());
HXLINE(1664)		 ::openfl::net::FileFilter filters =  ::openfl::net::FileFilter_obj::__alloc( HX_CTX ,HX_("PNG (Image)",1f,c0,f5,35),HX_("*.png",65,8a,91,4d),null());
HXDLIN(1664)		 ::openfl::net::FileFilter filters1 =  ::openfl::net::FileFilter_obj::__alloc( HX_CTX ,HX_("XML (Sparrow)",3c,63,88,76),HX_("*.xml",93,9b,97,4d),null());
HXDLIN(1664)		 ::openfl::net::FileFilter filters2 =  ::openfl::net::FileFilter_obj::__alloc( HX_CTX ,HX_("JSON (Aseprite)",f4,90,6b,3f),HX_("*.json",ec,18,d4,8d),null());
HXDLIN(1664)		::Array< ::Dynamic> filters3 = ::Array_obj< ::Dynamic>::__new(4)->init(0,filters)->init(1,filters1)->init(2,filters2)->init(3, ::openfl::net::FileFilter_obj::__alloc( HX_CTX ,HX_("TXT (Packer)",6b,86,c8,54),HX_("*.txt",2c,9c,94,4d),null()));
HXLINE(1665)		this->_file->browse(filters3);
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageEditorState_obj,loadImage,(void))

void StageEditorState_obj::onLoadComplete( ::openfl::events::Event _){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::states::editors::StageEditorState,_gthis) HXARGC(1)
            		void _hx_run(::String imageToLoad){
            			HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1681_onLoadComplete)
HXLINE(1682)			if (::hx::IsNotNull( _gthis->_makeNewSprite )) {
HXLINE(1684)				bool loadSprite;
HXDLIN(1684)				bool loadSprite1;
HXDLIN(1684)				bool loadSprite2;
HXDLIN(1684)				if ((_gthis->_makeNewSprite == HX_("animatedSprite",08,df,a8,cb))) {
HXLINE(1684)					loadSprite2 = !(::backend::Paths_obj::fileExists(((HX_("images/",77,50,74,c1) + imageToLoad) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),null(),null()));
            				}
            				else {
HXLINE(1684)					loadSprite2 = false;
            				}
HXDLIN(1684)				if (loadSprite2) {
HXLINE(1684)					loadSprite1 = !(::backend::Paths_obj::fileExists(((HX_("images/",77,50,74,c1) + imageToLoad) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),null(),null()));
            				}
            				else {
HXLINE(1684)					loadSprite1 = false;
            				}
HXDLIN(1684)				if (loadSprite1) {
HXLINE(1684)					loadSprite = !(::backend::Paths_obj::fileExists(((HX_("images/",77,50,74,c1) + imageToLoad) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),null(),null()));
            				}
            				else {
HXLINE(1684)					loadSprite = false;
            				}
HXDLIN(1684)				if (loadSprite) {
HXLINE(1687)					_gthis->showOutput(HX_("No Animation file found with the same name of the image!",41,f5,69,32),true);
HXLINE(1688)					_gthis->_makeNewSprite = null();
HXLINE(1689)					_gthis->_file = null();
HXLINE(1690)					return;
            				}
HXLINE(1692)				 ::states::editors::StageEditorState _gthis1 = _gthis;
HXDLIN(1692)				::String _gthis2 = _gthis->_makeNewSprite;
HXDLIN(1692)				 ::Dynamic loadSprite3 =  ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("name",4b,72,ff,48),_gthis->findUnoccupiedName(null()))
            					->setFixed(1,HX_("type",ba,f2,08,4d),_gthis2));
HXDLIN(1692)				_gthis1->insertMeta( ::states::editors::StageEditorMetaSprite_obj::__alloc( HX_CTX ,loadSprite3, ::psychlua::ModchartSprite_obj::__alloc( HX_CTX ,null(),null())),null());
            			}
HXLINE(1694)			 ::states::editors::StageEditorMetaSprite selected = _gthis->getSelected(null());
HXLINE(1695)			_gthis->tryLoadImage(selected,imageToLoad);
HXLINE(1697)			if (::hx::IsNotNull( _gthis->_makeNewSprite )) {
HXLINE(1699)				 ::flixel::FlxSprite selected1 = selected->sprite;
HXDLIN(1699)				Float loadSprite4 = (::flixel::FlxG_obj::camera->scroll->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )));
HXDLIN(1699)				selected1->set_x(( (Float)(::Math_obj::round((loadSprite4 - (selected->sprite->get_width() / ( (Float)(2) ))))) ));
HXLINE(1700)				 ::flixel::FlxSprite selected2 = selected->sprite;
HXDLIN(1700)				Float loadSprite5 = (::flixel::FlxG_obj::camera->scroll->y + (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )));
HXDLIN(1700)				selected2->set_y(( (Float)(::Math_obj::round((loadSprite5 - (selected->sprite->get_height() / ( (Float)(2) ))))) ));
HXLINE(1701)				_gthis->posTxt->set_visible(true);
HXLINE(1702)				_gthis->posTxt->set_text((((HX_("X: ",fe,f8,42,00) + selected->sprite->x) + HX_("\nY: ",75,dd,df,06)) + selected->sprite->y));
            			}
HXLINE(1704)			_gthis->_makeNewSprite = null();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1669_onLoadComplete)
HXDLIN(1669)		 ::states::editors::StageEditorState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1670)		if (::hx::IsNull( this->_file )) {
HXLINE(1670)			return;
            		}
HXLINE(1671)		this->_file->removeEventListener(HX_("select",fc,1a,33,6a),this->onLoadComplete_dyn(),null());
HXLINE(1672)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onLoadCancel_dyn(),null());
HXLINE(1673)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onLoadError_dyn(),null());
HXLINE(1676)		::Array< ::String > fullPath = ::Array_obj< ::String >::__new(1)->init(0,null());
HXLINE(1678)		if (::hx::IsNotNull( this->_file->_hx___path )) {
HXLINE(1678)			fullPath[0] = this->_file->_hx___path;
            		}
HXLINE(1680)		 ::Dynamic loadSprite =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE(1706)		this->_file = null();
HXLINE(1708)		if (::hx::IsNotNull( fullPath->__get(0) )) {
            			HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_4, ::states::editors::StageEditorState,_gthis,::Array< ::String >,fullPath, ::Dynamic,loadSprite,::String,modFolder) HXARGC(1)
            			void _hx_run( ::states::editors::content::BasePrompt state){
            				HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_2, ::states::editors::content::BasePrompt,state,::Array< ::String >,fullPath, ::Dynamic,loadSprite,::String,modFolder) HXARGC(0)
            				void _hx_run(){
            					HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_1,::String,pathNoExt,::String,fileName1,::String,modFolder) HXARGC(1)
            					void _hx_run(::String ext){
            						HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1739_onLoadComplete)
HXLINE(1740)						::String p1 = (((HX_("",00,00,00,00) + pathNoExt) + HX_(".",2e,00,00,00)) + ext);
HXLINE(1741)						::String p2 = (modFolder + (((HX_("",00,00,00,00) + fileName1) + HX_(".",2e,00,00,00)) + ext));
HXLINE(1742)						::haxe::Log_obj::trace(p1, ::Dynamic(::hx::Anon_obj::Create(5)
            							->setFixed(0,HX_("className",a3,92,3d,dc),HX_("states.editors.StageEditorState",1a,37,b1,81))
            							->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(1)->init(0,p2))
            							->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("onLoadComplete",be,4c,20,63))
            							->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/states/editors/StageEditorState.hx",16,7c,21,9d))
            							->setFixed(4,HX_("lineNumber",dd,81,22,76),1742)));
HXLINE(1743)						if (::sys::FileSystem_obj::exists(p1)) {
HXLINE(1744)							::sys::io::File_obj::saveBytes(p2,::sys::io::File_obj::getBytes(p1));
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1735_onLoadComplete)
HXLINE(1736)					::String fullPath1 = fullPath->__get(0);
HXDLIN(1736)					int fileName = (fullPath->__get(0).lastIndexOf(HX_("/",2f,00,00,00),null()) + 1);
HXDLIN(1736)					::String fileName1 = fullPath1.substring(fileName,fullPath->__get(0).lastIndexOf(HX_(".",2e,00,00,00),null()));
HXLINE(1737)					::String fullPath2 = fullPath->__get(0);
HXDLIN(1737)					::String pathNoExt = fullPath2.substring(0,fullPath->__get(0).lastIndexOf(HX_(".",2e,00,00,00),null()));
HXLINE(1738)					 ::Dynamic saveFile =  ::Dynamic(new _hx_Closure_1(pathNoExt,fileName1,modFolder));
HXLINE(1747)					::sys::FileSystem_obj::createDirectory(modFolder);
HXLINE(1748)					saveFile(HX_("png",a9,5c,55,00));
HXLINE(1749)					saveFile(HX_("xml",d7,6d,5b,00));
HXLINE(1750)					saveFile(HX_("txt",70,6e,58,00));
HXLINE(1751)					saveFile(HX_("json",28,42,68,46));
HXLINE(1752)					loadSprite(fileName1);
HXLINE(1753)					state->close();
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::states::editors::content::BasePrompt,state, ::states::editors::StageEditorState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1763_onLoadComplete)
HXLINE(1764)					_gthis->_makeNewSprite = null();
HXLINE(1765)					state->close();
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_GC_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1727_onLoadComplete)
HXLINE(1728)				 ::flixel::text::FlxText txt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,(state->bg->y + 60),460,((HX_("Copy to: \"",96,99,52,57) + modFolder) + HX_("\"?",dd,1d,00,00)),11,null());
HXLINE(1729)				txt->set_alignment(HX_("center",d5,25,db,05));
HXLINE(1730)				{
HXLINE(1730)					int axes = 1;
HXDLIN(1730)					bool _hx_tmp;
HXDLIN(1730)					if ((axes != 1)) {
HXLINE(1730)						_hx_tmp = (axes == 17);
            					}
            					else {
HXLINE(1730)						_hx_tmp = true;
            					}
HXDLIN(1730)					if (_hx_tmp) {
HXLINE(1730)						int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(1730)						txt->set_x(((( (Float)(_hx_tmp1) ) - txt->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(1730)					bool _hx_tmp2;
HXDLIN(1730)					if ((axes != 16)) {
HXLINE(1730)						_hx_tmp2 = (axes == 17);
            					}
            					else {
HXLINE(1730)						_hx_tmp2 = true;
            					}
HXDLIN(1730)					if (_hx_tmp2) {
HXLINE(1730)						int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(1730)						txt->set_y(((( (Float)(_hx_tmp3) ) - txt->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(1731)				txt->set_cameras(state->get_cameras());
HXLINE(1732)				state->add(txt).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1734)				int btnY = 390;
HXLINE(1735)				 ::backend::ui::PsychUIButton btn =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,btnY,HX_("OK",1c,45,00,00), ::Dynamic(new _hx_Closure_2(state,fullPath,loadSprite,modFolder)),null(),null());
HXLINE(1755)				btn->normalStyle->__SetField(HX_("bgColor",5e,81,83,f7),-16744448,::hx::paccDynamic);
HXLINE(1756)				btn->normalStyle->__SetField(HX_("textColor",76,01,4a,e3),-1,::hx::paccDynamic);
HXLINE(1757)				{
HXLINE(1757)					int axes1 = 1;
HXDLIN(1757)					bool _hx_tmp4;
HXDLIN(1757)					if ((axes1 != 1)) {
HXLINE(1757)						_hx_tmp4 = (axes1 == 17);
            					}
            					else {
HXLINE(1757)						_hx_tmp4 = true;
            					}
HXDLIN(1757)					if (_hx_tmp4) {
HXLINE(1757)						int _hx_tmp5 = ::flixel::FlxG_obj::width;
HXDLIN(1757)						btn->set_x(((( (Float)(_hx_tmp5) ) - btn->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(1757)					bool _hx_tmp6;
HXDLIN(1757)					if ((axes1 != 16)) {
HXLINE(1757)						_hx_tmp6 = (axes1 == 17);
            					}
            					else {
HXLINE(1757)						_hx_tmp6 = true;
            					}
HXDLIN(1757)					if (_hx_tmp6) {
HXLINE(1757)						int _hx_tmp7 = ::flixel::FlxG_obj::height;
HXDLIN(1757)						btn->set_y(((( (Float)(_hx_tmp7) ) - btn->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(1758)				btn->set_x((btn->x - ( (Float)(100) )));
HXLINE(1759)				btn->set_cameras(state->get_cameras());
HXLINE(1760)				state->add(btn).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1762)				 ::backend::ui::PsychUIButton btn1 =  ::backend::ui::PsychUIButton_obj::__alloc( HX_CTX ,0,btnY,HX_("Cancel",9a,61,c8,ec), ::Dynamic(new _hx_Closure_3(state,_gthis)),null(),null());
HXLINE(1767)				{
HXLINE(1767)					int axes2 = 1;
HXDLIN(1767)					bool _hx_tmp8;
HXDLIN(1767)					if ((axes2 != 1)) {
HXLINE(1767)						_hx_tmp8 = (axes2 == 17);
            					}
            					else {
HXLINE(1767)						_hx_tmp8 = true;
            					}
HXDLIN(1767)					if (_hx_tmp8) {
HXLINE(1767)						int _hx_tmp9 = ::flixel::FlxG_obj::width;
HXDLIN(1767)						btn1->set_x(((( (Float)(_hx_tmp9) ) - btn1->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(1767)					bool _hx_tmp10;
HXDLIN(1767)					if ((axes2 != 16)) {
HXLINE(1767)						_hx_tmp10 = (axes2 == 17);
            					}
            					else {
HXLINE(1767)						_hx_tmp10 = true;
            					}
HXDLIN(1767)					if (_hx_tmp10) {
HXLINE(1767)						int _hx_tmp11 = ::flixel::FlxG_obj::height;
HXDLIN(1767)						btn1->set_y(((( (Float)(_hx_tmp11) ) - btn1->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(1768)				btn1->set_x((btn1->x + 100));
HXLINE(1769)				btn1->set_cameras(state->get_cameras());
HXLINE(1770)				state->add(btn1).StaticCast<  ::flixel::FlxBasic >();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1710)			fullPath[0] = ::StringTools_obj::replace(fullPath->__get(0),HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE(1711)			::String exePath = ::StringTools_obj::replace(::Sys_obj::getCwd(),HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE(1712)			if (::StringTools_obj::startsWith(fullPath->__get(0),exePath)) {
HXLINE(1714)				fullPath[0] = fullPath->__get(0).substr(exePath.length,null());
HXLINE(1715)				bool _hx_tmp;
HXDLIN(1715)				bool _hx_tmp1;
HXDLIN(1715)				if (!(::StringTools_obj::startsWith(fullPath->__get(0),HX_("assets/",4c,2a,dc,36)))) {
HXLINE(1715)					_hx_tmp1 = ::StringTools_obj::startsWith(fullPath->__get(0),HX_("mods/",9e,2f,58,0c));
            				}
            				else {
HXLINE(1715)					_hx_tmp1 = true;
            				}
HXDLIN(1715)				if (_hx_tmp1) {
HXLINE(1715)					_hx_tmp = (fullPath->__get(0).indexOf(HX_("/images/",28,44,b7,41),null()) != -1);
            				}
            				else {
HXLINE(1715)					_hx_tmp = false;
            				}
HXDLIN(1715)				if (_hx_tmp) {
HXLINE(1717)					 ::Dynamic loadSprite1 = loadSprite;
HXDLIN(1717)					::String fullPath1 = fullPath->__get(0);
HXDLIN(1717)					int _hx_tmp2 = fullPath->__get(0).indexOf(HX_("/images/",28,44,b7,41),null());
HXDLIN(1717)					int _hx_tmp3 = (_hx_tmp2 + HX_("/images/",28,44,b7,41).length);
HXDLIN(1717)					loadSprite1(fullPath1.substring(_hx_tmp3,fullPath->__get(0).lastIndexOf(HX_(".",2e,00,00,00),null())));
HXLINE(1719)					return;
            				}
            			}
HXLINE(1723)			 ::flixel::group::FlxTypedSpriteGroup _hx_tmp4 = this->createPopup;
HXDLIN(1723)			_hx_tmp4->set_visible(this->createPopup->set_active(false));
HXLINE(1725)			::String modFolder;
HXDLIN(1725)			bool modFolder1;
HXDLIN(1725)			if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE(1725)				modFolder1 = (::backend::Mods_obj::currentModDirectory.length > 0);
            			}
            			else {
HXLINE(1725)				modFolder1 = false;
            			}
HXDLIN(1725)			if (modFolder1) {
HXLINE(1725)				::String key = ((HX_("",00,00,00,00) + ::backend::Mods_obj::currentModDirectory) + HX_("/images/",28,44,b7,41));
HXDLIN(1725)				if (::hx::IsNull( key )) {
HXLINE(1725)					key = HX_("",00,00,00,00);
            				}
HXDLIN(1725)				modFolder = (HX_("mods/",9e,2f,58,0c) + key);
            			}
            			else {
HXLINE(1725)				::String key1 = HX_("images/",77,50,74,c1);
HXDLIN(1725)				if (::hx::IsNull( key1 )) {
HXLINE(1725)					key1 = HX_("",00,00,00,00);
            				}
HXDLIN(1725)				modFolder = (HX_("mods/",9e,2f,58,0c) + key1);
            			}
HXLINE(1726)			this->openSubState( ::states::editors::content::BasePrompt_obj::__alloc( HX_CTX ,480,160,HX_("This file is not inside Psych Engine.",44,6e,f6,be), ::Dynamic(new _hx_Closure_4(_gthis,fullPath,loadSprite,modFolder)),null()));
            		}
HXLINE(1776)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageEditorState_obj,onLoadComplete,(void))

void StageEditorState_obj::tryLoadImage( ::states::editors::StageEditorMetaSprite spr,::String imgPath){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1783_tryLoadImage)
HXLINE(1784)		bool _hx_tmp;
HXDLIN(1784)		bool _hx_tmp1;
HXDLIN(1784)		bool _hx_tmp2;
HXDLIN(1784)		if (::hx::IsNotNull( spr )) {
HXLINE(1784)			_hx_tmp2 = ::backend::StageData_obj::reservedNames->contains(spr->type);
            		}
            		else {
HXLINE(1784)			_hx_tmp2 = true;
            		}
HXDLIN(1784)		if (!(_hx_tmp2)) {
HXLINE(1784)			_hx_tmp1 = (spr->type == HX_("square",9d,00,f2,58));
            		}
            		else {
HXLINE(1784)			_hx_tmp1 = true;
            		}
HXDLIN(1784)		if (!(_hx_tmp1)) {
HXLINE(1784)			_hx_tmp = ::hx::IsNull( imgPath );
            		}
            		else {
HXLINE(1784)			_hx_tmp = true;
            		}
HXDLIN(1784)		if (_hx_tmp) {
HXLINE(1784)			return;
            		}
HXLINE(1786)		spr->set_image(imgPath);
HXLINE(1787)		this->updateSelectedUI();
            	}


HX_DEFINE_DYNAMIC_FUNC2(StageEditorState_obj,tryLoadImage,(void))

void StageEditorState_obj::onLoadCancel( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1794_onLoadCancel)
HXLINE(1795)		if (::hx::IsNull( this->_file )) {
HXLINE(1795)			return;
            		}
HXLINE(1796)		this->_file->removeEventListener(HX_("select",fc,1a,33,6a),this->onLoadComplete_dyn(),null());
HXLINE(1797)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onLoadCancel_dyn(),null());
HXLINE(1798)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onLoadError_dyn(),null());
HXLINE(1799)		this->_file = null();
HXLINE(1801)		if (::hx::IsNotNull( this->_makeNewSprite )) {
HXLINE(1803)			 ::flixel::group::FlxTypedSpriteGroup _hx_tmp = this->createPopup;
HXDLIN(1803)			_hx_tmp->set_visible(this->createPopup->set_active(false));
HXLINE(1804)			this->_makeNewSprite = null();
            		}
HXLINE(1806)		::haxe::Log_obj::trace(HX_("Cancelled file loading.",67,56,c5,a3),::hx::SourceInfo(HX_("source/states/editors/StageEditorState.hx",16,7c,21,9d),1806,HX_("states.editors.StageEditorState",1a,37,b1,81),HX_("onLoadCancel",3f,be,a2,45)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageEditorState_obj,onLoadCancel,(void))

void StageEditorState_obj::onLoadError( ::openfl::events::IOErrorEvent _){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1813_onLoadError)
HXLINE(1814)		if (::hx::IsNull( this->_file )) {
HXLINE(1814)			return;
            		}
HXLINE(1815)		this->_file->removeEventListener(HX_("select",fc,1a,33,6a),this->onLoadComplete_dyn(),null());
HXLINE(1816)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onLoadCancel_dyn(),null());
HXLINE(1817)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onLoadError_dyn(),null());
HXLINE(1818)		this->_file = null();
HXLINE(1820)		if (::hx::IsNotNull( this->_makeNewSprite )) {
HXLINE(1822)			 ::flixel::group::FlxTypedSpriteGroup _hx_tmp = this->createPopup;
HXDLIN(1822)			_hx_tmp->set_visible(this->createPopup->set_active(false));
HXLINE(1823)			this->_makeNewSprite = null();
            		}
HXLINE(1825)		::haxe::Log_obj::trace(HX_("Problem loading file",21,8c,56,d8),::hx::SourceInfo(HX_("source/states/editors/StageEditorState.hx",16,7c,21,9d),1825,HX_("states.editors.StageEditorState",1a,37,b1,81),HX_("onLoadError",a3,fa,a3,b0)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageEditorState_obj,onLoadError,(void))

void StageEditorState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_775c3ef8cb7e424a_1829_destroy)
HXLINE(1830)		this->destroySubStates = true;
HXLINE(1831)		this->animationEditor->destroy();
HXLINE(1832)		this->super::destroy();
            	}



::hx::ObjectPtr< StageEditorState_obj > StageEditorState_obj::__new(::String __o_stageToLoad, ::Dynamic cachedJson) {
	::hx::ObjectPtr< StageEditorState_obj > __this = new StageEditorState_obj();
	__this->__construct(__o_stageToLoad,cachedJson);
	return __this;
}

::hx::ObjectPtr< StageEditorState_obj > StageEditorState_obj::__alloc(::hx::Ctx *_hx_ctx,::String __o_stageToLoad, ::Dynamic cachedJson) {
	StageEditorState_obj *__this = (StageEditorState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StageEditorState_obj), true, "states.editors.StageEditorState"));
	*(void **)__this = StageEditorState_obj::_hx_vtable;
	__this->__construct(__o_stageToLoad,cachedJson);
	return __this;
}

StageEditorState_obj::StageEditorState_obj()
{
}

void StageEditorState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StageEditorState);
	HX_MARK_MEMBER_NAME(minZoom,"minZoom");
	HX_MARK_MEMBER_NAME(maxZoom,"maxZoom");
	HX_MARK_MEMBER_NAME(gf,"gf");
	HX_MARK_MEMBER_NAME(dad,"dad");
	HX_MARK_MEMBER_NAME(boyfriend,"boyfriend");
	HX_MARK_MEMBER_NAME(stageJson,"stageJson");
	HX_MARK_MEMBER_NAME(camGame,"camGame");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(UI_stagebox,"UI_stagebox");
	HX_MARK_MEMBER_NAME(UI_box,"UI_box");
	HX_MARK_MEMBER_NAME(spriteList_box,"spriteList_box");
	HX_MARK_MEMBER_NAME(stageSprites,"stageSprites");
	HX_MARK_MEMBER_NAME(lastLoadedStage,"lastLoadedStage");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(helpBg,"helpBg");
	HX_MARK_MEMBER_NAME(helpTexts,"helpTexts");
	HX_MARK_MEMBER_NAME(posTxt,"posTxt");
	HX_MARK_MEMBER_NAME(outputTxt,"outputTxt");
	HX_MARK_MEMBER_NAME(animationEditor,"animationEditor");
	HX_MARK_MEMBER_NAME(unsavedProgress,"unsavedProgress");
	HX_MARK_MEMBER_NAME(selectionSprites,"selectionSprites");
	HX_MARK_MEMBER_NAME(showSelectionQuad,"showSelectionQuad");
	HX_MARK_MEMBER_NAME(spriteListRadioGroup,"spriteListRadioGroup");
	HX_MARK_MEMBER_NAME(focusRadioGroup,"focusRadioGroup");
	HX_MARK_MEMBER_NAME(createPopup,"createPopup");
	HX_MARK_MEMBER_NAME(directoryDropDown,"directoryDropDown");
	HX_MARK_MEMBER_NAME(uiInputText,"uiInputText");
	HX_MARK_MEMBER_NAME(hideGirlfriendCheckbox,"hideGirlfriendCheckbox");
	HX_MARK_MEMBER_NAME(zoomStepper,"zoomStepper");
	HX_MARK_MEMBER_NAME(cameraSpeedStepper,"cameraSpeedStepper");
	HX_MARK_MEMBER_NAME(camDadStepperX,"camDadStepperX");
	HX_MARK_MEMBER_NAME(camDadStepperY,"camDadStepperY");
	HX_MARK_MEMBER_NAME(camGfStepperX,"camGfStepperX");
	HX_MARK_MEMBER_NAME(camGfStepperY,"camGfStepperY");
	HX_MARK_MEMBER_NAME(camBfStepperX,"camBfStepperX");
	HX_MARK_MEMBER_NAME(camBfStepperY,"camBfStepperY");
	HX_MARK_MEMBER_NAME(colorInputText,"colorInputText");
	HX_MARK_MEMBER_NAME(nameInputText,"nameInputText");
	HX_MARK_MEMBER_NAME(imgTxt,"imgTxt");
	HX_MARK_MEMBER_NAME(scaleStepperX,"scaleStepperX");
	HX_MARK_MEMBER_NAME(scaleStepperY,"scaleStepperY");
	HX_MARK_MEMBER_NAME(scrollStepperX,"scrollStepperX");
	HX_MARK_MEMBER_NAME(scrollStepperY,"scrollStepperY");
	HX_MARK_MEMBER_NAME(angleStepper,"angleStepper");
	HX_MARK_MEMBER_NAME(alphaStepper,"alphaStepper");
	HX_MARK_MEMBER_NAME(antialiasingCheckbox,"antialiasingCheckbox");
	HX_MARK_MEMBER_NAME(flipXCheckBox,"flipXCheckBox");
	HX_MARK_MEMBER_NAME(flipYCheckBox,"flipYCheckBox");
	HX_MARK_MEMBER_NAME(lowQualityCheckbox,"lowQualityCheckbox");
	HX_MARK_MEMBER_NAME(highQualityCheckbox,"highQualityCheckbox");
	HX_MARK_MEMBER_NAME(oppDropdown,"oppDropdown");
	HX_MARK_MEMBER_NAME(gfDropdown,"gfDropdown");
	HX_MARK_MEMBER_NAME(plDropdown,"plDropdown");
	HX_MARK_MEMBER_NAME(stageDropDown,"stageDropDown");
	HX_MARK_MEMBER_NAME(outputTime,"outputTime");
	HX_MARK_MEMBER_NAME(curFilters,"curFilters");
	HX_MARK_MEMBER_NAME(_file,"_file");
	HX_MARK_MEMBER_NAME(_makeNewSprite,"_makeNewSprite");
	 ::backend::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void StageEditorState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(minZoom,"minZoom");
	HX_VISIT_MEMBER_NAME(maxZoom,"maxZoom");
	HX_VISIT_MEMBER_NAME(gf,"gf");
	HX_VISIT_MEMBER_NAME(dad,"dad");
	HX_VISIT_MEMBER_NAME(boyfriend,"boyfriend");
	HX_VISIT_MEMBER_NAME(stageJson,"stageJson");
	HX_VISIT_MEMBER_NAME(camGame,"camGame");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(UI_stagebox,"UI_stagebox");
	HX_VISIT_MEMBER_NAME(UI_box,"UI_box");
	HX_VISIT_MEMBER_NAME(spriteList_box,"spriteList_box");
	HX_VISIT_MEMBER_NAME(stageSprites,"stageSprites");
	HX_VISIT_MEMBER_NAME(lastLoadedStage,"lastLoadedStage");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(helpBg,"helpBg");
	HX_VISIT_MEMBER_NAME(helpTexts,"helpTexts");
	HX_VISIT_MEMBER_NAME(posTxt,"posTxt");
	HX_VISIT_MEMBER_NAME(outputTxt,"outputTxt");
	HX_VISIT_MEMBER_NAME(animationEditor,"animationEditor");
	HX_VISIT_MEMBER_NAME(unsavedProgress,"unsavedProgress");
	HX_VISIT_MEMBER_NAME(selectionSprites,"selectionSprites");
	HX_VISIT_MEMBER_NAME(showSelectionQuad,"showSelectionQuad");
	HX_VISIT_MEMBER_NAME(spriteListRadioGroup,"spriteListRadioGroup");
	HX_VISIT_MEMBER_NAME(focusRadioGroup,"focusRadioGroup");
	HX_VISIT_MEMBER_NAME(createPopup,"createPopup");
	HX_VISIT_MEMBER_NAME(directoryDropDown,"directoryDropDown");
	HX_VISIT_MEMBER_NAME(uiInputText,"uiInputText");
	HX_VISIT_MEMBER_NAME(hideGirlfriendCheckbox,"hideGirlfriendCheckbox");
	HX_VISIT_MEMBER_NAME(zoomStepper,"zoomStepper");
	HX_VISIT_MEMBER_NAME(cameraSpeedStepper,"cameraSpeedStepper");
	HX_VISIT_MEMBER_NAME(camDadStepperX,"camDadStepperX");
	HX_VISIT_MEMBER_NAME(camDadStepperY,"camDadStepperY");
	HX_VISIT_MEMBER_NAME(camGfStepperX,"camGfStepperX");
	HX_VISIT_MEMBER_NAME(camGfStepperY,"camGfStepperY");
	HX_VISIT_MEMBER_NAME(camBfStepperX,"camBfStepperX");
	HX_VISIT_MEMBER_NAME(camBfStepperY,"camBfStepperY");
	HX_VISIT_MEMBER_NAME(colorInputText,"colorInputText");
	HX_VISIT_MEMBER_NAME(nameInputText,"nameInputText");
	HX_VISIT_MEMBER_NAME(imgTxt,"imgTxt");
	HX_VISIT_MEMBER_NAME(scaleStepperX,"scaleStepperX");
	HX_VISIT_MEMBER_NAME(scaleStepperY,"scaleStepperY");
	HX_VISIT_MEMBER_NAME(scrollStepperX,"scrollStepperX");
	HX_VISIT_MEMBER_NAME(scrollStepperY,"scrollStepperY");
	HX_VISIT_MEMBER_NAME(angleStepper,"angleStepper");
	HX_VISIT_MEMBER_NAME(alphaStepper,"alphaStepper");
	HX_VISIT_MEMBER_NAME(antialiasingCheckbox,"antialiasingCheckbox");
	HX_VISIT_MEMBER_NAME(flipXCheckBox,"flipXCheckBox");
	HX_VISIT_MEMBER_NAME(flipYCheckBox,"flipYCheckBox");
	HX_VISIT_MEMBER_NAME(lowQualityCheckbox,"lowQualityCheckbox");
	HX_VISIT_MEMBER_NAME(highQualityCheckbox,"highQualityCheckbox");
	HX_VISIT_MEMBER_NAME(oppDropdown,"oppDropdown");
	HX_VISIT_MEMBER_NAME(gfDropdown,"gfDropdown");
	HX_VISIT_MEMBER_NAME(plDropdown,"plDropdown");
	HX_VISIT_MEMBER_NAME(stageDropDown,"stageDropDown");
	HX_VISIT_MEMBER_NAME(outputTime,"outputTime");
	HX_VISIT_MEMBER_NAME(curFilters,"curFilters");
	HX_VISIT_MEMBER_NAME(_file,"_file");
	HX_VISIT_MEMBER_NAME(_makeNewSprite,"_makeNewSprite");
	 ::backend::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val StageEditorState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { return ::hx::Val( gf ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { return ::hx::Val( dad ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { return ::hx::Val( _file ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"UI_box") ) { return ::hx::Val( UI_box ); }
		if (HX_FIELD_EQ(inName,"helpBg") ) { return ::hx::Val( helpBg ); }
		if (HX_FIELD_EQ(inName,"posTxt") ) { return ::hx::Val( posTxt ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"imgTxt") ) { return ::hx::Val( imgTxt ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"minZoom") ) { return ::hx::Val( minZoom ); }
		if (HX_FIELD_EQ(inName,"maxZoom") ) { return ::hx::Val( maxZoom ); }
		if (HX_FIELD_EQ(inName,"camGame") ) { return ::hx::Val( camGame ); }
		if (HX_FIELD_EQ(inName,"UIEvent") ) { return ::hx::Val( UIEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"screenUI") ) { return ::hx::Val( screenUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"editorUI") ) { return ::hx::Val( editorUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"saveData") ) { return ::hx::Val( saveData_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"boyfriend") ) { return ::hx::Val( boyfriend ); }
		if (HX_FIELD_EQ(inName,"stageJson") ) { return ::hx::Val( stageJson ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"helpTexts") ) { return ::hx::Val( helpTexts ); }
		if (HX_FIELD_EQ(inName,"outputTxt") ) { return ::hx::Val( outputTxt ); }
		if (HX_FIELD_EQ(inName,"loadImage") ) { return ::hx::Val( loadImage_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"showOutput") ) { return ::hx::Val( showOutput_dyn() ); }
		if (HX_FIELD_EQ(inName,"insertMeta") ) { return ::hx::Val( insertMeta_dyn() ); }
		if (HX_FIELD_EQ(inName,"addDataTab") ) { return ::hx::Val( addDataTab_dyn() ); }
		if (HX_FIELD_EQ(inName,"gfDropdown") ) { return ::hx::Val( gfDropdown ); }
		if (HX_FIELD_EQ(inName,"plDropdown") ) { return ::hx::Val( plDropdown ); }
		if (HX_FIELD_EQ(inName,"addMetaTab") ) { return ::hx::Val( addMetaTab_dyn() ); }
		if (HX_FIELD_EQ(inName,"outputTime") ) { return ::hx::Val( outputTime ); }
		if (HX_FIELD_EQ(inName,"curFilters") ) { return ::hx::Val( curFilters ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"UI_stagebox") ) { return ::hx::Val( UI_stagebox ); }
		if (HX_FIELD_EQ(inName,"createPopup") ) { return ::hx::Val( createPopup ); }
		if (HX_FIELD_EQ(inName,"uiInputText") ) { return ::hx::Val( uiInputText ); }
		if (HX_FIELD_EQ(inName,"zoomStepper") ) { return ::hx::Val( zoomStepper ); }
		if (HX_FIELD_EQ(inName,"getSelected") ) { return ::hx::Val( getSelected_dyn() ); }
		if (HX_FIELD_EQ(inName,"oppDropdown") ) { return ::hx::Val( oppDropdown ); }
		if (HX_FIELD_EQ(inName,"addStageTab") ) { return ::hx::Val( addStageTab_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveError") ) { return ::hx::Val( onSaveError_dyn() ); }
		if (HX_FIELD_EQ(inName,"onLoadError") ) { return ::hx::Val( onLoadError_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"stageSprites") ) { return ::hx::Val( stageSprites ); }
		if (HX_FIELD_EQ(inName,"angleStepper") ) { return ::hx::Val( angleStepper ); }
		if (HX_FIELD_EQ(inName,"alphaStepper") ) { return ::hx::Val( alphaStepper ); }
		if (HX_FIELD_EQ(inName,"addObjectTab") ) { return ::hx::Val( addObjectTab_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveCancel") ) { return ::hx::Val( onSaveCancel_dyn() ); }
		if (HX_FIELD_EQ(inName,"tryLoadImage") ) { return ::hx::Val( tryLoadImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"onLoadCancel") ) { return ::hx::Val( onLoadCancel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"addHelpScreen") ) { return ::hx::Val( addHelpScreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"camGfStepperX") ) { return ::hx::Val( camGfStepperX ); }
		if (HX_FIELD_EQ(inName,"camGfStepperY") ) { return ::hx::Val( camGfStepperY ); }
		if (HX_FIELD_EQ(inName,"camBfStepperX") ) { return ::hx::Val( camBfStepperX ); }
		if (HX_FIELD_EQ(inName,"camBfStepperY") ) { return ::hx::Val( camBfStepperY ); }
		if (HX_FIELD_EQ(inName,"_updateCamera") ) { return ::hx::Val( _updateCamera_dyn() ); }
		if (HX_FIELD_EQ(inName,"nameInputText") ) { return ::hx::Val( nameInputText ); }
		if (HX_FIELD_EQ(inName,"scaleStepperX") ) { return ::hx::Val( scaleStepperX ); }
		if (HX_FIELD_EQ(inName,"scaleStepperY") ) { return ::hx::Val( scaleStepperY ); }
		if (HX_FIELD_EQ(inName,"flipXCheckBox") ) { return ::hx::Val( flipXCheckBox ); }
		if (HX_FIELD_EQ(inName,"flipYCheckBox") ) { return ::hx::Val( flipYCheckBox ); }
		if (HX_FIELD_EQ(inName,"stageDropDown") ) { return ::hx::Val( stageDropDown ); }
		if (HX_FIELD_EQ(inName,"focusOnTarget") ) { return ::hx::Val( focusOnTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"repositionDad") ) { return ::hx::Val( repositionDad_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"spriteList_box") ) { return ::hx::Val( spriteList_box ); }
		if (HX_FIELD_EQ(inName,"camDadStepperX") ) { return ::hx::Val( camDadStepperX ); }
		if (HX_FIELD_EQ(inName,"camDadStepperY") ) { return ::hx::Val( camDadStepperY ); }
		if (HX_FIELD_EQ(inName,"colorInputText") ) { return ::hx::Val( colorInputText ); }
		if (HX_FIELD_EQ(inName,"scrollStepperX") ) { return ::hx::Val( scrollStepperX ); }
		if (HX_FIELD_EQ(inName,"scrollStepperY") ) { return ::hx::Val( scrollStepperY ); }
		if (HX_FIELD_EQ(inName,"onSaveComplete") ) { return ::hx::Val( onSaveComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"_makeNewSprite") ) { return ::hx::Val( _makeNewSprite ); }
		if (HX_FIELD_EQ(inName,"onLoadComplete") ) { return ::hx::Val( onLoadComplete_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"lastLoadedStage") ) { return ::hx::Val( lastLoadedStage ); }
		if (HX_FIELD_EQ(inName,"animationEditor") ) { return ::hx::Val( animationEditor ); }
		if (HX_FIELD_EQ(inName,"unsavedProgress") ) { return ::hx::Val( unsavedProgress ); }
		if (HX_FIELD_EQ(inName,"focusRadioGroup") ) { return ::hx::Val( focusRadioGroup ); }
		if (HX_FIELD_EQ(inName,"checkUIOnObject") ) { return ::hx::Val( checkUIOnObject_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectionSprites") ) { return ::hx::Val( selectionSprites ); }
		if (HX_FIELD_EQ(inName,"updateSpriteList") ) { return ::hx::Val( updateSpriteList_dyn() ); }
		if (HX_FIELD_EQ(inName,"addSpriteListBox") ) { return ::hx::Val( addSpriteListBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateSelectedUI") ) { return ::hx::Val( updateSelectedUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"reloadCharacters") ) { return ::hx::Val( reloadCharacters_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"showSelectionQuad") ) { return ::hx::Val( showSelectionQuad ); }
		if (HX_FIELD_EQ(inName,"spriteCreatePopup") ) { return ::hx::Val( spriteCreatePopup_dyn() ); }
		if (HX_FIELD_EQ(inName,"directoryDropDown") ) { return ::hx::Val( directoryDropDown ); }
		if (HX_FIELD_EQ(inName,"updateStageDataUI") ) { return ::hx::Val( updateStageDataUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawDebugOnCamera") ) { return ::hx::Val( drawDebugOnCamera_dyn() ); }
		if (HX_FIELD_EQ(inName,"saveObjectsToJson") ) { return ::hx::Val( saveObjectsToJson_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"findUnoccupiedName") ) { return ::hx::Val( findUnoccupiedName_dyn() ); }
		if (HX_FIELD_EQ(inName,"cameraSpeedStepper") ) { return ::hx::Val( cameraSpeedStepper ); }
		if (HX_FIELD_EQ(inName,"lowQualityCheckbox") ) { return ::hx::Val( lowQualityCheckbox ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"highQualityCheckbox") ) { return ::hx::Val( highQualityCheckbox ); }
		if (HX_FIELD_EQ(inName,"reloadStageDropDown") ) { return ::hx::Val( reloadStageDropDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"repositionBoyfriend") ) { return ::hx::Val( repositionBoyfriend_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"spriteListRadioGroup") ) { return ::hx::Val( spriteListRadioGroup ); }
		if (HX_FIELD_EQ(inName,"antialiasingCheckbox") ) { return ::hx::Val( antialiasingCheckbox ); }
		if (HX_FIELD_EQ(inName,"repositionGirlfriend") ) { return ::hx::Val( repositionGirlfriend_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"updateSpriteListRadio") ) { return ::hx::Val( updateSpriteListRadio_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"loadJsonAssetDirectory") ) { return ::hx::Val( loadJsonAssetDirectory_dyn() ); }
		if (HX_FIELD_EQ(inName,"hideGirlfriendCheckbox") ) { return ::hx::Val( hideGirlfriendCheckbox ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val StageEditorState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { gf=inValue.Cast<  ::objects::Character >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { dad=inValue.Cast<  ::objects::Character >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { _file=inValue.Cast<  ::openfl::net::FileReference >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UI_box") ) { UI_box=inValue.Cast<  ::backend::ui::PsychUIBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"helpBg") ) { helpBg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"posTxt") ) { posTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"imgTxt") ) { imgTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"minZoom") ) { minZoom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxZoom") ) { maxZoom=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"boyfriend") ) { boyfriend=inValue.Cast<  ::objects::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stageJson") ) { stageJson=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"helpTexts") ) { helpTexts=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"outputTxt") ) { outputTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"gfDropdown") ) { gfDropdown=inValue.Cast<  ::backend::ui::PsychUIDropDownMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"plDropdown") ) { plDropdown=inValue.Cast<  ::backend::ui::PsychUIDropDownMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"outputTime") ) { outputTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curFilters") ) { curFilters=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"UI_stagebox") ) { UI_stagebox=inValue.Cast<  ::backend::ui::PsychUIBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"createPopup") ) { createPopup=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uiInputText") ) { uiInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zoomStepper") ) { zoomStepper=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"oppDropdown") ) { oppDropdown=inValue.Cast<  ::backend::ui::PsychUIDropDownMenu >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"stageSprites") ) { stageSprites=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angleStepper") ) { angleStepper=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alphaStepper") ) { alphaStepper=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"camGfStepperX") ) { camGfStepperX=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camGfStepperY") ) { camGfStepperY=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camBfStepperX") ) { camBfStepperX=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camBfStepperY") ) { camBfStepperY=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nameInputText") ) { nameInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scaleStepperX") ) { scaleStepperX=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scaleStepperY") ) { scaleStepperY=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flipXCheckBox") ) { flipXCheckBox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flipYCheckBox") ) { flipYCheckBox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stageDropDown") ) { stageDropDown=inValue.Cast<  ::backend::ui::PsychUIDropDownMenu >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"spriteList_box") ) { spriteList_box=inValue.Cast<  ::backend::ui::PsychUIBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camDadStepperX") ) { camDadStepperX=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camDadStepperY") ) { camDadStepperY=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colorInputText") ) { colorInputText=inValue.Cast<  ::backend::ui::PsychUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollStepperX") ) { scrollStepperX=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollStepperY") ) { scrollStepperY=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_makeNewSprite") ) { _makeNewSprite=inValue.Cast< ::String >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"lastLoadedStage") ) { lastLoadedStage=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animationEditor") ) { animationEditor=inValue.Cast<  ::states::editors::StageEditorAnimationSubstate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unsavedProgress") ) { unsavedProgress=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"focusRadioGroup") ) { focusRadioGroup=inValue.Cast<  ::backend::ui::PsychUIRadioGroup >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectionSprites") ) { selectionSprites=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"showSelectionQuad") ) { showSelectionQuad=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"directoryDropDown") ) { directoryDropDown=inValue.Cast<  ::backend::ui::PsychUIDropDownMenu >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"cameraSpeedStepper") ) { cameraSpeedStepper=inValue.Cast<  ::backend::ui::PsychUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lowQualityCheckbox") ) { lowQualityCheckbox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"highQualityCheckbox") ) { highQualityCheckbox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"spriteListRadioGroup") ) { spriteListRadioGroup=inValue.Cast<  ::backend::ui::PsychUIRadioGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"antialiasingCheckbox") ) { antialiasingCheckbox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"hideGirlfriendCheckbox") ) { hideGirlfriendCheckbox=inValue.Cast<  ::backend::ui::PsychUICheckBox >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StageEditorState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("minZoom",c5,11,02,42));
	outFields->push(HX_("maxZoom",d7,fb,28,d1));
	outFields->push(HX_("gf",1f,5a,00,00));
	outFields->push(HX_("dad",47,36,4c,00));
	outFields->push(HX_("boyfriend",6a,29,b8,e6));
	outFields->push(HX_("stageJson",06,10,6c,f6));
	outFields->push(HX_("camGame",a1,47,50,cf));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("UI_stagebox",98,e0,ff,c9));
	outFields->push(HX_("UI_box",60,07,ac,43));
	outFields->push(HX_("spriteList_box",8f,4b,6c,83));
	outFields->push(HX_("stageSprites",b0,59,e2,66));
	outFields->push(HX_("lastLoadedStage",c3,01,6a,20));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("helpBg",e6,5e,4e,04));
	outFields->push(HX_("helpTexts",a5,ec,c6,36));
	outFields->push(HX_("posTxt",3c,7d,b6,fd));
	outFields->push(HX_("outputTxt",ef,ad,3b,e5));
	outFields->push(HX_("animationEditor",d1,bf,d9,4a));
	outFields->push(HX_("unsavedProgress",5b,33,8b,06));
	outFields->push(HX_("selectionSprites",e2,b9,89,cf));
	outFields->push(HX_("showSelectionQuad",f6,d3,02,1a));
	outFields->push(HX_("spriteListRadioGroup",27,b5,cc,f3));
	outFields->push(HX_("focusRadioGroup",3c,46,55,29));
	outFields->push(HX_("createPopup",90,41,10,f0));
	outFields->push(HX_("directoryDropDown",be,03,0b,bc));
	outFields->push(HX_("uiInputText",e3,98,29,7a));
	outFields->push(HX_("hideGirlfriendCheckbox",7f,1b,e6,76));
	outFields->push(HX_("zoomStepper",3e,62,21,ea));
	outFields->push(HX_("cameraSpeedStepper",8f,1a,53,e0));
	outFields->push(HX_("camDadStepperX",bf,8b,67,bf));
	outFields->push(HX_("camDadStepperY",c0,8b,67,bf));
	outFields->push(HX_("camGfStepperX",55,f8,d9,ae));
	outFields->push(HX_("camGfStepperY",56,f8,d9,ae));
	outFields->push(HX_("camBfStepperX",fa,a0,65,ed));
	outFields->push(HX_("camBfStepperY",fb,a0,65,ed));
	outFields->push(HX_("colorInputText",f4,33,d1,7b));
	outFields->push(HX_("nameInputText",0c,d6,4a,54));
	outFields->push(HX_("imgTxt",2d,3e,7b,02));
	outFields->push(HX_("scaleStepperX",d1,8e,c5,7b));
	outFields->push(HX_("scaleStepperY",d2,8e,c5,7b));
	outFields->push(HX_("scrollStepperX",54,53,95,3e));
	outFields->push(HX_("scrollStepperY",55,53,95,3e));
	outFields->push(HX_("angleStepper",7e,59,81,84));
	outFields->push(HX_("alphaStepper",53,4d,d3,14));
	outFields->push(HX_("antialiasingCheckbox",57,b9,78,07));
	outFields->push(HX_("flipXCheckBox",4e,0e,ce,8c));
	outFields->push(HX_("flipYCheckBox",4f,77,bf,5f));
	outFields->push(HX_("lowQualityCheckbox",ee,e3,84,a0));
	outFields->push(HX_("highQualityCheckbox",e0,58,38,b3));
	outFields->push(HX_("oppDropdown",60,13,84,21));
	outFields->push(HX_("gfDropdown",50,41,07,41));
	outFields->push(HX_("plDropdown",2d,ee,4d,f5));
	outFields->push(HX_("stageDropDown",0f,b5,6b,4d));
	outFields->push(HX_("outputTime",ae,1b,f1,ae));
	outFields->push(HX_("curFilters",1b,f4,2f,14));
	outFields->push(HX_("_file",5b,ea,cc,f6));
	outFields->push(HX_("_makeNewSprite",f8,90,41,b8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StageEditorState_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(StageEditorState_obj,minZoom),HX_("minZoom",c5,11,02,42)},
	{::hx::fsInt,(int)offsetof(StageEditorState_obj,maxZoom),HX_("maxZoom",d7,fb,28,d1)},
	{::hx::fsObject /*  ::objects::Character */ ,(int)offsetof(StageEditorState_obj,gf),HX_("gf",1f,5a,00,00)},
	{::hx::fsObject /*  ::objects::Character */ ,(int)offsetof(StageEditorState_obj,dad),HX_("dad",47,36,4c,00)},
	{::hx::fsObject /*  ::objects::Character */ ,(int)offsetof(StageEditorState_obj,boyfriend),HX_("boyfriend",6a,29,b8,e6)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(StageEditorState_obj,stageJson),HX_("stageJson",06,10,6c,f6)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(StageEditorState_obj,camGame),HX_("camGame",a1,47,50,cf)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(StageEditorState_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::backend::ui::PsychUIBox */ ,(int)offsetof(StageEditorState_obj,UI_stagebox),HX_("UI_stagebox",98,e0,ff,c9)},
	{::hx::fsObject /*  ::backend::ui::PsychUIBox */ ,(int)offsetof(StageEditorState_obj,UI_box),HX_("UI_box",60,07,ac,43)},
	{::hx::fsObject /*  ::backend::ui::PsychUIBox */ ,(int)offsetof(StageEditorState_obj,spriteList_box),HX_("spriteList_box",8f,4b,6c,83)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(StageEditorState_obj,stageSprites),HX_("stageSprites",b0,59,e2,66)},
	{::hx::fsString,(int)offsetof(StageEditorState_obj,lastLoadedStage),HX_("lastLoadedStage",c3,01,6a,20)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(StageEditorState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StageEditorState_obj,helpBg),HX_("helpBg",e6,5e,4e,04)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(StageEditorState_obj,helpTexts),HX_("helpTexts",a5,ec,c6,36)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(StageEditorState_obj,posTxt),HX_("posTxt",3c,7d,b6,fd)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(StageEditorState_obj,outputTxt),HX_("outputTxt",ef,ad,3b,e5)},
	{::hx::fsObject /*  ::states::editors::StageEditorAnimationSubstate */ ,(int)offsetof(StageEditorState_obj,animationEditor),HX_("animationEditor",d1,bf,d9,4a)},
	{::hx::fsBool,(int)offsetof(StageEditorState_obj,unsavedProgress),HX_("unsavedProgress",5b,33,8b,06)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(StageEditorState_obj,selectionSprites),HX_("selectionSprites",e2,b9,89,cf)},
	{::hx::fsBool,(int)offsetof(StageEditorState_obj,showSelectionQuad),HX_("showSelectionQuad",f6,d3,02,1a)},
	{::hx::fsObject /*  ::backend::ui::PsychUIRadioGroup */ ,(int)offsetof(StageEditorState_obj,spriteListRadioGroup),HX_("spriteListRadioGroup",27,b5,cc,f3)},
	{::hx::fsObject /*  ::backend::ui::PsychUIRadioGroup */ ,(int)offsetof(StageEditorState_obj,focusRadioGroup),HX_("focusRadioGroup",3c,46,55,29)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(StageEditorState_obj,createPopup),HX_("createPopup",90,41,10,f0)},
	{::hx::fsObject /*  ::backend::ui::PsychUIDropDownMenu */ ,(int)offsetof(StageEditorState_obj,directoryDropDown),HX_("directoryDropDown",be,03,0b,bc)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(StageEditorState_obj,uiInputText),HX_("uiInputText",e3,98,29,7a)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(StageEditorState_obj,hideGirlfriendCheckbox),HX_("hideGirlfriendCheckbox",7f,1b,e6,76)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(StageEditorState_obj,zoomStepper),HX_("zoomStepper",3e,62,21,ea)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(StageEditorState_obj,cameraSpeedStepper),HX_("cameraSpeedStepper",8f,1a,53,e0)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(StageEditorState_obj,camDadStepperX),HX_("camDadStepperX",bf,8b,67,bf)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(StageEditorState_obj,camDadStepperY),HX_("camDadStepperY",c0,8b,67,bf)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(StageEditorState_obj,camGfStepperX),HX_("camGfStepperX",55,f8,d9,ae)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(StageEditorState_obj,camGfStepperY),HX_("camGfStepperY",56,f8,d9,ae)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(StageEditorState_obj,camBfStepperX),HX_("camBfStepperX",fa,a0,65,ed)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(StageEditorState_obj,camBfStepperY),HX_("camBfStepperY",fb,a0,65,ed)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(StageEditorState_obj,colorInputText),HX_("colorInputText",f4,33,d1,7b)},
	{::hx::fsObject /*  ::backend::ui::PsychUIInputText */ ,(int)offsetof(StageEditorState_obj,nameInputText),HX_("nameInputText",0c,d6,4a,54)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(StageEditorState_obj,imgTxt),HX_("imgTxt",2d,3e,7b,02)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(StageEditorState_obj,scaleStepperX),HX_("scaleStepperX",d1,8e,c5,7b)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(StageEditorState_obj,scaleStepperY),HX_("scaleStepperY",d2,8e,c5,7b)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(StageEditorState_obj,scrollStepperX),HX_("scrollStepperX",54,53,95,3e)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(StageEditorState_obj,scrollStepperY),HX_("scrollStepperY",55,53,95,3e)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(StageEditorState_obj,angleStepper),HX_("angleStepper",7e,59,81,84)},
	{::hx::fsObject /*  ::backend::ui::PsychUINumericStepper */ ,(int)offsetof(StageEditorState_obj,alphaStepper),HX_("alphaStepper",53,4d,d3,14)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(StageEditorState_obj,antialiasingCheckbox),HX_("antialiasingCheckbox",57,b9,78,07)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(StageEditorState_obj,flipXCheckBox),HX_("flipXCheckBox",4e,0e,ce,8c)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(StageEditorState_obj,flipYCheckBox),HX_("flipYCheckBox",4f,77,bf,5f)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(StageEditorState_obj,lowQualityCheckbox),HX_("lowQualityCheckbox",ee,e3,84,a0)},
	{::hx::fsObject /*  ::backend::ui::PsychUICheckBox */ ,(int)offsetof(StageEditorState_obj,highQualityCheckbox),HX_("highQualityCheckbox",e0,58,38,b3)},
	{::hx::fsObject /*  ::backend::ui::PsychUIDropDownMenu */ ,(int)offsetof(StageEditorState_obj,oppDropdown),HX_("oppDropdown",60,13,84,21)},
	{::hx::fsObject /*  ::backend::ui::PsychUIDropDownMenu */ ,(int)offsetof(StageEditorState_obj,gfDropdown),HX_("gfDropdown",50,41,07,41)},
	{::hx::fsObject /*  ::backend::ui::PsychUIDropDownMenu */ ,(int)offsetof(StageEditorState_obj,plDropdown),HX_("plDropdown",2d,ee,4d,f5)},
	{::hx::fsObject /*  ::backend::ui::PsychUIDropDownMenu */ ,(int)offsetof(StageEditorState_obj,stageDropDown),HX_("stageDropDown",0f,b5,6b,4d)},
	{::hx::fsFloat,(int)offsetof(StageEditorState_obj,outputTime),HX_("outputTime",ae,1b,f1,ae)},
	{::hx::fsInt,(int)offsetof(StageEditorState_obj,curFilters),HX_("curFilters",1b,f4,2f,14)},
	{::hx::fsObject /*  ::openfl::net::FileReference */ ,(int)offsetof(StageEditorState_obj,_file),HX_("_file",5b,ea,cc,f6)},
	{::hx::fsString,(int)offsetof(StageEditorState_obj,_makeNewSprite),HX_("_makeNewSprite",f8,90,41,b8)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *StageEditorState_obj_sStaticStorageInfo = 0;
#endif

static ::String StageEditorState_obj_sMemberFields[] = {
	HX_("minZoom",c5,11,02,42),
	HX_("maxZoom",d7,fb,28,d1),
	HX_("gf",1f,5a,00,00),
	HX_("dad",47,36,4c,00),
	HX_("boyfriend",6a,29,b8,e6),
	HX_("stageJson",06,10,6c,f6),
	HX_("camGame",a1,47,50,cf),
	HX_("camHUD",e8,2b,76,b7),
	HX_("UI_stagebox",98,e0,ff,c9),
	HX_("UI_box",60,07,ac,43),
	HX_("spriteList_box",8f,4b,6c,83),
	HX_("stageSprites",b0,59,e2,66),
	HX_("lastLoadedStage",c3,01,6a,20),
	HX_("camFollow",e0,6e,47,22),
	HX_("helpBg",e6,5e,4e,04),
	HX_("helpTexts",a5,ec,c6,36),
	HX_("posTxt",3c,7d,b6,fd),
	HX_("outputTxt",ef,ad,3b,e5),
	HX_("animationEditor",d1,bf,d9,4a),
	HX_("unsavedProgress",5b,33,8b,06),
	HX_("selectionSprites",e2,b9,89,cf),
	HX_("create",fc,66,0f,7c),
	HX_("loadJsonAssetDirectory",6b,36,11,9e),
	HX_("showSelectionQuad",f6,d3,02,1a),
	HX_("addHelpScreen",8e,32,66,90),
	HX_("updateSpriteList",6c,da,2c,37),
	HX_("spriteListRadioGroup",27,b5,cc,f3),
	HX_("focusRadioGroup",3c,46,55,29),
	HX_("screenUI",c0,38,b4,c5),
	HX_("addSpriteListBox",e7,cb,14,58),
	HX_("showOutput",de,b3,f5,75),
	HX_("createPopup",90,41,10,f0),
	HX_("findUnoccupiedName",bb,0d,8c,ca),
	HX_("insertMeta",9e,4a,44,2e),
	HX_("spriteCreatePopup",8b,a1,bf,89),
	HX_("updateSpriteListRadio",ef,5e,cd,bb),
	HX_("editorUI",41,11,f3,de),
	HX_("directoryDropDown",be,03,0b,bc),
	HX_("uiInputText",e3,98,29,7a),
	HX_("hideGirlfriendCheckbox",7f,1b,e6,76),
	HX_("zoomStepper",3e,62,21,ea),
	HX_("cameraSpeedStepper",8f,1a,53,e0),
	HX_("camDadStepperX",bf,8b,67,bf),
	HX_("camDadStepperY",c0,8b,67,bf),
	HX_("camGfStepperX",55,f8,d9,ae),
	HX_("camGfStepperY",56,f8,d9,ae),
	HX_("camBfStepperX",fa,a0,65,ed),
	HX_("camBfStepperY",fb,a0,65,ed),
	HX_("addDataTab",2a,9e,63,79),
	HX_("_updateCamera",6d,80,be,99),
	HX_("colorInputText",f4,33,d1,7b),
	HX_("nameInputText",0c,d6,4a,54),
	HX_("imgTxt",2d,3e,7b,02),
	HX_("scaleStepperX",d1,8e,c5,7b),
	HX_("scaleStepperY",d2,8e,c5,7b),
	HX_("scrollStepperX",54,53,95,3e),
	HX_("scrollStepperY",55,53,95,3e),
	HX_("angleStepper",7e,59,81,84),
	HX_("alphaStepper",53,4d,d3,14),
	HX_("antialiasingCheckbox",57,b9,78,07),
	HX_("flipXCheckBox",4e,0e,ce,8c),
	HX_("flipYCheckBox",4f,77,bf,5f),
	HX_("lowQualityCheckbox",ee,e3,84,a0),
	HX_("highQualityCheckbox",e0,58,38,b3),
	HX_("getSelected",11,ed,60,d7),
	HX_("addObjectTab",75,36,d7,42),
	HX_("oppDropdown",60,13,84,21),
	HX_("gfDropdown",50,41,07,41),
	HX_("plDropdown",2d,ee,4d,f5),
	HX_("addMetaTab",6f,3c,12,89),
	HX_("stageDropDown",0f,b5,6b,4d),
	HX_("addStageTab",78,a9,a5,14),
	HX_("updateStageDataUI",d3,2c,e8,19),
	HX_("updateSelectedUI",d8,d0,bc,10),
	HX_("reloadCharacters",63,b9,37,67),
	HX_("reloadStageDropDown",f6,cd,66,32),
	HX_("checkUIOnObject",7a,52,d7,50),
	HX_("UIEvent",26,fd,9f,07),
	HX_("outputTime",ae,1b,f1,ae),
	HX_("update",09,86,05,87),
	HX_("curFilters",1b,f4,2f,14),
	HX_("draw",04,2c,70,42),
	HX_("focusOnTarget",c8,9d,7c,07),
	HX_("repositionGirlfriend",36,50,4b,43),
	HX_("repositionDad",4b,80,90,ff),
	HX_("repositionBoyfriend",6e,ce,a5,8b),
	HX_("drawDebugOnCamera",f3,47,7b,cb),
	HX_("saveObjectsToJson",ba,a3,5e,8f),
	HX_("saveData",07,f0,1c,f6),
	HX_("_file",5b,ea,cc,f6),
	HX_("onSaveComplete",d5,ac,3f,bc),
	HX_("onSaveCancel",96,1a,31,d9),
	HX_("onSaveError",2c,b6,19,24),
	HX_("_makeNewSprite",f8,90,41,b8),
	HX_("loadImage",55,6b,a0,d8),
	HX_("onLoadComplete",be,4c,20,63),
	HX_("tryLoadImage",9a,62,6f,8b),
	HX_("onLoadCancel",3f,be,a2,45),
	HX_("onLoadError",a3,fa,a3,b0),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

::hx::Class StageEditorState_obj::__mClass;

void StageEditorState_obj::__register()
{
	StageEditorState_obj _hx_dummy;
	StageEditorState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.editors.StageEditorState",1a,37,b1,81);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StageEditorState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StageEditorState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StageEditorState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StageEditorState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
} // end namespace editors
