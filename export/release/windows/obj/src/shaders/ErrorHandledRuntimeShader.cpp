// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_flixel_addons_display_FlxRuntimeShader
#include <flixel/addons/display/FlxRuntimeShader.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_shaders_ErrorHandledRuntimeShader
#include <shaders/ErrorHandledRuntimeShader.h>
#endif
#ifndef INCLUDED_shaders_ErrorHandledShader
#include <shaders/ErrorHandledShader.h>
#endif
#ifndef INCLUDED_shaders_IErrorHandler
#include <shaders/IErrorHandler.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ca31f77da8108ab6_58_new,"shaders.ErrorHandledRuntimeShader","new",0xd58a6b3b,"shaders.ErrorHandledRuntimeShader.new","shaders/ErrorHandledShader.hx",58,0x5f0564c4)
HX_LOCAL_STACK_FRAME(_hx_pos_ca31f77da8108ab6_61___default_onError,"shaders.ErrorHandledRuntimeShader","__default_onError",0x2ee7ba66,"shaders.ErrorHandledRuntimeShader.__default_onError","shaders/ErrorHandledShader.hx",61,0x5f0564c4)
HX_LOCAL_STACK_FRAME(_hx_pos_ca31f77da8108ab6_70___createGLProgram,"shaders.ErrorHandledRuntimeShader","__createGLProgram",0xd8c6415e,"shaders.ErrorHandledRuntimeShader.__createGLProgram","shaders/ErrorHandledShader.hx",70,0x5f0564c4)
namespace shaders{

void ErrorHandledRuntimeShader_obj::__construct(::String shaderName,::String fragmentSource,::String vertexSource){
            	HX_STACKFRAME(&_hx_pos_ca31f77da8108ab6_58_new)
HXLINE(  60)		this->shaderName = HX_("",00,00,00,00);
HXLINE( 182)		if (::hx::IsNull( this->_hx___glFragmentSource )) {
HXLINE( 184)			this->_hx___glFragmentSource = HX_("\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tuniform bool hasTransform;\n\t\tuniform bool hasColorTransform;\n\n\t\tvec4 flixel_texture2D(sampler2D bitmap, vec2 coord)\n\t\t{\n\t\t\tvec4 color = texture2D(bitmap, coord);\n\t\t\tif (!hasTransform)\n\t\t\t{\n\t\t\t\treturn color;\n\t\t\t}\n\n\t\t\tif (color.a == 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tif (!hasColorTransform)\n\t\t\t{\n\t\t\t\treturn color * openfl_Alphav;\n\t\t\t}\n\n\t\t\tcolor = vec4(color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4(0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp(openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t}\n\t\n\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\tgl_FragColor = flixel_texture2D(bitmap, openfl_TextureCoordv);\n\t\t}",71,0e,7a,59);
            		}
HXLINE( 174)		if (::hx::IsNull( this->_hx___glVertexSource )) {
HXLINE( 176)			this->_hx___glVertexSource = HX_("\n\t\tattribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\t\n\t\tattribute float alpha;\n\t\tattribute vec4 colorMultiplier;\n\t\tattribute vec4 colorOffset;\n\t\tuniform bool hasColorTransform;\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t\t\n\t\t\topenfl_Alphav = openfl_Alpha * alpha;\n\t\t\t\n\t\t\tif (hasColorTransform)\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = colorOffset / 255.0;\n\t\t\t\topenfl_ColorMultiplierv = colorMultiplier;\n\t\t\t}\n\t\t}",f3,1e,fa,79);
            		}
HXLINE(  64)		this->shaderName = shaderName;
HXLINE(  65)		super::__construct(fragmentSource,vertexSource);
HXLINE(  58)		this->_hx___isGenerated = true;
HXDLIN(  58)		this->_hx___initGL();
            	}

Dynamic ErrorHandledRuntimeShader_obj::__CreateEmpty() { return new ErrorHandledRuntimeShader_obj; }

void *ErrorHandledRuntimeShader_obj::_hx_vtable = 0;

Dynamic ErrorHandledRuntimeShader_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ErrorHandledRuntimeShader_obj > _hx_result = new ErrorHandledRuntimeShader_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ErrorHandledRuntimeShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6752bd9b) {
		if (inClassId<=(int)0x1efca5b6) {
			if (inClassId<=(int)0x04f93fcd) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x04f93fcd;
			} else {
				return inClassId==(int)0x1efca5b6;
			}
		} else {
			return inClassId==(int)0x6752bd9b;
		}
	} else {
		return inClassId==(int)0x7517ccbe || inClassId==(int)0x78d8d737;
	}
}

static ::shaders::IErrorHandler_obj _hx_shaders_ErrorHandledRuntimeShader__hx_shaders_IErrorHandler= {
};

void *ErrorHandledRuntimeShader_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x2df1521d: return &_hx_shaders_ErrorHandledRuntimeShader__hx_shaders_IErrorHandler;
	}
	return super::_hx_getInterface(inHash);
}

HX_BEGIN_DEFAULT_FUNC(__default_onError,ErrorHandledRuntimeShader_obj)
void _hx_run( ::Dynamic error){
            	HX_STACKFRAME(&_hx_pos_ca31f77da8108ab6_61___default_onError)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

 ::lime::graphics::opengl::GLObject ErrorHandledRuntimeShader_obj::_hx___createGLProgram(::String vertexSource,::String fragmentSource){
            	HX_STACKFRAME(&_hx_pos_ca31f77da8108ab6_70___createGLProgram)
HXDLIN(  70)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  72)			 ::lime::graphics::opengl::GLObject res = this->super::_hx___createGLProgram(vertexSource,fragmentSource);
HXLINE(  73)			return res;
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(  75)				 ::haxe::Exception error = ::haxe::Exception_obj::caught(_g);
HXLINE(  77)				::shaders::ErrorHandledShader_obj::crashSave(this->shaderName,error,this->onError);
HXLINE(  78)				return null();
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  70)		return null();
            	}



void ErrorHandledRuntimeShader_obj::__alloc_dynamic_functions(::hx::Ctx *_hx_ctx,ErrorHandledRuntimeShader_obj *_hx_obj) {
	if (!_hx_obj->onError.mPtr) _hx_obj->onError = new __default_onError(_hx_obj);
}
::hx::ObjectPtr< ErrorHandledRuntimeShader_obj > ErrorHandledRuntimeShader_obj::__new(::String shaderName,::String fragmentSource,::String vertexSource) {
	::hx::ObjectPtr< ErrorHandledRuntimeShader_obj > __this = new ErrorHandledRuntimeShader_obj();
	__this->__construct(shaderName,fragmentSource,vertexSource);
	return __this;
}

::hx::ObjectPtr< ErrorHandledRuntimeShader_obj > ErrorHandledRuntimeShader_obj::__alloc(::hx::Ctx *_hx_ctx,::String shaderName,::String fragmentSource,::String vertexSource) {
	ErrorHandledRuntimeShader_obj *__this = (ErrorHandledRuntimeShader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ErrorHandledRuntimeShader_obj), true, "shaders.ErrorHandledRuntimeShader"));
	*(void **)__this = ErrorHandledRuntimeShader_obj::_hx_vtable;
	shaders::ErrorHandledRuntimeShader_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(shaderName,fragmentSource,vertexSource);
	return __this;
}

ErrorHandledRuntimeShader_obj::ErrorHandledRuntimeShader_obj()
{
	onError = new __default_onError(this);
}

void ErrorHandledRuntimeShader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ErrorHandledRuntimeShader);
	HX_MARK_MEMBER_NAME(shaderName,"shaderName");
	HX_MARK_MEMBER_NAME(onError,"onError");
	 ::flixel::graphics::tile::FlxGraphicsShader_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ErrorHandledRuntimeShader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(shaderName,"shaderName");
	HX_VISIT_MEMBER_NAME(onError,"onError");
	 ::flixel::graphics::tile::FlxGraphicsShader_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ErrorHandledRuntimeShader_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"onError") ) { return ::hx::Val( onError ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"shaderName") ) { return ::hx::Val( shaderName ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__createGLProgram") ) { return ::hx::Val( _hx___createGLProgram_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ErrorHandledRuntimeShader_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"onError") ) { onError=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"shaderName") ) { shaderName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ErrorHandledRuntimeShader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("shaderName",10,54,98,37));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ErrorHandledRuntimeShader_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(ErrorHandledRuntimeShader_obj,shaderName),HX_("shaderName",10,54,98,37)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ErrorHandledRuntimeShader_obj,onError),HX_("onError",29,6a,67,09)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ErrorHandledRuntimeShader_obj_sStaticStorageInfo = 0;
#endif

static ::String ErrorHandledRuntimeShader_obj_sMemberFields[] = {
	HX_("shaderName",10,54,98,37),
	HX_("onError",29,6a,67,09),
	HX_("__createGLProgram",43,7d,b4,bf),
	::String(null()) };

::hx::Class ErrorHandledRuntimeShader_obj::__mClass;

void ErrorHandledRuntimeShader_obj::__register()
{
	ErrorHandledRuntimeShader_obj _hx_dummy;
	ErrorHandledRuntimeShader_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("shaders.ErrorHandledRuntimeShader",c9,b1,17,37);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ErrorHandledRuntimeShader_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ErrorHandledRuntimeShader_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ErrorHandledRuntimeShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ErrorHandledRuntimeShader_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace shaders
