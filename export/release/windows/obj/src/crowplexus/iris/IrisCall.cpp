// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_crowplexus_iris_IrisCall
#include <crowplexus/iris/IrisCall.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a12cec1f7f1a6feb_14_new,"crowplexus.iris.IrisCall","new",0xfe81a494,"crowplexus.iris.IrisCall.new","crowplexus/iris/Iris.hx",14,0x27ccb4fa)
namespace crowplexus{
namespace iris{

void IrisCall_obj::__construct(::String funName, ::Dynamic signature, ::Dynamic returnValue){
            	HX_STACKFRAME(&_hx_pos_a12cec1f7f1a6feb_14_new)
HXDLIN(  14)		this->funName = funName;
HXDLIN(  14)		this->signature = signature;
HXDLIN(  14)		this->returnValue = returnValue;
            	}

Dynamic IrisCall_obj::__CreateEmpty() { return new IrisCall_obj; }

void *IrisCall_obj::_hx_vtable = 0;

Dynamic IrisCall_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< IrisCall_obj > _hx_result = new IrisCall_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool IrisCall_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2f649fb0;
}


IrisCall_obj::IrisCall_obj()
{
}

void IrisCall_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IrisCall);
	HX_MARK_MEMBER_NAME(funName,"funName");
	HX_MARK_MEMBER_NAME(signature,"signature");
	HX_MARK_MEMBER_NAME(returnValue,"returnValue");
	HX_MARK_END_CLASS();
}

void IrisCall_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(funName,"funName");
	HX_VISIT_MEMBER_NAME(signature,"signature");
	HX_VISIT_MEMBER_NAME(returnValue,"returnValue");
}

::hx::Val IrisCall_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"funName") ) { return ::hx::Val( funName ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"signature") ) { return ::hx::Val( signature ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"returnValue") ) { return ::hx::Val( returnValue ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val IrisCall_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"funName") ) { funName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"signature") ) { signature=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"returnValue") ) { returnValue=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IrisCall_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("funName",2a,f6,3a,e3));
	outFields->push(HX_("signature",f8,a2,6b,15));
	outFields->push(HX_("returnValue",a1,4c,95,3e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo IrisCall_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(IrisCall_obj,funName),HX_("funName",2a,f6,3a,e3)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(IrisCall_obj,signature),HX_("signature",f8,a2,6b,15)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(IrisCall_obj,returnValue),HX_("returnValue",a1,4c,95,3e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *IrisCall_obj_sStaticStorageInfo = 0;
#endif

static ::String IrisCall_obj_sMemberFields[] = {
	HX_("funName",2a,f6,3a,e3),
	HX_("signature",f8,a2,6b,15),
	HX_("returnValue",a1,4c,95,3e),
	::String(null()) };

::hx::Class IrisCall_obj::__mClass;

void IrisCall_obj::__register()
{
	IrisCall_obj _hx_dummy;
	IrisCall_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("crowplexus.iris.IrisCall",a2,0a,8f,23);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(IrisCall_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< IrisCall_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IrisCall_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IrisCall_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace crowplexus
} // end namespace iris
