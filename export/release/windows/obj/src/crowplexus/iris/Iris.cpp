// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_Error
#include <crowplexus/hscript/Error.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_Expr
#include <crowplexus/hscript/Expr.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_Interp
#include <crowplexus/hscript/Interp.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_Parser
#include <crowplexus/hscript/Parser.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_Printer
#include <crowplexus/hscript/Printer.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_Tools
#include <crowplexus/hscript/Tools.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_proxy_ProxyType
#include <crowplexus/hscript/proxy/ProxyType.h>
#endif
#ifndef INCLUDED_crowplexus_iris_ErrorSeverity
#include <crowplexus/iris/ErrorSeverity.h>
#endif
#ifndef INCLUDED_crowplexus_iris_ErrorSeverityTools
#include <crowplexus/iris/ErrorSeverityTools.h>
#endif
#ifndef INCLUDED_crowplexus_iris_Iris
#include <crowplexus/iris/Iris.h>
#endif
#ifndef INCLUDED_crowplexus_iris_IrisCall
#include <crowplexus/iris/IrisCall.h>
#endif
#ifndef INCLUDED_crowplexus_iris_IrisConfig
#include <crowplexus/iris/IrisConfig.h>
#endif
#ifndef INCLUDED_crowplexus_iris_IrisUsingClass
#include <crowplexus/iris/IrisUsingClass.h>
#endif
#ifndef INCLUDED_crowplexus_iris_utils_Ansi
#include <crowplexus/iris/utils/Ansi.h>
#endif
#ifndef INCLUDED_crowplexus_iris_utils_UsingEntry
#include <crowplexus/iris/utils/UsingEntry.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_362e1cea85625f87_37_new,"crowplexus.iris.Iris","new",0x15b766d6,"crowplexus.iris.Iris.new","crowplexus/iris/Iris.hx",37,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_187_get_name,"crowplexus.iris.Iris","get_name",0x02b36b9e,"crowplexus.iris.Iris.get_name","crowplexus/iris/Iris.hx",187,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_263_execute,"crowplexus.iris.Iris","execute",0xdb3c13ab,"crowplexus.iris.Iris.execute","crowplexus/iris/Iris.hx",263,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_281_parse,"crowplexus.iris.Iris","parse",0xa3a43029,"crowplexus.iris.Iris.parse","crowplexus/iris/Iris.hx",281,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_299_preset,"crowplexus.iris.Iris","preset",0x4d3e0aa9,"crowplexus.iris.Iris.preset","crowplexus/iris/Iris.hx",299,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_291_preset,"crowplexus.iris.Iris","preset",0x4d3e0aa9,"crowplexus.iris.Iris.preset","crowplexus/iris/Iris.hx",291,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_313_get,"crowplexus.iris.Iris","get",0x15b2170c,"crowplexus.iris.Iris.get","crowplexus/iris/Iris.hx",313,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_327_set,"crowplexus.iris.Iris","set",0x15bb3218,"crowplexus.iris.Iris.set","crowplexus/iris/Iris.hx",327,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_344_call,"crowplexus.iris.Iris","call",0xe37a2968,"crowplexus.iris.Iris.call","crowplexus/iris/Iris.hx",344,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_385_exists,"crowplexus.iris.Iris","exists",0x5e5d7526,"crowplexus.iris.Iris.exists","crowplexus/iris/Iris.hx",385,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_399_destroy,"crowplexus.iris.Iris","destroy",0x33b53670,"crowplexus.iris.Iris.destroy","crowplexus/iris/Iris.hx",399,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_88_addBlocklistImport,"crowplexus.iris.Iris","addBlocklistImport",0xe58f8519,"crowplexus.iris.Iris.addBlocklistImport","crowplexus/iris/Iris.hx",88,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_92_addProxyImport,"crowplexus.iris.Iris","addProxyImport",0xab52431c,"crowplexus.iris.Iris.addProxyImport","crowplexus/iris/Iris.hx",92,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_96_getProxiedImport,"crowplexus.iris.Iris","getProxiedImport",0x1dcebcd6,"crowplexus.iris.Iris.getProxiedImport","crowplexus/iris/Iris.hx",96,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_100_getDefaultPos,"crowplexus.iris.Iris","getDefaultPos",0x0af54d7f,"crowplexus.iris.Iris.getDefaultPos","crowplexus/iris/Iris.hx",100,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_114___default_logLevel,"crowplexus.iris.Iris","__default_logLevel",0xabfd8248,"crowplexus.iris.Iris.__default_logLevel","crowplexus/iris/Iris.hx",114,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_150___default_print,"crowplexus.iris.Iris","__default_print",0x202fa745,"crowplexus.iris.Iris.__default_print","crowplexus/iris/Iris.hx",150,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_157___default_error,"crowplexus.iris.Iris","__default_error",0xcace1ae0,"crowplexus.iris.Iris.__default_error","crowplexus/iris/Iris.hx",157,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_166___default_warn,"crowplexus.iris.Iris","__default_warn",0x2ce67e2e,"crowplexus.iris.Iris.__default_warn","crowplexus/iris/Iris.hx",166,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_173___default_fatal,"crowplexus.iris.Iris","__default_fatal",0x52f9871c,"crowplexus.iris.Iris.__default_fatal","crowplexus/iris/Iris.hx",173,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_249_fixScriptName,"crowplexus.iris.Iris","fixScriptName",0xeb8a1621,"crowplexus.iris.Iris.fixScriptName","crowplexus/iris/Iris.hx",249,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_411_destroyAll,"crowplexus.iris.Iris","destroyAll",0x472a2091,"crowplexus.iris.Iris.destroyAll","crowplexus/iris/Iris.hx",411,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_423_registerUsingGlobal,"crowplexus.iris.Iris","registerUsingGlobal",0x3417de9a,"crowplexus.iris.Iris.registerUsingGlobal","crowplexus/iris/Iris.hx",423,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_41_boot,"crowplexus.iris.Iris","boot",0xe2db94fc,"crowplexus.iris.Iris.boot","crowplexus/iris/Iris.hx",41,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_44_boot,"crowplexus.iris.Iris","boot",0xe2db94fc,"crowplexus.iris.Iris.boot","crowplexus/iris/Iris.hx",44,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_61_boot,"crowplexus.iris.Iris","boot",0xe2db94fc,"crowplexus.iris.Iris.boot","crowplexus/iris/Iris.hx",61,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_43_boot,"crowplexus.iris.Iris","boot",0xe2db94fc,"crowplexus.iris.Iris.boot","crowplexus/iris/Iris.hx",43,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_80_boot,"crowplexus.iris.Iris","boot",0xe2db94fc,"crowplexus.iris.Iris.boot","crowplexus/iris/Iris.hx",80,0x27ccb4fa)
HX_LOCAL_STACK_FRAME(_hx_pos_362e1cea85625f87_85_boot,"crowplexus.iris.Iris","boot",0xe2db94fc,"crowplexus.iris.Iris.boot","crowplexus/iris/Iris.hx",85,0x27ccb4fa)
namespace crowplexus{
namespace iris{

void Iris_obj::__construct(::String scriptCode, ::Dynamic config){
            	HX_GC_STACKFRAME(&_hx_pos_362e1cea85625f87_37_new)
HXLINE( 214)		this->interpErrStr = HX_("Careful, the interpreter hasn't been initialized",aa,53,52,05);
HXLINE( 194)		this->scriptCode = HX_("",00,00,00,00);
HXLINE( 179)		this->config = null();
HXLINE( 227)		if (::hx::IsNull( config )) {
HXLINE( 228)			config =  ::crowplexus::iris::IrisConfig_obj::__alloc( HX_CTX ,HX_("Iris",33,70,97,30),true,true,::Array_obj< ::String >::__new(0));
            		}
HXLINE( 229)		this->scriptCode = scriptCode;
HXLINE( 230)		this->config = ::crowplexus::iris::IrisConfig_obj::from(config);
HXLINE( 231)		this->config->name = ::crowplexus::iris::Iris_obj::fixScriptName(this->config->name);
HXLINE( 233)		this->parser =  ::crowplexus::hscript::Parser_obj::__alloc( HX_CTX );
HXLINE( 234)		this->interp =  ::crowplexus::hscript::Interp_obj::__alloc( HX_CTX );
HXLINE( 235)		this->interp->showPosOnLog = false;
HXLINE( 237)		this->parser->allowTypes = true;
HXLINE( 238)		this->parser->allowMetadata = true;
HXLINE( 239)		this->parser->allowJSON = true;
HXLINE( 242)		if (this->config->autoPreset) {
HXLINE( 243)			this->preset();
            		}
HXLINE( 245)		if (this->config->autoRun) {
HXLINE( 246)			this->execute();
            		}
            	}

Dynamic Iris_obj::__CreateEmpty() { return new Iris_obj; }

void *Iris_obj::_hx_vtable = 0;

Dynamic Iris_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Iris_obj > _hx_result = new Iris_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Iris_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2e02612a;
}

::String Iris_obj::get_name(){
            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_187_get_name)
HXDLIN( 187)		return this->config->name;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Iris_obj,get_name,return )

 ::Dynamic Iris_obj::execute(){
            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_263_execute)
HXLINE( 265)		if (::hx::IsNull( this->interp )) {
HXLINE( 266)			HX_STACK_DO_THROW(HX_("Attempt to run script failed, script is probably destroyed.",52,79,8e,5d));
            		}
HXLINE( 268)		if (::hx::IsNull( this->expr )) {
HXLINE( 269)			this->expr = this->parse(null());
            		}
HXLINE( 271)		::crowplexus::iris::Iris_obj::instances->set(this->config->name,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 272)		this->config->packageName = this->parser->packageName;
HXLINE( 273)		return this->interp->execute(this->expr);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Iris_obj,execute,return )

 ::crowplexus::hscript::Expr Iris_obj::parse(::hx::Null< bool >  __o_force){
            		bool force = __o_force.Default(false);
            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_281_parse)
HXLINE( 282)		bool _hx_tmp;
HXDLIN( 282)		if (!(force)) {
HXLINE( 282)			_hx_tmp = ::hx::IsNull( this->expr );
            		}
            		else {
HXLINE( 282)			_hx_tmp = true;
            		}
HXDLIN( 282)		if (_hx_tmp) {
HXLINE( 283)			this->expr = this->parser->parseString(this->scriptCode,this->config->name);
            		}
HXLINE( 285)		return this->expr;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Iris_obj,parse,return )

void Iris_obj::preset(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::crowplexus::iris::Iris,_gthis) HXARGC(1)
            		void _hx_run(::cpp::VirtualArray x){
            			HX_STACKFRAME(&_hx_pos_362e1cea85625f87_299_preset)
HXLINE( 300)			 ::Dynamic pos;
HXDLIN( 300)			if (::hx::IsNotNull( _gthis->interp )) {
HXLINE( 300)				pos = _gthis->interp->posInfos();
            			}
            			else {
HXLINE( 300)				pos = ::crowplexus::iris::Iris_obj::getDefaultPos(_gthis->config->name);
            			}
HXLINE( 301)			 ::Dynamic v = x->shift();
HXLINE( 302)			if ((x->get_length() > 0)) {
HXLINE( 303)				pos->__SetField(HX_("customParams",d7,51,18,ed),x,::hx::paccDynamic);
            			}
HXLINE( 304)			::crowplexus::iris::Iris_obj::print(v,pos);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_291_preset)
HXDLIN( 291)		 ::crowplexus::iris::Iris _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 292)		this->set(HX_("Std",83,60,3f,00),::hx::ClassOf< ::Std >(),null());
HXLINE( 293)		this->set(HX_("StringTools",6a,db,63,03),::hx::ClassOf< ::StringTools >(),null());
HXLINE( 294)		this->set(HX_("Math",e8,6d,2f,33),::hx::ClassOf< ::Math >(),null());
HXLINE( 299)		this->set(HX_("trace",85,8e,1f,16),::Reflect_obj::makeVarArgs( ::Dynamic(new _hx_Closure_0(_gthis))),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Iris_obj,preset,(void))

 ::Dynamic Iris_obj::get(::String field){
            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_313_get)
HXLINE( 315)		if (::hx::IsNull( this->interp )) {
HXLINE( 316)			::crowplexus::iris::Iris_obj::fatal(((((HX_("[Iris:get()]: ",f8,35,30,56) + this->interpErrStr) + HX_(", when trying to get variable \"",e6,e8,38,f8)) + field) + HX_("\", returning false...",6f,86,96,f8)),::hx::SourceInfo(HX_("crowplexus/iris/Iris.hx",fa,b4,cc,27),316,HX_("crowplexus.iris.Iris",e4,03,e2,62),HX_("get",96,80,4e,00)));
            		}
HXLINE( 318)		if (::hx::IsNotNull( this->interp )) {
HXLINE( 318)			return this->interp->variables->get(field);
            		}
            		else {
HXLINE( 318)			return false;
            		}
HXDLIN( 318)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Iris_obj,get,return )

void Iris_obj::set(::String name, ::Dynamic value,::hx::Null< bool >  __o_allowOverride){
            		bool allowOverride = __o_allowOverride.Default(true);
            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_327_set)
HXLINE( 328)		bool _hx_tmp;
HXDLIN( 328)		if (::hx::IsNotNull( this->interp )) {
HXLINE( 328)			_hx_tmp = ::hx::IsNull( this->interp->variables );
            		}
            		else {
HXLINE( 328)			_hx_tmp = true;
            		}
HXDLIN( 328)		if (_hx_tmp) {
HXLINE( 330)			::crowplexus::iris::Iris_obj::fatal(((((HX_("[Iris:set()]: ",6c,8f,8d,04) + this->interpErrStr) + HX_(", when trying to set variable \"",5a,d1,58,18)) + name) + HX_("\" so variables cannot be set.",fb,25,cd,a7)),::hx::SourceInfo(HX_("crowplexus/iris/Iris.hx",fa,b4,cc,27),330,HX_("crowplexus.iris.Iris",e4,03,e2,62),HX_("set",a2,9b,57,00)));
HXLINE( 332)			return;
            		}
HXLINE( 335)		bool _hx_tmp1;
HXDLIN( 335)		if (!(allowOverride)) {
HXLINE( 335)			_hx_tmp1 = !(this->interp->variables->exists(name));
            		}
            		else {
HXLINE( 335)			_hx_tmp1 = true;
            		}
HXDLIN( 335)		if (_hx_tmp1) {
HXLINE( 336)			this->interp->variables->set(name,value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Iris_obj,set,(void))

 ::crowplexus::iris::IrisCall Iris_obj::call(::String fun,::cpp::VirtualArray args){
            	HX_GC_STACKFRAME(&_hx_pos_362e1cea85625f87_344_call)
HXLINE( 345)		if (::hx::IsNull( this->interp )) {
HXLINE( 347)			::haxe::Log_obj::trace(((HX_("[Iris:call()]: ",98,62,5d,11) + this->interpErrStr) + HX_(", so functions cannot be called.",9c,04,fc,d9)),::hx::SourceInfo(HX_("crowplexus/iris/Iris.hx",fa,b4,cc,27),347,HX_("crowplexus.iris.Iris",e4,03,e2,62),HX_("call",9e,18,ba,41)));
HXLINE( 349)			return null();
            		}
HXLINE( 352)		if (::hx::IsNull( args )) {
HXLINE( 353)			args = ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE( 356)		 ::Dynamic ny = this->interp->variables->get(fun);
HXLINE( 357)		bool isFunction = false;
HXLINE( 358)		try {
            			HX_STACK_CATCHABLE( ::crowplexus::hscript::Error, 0);
            			HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
            			HX_STACK_CATCHABLE( ::Dynamic, 2);
HXLINE( 359)			if (::hx::IsNotNull( ny )) {
HXLINE( 359)				isFunction = ::Reflect_obj::isFunction(ny);
            			}
            			else {
HXLINE( 359)				isFunction = false;
            			}
HXLINE( 360)			if (!(isFunction)) {
HXLINE( 361)				HX_STACK_DO_THROW(((HX_("Tried to call a non-function, for \"",8d,97,2b,dd) + fun) + HX_("\"",22,00,00,00)));
            			}
HXLINE( 364)			 ::Dynamic ret = ::Reflect_obj::callMethod(null(),ny,args);
HXLINE( 365)			return  ::crowplexus::iris::IrisCall_obj::__alloc( HX_CTX ,fun,ny,ret);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::crowplexus::hscript::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::crowplexus::hscript::Error e1 = _hx_e;
HXLINE( 370)				 ::Dynamic _hx_tmp = ::crowplexus::iris::Iris_obj::error;
HXDLIN( 370)				::String _hx_tmp1 = ::crowplexus::hscript::Printer_obj::errorToString(e1,false);
HXDLIN( 370)				_hx_tmp(_hx_tmp1,this->interp->posInfos());
            			}
            			else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::haxe::ValueException _g = _hx_e;
HXLINE( 369)				{
HXLINE( 369)					null();
            				}
HXLINE( 358)				if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::crowplexus::hscript::Error >())) {
HXLINE( 369)					 ::crowplexus::hscript::Error e1 = ( ( ::crowplexus::hscript::Error)(_g->value) );
HXLINE( 370)					{
HXLINE( 370)						 ::Dynamic _hx_tmp2 = ::crowplexus::iris::Iris_obj::error;
HXDLIN( 370)						::String _hx_tmp3 = ::crowplexus::hscript::Printer_obj::errorToString(e1,false);
HXDLIN( 370)						_hx_tmp2(_hx_tmp3,this->interp->posInfos());
            					}
            				}
            				else {
HXLINE( 358)					HX_STACK_DO_THROW(_g);
            				}
            			}
            			else if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g1 = _hx_e;
HXLINE( 373)				 ::haxe::Exception e2 = ::haxe::Exception_obj::caught(_g1);
HXDLIN( 373)				{
HXLINE( 374)					 ::Dynamic pos;
HXDLIN( 374)					if (isFunction) {
HXLINE( 374)						pos = this->interp->posInfos();
            					}
            					else {
HXLINE( 374)						pos = ::crowplexus::iris::Iris_obj::getDefaultPos(this->config->name);
            					}
HXLINE( 375)					 ::Dynamic _hx_tmp4 = ::crowplexus::iris::Iris_obj::error;
HXDLIN( 375)					_hx_tmp4(::Std_obj::string(e2),pos);
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 378)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Iris_obj,call,return )

bool Iris_obj::exists(::String field){
            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_385_exists)
HXLINE( 387)		if (::hx::IsNull( this->interp )) {
HXLINE( 388)			::haxe::Log_obj::trace(((HX_("[Iris:exists()]: ",9a,c9,e4,ec) + this->interpErrStr) + HX_(", returning false...",4d,e9,d2,5f)),::hx::SourceInfo(HX_("crowplexus/iris/Iris.hx",fa,b4,cc,27),388,HX_("crowplexus.iris.Iris",e4,03,e2,62),HX_("exists",dc,1d,e0,bf)));
            		}
HXLINE( 390)		if (::hx::IsNotNull( this->interp )) {
HXLINE( 390)			return this->interp->variables->exists(field);
            		}
            		else {
HXLINE( 390)			return false;
            		}
HXDLIN( 390)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Iris_obj,exists,return )

void Iris_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_399_destroy)
HXLINE( 400)		if (::crowplexus::iris::Iris_obj::instances->exists(this->config->name)) {
HXLINE( 401)			::crowplexus::iris::Iris_obj::instances->remove(this->config->name);
            		}
HXLINE( 402)		this->interp = null();
HXLINE( 403)		this->parser = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Iris_obj,destroy,(void))

 ::haxe::ds::StringMap Iris_obj::instances;

::Array< ::Dynamic> Iris_obj::registeredUsingEntries;

::Array< ::String > Iris_obj::blocklistImports;

 ::haxe::ds::StringMap Iris_obj::proxyImports;

void Iris_obj::addBlocklistImport(::String name){
            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_88_addBlocklistImport)
HXDLIN(  88)		::crowplexus::iris::Iris_obj::blocklistImports->push(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Iris_obj,addBlocklistImport,(void))

void Iris_obj::addProxyImport(::String name, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_92_addProxyImport)
HXDLIN(  92)		::crowplexus::iris::Iris_obj::proxyImports->set(name,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Iris_obj,addProxyImport,(void))

 ::Dynamic Iris_obj::getProxiedImport(::String name){
            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_96_getProxiedImport)
HXDLIN(  96)		return ::crowplexus::iris::Iris_obj::proxyImports->get(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Iris_obj,getProxiedImport,return )

 ::Dynamic Iris_obj::getDefaultPos(::String __o_name){
            		::String name = __o_name;
            		if (::hx::IsNull(__o_name)) name = HX_("Iris",33,70,97,30);
            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_100_getDefaultPos)
HXDLIN( 100)		return  ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("className",a3,92,3d,dc),HX_("UnknownClass",6e,fc,1d,2f))
            			->setFixed(1,HX_("customParams",d7,51,18,ed),null())
            			->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("unknownFunction",c2,24,fd,f9))
            			->setFixed(3,HX_("fileName",e7,5a,43,62),name)
            			->setFixed(4,HX_("lineNumber",dd,81,22,76),-1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Iris_obj,getDefaultPos,return )

HX_BEGIN_DEFAULT_FUNC(__default_logLevel,Iris_obj)
void _hx_run( ::crowplexus::iris::ErrorSeverity level,::String x, ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_114___default_logLevel)
HXLINE( 115)		if (::hx::IsNull( pos )) {
HXLINE( 116)			pos = ::crowplexus::iris::Iris_obj::getDefaultPos(null());
            		}
HXLINE( 119)		::String out = ::Std_obj::string(x);
HXLINE( 120)		bool _hx_tmp;
HXDLIN( 120)		if (::hx::IsNotNull( pos )) {
HXLINE( 120)			_hx_tmp = ::hx::IsNotNull( pos->__Field(HX_("customParams",d7,51,18,ed),::hx::paccDynamic) );
            		}
            		else {
HXLINE( 120)			_hx_tmp = false;
            		}
HXDLIN( 120)		if (_hx_tmp) {
HXLINE( 121)			int _g = 0;
HXDLIN( 121)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)(pos->__Field(HX_("customParams",d7,51,18,ed),::hx::paccDynamic)) );
HXDLIN( 121)			while((_g < _g1->get_length())){
HXLINE( 121)				 ::Dynamic i = _g1->__get(_g);
HXDLIN( 121)				_g = (_g + 1);
HXLINE( 122)				out = (out + (HX_(",",2c,00,00,00) + ::Std_obj::string(i)));
            			}
            		}
HXLINE( 124)		::String prefix = ::crowplexus::iris::ErrorSeverityTools_obj::getPrefix(level);
HXLINE( 125)		bool _hx_tmp1;
HXDLIN( 125)		if ((prefix != HX_("",00,00,00,00))) {
HXLINE( 125)			_hx_tmp1 = ::hx::IsNotNull( prefix );
            		}
            		else {
HXLINE( 125)			_hx_tmp1 = false;
            		}
HXDLIN( 125)		if (_hx_tmp1) {
HXLINE( 126)			prefix = ((HX_("",00,00,00,00) + prefix) + HX_(":",3a,00,00,00));
            		}
HXLINE( 128)		::String posPrefix = ( (::String)((((HX_("[",5b,00,00,00) + prefix) + pos->__Field(HX_("fileName",e7,5a,43,62),::hx::paccDynamic)) + HX_("]",5d,00,00,00))) );
HXLINE( 129)		if (::hx::IsNotEq( pos->__Field(HX_("lineNumber",dd,81,22,76),::hx::paccDynamic),-1 )) {
HXLINE( 130)			posPrefix = ( (::String)((((((HX_("[",5b,00,00,00) + prefix) + pos->__Field(HX_("fileName",e7,5a,43,62),::hx::paccDynamic)) + HX_(":",3a,00,00,00)) + pos->__Field(HX_("lineNumber",dd,81,22,76),::hx::paccDynamic)) + HX_("]",5d,00,00,00))) );
            		}
HXLINE( 132)		bool _hx_tmp2;
HXDLIN( 132)		if ((prefix != HX_("",00,00,00,00))) {
HXLINE( 132)			_hx_tmp2 = ::hx::IsNotNull( prefix );
            		}
            		else {
HXLINE( 132)			_hx_tmp2 = false;
            		}
HXDLIN( 132)		if (_hx_tmp2) {
HXLINE( 133)			posPrefix = ((((((HX_("\x1b""[",e0,17,00,00) + HX_("38;5;",dc,7b,a0,82)) + ::crowplexus::iris::ErrorSeverityTools_obj::getColor(level)) + HX_("m",6d,00,00,00)) + posPrefix) + HX_("\x1b""[",e0,17,00,00)) + HX_("0m",3d,2a,00,00));
HXLINE( 134)			if (::hx::IsPointerEq( level,::crowplexus::iris::ErrorSeverity_obj::FATAL_dyn() )) {
HXLINE( 135)				posPrefix = (((HX_("\x1b""[",e0,17,00,00) + 1) + HX_("m",6d,00,00,00)) + posPrefix);
            			}
            		}
HXLINE( 139)		::Sys_obj::println(::crowplexus::iris::utils::Ansi_obj::stripColor(((posPrefix + HX_(": ",a6,32,00,00)) + out)));
            	}
HX_END_LOCAL_FUNC3((void))
HX_END_DEFAULT_FUNC

::Dynamic Iris_obj::logLevel;

HX_BEGIN_DEFAULT_FUNC(__default_print,Iris_obj)
void _hx_run(::String x, ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_150___default_print)
HXDLIN( 150)		::crowplexus::iris::Iris_obj::logLevel(::crowplexus::iris::ErrorSeverity_obj::NONE_dyn(),x,pos);
            	}
HX_END_LOCAL_FUNC2((void))
HX_END_DEFAULT_FUNC

::Dynamic Iris_obj::print;

HX_BEGIN_DEFAULT_FUNC(__default_error,Iris_obj)
void _hx_run(::String x, ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_157___default_error)
HXDLIN( 157)		::crowplexus::iris::Iris_obj::logLevel(::crowplexus::iris::ErrorSeverity_obj::ERROR_dyn(),x,pos);
            	}
HX_END_LOCAL_FUNC2((void))
HX_END_DEFAULT_FUNC

::Dynamic Iris_obj::error;

HX_BEGIN_DEFAULT_FUNC(__default_warn,Iris_obj)
void _hx_run(::String x, ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_166___default_warn)
HXDLIN( 166)		::crowplexus::iris::Iris_obj::logLevel(::crowplexus::iris::ErrorSeverity_obj::WARN_dyn(),x,pos);
            	}
HX_END_LOCAL_FUNC2((void))
HX_END_DEFAULT_FUNC

::Dynamic Iris_obj::warn;

HX_BEGIN_DEFAULT_FUNC(__default_fatal,Iris_obj)
void _hx_run(::String x, ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_173___default_fatal)
HXDLIN( 173)		::crowplexus::iris::Iris_obj::logLevel(::crowplexus::iris::ErrorSeverity_obj::FATAL_dyn(),x,pos);
            	}
HX_END_LOCAL_FUNC2((void))
HX_END_DEFAULT_FUNC

::Dynamic Iris_obj::fatal;

::String Iris_obj::fixScriptName(::String toFix){
            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_249_fixScriptName)
HXLINE( 251)		::String _name = toFix;
HXLINE( 252)		int copyID = 1;
HXLINE( 253)		while(::crowplexus::iris::Iris_obj::instances->exists(_name)){
HXLINE( 254)			_name = ((toFix + HX_("_",5f,00,00,00)) + copyID);
HXLINE( 255)			copyID = (copyID + 1);
            		}
HXLINE( 257)		return _name;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Iris_obj,fixScriptName,return )

void Iris_obj::destroyAll(){
            	HX_GC_STACKFRAME(&_hx_pos_362e1cea85625f87_411_destroyAll)
HXLINE( 412)		{
HXLINE( 412)			 ::Dynamic key = ::crowplexus::iris::Iris_obj::instances->keys();
HXDLIN( 412)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 412)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 413)				 ::crowplexus::iris::Iris iris = ( ( ::crowplexus::iris::Iris)(::crowplexus::iris::Iris_obj::instances->get(key1)) );
HXLINE( 414)				if (::hx::IsNull( iris->interp )) {
HXLINE( 415)					continue;
            				}
HXLINE( 416)				iris->destroy();
            			}
            		}
HXLINE( 419)		::crowplexus::iris::Iris_obj::instances->clear();
HXLINE( 420)		::crowplexus::iris::Iris_obj::instances =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Iris_obj,destroyAll,(void))

 ::crowplexus::iris::utils::UsingEntry Iris_obj::registerUsingGlobal(::String name, ::Dynamic call){
            	HX_GC_STACKFRAME(&_hx_pos_362e1cea85625f87_423_registerUsingGlobal)
HXLINE( 424)		 ::crowplexus::iris::utils::UsingEntry entry =  ::crowplexus::iris::utils::UsingEntry_obj::__alloc( HX_CTX ,name,call);
HXLINE( 425)		::crowplexus::iris::Iris_obj::registeredUsingEntries->push(entry);
HXLINE( 426)		return entry;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Iris_obj,registerUsingGlobal,return )


::hx::ObjectPtr< Iris_obj > Iris_obj::__new(::String scriptCode, ::Dynamic config) {
	::hx::ObjectPtr< Iris_obj > __this = new Iris_obj();
	__this->__construct(scriptCode,config);
	return __this;
}

::hx::ObjectPtr< Iris_obj > Iris_obj::__alloc(::hx::Ctx *_hx_ctx,::String scriptCode, ::Dynamic config) {
	Iris_obj *__this = (Iris_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Iris_obj), true, "crowplexus.iris.Iris"));
	*(void **)__this = Iris_obj::_hx_vtable;
	__this->__construct(scriptCode,config);
	return __this;
}

Iris_obj::Iris_obj()
{
}

void Iris_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Iris);
	HX_MARK_MEMBER_NAME(config,"config");
	HX_MARK_MEMBER_NAME(scriptCode,"scriptCode");
	HX_MARK_MEMBER_NAME(interp,"interp");
	HX_MARK_MEMBER_NAME(parser,"parser");
	HX_MARK_MEMBER_NAME(expr,"expr");
	HX_MARK_MEMBER_NAME(interpErrStr,"interpErrStr");
	HX_MARK_END_CLASS();
}

void Iris_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(config,"config");
	HX_VISIT_MEMBER_NAME(scriptCode,"scriptCode");
	HX_VISIT_MEMBER_NAME(interp,"interp");
	HX_VISIT_MEMBER_NAME(parser,"parser");
	HX_VISIT_MEMBER_NAME(expr,"expr");
	HX_VISIT_MEMBER_NAME(interpErrStr,"interpErrStr");
}

::hx::Val Iris_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_name() ); }
		if (HX_FIELD_EQ(inName,"expr") ) { return ::hx::Val( expr ); }
		if (HX_FIELD_EQ(inName,"call") ) { return ::hx::Val( call_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { return ::hx::Val( parse_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"config") ) { return ::hx::Val( config ); }
		if (HX_FIELD_EQ(inName,"interp") ) { return ::hx::Val( interp ); }
		if (HX_FIELD_EQ(inName,"parser") ) { return ::hx::Val( parser ); }
		if (HX_FIELD_EQ(inName,"preset") ) { return ::hx::Val( preset_dyn() ); }
		if (HX_FIELD_EQ(inName,"exists") ) { return ::hx::Val( exists_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"execute") ) { return ::hx::Val( execute_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_name") ) { return ::hx::Val( get_name_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scriptCode") ) { return ::hx::Val( scriptCode ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"interpErrStr") ) { return ::hx::Val( interpErrStr ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Iris_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"warn") ) { outValue = ( warn ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"print") ) { outValue = ( print ); return true; }
		if (HX_FIELD_EQ(inName,"error") ) { outValue = ( error ); return true; }
		if (HX_FIELD_EQ(inName,"fatal") ) { outValue = ( fatal ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"logLevel") ) { outValue = ( logLevel ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"instances") ) { outValue = ( instances ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"destroyAll") ) { outValue = destroyAll_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getDefaultPos") ) { outValue = getDefaultPos_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fixScriptName") ) { outValue = fixScriptName_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"addProxyImport") ) { outValue = addProxyImport_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getProxiedImport") ) { outValue = getProxiedImport_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"addBlocklistImport") ) { outValue = addBlocklistImport_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"registerUsingGlobal") ) { outValue = registerUsingGlobal_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"registeredUsingEntries") ) { outValue = ( registeredUsingEntries ); return true; }
	}
	return false;
}

::hx::Val Iris_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"expr") ) { expr=inValue.Cast<  ::crowplexus::hscript::Expr >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"config") ) { config=inValue.Cast<  ::crowplexus::iris::IrisConfig >(); return inValue; }
		if (HX_FIELD_EQ(inName,"interp") ) { interp=inValue.Cast<  ::crowplexus::hscript::Interp >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parser") ) { parser=inValue.Cast<  ::crowplexus::hscript::Parser >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scriptCode") ) { scriptCode=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"interpErrStr") ) { interpErrStr=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Iris_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"warn") ) { warn=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"print") ) { print=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"error") ) { error=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"fatal") ) { fatal=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"logLevel") ) { logLevel=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"instances") ) { instances=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"registeredUsingEntries") ) { registeredUsingEntries=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void Iris_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("config",c2,56,d2,c7));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("scriptCode",d8,8c,a5,3a));
	outFields->push(HX_("interp",d4,79,86,9e));
	outFields->push(HX_("parser",df,9c,88,ed));
	outFields->push(HX_("expr",35,fd,1d,43));
	outFields->push(HX_("interpErrStr",40,4b,d5,e1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Iris_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::crowplexus::iris::IrisConfig */ ,(int)offsetof(Iris_obj,config),HX_("config",c2,56,d2,c7)},
	{::hx::fsString,(int)offsetof(Iris_obj,scriptCode),HX_("scriptCode",d8,8c,a5,3a)},
	{::hx::fsObject /*  ::crowplexus::hscript::Interp */ ,(int)offsetof(Iris_obj,interp),HX_("interp",d4,79,86,9e)},
	{::hx::fsObject /*  ::crowplexus::hscript::Parser */ ,(int)offsetof(Iris_obj,parser),HX_("parser",df,9c,88,ed)},
	{::hx::fsObject /*  ::crowplexus::hscript::Expr */ ,(int)offsetof(Iris_obj,expr),HX_("expr",35,fd,1d,43)},
	{::hx::fsString,(int)offsetof(Iris_obj,interpErrStr),HX_("interpErrStr",40,4b,d5,e1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Iris_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Iris_obj::instances,HX_("instances",3e,83,1a,4b)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Iris_obj::registeredUsingEntries,HX_("registeredUsingEntries",0e,f5,13,62)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &Iris_obj::blocklistImports,HX_("blocklistImports",83,ae,fb,18)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Iris_obj::proxyImports,HX_("proxyImports",a0,9a,32,a8)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Iris_obj::logLevel,HX_("logLevel",60,52,69,5d)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Iris_obj::print,HX_("print",2d,58,8b,c8)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Iris_obj::error,HX_("error",c8,cb,29,73)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Iris_obj::warn,HX_("warn",46,62,f2,4e)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Iris_obj::fatal,HX_("fatal",04,38,55,fb)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Iris_obj_sMemberFields[] = {
	HX_("config",c2,56,d2,c7),
	HX_("get_name",d4,2d,ba,c8),
	HX_("scriptCode",d8,8c,a5,3a),
	HX_("interp",d4,79,86,9e),
	HX_("parser",df,9c,88,ed),
	HX_("expr",35,fd,1d,43),
	HX_("interpErrStr",40,4b,d5,e1),
	HX_("execute",35,0a,0d,cc),
	HX_("parse",33,90,55,bd),
	HX_("preset",5f,b3,c0,ae),
	HX_("get",96,80,4e,00),
	HX_("set",a2,9b,57,00),
	HX_("call",9e,18,ba,41),
	HX_("exists",dc,1d,e0,bf),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

static void Iris_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Iris_obj::instances,"instances");
	HX_MARK_MEMBER_NAME(Iris_obj::registeredUsingEntries,"registeredUsingEntries");
	HX_MARK_MEMBER_NAME(Iris_obj::blocklistImports,"blocklistImports");
	HX_MARK_MEMBER_NAME(Iris_obj::proxyImports,"proxyImports");
	HX_MARK_MEMBER_NAME(Iris_obj::logLevel,"logLevel");
	HX_MARK_MEMBER_NAME(Iris_obj::print,"print");
	HX_MARK_MEMBER_NAME(Iris_obj::error,"error");
	HX_MARK_MEMBER_NAME(Iris_obj::warn,"warn");
	HX_MARK_MEMBER_NAME(Iris_obj::fatal,"fatal");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Iris_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Iris_obj::instances,"instances");
	HX_VISIT_MEMBER_NAME(Iris_obj::registeredUsingEntries,"registeredUsingEntries");
	HX_VISIT_MEMBER_NAME(Iris_obj::blocklistImports,"blocklistImports");
	HX_VISIT_MEMBER_NAME(Iris_obj::proxyImports,"proxyImports");
	HX_VISIT_MEMBER_NAME(Iris_obj::logLevel,"logLevel");
	HX_VISIT_MEMBER_NAME(Iris_obj::print,"print");
	HX_VISIT_MEMBER_NAME(Iris_obj::error,"error");
	HX_VISIT_MEMBER_NAME(Iris_obj::warn,"warn");
	HX_VISIT_MEMBER_NAME(Iris_obj::fatal,"fatal");
};

#endif

::hx::Class Iris_obj::__mClass;

static ::String Iris_obj_sStaticFields[] = {
	HX_("instances",3e,83,1a,4b),
	HX_("registeredUsingEntries",0e,f5,13,62),
	HX_("addBlocklistImport",cf,66,47,6b),
	HX_("addProxyImport",d2,91,5d,c3),
	HX_("getProxiedImport",0c,a5,53,ca),
	HX_("getDefaultPos",89,c7,74,82),
	HX_("logLevel",60,52,69,5d),
	HX_("print",2d,58,8b,c8),
	HX_("error",c8,cb,29,73),
	HX_("warn",46,62,f2,4e),
	HX_("fatal",04,38,55,fb),
	HX_("fixScriptName",2b,90,09,63),
	HX_("destroyAll",47,5c,0e,ae),
	HX_("registerUsingGlobal",24,7c,45,af),
	::String(null())
};

void Iris_obj::__register()
{
	Iris_obj _hx_dummy;
	Iris_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("crowplexus.iris.Iris",e4,03,e2,62);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Iris_obj::__GetStatic;
	__mClass->mSetStaticField = &Iris_obj::__SetStatic;
	__mClass->mMarkFunc = Iris_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Iris_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Iris_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Iris_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Iris_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Iris_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Iris_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Iris_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_362e1cea85625f87_41_boot)
HXDLIN(  41)		instances =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            		::Array< ::Dynamic> _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            			 ::Dynamic _hx_run( ::Dynamic o,::String f,::cpp::VirtualArray args){
            				HX_STACKFRAME(&_hx_pos_362e1cea85625f87_44_boot)
HXLINE(  45)				if ((f == HX_("isEof",f2,2e,4b,c1))) {
HXLINE(  46)					return null();
            				}
HXLINE(  47)				{
HXLINE(  47)					 ::ValueType _g = ::Type_obj::_hx_typeof(o);
HXDLIN(  47)					switch((int)(_g->_hx_getIndex())){
            						case (int)1: {
HXLINE(  48)							if ((f == HX_("hex",db,42,4f,00))) {
HXLINE(  49)								return ::StringTools_obj::hex(( (int)(o) ),args->__get(0));
            							}
            						}
            						break;
            						case (int)6: {
HXLINE(  50)							if (::hx::IsPointerEq( _g->_hx_getObject(0).StaticCast< ::hx::Class >(),::hx::ClassOf< ::String >() )) {
HXLINE(  51)								if (::Reflect_obj::hasField(::hx::ClassOf< ::StringTools >(),f)) {
HXLINE(  52)									 ::Dynamic field = ::Reflect_obj::field(::hx::ClassOf< ::StringTools >(),f);
HXLINE(  53)									if (::Reflect_obj::isFunction(field)) {
HXLINE(  54)										return ::Reflect_obj::callMethod(::hx::ClassOf< ::StringTools >(),field,::cpp::VirtualArray_obj::__new(1)->init(0,o)->concat(args));
            									}
            								}
            							}
            						}
            						break;
            						default:{
            						}
            					}
            				}
HXLINE(  59)				return null();
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(3)
            			 ::Dynamic _hx_run( ::Dynamic o,::String f,::cpp::VirtualArray args){
            				HX_GC_STACKFRAME(&_hx_pos_362e1cea85625f87_61_boot)
HXLINE(  62)				if (::crowplexus::hscript::Tools_obj::isIterable(o)) {
HXLINE(  64)					if (::Reflect_obj::hasField(::hx::ClassOf< ::Lambda >(),f)) {
HXLINE(  65)						 ::Dynamic field = ::Reflect_obj::field(::hx::ClassOf< ::Lambda >(),f);
HXLINE(  66)						if (::Reflect_obj::isFunction(field)) {
HXLINE(  67)							return ::Reflect_obj::callMethod(::hx::ClassOf< ::Lambda >(),field,::cpp::VirtualArray_obj::__new(1)->init(0,o)->concat(args));
            						}
            					}
            				}
HXLINE(  71)				return null();
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_GC_STACKFRAME(&_hx_pos_362e1cea85625f87_43_boot)
HXLINE(  44)			 ::crowplexus::iris::utils::UsingEntry _hx_tmp =  ::crowplexus::iris::utils::UsingEntry_obj::__alloc( HX_CTX ,HX_("StringTools",6a,db,63,03), ::Dynamic(new _hx_Closure_0()));
HXLINE(  43)			return ::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1, ::crowplexus::iris::utils::UsingEntry_obj::__alloc( HX_CTX ,HX_("Lambda",27,a7,54,85), ::Dynamic(new _hx_Closure_1())));
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_43_boot)
HXDLIN(  43)		registeredUsingEntries = ( (::Array< ::Dynamic>)( ::Dynamic(new _hx_Closure_2())()) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_80_boot)
HXDLIN(  80)		blocklistImports = ::Array_obj< ::String >::__new(0);
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::StringMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_362e1cea85625f87_85_boot)
HXDLIN(  85)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  85)			_g->set(HX_("Type",da,1e,e2,37),( ( ::Dynamic)(::hx::ClassOf< ::crowplexus::hscript::proxy::ProxyType >()) ));
HXDLIN(  85)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_362e1cea85625f87_85_boot)
HXDLIN(  85)		proxyImports = ( ( ::haxe::ds::StringMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
	logLevel = new __default_logLevel;

	print = new __default_print;

	error = new __default_error;

	warn = new __default_warn;

	fatal = new __default_fatal;

}

} // end namespace crowplexus
} // end namespace iris
