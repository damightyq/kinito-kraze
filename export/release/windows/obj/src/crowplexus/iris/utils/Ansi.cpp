// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_crowplexus_iris_IrisUsingClass
#include <crowplexus/iris/IrisUsingClass.h>
#endif
#ifndef INCLUDED_crowplexus_iris_utils_Ansi
#include <crowplexus/iris/utils/Ansi.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a653a00a1fe335a0_88_reset,"crowplexus.iris.utils.Ansi","reset",0x3f881a52,"crowplexus.iris.utils.Ansi.reset","crowplexus/iris/utils/Ansi.hx",88,0xa267446c)
HX_LOCAL_STACK_FRAME(_hx_pos_a653a00a1fe335a0_94_attr,"crowplexus.iris.utils.Ansi","attr",0xc0490e0e,"crowplexus.iris.utils.Ansi.attr","crowplexus/iris/utils/Ansi.hx",94,0xa267446c)
HX_LOCAL_STACK_FRAME(_hx_pos_a653a00a1fe335a0_104_bg,"crowplexus.iris.utils.Ansi","bg",0xa17a6562,"crowplexus.iris.utils.Ansi.bg","crowplexus/iris/utils/Ansi.hx",104,0xa267446c)
HX_LOCAL_STACK_FRAME(_hx_pos_a653a00a1fe335a0_110_clearScreen,"crowplexus.iris.utils.Ansi","clearScreen",0x8541dd9c,"crowplexus.iris.utils.Ansi.clearScreen","crowplexus/iris/utils/Ansi.hx",110,0xa267446c)
HX_LOCAL_STACK_FRAME(_hx_pos_a653a00a1fe335a0_116_clearLine,"crowplexus.iris.utils.Ansi","clearLine",0xa5d9ce24,"crowplexus.iris.utils.Ansi.clearLine","crowplexus/iris/utils/Ansi.hx",116,0xa267446c)
HX_LOCAL_STACK_FRAME(_hx_pos_a653a00a1fe335a0_126_fg,"crowplexus.iris.utils.Ansi","fg",0xa17a68de,"crowplexus.iris.utils.Ansi.fg","crowplexus/iris/utils/Ansi.hx",126,0xa267446c)
HX_LOCAL_STACK_FRAME(_hx_pos_a653a00a1fe335a0_130_stripColor,"crowplexus.iris.utils.Ansi","stripColor",0x51ccb408,"crowplexus.iris.utils.Ansi.stripColor","crowplexus/iris/utils/Ansi.hx",130,0xa267446c)
HX_LOCAL_STACK_FRAME(_hx_pos_a653a00a1fe335a0_85_boot,"crowplexus.iris.utils.Ansi","boot",0xc0ee750f,"crowplexus.iris.utils.Ansi.boot","crowplexus/iris/utils/Ansi.hx",85,0xa267446c)
HX_LOCAL_STACK_FRAME(_hx_pos_a653a00a1fe335a0_128_boot,"crowplexus.iris.utils.Ansi","boot",0xc0ee750f,"crowplexus.iris.utils.Ansi.boot","crowplexus/iris/utils/Ansi.hx",128,0xa267446c)
HX_LOCAL_STACK_FRAME(_hx_pos_f9d887ba4bce5eec_128_boot,"crowplexus.iris.utils.Ansi","boot",0xc0ee750f,"crowplexus.iris.utils.Ansi.boot","crowplexus/iris/macro/UsingMacro.macro.hx",128,0x0de1e6a4)
namespace crowplexus{
namespace iris{
namespace utils{

void Ansi_obj::__construct() { }

Dynamic Ansi_obj::__CreateEmpty() { return new Ansi_obj; }

void *Ansi_obj::_hx_vtable = 0;

Dynamic Ansi_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Ansi_obj > _hx_result = new Ansi_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Ansi_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7b905e7d;
}

static ::crowplexus::iris::IrisUsingClass_obj _hx_crowplexus_iris_utils_Ansi__hx_crowplexus_iris_IrisUsingClass= {
};

void *Ansi_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xc23de75e: return &_hx_crowplexus_iris_utils_Ansi__hx_crowplexus_iris_IrisUsingClass;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

::String Ansi_obj::ESC;

::String Ansi_obj::reset(::String str){
            	HX_STACKFRAME(&_hx_pos_a653a00a1fe335a0_88_reset)
HXDLIN(  88)		return ((str + HX_("\x1b""[",e0,17,00,00)) + HX_("0m",3d,2a,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Ansi_obj,reset,return )

::String Ansi_obj::attr(::String str,int attr){
            	HX_STACKFRAME(&_hx_pos_a653a00a1fe335a0_94_attr)
HXDLIN(  94)		return (((HX_("\x1b""[",e0,17,00,00) + attr) + HX_("m",6d,00,00,00)) + str);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ansi_obj,attr,return )

::String Ansi_obj::bg(::String str,int color){
            	HX_STACKFRAME(&_hx_pos_a653a00a1fe335a0_104_bg)
HXDLIN( 104)		return ((((HX_("\x1b""[",e0,17,00,00) + HX_("4",34,00,00,00)) + color) + HX_("m",6d,00,00,00)) + str);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ansi_obj,bg,return )

::String Ansi_obj::clearScreen(){
            	HX_STACKFRAME(&_hx_pos_a653a00a1fe335a0_110_clearScreen)
HXDLIN( 110)		return (HX_("\x1b""[",e0,17,00,00) + HX_("2Jm",95,31,26,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Ansi_obj,clearScreen,return )

::String Ansi_obj::clearLine(){
            	HX_STACKFRAME(&_hx_pos_a653a00a1fe335a0_116_clearLine)
HXDLIN( 116)		return (HX_("\x1b""[",e0,17,00,00) + HX_("Km",c2,41,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Ansi_obj,clearLine,return )

::String Ansi_obj::fg(::String str,int color){
            	HX_STACKFRAME(&_hx_pos_a653a00a1fe335a0_126_fg)
HXDLIN( 126)		return ((((HX_("\x1b""[",e0,17,00,00) + HX_("38;5;",dc,7b,a0,82)) + color) + HX_("m",6d,00,00,00)) + str);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ansi_obj,fg,return )

 ::Dynamic Ansi_obj::colorSupported;

::String Ansi_obj::stripColor(::String output){
            	HX_GC_STACKFRAME(&_hx_pos_a653a00a1fe335a0_130_stripColor)
HXLINE( 132)		if (::hx::IsNull( ::crowplexus::iris::utils::Ansi_obj::colorSupported )) {
HXLINE( 133)			::String term = ::Sys_obj::getEnv(HX_("TERM",6c,8f,ba,37));
HXLINE( 135)			if ((term == HX_("dumb",26,7d,72,42))) {
HXLINE( 136)				::crowplexus::iris::utils::Ansi_obj::colorSupported = false;
            			}
            			else {
HXLINE( 138)				bool _hx_tmp;
HXDLIN( 138)				if (::hx::IsNotEq( ::crowplexus::iris::utils::Ansi_obj::colorSupported,true )) {
HXLINE( 138)					_hx_tmp = ::hx::IsNotNull( term );
            				}
            				else {
HXLINE( 138)					_hx_tmp = false;
            				}
HXDLIN( 138)				if (_hx_tmp) {
HXLINE( 139)					bool _hx_tmp1;
HXDLIN( 139)					if (!( ::EReg_obj::__alloc( HX_CTX ,HX_("(?i)-256(color)?$",76,cf,6c,9b),HX_("",00,00,00,00))->match(term))) {
HXLINE( 139)						_hx_tmp1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("(?i)^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux",bb,13,49,52),HX_("",00,00,00,00))->match(term);
            					}
            					else {
HXLINE( 139)						_hx_tmp1 = true;
            					}
HXDLIN( 139)					::crowplexus::iris::utils::Ansi_obj::colorSupported = _hx_tmp1;
            				}
HXLINE( 143)				if (::hx::IsNotEq( ::crowplexus::iris::utils::Ansi_obj::colorSupported,true )) {
HXLINE( 144)					bool _hx_tmp2;
HXDLIN( 144)					bool _hx_tmp3;
HXDLIN( 144)					bool _hx_tmp4;
HXDLIN( 144)					bool _hx_tmp5;
HXDLIN( 144)					bool _hx_tmp6;
HXDLIN( 144)					if ((::Sys_obj::getEnv(HX_("TERM_PROGRAM",51,53,bf,06)) != HX_("iTerm.app",28,88,97,27))) {
HXLINE( 144)						_hx_tmp6 = (::Sys_obj::getEnv(HX_("TERM_PROGRAM",51,53,bf,06)) == HX_("Apple_Terminal",81,68,62,02));
            					}
            					else {
HXLINE( 144)						_hx_tmp6 = true;
            					}
HXDLIN( 144)					if (!(_hx_tmp6)) {
HXLINE( 144)						_hx_tmp5 = ::hx::IsNotNull( ::Sys_obj::getEnv(HX_("COLORTERM",2f,96,e6,38)) );
            					}
            					else {
HXLINE( 144)						_hx_tmp5 = true;
            					}
HXDLIN( 144)					if (!(_hx_tmp5)) {
HXLINE( 144)						_hx_tmp4 = ::hx::IsNotNull( ::Sys_obj::getEnv(HX_("ANSICON",3f,21,7f,b9)) );
            					}
            					else {
HXLINE( 144)						_hx_tmp4 = true;
            					}
HXDLIN( 144)					if (!(_hx_tmp4)) {
HXLINE( 144)						_hx_tmp3 = ::hx::IsNotNull( ::Sys_obj::getEnv(HX_("ConEmuANSI",4e,7c,1a,b1)) );
            					}
            					else {
HXLINE( 144)						_hx_tmp3 = true;
            					}
HXDLIN( 144)					if (!(_hx_tmp3)) {
HXLINE( 144)						_hx_tmp2 = ::hx::IsNotNull( ::Sys_obj::getEnv(HX_("WT_SESSION",d4,75,a9,dd)) );
            					}
            					else {
HXLINE( 144)						_hx_tmp2 = true;
            					}
HXDLIN( 144)					::crowplexus::iris::utils::Ansi_obj::colorSupported = _hx_tmp2;
            				}
            			}
            		}
HXLINE( 154)		if (( (bool)(::crowplexus::iris::utils::Ansi_obj::colorSupported) )) {
HXLINE( 155)			return output;
            		}
HXLINE( 158)		return  ::EReg_obj::__alloc( HX_CTX ,HX_("\\x1b\\[[^m]*m",e2,5e,72,b8),HX_("g",67,00,00,00))->replace(output,HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Ansi_obj,stripColor,return )

 ::haxe::ds::StringMap Ansi_obj::_hx___irisUsing_crowplexus_iris_utils_Ansi;


Ansi_obj::Ansi_obj()
{
}

bool Ansi_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { outValue = bg_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fg") ) { outValue = fg_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"attr") ) { outValue = attr_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { outValue = reset_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"clearLine") ) { outValue = clearLine_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"stripColor") ) { outValue = stripColor_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"clearScreen") ) { outValue = clearScreen_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorSupported") ) { outValue = ( colorSupported ); return true; }
		break;
	case 38:
		if (HX_FIELD_EQ(inName,"__irisUsing_crowplexus_iris_utils_Ansi") ) { outValue = ( _hx___irisUsing_crowplexus_iris_utils_Ansi ); return true; }
	}
	return false;
}

bool Ansi_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"colorSupported") ) { colorSupported=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 38:
		if (HX_FIELD_EQ(inName,"__irisUsing_crowplexus_iris_utils_Ansi") ) { _hx___irisUsing_crowplexus_iris_utils_Ansi=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Ansi_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Ansi_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &Ansi_obj::ESC,HX_("ESC",15,a4,34,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Ansi_obj::colorSupported,HX_("colorSupported",4b,70,b6,7c)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Ansi_obj::_hx___irisUsing_crowplexus_iris_utils_Ansi,HX_("__irisUsing_crowplexus_iris_utils_Ansi",70,9b,1e,88)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Ansi_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Ansi_obj::ESC,"ESC");
	HX_MARK_MEMBER_NAME(Ansi_obj::colorSupported,"colorSupported");
	HX_MARK_MEMBER_NAME(Ansi_obj::_hx___irisUsing_crowplexus_iris_utils_Ansi,"__irisUsing_crowplexus_iris_utils_Ansi");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Ansi_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Ansi_obj::ESC,"ESC");
	HX_VISIT_MEMBER_NAME(Ansi_obj::colorSupported,"colorSupported");
	HX_VISIT_MEMBER_NAME(Ansi_obj::_hx___irisUsing_crowplexus_iris_utils_Ansi,"__irisUsing_crowplexus_iris_utils_Ansi");
};

#endif

::hx::Class Ansi_obj::__mClass;

static ::String Ansi_obj_sStaticFields[] = {
	HX_("ESC",15,a4,34,00),
	HX_("reset",cf,49,c8,e6),
	HX_("attr",31,1d,76,40),
	HX_("bg",c5,55,00,00),
	HX_("clearScreen",d9,48,4a,db),
	HX_("clearLine",21,00,74,bb),
	HX_("fg",41,59,00,00),
	HX_("colorSupported",4b,70,b6,7c),
	HX_("stripColor",6b,3f,1e,23),
	HX_("__irisUsing_crowplexus_iris_utils_Ansi",70,9b,1e,88),
	::String(null())
};

void Ansi_obj::__register()
{
	Ansi_obj _hx_dummy;
	Ansi_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("crowplexus.iris.utils.Ansi",b1,1c,41,b4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Ansi_obj::__GetStatic;
	__mClass->mSetStaticField = &Ansi_obj::__SetStatic;
	__mClass->mMarkFunc = Ansi_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Ansi_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Ansi_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Ansi_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Ansi_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Ansi_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Ansi_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a653a00a1fe335a0_85_boot)
HXDLIN(  85)		ESC = HX_("\x1b""[",e0,17,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a653a00a1fe335a0_128_boot)
HXDLIN( 128)		colorSupported = null();
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::StringMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_f9d887ba4bce5eec_128_boot)
HXDLIN( 128)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 128)			_g->set(HX_("reset",cf,49,c8,e6),::ValueType_obj::TClass(::hx::ClassOf< ::String >()));
HXDLIN( 128)			_g->set(HX_("attr",31,1d,76,40),::ValueType_obj::TClass(::hx::ClassOf< ::String >()));
HXDLIN( 128)			_g->set(HX_("bg",c5,55,00,00),::ValueType_obj::TClass(::hx::ClassOf< ::String >()));
HXDLIN( 128)			_g->set(HX_("fg",41,59,00,00),::ValueType_obj::TClass(::hx::ClassOf< ::String >()));
HXDLIN( 128)			_g->set(HX_("stripColor",6b,3f,1e,23),::ValueType_obj::TClass(::hx::ClassOf< ::String >()));
HXDLIN( 128)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_f9d887ba4bce5eec_128_boot)
HXDLIN( 128)		_hx___irisUsing_crowplexus_iris_utils_Ansi = ( ( ::haxe::ds::StringMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
}

} // end namespace crowplexus
} // end namespace iris
} // end namespace utils
