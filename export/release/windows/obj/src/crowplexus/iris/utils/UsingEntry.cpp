// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_crowplexus_iris_utils_UsingEntry
#include <crowplexus/iris/utils/UsingEntry.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6f165bf9b5e668f2_11_new,"crowplexus.iris.utils.UsingEntry","new",0xe5845fee,"crowplexus.iris.utils.UsingEntry.new","crowplexus/iris/utils/UsingEntry.hx",11,0x7801aa41)
namespace crowplexus{
namespace iris{
namespace utils{

void UsingEntry_obj::__construct(::String name, ::Dynamic call){
            	HX_STACKFRAME(&_hx_pos_6f165bf9b5e668f2_11_new)
HXLINE(  12)		this->name = name;
HXLINE(  13)		this->call = call;
            	}

Dynamic UsingEntry_obj::__CreateEmpty() { return new UsingEntry_obj; }

void *UsingEntry_obj::_hx_vtable = 0;

Dynamic UsingEntry_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< UsingEntry_obj > _hx_result = new UsingEntry_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool UsingEntry_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3f0138e4;
}


UsingEntry_obj::UsingEntry_obj()
{
}

void UsingEntry_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(UsingEntry);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(call,"call");
	HX_MARK_END_CLASS();
}

void UsingEntry_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(call,"call");
}

::hx::Val UsingEntry_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"call") ) { return ::hx::Val( call ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val UsingEntry_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"call") ) { call=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void UsingEntry_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo UsingEntry_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(UsingEntry_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(UsingEntry_obj,call),HX_("call",9e,18,ba,41)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *UsingEntry_obj_sStaticStorageInfo = 0;
#endif

static ::String UsingEntry_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("call",9e,18,ba,41),
	::String(null()) };

::hx::Class UsingEntry_obj::__mClass;

void UsingEntry_obj::__register()
{
	UsingEntry_obj _hx_dummy;
	UsingEntry_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("crowplexus.iris.utils.UsingEntry",fc,90,46,df);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(UsingEntry_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< UsingEntry_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UsingEntry_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UsingEntry_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace crowplexus
} // end namespace iris
} // end namespace utils
