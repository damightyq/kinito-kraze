// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_crowplexus_iris_IrisConfig
#include <crowplexus/iris/IrisConfig.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9bb9668e44f4c333_14_new,"crowplexus.iris.IrisConfig","new",0x4a99cdb8,"crowplexus.iris.IrisConfig.new","crowplexus/iris/IrisConfig.hx",14,0x7c4bb858)
HX_LOCAL_STACK_FRAME(_hx_pos_9bb9668e44f4c333_38_from,"crowplexus.iris.IrisConfig","from",0xf6ba5512,"crowplexus.iris.IrisConfig.from","crowplexus/iris/IrisConfig.hx",38,0x7c4bb858)
namespace crowplexus{
namespace iris{

void IrisConfig_obj::__construct(::String name,::hx::Null< bool >  __o_autoRun,::hx::Null< bool >  __o_autoPreset,::Array< ::String > localBlocklist){
            		bool autoRun = __o_autoRun.Default(true);
            		bool autoPreset = __o_autoPreset.Default(true);
            	HX_STACKFRAME(&_hx_pos_9bb9668e44f4c333_14_new)
HXLINE(  20)		this->localBlocklist = ::Array_obj< ::String >::__new(0);
HXLINE(  18)		this->packageName = null();
HXLINE(  17)		this->autoPreset = true;
HXLINE(  16)		this->autoRun = true;
HXLINE(  15)		this->name = null();
HXLINE(  31)		this->name = name;
HXLINE(  32)		this->autoRun = autoRun;
HXLINE(  33)		this->autoPreset = autoPreset;
HXLINE(  34)		if (::hx::IsNotNull( localBlocklist )) {
HXLINE(  35)			this->localBlocklist = localBlocklist;
            		}
            	}

Dynamic IrisConfig_obj::__CreateEmpty() { return new IrisConfig_obj; }

void *IrisConfig_obj::_hx_vtable = 0;

Dynamic IrisConfig_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< IrisConfig_obj > _hx_result = new IrisConfig_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool IrisConfig_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0c6d678c;
}

 ::crowplexus::iris::IrisConfig IrisConfig_obj::from( ::Dynamic d){
            	HX_GC_STACKFRAME(&_hx_pos_9bb9668e44f4c333_38_from)
HXLINE(  39)		bool _hx_tmp;
HXDLIN(  39)		if (::hx::IsNotNull( d )) {
HXLINE(  39)			_hx_tmp = ::Std_obj::isOfType(d,::hx::ClassOf< ::crowplexus::iris::IrisConfig >());
            		}
            		else {
HXLINE(  39)			_hx_tmp = false;
            		}
HXDLIN(  39)		if (_hx_tmp) {
HXLINE(  40)			return ( ( ::crowplexus::iris::IrisConfig)(d) );
            		}
HXLINE(  41)		 ::Dynamic d1 = d;
HXLINE(  42)		return  ::crowplexus::iris::IrisConfig_obj::__alloc( HX_CTX ,( (::String)(d1->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ),d1->__Field(HX_("autoRun",1c,cf,7b,9d),::hx::paccDynamic),d1->__Field(HX_("autoPreset",2e,c4,8b,1a),::hx::paccDynamic),( (::Array< ::String >)(d1->__Field(HX_("localBlocklist",40,cd,89,c4),::hx::paccDynamic)) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(IrisConfig_obj,from,return )


IrisConfig_obj::IrisConfig_obj()
{
}

void IrisConfig_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IrisConfig);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(autoRun,"autoRun");
	HX_MARK_MEMBER_NAME(autoPreset,"autoPreset");
	HX_MARK_MEMBER_NAME(packageName,"packageName");
	HX_MARK_MEMBER_NAME(localBlocklist,"localBlocklist");
	HX_MARK_END_CLASS();
}

void IrisConfig_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(autoRun,"autoRun");
	HX_VISIT_MEMBER_NAME(autoPreset,"autoPreset");
	HX_VISIT_MEMBER_NAME(packageName,"packageName");
	HX_VISIT_MEMBER_NAME(localBlocklist,"localBlocklist");
}

::hx::Val IrisConfig_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"autoRun") ) { return ::hx::Val( autoRun ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"autoPreset") ) { return ::hx::Val( autoPreset ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"packageName") ) { return ::hx::Val( packageName ); }
	}
	return super::__Field(inName,inCallProp);
}

bool IrisConfig_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"from") ) { outValue = from_dyn(); return true; }
	}
	return false;
}

::hx::Val IrisConfig_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"autoRun") ) { autoRun=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"autoPreset") ) { autoPreset=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"packageName") ) { packageName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IrisConfig_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("autoRun",1c,cf,7b,9d));
	outFields->push(HX_("autoPreset",2e,c4,8b,1a));
	outFields->push(HX_("packageName",f1,04,ad,04));
	outFields->push(HX_("localBlocklist",40,cd,89,c4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo IrisConfig_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(IrisConfig_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsBool,(int)offsetof(IrisConfig_obj,autoRun),HX_("autoRun",1c,cf,7b,9d)},
	{::hx::fsBool,(int)offsetof(IrisConfig_obj,autoPreset),HX_("autoPreset",2e,c4,8b,1a)},
	{::hx::fsString,(int)offsetof(IrisConfig_obj,packageName),HX_("packageName",f1,04,ad,04)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(IrisConfig_obj,localBlocklist),HX_("localBlocklist",40,cd,89,c4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *IrisConfig_obj_sStaticStorageInfo = 0;
#endif

static ::String IrisConfig_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("autoRun",1c,cf,7b,9d),
	HX_("autoPreset",2e,c4,8b,1a),
	HX_("packageName",f1,04,ad,04),
	::String(null()) };

::hx::Class IrisConfig_obj::__mClass;

static ::String IrisConfig_obj_sStaticFields[] = {
	HX_("from",6a,a5,c2,43),
	::String(null())
};

void IrisConfig_obj::__register()
{
	IrisConfig_obj _hx_dummy;
	IrisConfig_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("crowplexus.iris.IrisConfig",c6,d1,4a,7e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &IrisConfig_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(IrisConfig_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(IrisConfig_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< IrisConfig_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IrisConfig_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IrisConfig_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace crowplexus
} // end namespace iris
