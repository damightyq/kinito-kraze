// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_crowplexus_hscript_Token
#include <crowplexus/hscript/Token.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_TokenPos
#include <crowplexus/hscript/TokenPos.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3baf37bc1b271d6d_57_new,"crowplexus.hscript.TokenPos","new",0xf75e59d2,"crowplexus.hscript.TokenPos.new","crowplexus/hscript/Parser.hx",57,0x2e3b7998)
namespace crowplexus{
namespace hscript{

void TokenPos_obj::__construct( ::crowplexus::hscript::Token t,int min,int max){
            	HX_STACKFRAME(&_hx_pos_3baf37bc1b271d6d_57_new)
HXLINE(  58)		this->t = t;
HXLINE(  59)		this->min = min;
HXLINE(  60)		this->max = max;
            	}

Dynamic TokenPos_obj::__CreateEmpty() { return new TokenPos_obj; }

void *TokenPos_obj::_hx_vtable = 0;

Dynamic TokenPos_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TokenPos_obj > _hx_result = new TokenPos_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool TokenPos_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7f21c676;
}


::hx::ObjectPtr< TokenPos_obj > TokenPos_obj::__new( ::crowplexus::hscript::Token t,int min,int max) {
	::hx::ObjectPtr< TokenPos_obj > __this = new TokenPos_obj();
	__this->__construct(t,min,max);
	return __this;
}

::hx::ObjectPtr< TokenPos_obj > TokenPos_obj::__alloc(::hx::Ctx *_hx_ctx, ::crowplexus::hscript::Token t,int min,int max) {
	TokenPos_obj *__this = (TokenPos_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TokenPos_obj), true, "crowplexus.hscript.TokenPos"));
	*(void **)__this = TokenPos_obj::_hx_vtable;
	__this->__construct(t,min,max);
	return __this;
}

TokenPos_obj::TokenPos_obj()
{
}

void TokenPos_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TokenPos);
	HX_MARK_MEMBER_NAME(t,"t");
	HX_MARK_MEMBER_NAME(min,"min");
	HX_MARK_MEMBER_NAME(max,"max");
	HX_MARK_END_CLASS();
}

void TokenPos_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(t,"t");
	HX_VISIT_MEMBER_NAME(min,"min");
	HX_VISIT_MEMBER_NAME(max,"max");
}

::hx::Val TokenPos_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"t") ) { return ::hx::Val( t ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { return ::hx::Val( min ); }
		if (HX_FIELD_EQ(inName,"max") ) { return ::hx::Val( max ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TokenPos_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"t") ) { t=inValue.Cast<  ::crowplexus::hscript::Token >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { min=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"max") ) { max=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TokenPos_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("t",74,00,00,00));
	outFields->push(HX_("min",92,11,53,00));
	outFields->push(HX_("max",a4,0a,53,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TokenPos_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::crowplexus::hscript::Token */ ,(int)offsetof(TokenPos_obj,t),HX_("t",74,00,00,00)},
	{::hx::fsInt,(int)offsetof(TokenPos_obj,min),HX_("min",92,11,53,00)},
	{::hx::fsInt,(int)offsetof(TokenPos_obj,max),HX_("max",a4,0a,53,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TokenPos_obj_sStaticStorageInfo = 0;
#endif

static ::String TokenPos_obj_sMemberFields[] = {
	HX_("t",74,00,00,00),
	HX_("min",92,11,53,00),
	HX_("max",a4,0a,53,00),
	::String(null()) };

::hx::Class TokenPos_obj::__mClass;

void TokenPos_obj::__register()
{
	TokenPos_obj _hx_dummy;
	TokenPos_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("crowplexus.hscript.TokenPos",e0,c8,dc,1c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TokenPos_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TokenPos_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TokenPos_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TokenPos_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace crowplexus
} // end namespace hscript
