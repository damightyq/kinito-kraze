// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_Expr
#include <crowplexus/hscript/Expr.h>
#endif
#ifndef INCLUDED_crowplexus_hscript_ExprDef
#include <crowplexus/hscript/ExprDef.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2f90f74ce626e589_38_new,"crowplexus.hscript.Expr","new",0x8af0b16c,"crowplexus.hscript.Expr.new","crowplexus/hscript/Expr.hx",38,0x8be9fac2)
HX_LOCAL_STACK_FRAME(_hx_pos_2f90f74ce626e589_46_toString,"crowplexus.hscript.Expr","toString",0xd0caa420,"crowplexus.hscript.Expr.toString","crowplexus/hscript/Expr.hx",46,0x8be9fac2)
namespace crowplexus{
namespace hscript{

void Expr_obj::__construct( ::crowplexus::hscript::ExprDef e,int pmin,int pmax,::String origin,int line){
            	HX_STACKFRAME(&_hx_pos_2f90f74ce626e589_38_new)
HXDLIN(  38)		this->e = e;
HXDLIN(  38)		this->pmin = pmin;
HXDLIN(  38)		this->pmax = pmax;
HXDLIN(  38)		this->origin = origin;
HXDLIN(  38)		this->line = line;
            	}

Dynamic Expr_obj::__CreateEmpty() { return new Expr_obj; }

void *Expr_obj::_hx_vtable = 0;

Dynamic Expr_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Expr_obj > _hx_result = new Expr_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool Expr_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x141a6780;
}

::String Expr_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_2f90f74ce626e589_46_toString)
HXDLIN(  46)		return ::Std_obj::string( ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("e",65,00,00,00),this->e)
            			->setFixed(1,HX_("line",f4,17,b3,47),this->line)
            			->setFixed(2,HX_("pmax",34,f0,5a,4a),this->pmax)
            			->setFixed(3,HX_("pmin",22,f7,5a,4a),this->pmin)
            			->setFixed(4,HX_("origin",e6,19,01,4b),this->origin)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Expr_obj,toString,return )


::hx::ObjectPtr< Expr_obj > Expr_obj::__new( ::crowplexus::hscript::ExprDef e,int pmin,int pmax,::String origin,int line) {
	::hx::ObjectPtr< Expr_obj > __this = new Expr_obj();
	__this->__construct(e,pmin,pmax,origin,line);
	return __this;
}

::hx::ObjectPtr< Expr_obj > Expr_obj::__alloc(::hx::Ctx *_hx_ctx, ::crowplexus::hscript::ExprDef e,int pmin,int pmax,::String origin,int line) {
	Expr_obj *__this = (Expr_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Expr_obj), true, "crowplexus.hscript.Expr"));
	*(void **)__this = Expr_obj::_hx_vtable;
	__this->__construct(e,pmin,pmax,origin,line);
	return __this;
}

Expr_obj::Expr_obj()
{
}

void Expr_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Expr);
	HX_MARK_MEMBER_NAME(e,"e");
	HX_MARK_MEMBER_NAME(pmin,"pmin");
	HX_MARK_MEMBER_NAME(pmax,"pmax");
	HX_MARK_MEMBER_NAME(origin,"origin");
	HX_MARK_MEMBER_NAME(line,"line");
	HX_MARK_END_CLASS();
}

void Expr_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(e,"e");
	HX_VISIT_MEMBER_NAME(pmin,"pmin");
	HX_VISIT_MEMBER_NAME(pmax,"pmax");
	HX_VISIT_MEMBER_NAME(origin,"origin");
	HX_VISIT_MEMBER_NAME(line,"line");
}

::hx::Val Expr_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"e") ) { return ::hx::Val( e ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"pmin") ) { return ::hx::Val( pmin ); }
		if (HX_FIELD_EQ(inName,"pmax") ) { return ::hx::Val( pmax ); }
		if (HX_FIELD_EQ(inName,"line") ) { return ::hx::Val( line ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"origin") ) { return ::hx::Val( origin ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Expr_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"e") ) { e=inValue.Cast<  ::crowplexus::hscript::ExprDef >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"pmin") ) { pmin=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pmax") ) { pmax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"line") ) { line=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"origin") ) { origin=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Expr_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("e",65,00,00,00));
	outFields->push(HX_("pmin",22,f7,5a,4a));
	outFields->push(HX_("pmax",34,f0,5a,4a));
	outFields->push(HX_("origin",e6,19,01,4b));
	outFields->push(HX_("line",f4,17,b3,47));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Expr_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::crowplexus::hscript::ExprDef */ ,(int)offsetof(Expr_obj,e),HX_("e",65,00,00,00)},
	{::hx::fsInt,(int)offsetof(Expr_obj,pmin),HX_("pmin",22,f7,5a,4a)},
	{::hx::fsInt,(int)offsetof(Expr_obj,pmax),HX_("pmax",34,f0,5a,4a)},
	{::hx::fsString,(int)offsetof(Expr_obj,origin),HX_("origin",e6,19,01,4b)},
	{::hx::fsInt,(int)offsetof(Expr_obj,line),HX_("line",f4,17,b3,47)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Expr_obj_sStaticStorageInfo = 0;
#endif

static ::String Expr_obj_sMemberFields[] = {
	HX_("e",65,00,00,00),
	HX_("pmin",22,f7,5a,4a),
	HX_("pmax",34,f0,5a,4a),
	HX_("origin",e6,19,01,4b),
	HX_("line",f4,17,b3,47),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class Expr_obj::__mClass;

void Expr_obj::__register()
{
	Expr_obj _hx_dummy;
	Expr_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("crowplexus.hscript.Expr",7a,cb,90,cd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Expr_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Expr_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Expr_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Expr_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace crowplexus
} // end namespace hscript
