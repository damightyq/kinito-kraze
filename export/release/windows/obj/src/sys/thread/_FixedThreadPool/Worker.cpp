// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_sys_thread_Deque
#include <sys/thread/Deque.h>
#endif
#ifndef INCLUDED_sys_thread__FixedThreadPool_ShutdownException
#include <sys/thread/_FixedThreadPool/ShutdownException.h>
#endif
#ifndef INCLUDED_sys_thread__FixedThreadPool_Worker
#include <sys/thread/_FixedThreadPool/Worker.h>
#endif
#ifndef INCLUDED_sys_thread__Thread_HaxeThread
#include <sys/thread/_Thread/HaxeThread.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_efbac7832e7a6d11_99_new,"sys.thread._FixedThreadPool.Worker","new",0x5ad56180,"sys.thread._FixedThreadPool.Worker.new","C:\\HaxeToolkit\\haxe\\std/sys/thread/FixedThreadPool.hx",99,0x9b561eee)
HX_LOCAL_STACK_FRAME(_hx_pos_efbac7832e7a6d11_105_loop,"sys.thread._FixedThreadPool.Worker","loop",0x1e951144,"sys.thread._FixedThreadPool.Worker.loop","C:\\HaxeToolkit\\haxe\\std/sys/thread/FixedThreadPool.hx",105,0x9b561eee)
namespace sys{
namespace thread{
namespace _FixedThreadPool{

void Worker_obj::__construct( ::sys::thread::Deque queue){
            	HX_STACKFRAME(&_hx_pos_efbac7832e7a6d11_99_new)
HXLINE( 100)		this->queue = queue;
HXLINE( 101)		this->thread = ::sys::thread::_Thread::HaxeThread_obj::create(this->loop_dyn(),false);
            	}

Dynamic Worker_obj::__CreateEmpty() { return new Worker_obj; }

void *Worker_obj::_hx_vtable = 0;

Dynamic Worker_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Worker_obj > _hx_result = new Worker_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Worker_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x56d87870;
}

void Worker_obj::loop(){
            	HX_STACKFRAME(&_hx_pos_efbac7832e7a6d11_105_loop)
HXDLIN( 105)		try {
            			HX_STACK_CATCHABLE( ::sys::thread::_FixedThreadPool::ShutdownException, 0);
            			HX_STACK_CATCHABLE( ::Dynamic, 1);
HXLINE( 106)			while(true){
HXLINE( 107)				 ::Dynamic task = this->queue->pop(true);
HXLINE( 108)				task();
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::sys::thread::_FixedThreadPool::ShutdownException >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::sys::thread::_FixedThreadPool::ShutdownException _ = _hx_e;
            			}
            			else if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 111)				 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE( 112)				this->thread = ::sys::thread::_Thread::HaxeThread_obj::create(this->loop_dyn(),false);
HXLINE( 113)				HX_STACK_DO_THROW(e);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Worker_obj,loop,(void))


::hx::ObjectPtr< Worker_obj > Worker_obj::__new( ::sys::thread::Deque queue) {
	::hx::ObjectPtr< Worker_obj > __this = new Worker_obj();
	__this->__construct(queue);
	return __this;
}

::hx::ObjectPtr< Worker_obj > Worker_obj::__alloc(::hx::Ctx *_hx_ctx, ::sys::thread::Deque queue) {
	Worker_obj *__this = (Worker_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Worker_obj), true, "sys.thread._FixedThreadPool.Worker"));
	*(void **)__this = Worker_obj::_hx_vtable;
	__this->__construct(queue);
	return __this;
}

Worker_obj::Worker_obj()
{
}

void Worker_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Worker);
	HX_MARK_MEMBER_NAME(thread,"thread");
	HX_MARK_MEMBER_NAME(queue,"queue");
	HX_MARK_END_CLASS();
}

void Worker_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(thread,"thread");
	HX_VISIT_MEMBER_NAME(queue,"queue");
}

::hx::Val Worker_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"loop") ) { return ::hx::Val( loop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"queue") ) { return ::hx::Val( queue ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"thread") ) { return ::hx::Val( thread ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Worker_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"queue") ) { queue=inValue.Cast<  ::sys::thread::Deque >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"thread") ) { thread=inValue.Cast<  ::sys::thread::_Thread::HaxeThread >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Worker_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("thread",ca,7a,b9,8e));
	outFields->push(HX_("queue",91,8d,ea,5d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Worker_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::sys::thread::_Thread::HaxeThread */ ,(int)offsetof(Worker_obj,thread),HX_("thread",ca,7a,b9,8e)},
	{::hx::fsObject /*  ::sys::thread::Deque */ ,(int)offsetof(Worker_obj,queue),HX_("queue",91,8d,ea,5d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Worker_obj_sStaticStorageInfo = 0;
#endif

static ::String Worker_obj_sMemberFields[] = {
	HX_("thread",ca,7a,b9,8e),
	HX_("queue",91,8d,ea,5d),
	HX_("loop",64,a6,b7,47),
	::String(null()) };

::hx::Class Worker_obj::__mClass;

void Worker_obj::__register()
{
	Worker_obj _hx_dummy;
	Worker_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("sys.thread._FixedThreadPool.Worker",8e,e1,ae,e1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Worker_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Worker_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Worker_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Worker_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace sys
} // end namespace thread
} // end namespace _FixedThreadPool
