// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_sys_thread__FixedThreadPool_ShutdownException
#include <sys/thread/_FixedThreadPool/ShutdownException.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_651df8754180d453_93_new,"sys.thread._FixedThreadPool.ShutdownException","new",0x9e4c333b,"sys.thread._FixedThreadPool.ShutdownException.new","C:\\HaxeToolkit\\haxe\\std/sys/thread/FixedThreadPool.hx",93,0x9b561eee)
namespace sys{
namespace thread{
namespace _FixedThreadPool{

void ShutdownException_obj::__construct(::String message, ::haxe::Exception previous, ::Dynamic native){
            	HX_STACKFRAME(&_hx_pos_651df8754180d453_93_new)
HXDLIN(  93)		{
HXDLIN(  93)			super::__construct(message,previous,native);
            		}
HXDLIN(  93)		{
HXDLIN(  93)			this->_hx___skipStack++;
            		}
            	}

Dynamic ShutdownException_obj::__CreateEmpty() { return new ShutdownException_obj; }

void *ShutdownException_obj::_hx_vtable = 0;

Dynamic ShutdownException_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ShutdownException_obj > _hx_result = new ShutdownException_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ShutdownException_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x677ddc49) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x677ddc49;
	} else {
		return inClassId==(int)0x74de5cef;
	}
}


::hx::ObjectPtr< ShutdownException_obj > ShutdownException_obj::__new(::String message, ::haxe::Exception previous, ::Dynamic native) {
	::hx::ObjectPtr< ShutdownException_obj > __this = new ShutdownException_obj();
	__this->__construct(message,previous,native);
	return __this;
}

::hx::ObjectPtr< ShutdownException_obj > ShutdownException_obj::__alloc(::hx::Ctx *_hx_ctx,::String message, ::haxe::Exception previous, ::Dynamic native) {
	ShutdownException_obj *__this = (ShutdownException_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ShutdownException_obj), true, "sys.thread._FixedThreadPool.ShutdownException"));
	*(void **)__this = ShutdownException_obj::_hx_vtable;
	__this->__construct(message,previous,native);
	return __this;
}

ShutdownException_obj::ShutdownException_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ShutdownException_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ShutdownException_obj_sStaticStorageInfo = 0;
#endif

::hx::Class ShutdownException_obj::__mClass;

void ShutdownException_obj::__register()
{
	ShutdownException_obj _hx_dummy;
	ShutdownException_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("sys.thread._FixedThreadPool.ShutdownException",c9,79,55,79);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ShutdownException_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ShutdownException_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ShutdownException_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace sys
} // end namespace thread
} // end namespace _FixedThreadPool
