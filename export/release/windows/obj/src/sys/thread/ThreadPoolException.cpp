// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_sys_thread_ThreadPoolException
#include <sys/thread/ThreadPoolException.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a775eff7ecb8cf70_5_new,"sys.thread.ThreadPoolException","new",0x173dc298,"sys.thread.ThreadPoolException.new","C:\\HaxeToolkit\\haxe\\std/sys/thread/ThreadPoolException.hx",5,0x07e91fff)
namespace sys{
namespace thread{

void ThreadPoolException_obj::__construct(::String message, ::haxe::Exception previous, ::Dynamic native){
            	HX_STACKFRAME(&_hx_pos_a775eff7ecb8cf70_5_new)
HXDLIN(   5)		{
HXDLIN(   5)			super::__construct(message,previous,native);
            		}
HXDLIN(   5)		{
HXDLIN(   5)			this->_hx___skipStack++;
            		}
            	}

Dynamic ThreadPoolException_obj::__CreateEmpty() { return new ThreadPoolException_obj; }

void *ThreadPoolException_obj::_hx_vtable = 0;

Dynamic ThreadPoolException_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ThreadPoolException_obj > _hx_result = new ThreadPoolException_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ThreadPoolException_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x15d515be) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x15d515be;
	} else {
		return inClassId==(int)0x677ddc49;
	}
}


::hx::ObjectPtr< ThreadPoolException_obj > ThreadPoolException_obj::__new(::String message, ::haxe::Exception previous, ::Dynamic native) {
	::hx::ObjectPtr< ThreadPoolException_obj > __this = new ThreadPoolException_obj();
	__this->__construct(message,previous,native);
	return __this;
}

::hx::ObjectPtr< ThreadPoolException_obj > ThreadPoolException_obj::__alloc(::hx::Ctx *_hx_ctx,::String message, ::haxe::Exception previous, ::Dynamic native) {
	ThreadPoolException_obj *__this = (ThreadPoolException_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ThreadPoolException_obj), true, "sys.thread.ThreadPoolException"));
	*(void **)__this = ThreadPoolException_obj::_hx_vtable;
	__this->__construct(message,previous,native);
	return __this;
}

ThreadPoolException_obj::ThreadPoolException_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ThreadPoolException_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ThreadPoolException_obj_sStaticStorageInfo = 0;
#endif

::hx::Class ThreadPoolException_obj::__mClass;

void ThreadPoolException_obj::__register()
{
	ThreadPoolException_obj _hx_dummy;
	ThreadPoolException_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("sys.thread.ThreadPoolException",a6,d6,da,2e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ThreadPoolException_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ThreadPoolException_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ThreadPoolException_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace sys
} // end namespace thread
