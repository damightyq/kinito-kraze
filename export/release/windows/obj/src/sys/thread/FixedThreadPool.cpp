// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_sys_thread_Deque
#include <sys/thread/Deque.h>
#endif
#ifndef INCLUDED_sys_thread_FixedThreadPool
#include <sys/thread/FixedThreadPool.h>
#endif
#ifndef INCLUDED_sys_thread_IThreadPool
#include <sys/thread/IThreadPool.h>
#endif
#ifndef INCLUDED_sys_thread_ThreadPoolException
#include <sys/thread/ThreadPoolException.h>
#endif
#ifndef INCLUDED_sys_thread__FixedThreadPool_ShutdownException
#include <sys/thread/_FixedThreadPool/ShutdownException.h>
#endif
#ifndef INCLUDED_sys_thread__FixedThreadPool_Worker
#include <sys/thread/_FixedThreadPool/Worker.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a7ee3660e7e9931a_36_new,"sys.thread.FixedThreadPool","new",0xb5d48549,"sys.thread.FixedThreadPool.new","C:\\HaxeToolkit\\haxe\\std/sys/thread/FixedThreadPool.hx",36,0x9b561eee)
HX_LOCAL_STACK_FRAME(_hx_pos_a7ee3660e7e9931a_65_run,"sys.thread.FixedThreadPool","run",0xb5d79c34,"sys.thread.FixedThreadPool.run","C:\\HaxeToolkit\\haxe\\std/sys/thread/FixedThreadPool.hx",65,0x9b561eee)
HX_LOCAL_STACK_FRAME(_hx_pos_a7ee3660e7e9931a_80_shutdown,"sys.thread.FixedThreadPool","shutdown",0x2ba5db0d,"sys.thread.FixedThreadPool.shutdown","C:\\HaxeToolkit\\haxe\\std/sys/thread/FixedThreadPool.hx",80,0x9b561eee)
HX_LOCAL_STACK_FRAME(_hx_pos_a7ee3660e7e9931a_89_shutdownTask,"sys.thread.FixedThreadPool","shutdownTask",0xd734d0f2,"sys.thread.FixedThreadPool.shutdownTask","C:\\HaxeToolkit\\haxe\\std/sys/thread/FixedThreadPool.hx",89,0x9b561eee)
namespace sys{
namespace thread{

void FixedThreadPool_obj::__construct(int threadsCount){
            	HX_GC_STACKFRAME(&_hx_pos_a7ee3660e7e9931a_36_new)
HXLINE(  48)		this->queue =  ::sys::thread::Deque_obj::__alloc( HX_CTX );
HXLINE(  43)		this->_isShutdown = false;
HXLINE(  54)		if ((threadsCount < 1)) {
HXLINE(  55)			HX_STACK_DO_THROW( ::sys::thread::ThreadPoolException_obj::__alloc( HX_CTX ,HX_("FixedThreadPool needs threadsCount to be at least 1.",38,9d,3d,48),null(),null()));
            		}
HXLINE(  56)		this->threadsCount = threadsCount;
HXLINE(  57)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  57)		{
HXLINE(  57)			int _g1 = 0;
HXDLIN(  57)			int _g2 = threadsCount;
HXDLIN(  57)			while((_g1 < _g2)){
HXLINE(  57)				_g1 = (_g1 + 1);
HXDLIN(  57)				int i = (_g1 - 1);
HXDLIN(  57)				_g->push( ::sys::thread::_FixedThreadPool::Worker_obj::__alloc( HX_CTX ,this->queue));
            			}
            		}
HXDLIN(  57)		this->pool = _g;
            	}

Dynamic FixedThreadPool_obj::__CreateEmpty() { return new FixedThreadPool_obj; }

void *FixedThreadPool_obj::_hx_vtable = 0;

Dynamic FixedThreadPool_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FixedThreadPool_obj > _hx_result = new FixedThreadPool_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FixedThreadPool_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x654fb1c3;
}

static ::sys::thread::IThreadPool_obj _hx_sys_thread_FixedThreadPool__hx_sys_thread_IThreadPool= {
};

void *FixedThreadPool_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xf18bc1b8: return &_hx_sys_thread_FixedThreadPool__hx_sys_thread_IThreadPool;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void FixedThreadPool_obj::run( ::Dynamic task){
            	HX_GC_STACKFRAME(&_hx_pos_a7ee3660e7e9931a_65_run)
HXLINE(  66)		if (this->_isShutdown) {
HXLINE(  67)			HX_STACK_DO_THROW( ::sys::thread::ThreadPoolException_obj::__alloc( HX_CTX ,HX_("Task is rejected. Thread pool is shut down.",3d,37,88,9f),null(),null()));
            		}
HXLINE(  68)		if (::hx::IsNull( task )) {
HXLINE(  69)			HX_STACK_DO_THROW( ::sys::thread::ThreadPoolException_obj::__alloc( HX_CTX ,HX_("Task to run must not be null.",6f,48,35,6b),null(),null()));
            		}
HXLINE(  70)		this->queue->add(task);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FixedThreadPool_obj,run,(void))

void FixedThreadPool_obj::shutdown(){
            	HX_STACKFRAME(&_hx_pos_a7ee3660e7e9931a_80_shutdown)
HXLINE(  81)		if (this->_isShutdown) {
HXLINE(  81)			return;
            		}
HXLINE(  82)		this->_isShutdown = true;
HXLINE(  83)		{
HXLINE(  83)			int _g = 0;
HXDLIN(  83)			::Array< ::Dynamic> _g1 = this->pool;
HXDLIN(  83)			while((_g < _g1->length)){
HXLINE(  83)				 ::sys::thread::_FixedThreadPool::Worker _ = _g1->__get(_g).StaticCast<  ::sys::thread::_FixedThreadPool::Worker >();
HXDLIN(  83)				_g = (_g + 1);
HXLINE(  84)				this->queue->add(::sys::thread::FixedThreadPool_obj::shutdownTask_dyn());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FixedThreadPool_obj,shutdown,(void))

void FixedThreadPool_obj::shutdownTask(){
            	HX_GC_STACKFRAME(&_hx_pos_a7ee3660e7e9931a_89_shutdownTask)
HXDLIN(  89)		HX_STACK_DO_THROW( ::sys::thread::_FixedThreadPool::ShutdownException_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),null(),null()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FixedThreadPool_obj,shutdownTask,(void))


::hx::ObjectPtr< FixedThreadPool_obj > FixedThreadPool_obj::__new(int threadsCount) {
	::hx::ObjectPtr< FixedThreadPool_obj > __this = new FixedThreadPool_obj();
	__this->__construct(threadsCount);
	return __this;
}

::hx::ObjectPtr< FixedThreadPool_obj > FixedThreadPool_obj::__alloc(::hx::Ctx *_hx_ctx,int threadsCount) {
	FixedThreadPool_obj *__this = (FixedThreadPool_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FixedThreadPool_obj), true, "sys.thread.FixedThreadPool"));
	*(void **)__this = FixedThreadPool_obj::_hx_vtable;
	__this->__construct(threadsCount);
	return __this;
}

FixedThreadPool_obj::FixedThreadPool_obj()
{
}

void FixedThreadPool_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FixedThreadPool);
	HX_MARK_MEMBER_NAME(threadsCount,"threadsCount");
	HX_MARK_MEMBER_NAME(_isShutdown,"_isShutdown");
	HX_MARK_MEMBER_NAME(pool,"pool");
	HX_MARK_MEMBER_NAME(queue,"queue");
	HX_MARK_END_CLASS();
}

void FixedThreadPool_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(threadsCount,"threadsCount");
	HX_VISIT_MEMBER_NAME(_isShutdown,"_isShutdown");
	HX_VISIT_MEMBER_NAME(pool,"pool");
	HX_VISIT_MEMBER_NAME(queue,"queue");
}

::hx::Val FixedThreadPool_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return ::hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"pool") ) { return ::hx::Val( pool ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"queue") ) { return ::hx::Val( queue ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shutdown") ) { return ::hx::Val( shutdown_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_isShutdown") ) { return ::hx::Val( _isShutdown ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"threadsCount") ) { return ::hx::Val( threadsCount ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FixedThreadPool_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"shutdownTask") ) { outValue = shutdownTask_dyn(); return true; }
	}
	return false;
}

::hx::Val FixedThreadPool_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"pool") ) { pool=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"queue") ) { queue=inValue.Cast<  ::sys::thread::Deque >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_isShutdown") ) { _isShutdown=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"threadsCount") ) { threadsCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FixedThreadPool_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("threadsCount",a6,e1,9b,c2));
	outFields->push(HX_("_isShutdown",bf,db,44,b8));
	outFields->push(HX_("pool",dc,80,5c,4a));
	outFields->push(HX_("queue",91,8d,ea,5d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FixedThreadPool_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(FixedThreadPool_obj,threadsCount),HX_("threadsCount",a6,e1,9b,c2)},
	{::hx::fsBool,(int)offsetof(FixedThreadPool_obj,_isShutdown),HX_("_isShutdown",bf,db,44,b8)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FixedThreadPool_obj,pool),HX_("pool",dc,80,5c,4a)},
	{::hx::fsObject /*  ::sys::thread::Deque */ ,(int)offsetof(FixedThreadPool_obj,queue),HX_("queue",91,8d,ea,5d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FixedThreadPool_obj_sStaticStorageInfo = 0;
#endif

static ::String FixedThreadPool_obj_sMemberFields[] = {
	HX_("threadsCount",a6,e1,9b,c2),
	HX_("_isShutdown",bf,db,44,b8),
	HX_("pool",dc,80,5c,4a),
	HX_("queue",91,8d,ea,5d),
	HX_("run",4b,e7,56,00),
	HX_("shutdown",96,fc,0b,6b),
	::String(null()) };

::hx::Class FixedThreadPool_obj::__mClass;

static ::String FixedThreadPool_obj_sStaticFields[] = {
	HX_("shutdownTask",fb,ea,a4,dc),
	::String(null())
};

void FixedThreadPool_obj::__register()
{
	FixedThreadPool_obj _hx_dummy;
	FixedThreadPool_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("sys.thread.FixedThreadPool",d7,2c,6c,84);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FixedThreadPool_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FixedThreadPool_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FixedThreadPool_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FixedThreadPool_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FixedThreadPool_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FixedThreadPool_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace sys
} // end namespace thread
