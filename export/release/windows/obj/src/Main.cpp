// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_backend_Achievements
#include <backend/Achievements.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_Highscore
#include <backend/Highscore.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_Native
#include <backend/Native.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_crowplexus_iris_ErrorSeverity
#include <crowplexus/iris/ErrorSeverity.h>
#endif
#ifndef INCLUDED_crowplexus_iris_Iris
#include <crowplexus/iris/Iris.h>
#endif
#ifndef INCLUDED_debug_FPSCounter
#include <debug/FPSCounter.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal2
#include <flixel/util/_FlxSignal/FlxSignal2.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_InitialState_Impl_
#include <flixel/util/typeLimit/_NextState/InitialState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe__CallStack_CallStack_Impl_
#include <haxe/_CallStack/CallStack_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_LoaderInfo
#include <openfl/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display__StageAlign_StageAlign_Impl_
#include <openfl/display/_StageAlign/StageAlign_Impl_.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_events_UncaughtErrorEvent
#include <openfl/events/UncaughtErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_UncaughtErrorEvents
#include <openfl/events/UncaughtErrorEvents.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_psychlua_CallbackHandler
#include <psychlua/CallbackHandler.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_states_TitleState
#include <states/TitleState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_97_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",97,0x087e5c05)
HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_115_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",115,0x087e5c05)
HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_133_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",133,0x087e5c05)
HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_192_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",192,0x087e5c05)
HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_71_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",71,0x087e5c05)
static const int _hx_array_data_332f6459_9[] = {
	(int)9,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_216_onCrash,"Main","onCrash",0x46bec533,"Main.onCrash","Main.hx",216,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_67_main,"Main","main",0xed0e206e,"Main.main","Main.hx",67,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_206_resetSpriteCache,"Main","resetSpriteCache",0xd7fbf223,"Main.resetSpriteCache","Main.hx",206,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_52_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",52,0x087e5c05)

void Main_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		void _hx_run(::String x, ::Dynamic pos){
            			HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_97_new)
HXLINE(  98)			::crowplexus::iris::Iris_obj::logLevel(::crowplexus::iris::ErrorSeverity_obj::WARN_dyn(),x,pos);
HXLINE(  99)			 ::Dynamic newPos = pos;
HXLINE( 100)			if (::hx::IsNull( newPos->__Field(HX_("showLine",91,db,39,af),::hx::paccDynamic) )) {
HXLINE( 100)				newPos->__SetField(HX_("showLine",91,db,39,af),true,::hx::paccDynamic);
            			}
HXLINE( 101)			::String msgInfo;
HXDLIN( 101)			if (::hx::IsNotNull( newPos->__Field(HX_("funcName",af,7b,2e,fb),::hx::paccDynamic) )) {
HXLINE( 101)				msgInfo = ( (::String)(((HX_("(",28,00,00,00) + newPos->__Field(HX_("funcName",af,7b,2e,fb),::hx::paccDynamic)) + HX_(") - ",ea,2e,32,1b))) );
            			}
            			else {
HXLINE( 101)				msgInfo = HX_("",00,00,00,00);
            			}
HXDLIN( 101)			::String msgInfo1 = ( (::String)((msgInfo + ((HX_("",00,00,00,00) + newPos->__Field(HX_("fileName",e7,5a,43,62),::hx::paccDynamic)) + HX_(":",3a,00,00,00)))) );
HXLINE( 103)			if (::hx::IsEq( newPos->__Field(HX_("isLua",ee,83,50,c1),::hx::paccDynamic),true )) {
HXLINE( 104)				msgInfo1 = (msgInfo1 + HX_("HScript:",67,3c,65,10));
HXLINE( 105)				newPos->__SetField(HX_("showLine",91,db,39,af),false,::hx::paccDynamic);
            			}
HXLINE( 108)			if (::hx::IsEq( newPos->__Field(HX_("showLine",91,db,39,af),::hx::paccDynamic),true )) {
HXLINE( 109)				msgInfo1 = ( (::String)((msgInfo1 + ((HX_("",00,00,00,00) + newPos->__Field(HX_("lineNumber",dd,81,22,76),::hx::paccDynamic)) + HX_(":",3a,00,00,00)))) );
            			}
HXLINE( 111)			msgInfo1 = (msgInfo1 + (HX_(" ",20,00,00,00) + x));
HXLINE( 112)			if (::hx::IsNotNull( ::states::PlayState_obj::instance )) {
HXLINE( 113)				::states::PlayState_obj::instance->addTextToDebug((HX_("WARNING: ",e2,e7,94,f3) + msgInfo1),-256);
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            		void _hx_run(::String x, ::Dynamic pos){
            			HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_115_new)
HXLINE( 116)			::crowplexus::iris::Iris_obj::logLevel(::crowplexus::iris::ErrorSeverity_obj::ERROR_dyn(),x,pos);
HXLINE( 117)			 ::Dynamic newPos = pos;
HXLINE( 118)			if (::hx::IsNull( newPos->__Field(HX_("showLine",91,db,39,af),::hx::paccDynamic) )) {
HXLINE( 118)				newPos->__SetField(HX_("showLine",91,db,39,af),true,::hx::paccDynamic);
            			}
HXLINE( 119)			::String msgInfo;
HXDLIN( 119)			if (::hx::IsNotNull( newPos->__Field(HX_("funcName",af,7b,2e,fb),::hx::paccDynamic) )) {
HXLINE( 119)				msgInfo = ( (::String)(((HX_("(",28,00,00,00) + newPos->__Field(HX_("funcName",af,7b,2e,fb),::hx::paccDynamic)) + HX_(") - ",ea,2e,32,1b))) );
            			}
            			else {
HXLINE( 119)				msgInfo = HX_("",00,00,00,00);
            			}
HXDLIN( 119)			::String msgInfo1 = ( (::String)((msgInfo + ((HX_("",00,00,00,00) + newPos->__Field(HX_("fileName",e7,5a,43,62),::hx::paccDynamic)) + HX_(":",3a,00,00,00)))) );
HXLINE( 121)			if (::hx::IsEq( newPos->__Field(HX_("isLua",ee,83,50,c1),::hx::paccDynamic),true )) {
HXLINE( 122)				msgInfo1 = (msgInfo1 + HX_("HScript:",67,3c,65,10));
HXLINE( 123)				newPos->__SetField(HX_("showLine",91,db,39,af),false,::hx::paccDynamic);
            			}
HXLINE( 126)			if (::hx::IsEq( newPos->__Field(HX_("showLine",91,db,39,af),::hx::paccDynamic),true )) {
HXLINE( 127)				msgInfo1 = ( (::String)((msgInfo1 + ((HX_("",00,00,00,00) + newPos->__Field(HX_("lineNumber",dd,81,22,76),::hx::paccDynamic)) + HX_(":",3a,00,00,00)))) );
            			}
HXLINE( 129)			msgInfo1 = (msgInfo1 + (HX_(" ",20,00,00,00) + x));
HXLINE( 130)			if (::hx::IsNotNull( ::states::PlayState_obj::instance )) {
HXLINE( 131)				::states::PlayState_obj::instance->addTextToDebug((HX_("ERROR: ",4e,70,de,69) + msgInfo1),-65536);
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(2)
            		void _hx_run(::String x, ::Dynamic pos){
            			HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_133_new)
HXLINE( 134)			::crowplexus::iris::Iris_obj::logLevel(::crowplexus::iris::ErrorSeverity_obj::FATAL_dyn(),x,pos);
HXLINE( 135)			 ::Dynamic newPos = pos;
HXLINE( 136)			if (::hx::IsNull( newPos->__Field(HX_("showLine",91,db,39,af),::hx::paccDynamic) )) {
HXLINE( 136)				newPos->__SetField(HX_("showLine",91,db,39,af),true,::hx::paccDynamic);
            			}
HXLINE( 137)			::String msgInfo;
HXDLIN( 137)			if (::hx::IsNotNull( newPos->__Field(HX_("funcName",af,7b,2e,fb),::hx::paccDynamic) )) {
HXLINE( 137)				msgInfo = ( (::String)(((HX_("(",28,00,00,00) + newPos->__Field(HX_("funcName",af,7b,2e,fb),::hx::paccDynamic)) + HX_(") - ",ea,2e,32,1b))) );
            			}
            			else {
HXLINE( 137)				msgInfo = HX_("",00,00,00,00);
            			}
HXDLIN( 137)			::String msgInfo1 = ( (::String)((msgInfo + ((HX_("",00,00,00,00) + newPos->__Field(HX_("fileName",e7,5a,43,62),::hx::paccDynamic)) + HX_(":",3a,00,00,00)))) );
HXLINE( 139)			if (::hx::IsEq( newPos->__Field(HX_("isLua",ee,83,50,c1),::hx::paccDynamic),true )) {
HXLINE( 140)				msgInfo1 = (msgInfo1 + HX_("HScript:",67,3c,65,10));
HXLINE( 141)				newPos->__SetField(HX_("showLine",91,db,39,af),false,::hx::paccDynamic);
            			}
HXLINE( 144)			if (::hx::IsEq( newPos->__Field(HX_("showLine",91,db,39,af),::hx::paccDynamic),true )) {
HXLINE( 145)				msgInfo1 = ( (::String)((msgInfo1 + ((HX_("",00,00,00,00) + newPos->__Field(HX_("lineNumber",dd,81,22,76),::hx::paccDynamic)) + HX_(":",3a,00,00,00)))) );
            			}
HXLINE( 147)			msgInfo1 = (msgInfo1 + (HX_(" ",20,00,00,00) + x));
HXLINE( 148)			if (::hx::IsNotNull( ::states::PlayState_obj::instance )) {
HXLINE( 149)				::states::PlayState_obj::instance->addTextToDebug((HX_("FATAL: ",8a,63,ea,e4) + msgInfo1),-4521984);
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(2)
            		void _hx_run(int w,int h){
            			HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_192_new)
HXLINE( 193)			if (::hx::IsNotNull( ::flixel::FlxG_obj::cameras )) {
HXLINE( 194)				int _g = 0;
HXDLIN( 194)				::Array< ::Dynamic> _g1 = ::flixel::FlxG_obj::cameras->list;
HXDLIN( 194)				while((_g < _g1->length)){
HXLINE( 194)					 ::flixel::FlxCamera cam = _g1->__get(_g).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 194)					_g = (_g + 1);
HXLINE( 195)					bool _hx_tmp;
HXDLIN( 195)					if (::hx::IsNotNull( cam )) {
HXLINE( 195)						_hx_tmp = ::hx::IsNotNull( cam->filters );
            					}
            					else {
HXLINE( 195)						_hx_tmp = false;
            					}
HXDLIN( 195)					if (_hx_tmp) {
HXLINE( 196)						::Main_obj::resetSpriteCache(cam->flashSprite);
            					}
            				}
            			}
HXLINE( 200)			if (::hx::IsNotNull( ::flixel::FlxG_obj::game )) {
HXLINE( 201)				::Main_obj::resetSpriteCache(::flixel::FlxG_obj::game);
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_71_new)
HXLINE(  72)		super::__construct();
HXLINE(  75)		::backend::Native_obj::fixScaling();
HXLINE(  89)		{
HXLINE(  89)			::backend::Mods_obj::globalMods = ::Array_obj< ::String >::__new(0);
HXDLIN(  89)			{
HXLINE(  89)				int _g = 0;
HXDLIN(  89)				if (!(::backend::Mods_obj::updatedOnState)) {
HXLINE(  89)					::backend::Mods_obj::updateModList();
            				}
HXDLIN(  89)				::Array< ::String > list_enabled = ::Array_obj< ::String >::__new(0);
HXDLIN(  89)				::Array< ::String > list_disabled = ::Array_obj< ::String >::__new(0);
HXDLIN(  89)				::Array< ::String > list_all = ::Array_obj< ::String >::__new(0);
HXDLIN(  89)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  89)					int _g1 = 0;
HXDLIN(  89)					::String daList = null();
HXDLIN(  89)					if (::sys::FileSystem_obj::exists(HX_("modsList.txt",f1,ca,08,ac))) {
HXLINE(  48)						daList = ::sys::io::File_obj::getContent(HX_("modsList.txt",f1,ca,08,ac));
            					}
HXLINE(  89)					::Array< ::String > _g2;
HXDLIN(  89)					if (::hx::IsNotNull( daList )) {
HXLINE(  89)						::Array< ::String > daList1 = ::Array_obj< ::String >::__new(0);
HXLINE(  69)						daList1 = ::StringTools_obj::trim(daList).split(HX_("\n",0a,00,00,00));
HXLINE(  89)						{
HXLINE(  89)							int _g3 = 0;
HXDLIN(  89)							int _g4 = daList1->length;
HXDLIN(  89)							while((_g3 < _g4)){
HXLINE(  89)								_g3 = (_g3 + 1);
HXDLIN(  89)								int i = (_g3 - 1);
HXDLIN(  89)								daList1[i] = ::StringTools_obj::trim(daList1->__get(i));
            							}
            						}
HXDLIN(  89)						_g2 = daList1;
            					}
            					else {
HXLINE(  89)						_g2 = ::Array_obj< ::String >::__new(0);
            					}
HXDLIN(  89)					while((_g1 < _g2->length)){
HXLINE(  89)						::String mod = _g2->__get(_g1);
HXDLIN(  89)						_g1 = (_g1 + 1);
HXDLIN(  89)						if ((::StringTools_obj::trim(mod).length < 1)) {
HXLINE(  89)							continue;
            						}
HXDLIN(  89)						::Array< ::String > dat = mod.split(HX_("|",7c,00,00,00));
HXDLIN(  89)						list_all->push(dat->__get(0));
HXDLIN(  89)						if ((dat->__get(1) == HX_("1",31,00,00,00))) {
HXLINE(  89)							list_enabled->push(dat->__get(0));
            						}
            						else {
HXLINE(  89)							list_disabled->push(dat->__get(0));
            						}
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g5 = _hx_e;
HXLINE( 175)						 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g5);
HXLINE(  89)						::haxe::Log_obj::trace(e,::hx::SourceInfo(HX_("source/backend/Mods.hx",1e,5b,8b,ff),176,HX_("backend.Mods",2b,aa,ba,a1),HX_("parseList",31,6e,59,cf)));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXDLIN(  89)				::Array< ::String > _g6 = list_enabled;
HXDLIN(  89)				while((_g < _g6->length)){
HXLINE(  89)					::String mod1 = _g6->__get(_g);
HXDLIN(  89)					_g = (_g + 1);
HXDLIN(  89)					 ::Dynamic pack = ::backend::Mods_obj::getPack(mod1);
HXDLIN(  89)					bool _hx_tmp;
HXDLIN(  89)					if (::hx::IsNotNull( pack )) {
HXLINE(  89)						_hx_tmp = ( (bool)(pack->__Field(HX_("runsGlobally",98,2d,b5,06),::hx::paccDynamic)) );
            					}
            					else {
HXLINE(  89)						_hx_tmp = false;
            					}
HXDLIN(  89)					if (_hx_tmp) {
HXLINE(  89)						::backend::Mods_obj::globalMods->push(mod1);
            					}
            				}
            			}
            		}
HXLINE(  91)		::backend::Mods_obj::loadTopMod();
HXLINE(  93)		 ::flixel::util::FlxSave _hx_tmp1 = ::flixel::FlxG_obj::save;
HXDLIN(  93)		::String company = ::openfl::Lib_obj::get_current()->stage->application->meta->get_string(HX_("company",3d,15,69,83));
HXDLIN(  93)		_hx_tmp1->bind(HX_("funkin",31,b2,4f,6f),(((HX_("",00,00,00,00) + company) + HX_("/",2f,00,00,00)) + ::flixel::util::FlxSave_obj::validate(::openfl::Lib_obj::get_current()->stage->application->meta->get_string(HX_("file",7c,ce,bb,43)))));
HXLINE(  94)		::backend::Highscore_obj::load();
HXLINE(  97)		::crowplexus::iris::Iris_obj::warn =  ::Dynamic(new _hx_Closure_0());
HXLINE( 115)		::crowplexus::iris::Iris_obj::error =  ::Dynamic(new _hx_Closure_1());
HXLINE( 133)		::crowplexus::iris::Iris_obj::fatal =  ::Dynamic(new _hx_Closure_2());
HXLINE( 153)		linc::callbacks::set_callbacks_function(::cpp::Function< int ( cpp::Reference<lua_State>,::String)>(::hx::AnyCast(&::psychlua::CallbackHandler_obj::call )));
HXLINE( 154)		::backend::Controls_obj::instance =  ::backend::Controls_obj::__alloc( HX_CTX );
HXLINE( 155)		::backend::ClientPrefs_obj::loadDefaultKeys();
HXLINE( 156)		::backend::Achievements_obj::load();
HXLINE( 157)		int _hx_tmp2 = ( (int)(::Main_obj::game->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic)) );
HXDLIN( 157)		int _hx_tmp3 = ( (int)(::Main_obj::game->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic)) );
HXDLIN( 157)		this->addChild( ::flixel::FlxGame_obj::__alloc( HX_CTX ,_hx_tmp2,_hx_tmp3,::flixel::util::typeLimit::_NextState::InitialState_Impl__obj::fromType(::Main_obj::game->__Field(HX_("initialState",ed,76,1b,48),::hx::paccDynamic)),::Main_obj::game->__Field(HX_("framerate",8d,e5,4b,4e),::hx::paccDynamic),::Main_obj::game->__Field(HX_("framerate",8d,e5,4b,4e),::hx::paccDynamic),::Main_obj::game->__Field(HX_("skipSplash",46,75,9c,27),::hx::paccDynamic),::Main_obj::game->__Field(HX_("startFullscreen",3d,c1,ee,2d),::hx::paccDynamic)));
HXLINE( 160)		::Main_obj::fpsVar =  ::debug::FPSCounter_obj::__alloc( HX_CTX ,10,3,16777215);
HXLINE( 161)		this->addChild(::Main_obj::fpsVar);
HXLINE( 162)		::openfl::Lib_obj::get_current()->stage->align = ::openfl::display::_StageAlign::StageAlign_Impl__obj::fromString(HX_("tl",78,65,00,00));
HXLINE( 163)		::openfl::Lib_obj::get_current()->stage->set_scaleMode(2);
HXLINE( 164)		if (::hx::IsNotNull( ::Main_obj::fpsVar )) {
HXLINE( 165)			::Main_obj::fpsVar->set_visible(::backend::ClientPrefs_obj::data->showFPS);
            		}
HXLINE( 179)		::flixel::FlxG_obj::fixedTimestep = false;
HXLINE( 180)		::flixel::FlxG_obj::game->focusLostFramerate = 60;
HXLINE( 181)		::flixel::FlxG_obj::keys->preventDefaultKeys = ::Array_obj< int >::fromData( _hx_array_data_332f6459_9,1);
HXLINE( 184)		::openfl::Lib_obj::get_current()->get_loaderInfo()->uncaughtErrorEvents->addEventListener(HX_("uncaughtError",f3,98,8b,8b),this->onCrash_dyn(),null(),null(),null());
HXLINE( 188)		::backend::DiscordClient_obj::prepare();
HXLINE( 192)		::flixel::FlxG_obj::signals->gameResized->add( ::Dynamic(new _hx_Closure_3()));
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		if (inClassId<=(int)0x07825a7d) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x07825a7d;
			}
		} else {
			return inClassId==(int)0x0c89e854;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void Main_obj::onCrash( ::openfl::events::UncaughtErrorEvent e){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_216_onCrash)
HXLINE( 217)		::String errMsg = HX_("",00,00,00,00);
HXLINE( 219)		::Array< ::Dynamic> callStack = ::haxe::_CallStack::CallStack_Impl__obj::exceptionStack(true);
HXLINE( 220)		::String dateNow = ::Date_obj::now()->toString();
HXLINE( 222)		dateNow = ::StringTools_obj::replace(dateNow,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00));
HXLINE( 223)		dateNow = ::StringTools_obj::replace(dateNow,HX_(":",3a,00,00,00),HX_("'",27,00,00,00));
HXLINE( 218)		::String path = (((HX_("./crash/",69,79,f9,62) + HX_("PsychEngine_",82,ba,54,e7)) + dateNow) + HX_(".txt",02,3f,c0,1e));
HXLINE( 227)		{
HXLINE( 227)			int _g = 0;
HXDLIN( 227)			while((_g < callStack->length)){
HXLINE( 227)				 ::haxe::StackItem stackItem = callStack->__get(_g).StaticCast<  ::haxe::StackItem >();
HXDLIN( 227)				_g = (_g + 1);
HXLINE( 229)				if ((stackItem->_hx_getIndex() == 2)) {
HXLINE( 231)					 ::haxe::StackItem s = stackItem->_hx_getObject(0).StaticCast<  ::haxe::StackItem >();
HXDLIN( 231)					::String file = stackItem->_hx_getString(1);
HXDLIN( 231)					int line = stackItem->_hx_getInt(2);
HXDLIN( 231)					 ::Dynamic column = stackItem->_hx_getObject(3);
HXLINE( 232)					errMsg = (errMsg + (((file + HX_(" (line ",a4,24,f7,a5)) + line) + HX_(")\n",c1,23,00,00)));
            				}
            				else {
HXLINE( 234)					::Sys_obj::println(stackItem);
            				}
            			}
            		}
HXLINE( 238)		errMsg = (errMsg + (HX_("\nUncaught Error: ",ed,bf,e1,72) + ::Std_obj::string(e->error)));
HXLINE( 244)		errMsg = (errMsg + HX_("\n\n> Crash Handler written by: sqirra-rng",0b,0d,70,2d));
HXLINE( 246)		if (!(::sys::FileSystem_obj::exists(HX_("./crash/",69,79,f9,62)))) {
HXLINE( 247)			::sys::FileSystem_obj::createDirectory(HX_("./crash/",69,79,f9,62));
            		}
HXLINE( 249)		::sys::io::File_obj::saveContent(path,(errMsg + HX_("\n",0a,00,00,00)));
HXLINE( 251)		::Sys_obj::println(errMsg);
HXLINE( 252)		::Sys_obj::println((HX_("Crash dump saved in ",cf,9c,69,5d) + ::haxe::io::Path_obj::normalize(path)));
HXLINE( 254)		::lime::app::Application_obj::current->_hx___window->alert(errMsg,HX_("Error!",79,f7,fc,85));
HXLINE( 256)		::backend::DiscordClient_obj::shutdown();
HXLINE( 258)		::Sys_obj::exit(1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,onCrash,(void))

 ::Dynamic Main_obj::game;

 ::debug::FPSCounter Main_obj::fpsVar;

void Main_obj::main(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_67_main)
HXDLIN(  67)		 ::openfl::display::MovieClip _hx_tmp = ::openfl::Lib_obj::get_current();
HXDLIN(  67)		_hx_tmp->addChild( ::Main_obj::__alloc( HX_CTX ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))

void Main_obj::resetSpriteCache( ::openfl::display::Sprite sprite){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_206_resetSpriteCache)
HXLINE( 207)		sprite->_hx___cacheBitmap = null();
HXLINE( 208)		sprite->_hx___cacheBitmapData = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Main_obj,resetSpriteCache,(void))


::hx::ObjectPtr< Main_obj > Main_obj::__new() {
	::hx::ObjectPtr< Main_obj > __this = new Main_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Main_obj > Main_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Main_obj *__this = (Main_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Main_obj), true, "Main"));
	*(void **)__this = Main_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Main_obj::Main_obj()
{
}

::hx::Val Main_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"onCrash") ) { return ::hx::Val( onCrash_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"game") ) { outValue = ( game ); return true; }
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fpsVar") ) { outValue = ( fpsVar ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"resetSpriteCache") ) { outValue = resetSpriteCache_dyn(); return true; }
	}
	return false;
}

bool Main_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"game") ) { game=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fpsVar") ) { fpsVar=ioValue.Cast<  ::debug::FPSCounter >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Main_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Main_obj::game,HX_("game",f2,f3,5e,44)},
	{::hx::fsObject /*  ::debug::FPSCounter */ ,(void *) &Main_obj::fpsVar,HX_("fpsVar",7e,e6,8c,91)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Main_obj_sMemberFields[] = {
	HX_("onCrash",48,5e,8d,e2),
	::String(null()) };

static void Main_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Main_obj::game,"game");
	HX_MARK_MEMBER_NAME(Main_obj::fpsVar,"fpsVar");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Main_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Main_obj::game,"game");
	HX_VISIT_MEMBER_NAME(Main_obj::fpsVar,"fpsVar");
};

#endif

::hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_("game",f2,f3,5e,44),
	HX_("fpsVar",7e,e6,8c,91),
	HX_("main",39,38,56,48),
	HX_("resetSpriteCache",6e,0e,2e,9a),
	::String(null())
};

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &Main_obj::__SetStatic;
	__mClass->mMarkFunc = Main_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Main_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Main_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Main_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_52_boot)
HXDLIN(  52)		game =  ::Dynamic(::hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("width",06,b6,62,ca),1280)
            			->setFixed(1,HX_("height",e7,07,4c,02),720)
            			->setFixed(2,HX_("skipSplash",46,75,9c,27),true)
            			->setFixed(3,HX_("startFullscreen",3d,c1,ee,2d),false)
            			->setFixed(4,HX_("initialState",ed,76,1b,48),::hx::ClassOf< ::states::TitleState >())
            			->setFixed(5,HX_("framerate",8d,e5,4b,4e),60));
            	}
}

