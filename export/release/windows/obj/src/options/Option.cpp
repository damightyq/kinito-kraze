// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_objects_Alphabet
#include <objects/Alphabet.h>
#endif
#ifndef INCLUDED_options_Option
#include <options/Option.h>
#endif
#ifndef INCLUDED_options_OptionType
#include <options/OptionType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_416f94ddec2d073a_19_new,"options.Option","new",0x24090a17,"options.Option.new","options/Option.hx",19,0x1c4a7d18)
HX_LOCAL_STACK_FRAME(_hx_pos_416f94ddec2d073a_101_change,"options.Option","change",0x38fd0419,"options.Option.change","options/Option.hx",101,0x1c4a7d18)
HX_LOCAL_STACK_FRAME(_hx_pos_416f94ddec2d073a_106___default_getValue,"options.Option","__default_getValue",0xd25becc2,"options.Option.__default_getValue","options/Option.hx",106,0x1c4a7d18)
HX_LOCAL_STACK_FRAME(_hx_pos_416f94ddec2d073a_113___default_setValue,"options.Option","__default_setValue",0x80b94636,"options.Option.__default_setValue","options/Option.hx",113,0x1c4a7d18)
HX_LOCAL_STACK_FRAME(_hx_pos_416f94ddec2d073a_128_get_text,"options.Option","get_text",0x9bbfb71f,"options.Option.get_text","options/Option.hx",128,0x1c4a7d18)
HX_LOCAL_STACK_FRAME(_hx_pos_416f94ddec2d073a_131_set_text,"options.Option","set_text",0x4a1d1093,"options.Option.set_text","options/Option.hx",131,0x1c4a7d18)
namespace options{

void Option_obj::__construct(::String name,::String __o_description,::String variable, ::options::OptionType __o_type,::Array< ::String > options,::String translation){
            		::String description = __o_description;
            		if (::hx::IsNull(__o_description)) description = HX_("",00,00,00,00);
            		 ::options::OptionType type = __o_type;
            		if (::hx::IsNull(__o_type)) type = ::options::OptionType_obj::BOOL_dyn();
            	HX_GC_STACKFRAME(&_hx_pos_416f94ddec2d073a_19_new)
HXLINE( 126)		this->_translationKey = null();
HXLINE( 125)		this->_text = null();
HXLINE( 124)		this->_name = null();
HXLINE(  42)		this->keys = null();
HXLINE(  41)		this->defaultKeys = null();
HXLINE(  39)		this->name = HX_("Unknown",6a,4b,cc,ae);
HXLINE(  38)		this->description = HX_("",00,00,00,00);
HXLINE(  37)		this->displayFormat = HX_("%v",b1,20,00,00);
HXLINE(  35)		this->decimals = 1;
HXLINE(  34)		this->maxValue = null();
HXLINE(  33)		this->minValue = null();
HXLINE(  32)		this->changeValue = 1;
HXLINE(  31)		this->options = null();
HXLINE(  30)		this->curOption = 0;
HXLINE(  28)		this->defaultValue = null();
HXLINE(  27)		this->variable = null();
HXLINE(  26)		this->scrollSpeed = ((Float)50);
HXLINE(  24)		this->type = ::options::OptionType_obj::BOOL_dyn();
HXLINE(  23)		this->onChange = null();
HXLINE(  46)		this->_name = name;
HXLINE(  47)		::String _hx_tmp;
HXDLIN(  47)		if (::hx::IsNotNull( translation )) {
HXLINE(  47)			_hx_tmp = translation;
            		}
            		else {
HXLINE(  47)			_hx_tmp = this->_name;
            		}
HXDLIN(  47)		this->_translationKey = _hx_tmp;
HXLINE(  48)		::String key = (HX_("setting_",cf,7c,3d,8b) + this->_translationKey);
HXDLIN(  48)		::cpp::VirtualArray values = null();
HXDLIN(  48)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(  48)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN(  48)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(key,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN(  48)		if (::hx::IsNull( str )) {
HXLINE(  62)			str = name;
            		}
HXLINE(  48)		if (::hx::IsNull( str )) {
HXLINE(  68)			str = key;
            		}
HXLINE(  48)		if (::hx::IsNotNull( values )) {
HXLINE(  48)			int _g_current = 0;
HXDLIN(  48)			::cpp::VirtualArray _g_array = values;
HXDLIN(  48)			while((_g_current < _g_array->get_length())){
HXLINE(  48)				 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN(  48)				_g_current = (_g_current + 1);
HXDLIN(  48)				int _g_key = (_g_current - 1);
HXDLIN(  48)				int num = _g_key;
HXDLIN(  48)				 ::Dynamic value = _g_value;
HXLINE(  72)				str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            			}
            		}
HXLINE(  48)		this->name = str;
HXLINE(  49)		::String key1 = (HX_("description_",e3,d3,4a,da) + this->_translationKey);
HXDLIN(  49)		::cpp::VirtualArray values1 = null();
HXDLIN(  49)		::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN(  49)		 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN(  49)		::String str1 = ( ( ::haxe::ds::StringMap)(this2) )->get_string(::StringTools_obj::trim(hideChars1->replace(::StringTools_obj::replace(key1,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN(  49)		if (::hx::IsNull( str1 )) {
HXLINE(  62)			str1 = description;
            		}
HXLINE(  49)		if (::hx::IsNull( str1 )) {
HXLINE(  68)			str1 = key1;
            		}
HXLINE(  49)		if (::hx::IsNotNull( values1 )) {
HXLINE(  49)			int _g_current1 = 0;
HXDLIN(  49)			::cpp::VirtualArray _g_array1 = values1;
HXDLIN(  49)			while((_g_current1 < _g_array1->get_length())){
HXLINE(  49)				 ::Dynamic _g_value1 = _g_array1->__get(_g_current1);
HXDLIN(  49)				_g_current1 = (_g_current1 + 1);
HXDLIN(  49)				int _g_key1 = (_g_current1 - 1);
HXDLIN(  49)				int num1 = _g_key1;
HXDLIN(  49)				 ::Dynamic value1 = _g_value1;
HXLINE(  72)				str1 = ::StringTools_obj::replace(str1,((HX_("{",7b,00,00,00) + (num1 + 1)) + HX_("}",7d,00,00,00)),( (::String)(value1) ));
            			}
            		}
HXLINE(  49)		this->description = str1;
HXLINE(  50)		this->variable = variable;
HXLINE(  51)		this->type = type;
HXLINE(  52)		this->options = options;
HXLINE(  54)		if (::hx::IsPointerNotEq( this->type,::options::OptionType_obj::KEYBIND_dyn() )) {
HXLINE(  54)			this->defaultValue = ::Reflect_obj::getProperty(::backend::ClientPrefs_obj::defaultData,variable);
            		}
HXLINE(  55)		switch((int)(type->_hx_getIndex())){
            			case (int)0: {
HXLINE(  58)				if (::hx::IsNull( this->defaultValue )) {
HXLINE(  58)					this->defaultValue = false;
            				}
            			}
            			break;
            			case (int)1: case (int)2: {
HXLINE(  60)				if (::hx::IsNull( this->defaultValue )) {
HXLINE(  60)					this->defaultValue = 0;
            				}
            			}
            			break;
            			case (int)3: {
HXLINE(  62)				if (::hx::IsNull( this->defaultValue )) {
HXLINE(  62)					this->defaultValue = 1;
            				}
HXLINE(  63)				this->displayFormat = HX_("%v%",54,7a,1c,00);
HXLINE(  64)				this->changeValue = ((Float)0.01);
HXLINE(  65)				this->minValue = 0;
HXLINE(  66)				this->maxValue = 1;
HXLINE(  67)				this->scrollSpeed = ((Float)0.5);
HXLINE(  68)				this->decimals = 2;
            			}
            			break;
            			case (int)4: {
HXLINE(  70)				if ((options->length > 0)) {
HXLINE(  71)					this->defaultValue = options->__get(0);
            				}
HXLINE(  72)				if (::hx::IsNull( this->defaultValue )) {
HXLINE(  73)					this->defaultValue = HX_("",00,00,00,00);
            				}
            			}
            			break;
            			case (int)5: {
HXLINE(  76)				this->defaultValue = HX_("",00,00,00,00);
HXLINE(  77)				this->defaultKeys =  ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("gamepad",a1,e0,85,89),HX_("NONE",b8,da,ca,33))
            					->setFixed(1,HX_("keyboard",a7,bc,29,68),HX_("NONE",b8,da,ca,33)));
HXLINE(  78)				this->keys =  ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("gamepad",a1,e0,85,89),HX_("NONE",b8,da,ca,33))
            					->setFixed(1,HX_("keyboard",a7,bc,29,68),HX_("NONE",b8,da,ca,33)));
            			}
            			break;
            		}
HXLINE(  81)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  83)			if (::hx::IsNull( this->getValue() )) {
HXLINE(  84)				this->setValue(this->defaultValue);
            			}
HXLINE(  86)			if ((type->_hx_getIndex() == 4)) {
HXLINE(  89)				int num2 = options->indexOf(this->getValue(),null());
HXLINE(  90)				if ((num2 > -1)) {
HXLINE(  90)					this->curOption = num2;
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}

Dynamic Option_obj::__CreateEmpty() { return new Option_obj; }

void *Option_obj::_hx_vtable = 0;

Dynamic Option_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Option_obj > _hx_result = new Option_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool Option_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x280eb0f3;
}

void Option_obj::change(){
            	HX_STACKFRAME(&_hx_pos_416f94ddec2d073a_101_change)
HXDLIN( 101)		if (::hx::IsNotNull( this->onChange )) {
HXLINE( 102)			this->onChange();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Option_obj,change,(void))

HX_BEGIN_DEFAULT_FUNC(__default_getValue,Option_obj)
 ::Dynamic _hx_run(){
            	HX_STACKFRAME(&_hx_pos_416f94ddec2d073a_106___default_getValue)
HXLINE( 107)		 ::Dynamic value = ::Reflect_obj::getProperty(::backend::ClientPrefs_obj::data,( ( ::options::Option)(__this) )->variable);
HXLINE( 108)		if (::hx::IsPointerEq( ( ( ::options::Option)(__this) )->type,::options::OptionType_obj::KEYBIND_dyn() )) {
HXLINE( 108)			if (!(::backend::Controls_obj::instance->controllerMode)) {
HXLINE( 108)				return  ::Dynamic(value->__Field(HX_("keyboard",a7,bc,29,68),::hx::paccDynamic));
            			}
            			else {
HXLINE( 108)				return  ::Dynamic(value->__Field(HX_("gamepad",a1,e0,85,89),::hx::paccDynamic));
            			}
            		}
HXLINE( 109)		return value;
            	}
HX_END_LOCAL_FUNC0(return )
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_setValue,Option_obj)
void _hx_run( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_416f94ddec2d073a_113___default_setValue)
HXLINE( 114)		if (::hx::IsPointerEq( ( ( ::options::Option)(__this) )->type,::options::OptionType_obj::KEYBIND_dyn() )) {
HXLINE( 116)			 ::Dynamic keys = ::Reflect_obj::getProperty(::backend::ClientPrefs_obj::data,( ( ::options::Option)(__this) )->variable);
HXLINE( 117)			if (!(::backend::Controls_obj::instance->controllerMode)) {
HXLINE( 117)				keys->__SetField(HX_("keyboard",a7,bc,29,68),value,::hx::paccDynamic);
            			}
            			else {
HXLINE( 118)				keys->__SetField(HX_("gamepad",a1,e0,85,89),value,::hx::paccDynamic);
            			}
HXLINE( 119)			return;
            		}
HXLINE( 121)		::Reflect_obj::setProperty(::backend::ClientPrefs_obj::data,( ( ::options::Option)(__this) )->variable,value);
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

::String Option_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_416f94ddec2d073a_128_get_text)
HXDLIN( 128)		return this->_text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Option_obj,get_text,return )

::String Option_obj::set_text(::String __o_newValue){
            		::String newValue = __o_newValue;
            		if (::hx::IsNull(__o_newValue)) newValue = HX_("",00,00,00,00);
            	HX_GC_STACKFRAME(&_hx_pos_416f94ddec2d073a_131_set_text)
HXLINE( 132)		if (::hx::IsNotNull( this->child )) {
HXLINE( 134)			this->_text = newValue;
HXLINE( 135)			 ::objects::Alphabet _hx_tmp = this->child;
HXDLIN( 135)			::String key = ((HX_("setting_",cf,7c,3d,8b) + this->_translationKey) + HX_("-",2d,00,00,00));
HXDLIN( 135)			::String key1 = (key + ::Std_obj::string(this->getValue()));
HXDLIN( 135)			::String defaultPhrase = this->_text;
HXDLIN( 135)			::cpp::VirtualArray values = null();
HXDLIN( 135)			::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 135)			 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN( 135)			::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(key1,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN( 135)			if (::hx::IsNull( str )) {
HXLINE(  62)				str = defaultPhrase;
            			}
HXLINE( 135)			if (::hx::IsNull( str )) {
HXLINE(  68)				str = key1;
            			}
HXLINE( 135)			if (::hx::IsNotNull( values )) {
HXLINE( 135)				int _g_current = 0;
HXDLIN( 135)				::cpp::VirtualArray _g_array = values;
HXDLIN( 135)				while((_g_current < _g_array->get_length())){
HXLINE( 135)					 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN( 135)					_g_current = (_g_current + 1);
HXDLIN( 135)					int _g_key = (_g_current - 1);
HXDLIN( 135)					int num = _g_key;
HXDLIN( 135)					 ::Dynamic value = _g_value;
HXLINE(  72)					str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            				}
            			}
HXLINE( 135)			_hx_tmp->set_text(str);
HXLINE( 136)			return this->_text;
            		}
HXLINE( 138)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Option_obj,set_text,return )


void Option_obj::__alloc_dynamic_functions(::hx::Ctx *_hx_ctx,Option_obj *_hx_obj) {
	if (!_hx_obj->setValue.mPtr) _hx_obj->setValue = new __default_setValue(_hx_obj);
	if (!_hx_obj->getValue.mPtr) _hx_obj->getValue = new __default_getValue(_hx_obj);
}
::hx::ObjectPtr< Option_obj > Option_obj::__new(::String name,::String __o_description,::String variable, ::options::OptionType __o_type,::Array< ::String > options,::String translation) {
	::hx::ObjectPtr< Option_obj > __this = new Option_obj();
	__this->__construct(name,__o_description,variable,__o_type,options,translation);
	return __this;
}

::hx::ObjectPtr< Option_obj > Option_obj::__alloc(::hx::Ctx *_hx_ctx,::String name,::String __o_description,::String variable, ::options::OptionType __o_type,::Array< ::String > options,::String translation) {
	Option_obj *__this = (Option_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Option_obj), true, "options.Option"));
	*(void **)__this = Option_obj::_hx_vtable;
	options::Option_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(name,__o_description,variable,__o_type,options,translation);
	return __this;
}

Option_obj::Option_obj()
{
	setValue = new __default_setValue(this);
	getValue = new __default_getValue(this);
}

void Option_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Option);
	HX_MARK_MEMBER_NAME(child,"child");
	HX_MARK_MEMBER_NAME(onChange,"onChange");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(scrollSpeed,"scrollSpeed");
	HX_MARK_MEMBER_NAME(variable,"variable");
	HX_MARK_MEMBER_NAME(defaultValue,"defaultValue");
	HX_MARK_MEMBER_NAME(curOption,"curOption");
	HX_MARK_MEMBER_NAME(options,"options");
	HX_MARK_MEMBER_NAME(changeValue,"changeValue");
	HX_MARK_MEMBER_NAME(minValue,"minValue");
	HX_MARK_MEMBER_NAME(maxValue,"maxValue");
	HX_MARK_MEMBER_NAME(decimals,"decimals");
	HX_MARK_MEMBER_NAME(displayFormat,"displayFormat");
	HX_MARK_MEMBER_NAME(description,"description");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(defaultKeys,"defaultKeys");
	HX_MARK_MEMBER_NAME(keys,"keys");
	HX_MARK_MEMBER_NAME(getValue,"getValue");
	HX_MARK_MEMBER_NAME(setValue,"setValue");
	HX_MARK_MEMBER_NAME(_name,"_name");
	HX_MARK_MEMBER_NAME(_text,"_text");
	HX_MARK_MEMBER_NAME(_translationKey,"_translationKey");
	HX_MARK_END_CLASS();
}

void Option_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(child,"child");
	HX_VISIT_MEMBER_NAME(onChange,"onChange");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(scrollSpeed,"scrollSpeed");
	HX_VISIT_MEMBER_NAME(variable,"variable");
	HX_VISIT_MEMBER_NAME(defaultValue,"defaultValue");
	HX_VISIT_MEMBER_NAME(curOption,"curOption");
	HX_VISIT_MEMBER_NAME(options,"options");
	HX_VISIT_MEMBER_NAME(changeValue,"changeValue");
	HX_VISIT_MEMBER_NAME(minValue,"minValue");
	HX_VISIT_MEMBER_NAME(maxValue,"maxValue");
	HX_VISIT_MEMBER_NAME(decimals,"decimals");
	HX_VISIT_MEMBER_NAME(displayFormat,"displayFormat");
	HX_VISIT_MEMBER_NAME(description,"description");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(defaultKeys,"defaultKeys");
	HX_VISIT_MEMBER_NAME(keys,"keys");
	HX_VISIT_MEMBER_NAME(getValue,"getValue");
	HX_VISIT_MEMBER_NAME(setValue,"setValue");
	HX_VISIT_MEMBER_NAME(_name,"_name");
	HX_VISIT_MEMBER_NAME(_text,"_text");
	HX_VISIT_MEMBER_NAME(_translationKey,"_translationKey");
}

::hx::Val Option_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_text() ); }
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"keys") ) { return ::hx::Val( keys ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"child") ) { return ::hx::Val( child ); }
		if (HX_FIELD_EQ(inName,"_name") ) { return ::hx::Val( _name ); }
		if (HX_FIELD_EQ(inName,"_text") ) { return ::hx::Val( _text ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"change") ) { return ::hx::Val( change_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { return ::hx::Val( options ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onChange") ) { return ::hx::Val( onChange ); }
		if (HX_FIELD_EQ(inName,"variable") ) { return ::hx::Val( variable ); }
		if (HX_FIELD_EQ(inName,"minValue") ) { return ::hx::Val( minValue ); }
		if (HX_FIELD_EQ(inName,"maxValue") ) { return ::hx::Val( maxValue ); }
		if (HX_FIELD_EQ(inName,"decimals") ) { return ::hx::Val( decimals ); }
		if (HX_FIELD_EQ(inName,"getValue") ) { return ::hx::Val( getValue ); }
		if (HX_FIELD_EQ(inName,"setValue") ) { return ::hx::Val( setValue ); }
		if (HX_FIELD_EQ(inName,"get_text") ) { return ::hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return ::hx::Val( set_text_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"curOption") ) { return ::hx::Val( curOption ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"scrollSpeed") ) { return ::hx::Val( scrollSpeed ); }
		if (HX_FIELD_EQ(inName,"changeValue") ) { return ::hx::Val( changeValue ); }
		if (HX_FIELD_EQ(inName,"description") ) { return ::hx::Val( description ); }
		if (HX_FIELD_EQ(inName,"defaultKeys") ) { return ::hx::Val( defaultKeys ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultValue") ) { return ::hx::Val( defaultValue ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"displayFormat") ) { return ::hx::Val( displayFormat ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_translationKey") ) { return ::hx::Val( _translationKey ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Option_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_text(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::options::OptionType >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keys") ) { keys=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"child") ) { child=inValue.Cast<  ::objects::Alphabet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_name") ) { _name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_text") ) { _text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { options=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onChange") ) { onChange=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"variable") ) { variable=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minValue") ) { minValue=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxValue") ) { maxValue=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"decimals") ) { decimals=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"getValue") ) { getValue=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"setValue") ) { setValue=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"curOption") ) { curOption=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"scrollSpeed") ) { scrollSpeed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"changeValue") ) { changeValue=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"description") ) { description=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultKeys") ) { defaultKeys=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultValue") ) { defaultValue=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"displayFormat") ) { displayFormat=inValue.Cast< ::String >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_translationKey") ) { _translationKey=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Option_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("child",9c,a9,b9,45));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("scrollSpeed",3a,e0,46,cb));
	outFields->push(HX_("variable",3c,12,0d,69));
	outFields->push(HX_("defaultValue",f0,ba,13,e7));
	outFields->push(HX_("curOption",15,ed,07,9c));
	outFields->push(HX_("options",5e,33,fe,df));
	outFields->push(HX_("changeValue",e1,27,7e,57));
	outFields->push(HX_("minValue",7f,ec,ef,28));
	outFields->push(HX_("maxValue",2d,d2,d5,db));
	outFields->push(HX_("decimals",c2,4a,6a,12));
	outFields->push(HX_("displayFormat",19,4b,f1,be));
	outFields->push(HX_("description",fc,08,1d,5f));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("defaultKeys",55,db,c5,18));
	outFields->push(HX_("keys",f4,e1,06,47));
	outFields->push(HX_("_name",2a,8e,10,fc));
	outFields->push(HX_("_text",8c,e8,0a,00));
	outFields->push(HX_("_translationKey",cd,c5,c1,e9));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Option_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::objects::Alphabet */ ,(int)offsetof(Option_obj,child),HX_("child",9c,a9,b9,45)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Option_obj,onChange),HX_("onChange",ef,87,1f,97)},
	{::hx::fsObject /*  ::options::OptionType */ ,(int)offsetof(Option_obj,type),HX_("type",ba,f2,08,4d)},
	{::hx::fsFloat,(int)offsetof(Option_obj,scrollSpeed),HX_("scrollSpeed",3a,e0,46,cb)},
	{::hx::fsString,(int)offsetof(Option_obj,variable),HX_("variable",3c,12,0d,69)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Option_obj,defaultValue),HX_("defaultValue",f0,ba,13,e7)},
	{::hx::fsInt,(int)offsetof(Option_obj,curOption),HX_("curOption",15,ed,07,9c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Option_obj,options),HX_("options",5e,33,fe,df)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Option_obj,changeValue),HX_("changeValue",e1,27,7e,57)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Option_obj,minValue),HX_("minValue",7f,ec,ef,28)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Option_obj,maxValue),HX_("maxValue",2d,d2,d5,db)},
	{::hx::fsInt,(int)offsetof(Option_obj,decimals),HX_("decimals",c2,4a,6a,12)},
	{::hx::fsString,(int)offsetof(Option_obj,displayFormat),HX_("displayFormat",19,4b,f1,be)},
	{::hx::fsString,(int)offsetof(Option_obj,description),HX_("description",fc,08,1d,5f)},
	{::hx::fsString,(int)offsetof(Option_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Option_obj,defaultKeys),HX_("defaultKeys",55,db,c5,18)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Option_obj,keys),HX_("keys",f4,e1,06,47)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Option_obj,getValue),HX_("getValue",fb,8e,8f,91)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Option_obj,setValue),HX_("setValue",6f,e8,ec,3f)},
	{::hx::fsString,(int)offsetof(Option_obj,_name),HX_("_name",2a,8e,10,fc)},
	{::hx::fsString,(int)offsetof(Option_obj,_text),HX_("_text",8c,e8,0a,00)},
	{::hx::fsString,(int)offsetof(Option_obj,_translationKey),HX_("_translationKey",cd,c5,c1,e9)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Option_obj_sStaticStorageInfo = 0;
#endif

static ::String Option_obj_sMemberFields[] = {
	HX_("child",9c,a9,b9,45),
	HX_("onChange",ef,87,1f,97),
	HX_("type",ba,f2,08,4d),
	HX_("scrollSpeed",3a,e0,46,cb),
	HX_("variable",3c,12,0d,69),
	HX_("defaultValue",f0,ba,13,e7),
	HX_("curOption",15,ed,07,9c),
	HX_("options",5e,33,fe,df),
	HX_("changeValue",e1,27,7e,57),
	HX_("minValue",7f,ec,ef,28),
	HX_("maxValue",2d,d2,d5,db),
	HX_("decimals",c2,4a,6a,12),
	HX_("displayFormat",19,4b,f1,be),
	HX_("description",fc,08,1d,5f),
	HX_("name",4b,72,ff,48),
	HX_("defaultKeys",55,db,c5,18),
	HX_("keys",f4,e1,06,47),
	HX_("change",70,91,72,b7),
	HX_("getValue",fb,8e,8f,91),
	HX_("setValue",6f,e8,ec,3f),
	HX_("_name",2a,8e,10,fc),
	HX_("_text",8c,e8,0a,00),
	HX_("_translationKey",cd,c5,c1,e9),
	HX_("get_text",36,88,b4,cc),
	HX_("set_text",aa,e1,11,7b),
	::String(null()) };

::hx::Class Option_obj::__mClass;

void Option_obj::__register()
{
	Option_obj _hx_dummy;
	Option_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("options.Option",a5,b2,ee,21);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Option_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Option_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Option_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Option_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace options
