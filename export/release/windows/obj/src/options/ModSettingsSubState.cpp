// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad__FlxGamepadInputID_FlxGamepadInputID_Impl_
#include <flixel/input/gamepad/_FlxGamepadInputID/FlxGamepadInputID_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_options_BaseOptionsMenu
#include <options/BaseOptionsMenu.h>
#endif
#ifndef INCLUDED_options_ModSettingsSubState
#include <options/ModSettingsSubState.h>
#endif
#ifndef INCLUDED_options_Option
#include <options/Option.h>
#endif
#ifndef INCLUDED_options_OptionType
#include <options/OptionType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1e8423e319131056_10_new,"options.ModSettingsSubState","new",0x7abc4618,"options.ModSettingsSubState.new","options/ModSettingsSubState.hx",10,0xd7fecd19)
HX_DEFINE_STACK_FRAME(_hx_pos_1e8423e319131056_69_new,"options.ModSettingsSubState","new",0x7abc4618,"options.ModSettingsSubState.new","options/ModSettingsSubState.hx",69,0xd7fecd19)
HX_DEFINE_STACK_FRAME(_hx_pos_1e8423e319131056_74_new,"options.ModSettingsSubState","new",0x7abc4618,"options.ModSettingsSubState.new","options/ModSettingsSubState.hx",74,0xd7fecd19)
HX_DEFINE_STACK_FRAME(_hx_pos_1e8423e319131056_90_new,"options.ModSettingsSubState","new",0x7abc4618,"options.ModSettingsSubState.new","options/ModSettingsSubState.hx",90,0xd7fecd19)
HX_DEFINE_STACK_FRAME(_hx_pos_1e8423e319131056_91_new,"options.ModSettingsSubState","new",0x7abc4618,"options.ModSettingsSubState.new","options/ModSettingsSubState.hx",91,0xd7fecd19)
HX_LOCAL_STACK_FRAME(_hx_pos_1e8423e319131056_155_convertType,"options.ModSettingsSubState","convertType",0x4b368005,"options.ModSettingsSubState.convertType","options/ModSettingsSubState.hx",155,0xd7fecd19)
HX_LOCAL_STACK_FRAME(_hx_pos_1e8423e319131056_176_update,"options.ModSettingsSubState","update",0x4d337351,"options.ModSettingsSubState.update","options/ModSettingsSubState.hx",176,0xd7fecd19)
HX_LOCAL_STACK_FRAME(_hx_pos_1e8423e319131056_186_close,"options.ModSettingsSubState","close",0x861e6b70,"options.ModSettingsSubState.close","options/ModSettingsSubState.hx",186,0xd7fecd19)
namespace options{

void ModSettingsSubState_obj::__construct(::cpp::VirtualArray options,::String folder,::String name){
            	HX_GC_STACKFRAME(&_hx_pos_1e8423e319131056_10_new)
HXLINE(  14)		this->_crashed = false;
HXLINE(  12)		this->save =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  16)		 ::options::ModSettingsSubState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  17)		this->folder = folder;
HXLINE(  19)		this->title = HX_("",00,00,00,00);
HXLINE(  21)		this->rpcTitle = ((HX_("Mod Settings (",89,94,1e,81) + name) + HX_(")",29,00,00,00));
HXLINE(  23)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("modSettings",c5,e1,39,0a),::hx::paccDynamic) )) {
HXLINE(  23)			::flixel::FlxG_obj::save->data->__SetField(HX_("modSettings",c5,e1,39,0a), ::haxe::ds::StringMap_obj::__alloc( HX_CTX ),::hx::paccDynamic);
            		}
            		else {
HXLINE(  26)			 ::haxe::ds::StringMap saveMap = ( ( ::haxe::ds::StringMap)(::flixel::FlxG_obj::save->data->__Field(HX_("modSettings",c5,e1,39,0a),::hx::paccDynamic)) );
HXLINE(  27)			 ::haxe::ds::StringMap _hx_tmp;
HXDLIN(  27)			if (::hx::IsNotNull( saveMap->get(folder) )) {
HXLINE(  27)				_hx_tmp = ( ( ::haxe::ds::StringMap)(saveMap->get(folder)) );
            			}
            			else {
HXLINE(  27)				_hx_tmp =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            			}
HXDLIN(  27)			this->save = _hx_tmp;
            		}
HXLINE(  31)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  33)			int _g = 0;
HXDLIN(  33)			while((_g < options->get_length())){
HXLINE(  33)				 ::Dynamic option = options->__get(_g);
HXDLIN(  33)				_g = (_g + 1);
HXLINE(  36)				::String newOption;
HXDLIN(  36)				if (::hx::IsNotNull( option->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic) )) {
HXLINE(  36)					newOption = ( (::String)(option->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
            				}
            				else {
HXLINE(  36)					newOption = ( (::String)(option->__Field(HX_("save",3d,8b,4d,4c),::hx::paccDynamic)) );
            				}
HXLINE(  37)				::String newOption1;
HXDLIN(  37)				if (::hx::IsNotNull( option->__Field(HX_("description",fc,08,1d,5f),::hx::paccDynamic) )) {
HXLINE(  37)					newOption1 = ( (::String)(option->__Field(HX_("description",fc,08,1d,5f),::hx::paccDynamic)) );
            				}
            				else {
HXLINE(  37)					newOption1 = HX_("No description provided.",88,46,cb,66);
            				}
HXLINE(  38)				 ::Dynamic option1 =  ::Dynamic(option->__Field(HX_("save",3d,8b,4d,4c),::hx::paccDynamic));
HXLINE(  39)				 ::options::OptionType newOption2 = this->convertType(( (::String)(option->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic)) ));
HXLINE(  35)				 ::options::Option newOption3 =  ::options::Option_obj::__alloc( HX_CTX ,newOption,newOption1,( (::String)(option1) ),newOption2,( (::Array< ::String >)(option->__Field(HX_("options",5e,33,fe,df),::hx::paccDynamic)) ),( (::String)(option->__Field(HX_("translation_key",11,cc,28,c2),::hx::paccDynamic)) ));
HXLINE(  44)				if ((newOption3->type->_hx_getIndex() == 5)) {
HXLINE(  48)					::String keyboardStr = ( (::String)(option->__Field(HX_("keyboard",a7,bc,29,68),::hx::paccDynamic)) );
HXLINE(  49)					::String gamepadStr = ( (::String)(option->__Field(HX_("gamepad",a1,e0,85,89),::hx::paccDynamic)) );
HXLINE(  50)					if (::hx::IsNull( keyboardStr )) {
HXLINE(  50)						keyboardStr = HX_("NONE",b8,da,ca,33);
            					}
HXLINE(  51)					if (::hx::IsNull( gamepadStr )) {
HXLINE(  51)						gamepadStr = HX_("NONE",b8,da,ca,33);
            					}
HXLINE(  53)					newOption3->defaultKeys->__SetField(HX_("keyboard",a7,bc,29,68),keyboardStr,::hx::paccDynamic);
HXLINE(  54)					newOption3->defaultKeys->__SetField(HX_("gamepad",a1,e0,85,89),gamepadStr,::hx::paccDynamic);
HXLINE(  55)					if (::hx::IsNull( this->save->get(( (::String)(option->__Field(HX_("save",3d,8b,4d,4c),::hx::paccDynamic)) )) )) {
HXLINE(  57)						newOption3->keys->__SetField(HX_("keyboard",a7,bc,29,68),newOption3->defaultKeys->__Field(HX_("keyboard",a7,bc,29,68),::hx::paccDynamic),::hx::paccDynamic);
HXLINE(  58)						newOption3->keys->__SetField(HX_("gamepad",a1,e0,85,89),newOption3->defaultKeys->__Field(HX_("gamepad",a1,e0,85,89),::hx::paccDynamic),::hx::paccDynamic);
HXLINE(  59)						this->save->set(( (::String)(option->__Field(HX_("save",3d,8b,4d,4c),::hx::paccDynamic)) ),newOption3->keys);
            					}
HXLINE(  63)					::String s = keyboardStr;
HXDLIN(  63)					s = s.toUpperCase();
HXDLIN(  63)					int keyboardKey;
HXDLIN(  63)					if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s)) {
HXLINE(  63)						keyboardKey = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s);
            					}
            					else {
HXLINE(  63)						keyboardKey = -1;
            					}
HXDLIN(  63)					int keyboardKey1 = keyboardKey;
HXLINE(  64)					::String s1 = gamepadStr;
HXDLIN(  64)					s1 = s1.toUpperCase();
HXDLIN(  64)					int gamepadKey;
HXDLIN(  64)					if (::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->exists(s1)) {
HXLINE(  64)						gamepadKey = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->get_int(s1);
            					}
            					else {
HXLINE(  64)						gamepadKey = -1;
            					}
HXDLIN(  64)					int gamepadKey1 = gamepadKey;
HXLINE(  68)					{
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::options::ModSettingsSubState,_gthis, ::options::Option,newOption3) HXARGC(0)
            						::String _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_1e8423e319131056_69_new)
HXLINE(  70)							 ::Dynamic data = _gthis->save->get(newOption3->variable);
HXLINE(  71)							if (::hx::IsNull( data )) {
HXLINE(  71)								return HX_("NONE",b8,da,ca,33);
            							}
HXLINE(  72)							if (!(::backend::Controls_obj::instance->controllerMode)) {
HXLINE(  72)								return ( (::String)(data->__Field(HX_("keyboard",a7,bc,29,68),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(  72)								return ( (::String)(data->__Field(HX_("gamepad",a1,e0,85,89),::hx::paccDynamic)) );
            							}
            						}
            						HX_END_LOCAL_FUNC0(return)

            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::options::ModSettingsSubState,_gthis, ::options::Option,newOption3) HXARGC(1)
            						void _hx_run( ::Dynamic value){
            							HX_GC_STACKFRAME(&_hx_pos_1e8423e319131056_74_new)
HXLINE(  75)							 ::Dynamic data = _gthis->save->get(newOption3->variable);
HXLINE(  76)							if (::hx::IsNull( data )) {
HXLINE(  76)								data =  ::Dynamic(::hx::Anon_obj::Create(2)
            									->setFixed(0,HX_("gamepad",a1,e0,85,89),HX_("NONE",b8,da,ca,33))
            									->setFixed(1,HX_("keyboard",a7,bc,29,68),HX_("NONE",b8,da,ca,33)));
            							}
HXLINE(  78)							if (!(::backend::Controls_obj::instance->controllerMode)) {
HXLINE(  78)								data->__SetField(HX_("keyboard",a7,bc,29,68),value,::hx::paccDynamic);
            							}
            							else {
HXLINE(  79)								data->__SetField(HX_("gamepad",a1,e0,85,89),value,::hx::paccDynamic);
            							}
HXLINE(  80)							_gthis->save->set(newOption3->variable,data);
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(  69)						newOption3->getValue =  ::Dynamic(new _hx_Closure_0(_gthis,newOption3));
HXLINE(  74)						newOption3->setValue =  ::Dynamic(new _hx_Closure_1(_gthis,newOption3));
            					}
            				}
            				else {
HXLINE(  85)					if (::hx::IsNotNull( option->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic) )) {
HXLINE(  86)						newOption3->defaultValue =  ::Dynamic(option->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic));
            					}
HXLINE(  89)					{
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::options::ModSettingsSubState,_gthis, ::options::Option,newOption3) HXARGC(0)
            						 ::Dynamic _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_1e8423e319131056_90_new)
HXLINE(  90)							return _gthis->save->get(newOption3->variable);
            						}
            						HX_END_LOCAL_FUNC0(return)

            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::options::ModSettingsSubState,_gthis, ::options::Option,newOption3) HXARGC(1)
            						void _hx_run( ::Dynamic value){
            							HX_GC_STACKFRAME(&_hx_pos_1e8423e319131056_91_new)
HXLINE(  91)							_gthis->save->set(newOption3->variable,value);
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(  90)						newOption3->getValue =  ::Dynamic(new _hx_Closure_2(_gthis,newOption3));
HXLINE(  91)						newOption3->setValue =  ::Dynamic(new _hx_Closure_3(_gthis,newOption3));
            					}
            				}
HXLINE(  95)				if (::hx::IsPointerNotEq( option->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic),::options::OptionType_obj::KEYBIND_dyn() )) {
HXLINE(  97)					if (::hx::IsNotNull( option->__Field(HX_("format",37,8f,8e,fd),::hx::paccDynamic) )) {
HXLINE(  97)						newOption3->displayFormat = ( (::String)(option->__Field(HX_("format",37,8f,8e,fd),::hx::paccDynamic)) );
            					}
HXLINE(  98)					if (::hx::IsNotNull( option->__Field(HX_("min",92,11,53,00),::hx::paccDynamic) )) {
HXLINE(  98)						newOption3->minValue =  ::Dynamic(option->__Field(HX_("min",92,11,53,00),::hx::paccDynamic));
            					}
HXLINE(  99)					if (::hx::IsNotNull( option->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic) )) {
HXLINE(  99)						newOption3->maxValue =  ::Dynamic(option->__Field(HX_("max",a4,0a,53,00),::hx::paccDynamic));
            					}
HXLINE( 100)					if (::hx::IsNotNull( option->__Field(HX_("step",4c,e7,5b,4c),::hx::paccDynamic) )) {
HXLINE( 100)						newOption3->changeValue =  ::Dynamic(option->__Field(HX_("step",4c,e7,5b,4c),::hx::paccDynamic));
            					}
HXLINE( 102)					if (::hx::IsNotNull( option->__Field(HX_("scroll",0d,d8,64,47),::hx::paccDynamic) )) {
HXLINE( 102)						newOption3->scrollSpeed = ( (Float)(option->__Field(HX_("scroll",0d,d8,64,47),::hx::paccDynamic)) );
            					}
HXLINE( 103)					if (::hx::IsNotNull( option->__Field(HX_("decimals",c2,4a,6a,12),::hx::paccDynamic) )) {
HXLINE( 103)						newOption3->decimals = ( (int)(option->__Field(HX_("decimals",c2,4a,6a,12),::hx::paccDynamic)) );
            					}
HXLINE( 105)					 ::Dynamic myValue = null();
HXLINE( 106)					if (::hx::IsNotNull( this->save->get(( (::String)(option->__Field(HX_("save",3d,8b,4d,4c),::hx::paccDynamic)) )) )) {
HXLINE( 108)						myValue = this->save->get(( (::String)(option->__Field(HX_("save",3d,8b,4d,4c),::hx::paccDynamic)) ));
HXLINE( 109)						if (::hx::IsPointerNotEq( newOption3->type,::options::OptionType_obj::KEYBIND_dyn() )) {
HXLINE( 109)							newOption3->setValue(myValue);
            						}
            						else {
HXLINE( 110)							 ::Dynamic _hx_tmp1;
HXDLIN( 110)							if (!(::backend::Controls_obj::instance->controllerMode)) {
HXLINE( 110)								_hx_tmp1 =  ::Dynamic(myValue->__Field(HX_("keyboard",a7,bc,29,68),::hx::paccDynamic));
            							}
            							else {
HXLINE( 110)								_hx_tmp1 =  ::Dynamic(myValue->__Field(HX_("gamepad",a1,e0,85,89),::hx::paccDynamic));
            							}
HXDLIN( 110)							newOption3->setValue(_hx_tmp1);
            						}
            					}
            					else {
HXLINE( 114)						myValue = newOption3->getValue();
HXLINE( 115)						if (::hx::IsNull( myValue )) {
HXLINE( 115)							myValue = newOption3->defaultValue;
            						}
            					}
HXLINE( 118)					if ((newOption3->type->_hx_getIndex() == 4)) {
HXLINE( 121)						int num = newOption3->options->indexOf(myValue,null());
HXLINE( 122)						if ((num > -1)) {
HXLINE( 122)							newOption3->curOption = num;
            						}
            					}
HXLINE( 127)					this->save->set(( (::String)(option->__Field(HX_("save",3d,8b,4d,4c),::hx::paccDynamic)) ),myValue);
            				}
HXLINE( 129)				this->addOption(newOption3);
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g1 = _hx_e;
HXLINE( 133)				 ::Dynamic e = _g1;
HXLINE( 135)				::String errorTitle = (HX_("Mod name: ",6f,0f,ef,f4) + folder);
HXLINE( 136)				::String errorMsg = (HX_("An error occurred: ",96,0b,5f,5d) + ::Std_obj::string(e));
HXLINE( 138)				::lime::app::Application_obj::current->_hx___window->alert(errorMsg,errorTitle);
HXLINE( 140)				::haxe::Log_obj::trace((((HX_("",00,00,00,00) + errorTitle) + HX_(" - ",73,6f,18,00)) + errorMsg),::hx::SourceInfo(HX_("source/options/ModSettingsSubState.hx",0d,c7,6e,02),140,HX_("options.ModSettingsSubState",26,9a,f1,f8),HX_("new",60,d0,53,00)));
HXLINE( 142)				this->_crashed = true;
HXLINE( 143)				this->close();
HXLINE( 144)				return;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 147)		super::__construct();
HXLINE( 149)		this->bg->set_alpha(((Float)0.75));
HXLINE( 150)		this->bg->set_color(-1);
HXLINE( 151)		this->reloadCheckboxes();
            	}

Dynamic ModSettingsSubState_obj::__CreateEmpty() { return new ModSettingsSubState_obj; }

void *ModSettingsSubState_obj::_hx_vtable = 0;

Dynamic ModSettingsSubState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ModSettingsSubState_obj > _hx_result = new ModSettingsSubState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ModSettingsSubState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5661ffbf) {
		if (inClassId<=(int)0x0cc50116) {
			if (inClassId<=(int)0x0a0d9144) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0a0d9144;
			} else {
				return inClassId==(int)0x0cc50116;
			}
		} else {
			return inClassId==(int)0x3c0818b8 || inClassId==(int)0x5661ffbf;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

 ::options::OptionType ModSettingsSubState_obj::convertType(::String str){
            	HX_STACKFRAME(&_hx_pos_1e8423e319131056_155_convertType)
HXLINE( 156)		::String _hx_switch_0 = ::StringTools_obj::trim(str.toLowerCase());
            		if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ){
HXLINE( 159)			return ::options::OptionType_obj::BOOL_dyn();
HXDLIN( 159)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("fl",46,59,00,00)) ||  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE( 163)			return ::options::OptionType_obj::FLOAT_dyn();
HXDLIN( 163)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ||  (_hx_switch_0==HX_("integer",be,bd,1b,17)) ){
HXLINE( 161)			return ::options::OptionType_obj::INT_dyn();
HXDLIN( 161)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("key",9f,89,51,00)) ||  (_hx_switch_0==HX_("keybind",dc,3a,17,b0)) ){
HXLINE( 169)			return ::options::OptionType_obj::KEYBIND_dyn();
HXDLIN( 169)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("percent",c5,aa,da,78)) ){
HXLINE( 165)			return ::options::OptionType_obj::PERCENT_dyn();
HXDLIN( 165)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("str",b1,a8,57,00)) ||  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE( 167)			return ::options::OptionType_obj::STRING_dyn();
HXDLIN( 167)			goto _hx_goto_6;
            		}
            		_hx_goto_6:;
HXLINE( 171)		::flixel::FlxG_obj::log->advanced((HX_("Could not find option type: ",50,4b,94,7c) + str),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
HXLINE( 172)		return ::options::OptionType_obj::BOOL_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ModSettingsSubState_obj,convertType,return )

void ModSettingsSubState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_1e8423e319131056_176_update)
HXLINE( 177)		if (this->_crashed) {
HXLINE( 179)			this->close();
HXLINE( 180)			return;
            		}
HXLINE( 182)		this->super::update(elapsed);
            	}


void ModSettingsSubState_obj::close(){
            	HX_STACKFRAME(&_hx_pos_1e8423e319131056_186_close)
HXLINE( 187)		 ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("modSettings",c5,e1,39,0a),::hx::paccDynamic))->__Field(HX_("set",a2,9b,57,00),::hx::paccDynamic)(this->folder,this->save);
HXLINE( 188)		::flixel::FlxG_obj::save->flush(null());
HXLINE( 189)		this->super::close();
            	}



::hx::ObjectPtr< ModSettingsSubState_obj > ModSettingsSubState_obj::__new(::cpp::VirtualArray options,::String folder,::String name) {
	::hx::ObjectPtr< ModSettingsSubState_obj > __this = new ModSettingsSubState_obj();
	__this->__construct(options,folder,name);
	return __this;
}

::hx::ObjectPtr< ModSettingsSubState_obj > ModSettingsSubState_obj::__alloc(::hx::Ctx *_hx_ctx,::cpp::VirtualArray options,::String folder,::String name) {
	ModSettingsSubState_obj *__this = (ModSettingsSubState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ModSettingsSubState_obj), true, "options.ModSettingsSubState"));
	*(void **)__this = ModSettingsSubState_obj::_hx_vtable;
	__this->__construct(options,folder,name);
	return __this;
}

ModSettingsSubState_obj::ModSettingsSubState_obj()
{
}

void ModSettingsSubState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ModSettingsSubState);
	HX_MARK_MEMBER_NAME(save,"save");
	HX_MARK_MEMBER_NAME(folder,"folder");
	HX_MARK_MEMBER_NAME(_crashed,"_crashed");
	 ::options::BaseOptionsMenu_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ModSettingsSubState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(save,"save");
	HX_VISIT_MEMBER_NAME(folder,"folder");
	HX_VISIT_MEMBER_NAME(_crashed,"_crashed");
	 ::options::BaseOptionsMenu_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ModSettingsSubState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"save") ) { return ::hx::Val( save ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"close") ) { return ::hx::Val( close_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"folder") ) { return ::hx::Val( folder ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_crashed") ) { return ::hx::Val( _crashed ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"convertType") ) { return ::hx::Val( convertType_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ModSettingsSubState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"save") ) { save=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"folder") ) { folder=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_crashed") ) { _crashed=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ModSettingsSubState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("save",3d,8b,4d,4c));
	outFields->push(HX_("folder",ae,76,90,f9));
	outFields->push(HX_("_crashed",87,79,65,09));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ModSettingsSubState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(ModSettingsSubState_obj,save),HX_("save",3d,8b,4d,4c)},
	{::hx::fsString,(int)offsetof(ModSettingsSubState_obj,folder),HX_("folder",ae,76,90,f9)},
	{::hx::fsBool,(int)offsetof(ModSettingsSubState_obj,_crashed),HX_("_crashed",87,79,65,09)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ModSettingsSubState_obj_sStaticStorageInfo = 0;
#endif

static ::String ModSettingsSubState_obj_sMemberFields[] = {
	HX_("save",3d,8b,4d,4c),
	HX_("folder",ae,76,90,f9),
	HX_("_crashed",87,79,65,09),
	HX_("convertType",4d,92,4d,36),
	HX_("update",09,86,05,87),
	HX_("close",b8,17,63,48),
	::String(null()) };

::hx::Class ModSettingsSubState_obj::__mClass;

void ModSettingsSubState_obj::__register()
{
	ModSettingsSubState_obj _hx_dummy;
	ModSettingsSubState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("options.ModSettingsSubState",26,9a,f1,f8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ModSettingsSubState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ModSettingsSubState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ModSettingsSubState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ModSettingsSubState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace options
