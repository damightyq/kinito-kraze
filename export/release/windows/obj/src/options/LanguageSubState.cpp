// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Controls
#include <backend/Controls.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_objects_Alphabet
#include <objects/Alphabet.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_options_LanguageSubState
#include <options/LanguageSubState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cf9d811cecca64b2_58_new,"options.LanguageSubState","new",0xed1cfd8b,"options.LanguageSubState.new","options/LanguageSubState.hx",58,0xa200e0e4)
HX_DEFINE_STACK_FRAME(_hx_pos_cf9d811cecca64b2_5_new,"options.LanguageSubState","new",0xed1cfd8b,"options.LanguageSubState.new","options/LanguageSubState.hx",5,0xa200e0e4)
HX_LOCAL_STACK_FRAME(_hx_pos_cf9d811cecca64b2_99_update,"options.LanguageSubState","update",0xd8e2a5be,"options.LanguageSubState.update","options/LanguageSubState.hx",99,0xa200e0e4)
HX_LOCAL_STACK_FRAME(_hx_pos_cf9d811cecca64b2_134_changeSelected,"options.LanguageSubState","changeSelected",0x61ebc4a0,"options.LanguageSubState.changeSelected","options/LanguageSubState.hx",134,0xa200e0e4)
namespace options{

void LanguageSubState_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::options::LanguageSubState,_gthis) HXARGC(2)
            		int _hx_run(::String a,::String b){
            			HX_GC_STACKFRAME(&_hx_pos_cf9d811cecca64b2_58_new)
HXLINE(  59)			::String a1;
HXDLIN(  59)			if (_gthis->displayLanguages->exists(a)) {
HXLINE(  59)				a1 = _gthis->displayLanguages->get_string(a);
            			}
            			else {
HXLINE(  59)				a1 = a;
            			}
HXDLIN(  59)			a = a1.toLowerCase();
HXLINE(  60)			::String b1;
HXDLIN(  60)			if (_gthis->displayLanguages->exists(b)) {
HXLINE(  60)				b1 = _gthis->displayLanguages->get_string(b);
            			}
            			else {
HXLINE(  60)				b1 = b;
            			}
HXDLIN(  60)			b = b1.toLowerCase();
HXLINE(  61)			if ((a < b)) {
HXLINE(  61)				return -1;
            			}
            			else {
HXLINE(  62)				if ((a > b)) {
HXLINE(  62)					return 1;
            				}
            			}
HXLINE(  63)			return 0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_cf9d811cecca64b2_5_new)
HXLINE(  97)		this->changedLanguage = false;
HXLINE(  11)		this->curSelected = 0;
HXLINE(  10)		this->displayLanguages =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(   9)		this->languages = ::Array_obj< ::String >::__new(0);
HXLINE(   8)		this->grpLanguages =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  13)		 ::options::LanguageSubState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  14)		super::__construct();
HXLINE(  16)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  16)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::backend::Paths_obj::image(HX_("menuDesat",26,91,04,72),null(),null()),null(),null(),null(),null(),null());
HXLINE(  17)		bg1->set_color(-1412611);
HXLINE(  18)		bg1->set_antialiasing(::backend::ClientPrefs_obj::data->antialiasing);
HXLINE(  19)		{
HXLINE(  19)			int axes = 17;
HXDLIN(  19)			bool _hx_tmp;
HXDLIN(  19)			if ((axes != 1)) {
HXLINE(  19)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(  19)				_hx_tmp = true;
            			}
HXDLIN(  19)			if (_hx_tmp) {
HXLINE(  19)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  19)				bg1->set_x(((( (Float)(_hx_tmp1) ) - bg1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  19)			bool _hx_tmp2;
HXDLIN(  19)			if ((axes != 16)) {
HXLINE(  19)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  19)				_hx_tmp2 = true;
            			}
HXDLIN(  19)			if (_hx_tmp2) {
HXLINE(  19)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  19)				bg1->set_y(((( (Float)(_hx_tmp3) ) - bg1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  20)		this->add(bg1);
HXLINE(  21)		this->add(this->grpLanguages);
HXLINE(  23)		this->languages->push(::backend::ClientPrefs_obj::defaultData->language);
HXLINE(  24)		this->displayLanguages->set(::backend::ClientPrefs_obj::defaultData->language,::backend::Language_obj::defaultLangName);
HXLINE(  25)		::Array< ::String > foldersToCheck = ::Array_obj< ::String >::__new(0);
HXDLIN(  25)		if (::sys::FileSystem_obj::exists((HX_("assets/shared/",1e,69,1e,47) + HX_("data/",c5,0e,88,d4)))) {
HXLINE(  25)			foldersToCheck->push((HX_("assets/shared/",1e,69,1e,47) + HX_("data/",c5,0e,88,d4)));
            		}
HXDLIN(  25)		bool _hx_tmp4;
HXDLIN(  25)		if (::hx::IsNotNull( ::backend::Paths_obj::currentLevel )) {
HXLINE(  25)			_hx_tmp4 = (::backend::Paths_obj::currentLevel != HX_("assets/shared/",1e,69,1e,47));
            		}
            		else {
HXLINE(  25)			_hx_tmp4 = false;
            		}
HXDLIN(  25)		if (_hx_tmp4) {
HXLINE(  25)			::String folder = ::backend::Paths_obj::currentLevel;
HXDLIN(  25)			if (::hx::IsNull( folder )) {
HXLINE( 104)				folder = HX_("shared",a5,5e,2b,1d);
            			}
HXLINE(  25)			::String pth = (((HX_("assets/",4c,2a,dc,36) + folder) + HX_("/",2f,00,00,00)) + HX_("data/",c5,0e,88,d4));
HXDLIN(  25)			bool _hx_tmp5;
HXDLIN(  25)			if (!(foldersToCheck->contains(pth))) {
HXLINE(  25)				_hx_tmp5 = ::sys::FileSystem_obj::exists(pth);
            			}
            			else {
HXLINE(  25)				_hx_tmp5 = false;
            			}
HXDLIN(  25)			if (_hx_tmp5) {
HXLINE(  25)				foldersToCheck->push(pth);
            			}
            		}
HXDLIN(  25)		{
HXLINE(  25)			{
HXLINE(  25)				int _g = 0;
HXDLIN(  25)				::Array< ::String > _g1 = ::backend::Mods_obj::globalMods;
HXDLIN(  25)				while((_g < _g1->length)){
HXLINE(  25)					::String mod = _g1->__get(_g);
HXDLIN(  25)					_g = (_g + 1);
HXDLIN(  25)					::String key = ((mod + HX_("/",2f,00,00,00)) + HX_("data/",c5,0e,88,d4));
HXDLIN(  25)					if (::hx::IsNull( key )) {
HXLINE( 115)						key = HX_("",00,00,00,00);
            					}
HXLINE(  25)					::String folder1 = (HX_("mods/",9e,2f,58,0c) + key);
HXDLIN(  25)					bool _hx_tmp6;
HXDLIN(  25)					if (::sys::FileSystem_obj::exists(folder1)) {
HXLINE(  25)						_hx_tmp6 = !(foldersToCheck->contains(folder1));
            					}
            					else {
HXLINE(  25)						_hx_tmp6 = false;
            					}
HXDLIN(  25)					if (_hx_tmp6) {
HXLINE(  25)						foldersToCheck->push(folder1);
            					}
            				}
            			}
HXDLIN(  25)			::String key1 = HX_("data/",c5,0e,88,d4);
HXDLIN(  25)			if (::hx::IsNull( key1 )) {
HXLINE( 120)				key1 = HX_("",00,00,00,00);
            			}
HXLINE(  25)			::String folder2 = (HX_("mods/",9e,2f,58,0c) + key1);
HXDLIN(  25)			bool _hx_tmp7;
HXDLIN(  25)			if (::sys::FileSystem_obj::exists(folder2)) {
HXLINE(  25)				_hx_tmp7 = !(foldersToCheck->contains(folder2));
            			}
            			else {
HXLINE(  25)				_hx_tmp7 = false;
            			}
HXDLIN(  25)			if (_hx_tmp7) {
HXLINE(  25)				::String key2 = HX_("data/",c5,0e,88,d4);
HXDLIN(  25)				if (::hx::IsNull( key2 )) {
HXLINE( 121)					key2 = HX_("",00,00,00,00);
            				}
HXLINE(  25)				foldersToCheck->push((HX_("mods/",9e,2f,58,0c) + key2));
            			}
HXDLIN(  25)			bool _hx_tmp8;
HXDLIN(  25)			if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE(  25)				_hx_tmp8 = (::backend::Mods_obj::currentModDirectory.length > 0);
            			}
            			else {
HXLINE(  25)				_hx_tmp8 = false;
            			}
HXDLIN(  25)			if (_hx_tmp8) {
HXLINE(  25)				::String key3 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + HX_("data/",c5,0e,88,d4));
HXDLIN(  25)				if (::hx::IsNull( key3 )) {
HXLINE( 126)					key3 = HX_("",00,00,00,00);
            				}
HXLINE(  25)				::String folder3 = (HX_("mods/",9e,2f,58,0c) + key3);
HXDLIN(  25)				bool _hx_tmp9;
HXDLIN(  25)				if (::sys::FileSystem_obj::exists(folder3)) {
HXLINE(  25)					_hx_tmp9 = !(foldersToCheck->contains(folder3));
            				}
            				else {
HXLINE(  25)					_hx_tmp9 = false;
            				}
HXDLIN(  25)				if (_hx_tmp9) {
HXLINE(  25)					foldersToCheck->push(folder3);
            				}
            			}
            		}
HXDLIN(  25)		::Array< ::String > directories = foldersToCheck;
HXLINE(  26)		{
HXLINE(  26)			int _g2 = 0;
HXDLIN(  26)			while((_g2 < directories->length)){
HXLINE(  26)				::String directory = directories->__get(_g2);
HXDLIN(  26)				_g2 = (_g2 + 1);
HXLINE(  28)				{
HXLINE(  28)					int _g3 = 0;
HXDLIN(  28)					::Array< ::String > _g4 = ::sys::FileSystem_obj::readDirectory(directory);
HXDLIN(  28)					while((_g3 < _g4->length)){
HXLINE(  28)						::String file = _g4->__get(_g3);
HXDLIN(  28)						_g3 = (_g3 + 1);
HXLINE(  30)						if (::StringTools_obj::endsWith(file.toLowerCase(),HX_(".lang",1c,b5,1b,c4))) {
HXLINE(  32)							::String langFile = ::StringTools_obj::trim(file.substring(0,(file.length - HX_(".lang",1c,b5,1b,c4).length)));
HXLINE(  33)							if (!(this->languages->contains(langFile))) {
HXLINE(  34)								this->languages->push(langFile);
            							}
HXLINE(  36)							if (!(this->displayLanguages->exists(langFile))) {
HXLINE(  38)								::String path = (((HX_("",00,00,00,00) + directory) + HX_("/",2f,00,00,00)) + file);
HXLINE(  40)								::String txt = ::sys::io::File_obj::getContent(path);
HXLINE(  45)								int id = txt.indexOf(HX_("\n",0a,00,00,00),null());
HXLINE(  46)								if ((id > 0)) {
HXLINE(  48)									::String name = ::StringTools_obj::trim(txt.substr(0,id));
HXLINE(  49)									if ((name.indexOf(HX_(":",3a,00,00,00),null()) == -1)) {
HXLINE(  49)										this->displayLanguages->set(langFile,name);
            									}
            								}
            								else {
HXLINE(  51)									bool _hx_tmp10;
HXDLIN(  51)									if ((::StringTools_obj::trim(txt).length > 0)) {
HXLINE(  51)										_hx_tmp10 = (txt.indexOf(HX_(":",3a,00,00,00),null()) == -1);
            									}
            									else {
HXLINE(  51)										_hx_tmp10 = false;
            									}
HXDLIN(  51)									if (_hx_tmp10) {
HXLINE(  51)										::Dynamic this1 = this->displayLanguages;
HXDLIN(  51)										( ( ::haxe::ds::StringMap)(this1) )->set(langFile,::StringTools_obj::trim(txt));
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  57)		this->languages->sort( ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE(  67)		this->curSelected = this->languages->indexOf(::backend::ClientPrefs_obj::data->language,null());
HXLINE(  68)		if ((this->curSelected < 0)) {
HXLINE(  71)			::backend::ClientPrefs_obj::data->language = ::backend::ClientPrefs_obj::defaultData->language;
HXLINE(  72)			this->curSelected = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),( (Float)(this->languages->indexOf(::backend::ClientPrefs_obj::data->language,null())) )));
            		}
HXLINE(  75)		{
HXLINE(  75)			int _g_current = 0;
HXDLIN(  75)			::Array< ::String > _g_array = this->languages;
HXDLIN(  75)			while((_g_current < _g_array->length)){
HXLINE(  75)				::String _g_value = _g_array->__get(_g_current);
HXDLIN(  75)				_g_current = (_g_current + 1);
HXDLIN(  75)				int _g_key = (_g_current - 1);
HXDLIN(  75)				int num = _g_key;
HXDLIN(  75)				::String lang = _g_value;
HXLINE(  76)				{
HXLINE(  77)					::String name1 = this->displayLanguages->get_string(lang);
HXLINE(  78)					if (::hx::IsNull( name1 )) {
HXLINE(  78)						name1 = lang;
            					}
HXLINE(  80)					 ::objects::Alphabet text =  ::objects::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(300) ),name1,true);
HXLINE(  81)					text->isMenuItem = true;
HXLINE(  82)					text->targetY = num;
HXLINE(  83)					text->changeX = false;
HXLINE(  84)					text->distancePerItem->set_y(( (Float)(100) ));
HXLINE(  85)					if ((this->languages->length < 7)) {
HXLINE(  87)						text->changeY = false;
HXLINE(  88)						{
HXLINE(  88)							int axes1 = 16;
HXDLIN(  88)							bool _hx_tmp11;
HXDLIN(  88)							if ((axes1 != 1)) {
HXLINE(  88)								_hx_tmp11 = (axes1 == 17);
            							}
            							else {
HXLINE(  88)								_hx_tmp11 = true;
            							}
HXDLIN(  88)							if (_hx_tmp11) {
HXLINE(  88)								int _hx_tmp12 = ::flixel::FlxG_obj::width;
HXDLIN(  88)								text->set_x(((( (Float)(_hx_tmp12) ) - text->get_width()) / ( (Float)(2) )));
            							}
HXDLIN(  88)							bool _hx_tmp13;
HXDLIN(  88)							if ((axes1 != 16)) {
HXLINE(  88)								_hx_tmp13 = (axes1 == 17);
            							}
            							else {
HXLINE(  88)								_hx_tmp13 = true;
            							}
HXDLIN(  88)							if (_hx_tmp13) {
HXLINE(  88)								int _hx_tmp14 = ::flixel::FlxG_obj::height;
HXDLIN(  88)								text->set_y(((( (Float)(_hx_tmp14) ) - text->get_height()) / ( (Float)(2) )));
            							}
            						}
HXLINE(  89)						text->set_y((text->y + ((( (Float)(100) ) * (( (Float)(num) ) - (( (Float)(this->languages->length) ) / ( (Float)(2) )))) + 45)));
            					}
HXLINE(  91)					{
HXLINE(  91)						int axes2 = 1;
HXDLIN(  91)						bool _hx_tmp15;
HXDLIN(  91)						if ((axes2 != 1)) {
HXLINE(  91)							_hx_tmp15 = (axes2 == 17);
            						}
            						else {
HXLINE(  91)							_hx_tmp15 = true;
            						}
HXDLIN(  91)						if (_hx_tmp15) {
HXLINE(  91)							int _hx_tmp16 = ::flixel::FlxG_obj::width;
HXDLIN(  91)							text->set_x(((( (Float)(_hx_tmp16) ) - text->get_width()) / ( (Float)(2) )));
            						}
HXDLIN(  91)						bool _hx_tmp17;
HXDLIN(  91)						if ((axes2 != 16)) {
HXLINE(  91)							_hx_tmp17 = (axes2 == 17);
            						}
            						else {
HXLINE(  91)							_hx_tmp17 = true;
            						}
HXDLIN(  91)						if (_hx_tmp17) {
HXLINE(  91)							int _hx_tmp18 = ::flixel::FlxG_obj::height;
HXDLIN(  91)							text->set_y(((( (Float)(_hx_tmp18) ) - text->get_height()) / ( (Float)(2) )));
            						}
            					}
HXLINE(  92)					this->grpLanguages->add(text).StaticCast<  ::objects::Alphabet >();
            				}
            			}
            		}
HXLINE(  94)		this->changeSelected(null());
            	}

Dynamic LanguageSubState_obj::__CreateEmpty() { return new LanguageSubState_obj; }

void *LanguageSubState_obj::_hx_vtable = 0;

Dynamic LanguageSubState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LanguageSubState_obj > _hx_result = new LanguageSubState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool LanguageSubState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x5661ffbf) {
			if (inClassId<=(int)0x3c0818b8) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x3c0818b8;
			} else {
				return inClassId==(int)0x5661ffbf;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7fcd07e7;
		}
	}
}

void LanguageSubState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_cf9d811cecca64b2_99_update)
HXLINE( 100)		this->super::update(elapsed);
HXLINE( 102)		int mult;
HXDLIN( 102)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 102)		if (_this->keyManager->checkStatusUnsafe(16,_this->status)) {
HXLINE( 102)			mult = 4;
            		}
            		else {
HXLINE( 102)			mult = 1;
            		}
HXLINE( 103)		if (::backend::Controls_obj::instance->get_UI_UP_P()) {
HXLINE( 104)			this->changeSelected((-1 * mult));
            		}
HXLINE( 105)		if (::backend::Controls_obj::instance->get_UI_DOWN_P()) {
HXLINE( 106)			this->changeSelected(mult);
            		}
HXLINE( 107)		if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE( 108)			this->changeSelected((::flixel::FlxG_obj::mouse->wheel * mult));
            		}
HXLINE( 110)		if (::backend::Controls_obj::instance->get_BACK()) {
HXLINE( 112)			if (this->changedLanguage) {
HXLINE( 114)				::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE( 115)				::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
HXLINE( 116)				::backend::MusicBeatState_obj::resetState();
            			}
            			else {
HXLINE( 118)				this->close();
            			}
HXLINE( 119)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 119)			_hx_tmp->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("cancelMenu",39,a4,43,b7)),null(),true,null()),null(),null(),null(),null(),null());
            		}
HXLINE( 122)		if (::backend::Controls_obj::instance->get_ACCEPT()) {
HXLINE( 124)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 124)			_hx_tmp1->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("confirmMenu",bf,8e,fe,3c)),null(),true,null()),((Float)0.6),null(),null(),null(),null());
HXLINE( 125)			::backend::ClientPrefs_obj::data->language = this->languages->__get(this->curSelected);
HXLINE( 127)			::backend::ClientPrefs_obj::saveSettings();
HXLINE( 128)			::backend::Language_obj::reloadPhrases();
HXLINE( 129)			this->changedLanguage = true;
            		}
            	}


void LanguageSubState_obj::changeSelected(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_cf9d811cecca64b2_134_changeSelected)
HXLINE( 135)		this->curSelected = ::flixel::math::FlxMath_obj::wrap((this->curSelected + change),0,(this->languages->length - 1));
HXLINE( 136)		{
HXLINE( 136)			int _g_current = 0;
HXDLIN( 136)			::Array< ::Dynamic> _g_array = this->grpLanguages->members;
HXDLIN( 136)			while((_g_current < _g_array->length)){
HXLINE( 136)				 ::objects::Alphabet _g_value = _g_array->__get(_g_current).StaticCast<  ::objects::Alphabet >();
HXDLIN( 136)				_g_current = (_g_current + 1);
HXDLIN( 136)				int _g_key = (_g_current - 1);
HXDLIN( 136)				int num = _g_key;
HXDLIN( 136)				 ::objects::Alphabet lang = _g_value;
HXLINE( 137)				{
HXLINE( 138)					lang->targetY = (num - this->curSelected);
HXLINE( 139)					lang->set_alpha(((Float)0.6));
HXLINE( 140)					if ((num == this->curSelected)) {
HXLINE( 140)						lang->set_alpha(( (Float)(1) ));
            					}
            				}
            			}
            		}
HXLINE( 142)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 142)		_hx_tmp->play(::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + HX_("scrollMenu",4c,d4,18,06)),null(),true,null()),((Float)0.6),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(LanguageSubState_obj,changeSelected,(void))


::hx::ObjectPtr< LanguageSubState_obj > LanguageSubState_obj::__new() {
	::hx::ObjectPtr< LanguageSubState_obj > __this = new LanguageSubState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< LanguageSubState_obj > LanguageSubState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	LanguageSubState_obj *__this = (LanguageSubState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LanguageSubState_obj), true, "options.LanguageSubState"));
	*(void **)__this = LanguageSubState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

LanguageSubState_obj::LanguageSubState_obj()
{
}

void LanguageSubState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LanguageSubState);
	HX_MARK_MEMBER_NAME(grpLanguages,"grpLanguages");
	HX_MARK_MEMBER_NAME(languages,"languages");
	HX_MARK_MEMBER_NAME(displayLanguages,"displayLanguages");
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(changedLanguage,"changedLanguage");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void LanguageSubState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(grpLanguages,"grpLanguages");
	HX_VISIT_MEMBER_NAME(languages,"languages");
	HX_VISIT_MEMBER_NAME(displayLanguages,"displayLanguages");
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(changedLanguage,"changedLanguage");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val LanguageSubState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"languages") ) { return ::hx::Val( languages ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"grpLanguages") ) { return ::hx::Val( grpLanguages ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"changeSelected") ) { return ::hx::Val( changeSelected_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changedLanguage") ) { return ::hx::Val( changedLanguage ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"displayLanguages") ) { return ::hx::Val( displayLanguages ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val LanguageSubState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"languages") ) { languages=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"grpLanguages") ) { grpLanguages=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changedLanguage") ) { changedLanguage=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"displayLanguages") ) { displayLanguages=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LanguageSubState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("grpLanguages",76,fc,b6,ee));
	outFields->push(HX_("languages",1b,cd,3e,55));
	outFields->push(HX_("displayLanguages",79,2a,65,4d));
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("changedLanguage",6c,01,d8,d2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LanguageSubState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(LanguageSubState_obj,grpLanguages),HX_("grpLanguages",76,fc,b6,ee)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(LanguageSubState_obj,languages),HX_("languages",1b,cd,3e,55)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(LanguageSubState_obj,displayLanguages),HX_("displayLanguages",79,2a,65,4d)},
	{::hx::fsInt,(int)offsetof(LanguageSubState_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsBool,(int)offsetof(LanguageSubState_obj,changedLanguage),HX_("changedLanguage",6c,01,d8,d2)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LanguageSubState_obj_sStaticStorageInfo = 0;
#endif

static ::String LanguageSubState_obj_sMemberFields[] = {
	HX_("grpLanguages",76,fc,b6,ee),
	HX_("languages",1b,cd,3e,55),
	HX_("displayLanguages",79,2a,65,4d),
	HX_("curSelected",fb,eb,ab,32),
	HX_("changedLanguage",6c,01,d8,d2),
	HX_("update",09,86,05,87),
	HX_("changeSelected",eb,67,a8,0a),
	::String(null()) };

::hx::Class LanguageSubState_obj::__mClass;

void LanguageSubState_obj::__register()
{
	LanguageSubState_obj _hx_dummy;
	LanguageSubState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("options.LanguageSubState",19,dc,be,0a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LanguageSubState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LanguageSubState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LanguageSubState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LanguageSubState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace options
