// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxRuntimeShader
#include <flixel/addons/display/FlxRuntimeShader.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Bool
#include <openfl/display/ShaderParameter_Bool.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Int
#include <openfl/display/ShaderParameter_Int.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_880c0549bfe0a230_173_new,"flixel.addons.display.FlxRuntimeShader","new",0x1cb50fd2,"flixel.addons.display.FlxRuntimeShader.new","flixel/addons/display/FlxRuntimeShader.hx",173,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_194_setFloat,"flixel.addons.display.FlxRuntimeShader","setFloat",0x8534b1e8,"flixel.addons.display.FlxRuntimeShader.setFloat","flixel/addons/display/FlxRuntimeShader.hx",194,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_212_getFloat,"flixel.addons.display.FlxRuntimeShader","getFloat",0xd6d75874,"flixel.addons.display.FlxRuntimeShader.getFloat","flixel/addons/display/FlxRuntimeShader.hx",212,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_231_setFloatArray,"flixel.addons.display.FlxRuntimeShader","setFloatArray",0xc4b24291,"flixel.addons.display.FlxRuntimeShader.setFloatArray","flixel/addons/display/FlxRuntimeShader.hx",231,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_249_getFloatArray,"flixel.addons.display.FlxRuntimeShader","getFloatArray",0x7fac6085,"flixel.addons.display.FlxRuntimeShader.getFloatArray","flixel/addons/display/FlxRuntimeShader.hx",249,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_268_setInt,"flixel.addons.display.FlxRuntimeShader","setInt",0x75720e3b,"flixel.addons.display.FlxRuntimeShader.setInt","flixel/addons/display/FlxRuntimeShader.hx",268,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_286_getInt,"flixel.addons.display.FlxRuntimeShader","getInt",0xa929b9c7,"flixel.addons.display.FlxRuntimeShader.getInt","flixel/addons/display/FlxRuntimeShader.hx",286,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_305_setIntArray,"flixel.addons.display.FlxRuntimeShader","setIntArray",0xdc26595e,"flixel.addons.display.FlxRuntimeShader.setIntArray","flixel/addons/display/FlxRuntimeShader.hx",305,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_323_getIntArray,"flixel.addons.display.FlxRuntimeShader","getIntArray",0xd1b95252,"flixel.addons.display.FlxRuntimeShader.getIntArray","flixel/addons/display/FlxRuntimeShader.hx",323,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_342_setBool,"flixel.addons.display.FlxRuntimeShader","setBool",0x49baa55e,"flixel.addons.display.FlxRuntimeShader.setBool","flixel/addons/display/FlxRuntimeShader.hx",342,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_360_getBool,"flixel.addons.display.FlxRuntimeShader","getBool",0x56b91452,"flixel.addons.display.FlxRuntimeShader.getBool","flixel/addons/display/FlxRuntimeShader.hx",360,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_379_setBoolArray,"flixel.addons.display.FlxRuntimeShader","setBoolArray",0x64d8035b,"flixel.addons.display.FlxRuntimeShader.setBoolArray","flixel/addons/display/FlxRuntimeShader.hx",379,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_397_getBoolArray,"flixel.addons.display.FlxRuntimeShader","getBoolArray",0x4fdedfe7,"flixel.addons.display.FlxRuntimeShader.getBoolArray","flixel/addons/display/FlxRuntimeShader.hx",397,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_416_setSampler2D,"flixel.addons.display.FlxRuntimeShader","setSampler2D",0x46034526,"flixel.addons.display.FlxRuntimeShader.setSampler2D","flixel/addons/display/FlxRuntimeShader.hx",416,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_435_getSampler2D,"flixel.addons.display.FlxRuntimeShader","getSampler2D",0x310a21b2,"flixel.addons.display.FlxRuntimeShader.getSampler2D","flixel/addons/display/FlxRuntimeShader.hx",435,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_449___processGLData,"flixel.addons.display.FlxRuntimeShader","__processGLData",0x94f3b1f0,"flixel.addons.display.FlxRuntimeShader.__processGLData","flixel/addons/display/FlxRuntimeShader.hx",449,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_634_set_glFragmentSource,"flixel.addons.display.FlxRuntimeShader","set_glFragmentSource",0x91b5229b,"flixel.addons.display.FlxRuntimeShader.set_glFragmentSource","flixel/addons/display/FlxRuntimeShader.hx",634,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_645_set_glVertexSource,"flixel.addons.display.FlxRuntimeShader","set_glVertexSource",0x59e3712f,"flixel.addons.display.FlxRuntimeShader.set_glVertexSource","flixel/addons/display/FlxRuntimeShader.hx",645,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_31_boot,"flixel.addons.display.FlxRuntimeShader","boot",0xf9d1c880,"flixel.addons.display.FlxRuntimeShader.boot","flixel/addons/display/FlxRuntimeShader.hx",31,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_46_boot,"flixel.addons.display.FlxRuntimeShader","boot",0xf9d1c880,"flixel.addons.display.FlxRuntimeShader.boot","flixel/addons/display/FlxRuntimeShader.hx",46,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_57_boot,"flixel.addons.display.FlxRuntimeShader","boot",0xf9d1c880,"flixel.addons.display.FlxRuntimeShader.boot","flixel/addons/display/FlxRuntimeShader.hx",57,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_77_boot,"flixel.addons.display.FlxRuntimeShader","boot",0xf9d1c880,"flixel.addons.display.FlxRuntimeShader.boot","flixel/addons/display/FlxRuntimeShader.hx",77,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_126_boot,"flixel.addons.display.FlxRuntimeShader","boot",0xf9d1c880,"flixel.addons.display.FlxRuntimeShader.boot","flixel/addons/display/FlxRuntimeShader.hx",126,0x1150365d)
HX_LOCAL_STACK_FRAME(_hx_pos_880c0549bfe0a230_158_boot,"flixel.addons.display.FlxRuntimeShader","boot",0xf9d1c880,"flixel.addons.display.FlxRuntimeShader.boot","flixel/addons/display/FlxRuntimeShader.hx",158,0x1150365d)
namespace flixel{
namespace addons{
namespace display{

void FlxRuntimeShader_obj::__construct(::String fragmentSource,::String vertexSource){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_173_new)
HXLINE( 182)		if (::hx::IsNull( this->_hx___glFragmentSource )) {
HXLINE( 184)			this->_hx___glFragmentSource = HX_("\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tuniform bool hasTransform;\n\t\tuniform bool hasColorTransform;\n\n\t\tvec4 flixel_texture2D(sampler2D bitmap, vec2 coord)\n\t\t{\n\t\t\tvec4 color = texture2D(bitmap, coord);\n\t\t\tif (!hasTransform)\n\t\t\t{\n\t\t\t\treturn color;\n\t\t\t}\n\n\t\t\tif (color.a == 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tif (!hasColorTransform)\n\t\t\t{\n\t\t\t\treturn color * openfl_Alphav;\n\t\t\t}\n\n\t\t\tcolor = vec4(color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4(0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp(openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t}\n\t\n\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\tgl_FragColor = flixel_texture2D(bitmap, openfl_TextureCoordv);\n\t\t}",71,0e,7a,59);
            		}
HXLINE( 174)		if (::hx::IsNull( this->_hx___glVertexSource )) {
HXLINE( 176)			this->_hx___glVertexSource = HX_("\n\t\tattribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\t\n\t\tattribute float alpha;\n\t\tattribute vec4 colorMultiplier;\n\t\tattribute vec4 colorOffset;\n\t\tuniform bool hasColorTransform;\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t\t\n\t\t\topenfl_Alphav = openfl_Alpha * alpha;\n\t\t\t\n\t\t\tif (hasColorTransform)\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = colorOffset / 255.0;\n\t\t\t\topenfl_ColorMultiplierv = colorMultiplier;\n\t\t\t}\n\t\t}",f3,1e,fa,79);
            		}
HXLINE( 174)		bool _hx_tmp;
HXDLIN( 174)		if (::hx::IsNotNull( fragmentSource )) {
HXLINE( 174)			_hx_tmp = (fragmentSource.length > 0);
            		}
            		else {
HXLINE( 174)			_hx_tmp = false;
            		}
HXDLIN( 174)		if (_hx_tmp) {
HXLINE( 175)			this->set_glFragmentSource(fragmentSource);
            		}
            		else {
HXLINE( 177)			this->set_glFragmentSource(::flixel::addons::display::FlxRuntimeShader_obj::BASE_FRAGMENT_SOURCE);
            		}
HXLINE( 179)		bool _hx_tmp1;
HXDLIN( 179)		if (::hx::IsNotNull( vertexSource )) {
HXLINE( 179)			_hx_tmp1 = (vertexSource.length > 0);
            		}
            		else {
HXLINE( 179)			_hx_tmp1 = false;
            		}
HXDLIN( 179)		if (_hx_tmp1) {
HXLINE( 180)			this->set_glVertexSource(vertexSource);
            		}
            		else {
HXLINE( 182)			this->set_glVertexSource(::flixel::addons::display::FlxRuntimeShader_obj::BASE_VERTEX_SOURCE);
            		}
HXLINE( 184)		super::__construct();
HXLINE(  29)		this->_hx___isGenerated = true;
HXDLIN(  29)		this->_hx___initGL();
            	}

Dynamic FlxRuntimeShader_obj::__CreateEmpty() { return new FlxRuntimeShader_obj; }

void *FlxRuntimeShader_obj::_hx_vtable = 0;

Dynamic FlxRuntimeShader_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxRuntimeShader_obj > _hx_result = new FlxRuntimeShader_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxRuntimeShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1efca5b6) {
		if (inClassId<=(int)0x04f93fcd) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x04f93fcd;
		} else {
			return inClassId==(int)0x1efca5b6;
		}
	} else {
		return inClassId==(int)0x7517ccbe || inClassId==(int)0x78d8d737;
	}
}

void FlxRuntimeShader_obj::setFloat(::String name,Float value){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_194_setFloat)
HXLINE( 195)		 ::openfl::display::ShaderParameter_Float prop = ( ( ::openfl::display::ShaderParameter_Float)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 197)		if (::hx::IsNull( prop )) {
HXLINE( 199)			::flixel::FlxG_obj::log->advanced(((HX_("Shader float property \"",d6,82,bf,04) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 200)			return;
            		}
HXLINE( 203)		prop->value = ::Array_obj< Float >::__new(1)->init(0,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxRuntimeShader_obj,setFloat,(void))

 ::Dynamic FlxRuntimeShader_obj::getFloat(::String name){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_212_getFloat)
HXLINE( 213)		 ::openfl::display::ShaderParameter_Float prop = ( ( ::openfl::display::ShaderParameter_Float)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 215)		if (::hx::IsNull( prop )) {
HXLINE( 217)			::flixel::FlxG_obj::log->advanced(((HX_("Shader float property \"",d6,82,bf,04) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 218)			return null();
            		}
HXLINE( 221)		return prop->value->__get(0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxRuntimeShader_obj,getFloat,return )

void FlxRuntimeShader_obj::setFloatArray(::String name,::Array< Float > value){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_231_setFloatArray)
HXLINE( 232)		 ::openfl::display::ShaderParameter_Float prop = ( ( ::openfl::display::ShaderParameter_Float)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 234)		if (::hx::IsNull( prop )) {
HXLINE( 236)			::flixel::FlxG_obj::log->advanced(((HX_("Shader float[] property \"",34,38,4a,c0) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 237)			return;
            		}
HXLINE( 240)		prop->value = value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxRuntimeShader_obj,setFloatArray,(void))

::Array< Float > FlxRuntimeShader_obj::getFloatArray(::String name){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_249_getFloatArray)
HXLINE( 250)		 ::openfl::display::ShaderParameter_Float prop = ( ( ::openfl::display::ShaderParameter_Float)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 252)		if (::hx::IsNull( prop )) {
HXLINE( 254)			::flixel::FlxG_obj::log->advanced(((HX_("Shader float[] property \"",34,38,4a,c0) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 255)			return null();
            		}
HXLINE( 258)		return prop->value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxRuntimeShader_obj,getFloatArray,return )

void FlxRuntimeShader_obj::setInt(::String name,int value){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_268_setInt)
HXLINE( 269)		 ::openfl::display::ShaderParameter_Int prop = ( ( ::openfl::display::ShaderParameter_Int)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 271)		if (::hx::IsNull( prop )) {
HXLINE( 273)			::flixel::FlxG_obj::log->advanced(((HX_("Shader int property \"",a3,51,fe,e2) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 274)			return;
            		}
HXLINE( 277)		prop->value = ::Array_obj< int >::__new(1)->init(0,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxRuntimeShader_obj,setInt,(void))

 ::Dynamic FlxRuntimeShader_obj::getInt(::String name){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_286_getInt)
HXLINE( 287)		 ::openfl::display::ShaderParameter_Int prop = ( ( ::openfl::display::ShaderParameter_Int)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 289)		if (::hx::IsNull( prop )) {
HXLINE( 291)			::flixel::FlxG_obj::log->advanced(((HX_("Shader int property \"",a3,51,fe,e2) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 292)			return null();
            		}
HXLINE( 295)		return prop->value->__get(0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxRuntimeShader_obj,getInt,return )

void FlxRuntimeShader_obj::setIntArray(::String name,::Array< int > value){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_305_setIntArray)
HXLINE( 306)		 ::openfl::display::ShaderParameter_Int prop = ( ( ::openfl::display::ShaderParameter_Int)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 308)		if (::hx::IsNull( prop )) {
HXLINE( 310)			::flixel::FlxG_obj::log->advanced(((HX_("Shader int[] property \"",41,14,f4,c6) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 311)			return;
            		}
HXLINE( 314)		prop->value = value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxRuntimeShader_obj,setIntArray,(void))

::Array< int > FlxRuntimeShader_obj::getIntArray(::String name){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_323_getIntArray)
HXLINE( 324)		 ::openfl::display::ShaderParameter_Int prop = ( ( ::openfl::display::ShaderParameter_Int)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 326)		if (::hx::IsNull( prop )) {
HXLINE( 328)			::flixel::FlxG_obj::log->advanced(((HX_("Shader int[] property \"",41,14,f4,c6) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 329)			return null();
            		}
HXLINE( 332)		return prop->value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxRuntimeShader_obj,getIntArray,return )

void FlxRuntimeShader_obj::setBool(::String name,bool value){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_342_setBool)
HXLINE( 343)		 ::openfl::display::ShaderParameter_Bool prop = ( ( ::openfl::display::ShaderParameter_Bool)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 345)		if (::hx::IsNull( prop )) {
HXLINE( 347)			::flixel::FlxG_obj::log->advanced(((HX_("Shader bool property \"",f2,34,e3,79) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 348)			return;
            		}
HXLINE( 351)		prop->value = ::Array_obj< bool >::__new(1)->init(0,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxRuntimeShader_obj,setBool,(void))

 ::Dynamic FlxRuntimeShader_obj::getBool(::String name){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_360_getBool)
HXLINE( 361)		 ::openfl::display::ShaderParameter_Bool prop = ( ( ::openfl::display::ShaderParameter_Bool)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 363)		if (::hx::IsNull( prop )) {
HXLINE( 365)			::flixel::FlxG_obj::log->advanced(((HX_("Shader bool property \"",f2,34,e3,79) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 366)			return null();
            		}
HXLINE( 369)		return prop->value->__get(0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxRuntimeShader_obj,getBool,return )

void FlxRuntimeShader_obj::setBoolArray(::String name,::Array< bool > value){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_379_setBoolArray)
HXLINE( 380)		 ::openfl::display::ShaderParameter_Bool prop = ( ( ::openfl::display::ShaderParameter_Bool)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 382)		if (::hx::IsNull( prop )) {
HXLINE( 384)			::flixel::FlxG_obj::log->advanced(((HX_("Shader bool[] property \"",50,a9,53,8b) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 385)			return;
            		}
HXLINE( 388)		prop->value = value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxRuntimeShader_obj,setBoolArray,(void))

::Array< bool > FlxRuntimeShader_obj::getBoolArray(::String name){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_397_getBoolArray)
HXLINE( 398)		 ::openfl::display::ShaderParameter_Bool prop = ( ( ::openfl::display::ShaderParameter_Bool)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 400)		if (::hx::IsNull( prop )) {
HXLINE( 402)			::flixel::FlxG_obj::log->advanced(((HX_("Shader bool[] property \"",50,a9,53,8b) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 403)			return null();
            		}
HXLINE( 406)		return prop->value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxRuntimeShader_obj,getBoolArray,return )

void FlxRuntimeShader_obj::setSampler2D(::String name, ::openfl::display::BitmapData value){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_416_setSampler2D)
HXLINE( 417)		 ::openfl::display::ShaderInput_openfl_display_BitmapData prop = ( ( ::openfl::display::ShaderInput_openfl_display_BitmapData)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 419)		if (::hx::IsNull( prop )) {
HXLINE( 421)			::flixel::FlxG_obj::log->advanced(((HX_("Shader sampler2D property \"",d8,6b,06,f8) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 422)			return;
            		}
HXLINE( 425)		prop->input = value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxRuntimeShader_obj,setSampler2D,(void))

 ::openfl::display::BitmapData FlxRuntimeShader_obj::getSampler2D(::String name){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_435_getSampler2D)
HXLINE( 436)		 ::openfl::display::ShaderInput_openfl_display_BitmapData prop = ( ( ::openfl::display::ShaderInput_openfl_display_BitmapData)(::Reflect_obj::field(this->get_data(),name)) );
HXLINE( 438)		if (::hx::IsNull( prop )) {
HXLINE( 440)			::flixel::FlxG_obj::log->advanced(((HX_("Shader sampler2D property \"",d8,6b,06,f8) + name) + HX_("\" not found.",57,86,fb,0a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 441)			return null();
            		}
HXLINE( 444)		return prop->input;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxRuntimeShader_obj,getSampler2D,return )

void FlxRuntimeShader_obj::_hx___processGLData(::String source,::String storageType){
            	HX_GC_STACKFRAME(&_hx_pos_880c0549bfe0a230_449___processGLData)
HXLINE( 450)		int lastMatch = 0;
HXDLIN( 450)		 ::Dynamic position;
HXDLIN( 450)		 ::EReg regex;
HXDLIN( 450)		::String name;
HXDLIN( 450)		::String type;
HXLINE( 452)		if ((storageType == HX_("uniform",34,41,64,b5))) {
HXLINE( 454)			regex =  ::EReg_obj::__alloc( HX_CTX ,HX_("uniform ([A-Za-z0-9]+) ([A-Za-z0-9_]+)",e3,a8,c0,f8),HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 458)			regex =  ::EReg_obj::__alloc( HX_CTX ,HX_("attribute ([A-Za-z0-9]+) ([A-Za-z0-9_]+)",fb,2e,25,cc),HX_("",00,00,00,00));
            		}
HXLINE( 462)		while(regex->matchSub(source,lastMatch,null())){
HXLINE( 464)			type = regex->matched(1);
HXLINE( 465)			name = regex->matched(2);
HXLINE( 467)			if (::StringTools_obj::startsWith(name,HX_("gl_",9a,86,4e,00))) {
HXLINE( 468)				continue;
            			}
HXLINE( 470)			bool isUniform = (storageType == HX_("uniform",34,41,64,b5));
HXLINE( 472)			if (::StringTools_obj::startsWith(type,HX_("sampler",08,c5,c9,83))) {
HXLINE( 474)				 ::openfl::display::ShaderInput_openfl_display_BitmapData input =  ::openfl::display::ShaderInput_openfl_display_BitmapData_obj::__alloc( HX_CTX );
HXLINE( 475)				input->name = name;
HXLINE( 476)				input->_hx___isUniform = isUniform;
HXLINE( 477)				this->_hx___inputBitmapData->push(input);
HXLINE( 479)				::String _hx_switch_0 = name;
            				if (  (_hx_switch_0==HX_("bitmap",ef,0f,0c,f1)) ){
HXLINE( 484)					this->_hx___bitmap = input;
HXDLIN( 484)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_0==HX_("openfl_Texture",cc,bd,e4,7e)) ){
HXLINE( 482)					this->_hx___texture = input;
HXDLIN( 482)					goto _hx_goto_16;
            				}
            				/* default */{
            				}
            				_hx_goto_16:;
HXLINE( 488)				::Reflect_obj::setField(this->_hx___data,name,input);
HXLINE( 490)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 492)					if (this->_hx___isGenerated) {
HXLINE( 493)						::Reflect_obj::setField(::hx::ObjectPtr<OBJ_>(this),name,input);
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE( 495)						{
HXLINE( 495)							null();
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            			else {
HXLINE( 497)				bool _hx_tmp;
HXDLIN( 497)				if (::Reflect_obj::hasField(this->_hx___data,name)) {
HXLINE( 497)					_hx_tmp = ::hx::IsNull( ::Reflect_obj::field(this->_hx___data,name) );
            				}
            				else {
HXLINE( 497)					_hx_tmp = true;
            				}
HXDLIN( 497)				if (_hx_tmp) {
HXLINE( 499)					 ::Dynamic parameterType;
HXDLIN( 499)					::String _hx_switch_1 = type;
            					if (  (_hx_switch_1==HX_("bool",2a,84,1b,41)) ){
HXLINE( 499)						parameterType = 0;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_1==HX_("bvec2",c0,00,91,bb)) ){
HXLINE( 499)						parameterType = 1;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_1==HX_("bvec3",c1,00,91,bb)) ){
HXLINE( 499)						parameterType = 2;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_1==HX_("bvec4",c2,00,91,bb)) ){
HXLINE( 499)						parameterType = 3;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_1==HX_("dvec2",c2,29,5e,e2)) ||  (_hx_switch_1==HX_("vec2",5e,27,4c,4e)) ){
HXLINE( 499)						parameterType = 5;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_1==HX_("dvec3",c3,29,5e,e2)) ||  (_hx_switch_1==HX_("vec3",5f,27,4c,4e)) ){
HXLINE( 499)						parameterType = 6;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_1==HX_("dvec4",c4,29,5e,e2)) ||  (_hx_switch_1==HX_("vec4",60,27,4c,4e)) ){
HXLINE( 499)						parameterType = 7;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_1==HX_("double",11,2b,cb,32)) ||  (_hx_switch_1==HX_("float",9c,c5,96,02)) ){
HXLINE( 499)						parameterType = 4;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_1==HX_("mat2",92,41,56,48)) ||  (_hx_switch_1==HX_("mat2x2",cc,b2,97,bb)) ){
HXLINE( 499)						parameterType = 12;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_1==HX_("mat2x3",cd,b2,97,bb)) ){
HXLINE( 499)						parameterType = 13;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_1==HX_("mat2x4",ce,b2,97,bb)) ){
HXLINE( 499)						parameterType = 14;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_1==HX_("mat3x2",0d,75,98,bb)) ){
HXLINE( 499)						parameterType = 15;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_1==HX_("mat3",93,41,56,48)) ||  (_hx_switch_1==HX_("mat3x3",0e,75,98,bb)) ){
HXLINE( 499)						parameterType = 16;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_1==HX_("mat3x4",0f,75,98,bb)) ){
HXLINE( 499)						parameterType = 17;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_1==HX_("mat4x2",4e,37,99,bb)) ){
HXLINE( 499)						parameterType = 18;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_1==HX_("mat4x3",4f,37,99,bb)) ){
HXLINE( 499)						parameterType = 19;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_1==HX_("mat4",94,41,56,48)) ||  (_hx_switch_1==HX_("mat4x4",50,37,99,bb)) ){
HXLINE( 499)						parameterType = 20;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_1==HX_("int",ef,0c,50,00)) ||  (_hx_switch_1==HX_("uint",9a,03,a6,4d)) ){
HXLINE( 499)						parameterType = 8;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_1==HX_("ivec2",47,10,5f,c3)) ||  (_hx_switch_1==HX_("uvec2",53,06,2e,ac)) ){
HXLINE( 499)						parameterType = 9;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_1==HX_("ivec3",48,10,5f,c3)) ||  (_hx_switch_1==HX_("uvec3",54,06,2e,ac)) ){
HXLINE( 499)						parameterType = 10;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					if (  (_hx_switch_1==HX_("ivec4",49,10,5f,c3)) ||  (_hx_switch_1==HX_("uvec4",55,06,2e,ac)) ){
HXLINE( 499)						parameterType = 11;
HXDLIN( 499)						goto _hx_goto_17;
            					}
            					/* default */{
HXLINE( 499)						parameterType = null();
            					}
            					_hx_goto_17:;
HXLINE( 525)					int length;
HXDLIN( 525)					 ::Dynamic _hx_switch_2 = parameterType;
            					if (  (_hx_switch_2==1) ||  (_hx_switch_2==5) ||  (_hx_switch_2==9) ){
HXLINE( 525)						length = 2;
HXDLIN( 525)						goto _hx_goto_18;
            					}
            					if (  (_hx_switch_2==2) ||  (_hx_switch_2==6) ||  (_hx_switch_2==10) ){
HXLINE( 525)						length = 3;
HXDLIN( 525)						goto _hx_goto_18;
            					}
            					if (  (_hx_switch_2==3) ||  (_hx_switch_2==7) ||  (_hx_switch_2==11) ||  (_hx_switch_2==12) ){
HXLINE( 525)						length = 4;
HXDLIN( 525)						goto _hx_goto_18;
            					}
            					if (  (_hx_switch_2==16) ){
HXLINE( 525)						length = 9;
HXDLIN( 525)						goto _hx_goto_18;
            					}
            					if (  (_hx_switch_2==20) ){
HXLINE( 525)						length = 16;
HXDLIN( 525)						goto _hx_goto_18;
            					}
            					/* default */{
HXLINE( 525)						length = 1;
            					}
            					_hx_goto_18:;
HXLINE( 535)					int arrayLength;
HXDLIN( 535)					 ::Dynamic _hx_switch_3 = parameterType;
            					if (  (_hx_switch_3==12) ){
HXLINE( 535)						arrayLength = 2;
HXDLIN( 535)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_3==16) ){
HXLINE( 535)						arrayLength = 3;
HXDLIN( 535)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_3==20) ){
HXLINE( 535)						arrayLength = 4;
HXDLIN( 535)						goto _hx_goto_19;
            					}
            					/* default */{
HXLINE( 535)						arrayLength = 1;
            					}
            					_hx_goto_19:;
HXLINE( 543)					 ::Dynamic _hx_switch_4 = parameterType;
            					if (  (_hx_switch_4==0) ||  (_hx_switch_4==1) ||  (_hx_switch_4==2) ||  (_hx_switch_4==3) ){
HXLINE( 546)						 ::openfl::display::ShaderParameter_Bool parameter =  ::openfl::display::ShaderParameter_Bool_obj::__alloc( HX_CTX );
HXLINE( 547)						parameter->set_name(name);
HXLINE( 548)						parameter->type = parameterType;
HXLINE( 549)						parameter->_hx___arrayLength = arrayLength;
HXLINE( 550)						parameter->_hx___isBool = true;
HXLINE( 551)						parameter->_hx___isUniform = isUniform;
HXLINE( 552)						parameter->__length = length;
HXLINE( 553)						this->_hx___paramBool->push(parameter);
HXLINE( 555)						if ((name == HX_("openfl_HasColorTransform",b4,00,4b,62))) {
HXLINE( 557)							this->_hx___hasColorTransform = parameter;
            						}
HXLINE( 560)						::Reflect_obj::setField(this->_hx___data,name,parameter);
HXLINE( 562)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 564)							if (this->_hx___isGenerated) {
HXLINE( 565)								::Reflect_obj::setField(::hx::ObjectPtr<OBJ_>(this),name,parameter);
            							}
            						} catch( ::Dynamic _hx_e) {
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic _g1 = _hx_e;
HXLINE( 567)								{
HXLINE( 567)									null();
            								}
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
HXLINE( 545)						goto _hx_goto_21;
            					}
            					if (  (_hx_switch_4==8) ||  (_hx_switch_4==9) ||  (_hx_switch_4==10) ||  (_hx_switch_4==11) ){
HXLINE( 570)						 ::openfl::display::ShaderParameter_Int parameter1 =  ::openfl::display::ShaderParameter_Int_obj::__alloc( HX_CTX );
HXLINE( 571)						parameter1->set_name(name);
HXLINE( 572)						parameter1->type = parameterType;
HXLINE( 573)						parameter1->_hx___arrayLength = arrayLength;
HXLINE( 574)						parameter1->_hx___isInt = true;
HXLINE( 575)						parameter1->_hx___isUniform = isUniform;
HXLINE( 576)						parameter1->__length = length;
HXLINE( 577)						this->_hx___paramInt->push(parameter1);
HXLINE( 579)						::Reflect_obj::setField(this->_hx___data,name,parameter1);
HXLINE( 581)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 583)							if (this->_hx___isGenerated) {
HXLINE( 584)								::Reflect_obj::setField(::hx::ObjectPtr<OBJ_>(this),name,parameter1);
            							}
            						} catch( ::Dynamic _hx_e) {
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic _g2 = _hx_e;
HXLINE( 586)								{
HXLINE( 586)									null();
            								}
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
HXLINE( 569)						goto _hx_goto_21;
            					}
            					/* default */{
HXLINE( 589)						 ::openfl::display::ShaderParameter_Float parameter2 =  ::openfl::display::ShaderParameter_Float_obj::__alloc( HX_CTX );
HXLINE( 590)						parameter2->set_name(name);
HXLINE( 591)						parameter2->type = parameterType;
HXLINE( 592)						parameter2->_hx___arrayLength = arrayLength;
HXLINE( 594)						if ((arrayLength > 0)) {
HXLINE( 595)							 ::Dynamic elements = (arrayLength * arrayLength);
HXDLIN( 595)							 ::haxe::io::Bytes buffer = null();
HXDLIN( 595)							::cpp::VirtualArray array = null();
HXDLIN( 595)							 ::openfl::_Vector::FloatVector vector = null();
HXDLIN( 595)							 ::lime::utils::ArrayBufferView view = null();
HXDLIN( 595)							 ::Dynamic len = null();
HXDLIN( 595)							 ::lime::utils::ArrayBufferView this1;
HXDLIN( 595)							if (::hx::IsNotNull( elements )) {
HXLINE( 595)								this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,8);
            							}
            							else {
HXLINE( 595)								if (::hx::IsNotNull( array )) {
HXLINE( 595)									 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 595)									_this->byteOffset = 0;
HXDLIN( 595)									_this->length = array->get_length();
HXDLIN( 595)									_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 595)									_this->buffer = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 595)									_this->copyFromArray(array,null());
HXDLIN( 595)									this1 = _this;
            								}
            								else {
HXLINE( 595)									if (::hx::IsNotNull( vector )) {
HXLINE( 595)										 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 595)										::cpp::VirtualArray array1 = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN( 595)										_this1->byteOffset = 0;
HXDLIN( 595)										_this1->length = array1->get_length();
HXDLIN( 595)										_this1->byteLength = (_this1->length * _this1->bytesPerElement);
HXDLIN( 595)										_this1->buffer = ::haxe::io::Bytes_obj::alloc(_this1->byteLength);
HXDLIN( 595)										_this1->copyFromArray(array1,null());
HXDLIN( 595)										this1 = _this1;
            									}
            									else {
HXLINE( 595)										if (::hx::IsNotNull( view )) {
HXLINE( 595)											 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 595)											 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN( 595)											int srcLength = view->length;
HXDLIN( 595)											int srcByteOffset = view->byteOffset;
HXDLIN( 595)											int srcElementSize = view->bytesPerElement;
HXDLIN( 595)											int elementSize = _this2->bytesPerElement;
HXDLIN( 595)											if ((view->type == _this2->type)) {
HXLINE( 595)												int srcLength1 = srcData->length;
HXDLIN( 595)												int cloneLength = (srcLength1 - srcByteOffset);
HXDLIN( 595)												_this2->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 595)												_this2->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            											}
            											else {
HXLINE( 595)												HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            											}
HXDLIN( 595)											_this2->byteLength = (_this2->bytesPerElement * srcLength);
HXDLIN( 595)											_this2->byteOffset = 0;
HXDLIN( 595)											_this2->length = srcLength;
HXDLIN( 595)											this1 = _this2;
            										}
            										else {
HXLINE( 595)											if (::hx::IsNotNull( buffer )) {
HXLINE( 595)												 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,8);
HXDLIN( 595)												int in_byteOffset = 0;
HXDLIN( 595)												if ((in_byteOffset < 0)) {
HXLINE( 595)													HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            												}
HXDLIN( 595)												if ((::hx::Mod(in_byteOffset,_this3->bytesPerElement) != 0)) {
HXLINE( 595)													HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            												}
HXDLIN( 595)												int bufferByteLength = buffer->length;
HXDLIN( 595)												int elementSize1 = _this3->bytesPerElement;
HXDLIN( 595)												int newByteLength = bufferByteLength;
HXDLIN( 595)												if (::hx::IsNull( len )) {
HXLINE( 595)													newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN( 595)													if ((::hx::Mod(bufferByteLength,_this3->bytesPerElement) != 0)) {
HXLINE( 595)														HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            													}
HXDLIN( 595)													if ((newByteLength < 0)) {
HXLINE( 595)														HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            													}
            												}
            												else {
HXLINE( 595)													newByteLength = (( (int)(len) ) * _this3->bytesPerElement);
HXDLIN( 595)													int newRange = (in_byteOffset + newByteLength);
HXDLIN( 595)													if ((newRange > bufferByteLength)) {
HXLINE( 595)														HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            													}
            												}
HXDLIN( 595)												_this3->buffer = buffer;
HXDLIN( 595)												_this3->byteOffset = in_byteOffset;
HXDLIN( 595)												_this3->byteLength = newByteLength;
HXDLIN( 595)												_this3->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this3->bytesPerElement) )));
HXDLIN( 595)												this1 = _this3;
            											}
            											else {
HXLINE( 595)												HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            											}
            										}
            									}
            								}
            							}
HXDLIN( 595)							parameter2->_hx___uniformMatrix = this1;
            						}
HXLINE( 597)						parameter2->_hx___isFloat = true;
HXLINE( 598)						parameter2->_hx___isUniform = isUniform;
HXLINE( 599)						parameter2->__length = length;
HXLINE( 600)						this->_hx___paramFloat->push(parameter2);
HXLINE( 602)						if (::StringTools_obj::startsWith(name,HX_("openfl_",cf,ba,42,40))) {
HXLINE( 604)							::String _hx_switch_5 = name;
            							if (  (_hx_switch_5==HX_("openfl_Alpha",0f,ce,3e,6a)) ){
HXLINE( 606)								this->_hx___alpha = parameter2;
HXDLIN( 606)								goto _hx_goto_20;
            							}
            							if (  (_hx_switch_5==HX_("openfl_ColorMultiplier",b5,e4,dc,18)) ){
HXLINE( 607)								this->_hx___colorMultiplier = parameter2;
HXDLIN( 607)								goto _hx_goto_20;
            							}
            							if (  (_hx_switch_5==HX_("openfl_ColorOffset",c7,ea,07,41)) ){
HXLINE( 608)								this->_hx___colorOffset = parameter2;
HXDLIN( 608)								goto _hx_goto_20;
            							}
            							if (  (_hx_switch_5==HX_("openfl_Matrix",70,ea,41,06)) ){
HXLINE( 609)								this->_hx___matrix = parameter2;
HXDLIN( 609)								goto _hx_goto_20;
            							}
            							if (  (_hx_switch_5==HX_("openfl_Position",98,fe,6c,ee)) ){
HXLINE( 610)								this->_hx___position = parameter2;
HXDLIN( 610)								goto _hx_goto_20;
            							}
            							if (  (_hx_switch_5==HX_("openfl_TextureCoord",49,e9,27,e8)) ){
HXLINE( 611)								this->_hx___textureCoord = parameter2;
HXDLIN( 611)								goto _hx_goto_20;
            							}
            							if (  (_hx_switch_5==HX_("openfl_TextureSize",ad,60,72,29)) ){
HXLINE( 612)								this->_hx___textureSize = parameter2;
HXDLIN( 612)								goto _hx_goto_20;
            							}
            							/* default */{
            							}
            							_hx_goto_20:;
            						}
HXLINE( 617)						::Reflect_obj::setField(this->_hx___data,name,parameter2);
HXLINE( 619)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 621)							if (this->_hx___isGenerated) {
HXLINE( 622)								::Reflect_obj::setField(::hx::ObjectPtr<OBJ_>(this),name,parameter2);
            							}
            						} catch( ::Dynamic _hx_e) {
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic _g3 = _hx_e;
HXLINE( 624)								{
HXLINE( 624)									null();
            								}
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
            					}
            					_hx_goto_21:;
            				}
            			}
HXLINE( 628)			position = regex->matchedPos();
HXLINE( 629)			lastMatch = ( (int)((position->__Field(HX_("pos",94,5d,55,00),::hx::paccDynamic) + position->__Field(HX_("len",d5,4b,52,00),::hx::paccDynamic))) );
            		}
            	}


::String FlxRuntimeShader_obj::set_glFragmentSource(::String value){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_634_set_glFragmentSource)
HXLINE( 635)		if (::hx::IsNotNull( value )) {
HXLINE( 636)			value = ::StringTools_obj::replace(::StringTools_obj::replace(value,HX_("#pragma header",6e,d2,fa,47),::flixel::addons::display::FlxRuntimeShader_obj::BASE_FRAGMENT_HEADER),HX_("#pragma body",43,99,98,1b),::flixel::addons::display::FlxRuntimeShader_obj::BASE_FRAGMENT_BODY);
            		}
HXLINE( 638)		if ((value != this->_hx___glFragmentSource)) {
HXLINE( 639)			this->_hx___glSourceDirty = true;
            		}
HXLINE( 641)		return (this->_hx___glFragmentSource = value);
            	}


::String FlxRuntimeShader_obj::set_glVertexSource(::String value){
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_645_set_glVertexSource)
HXLINE( 646)		if (::hx::IsNotNull( value )) {
HXLINE( 647)			value = ::StringTools_obj::replace(::StringTools_obj::replace(value,HX_("#pragma header",6e,d2,fa,47),::flixel::addons::display::FlxRuntimeShader_obj::BASE_VERTEX_HEADER),HX_("#pragma body",43,99,98,1b),::flixel::addons::display::FlxRuntimeShader_obj::BASE_VERTEX_BODY);
            		}
HXLINE( 649)		if ((value != this->_hx___glVertexSource)) {
HXLINE( 650)			this->_hx___glSourceDirty = true;
            		}
HXLINE( 652)		return (this->_hx___glVertexSource = value);
            	}


::String FlxRuntimeShader_obj::BASE_VERTEX_HEADER;

::String FlxRuntimeShader_obj::BASE_VERTEX_BODY;

::String FlxRuntimeShader_obj::BASE_VERTEX_SOURCE;

::String FlxRuntimeShader_obj::BASE_FRAGMENT_HEADER;

::String FlxRuntimeShader_obj::BASE_FRAGMENT_BODY;

::String FlxRuntimeShader_obj::BASE_FRAGMENT_SOURCE;


::hx::ObjectPtr< FlxRuntimeShader_obj > FlxRuntimeShader_obj::__new(::String fragmentSource,::String vertexSource) {
	::hx::ObjectPtr< FlxRuntimeShader_obj > __this = new FlxRuntimeShader_obj();
	__this->__construct(fragmentSource,vertexSource);
	return __this;
}

::hx::ObjectPtr< FlxRuntimeShader_obj > FlxRuntimeShader_obj::__alloc(::hx::Ctx *_hx_ctx,::String fragmentSource,::String vertexSource) {
	FlxRuntimeShader_obj *__this = (FlxRuntimeShader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxRuntimeShader_obj), true, "flixel.addons.display.FlxRuntimeShader"));
	*(void **)__this = FlxRuntimeShader_obj::_hx_vtable;
	__this->__construct(fragmentSource,vertexSource);
	return __this;
}

FlxRuntimeShader_obj::FlxRuntimeShader_obj()
{
}

::hx::Val FlxRuntimeShader_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"setInt") ) { return ::hx::Val( setInt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getInt") ) { return ::hx::Val( getInt_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setBool") ) { return ::hx::Val( setBool_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBool") ) { return ::hx::Val( getBool_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setFloat") ) { return ::hx::Val( setFloat_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFloat") ) { return ::hx::Val( getFloat_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setIntArray") ) { return ::hx::Val( setIntArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"getIntArray") ) { return ::hx::Val( getIntArray_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setBoolArray") ) { return ::hx::Val( setBoolArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBoolArray") ) { return ::hx::Val( getBoolArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSampler2D") ) { return ::hx::Val( setSampler2D_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSampler2D") ) { return ::hx::Val( getSampler2D_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setFloatArray") ) { return ::hx::Val( setFloatArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFloatArray") ) { return ::hx::Val( getFloatArray_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__processGLData") ) { return ::hx::Val( _hx___processGLData_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"set_glVertexSource") ) { return ::hx::Val( set_glVertexSource_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"set_glFragmentSource") ) { return ::hx::Val( set_glFragmentSource_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxRuntimeShader_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"BASE_VERTEX_BODY") ) { outValue = ( BASE_VERTEX_BODY ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"BASE_VERTEX_HEADER") ) { outValue = ( BASE_VERTEX_HEADER ); return true; }
		if (HX_FIELD_EQ(inName,"BASE_VERTEX_SOURCE") ) { outValue = ( BASE_VERTEX_SOURCE ); return true; }
		if (HX_FIELD_EQ(inName,"BASE_FRAGMENT_BODY") ) { outValue = ( BASE_FRAGMENT_BODY ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"BASE_FRAGMENT_HEADER") ) { outValue = ( BASE_FRAGMENT_HEADER ); return true; }
		if (HX_FIELD_EQ(inName,"BASE_FRAGMENT_SOURCE") ) { outValue = ( BASE_FRAGMENT_SOURCE ); return true; }
	}
	return false;
}

bool FlxRuntimeShader_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"BASE_VERTEX_BODY") ) { BASE_VERTEX_BODY=ioValue.Cast< ::String >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"BASE_VERTEX_HEADER") ) { BASE_VERTEX_HEADER=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"BASE_VERTEX_SOURCE") ) { BASE_VERTEX_SOURCE=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"BASE_FRAGMENT_BODY") ) { BASE_FRAGMENT_BODY=ioValue.Cast< ::String >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"BASE_FRAGMENT_HEADER") ) { BASE_FRAGMENT_HEADER=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"BASE_FRAGMENT_SOURCE") ) { BASE_FRAGMENT_SOURCE=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxRuntimeShader_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo FlxRuntimeShader_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &FlxRuntimeShader_obj::BASE_VERTEX_HEADER,HX_("BASE_VERTEX_HEADER",5a,f0,bf,21)},
	{::hx::fsString,(void *) &FlxRuntimeShader_obj::BASE_VERTEX_BODY,HX_("BASE_VERTEX_BODY",2f,40,b5,37)},
	{::hx::fsString,(void *) &FlxRuntimeShader_obj::BASE_VERTEX_SOURCE,HX_("BASE_VERTEX_SOURCE",a8,97,f1,56)},
	{::hx::fsString,(void *) &FlxRuntimeShader_obj::BASE_FRAGMENT_HEADER,HX_("BASE_FRAGMENT_HEADER",ee,55,99,a4)},
	{::hx::fsString,(void *) &FlxRuntimeShader_obj::BASE_FRAGMENT_BODY,HX_("BASE_FRAGMENT_BODY",c3,58,28,25)},
	{::hx::fsString,(void *) &FlxRuntimeShader_obj::BASE_FRAGMENT_SOURCE,HX_("BASE_FRAGMENT_SOURCE",3c,fd,ca,d9)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxRuntimeShader_obj_sMemberFields[] = {
	HX_("setFloat",9a,2e,cb,10),
	HX_("getFloat",26,d5,6d,62),
	HX_("setFloatArray",9f,80,a0,e5),
	HX_("getFloatArray",93,9e,9a,a0),
	HX_("setInt",6d,9a,67,6f),
	HX_("getInt",f9,45,1f,a3),
	HX_("setIntArray",ec,57,6d,9e),
	HX_("getIntArray",e0,50,00,94),
	HX_("setBool",ec,c4,9f,06),
	HX_("getBool",e0,33,9e,13),
	HX_("setBoolArray",0d,c1,af,a0),
	HX_("getBoolArray",99,9d,b6,8b),
	HX_("setSampler2D",d8,02,db,81),
	HX_("getSampler2D",64,df,e1,6c),
	HX_("__processGLData",7e,0f,78,7c),
	HX_("set_glFragmentSource",4d,e2,ec,e2),
	HX_("set_glVertexSource",61,80,93,d3),
	::String(null()) };

static void FlxRuntimeShader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxRuntimeShader_obj::BASE_VERTEX_HEADER,"BASE_VERTEX_HEADER");
	HX_MARK_MEMBER_NAME(FlxRuntimeShader_obj::BASE_VERTEX_BODY,"BASE_VERTEX_BODY");
	HX_MARK_MEMBER_NAME(FlxRuntimeShader_obj::BASE_VERTEX_SOURCE,"BASE_VERTEX_SOURCE");
	HX_MARK_MEMBER_NAME(FlxRuntimeShader_obj::BASE_FRAGMENT_HEADER,"BASE_FRAGMENT_HEADER");
	HX_MARK_MEMBER_NAME(FlxRuntimeShader_obj::BASE_FRAGMENT_BODY,"BASE_FRAGMENT_BODY");
	HX_MARK_MEMBER_NAME(FlxRuntimeShader_obj::BASE_FRAGMENT_SOURCE,"BASE_FRAGMENT_SOURCE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxRuntimeShader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxRuntimeShader_obj::BASE_VERTEX_HEADER,"BASE_VERTEX_HEADER");
	HX_VISIT_MEMBER_NAME(FlxRuntimeShader_obj::BASE_VERTEX_BODY,"BASE_VERTEX_BODY");
	HX_VISIT_MEMBER_NAME(FlxRuntimeShader_obj::BASE_VERTEX_SOURCE,"BASE_VERTEX_SOURCE");
	HX_VISIT_MEMBER_NAME(FlxRuntimeShader_obj::BASE_FRAGMENT_HEADER,"BASE_FRAGMENT_HEADER");
	HX_VISIT_MEMBER_NAME(FlxRuntimeShader_obj::BASE_FRAGMENT_BODY,"BASE_FRAGMENT_BODY");
	HX_VISIT_MEMBER_NAME(FlxRuntimeShader_obj::BASE_FRAGMENT_SOURCE,"BASE_FRAGMENT_SOURCE");
};

#endif

::hx::Class FlxRuntimeShader_obj::__mClass;

static ::String FlxRuntimeShader_obj_sStaticFields[] = {
	HX_("BASE_VERTEX_HEADER",5a,f0,bf,21),
	HX_("BASE_VERTEX_BODY",2f,40,b5,37),
	HX_("BASE_VERTEX_SOURCE",a8,97,f1,56),
	HX_("BASE_FRAGMENT_HEADER",ee,55,99,a4),
	HX_("BASE_FRAGMENT_BODY",c3,58,28,25),
	HX_("BASE_FRAGMENT_SOURCE",3c,fd,ca,d9),
	::String(null())
};

void FlxRuntimeShader_obj::__register()
{
	FlxRuntimeShader_obj _hx_dummy;
	FlxRuntimeShader_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.addons.display.FlxRuntimeShader",e0,7e,20,77);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxRuntimeShader_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxRuntimeShader_obj::__SetStatic;
	__mClass->mMarkFunc = FlxRuntimeShader_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxRuntimeShader_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxRuntimeShader_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxRuntimeShader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxRuntimeShader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxRuntimeShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxRuntimeShader_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxRuntimeShader_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_31_boot)
HXDLIN(  31)		BASE_VERTEX_HEADER = HX_("attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;",a7,dc,73,71);
            	}
{
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_46_boot)
HXDLIN(  46)		BASE_VERTEX_BODY = HX_("openfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform)\n\t\t{\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;",28,32,58,be);
            	}
{
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_57_boot)
HXDLIN(  57)		BASE_VERTEX_SOURCE = HX_("#pragma header\n\n\t\tattribute float alpha;\n\t\tattribute vec4 colorMultiplier;\n\t\tattribute vec4 colorOffset;\n\t\tuniform bool hasColorTransform;\n\n\t\tvoid main(void)\n\t\t{\n\t\t\t#pragma body\n\n\t\t\topenfl_Alphav = openfl_Alpha * alpha;\n\n\t\t\tif (hasColorTransform)\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = colorOffset / 255.0;\n\t\t\t\topenfl_ColorMultiplierv = colorMultiplier;\n\t\t\t}\n\t\t}",cd,cb,f5,b9);
            	}
{
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_77_boot)
HXDLIN(  77)		BASE_FRAGMENT_HEADER = HX_("varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tuniform bool hasTransform;\n\t\tuniform bool hasColorTransform;\n\n\t\tvec4 flixel_texture2D(sampler2D bitmap, vec2 coord)\n\t\t{\n\t\t\tvec4 color = texture2D(bitmap, coord);\n\n\t\t\tif (!hasTransform)\n\t\t\t{\n\t\t\t\treturn color;\n\t\t\t}\n\n\t\t\tif (color.a == 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tif (!hasColorTransform)\n\t\t\t{\n\t\t\t\treturn color * openfl_Alphav;\n\t\t\t}\n\n\t\t\tcolor = vec4(color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4(0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp(openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\n\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t}",2b,ef,9c,b8);
            	}
{
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_126_boot)
HXDLIN( 126)		BASE_FRAGMENT_BODY = HX_("vec4 color = texture2D(bitmap, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0)\n\t\t{\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t}\n\t\telse if (openfl_HasColorTransform)\n\t\t{\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0)\n\t\t\t{\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\t\t}",10,9b,26,8f);
            	}
{
            	HX_STACKFRAME(&_hx_pos_880c0549bfe0a230_158_boot)
HXDLIN( 158)		BASE_FRAGMENT_SOURCE = HX_("#pragma header\n\n\t\tvoid main(void)\n\t\t{\n\t\t\tgl_FragColor = flixel_texture2D(bitmap, openfl_TextureCoordv);\n\t\t}",bb,fe,4b,9f);
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace display
