// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_openfl_filters__BitmapFilterType_BitmapFilterType_Impl_
#include <openfl/filters/_BitmapFilterType/BitmapFilterType_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5a7216b527fd896d_30_fromString,"openfl.filters._BitmapFilterType.BitmapFilterType_Impl_","fromString",0x08c15429,"openfl.filters._BitmapFilterType.BitmapFilterType_Impl_.fromString","openfl/filters/BitmapFilterType.hx",30,0xe7df860a)
HX_LOCAL_STACK_FRAME(_hx_pos_5a7216b527fd896d_41_toString,"openfl.filters._BitmapFilterType.BitmapFilterType_Impl_","toString",0xe11e277a,"openfl.filters._BitmapFilterType.BitmapFilterType_Impl_.toString","openfl/filters/BitmapFilterType.hx",41,0xe7df860a)
HX_LOCAL_STACK_FRAME(_hx_pos_5a7216b527fd896d_16_boot,"openfl.filters._BitmapFilterType.BitmapFilterType_Impl_","boot",0x2ac7dc00,"openfl.filters._BitmapFilterType.BitmapFilterType_Impl_.boot","openfl/filters/BitmapFilterType.hx",16,0xe7df860a)
HX_LOCAL_STACK_FRAME(_hx_pos_5a7216b527fd896d_21_boot,"openfl.filters._BitmapFilterType.BitmapFilterType_Impl_","boot",0x2ac7dc00,"openfl.filters._BitmapFilterType.BitmapFilterType_Impl_.boot","openfl/filters/BitmapFilterType.hx",21,0xe7df860a)
HX_LOCAL_STACK_FRAME(_hx_pos_5a7216b527fd896d_26_boot,"openfl.filters._BitmapFilterType.BitmapFilterType_Impl_","boot",0x2ac7dc00,"openfl.filters._BitmapFilterType.BitmapFilterType_Impl_.boot","openfl/filters/BitmapFilterType.hx",26,0xe7df860a)
namespace openfl{
namespace filters{
namespace _BitmapFilterType{

void BitmapFilterType_Impl__obj::__construct() { }

Dynamic BitmapFilterType_Impl__obj::__CreateEmpty() { return new BitmapFilterType_Impl__obj; }

void *BitmapFilterType_Impl__obj::_hx_vtable = 0;

Dynamic BitmapFilterType_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BitmapFilterType_Impl__obj > _hx_result = new BitmapFilterType_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BitmapFilterType_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4f8a47f6;
}

 ::Dynamic BitmapFilterType_Impl__obj::FULL;

 ::Dynamic BitmapFilterType_Impl__obj::INNER;

 ::Dynamic BitmapFilterType_Impl__obj::OUTER;

 ::Dynamic BitmapFilterType_Impl__obj::fromString(::String value){
            	HX_STACKFRAME(&_hx_pos_5a7216b527fd896d_30_fromString)
HXDLIN(  30)		::String _hx_switch_0 = value;
            		if (  (_hx_switch_0==HX_("full",8f,e9,c4,43)) ){
HXLINE(  32)			return 0;
HXDLIN(  32)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("inner",96,31,1c,be)) ){
HXLINE(  33)			return 1;
HXDLIN(  33)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("outer",7b,b8,28,37)) ){
HXLINE(  34)			return 2;
HXDLIN(  34)			goto _hx_goto_0;
            		}
            		/* default */{
HXLINE(  35)			return null();
            		}
            		_hx_goto_0:;
HXLINE(  30)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapFilterType_Impl__obj,fromString,return )

::String BitmapFilterType_Impl__obj::toString( ::Dynamic this1){
            	HX_STACKFRAME(&_hx_pos_5a7216b527fd896d_41_toString)
HXDLIN(  41)		 ::Dynamic _hx_switch_0 = this1;
            		if (  (_hx_switch_0==0) ){
HXLINE(  43)			return HX_("full",8f,e9,c4,43);
HXDLIN(  43)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==1) ){
HXLINE(  44)			return HX_("inner",96,31,1c,be);
HXDLIN(  44)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==2) ){
HXLINE(  45)			return HX_("outer",7b,b8,28,37);
HXDLIN(  45)			goto _hx_goto_2;
            		}
            		/* default */{
HXLINE(  46)			return null();
            		}
            		_hx_goto_2:;
HXLINE(  41)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapFilterType_Impl__obj,toString,return )


BitmapFilterType_Impl__obj::BitmapFilterType_Impl__obj()
{
}

bool BitmapFilterType_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *BitmapFilterType_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo BitmapFilterType_Impl__obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &BitmapFilterType_Impl__obj::FULL,HX_("FULL",8f,b1,85,2e)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &BitmapFilterType_Impl__obj::INNER,HX_("INNER",76,69,0a,3c)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &BitmapFilterType_Impl__obj::OUTER,HX_("OUTER",5b,f0,16,b5)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void BitmapFilterType_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapFilterType_Impl__obj::FULL,"FULL");
	HX_MARK_MEMBER_NAME(BitmapFilterType_Impl__obj::INNER,"INNER");
	HX_MARK_MEMBER_NAME(BitmapFilterType_Impl__obj::OUTER,"OUTER");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapFilterType_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapFilterType_Impl__obj::FULL,"FULL");
	HX_VISIT_MEMBER_NAME(BitmapFilterType_Impl__obj::INNER,"INNER");
	HX_VISIT_MEMBER_NAME(BitmapFilterType_Impl__obj::OUTER,"OUTER");
};

#endif

::hx::Class BitmapFilterType_Impl__obj::__mClass;

static ::String BitmapFilterType_Impl__obj_sStaticFields[] = {
	HX_("FULL",8f,b1,85,2e),
	HX_("INNER",76,69,0a,3c),
	HX_("OUTER",5b,f0,16,b5),
	HX_("fromString",db,2d,74,54),
	HX_("toString",ac,d0,6e,38),
	::String(null())
};

void BitmapFilterType_Impl__obj::__register()
{
	BitmapFilterType_Impl__obj _hx_dummy;
	BitmapFilterType_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.filters._BitmapFilterType.BitmapFilterType_Impl_",60,1b,e3,80);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BitmapFilterType_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BitmapFilterType_Impl__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BitmapFilterType_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< BitmapFilterType_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapFilterType_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapFilterType_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapFilterType_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BitmapFilterType_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_5a7216b527fd896d_16_boot)
HXDLIN(  16)		FULL = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_5a7216b527fd896d_21_boot)
HXDLIN(  21)		INNER = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_5a7216b527fd896d_26_boot)
HXDLIN(  26)		OUTER = 2;
            	}
}

} // end namespace openfl
} // end namespace filters
} // end namespace _BitmapFilterType
