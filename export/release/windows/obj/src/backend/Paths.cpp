// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_FlxAssets
#include <flixel/system/FlxAssets.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flxanimate_FlxAnimate
#include <flxanimate/FlxAnimate.h>
#endif
#ifndef INCLUDED_flxanimate_PsychFlxAnimate
#include <flxanimate/PsychFlxAnimate.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_AssetCache
#include <lime/utils/AssetCache.h>
#endif
#ifndef INCLUDED_lime_utils_Assets
#include <lime/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_system_System
#include <openfl/system/System.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_IAssetCache
#include <openfl/utils/IAssetCache.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_33_excludeAsset,"backend.Paths","excludeAsset",0xd9600a30,"backend.Paths.excludeAsset","backend/Paths.hx",33,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_40_clearUnusedMemory,"backend.Paths","clearUnusedMemory",0xd6c80a2a,"backend.Paths.clearUnusedMemory","backend/Paths.hx",40,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_61_clearStoredMemory,"backend.Paths","clearStoredMemory",0x03cf7a37,"backend.Paths.clearStoredMemory","backend/Paths.hx",61,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_87_freeGraphicsFromMemory,"backend.Paths","freeGraphicsFromMemory",0x2b2e967c,"backend.Paths.freeGraphicsFromMemory","backend/Paths.hx",87,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_84_freeGraphicsFromMemory,"backend.Paths","freeGraphicsFromMemory",0x2b2e967c,"backend.Paths.freeGraphicsFromMemory","backend/Paths.hx",84,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_139_destroyGraphic,"backend.Paths","destroyGraphic",0xb0ab20c8,"backend.Paths.destroyGraphic","backend/Paths.hx",139,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_148_setCurrentLevel,"backend.Paths","setCurrentLevel",0x38c9f013,"backend.Paths.setCurrentLevel","backend/Paths.hx",148,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_151_getPath,"backend.Paths","getPath",0x40f68221,"backend.Paths.getPath","backend/Paths.hx",151,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_176_getFolderPath,"backend.Paths","getFolderPath",0x714e98ef,"backend.Paths.getFolderPath","backend/Paths.hx",176,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_179_getSharedPath,"backend.Paths","getSharedPath",0x31e24866,"backend.Paths.getSharedPath","backend/Paths.hx",179,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_182_txt,"backend.Paths","txt",0x9a070036,"backend.Paths.txt","backend/Paths.hx",182,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_185_xml,"backend.Paths","xml",0x9a09ff9d,"backend.Paths.xml","backend/Paths.hx",185,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_188_json,"backend.Paths","json",0x25793da2,"backend.Paths.json","backend/Paths.hx",188,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_191_shaderFragment,"backend.Paths","shaderFragment",0x2f2ae00f,"backend.Paths.shaderFragment","backend/Paths.hx",191,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_194_shaderVertex,"backend.Paths","shaderVertex",0xb9407de3,"backend.Paths.shaderVertex","backend/Paths.hx",194,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_197_lua,"backend.Paths","lua",0x9a00eb7e,"backend.Paths.lua","backend/Paths.hx",197,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_200_video,"backend.Paths","video",0x86c723c1,"backend.Paths.video","backend/Paths.hx",200,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_209_sound,"backend.Paths","sound",0xd0979c15,"backend.Paths.sound","backend/Paths.hx",209,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_212_music,"backend.Paths","music",0x6025dfeb,"backend.Paths.music","backend/Paths.hx",212,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_215_inst,"backend.Paths","inst",0x24cc3f40,"backend.Paths.inst","backend/Paths.hx",215,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_218_voices,"backend.Paths","voices",0xdf2c247b,"backend.Paths.voices","backend/Paths.hx",218,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_226_soundRandom,"backend.Paths","soundRandom",0x459aeff8,"backend.Paths.soundRandom","backend/Paths.hx",226,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_230_image,"backend.Paths","image",0x0d342ea1,"backend.Paths.image","backend/Paths.hx",230,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_242_cacheBitmap,"backend.Paths","cacheBitmap",0xea8c0397,"backend.Paths.cacheBitmap","backend/Paths.hx",242,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_284_getTextFromFile,"backend.Paths","getTextFromFile",0x5992934f,"backend.Paths.getTextFromFile","backend/Paths.hx",284,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_294_font,"backend.Paths","font",0x22d15949,"backend.Paths.font","backend/Paths.hx",294,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_304_fileExists,"backend.Paths","fileExists",0x881e3872,"backend.Paths.fileExists","backend/Paths.hx",304,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_323_getAtlas,"backend.Paths","getAtlas",0x00419d4f,"backend.Paths.getAtlas","backend/Paths.hx",323,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_352_getMultiAtlas,"backend.Paths","getMultiAtlas",0xb8f6bd8e,"backend.Paths.getMultiAtlas","backend/Paths.hx",352,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_371_getSparrowAtlas,"backend.Paths","getSparrowAtlas",0x085cce1b,"backend.Paths.getSparrowAtlas","backend/Paths.hx",371,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_387_getPackerAtlas,"backend.Paths","getPackerAtlas",0xc77f8ae9,"backend.Paths.getPackerAtlas","backend/Paths.hx",387,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_402_getAsepriteAtlas,"backend.Paths","getAsepriteAtlas",0xe23e11ca,"backend.Paths.getAsepriteAtlas","backend/Paths.hx",402,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_416_formatToSongPath,"backend.Paths","formatToSongPath",0x79918146,"backend.Paths.formatToSongPath","backend/Paths.hx",416,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_425_returnSound,"backend.Paths","returnSound",0x688821c5,"backend.Paths.returnSound","backend/Paths.hx",425,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_451_mods,"backend.Paths","mods",0x2771ceeb,"backend.Paths.mods","backend/Paths.hx",451,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_454_modsJson,"backend.Paths","modsJson",0x3fdc8eb3,"backend.Paths.modsJson","backend/Paths.hx",454,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_457_modsVideo,"backend.Paths","modsVideo",0x834ac190,"backend.Paths.modsVideo","backend/Paths.hx",457,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_460_modsSounds,"backend.Paths","modsSounds",0xaab76e0f,"backend.Paths.modsSounds","backend/Paths.hx",460,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_463_modsImages,"backend.Paths","modsImages",0x771b1603,"backend.Paths.modsImages","backend/Paths.hx",463,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_466_modsXml,"backend.Paths","modsXml",0x1abb3bac,"backend.Paths.modsXml","backend/Paths.hx",466,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_469_modsTxt,"backend.Paths","modsTxt",0x1ab83c45,"backend.Paths.modsTxt","backend/Paths.hx",469,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_472_modsImagesJson,"backend.Paths","modsImagesJson",0x5cd341cb,"backend.Paths.modsImagesJson","backend/Paths.hx",472,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_475_modFolders,"backend.Paths","modFolders",0xc7f8825d,"backend.Paths.modFolders","backend/Paths.hx",475,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_495_loadAnimateAtlas,"backend.Paths","loadAnimateAtlas",0x34918caa,"backend.Paths.loadAnimateAtlas","backend/Paths.hx",495,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_29_boot,"backend.Paths","boot",0x202c7fac,"backend.Paths.boot","backend/Paths.hx",29,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_30_boot,"backend.Paths","boot",0x202c7fac,"backend.Paths.boot","backend/Paths.hx",30,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_37_boot,"backend.Paths","boot",0x202c7fac,"backend.Paths.boot","backend/Paths.hx",37,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_57_boot,"backend.Paths","boot",0x202c7fac,"backend.Paths.boot","backend/Paths.hx",57,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_228_boot,"backend.Paths","boot",0x202c7fac,"backend.Paths.boot","backend/Paths.hx",228,0x7c630d0b)
HX_LOCAL_STACK_FRAME(_hx_pos_359943aa63fd1400_423_boot,"backend.Paths","boot",0x202c7fac,"backend.Paths.boot","backend/Paths.hx",423,0x7c630d0b)
namespace backend{

void Paths_obj::__construct() { }

Dynamic Paths_obj::__CreateEmpty() { return new Paths_obj; }

void *Paths_obj::_hx_vtable = 0;

Dynamic Paths_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Paths_obj > _hx_result = new Paths_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Paths_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0d5689de;
}

::String Paths_obj::SOUND_EXT;

::String Paths_obj::VIDEO_EXT;

void Paths_obj::excludeAsset(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_33_excludeAsset)
HXDLIN(  33)		if (!(::backend::Paths_obj::dumpExclusions->contains(key))) {
HXLINE(  34)			::backend::Paths_obj::dumpExclusions->push(key);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,excludeAsset,(void))

::Array< ::String > Paths_obj::dumpExclusions;

void Paths_obj::clearUnusedMemory(){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_40_clearUnusedMemory)
HXLINE(  42)		{
HXLINE(  42)			 ::Dynamic key = ::backend::Paths_obj::currentTrackedAssets->keys();
HXDLIN(  42)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  42)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  45)				bool _hx_tmp;
HXDLIN(  45)				if (!(::backend::Paths_obj::localTrackedAssets->contains(key1))) {
HXLINE(  45)					_hx_tmp = !(::backend::Paths_obj::dumpExclusions->contains(key1));
            				}
            				else {
HXLINE(  45)					_hx_tmp = false;
            				}
HXDLIN(  45)				if (_hx_tmp) {
HXLINE(  47)					{
HXLINE(  47)						 ::flixel::graphics::FlxGraphic graphic = ( ( ::flixel::graphics::FlxGraphic)(::backend::Paths_obj::currentTrackedAssets->get(key1)) );
HXDLIN(  47)						bool _hx_tmp1;
HXDLIN(  47)						bool _hx_tmp2;
HXDLIN(  47)						if (::hx::IsNotNull( graphic )) {
HXLINE(  47)							_hx_tmp2 = ::hx::IsNotNull( graphic->bitmap );
            						}
            						else {
HXLINE(  47)							_hx_tmp2 = false;
            						}
HXDLIN(  47)						if (_hx_tmp2) {
HXLINE(  47)							_hx_tmp1 = ::hx::IsNotNull( graphic->bitmap->_hx___texture );
            						}
            						else {
HXLINE(  47)							_hx_tmp1 = false;
            						}
HXDLIN(  47)						if (_hx_tmp1) {
HXLINE(  47)							graphic->bitmap->_hx___texture->dispose();
            						}
HXDLIN(  47)						::flixel::FlxG_obj::bitmap->remove(graphic);
            					}
HXLINE(  48)					::backend::Paths_obj::currentTrackedAssets->remove(key1);
            				}
            			}
            		}
HXLINE(  53)		::openfl::_hx_system::System_obj::gc();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Paths_obj,clearUnusedMemory,(void))

::Array< ::String > Paths_obj::localTrackedAssets;

void Paths_obj::clearStoredMemory(){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_61_clearStoredMemory)
HXLINE(  63)		{
HXLINE(  63)			 ::Dynamic key = ::flixel::FlxG_obj::bitmap->_cache->keys();
HXDLIN(  63)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  63)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  65)				if (!(::backend::Paths_obj::currentTrackedAssets->exists(key1))) {
HXLINE(  66)					 ::flixel::graphics::FlxGraphic graphic = ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(key1)) );
HXDLIN(  66)					bool _hx_tmp;
HXDLIN(  66)					bool _hx_tmp1;
HXDLIN(  66)					if (::hx::IsNotNull( graphic )) {
HXLINE(  66)						_hx_tmp1 = ::hx::IsNotNull( graphic->bitmap );
            					}
            					else {
HXLINE(  66)						_hx_tmp1 = false;
            					}
HXDLIN(  66)					if (_hx_tmp1) {
HXLINE(  66)						_hx_tmp = ::hx::IsNotNull( graphic->bitmap->_hx___texture );
            					}
            					else {
HXLINE(  66)						_hx_tmp = false;
            					}
HXDLIN(  66)					if (_hx_tmp) {
HXLINE(  66)						graphic->bitmap->_hx___texture->dispose();
            					}
HXDLIN(  66)					::flixel::FlxG_obj::bitmap->remove(graphic);
            				}
            			}
            		}
HXLINE(  70)		{
HXLINE(  70)			::Dynamic map = ::backend::Paths_obj::currentTrackedSounds;
HXDLIN(  70)			::Dynamic _g_map = map;
HXDLIN(  70)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN(  70)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  70)				::String key2 = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  70)				 ::openfl::media::Sound _g_value = ( ( ::openfl::media::Sound)(::haxe::IMap_obj::get(_g_map,key2)) );
HXDLIN(  70)				::String _g_key = key2;
HXDLIN(  70)				::String key3 = _g_key;
HXDLIN(  70)				 ::openfl::media::Sound asset = _g_value;
HXLINE(  72)				bool _hx_tmp2;
HXDLIN(  72)				bool _hx_tmp3;
HXDLIN(  72)				if (!(::backend::Paths_obj::localTrackedAssets->contains(key3))) {
HXLINE(  72)					_hx_tmp3 = !(::backend::Paths_obj::dumpExclusions->contains(key3));
            				}
            				else {
HXLINE(  72)					_hx_tmp3 = false;
            				}
HXDLIN(  72)				if (_hx_tmp3) {
HXLINE(  72)					_hx_tmp2 = ::hx::IsNotNull( asset );
            				}
            				else {
HXLINE(  72)					_hx_tmp2 = false;
            				}
HXDLIN(  72)				if (_hx_tmp2) {
HXLINE(  74)					::lime::utils::Assets_obj::cache->clear(key3);
HXLINE(  75)					::backend::Paths_obj::currentTrackedSounds->remove(key3);
            				}
            			}
            		}
HXLINE(  79)		::backend::Paths_obj::localTrackedAssets = ::Array_obj< ::String >::__new(0);
HXLINE(  80)		::openfl::utils::IAssetCache_obj::clear(::openfl::utils::Assets_obj::cache,HX_("songs",fe,36,c7,80));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Paths_obj,clearStoredMemory,(void))

void Paths_obj::freeGraphicsFromMemory(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,protectedGfx,::Array< ::Dynamic>,checkForGraphics) HXARGC(1)
            		void _hx_run( ::Dynamic spr){
            			HX_STACKFRAME(&_hx_pos_359943aa63fd1400_87_freeGraphicsFromMemory)
HXLINE(  89)			{
HXLINE(  90)				::cpp::VirtualArray grp = ( (::cpp::VirtualArray)(::Reflect_obj::getProperty(spr,HX_("members",d9,2c,70,1a))) );
HXLINE(  91)				if (::hx::IsNotNull( grp )) {
HXLINE(  94)					{
HXLINE(  94)						int _g = 0;
HXDLIN(  94)						while((_g < grp->get_length())){
HXLINE(  94)							 ::Dynamic member = grp->__get(_g);
HXDLIN(  94)							_g = (_g + 1);
HXLINE(  96)							checkForGraphics->__get(0)(member);
            						}
            					}
HXLINE(  98)					return;
            				}
            			}
HXLINE( 104)			{
HXLINE( 105)				 ::flixel::graphics::FlxGraphic gfx = ( ( ::flixel::graphics::FlxGraphic)(::Reflect_obj::getProperty(spr,HX_("graphic",a8,5a,07,74))) );
HXLINE( 106)				if (::hx::IsNotNull( gfx )) {
HXLINE( 108)					protectedGfx->push(gfx);
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_84_freeGraphicsFromMemory)
HXLINE(  85)		::Array< ::Dynamic> protectedGfx = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  86)		::Array< ::Dynamic> checkForGraphics = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN(  86)		checkForGraphics[0] =  ::Dynamic(new _hx_Closure_0(protectedGfx,checkForGraphics));
HXLINE( 115)		{
HXLINE( 115)			int _g = 0;
HXDLIN( 115)			::Array< ::Dynamic> _g1 = ::flixel::FlxG_obj::game->_state->members;
HXDLIN( 115)			while((_g < _g1->length)){
HXLINE( 115)				 ::flixel::FlxBasic member = _g1->__get(_g).StaticCast<  ::flixel::FlxBasic >();
HXDLIN( 115)				_g = (_g + 1);
HXLINE( 116)				checkForGraphics->__get(0)(member);
            			}
            		}
HXLINE( 118)		if (::hx::IsNotNull( ::flixel::FlxG_obj::game->_state->subState )) {
HXLINE( 119)			int _g2 = 0;
HXDLIN( 119)			::Array< ::Dynamic> _g3 = ::flixel::FlxG_obj::game->_state->subState->members;
HXDLIN( 119)			while((_g2 < _g3->length)){
HXLINE( 119)				 ::flixel::FlxBasic member1 = _g3->__get(_g2).StaticCast<  ::flixel::FlxBasic >();
HXDLIN( 119)				_g2 = (_g2 + 1);
HXLINE( 120)				checkForGraphics->__get(0)(member1);
            			}
            		}
HXLINE( 122)		{
HXLINE( 122)			 ::Dynamic key = ::backend::Paths_obj::currentTrackedAssets->keys();
HXDLIN( 122)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 122)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 125)				if (!(::backend::Paths_obj::dumpExclusions->contains(key1))) {
HXLINE( 127)					 ::flixel::graphics::FlxGraphic graphic = ( ( ::flixel::graphics::FlxGraphic)(::backend::Paths_obj::currentTrackedAssets->get(key1)) );
HXLINE( 128)					if (!(protectedGfx->contains(graphic))) {
HXLINE( 130)						{
HXLINE( 130)							bool _hx_tmp;
HXDLIN( 130)							bool _hx_tmp1;
HXDLIN( 130)							if (::hx::IsNotNull( graphic )) {
HXLINE( 130)								_hx_tmp1 = ::hx::IsNotNull( graphic->bitmap );
            							}
            							else {
HXLINE( 130)								_hx_tmp1 = false;
            							}
HXDLIN( 130)							if (_hx_tmp1) {
HXLINE( 130)								_hx_tmp = ::hx::IsNotNull( graphic->bitmap->_hx___texture );
            							}
            							else {
HXLINE( 130)								_hx_tmp = false;
            							}
HXDLIN( 130)							if (_hx_tmp) {
HXLINE( 130)								graphic->bitmap->_hx___texture->dispose();
            							}
HXDLIN( 130)							::flixel::FlxG_obj::bitmap->remove(graphic);
            						}
HXLINE( 131)						::backend::Paths_obj::currentTrackedAssets->remove(key1);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Paths_obj,freeGraphicsFromMemory,(void))

void Paths_obj::destroyGraphic( ::flixel::graphics::FlxGraphic graphic){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_139_destroyGraphic)
HXLINE( 141)		bool _hx_tmp;
HXDLIN( 141)		bool _hx_tmp1;
HXDLIN( 141)		if (::hx::IsNotNull( graphic )) {
HXLINE( 141)			_hx_tmp1 = ::hx::IsNotNull( graphic->bitmap );
            		}
            		else {
HXLINE( 141)			_hx_tmp1 = false;
            		}
HXDLIN( 141)		if (_hx_tmp1) {
HXLINE( 141)			_hx_tmp = ::hx::IsNotNull( graphic->bitmap->_hx___texture );
            		}
            		else {
HXLINE( 141)			_hx_tmp = false;
            		}
HXDLIN( 141)		if (_hx_tmp) {
HXLINE( 142)			graphic->bitmap->_hx___texture->dispose();
            		}
HXLINE( 143)		::flixel::FlxG_obj::bitmap->remove(graphic);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,destroyGraphic,(void))

::String Paths_obj::currentLevel;

void Paths_obj::setCurrentLevel(::String name){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_148_setCurrentLevel)
HXDLIN( 148)		::backend::Paths_obj::currentLevel = name.toLowerCase();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,setCurrentLevel,(void))

::String Paths_obj::getPath(::String file,::String __o_type,::String parentfolder, ::Dynamic __o_modsAllowed){
            		::String type = __o_type;
            		if (::hx::IsNull(__o_type)) type = HX_("TEXT",ad,94,ba,37);
            		 ::Dynamic modsAllowed = __o_modsAllowed;
            		if (::hx::IsNull(__o_modsAllowed)) modsAllowed = true;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_151_getPath)
HXLINE( 153)		if (( (bool)(modsAllowed) )) {
HXLINE( 155)			::String customFile = file;
HXLINE( 156)			if (::hx::IsNotNull( parentfolder )) {
HXLINE( 156)				customFile = (((HX_("",00,00,00,00) + parentfolder) + HX_("/",2f,00,00,00)) + file);
            			}
HXLINE( 158)			::String modded = ::backend::Paths_obj::modFolders(customFile);
HXLINE( 159)			if (::sys::FileSystem_obj::exists(modded)) {
HXLINE( 159)				return modded;
            			}
            		}
HXLINE( 163)		if (::hx::IsNotNull( parentfolder )) {
HXLINE( 164)			::String folder = parentfolder;
HXDLIN( 164)			if (::hx::IsNull( folder )) {
HXLINE( 164)				folder = HX_("shared",a5,5e,2b,1d);
            			}
HXDLIN( 164)			return (((HX_("assets/",4c,2a,dc,36) + folder) + HX_("/",2f,00,00,00)) + file);
            		}
HXLINE( 166)		bool _hx_tmp;
HXDLIN( 166)		if (::hx::IsNotNull( ::backend::Paths_obj::currentLevel )) {
HXLINE( 166)			_hx_tmp = (::backend::Paths_obj::currentLevel != HX_("shared",a5,5e,2b,1d));
            		}
            		else {
HXLINE( 166)			_hx_tmp = false;
            		}
HXDLIN( 166)		if (_hx_tmp) {
HXLINE( 168)			::String folder1 = ::backend::Paths_obj::currentLevel;
HXDLIN( 168)			if (::hx::IsNull( folder1 )) {
HXLINE( 168)				folder1 = HX_("shared",a5,5e,2b,1d);
            			}
HXDLIN( 168)			::String levelPath = (((HX_("assets/",4c,2a,dc,36) + folder1) + HX_("/",2f,00,00,00)) + file);
HXLINE( 169)			if (::openfl::utils::Assets_obj::exists(levelPath,type)) {
HXLINE( 170)				return levelPath;
            			}
            		}
HXLINE( 172)		::String file1 = file;
HXDLIN( 172)		if (::hx::IsNull( file1 )) {
HXLINE( 172)			file1 = HX_("",00,00,00,00);
            		}
HXDLIN( 172)		return (HX_("assets/shared/",1e,69,1e,47) + file1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Paths_obj,getPath,return )

::String Paths_obj::getFolderPath(::String file,::String __o_folder){
            		::String folder = __o_folder;
            		if (::hx::IsNull(__o_folder)) folder = HX_("shared",a5,5e,2b,1d);
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_176_getFolderPath)
HXDLIN( 176)		return (((HX_("assets/",4c,2a,dc,36) + folder) + HX_("/",2f,00,00,00)) + file);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,getFolderPath,return )

::String Paths_obj::getSharedPath(::String __o_file){
            		::String file = __o_file;
            		if (::hx::IsNull(__o_file)) file = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_179_getSharedPath)
HXDLIN( 179)		return (HX_("assets/shared/",1e,69,1e,47) + file);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,getSharedPath,return )

::String Paths_obj::txt(::String key,::String folder){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_182_txt)
HXDLIN( 182)		return ::backend::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + key) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),folder,true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,txt,return )

::String Paths_obj::xml(::String key,::String folder){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_185_xml)
HXDLIN( 185)		return ::backend::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + key) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),folder,true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,xml,return )

::String Paths_obj::json(::String key,::String folder){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_188_json)
HXDLIN( 188)		return ::backend::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + key) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),folder,true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,json,return )

::String Paths_obj::shaderFragment(::String key,::String folder){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_191_shaderFragment)
HXDLIN( 191)		return ::backend::Paths_obj::getPath(((HX_("shaders/",c1,f6,2a,36) + key) + HX_(".frag",60,48,31,c0)),HX_("TEXT",ad,94,ba,37),folder,true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,shaderFragment,return )

::String Paths_obj::shaderVertex(::String key,::String folder){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_194_shaderVertex)
HXDLIN( 194)		return ::backend::Paths_obj::getPath(((HX_("shaders/",c1,f6,2a,36) + key) + HX_(".vert",df,e3,ba,ca)),HX_("TEXT",ad,94,ba,37),folder,true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,shaderVertex,return )

::String Paths_obj::lua(::String key,::String folder){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_197_lua)
HXDLIN( 197)		return ::backend::Paths_obj::getPath(((HX_("",00,00,00,00) + key) + HX_(".lua",4a,2a,ba,1e)),HX_("TEXT",ad,94,ba,37),folder,true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,lua,return )

::String Paths_obj::video(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_200_video)
HXLINE( 202)		::String file = ::backend::Paths_obj::modFolders((((HX_("videos/",97,cd,86,fd) + key) + HX_(".",2e,00,00,00)) + HX_("mp4",71,17,53,00)));
HXLINE( 203)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 203)			return file;
            		}
HXLINE( 205)		return (((HX_("assets/videos/",cb,c4,dd,db) + key) + HX_(".",2e,00,00,00)) + HX_("mp4",71,17,53,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,video,return )

 ::openfl::media::Sound Paths_obj::sound(::String key, ::Dynamic __o_modsAllowed){
            		 ::Dynamic modsAllowed = __o_modsAllowed;
            		if (::hx::IsNull(__o_modsAllowed)) modsAllowed = true;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_209_sound)
HXDLIN( 209)		return ::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + key),null(),modsAllowed,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,sound,return )

 ::openfl::media::Sound Paths_obj::music(::String key, ::Dynamic __o_modsAllowed){
            		 ::Dynamic modsAllowed = __o_modsAllowed;
            		if (::hx::IsNull(__o_modsAllowed)) modsAllowed = true;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_212_music)
HXDLIN( 212)		return ::backend::Paths_obj::returnSound((HX_("music/",ea,bf,1b,3f) + key),null(),modsAllowed,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,music,return )

 ::openfl::media::Sound Paths_obj::inst(::String song, ::Dynamic __o_modsAllowed){
            		 ::Dynamic modsAllowed = __o_modsAllowed;
            		if (::hx::IsNull(__o_modsAllowed)) modsAllowed = true;
            	HX_GC_STACKFRAME(&_hx_pos_359943aa63fd1400_215_inst)
HXDLIN( 215)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 215)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 215)		return ::backend::Paths_obj::returnSound(((HX_("",00,00,00,00) + ::StringTools_obj::trim(hideChars->replace(invalidChars->replace(song,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase()) + HX_("/Inst",95,b3,69,40)),HX_("songs",fe,36,c7,80),modsAllowed,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,inst,return )

 ::openfl::media::Sound Paths_obj::voices(::String song,::String postfix, ::Dynamic __o_modsAllowed){
            		 ::Dynamic modsAllowed = __o_modsAllowed;
            		if (::hx::IsNull(__o_modsAllowed)) modsAllowed = true;
            	HX_GC_STACKFRAME(&_hx_pos_359943aa63fd1400_218_voices)
HXLINE( 219)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 219)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 219)		::String songKey = ((HX_("",00,00,00,00) + ::StringTools_obj::trim(hideChars->replace(invalidChars->replace(song,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase()) + HX_("/Voices",10,18,4f,34));
HXLINE( 220)		if (::hx::IsNotNull( postfix )) {
HXLINE( 220)			songKey = (songKey + (HX_("-",2d,00,00,00) + postfix));
            		}
HXLINE( 222)		return ::backend::Paths_obj::returnSound(songKey,HX_("songs",fe,36,c7,80),modsAllowed,false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Paths_obj,voices,return )

 ::openfl::media::Sound Paths_obj::soundRandom(::String key,int min,int max, ::Dynamic __o_modsAllowed){
            		 ::Dynamic modsAllowed = __o_modsAllowed;
            		if (::hx::IsNull(__o_modsAllowed)) modsAllowed = true;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_226_soundRandom)
HXDLIN( 226)		::String key1 = (key + ::flixel::FlxG_obj::random->_hx_int(min,max,null()));
HXDLIN( 226)		 ::Dynamic modsAllowed1 = modsAllowed;
HXDLIN( 226)		if (::hx::IsNull( modsAllowed1 )) {
HXDLIN( 226)			modsAllowed1 = true;
            		}
HXDLIN( 226)		return ::backend::Paths_obj::returnSound((HX_("sounds/",eb,02,a5,b6) + key1),null(),modsAllowed1,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Paths_obj,soundRandom,return )

 ::haxe::ds::StringMap Paths_obj::currentTrackedAssets;

 ::flixel::graphics::FlxGraphic Paths_obj::image(::String key,::String parentFolder, ::Dynamic __o_allowGPU){
            		 ::Dynamic allowGPU = __o_allowGPU;
            		if (::hx::IsNull(__o_allowGPU)) allowGPU = true;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_230_image)
HXLINE( 231)		::String key1 = (HX_("images/",77,50,74,c1) + key);
HXDLIN( 231)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 231)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN( 231)		if (::hx::IsNotNull( str )) {
HXLINE( 231)			key1 = str;
            		}
HXDLIN( 231)		key = (key1 + HX_(".png",3b,2d,bd,1e));
HXLINE( 232)		 ::openfl::display::BitmapData bitmap = null();
HXLINE( 233)		if (::backend::Paths_obj::currentTrackedAssets->exists(key)) {
HXLINE( 235)			::backend::Paths_obj::localTrackedAssets->push(key);
HXLINE( 236)			return ( ( ::flixel::graphics::FlxGraphic)(::backend::Paths_obj::currentTrackedAssets->get(key)) );
            		}
HXLINE( 238)		return ::backend::Paths_obj::cacheBitmap(key,parentFolder,bitmap,allowGPU);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Paths_obj,image,return )

 ::flixel::graphics::FlxGraphic Paths_obj::cacheBitmap(::String key,::String parentFolder, ::openfl::display::BitmapData bitmap, ::Dynamic __o_allowGPU){
            		 ::Dynamic allowGPU = __o_allowGPU;
            		if (::hx::IsNull(__o_allowGPU)) allowGPU = true;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_242_cacheBitmap)
HXLINE( 243)		if (::hx::IsNull( bitmap )) {
HXLINE( 245)			::String file = ::backend::Paths_obj::getPath(key,HX_("IMAGE",3b,57,57,3b),parentFolder,true);
HXLINE( 247)			if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 248)				bitmap = ::openfl::display::BitmapData_obj::fromFile(file);
            			}
            			else {
HXLINE( 249)				if (::openfl::utils::Assets_obj::exists(file,HX_("IMAGE",3b,57,57,3b))) {
HXLINE( 250)					bitmap = ::openfl::utils::Assets_obj::getBitmapData(file,null());
            				}
            			}
HXLINE( 252)			if (::hx::IsNull( bitmap )) {
HXLINE( 254)				::haxe::Log_obj::trace((((HX_("Bitmap not found: ",ca,43,27,ba) + file) + HX_(" | key: ",41,f7,1d,f5)) + key),::hx::SourceInfo(HX_("source/backend/Paths.hx",ff,43,8c,3d),254,HX_("backend.Paths",34,17,99,92),HX_("cacheBitmap",d1,3b,ad,0f)));
HXLINE( 255)				return null();
            			}
            		}
HXLINE( 259)		bool _hx_tmp;
HXDLIN( 259)		bool _hx_tmp1;
HXDLIN( 259)		if (( (bool)(allowGPU) )) {
HXLINE( 259)			_hx_tmp1 = ::backend::ClientPrefs_obj::data->cacheOnGPU;
            		}
            		else {
HXLINE( 259)			_hx_tmp1 = false;
            		}
HXDLIN( 259)		if (_hx_tmp1) {
HXLINE( 259)			_hx_tmp = ::hx::IsNotNull( bitmap->image );
            		}
            		else {
HXLINE( 259)			_hx_tmp = false;
            		}
HXDLIN( 259)		if (_hx_tmp) {
HXLINE( 261)			bitmap->lock();
HXLINE( 262)			if (::hx::IsNull( bitmap->_hx___texture )) {
HXLINE( 264)				bitmap->image->set_premultiplied(true);
HXLINE( 265)				bitmap->getTexture(::openfl::Lib_obj::get_current()->stage->context3D);
            			}
HXLINE( 267)			bitmap->getSurface();
HXLINE( 268)			bitmap->disposeImage();
HXLINE( 269)			bitmap->image->set_data(null());
HXLINE( 270)			bitmap->image = null();
HXLINE( 271)			bitmap->readable = true;
            		}
HXLINE( 274)		 ::flixel::graphics::FlxGraphic graph = ::flixel::graphics::FlxGraphic_obj::fromBitmapData(bitmap,false,key,null());
HXLINE( 275)		graph->persist = true;
HXLINE( 276)		graph->set_destroyOnNoUse(false);
HXLINE( 278)		::backend::Paths_obj::currentTrackedAssets->set(key,graph);
HXLINE( 279)		::backend::Paths_obj::localTrackedAssets->push(key);
HXLINE( 280)		return graph;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Paths_obj,cacheBitmap,return )

::String Paths_obj::getTextFromFile(::String key, ::Dynamic __o_ignoreMods){
            		 ::Dynamic ignoreMods = __o_ignoreMods;
            		if (::hx::IsNull(__o_ignoreMods)) ignoreMods = false;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_284_getTextFromFile)
HXLINE( 285)		::String path = ::backend::Paths_obj::getPath(key,HX_("TEXT",ad,94,ba,37),null(),!(( (bool)(ignoreMods) )));
HXLINE( 287)		if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 287)			return ::sys::io::File_obj::getContent(path);
            		}
            		else {
HXLINE( 287)			return null();
            		}
HXDLIN( 287)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,getTextFromFile,return )

::String Paths_obj::font(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_294_font)
HXLINE( 295)		::String key1 = (HX_("fonts/",eb,13,ef,fa) + key);
HXDLIN( 295)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 295)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN( 295)		if (::hx::IsNotNull( str )) {
HXLINE( 295)			key1 = str;
            		}
HXDLIN( 295)		::String folderKey = key1;
HXLINE( 297)		::String file = ::backend::Paths_obj::modFolders(folderKey);
HXLINE( 298)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 298)			return file;
            		}
HXLINE( 300)		return (HX_("assets/",4c,2a,dc,36) + folderKey);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,font,return )

bool Paths_obj::fileExists(::String key,::String type, ::Dynamic __o_ignoreMods,::String parentFolder){
            		 ::Dynamic ignoreMods = __o_ignoreMods;
            		if (::hx::IsNull(__o_ignoreMods)) ignoreMods = false;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_304_fileExists)
HXLINE( 306)		if (!(( (bool)(ignoreMods) ))) {
HXLINE( 308)			::String modKey = key;
HXLINE( 309)			if ((parentFolder == HX_("songs",fe,36,c7,80))) {
HXLINE( 309)				modKey = (HX_("songs/",71,e7,88,2d) + key);
            			}
HXLINE( 311)			{
HXLINE( 311)				int _g = 0;
HXDLIN( 311)				::Array< ::String > _g1 = ::backend::Mods_obj::globalMods;
HXDLIN( 311)				while((_g < _g1->length)){
HXLINE( 311)					::String mod = _g1->__get(_g);
HXDLIN( 311)					_g = (_g + 1);
HXLINE( 312)					::String key1 = (((HX_("",00,00,00,00) + mod) + HX_("/",2f,00,00,00)) + modKey);
HXDLIN( 312)					if (::hx::IsNull( key1 )) {
HXLINE( 312)						key1 = HX_("",00,00,00,00);
            					}
HXDLIN( 312)					if (::sys::FileSystem_obj::exists((HX_("mods/",9e,2f,58,0c) + key1))) {
HXLINE( 313)						return true;
            					}
            				}
            			}
HXLINE( 315)			bool _hx_tmp;
HXDLIN( 315)			::String key2 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + modKey);
HXDLIN( 315)			if (::hx::IsNull( key2 )) {
HXLINE( 315)				key2 = HX_("",00,00,00,00);
            			}
HXDLIN( 315)			if (!(::sys::FileSystem_obj::exists((HX_("mods/",9e,2f,58,0c) + key2)))) {
HXLINE( 315)				::String key3 = modKey;
HXDLIN( 315)				if (::hx::IsNull( key3 )) {
HXLINE( 315)					key3 = HX_("",00,00,00,00);
            				}
HXDLIN( 315)				_hx_tmp = ::sys::FileSystem_obj::exists((HX_("mods/",9e,2f,58,0c) + key3));
            			}
            			else {
HXLINE( 315)				_hx_tmp = true;
            			}
HXDLIN( 315)			if (_hx_tmp) {
HXLINE( 316)				return true;
            			}
            		}
HXLINE( 319)		return ::openfl::utils::Assets_obj::exists(::backend::Paths_obj::getPath(key,type,parentFolder,false),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Paths_obj,fileExists,return )

 ::flixel::graphics::frames::FlxAtlasFrames Paths_obj::getAtlas(::String key,::String parentFolder, ::Dynamic __o_allowGPU){
            		 ::Dynamic allowGPU = __o_allowGPU;
            		if (::hx::IsNull(__o_allowGPU)) allowGPU = true;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_323_getAtlas)
HXLINE( 324)		bool useMod = false;
HXLINE( 325)		 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(key,parentFolder,allowGPU);
HXLINE( 327)		 ::Dynamic myXml = ::backend::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder,true);
HXLINE( 328)		bool _hx_tmp;
HXDLIN( 328)		if (!(::openfl::utils::Assets_obj::exists(( (::String)(myXml) ),null()))) {
HXLINE( 328)			if (::sys::FileSystem_obj::exists(( (::String)(myXml) ))) {
HXLINE( 328)				useMod = true;
HXDLIN( 328)				_hx_tmp = useMod;
            			}
            			else {
HXLINE( 328)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 328)			_hx_tmp = true;
            		}
HXDLIN( 328)		if (_hx_tmp) {
HXLINE( 331)			 ::Dynamic _hx_tmp1;
HXDLIN( 331)			if (useMod) {
HXLINE( 331)				_hx_tmp1 = ::sys::io::File_obj::getContent(( (::String)(myXml) ));
            			}
            			else {
HXLINE( 331)				_hx_tmp1 = myXml;
            			}
HXDLIN( 331)			return ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded,_hx_tmp1);
            		}
            		else {
HXLINE( 338)			 ::Dynamic myJson = ::backend::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),parentFolder,true);
HXLINE( 339)			bool _hx_tmp2;
HXDLIN( 339)			if (!(::openfl::utils::Assets_obj::exists(( (::String)(myJson) ),null()))) {
HXLINE( 339)				if (::sys::FileSystem_obj::exists(( (::String)(myJson) ))) {
HXLINE( 339)					useMod = true;
HXDLIN( 339)					_hx_tmp2 = useMod;
            				}
            				else {
HXLINE( 339)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE( 339)				_hx_tmp2 = true;
            			}
HXDLIN( 339)			if (_hx_tmp2) {
HXLINE( 342)				 ::Dynamic _hx_tmp3;
HXDLIN( 342)				if (useMod) {
HXLINE( 342)					_hx_tmp3 = ::sys::io::File_obj::getContent(( (::String)(myJson) ));
            				}
            				else {
HXLINE( 342)					_hx_tmp3 = myJson;
            				}
HXDLIN( 342)				return ::flixel::graphics::frames::FlxAtlasFrames_obj::fromTexturePackerJson(imageLoaded,_hx_tmp3,null());
            			}
            		}
HXLINE( 348)		 ::flixel::graphics::FlxGraphic imageLoaded1 = ::backend::Paths_obj::image(key,parentFolder,true);
HXDLIN( 348)		bool txtExists = false;
HXDLIN( 348)		::String txt = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".txt",02,3f,c0,1e)));
HXDLIN( 348)		if (::sys::FileSystem_obj::exists(txt)) {
HXLINE( 348)			txtExists = true;
            		}
HXDLIN( 348)		::String _hx_tmp4;
HXDLIN( 348)		if (txtExists) {
HXLINE( 348)			_hx_tmp4 = ::sys::io::File_obj::getContent(txt);
            		}
            		else {
HXLINE( 348)			::String key1 = (HX_("images/",77,50,74,c1) + key);
HXDLIN( 348)			::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 348)			::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN( 348)			if (::hx::IsNotNull( str )) {
HXLINE( 348)				key1 = str;
            			}
HXDLIN( 348)			_hx_tmp4 = ::backend::Paths_obj::getPath((key1 + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),parentFolder,null());
            		}
HXDLIN( 348)		return ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSpriteSheetPacker(imageLoaded1,_hx_tmp4);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Paths_obj,getAtlas,return )

 ::flixel::graphics::frames::FlxAtlasFrames Paths_obj::getMultiAtlas(::Array< ::String > keys,::String parentFolder, ::Dynamic __o_allowGPU){
            		 ::Dynamic allowGPU = __o_allowGPU;
            		if (::hx::IsNull(__o_allowGPU)) allowGPU = true;
            	HX_GC_STACKFRAME(&_hx_pos_359943aa63fd1400_352_getMultiAtlas)
HXLINE( 354)		 ::flixel::graphics::frames::FlxAtlasFrames parentFrames = ::backend::Paths_obj::getAtlas(::StringTools_obj::trim(keys->__get(0)),null(),null());
HXLINE( 355)		if ((keys->length > 1)) {
HXLINE( 357)			 ::flixel::graphics::frames::FlxAtlasFrames original = parentFrames;
HXLINE( 358)			parentFrames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__alloc( HX_CTX ,parentFrames->parent,null());
HXLINE( 359)			parentFrames->addAtlas(original,true);
HXLINE( 360)			{
HXLINE( 360)				int _g = 1;
HXDLIN( 360)				int _g1 = keys->length;
HXDLIN( 360)				while((_g < _g1)){
HXLINE( 360)					_g = (_g + 1);
HXDLIN( 360)					int i = (_g - 1);
HXLINE( 362)					 ::flixel::graphics::frames::FlxAtlasFrames extraFrames = ::backend::Paths_obj::getAtlas(::StringTools_obj::trim(keys->__get(i)),parentFolder,allowGPU);
HXLINE( 363)					if (::hx::IsNotNull( extraFrames )) {
HXLINE( 364)						parentFrames->addAtlas(extraFrames,true);
            					}
            				}
            			}
            		}
HXLINE( 367)		return parentFrames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Paths_obj,getMultiAtlas,return )

 ::flixel::graphics::frames::FlxAtlasFrames Paths_obj::getSparrowAtlas(::String key,::String parentFolder, ::Dynamic __o_allowGPU){
            		 ::Dynamic allowGPU = __o_allowGPU;
            		if (::hx::IsNull(__o_allowGPU)) allowGPU = true;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_371_getSparrowAtlas)
HXLINE( 372)		if ((key.indexOf(HX_("psychic",d5,09,aa,19),null()) != -1)) {
HXLINE( 372)			::haxe::Log_obj::trace(key, ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("className",a3,92,3d,dc),HX_("backend.Paths",34,17,99,92))
            				->setFixed(1,HX_("customParams",d7,51,18,ed),::cpp::VirtualArray_obj::__new(2)->init(0,parentFolder)->init(1,allowGPU))
            				->setFixed(2,HX_("methodName",cc,19,0f,12),HX_("getSparrowAtlas",55,ab,b7,a7))
            				->setFixed(3,HX_("fileName",e7,5a,43,62),HX_("source/backend/Paths.hx",ff,43,8c,3d))
            				->setFixed(4,HX_("lineNumber",dd,81,22,76),372)));
            		}
HXLINE( 373)		 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(key,parentFolder,allowGPU);
HXLINE( 375)		bool xmlExists = false;
HXLINE( 377)		::String xml = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)));
HXLINE( 378)		if (::sys::FileSystem_obj::exists(xml)) {
HXLINE( 378)			xmlExists = true;
            		}
HXLINE( 380)		 ::Dynamic _hx_tmp;
HXDLIN( 380)		if (xmlExists) {
HXLINE( 380)			_hx_tmp = ::sys::io::File_obj::getContent(xml);
            		}
            		else {
HXLINE( 380)			::String key1 = (HX_("images/",77,50,74,c1) + key);
HXDLIN( 380)			::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 380)			::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN( 380)			if (::hx::IsNotNull( str )) {
HXLINE( 380)				key1 = str;
            			}
HXDLIN( 380)			_hx_tmp = ::backend::Paths_obj::getPath((key1 + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),parentFolder,null());
            		}
HXDLIN( 380)		return ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(imageLoaded,_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Paths_obj,getSparrowAtlas,return )

 ::flixel::graphics::frames::FlxAtlasFrames Paths_obj::getPackerAtlas(::String key,::String parentFolder, ::Dynamic __o_allowGPU){
            		 ::Dynamic allowGPU = __o_allowGPU;
            		if (::hx::IsNull(__o_allowGPU)) allowGPU = true;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_387_getPackerAtlas)
HXLINE( 388)		 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(key,parentFolder,allowGPU);
HXLINE( 390)		bool txtExists = false;
HXLINE( 392)		::String txt = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".txt",02,3f,c0,1e)));
HXLINE( 393)		if (::sys::FileSystem_obj::exists(txt)) {
HXLINE( 393)			txtExists = true;
            		}
HXLINE( 395)		::String _hx_tmp;
HXDLIN( 395)		if (txtExists) {
HXLINE( 395)			_hx_tmp = ::sys::io::File_obj::getContent(txt);
            		}
            		else {
HXLINE( 395)			::String key1 = (HX_("images/",77,50,74,c1) + key);
HXDLIN( 395)			::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 395)			::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN( 395)			if (::hx::IsNotNull( str )) {
HXLINE( 395)				key1 = str;
            			}
HXDLIN( 395)			_hx_tmp = ::backend::Paths_obj::getPath((key1 + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),parentFolder,null());
            		}
HXDLIN( 395)		return ::flixel::graphics::frames::FlxAtlasFrames_obj::fromSpriteSheetPacker(imageLoaded,_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Paths_obj,getPackerAtlas,return )

 ::flixel::graphics::frames::FlxAtlasFrames Paths_obj::getAsepriteAtlas(::String key,::String parentFolder, ::Dynamic __o_allowGPU){
            		 ::Dynamic allowGPU = __o_allowGPU;
            		if (::hx::IsNull(__o_allowGPU)) allowGPU = true;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_402_getAsepriteAtlas)
HXLINE( 403)		 ::flixel::graphics::FlxGraphic imageLoaded = ::backend::Paths_obj::image(key,parentFolder,allowGPU);
HXLINE( 405)		bool jsonExists = false;
HXLINE( 407)		::String json = ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".json",56,f1,d6,c2)));
HXLINE( 408)		if (::sys::FileSystem_obj::exists(json)) {
HXLINE( 408)			jsonExists = true;
            		}
HXLINE( 410)		 ::Dynamic _hx_tmp;
HXDLIN( 410)		if (jsonExists) {
HXLINE( 410)			_hx_tmp = ::sys::io::File_obj::getContent(json);
            		}
            		else {
HXLINE( 410)			::String key1 = (HX_("images/",77,50,74,c1) + key);
HXDLIN( 410)			::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 410)			::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN( 410)			if (::hx::IsNotNull( str )) {
HXLINE( 410)				key1 = str;
            			}
HXDLIN( 410)			_hx_tmp = ::backend::Paths_obj::getPath((key1 + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),parentFolder,null());
            		}
HXDLIN( 410)		return ::flixel::graphics::frames::FlxAtlasFrames_obj::fromTexturePackerJson(imageLoaded,_hx_tmp,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Paths_obj,getAsepriteAtlas,return )

::String Paths_obj::formatToSongPath(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_359943aa63fd1400_416_formatToSongPath)
HXLINE( 417)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXLINE( 418)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXLINE( 420)		return ::StringTools_obj::trim(hideChars->replace(invalidChars->replace(path,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,formatToSongPath,return )

 ::haxe::ds::StringMap Paths_obj::currentTrackedSounds;

 ::openfl::media::Sound Paths_obj::returnSound(::String key,::String path, ::Dynamic __o_modsAllowed, ::Dynamic __o_beepOnNull){
            		 ::Dynamic modsAllowed = __o_modsAllowed;
            		if (::hx::IsNull(__o_modsAllowed)) modsAllowed = true;
            		 ::Dynamic beepOnNull = __o_beepOnNull;
            		if (::hx::IsNull(__o_beepOnNull)) beepOnNull = true;
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_425_returnSound)
HXLINE( 426)		::String key1 = key;
HXDLIN( 426)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 426)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN( 426)		if (::hx::IsNotNull( str )) {
HXLINE( 426)			key1 = str;
            		}
HXDLIN( 426)		::String file = ::backend::Paths_obj::getPath((key1 + (HX_(".",2e,00,00,00) + HX_("ogg",4f,94,54,00))),HX_("SOUND",af,c4,ba,fe),path,modsAllowed);
HXLINE( 429)		if (!(::backend::Paths_obj::currentTrackedSounds->exists(file))) {
HXLINE( 432)			if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 433)				::Dynamic this2 = ::backend::Paths_obj::currentTrackedSounds;
HXDLIN( 433)				( ( ::haxe::ds::StringMap)(this2) )->set(file,::openfl::media::Sound_obj::fromFile(file));
            			}
            			else {
HXLINE( 438)				if (( (bool)(beepOnNull) )) {
HXLINE( 440)					::haxe::Log_obj::trace((((HX_("SOUND NOT FOUND: ",2a,60,7a,86) + key) + HX_(", PATH: ",ff,c8,af,a8)) + path),::hx::SourceInfo(HX_("source/backend/Paths.hx",ff,43,8c,3d),440,HX_("backend.Paths",34,17,99,92),HX_("returnSound",ff,59,a9,8d)));
HXLINE( 441)					::flixel::FlxG_obj::log->advanced((((HX_("SOUND NOT FOUND: ",2a,60,7a,86) + key) + HX_(", PATH: ",ff,c8,af,a8)) + path),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
HXLINE( 442)					return ::flixel::_hx_system::FlxAssets_obj::getSound(HX_("flixel/sounds/beep",e6,b5,a9,33));
            				}
            			}
            		}
HXLINE( 445)		::backend::Paths_obj::localTrackedAssets->push(file);
HXLINE( 446)		return ( ( ::openfl::media::Sound)(::backend::Paths_obj::currentTrackedSounds->get(file)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Paths_obj,returnSound,return )

::String Paths_obj::mods(::String __o_key){
            		::String key = __o_key;
            		if (::hx::IsNull(__o_key)) key = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_451_mods)
HXDLIN( 451)		return (HX_("mods/",9e,2f,58,0c) + key);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,mods,return )

::String Paths_obj::modsJson(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_454_modsJson)
HXDLIN( 454)		return ::backend::Paths_obj::modFolders(((HX_("data/",c5,0e,88,d4) + key) + HX_(".json",56,f1,d6,c2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,modsJson,return )

::String Paths_obj::modsVideo(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_457_modsVideo)
HXDLIN( 457)		return ::backend::Paths_obj::modFolders((((HX_("videos/",97,cd,86,fd) + key) + HX_(".",2e,00,00,00)) + HX_("mp4",71,17,53,00)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,modsVideo,return )

::String Paths_obj::modsSounds(::String path,::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_460_modsSounds)
HXDLIN( 460)		return ::backend::Paths_obj::modFolders(((((path + HX_("/",2f,00,00,00)) + key) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Paths_obj,modsSounds,return )

::String Paths_obj::modsImages(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_463_modsImages)
HXDLIN( 463)		return ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".png",3b,2d,bd,1e)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,modsImages,return )

::String Paths_obj::modsXml(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_466_modsXml)
HXDLIN( 466)		return ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,modsXml,return )

::String Paths_obj::modsTxt(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_469_modsTxt)
HXDLIN( 469)		return ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".txt",02,3f,c0,1e)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,modsTxt,return )

::String Paths_obj::modsImagesJson(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_472_modsImagesJson)
HXDLIN( 472)		return ::backend::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".json",56,f1,d6,c2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,modsImagesJson,return )

::String Paths_obj::modFolders(::String key){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_475_modFolders)
HXLINE( 476)		bool _hx_tmp;
HXDLIN( 476)		if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE( 476)			_hx_tmp = (::backend::Mods_obj::currentModDirectory.length > 0);
            		}
            		else {
HXLINE( 476)			_hx_tmp = false;
            		}
HXDLIN( 476)		if (_hx_tmp) {
HXLINE( 478)			::String key1 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + key);
HXDLIN( 478)			if (::hx::IsNull( key1 )) {
HXLINE( 478)				key1 = HX_("",00,00,00,00);
            			}
HXDLIN( 478)			::String fileToCheck = (HX_("mods/",9e,2f,58,0c) + key1);
HXLINE( 479)			if (::sys::FileSystem_obj::exists(fileToCheck)) {
HXLINE( 480)				return fileToCheck;
            			}
            		}
HXLINE( 483)		{
HXLINE( 483)			int _g = 0;
HXDLIN( 483)			::Array< ::String > _g1 = ::backend::Mods_obj::globalMods;
HXDLIN( 483)			while((_g < _g1->length)){
HXLINE( 483)				::String mod = _g1->__get(_g);
HXDLIN( 483)				_g = (_g + 1);
HXLINE( 485)				::String key2 = ((mod + HX_("/",2f,00,00,00)) + key);
HXDLIN( 485)				if (::hx::IsNull( key2 )) {
HXLINE( 485)					key2 = HX_("",00,00,00,00);
            				}
HXDLIN( 485)				::String fileToCheck1 = (HX_("mods/",9e,2f,58,0c) + key2);
HXLINE( 486)				if (::sys::FileSystem_obj::exists(fileToCheck1)) {
HXLINE( 487)					return fileToCheck1;
            				}
            			}
            		}
HXLINE( 489)		return (HX_("mods/",9e,2f,58,0c) + key);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Paths_obj,modFolders,return )

void Paths_obj::loadAnimateAtlas( ::flxanimate::PsychFlxAnimate spr, ::Dynamic folderOrImg, ::Dynamic spriteJson, ::Dynamic animationJson){
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_495_loadAnimateAtlas)
HXLINE( 496)		bool changedAnimJson = false;
HXLINE( 497)		bool changedAtlasJson = false;
HXLINE( 498)		bool changedImage = false;
HXLINE( 500)		if (::hx::IsNotNull( spriteJson )) {
HXLINE( 502)			changedAtlasJson = true;
HXLINE( 503)			spriteJson = ::sys::io::File_obj::getContent(( (::String)(spriteJson) ));
            		}
HXLINE( 506)		if (::hx::IsNotNull( animationJson )) {
HXLINE( 508)			changedAnimJson = true;
HXLINE( 509)			animationJson = ::sys::io::File_obj::getContent(( (::String)(animationJson) ));
            		}
HXLINE( 513)		if (::Std_obj::isOfType(folderOrImg,::hx::ClassOf< ::String >())) {
HXLINE( 515)			::String originalPath = ( (::String)(folderOrImg) );
HXLINE( 516)			{
HXLINE( 516)				int _g = 0;
HXDLIN( 516)				while((_g < 10)){
HXLINE( 516)					_g = (_g + 1);
HXDLIN( 516)					int i = (_g - 1);
HXLINE( 518)					::String st = (HX_("",00,00,00,00) + i);
HXLINE( 519)					if ((i == 0)) {
HXLINE( 519)						st = HX_("",00,00,00,00);
            					}
HXLINE( 521)					if (!(changedAtlasJson)) {
HXLINE( 523)						::String path = ::backend::Paths_obj::getPath(((((HX_("images/",77,50,74,c1) + originalPath) + HX_("/spritemap",a8,c1,c8,a3)) + st) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),null(),true);
HXDLIN( 523)						if (::sys::FileSystem_obj::exists(path)) {
HXLINE( 523)							spriteJson = ::sys::io::File_obj::getContent(path);
            						}
            						else {
HXLINE( 523)							spriteJson = null();
            						}
HXLINE( 524)						if (::hx::IsNotNull( spriteJson )) {
HXLINE( 527)							changedImage = true;
HXLINE( 528)							changedAtlasJson = true;
HXLINE( 529)							folderOrImg = ::backend::Paths_obj::image((((HX_("",00,00,00,00) + originalPath) + HX_("/spritemap",a8,c1,c8,a3)) + st),null(),null());
HXLINE( 530)							goto _hx_goto_53;
            						}
            					}
            					else {
HXLINE( 533)						if (::backend::Paths_obj::fileExists(((((HX_("images/",77,50,74,c1) + originalPath) + HX_("/spritemap",a8,c1,c8,a3)) + st) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),null(),null())) {
HXLINE( 536)							changedImage = true;
HXLINE( 537)							folderOrImg = ::backend::Paths_obj::image((((HX_("",00,00,00,00) + originalPath) + HX_("/spritemap",a8,c1,c8,a3)) + st),null(),null());
HXLINE( 538)							goto _hx_goto_53;
            						}
            					}
            				}
            				_hx_goto_53:;
            			}
HXLINE( 542)			if (!(changedImage)) {
HXLINE( 545)				changedImage = true;
HXLINE( 546)				folderOrImg = ::backend::Paths_obj::image(originalPath,null(),null());
            			}
HXLINE( 549)			if (!(changedAnimJson)) {
HXLINE( 552)				changedAnimJson = true;
HXLINE( 553)				::String path1 = ::backend::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + originalPath) + HX_("/Animation.json",61,fc,54,44)),HX_("TEXT",ad,94,ba,37),null(),true);
HXDLIN( 553)				if (::sys::FileSystem_obj::exists(path1)) {
HXLINE( 553)					animationJson = ::sys::io::File_obj::getContent(path1);
            				}
            				else {
HXLINE( 553)					animationJson = null();
            				}
            			}
            		}
HXLINE( 560)		spr->loadAtlasEx(folderOrImg,( (::String)(spriteJson) ),animationJson);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Paths_obj,loadAnimateAtlas,(void))


Paths_obj::Paths_obj()
{
}

bool Paths_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"txt") ) { outValue = txt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"xml") ) { outValue = xml_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lua") ) { outValue = lua_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"json") ) { outValue = json_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"inst") ) { outValue = inst_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"font") ) { outValue = font_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mods") ) { outValue = mods_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"video") ) { outValue = video_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sound") ) { outValue = sound_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"music") ) { outValue = music_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"image") ) { outValue = image_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"voices") ) { outValue = voices_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getPath") ) { outValue = getPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modsXml") ) { outValue = modsXml_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modsTxt") ) { outValue = modsTxt_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getAtlas") ) { outValue = getAtlas_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modsJson") ) { outValue = modsJson_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"modsVideo") ) { outValue = modsVideo_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fileExists") ) { outValue = fileExists_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modsSounds") ) { outValue = modsSounds_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modsImages") ) { outValue = modsImages_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modFolders") ) { outValue = modFolders_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"soundRandom") ) { outValue = soundRandom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cacheBitmap") ) { outValue = cacheBitmap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"returnSound") ) { outValue = returnSound_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"excludeAsset") ) { outValue = excludeAsset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"currentLevel") ) { outValue = ( currentLevel ); return true; }
		if (HX_FIELD_EQ(inName,"shaderVertex") ) { outValue = shaderVertex_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getFolderPath") ) { outValue = getFolderPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSharedPath") ) { outValue = getSharedPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getMultiAtlas") ) { outValue = getMultiAtlas_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dumpExclusions") ) { outValue = ( dumpExclusions ); return true; }
		if (HX_FIELD_EQ(inName,"destroyGraphic") ) { outValue = destroyGraphic_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shaderFragment") ) { outValue = shaderFragment_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPackerAtlas") ) { outValue = getPackerAtlas_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modsImagesJson") ) { outValue = modsImagesJson_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setCurrentLevel") ) { outValue = setCurrentLevel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getTextFromFile") ) { outValue = getTextFromFile_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSparrowAtlas") ) { outValue = getSparrowAtlas_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getAsepriteAtlas") ) { outValue = getAsepriteAtlas_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"formatToSongPath") ) { outValue = formatToSongPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadAnimateAtlas") ) { outValue = loadAnimateAtlas_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"clearUnusedMemory") ) { outValue = clearUnusedMemory_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clearStoredMemory") ) { outValue = clearStoredMemory_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"localTrackedAssets") ) { outValue = ( localTrackedAssets ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"currentTrackedAssets") ) { outValue = ( currentTrackedAssets ); return true; }
		if (HX_FIELD_EQ(inName,"currentTrackedSounds") ) { outValue = ( currentTrackedSounds ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"freeGraphicsFromMemory") ) { outValue = freeGraphicsFromMemory_dyn(); return true; }
	}
	return false;
}

bool Paths_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"currentLevel") ) { currentLevel=ioValue.Cast< ::String >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dumpExclusions") ) { dumpExclusions=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"localTrackedAssets") ) { localTrackedAssets=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"currentTrackedAssets") ) { currentTrackedAssets=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"currentTrackedSounds") ) { currentTrackedSounds=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Paths_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Paths_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &Paths_obj::SOUND_EXT,HX_("SOUND_EXT",b1,35,8c,6f)},
	{::hx::fsString,(void *) &Paths_obj::VIDEO_EXT,HX_("VIDEO_EXT",5d,03,77,8a)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &Paths_obj::dumpExclusions,HX_("dumpExclusions",39,38,dc,ef)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &Paths_obj::localTrackedAssets,HX_("localTrackedAssets",62,77,3a,fc)},
	{::hx::fsString,(void *) &Paths_obj::currentLevel,HX_("currentLevel",8b,fa,6e,b9)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Paths_obj::currentTrackedAssets,HX_("currentTrackedAssets",d4,7b,e5,0f)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Paths_obj::currentTrackedSounds,HX_("currentTrackedSounds",15,dc,10,f6)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Paths_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Paths_obj::SOUND_EXT,"SOUND_EXT");
	HX_MARK_MEMBER_NAME(Paths_obj::VIDEO_EXT,"VIDEO_EXT");
	HX_MARK_MEMBER_NAME(Paths_obj::dumpExclusions,"dumpExclusions");
	HX_MARK_MEMBER_NAME(Paths_obj::localTrackedAssets,"localTrackedAssets");
	HX_MARK_MEMBER_NAME(Paths_obj::currentLevel,"currentLevel");
	HX_MARK_MEMBER_NAME(Paths_obj::currentTrackedAssets,"currentTrackedAssets");
	HX_MARK_MEMBER_NAME(Paths_obj::currentTrackedSounds,"currentTrackedSounds");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Paths_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Paths_obj::SOUND_EXT,"SOUND_EXT");
	HX_VISIT_MEMBER_NAME(Paths_obj::VIDEO_EXT,"VIDEO_EXT");
	HX_VISIT_MEMBER_NAME(Paths_obj::dumpExclusions,"dumpExclusions");
	HX_VISIT_MEMBER_NAME(Paths_obj::localTrackedAssets,"localTrackedAssets");
	HX_VISIT_MEMBER_NAME(Paths_obj::currentLevel,"currentLevel");
	HX_VISIT_MEMBER_NAME(Paths_obj::currentTrackedAssets,"currentTrackedAssets");
	HX_VISIT_MEMBER_NAME(Paths_obj::currentTrackedSounds,"currentTrackedSounds");
};

#endif

::hx::Class Paths_obj::__mClass;

static ::String Paths_obj_sStaticFields[] = {
	HX_("SOUND_EXT",b1,35,8c,6f),
	HX_("VIDEO_EXT",5d,03,77,8a),
	HX_("excludeAsset",b6,04,50,31),
	HX_("dumpExclusions",39,38,dc,ef),
	HX_("clearUnusedMemory",e4,29,80,28),
	HX_("localTrackedAssets",62,77,3a,fc),
	HX_("clearStoredMemory",f1,99,87,55),
	HX_("freeGraphicsFromMemory",82,34,07,0d),
	HX_("destroyGraphic",ce,48,73,e0),
	HX_("currentLevel",8b,fa,6e,b9),
	HX_("setCurrentLevel",4d,cd,24,d8),
	HX_("getPath",5b,95,d4,1c),
	HX_("getFolderPath",a9,d3,59,0b),
	HX_("getSharedPath",20,83,ed,cb),
	HX_("txt",70,6e,58,00),
	HX_("xml",d7,6d,5b,00),
	HX_("json",28,42,68,46),
	HX_("shaderFragment",15,08,f3,5e),
	HX_("shaderVertex",69,78,30,11),
	HX_("lua",b8,59,52,00),
	HX_("video",7b,14,fc,36),
	HX_("sound",cf,8c,cc,80),
	HX_("music",a5,d0,5a,10),
	HX_("inst",c6,43,bb,45),
	HX_("voices",81,d6,49,5d),
	HX_("soundRandom",32,28,bc,6a),
	HX_("currentTrackedAssets",d4,7b,e5,0f),
	HX_("image",5b,1f,69,bd),
	HX_("cacheBitmap",d1,3b,ad,0f),
	HX_("getTextFromFile",89,70,ed,f8),
	HX_("font",cf,5d,c0,43),
	HX_("fileExists",78,65,64,a0),
	HX_("getAtlas",d5,5c,b4,86),
	HX_("getMultiAtlas",48,f8,01,53),
	HX_("getSparrowAtlas",55,ab,b7,a7),
	HX_("getPackerAtlas",ef,b2,47,f7),
	HX_("getAsepriteAtlas",50,c7,64,b2),
	HX_("formatToSongPath",cc,36,b8,49),
	HX_("currentTrackedSounds",15,dc,10,f6),
	HX_("returnSound",ff,59,a9,8d),
	HX_("mods",71,d3,60,48),
	HX_("modsJson",39,4e,4f,c6),
	HX_("modsVideo",4a,97,3f,a1),
	HX_("modsSounds",15,9b,fd,c2),
	HX_("modsImages",09,43,61,8f),
	HX_("modsXml",e6,4e,99,f6),
	HX_("modsTxt",7f,4f,96,f6),
	HX_("modsImagesJson",d1,69,9b,8c),
	HX_("modFolders",63,af,3e,e0),
	HX_("loadAnimateAtlas",30,42,b8,04),
	::String(null())
};

void Paths_obj::__register()
{
	Paths_obj _hx_dummy;
	Paths_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.Paths",34,17,99,92);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Paths_obj::__GetStatic;
	__mClass->mSetStaticField = &Paths_obj::__SetStatic;
	__mClass->mMarkFunc = Paths_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Paths_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Paths_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Paths_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Paths_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Paths_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Paths_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_29_boot)
HXDLIN(  29)		SOUND_EXT = HX_("ogg",4f,94,54,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_30_boot)
HXDLIN(  30)		VIDEO_EXT = HX_("mp4",71,17,53,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_37_boot)
HXDLIN(  37)		dumpExclusions = ::Array_obj< ::String >::__new(1)->init(0,(HX_("assets/shared/music/freakyMenu.",f1,72,16,d3) + HX_("ogg",4f,94,54,00)));
            	}
{
            	HX_STACKFRAME(&_hx_pos_359943aa63fd1400_57_boot)
HXDLIN(  57)		localTrackedAssets = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_359943aa63fd1400_228_boot)
HXDLIN( 228)		currentTrackedAssets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_359943aa63fd1400_423_boot)
HXDLIN( 423)		currentTrackedSounds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace backend
