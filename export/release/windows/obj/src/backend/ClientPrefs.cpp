// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_backend_Achievements
#include <backend/Achievements.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_DiscordClient
#include <backend/DiscordClient.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_debug_FPSCounter
#include <debug/FPSCounter.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_system_DisplayMode
#include <lime/system/DisplayMode.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_states_TitleState
#include <states/TitleState.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f803784cd60a57bc_131_resetKeys,"backend.ClientPrefs","resetKeys",0xb0375ba0,"backend.ClientPrefs.resetKeys","backend/ClientPrefs.hx",131,0x8f1e64f4)
HX_LOCAL_STACK_FRAME(_hx_pos_f803784cd60a57bc_144_clearInvalidKeys,"backend.ClientPrefs","clearInvalidKeys",0x38cf1961,"backend.ClientPrefs.clearInvalidKeys","backend/ClientPrefs.hx",144,0x8f1e64f4)
HX_LOCAL_STACK_FRAME(_hx_pos_f803784cd60a57bc_152_loadDefaultKeys,"backend.ClientPrefs","loadDefaultKeys",0x97d31acc,"backend.ClientPrefs.loadDefaultKeys","backend/ClientPrefs.hx",152,0x8f1e64f4)
HX_LOCAL_STACK_FRAME(_hx_pos_f803784cd60a57bc_157_saveSettings,"backend.ClientPrefs","saveSettings",0x0d395d23,"backend.ClientPrefs.saveSettings","backend/ClientPrefs.hx",157,0x8f1e64f4)
HX_LOCAL_STACK_FRAME(_hx_pos_f803784cd60a57bc_173_loadPrefs,"backend.ClientPrefs","loadPrefs",0x07040467,"backend.ClientPrefs.loadPrefs","backend/ClientPrefs.hx",173,0x8f1e64f4)
HX_LOCAL_STACK_FRAME(_hx_pos_f803784cd60a57bc_240_getGameplaySetting,"backend.ClientPrefs","getGameplaySetting",0x319a8f77,"backend.ClientPrefs.getGameplaySetting","backend/ClientPrefs.hx",240,0x8f1e64f4)
HX_LOCAL_STACK_FRAME(_hx_pos_f803784cd60a57bc_246_reloadVolumeKeys,"backend.ClientPrefs","reloadVolumeKeys",0x7b6e4f0a,"backend.ClientPrefs.reloadVolumeKeys","backend/ClientPrefs.hx",246,0x8f1e64f4)
HX_LOCAL_STACK_FRAME(_hx_pos_f803784cd60a57bc_253_toggleVolumeKeys,"backend.ClientPrefs","toggleVolumeKeys",0x34547305,"backend.ClientPrefs.toggleVolumeKeys","backend/ClientPrefs.hx",253,0x8f1e64f4)
HX_LOCAL_STACK_FRAME(_hx_pos_f803784cd60a57bc_83_boot,"backend.ClientPrefs","boot",0xd846fd15,"backend.ClientPrefs.boot","backend/ClientPrefs.hx",83,0x8f1e64f4)
HX_LOCAL_STACK_FRAME(_hx_pos_f803784cd60a57bc_84_boot,"backend.ClientPrefs","boot",0xd846fd15,"backend.ClientPrefs.boot","backend/ClientPrefs.hx",84,0x8f1e64f4)
HX_LOCAL_STACK_FRAME(_hx_pos_f803784cd60a57bc_87_boot,"backend.ClientPrefs","boot",0xd846fd15,"backend.ClientPrefs.boot","backend/ClientPrefs.hx",87,0x8f1e64f4)
static const int _hx_array_data_d481926b_20[] = {
	(int)87,(int)38,
};
static const int _hx_array_data_d481926b_21[] = {
	(int)65,(int)37,
};
static const int _hx_array_data_d481926b_22[] = {
	(int)83,(int)40,
};
static const int _hx_array_data_d481926b_23[] = {
	(int)68,(int)39,
};
static const int _hx_array_data_d481926b_24[] = {
	(int)87,(int)38,
};
static const int _hx_array_data_d481926b_25[] = {
	(int)65,(int)37,
};
static const int _hx_array_data_d481926b_26[] = {
	(int)83,(int)40,
};
static const int _hx_array_data_d481926b_27[] = {
	(int)68,(int)39,
};
static const int _hx_array_data_d481926b_28[] = {
	(int)32,(int)13,
};
static const int _hx_array_data_d481926b_29[] = {
	(int)8,(int)27,
};
static const int _hx_array_data_d481926b_30[] = {
	(int)13,(int)27,
};
static const int _hx_array_data_d481926b_31[] = {
	(int)82,
};
static const int _hx_array_data_d481926b_32[] = {
	(int)48,
};
static const int _hx_array_data_d481926b_33[] = {
	(int)107,(int)187,
};
static const int _hx_array_data_d481926b_34[] = {
	(int)109,(int)189,
};
static const int _hx_array_data_d481926b_35[] = {
	(int)55,
};
static const int _hx_array_data_d481926b_36[] = {
	(int)56,
};
HX_LOCAL_STACK_FRAME(_hx_pos_f803784cd60a57bc_111_boot,"backend.ClientPrefs","boot",0xd846fd15,"backend.ClientPrefs.boot","backend/ClientPrefs.hx",111,0x8f1e64f4)
static const int _hx_array_data_d481926b_39[] = {
	(int)11,(int)3,
};
static const int _hx_array_data_d481926b_40[] = {
	(int)13,(int)2,
};
static const int _hx_array_data_d481926b_41[] = {
	(int)12,(int)0,
};
static const int _hx_array_data_d481926b_42[] = {
	(int)14,(int)1,
};
static const int _hx_array_data_d481926b_43[] = {
	(int)11,(int)34,
};
static const int _hx_array_data_d481926b_44[] = {
	(int)13,(int)37,
};
static const int _hx_array_data_d481926b_45[] = {
	(int)12,(int)36,
};
static const int _hx_array_data_d481926b_46[] = {
	(int)14,(int)35,
};
static const int _hx_array_data_d481926b_47[] = {
	(int)0,(int)7,
};
static const int _hx_array_data_d481926b_48[] = {
	(int)1,
};
static const int _hx_array_data_d481926b_49[] = {
	(int)7,
};
static const int _hx_array_data_d481926b_50[] = {
	(int)6,
};
HX_LOCAL_STACK_FRAME(_hx_pos_f803784cd60a57bc_127_boot,"backend.ClientPrefs","boot",0xd846fd15,"backend.ClientPrefs.boot","backend/ClientPrefs.hx",127,0x8f1e64f4)
HX_LOCAL_STACK_FRAME(_hx_pos_f803784cd60a57bc_128_boot,"backend.ClientPrefs","boot",0xd846fd15,"backend.ClientPrefs.boot","backend/ClientPrefs.hx",128,0x8f1e64f4)
namespace backend{

void ClientPrefs_obj::__construct() { }

Dynamic ClientPrefs_obj::__CreateEmpty() { return new ClientPrefs_obj; }

void *ClientPrefs_obj::_hx_vtable = 0;

Dynamic ClientPrefs_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ClientPrefs_obj > _hx_result = new ClientPrefs_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ClientPrefs_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0a517989;
}

 ::backend::SaveVariables ClientPrefs_obj::data;

 ::backend::SaveVariables ClientPrefs_obj::defaultData;

 ::haxe::ds::StringMap ClientPrefs_obj::keyBinds;

 ::haxe::ds::StringMap ClientPrefs_obj::gamepadBinds;

 ::haxe::ds::StringMap ClientPrefs_obj::defaultKeys;

 ::haxe::ds::StringMap ClientPrefs_obj::defaultButtons;

void ClientPrefs_obj::resetKeys( ::Dynamic controller){
            	HX_STACKFRAME(&_hx_pos_f803784cd60a57bc_131_resetKeys)
HXLINE( 132)		if (::hx::IsNotEq( controller,true )) {
HXLINE( 133)			 ::Dynamic key = ::backend::ClientPrefs_obj::keyBinds->keys();
HXDLIN( 133)			while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 133)				::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 134)				if (::backend::ClientPrefs_obj::defaultKeys->exists(key1)) {
HXLINE( 135)					::Dynamic this1 = ::backend::ClientPrefs_obj::keyBinds;
HXDLIN( 135)					( ( ::haxe::ds::StringMap)(this1) )->set(key1,( (::Array< int >)(::backend::ClientPrefs_obj::defaultKeys->get(key1)) )->copy());
            				}
            			}
            		}
HXLINE( 137)		if (::hx::IsNotEq( controller,false )) {
HXLINE( 138)			 ::Dynamic button = ::backend::ClientPrefs_obj::gamepadBinds->keys();
HXDLIN( 138)			while(( (bool)(button->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 138)				::String button1 = ( (::String)(button->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 139)				if (::backend::ClientPrefs_obj::defaultButtons->exists(button1)) {
HXLINE( 140)					::Dynamic this2 = ::backend::ClientPrefs_obj::gamepadBinds;
HXDLIN( 140)					( ( ::haxe::ds::StringMap)(this2) )->set(button1,( (::Array< int >)(::backend::ClientPrefs_obj::defaultButtons->get(button1)) )->copy());
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ClientPrefs_obj,resetKeys,(void))

void ClientPrefs_obj::clearInvalidKeys(::String key){
            	HX_STACKFRAME(&_hx_pos_f803784cd60a57bc_144_clearInvalidKeys)
HXLINE( 145)		::Array< int > keyBind = ( (::Array< int >)(::backend::ClientPrefs_obj::keyBinds->get(key)) );
HXLINE( 146)		::Array< int > gamepadBind = ( (::Array< int >)(::backend::ClientPrefs_obj::gamepadBinds->get(key)) );
HXLINE( 147)		while(true){
HXLINE( 147)			bool _hx_tmp;
HXDLIN( 147)			if (::hx::IsNotNull( keyBind )) {
HXLINE( 147)				_hx_tmp = keyBind->contains(-1);
            			}
            			else {
HXLINE( 147)				_hx_tmp = false;
            			}
HXDLIN( 147)			if (!(_hx_tmp)) {
HXLINE( 147)				goto _hx_goto_3;
            			}
HXDLIN( 147)			keyBind->remove(-1);
            		}
            		_hx_goto_3:;
HXLINE( 148)		while(true){
HXLINE( 148)			bool _hx_tmp1;
HXDLIN( 148)			if (::hx::IsNotNull( gamepadBind )) {
HXLINE( 148)				_hx_tmp1 = gamepadBind->contains(-1);
            			}
            			else {
HXLINE( 148)				_hx_tmp1 = false;
            			}
HXDLIN( 148)			if (!(_hx_tmp1)) {
HXLINE( 148)				goto _hx_goto_4;
            			}
HXDLIN( 148)			gamepadBind->remove(-1);
            		}
            		_hx_goto_4:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ClientPrefs_obj,clearInvalidKeys,(void))

void ClientPrefs_obj::loadDefaultKeys(){
            	HX_STACKFRAME(&_hx_pos_f803784cd60a57bc_152_loadDefaultKeys)
HXLINE( 153)		::backend::ClientPrefs_obj::defaultKeys = ::backend::ClientPrefs_obj::keyBinds->copy();
HXLINE( 154)		::backend::ClientPrefs_obj::defaultButtons = ::backend::ClientPrefs_obj::gamepadBinds->copy();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ClientPrefs_obj,loadDefaultKeys,(void))

void ClientPrefs_obj::saveSettings(){
            	HX_GC_STACKFRAME(&_hx_pos_f803784cd60a57bc_157_saveSettings)
HXLINE( 158)		{
HXLINE( 158)			int _g = 0;
HXDLIN( 158)			::Array< ::String > _g1 = ::Reflect_obj::fields(::backend::ClientPrefs_obj::data);
HXDLIN( 158)			while((_g < _g1->length)){
HXLINE( 158)				::String key = _g1->__get(_g);
HXDLIN( 158)				_g = (_g + 1);
HXLINE( 159)				 ::Dynamic _hx_tmp = ::flixel::FlxG_obj::save->data;
HXDLIN( 159)				::Reflect_obj::setField(_hx_tmp,key,::Reflect_obj::field(::backend::ClientPrefs_obj::data,key));
            			}
            		}
HXLINE( 161)		::backend::Achievements_obj::save();
HXLINE( 162)		::flixel::FlxG_obj::save->flush(null());
HXLINE( 165)		 ::flixel::util::FlxSave save =  ::flixel::util::FlxSave_obj::__alloc( HX_CTX );
HXLINE( 166)		::String company = ::openfl::Lib_obj::get_current()->stage->application->meta->get_string(HX_("company",3d,15,69,83));
HXDLIN( 166)		save->bind(HX_("controls_v3",66,e4,a2,26),(((HX_("",00,00,00,00) + company) + HX_("/",2f,00,00,00)) + ::flixel::util::FlxSave_obj::validate(::openfl::Lib_obj::get_current()->stage->application->meta->get_string(HX_("file",7c,ce,bb,43)))));
HXLINE( 167)		save->data->__SetField(HX_("keyboard",a7,bc,29,68),::backend::ClientPrefs_obj::keyBinds,::hx::paccDynamic);
HXLINE( 168)		save->data->__SetField(HX_("gamepad",a1,e0,85,89),::backend::ClientPrefs_obj::gamepadBinds,::hx::paccDynamic);
HXLINE( 169)		save->flush(null());
HXLINE( 170)		::flixel::FlxG_obj::log->advanced(HX_("Settings saved!",37,01,d5,e3),::flixel::_hx_system::debug::log::LogStyle_obj::NORMAL,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ClientPrefs_obj,saveSettings,(void))

void ClientPrefs_obj::loadPrefs(){
            	HX_GC_STACKFRAME(&_hx_pos_f803784cd60a57bc_173_loadPrefs)
HXLINE( 174)		::backend::Achievements_obj::load();
HXLINE( 176)		{
HXLINE( 176)			int _g = 0;
HXDLIN( 176)			::Array< ::String > _g1 = ::Reflect_obj::fields(::backend::ClientPrefs_obj::data);
HXDLIN( 176)			while((_g < _g1->length)){
HXLINE( 176)				::String key = _g1->__get(_g);
HXDLIN( 176)				_g = (_g + 1);
HXLINE( 177)				bool _hx_tmp;
HXDLIN( 177)				if ((key != HX_("gameplaySettings",e9,91,4c,17))) {
HXLINE( 177)					_hx_tmp = ::Reflect_obj::hasField(::flixel::FlxG_obj::save->data,key);
            				}
            				else {
HXLINE( 177)					_hx_tmp = false;
            				}
HXDLIN( 177)				if (_hx_tmp) {
HXLINE( 178)					 ::backend::SaveVariables _hx_tmp1 = ::backend::ClientPrefs_obj::data;
HXDLIN( 178)					::Reflect_obj::setField(_hx_tmp1,key,::Reflect_obj::field(::flixel::FlxG_obj::save->data,key));
            				}
            			}
            		}
HXLINE( 180)		if (::hx::IsNotNull( ::Main_obj::fpsVar )) {
HXLINE( 181)			::Main_obj::fpsVar->set_visible(::backend::ClientPrefs_obj::data->showFPS);
            		}
HXLINE( 184)		::flixel::FlxG_obj::autoPause = ::backend::ClientPrefs_obj::data->autoPause;
HXLINE( 186)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("framerate",8d,e5,4b,4e),::hx::paccDynamic) )) {
HXLINE( 187)			int refreshRate = ::openfl::Lib_obj::get_current()->stage->application->_hx___window->get_displayMode()->refreshRate;
HXLINE( 188)			Float lowerBound;
HXDLIN( 188)			if ((refreshRate < 60)) {
HXLINE( 188)				lowerBound = ( (Float)(60) );
            			}
            			else {
HXLINE( 188)				lowerBound = ( (Float)(refreshRate) );
            			}
HXDLIN( 188)			Float _hx_tmp2;
HXDLIN( 188)			if ((lowerBound > 240)) {
HXLINE( 188)				_hx_tmp2 = ( (Float)(240) );
            			}
            			else {
HXLINE( 188)				_hx_tmp2 = lowerBound;
            			}
HXDLIN( 188)			::backend::ClientPrefs_obj::data->framerate = ::Std_obj::_hx_int(_hx_tmp2);
            		}
HXLINE( 192)		if ((::backend::ClientPrefs_obj::data->framerate > ::flixel::FlxG_obj::drawFramerate)) {
HXLINE( 194)			::flixel::FlxG_obj::set_updateFramerate(::backend::ClientPrefs_obj::data->framerate);
HXLINE( 195)			::flixel::FlxG_obj::set_drawFramerate(::backend::ClientPrefs_obj::data->framerate);
            		}
            		else {
HXLINE( 199)			::flixel::FlxG_obj::set_drawFramerate(::backend::ClientPrefs_obj::data->framerate);
HXLINE( 200)			::flixel::FlxG_obj::set_updateFramerate(::backend::ClientPrefs_obj::data->framerate);
            		}
HXLINE( 203)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("gameplaySettings",e9,91,4c,17),::hx::paccDynamic) )) {
HXLINE( 205)			 ::haxe::ds::StringMap savedMap = ( ( ::haxe::ds::StringMap)(::flixel::FlxG_obj::save->data->__Field(HX_("gameplaySettings",e9,91,4c,17),::hx::paccDynamic)) );
HXLINE( 206)			{
HXLINE( 206)				::Dynamic map = savedMap;
HXDLIN( 206)				::Dynamic _g_map = map;
HXDLIN( 206)				 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 206)				while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 206)					::String key1 = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 206)					 ::Dynamic _g_value = ::haxe::IMap_obj::get(_g_map,key1);
HXDLIN( 206)					::String _g_key = key1;
HXDLIN( 206)					::String name = _g_key;
HXDLIN( 206)					 ::Dynamic value = _g_value;
HXLINE( 207)					::backend::ClientPrefs_obj::data->gameplaySettings->set(name,value);
            				}
            			}
            		}
HXLINE( 211)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("volume",da,29,53,5f),::hx::paccDynamic) )) {
HXLINE( 212)			::flixel::FlxG_obj::sound->set_volume(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("volume",da,29,53,5f),::hx::paccDynamic)) ));
            		}
HXLINE( 213)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("mute",d9,6e,65,48),::hx::paccDynamic) )) {
HXLINE( 214)			::flixel::FlxG_obj::sound->muted = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("mute",d9,6e,65,48),::hx::paccDynamic)) );
            		}
HXLINE( 216)		::backend::DiscordClient_obj::check();
HXLINE( 219)		 ::flixel::util::FlxSave save =  ::flixel::util::FlxSave_obj::__alloc( HX_CTX );
HXLINE( 220)		::String company = ::openfl::Lib_obj::get_current()->stage->application->meta->get_string(HX_("company",3d,15,69,83));
HXDLIN( 220)		save->bind(HX_("controls_v3",66,e4,a2,26),(((HX_("",00,00,00,00) + company) + HX_("/",2f,00,00,00)) + ::flixel::util::FlxSave_obj::validate(::openfl::Lib_obj::get_current()->stage->application->meta->get_string(HX_("file",7c,ce,bb,43)))));
HXLINE( 221)		if (::hx::IsNotNull( save )) {
HXLINE( 223)			if (::hx::IsNotNull( save->data->__Field(HX_("keyboard",a7,bc,29,68),::hx::paccDynamic) )) {
HXLINE( 225)				 ::haxe::ds::StringMap loadedControls = ( ( ::haxe::ds::StringMap)(save->data->__Field(HX_("keyboard",a7,bc,29,68),::hx::paccDynamic)) );
HXLINE( 226)				{
HXLINE( 226)					::Dynamic map1 = loadedControls;
HXDLIN( 226)					::Dynamic _g_map1 = map1;
HXDLIN( 226)					 ::Dynamic _g_keys1 = ::haxe::IMap_obj::keys(map1);
HXDLIN( 226)					while(( (bool)(_g_keys1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 226)						::String key2 = ( (::String)(_g_keys1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 226)						::Array< int > _g_value1 = ( (::Array< int >)(::haxe::IMap_obj::get(_g_map1,key2)) );
HXDLIN( 226)						::String _g_key1 = key2;
HXDLIN( 226)						::String control = _g_key1;
HXDLIN( 226)						::Array< int > keys = _g_value1;
HXLINE( 227)						if (::backend::ClientPrefs_obj::keyBinds->exists(control)) {
HXLINE( 227)							::backend::ClientPrefs_obj::keyBinds->set(control,keys);
            						}
            					}
            				}
            			}
HXLINE( 229)			if (::hx::IsNotNull( save->data->__Field(HX_("gamepad",a1,e0,85,89),::hx::paccDynamic) )) {
HXLINE( 231)				 ::haxe::ds::StringMap loadedControls1 = ( ( ::haxe::ds::StringMap)(save->data->__Field(HX_("gamepad",a1,e0,85,89),::hx::paccDynamic)) );
HXLINE( 232)				{
HXLINE( 232)					::Dynamic map2 = loadedControls1;
HXDLIN( 232)					::Dynamic _g_map2 = map2;
HXDLIN( 232)					 ::Dynamic _g_keys2 = ::haxe::IMap_obj::keys(map2);
HXDLIN( 232)					while(( (bool)(_g_keys2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 232)						::String key3 = ( (::String)(_g_keys2->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 232)						::Array< int > _g_value2 = ( (::Array< int >)(::haxe::IMap_obj::get(_g_map2,key3)) );
HXDLIN( 232)						::String _g_key2 = key3;
HXDLIN( 232)						::String control1 = _g_key2;
HXDLIN( 232)						::Array< int > keys1 = _g_value2;
HXLINE( 233)						if (::backend::ClientPrefs_obj::gamepadBinds->exists(control1)) {
HXLINE( 233)							::backend::ClientPrefs_obj::gamepadBinds->set(control1,keys1);
            						}
            					}
            				}
            			}
HXLINE( 235)			::backend::ClientPrefs_obj::reloadVolumeKeys();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ClientPrefs_obj,loadPrefs,(void))

 ::Dynamic ClientPrefs_obj::getGameplaySetting(::String name, ::Dynamic defaultValue, ::Dynamic __o_customDefaultValue){
            		 ::Dynamic customDefaultValue = __o_customDefaultValue;
            		if (::hx::IsNull(__o_customDefaultValue)) customDefaultValue = false;
            	HX_STACKFRAME(&_hx_pos_f803784cd60a57bc_240_getGameplaySetting)
HXLINE( 241)		if (!(( (bool)(customDefaultValue) ))) {
HXLINE( 241)			defaultValue = ::backend::ClientPrefs_obj::defaultData->gameplaySettings->get(name);
            		}
HXLINE( 242)		if (::backend::ClientPrefs_obj::data->gameplaySettings->exists(name)) {
HXLINE( 242)			return ::backend::ClientPrefs_obj::data->gameplaySettings->get(name);
            		}
            		else {
HXLINE( 242)			return defaultValue;
            		}
HXDLIN( 242)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ClientPrefs_obj,getGameplaySetting,return )

void ClientPrefs_obj::reloadVolumeKeys(){
            	HX_STACKFRAME(&_hx_pos_f803784cd60a57bc_246_reloadVolumeKeys)
HXLINE( 247)		::states::TitleState_obj::muteKeys = ( (::Array< int >)(::backend::ClientPrefs_obj::keyBinds->get(HX_("volume_mute",9e,6a,db,fa))) )->copy();
HXLINE( 248)		::states::TitleState_obj::volumeDownKeys = ( (::Array< int >)(::backend::ClientPrefs_obj::keyBinds->get(HX_("volume_down",27,f4,e3,f4))) )->copy();
HXLINE( 249)		::states::TitleState_obj::volumeUpKeys = ( (::Array< int >)(::backend::ClientPrefs_obj::keyBinds->get(HX_("volume_up",e0,76,ad,60))) )->copy();
HXLINE( 250)		::backend::ClientPrefs_obj::toggleVolumeKeys(true);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ClientPrefs_obj,reloadVolumeKeys,(void))

void ClientPrefs_obj::toggleVolumeKeys( ::Dynamic __o_turnOn){
            		 ::Dynamic turnOn = __o_turnOn;
            		if (::hx::IsNull(__o_turnOn)) turnOn = true;
            	HX_STACKFRAME(&_hx_pos_f803784cd60a57bc_253_toggleVolumeKeys)
HXLINE( 254)		::Array< int > emptyArray = ::Array_obj< int >::__new(0);
HXLINE( 255)		::Array< int > _hx_tmp;
HXDLIN( 255)		if (( (bool)(turnOn) )) {
HXLINE( 255)			_hx_tmp = ::states::TitleState_obj::muteKeys;
            		}
            		else {
HXLINE( 255)			_hx_tmp = emptyArray;
            		}
HXDLIN( 255)		::flixel::FlxG_obj::sound->muteKeys = _hx_tmp;
HXLINE( 256)		::Array< int > _hx_tmp1;
HXDLIN( 256)		if (( (bool)(turnOn) )) {
HXLINE( 256)			_hx_tmp1 = ::states::TitleState_obj::volumeDownKeys;
            		}
            		else {
HXLINE( 256)			_hx_tmp1 = emptyArray;
            		}
HXDLIN( 256)		::flixel::FlxG_obj::sound->volumeDownKeys = _hx_tmp1;
HXLINE( 257)		::Array< int > _hx_tmp2;
HXDLIN( 257)		if (( (bool)(turnOn) )) {
HXLINE( 257)			_hx_tmp2 = ::states::TitleState_obj::volumeUpKeys;
            		}
            		else {
HXLINE( 257)			_hx_tmp2 = emptyArray;
            		}
HXDLIN( 257)		::flixel::FlxG_obj::sound->volumeUpKeys = _hx_tmp2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ClientPrefs_obj,toggleVolumeKeys,(void))


ClientPrefs_obj::ClientPrefs_obj()
{
}

bool ClientPrefs_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { outValue = ( data ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keyBinds") ) { outValue = ( keyBinds ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"resetKeys") ) { outValue = resetKeys_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadPrefs") ) { outValue = loadPrefs_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"defaultData") ) { outValue = ( defaultData ); return true; }
		if (HX_FIELD_EQ(inName,"defaultKeys") ) { outValue = ( defaultKeys ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"gamepadBinds") ) { outValue = ( gamepadBinds ); return true; }
		if (HX_FIELD_EQ(inName,"saveSettings") ) { outValue = saveSettings_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"defaultButtons") ) { outValue = ( defaultButtons ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"loadDefaultKeys") ) { outValue = loadDefaultKeys_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"clearInvalidKeys") ) { outValue = clearInvalidKeys_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"reloadVolumeKeys") ) { outValue = reloadVolumeKeys_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toggleVolumeKeys") ) { outValue = toggleVolumeKeys_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getGameplaySetting") ) { outValue = getGameplaySetting_dyn(); return true; }
	}
	return false;
}

bool ClientPrefs_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=ioValue.Cast<  ::backend::SaveVariables >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keyBinds") ) { keyBinds=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"defaultData") ) { defaultData=ioValue.Cast<  ::backend::SaveVariables >(); return true; }
		if (HX_FIELD_EQ(inName,"defaultKeys") ) { defaultKeys=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"gamepadBinds") ) { gamepadBinds=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"defaultButtons") ) { defaultButtons=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ClientPrefs_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo ClientPrefs_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::backend::SaveVariables */ ,(void *) &ClientPrefs_obj::data,HX_("data",2a,56,63,42)},
	{::hx::fsObject /*  ::backend::SaveVariables */ ,(void *) &ClientPrefs_obj::defaultData,HX_("defaultData",8b,4f,22,14)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &ClientPrefs_obj::keyBinds,HX_("keyBinds",f7,b5,69,f7)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &ClientPrefs_obj::gamepadBinds,HX_("gamepadBinds",b5,b7,d0,6a)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &ClientPrefs_obj::defaultKeys,HX_("defaultKeys",55,db,c5,18)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &ClientPrefs_obj::defaultButtons,HX_("defaultButtons",80,ab,b5,f9)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void ClientPrefs_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::data,"data");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::defaultData,"defaultData");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::keyBinds,"keyBinds");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::gamepadBinds,"gamepadBinds");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::defaultKeys,"defaultKeys");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::defaultButtons,"defaultButtons");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ClientPrefs_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::data,"data");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::defaultData,"defaultData");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::keyBinds,"keyBinds");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::gamepadBinds,"gamepadBinds");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::defaultKeys,"defaultKeys");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::defaultButtons,"defaultButtons");
};

#endif

::hx::Class ClientPrefs_obj::__mClass;

static ::String ClientPrefs_obj_sStaticFields[] = {
	HX_("data",2a,56,63,42),
	HX_("defaultData",8b,4f,22,14),
	HX_("keyBinds",f7,b5,69,f7),
	HX_("gamepadBinds",b5,b7,d0,6a),
	HX_("defaultKeys",55,db,c5,18),
	HX_("defaultButtons",80,ab,b5,f9),
	HX_("resetKeys",63,eb,f2,8c),
	HX_("clearInvalidKeys",fe,57,a0,f8),
	HX_("loadDefaultKeys",cf,5e,fd,5c),
	HX_("saveSettings",40,c9,c5,9d),
	HX_("loadPrefs",2a,94,bf,e3),
	HX_("getGameplaySetting",54,6f,2e,77),
	HX_("reloadVolumeKeys",a7,8d,3f,3b),
	HX_("toggleVolumeKeys",a2,b1,25,f4),
	::String(null())
};

void ClientPrefs_obj::__register()
{
	ClientPrefs_obj _hx_dummy;
	ClientPrefs_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.ClientPrefs",6b,92,81,d4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ClientPrefs_obj::__GetStatic;
	__mClass->mSetStaticField = &ClientPrefs_obj::__SetStatic;
	__mClass->mMarkFunc = ClientPrefs_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ClientPrefs_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ClientPrefs_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ClientPrefs_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ClientPrefs_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ClientPrefs_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ClientPrefs_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_f803784cd60a57bc_83_boot)
HXDLIN(  83)		data =  ::backend::SaveVariables_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_f803784cd60a57bc_84_boot)
HXDLIN(  84)		defaultData =  ::backend::SaveVariables_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::StringMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_f803784cd60a57bc_87_boot)
HXDLIN(  87)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  87)			_g->set(HX_("note_up",c8,67,5c,4d),::Array_obj< int >::fromData( _hx_array_data_d481926b_20,2));
HXDLIN(  87)			_g->set(HX_("note_left",b4,fe,20,a5),::Array_obj< int >::fromData( _hx_array_data_d481926b_21,2));
HXDLIN(  87)			_g->set(HX_("note_down",0f,ef,de,9f),::Array_obj< int >::fromData( _hx_array_data_d481926b_22,2));
HXDLIN(  87)			_g->set(HX_("note_right",8f,ec,ca,4e),::Array_obj< int >::fromData( _hx_array_data_d481926b_23,2));
HXDLIN(  87)			_g->set(HX_("ui_up",a6,c2,91,a3),::Array_obj< int >::fromData( _hx_array_data_d481926b_24,2));
HXDLIN(  87)			_g->set(HX_("ui_left",12,4d,89,f7),::Array_obj< int >::fromData( _hx_array_data_d481926b_25,2));
HXDLIN(  87)			_g->set(HX_("ui_down",6d,3d,47,f2),::Array_obj< int >::fromData( _hx_array_data_d481926b_26,2));
HXDLIN(  87)			_g->set(HX_("ui_right",71,30,a7,17),::Array_obj< int >::fromData( _hx_array_data_d481926b_27,2));
HXDLIN(  87)			_g->set(HX_("accept",08,93,06,0b),::Array_obj< int >::fromData( _hx_array_data_d481926b_28,2));
HXDLIN(  87)			_g->set(HX_("back",27,da,10,41),::Array_obj< int >::fromData( _hx_array_data_d481926b_29,2));
HXDLIN(  87)			_g->set(HX_("pause",f6,d6,57,bd),::Array_obj< int >::fromData( _hx_array_data_d481926b_30,2));
HXDLIN(  87)			_g->set(HX_("reset",cf,49,c8,e6),::Array_obj< int >::fromData( _hx_array_data_d481926b_31,1));
HXDLIN(  87)			_g->set(HX_("volume_mute",9e,6a,db,fa),::Array_obj< int >::fromData( _hx_array_data_d481926b_32,1));
HXDLIN(  87)			_g->set(HX_("volume_up",e0,76,ad,60),::Array_obj< int >::fromData( _hx_array_data_d481926b_33,2));
HXDLIN(  87)			_g->set(HX_("volume_down",27,f4,e3,f4),::Array_obj< int >::fromData( _hx_array_data_d481926b_34,2));
HXDLIN(  87)			_g->set(HX_("debug_1",05,20,57,5b),::Array_obj< int >::fromData( _hx_array_data_d481926b_35,1));
HXDLIN(  87)			_g->set(HX_("debug_2",06,20,57,5b),::Array_obj< int >::fromData( _hx_array_data_d481926b_36,1));
HXDLIN(  87)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_f803784cd60a57bc_87_boot)
HXDLIN(  87)		keyBinds = ( ( ::haxe::ds::StringMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::StringMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_f803784cd60a57bc_111_boot)
HXDLIN( 111)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 111)			_g->set(HX_("note_up",c8,67,5c,4d),::Array_obj< int >::fromData( _hx_array_data_d481926b_39,2));
HXDLIN( 111)			_g->set(HX_("note_left",b4,fe,20,a5),::Array_obj< int >::fromData( _hx_array_data_d481926b_40,2));
HXDLIN( 111)			_g->set(HX_("note_down",0f,ef,de,9f),::Array_obj< int >::fromData( _hx_array_data_d481926b_41,2));
HXDLIN( 111)			_g->set(HX_("note_right",8f,ec,ca,4e),::Array_obj< int >::fromData( _hx_array_data_d481926b_42,2));
HXDLIN( 111)			_g->set(HX_("ui_up",a6,c2,91,a3),::Array_obj< int >::fromData( _hx_array_data_d481926b_43,2));
HXDLIN( 111)			_g->set(HX_("ui_left",12,4d,89,f7),::Array_obj< int >::fromData( _hx_array_data_d481926b_44,2));
HXDLIN( 111)			_g->set(HX_("ui_down",6d,3d,47,f2),::Array_obj< int >::fromData( _hx_array_data_d481926b_45,2));
HXDLIN( 111)			_g->set(HX_("ui_right",71,30,a7,17),::Array_obj< int >::fromData( _hx_array_data_d481926b_46,2));
HXDLIN( 111)			_g->set(HX_("accept",08,93,06,0b),::Array_obj< int >::fromData( _hx_array_data_d481926b_47,2));
HXDLIN( 111)			_g->set(HX_("back",27,da,10,41),::Array_obj< int >::fromData( _hx_array_data_d481926b_48,1));
HXDLIN( 111)			_g->set(HX_("pause",f6,d6,57,bd),::Array_obj< int >::fromData( _hx_array_data_d481926b_49,1));
HXDLIN( 111)			_g->set(HX_("reset",cf,49,c8,e6),::Array_obj< int >::fromData( _hx_array_data_d481926b_50,1));
HXDLIN( 111)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_f803784cd60a57bc_111_boot)
HXDLIN( 111)		gamepadBinds = ( ( ::haxe::ds::StringMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_f803784cd60a57bc_127_boot)
HXDLIN( 127)		defaultKeys = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_f803784cd60a57bc_128_boot)
HXDLIN( 128)		defaultButtons = null();
            	}
}

} // end namespace backend
