// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_backend_CustomFadeTransition
#include <backend/CustomFadeTransition.h>
#endif
#ifndef INCLUDED_backend_MusicBeatSubstate
#include <backend/MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxGradient
#include <flixel/util/FlxGradient.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a3eba9f4bcffd4fe_5_new,"backend.CustomFadeTransition","new",0xf568436e,"backend.CustomFadeTransition.new","backend/CustomFadeTransition.hx",5,0x606c63e1)
HX_LOCAL_STACK_FRAME(_hx_pos_a3eba9f4bcffd4fe_20_create,"backend.CustomFadeTransition","create",0xf845d0ae,"backend.CustomFadeTransition.create","backend/CustomFadeTransition.hx",20,0x606c63e1)
static const int _hx_array_data_1f92b47c_2[] = {
	(int)0,(int)-16777216,
};
static const int _hx_array_data_1f92b47c_3[] = {
	(int)-16777216,(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_a3eba9f4bcffd4fe_46_update,"backend.CustomFadeTransition","update",0x033befbb,"backend.CustomFadeTransition.update","backend/CustomFadeTransition.hx",46,0x606c63e1)
HX_LOCAL_STACK_FRAME(_hx_pos_a3eba9f4bcffd4fe_69_close,"backend.CustomFadeTransition","close",0x01c4ea46,"backend.CustomFadeTransition.close","backend/CustomFadeTransition.hx",69,0x606c63e1)
namespace backend{

void CustomFadeTransition_obj::__construct(Float duration,bool isTransIn){
            	HX_STACKFRAME(&_hx_pos_a3eba9f4bcffd4fe_5_new)
HXLINE(   7)		this->isTransIn = false;
HXLINE(  14)		this->duration = duration;
HXLINE(  15)		this->isTransIn = isTransIn;
HXLINE(  16)		super::__construct();
            	}

Dynamic CustomFadeTransition_obj::__CreateEmpty() { return new CustomFadeTransition_obj; }

void *CustomFadeTransition_obj::_hx_vtable = 0;

Dynamic CustomFadeTransition_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CustomFadeTransition_obj > _hx_result = new CustomFadeTransition_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CustomFadeTransition_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x5661ffbf) {
			if (inClassId<=(int)0x3c0818b8) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x3c0818b8;
			} else {
				return inClassId==(int)0x5661ffbf;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7f0b9ab2;
		}
	}
}

void CustomFadeTransition_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_a3eba9f4bcffd4fe_20_create)
HXLINE(  21)		this->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::flixel::FlxG_obj::cameras->list->__get((::flixel::FlxG_obj::cameras->list->length - 1)).StaticCast<  ::flixel::FlxCamera >()));
HXLINE(  22)		int width = ::flixel::FlxG_obj::width;
HXDLIN(  22)		int width1 = ::Std_obj::_hx_int((( (Float)(width) ) / ::Math_obj::max(this->get_camera()->zoom,((Float)0.001))));
HXLINE(  23)		int height = ::flixel::FlxG_obj::height;
HXDLIN(  23)		int height1 = ::Std_obj::_hx_int((( (Float)(height) ) / ::Math_obj::max(this->get_camera()->zoom,((Float)0.001))));
HXLINE(  24)		::Array< int > _hx_tmp;
HXDLIN(  24)		if (this->isTransIn) {
HXLINE(  24)			_hx_tmp = ::Array_obj< int >::fromData( _hx_array_data_1f92b47c_2,2);
            		}
            		else {
HXLINE(  24)			_hx_tmp = ::Array_obj< int >::fromData( _hx_array_data_1f92b47c_3,2);
            		}
HXDLIN(  24)		this->transGradient = ::flixel::util::FlxGradient_obj::createGradientFlxSprite(1,height1,_hx_tmp,null(),null(),null());
HXLINE(  25)		this->transGradient->scale->set_x(( (Float)(width1) ));
HXLINE(  26)		this->transGradient->updateHitbox();
HXLINE(  27)		{
HXLINE(  27)			 ::flixel::math::FlxBasePoint this1 = this->transGradient->scrollFactor;
HXDLIN(  27)			this1->set_x(( (Float)(0) ));
HXDLIN(  27)			this1->set_y(( (Float)(0) ));
            		}
HXLINE(  28)		{
HXLINE(  28)			 ::flixel::FlxSprite _this = this->transGradient;
HXDLIN(  28)			int axes = 1;
HXDLIN(  28)			bool _hx_tmp1;
HXDLIN(  28)			if ((axes != 1)) {
HXLINE(  28)				_hx_tmp1 = (axes == 17);
            			}
            			else {
HXLINE(  28)				_hx_tmp1 = true;
            			}
HXDLIN(  28)			if (_hx_tmp1) {
HXLINE(  28)				int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN(  28)				_this->set_x(((( (Float)(_hx_tmp2) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  28)			bool _hx_tmp3;
HXDLIN(  28)			if ((axes != 16)) {
HXLINE(  28)				_hx_tmp3 = (axes == 17);
            			}
            			else {
HXLINE(  28)				_hx_tmp3 = true;
            			}
HXDLIN(  28)			if (_hx_tmp3) {
HXLINE(  28)				int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN(  28)				_this->set_y(((( (Float)(_hx_tmp4) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  29)		this->add(this->transGradient);
HXLINE(  31)		this->transBlack =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-16777216,null(),null());
HXLINE(  32)		{
HXLINE(  32)			 ::flixel::math::FlxBasePoint this2 = this->transBlack->scale;
HXDLIN(  32)			this2->set_x(( (Float)(width1) ));
HXDLIN(  32)			this2->set_y(( (Float)((height1 + 400)) ));
            		}
HXLINE(  33)		this->transBlack->updateHitbox();
HXLINE(  34)		{
HXLINE(  34)			 ::flixel::math::FlxBasePoint this3 = this->transBlack->scrollFactor;
HXDLIN(  34)			this3->set_x(( (Float)(0) ));
HXDLIN(  34)			this3->set_y(( (Float)(0) ));
            		}
HXLINE(  35)		{
HXLINE(  35)			 ::flixel::FlxSprite _this1 = this->transBlack;
HXDLIN(  35)			int axes1 = 1;
HXDLIN(  35)			bool _hx_tmp5;
HXDLIN(  35)			if ((axes1 != 1)) {
HXLINE(  35)				_hx_tmp5 = (axes1 == 17);
            			}
            			else {
HXLINE(  35)				_hx_tmp5 = true;
            			}
HXDLIN(  35)			if (_hx_tmp5) {
HXLINE(  35)				int _hx_tmp6 = ::flixel::FlxG_obj::width;
HXDLIN(  35)				_this1->set_x(((( (Float)(_hx_tmp6) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  35)			bool _hx_tmp7;
HXDLIN(  35)			if ((axes1 != 16)) {
HXLINE(  35)				_hx_tmp7 = (axes1 == 17);
            			}
            			else {
HXLINE(  35)				_hx_tmp7 = true;
            			}
HXDLIN(  35)			if (_hx_tmp7) {
HXLINE(  35)				int _hx_tmp8 = ::flixel::FlxG_obj::height;
HXDLIN(  35)				_this1->set_y(((( (Float)(_hx_tmp8) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  36)		this->add(this->transBlack);
HXLINE(  38)		if (this->isTransIn) {
HXLINE(  39)			 ::flixel::FlxSprite _hx_tmp9 = this->transGradient;
HXDLIN(  39)			Float _hx_tmp10 = this->transBlack->y;
HXDLIN(  39)			_hx_tmp9->set_y((_hx_tmp10 - this->transBlack->get_height()));
            		}
            		else {
HXLINE(  41)			 ::flixel::FlxSprite _hx_tmp11 = this->transGradient;
HXDLIN(  41)			_hx_tmp11->set_y(-(this->transGradient->get_height()));
            		}
HXLINE(  43)		this->super::create();
            	}


void CustomFadeTransition_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_a3eba9f4bcffd4fe_46_update)
HXLINE(  47)		this->super::update(elapsed);
HXLINE(  49)		int height = ::flixel::FlxG_obj::height;
HXDLIN(  49)		Float height1 = (( (Float)(height) ) * ::Math_obj::max(this->get_camera()->zoom,((Float)0.001)));
HXLINE(  50)		Float targetPos = this->transGradient->get_height();
HXDLIN(  50)		Float targetPos1 = (targetPos + (( (Float)(50) ) * ::Math_obj::max(this->get_camera()->zoom,((Float)0.001))));
HXLINE(  51)		if ((this->duration > 0)) {
HXLINE(  52)			 ::flixel::FlxSprite fh = this->transGradient;
HXDLIN(  52)			fh->set_y((fh->y + (((height1 + targetPos1) * elapsed) / this->duration)));
            		}
            		else {
HXLINE(  54)			this->transGradient->set_y((targetPos1 * elapsed));
            		}
HXLINE(  56)		if (this->isTransIn) {
HXLINE(  57)			 ::flixel::FlxSprite _hx_tmp = this->transBlack;
HXDLIN(  57)			Float _hx_tmp1 = this->transGradient->y;
HXDLIN(  57)			_hx_tmp->set_y((_hx_tmp1 + this->transGradient->get_height()));
            		}
            		else {
HXLINE(  59)			 ::flixel::FlxSprite _hx_tmp2 = this->transBlack;
HXDLIN(  59)			Float _hx_tmp3 = this->transGradient->y;
HXDLIN(  59)			_hx_tmp2->set_y((_hx_tmp3 - this->transBlack->get_height()));
            		}
HXLINE(  61)		if ((this->transGradient->y >= targetPos1)) {
HXLINE(  63)			this->close();
            		}
            	}


void CustomFadeTransition_obj::close(){
            	HX_STACKFRAME(&_hx_pos_a3eba9f4bcffd4fe_69_close)
HXLINE(  70)		this->super::close();
HXLINE(  72)		if (::hx::IsNotNull( ::backend::CustomFadeTransition_obj::finishCallback )) {
HXLINE(  74)			::backend::CustomFadeTransition_obj::finishCallback();
HXLINE(  75)			::backend::CustomFadeTransition_obj::finishCallback = null();
            		}
            	}


 ::Dynamic CustomFadeTransition_obj::finishCallback;


::hx::ObjectPtr< CustomFadeTransition_obj > CustomFadeTransition_obj::__new(Float duration,bool isTransIn) {
	::hx::ObjectPtr< CustomFadeTransition_obj > __this = new CustomFadeTransition_obj();
	__this->__construct(duration,isTransIn);
	return __this;
}

::hx::ObjectPtr< CustomFadeTransition_obj > CustomFadeTransition_obj::__alloc(::hx::Ctx *_hx_ctx,Float duration,bool isTransIn) {
	CustomFadeTransition_obj *__this = (CustomFadeTransition_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CustomFadeTransition_obj), true, "backend.CustomFadeTransition"));
	*(void **)__this = CustomFadeTransition_obj::_hx_vtable;
	__this->__construct(duration,isTransIn);
	return __this;
}

CustomFadeTransition_obj::CustomFadeTransition_obj()
{
}

void CustomFadeTransition_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CustomFadeTransition);
	HX_MARK_MEMBER_NAME(isTransIn,"isTransIn");
	HX_MARK_MEMBER_NAME(transBlack,"transBlack");
	HX_MARK_MEMBER_NAME(transGradient,"transGradient");
	HX_MARK_MEMBER_NAME(duration,"duration");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CustomFadeTransition_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(isTransIn,"isTransIn");
	HX_VISIT_MEMBER_NAME(transBlack,"transBlack");
	HX_VISIT_MEMBER_NAME(transGradient,"transGradient");
	HX_VISIT_MEMBER_NAME(duration,"duration");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CustomFadeTransition_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"close") ) { return ::hx::Val( close_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { return ::hx::Val( duration ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isTransIn") ) { return ::hx::Val( isTransIn ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"transBlack") ) { return ::hx::Val( transBlack ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"transGradient") ) { return ::hx::Val( transGradient ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CustomFadeTransition_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"finishCallback") ) { outValue = ( finishCallback ); return true; }
	}
	return false;
}

::hx::Val CustomFadeTransition_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { duration=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isTransIn") ) { isTransIn=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"transBlack") ) { transBlack=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"transGradient") ) { transGradient=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CustomFadeTransition_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"finishCallback") ) { finishCallback=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void CustomFadeTransition_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("isTransIn",63,af,52,93));
	outFields->push(HX_("transBlack",77,1c,bf,de));
	outFields->push(HX_("transGradient",38,f6,20,1d));
	outFields->push(HX_("duration",54,0f,8e,14));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CustomFadeTransition_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(CustomFadeTransition_obj,isTransIn),HX_("isTransIn",63,af,52,93)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CustomFadeTransition_obj,transBlack),HX_("transBlack",77,1c,bf,de)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CustomFadeTransition_obj,transGradient),HX_("transGradient",38,f6,20,1d)},
	{::hx::fsFloat,(int)offsetof(CustomFadeTransition_obj,duration),HX_("duration",54,0f,8e,14)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo CustomFadeTransition_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &CustomFadeTransition_obj::finishCallback,HX_("finishCallback",38,a1,bc,b4)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String CustomFadeTransition_obj_sMemberFields[] = {
	HX_("isTransIn",63,af,52,93),
	HX_("transBlack",77,1c,bf,de),
	HX_("transGradient",38,f6,20,1d),
	HX_("duration",54,0f,8e,14),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("close",b8,17,63,48),
	::String(null()) };

static void CustomFadeTransition_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CustomFadeTransition_obj::finishCallback,"finishCallback");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CustomFadeTransition_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CustomFadeTransition_obj::finishCallback,"finishCallback");
};

#endif

::hx::Class CustomFadeTransition_obj::__mClass;

static ::String CustomFadeTransition_obj_sStaticFields[] = {
	HX_("finishCallback",38,a1,bc,b4),
	::String(null())
};

void CustomFadeTransition_obj::__register()
{
	CustomFadeTransition_obj _hx_dummy;
	CustomFadeTransition_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.CustomFadeTransition",7c,b4,92,1f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CustomFadeTransition_obj::__GetStatic;
	__mClass->mSetStaticField = &CustomFadeTransition_obj::__SetStatic;
	__mClass->mMarkFunc = CustomFadeTransition_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CustomFadeTransition_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CustomFadeTransition_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CustomFadeTransition_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CustomFadeTransition_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CustomFadeTransition_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CustomFadeTransition_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace backend
