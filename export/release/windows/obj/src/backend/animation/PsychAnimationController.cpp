// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_backend_animation_PsychAnimationController
#include <backend/animation/PsychAnimationController.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxPrerotatedAnimation
#include <flixel/animation/FlxPrerotatedAnimation.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_733e7133d4bf58a2_5_new,"backend.animation.PsychAnimationController","new",0xb901389b,"backend.animation.PsychAnimationController.new","backend/animation/PsychAnimationController.hx",5,0x31aa2733)
HX_LOCAL_STACK_FRAME(_hx_pos_733e7133d4bf58a2_9_update,"backend.animation.PsychAnimationController","update",0x9da8b4ae,"backend.animation.PsychAnimationController.update","backend/animation/PsychAnimationController.hx",9,0x31aa2733)
namespace backend{
namespace animation{

void PsychAnimationController_obj::__construct( ::flixel::FlxSprite sprite){
            	HX_STACKFRAME(&_hx_pos_733e7133d4bf58a2_5_new)
HXLINE(   6)		this->followGlobalSpeed = true;
HXLINE(   5)		super::__construct(sprite);
            	}

Dynamic PsychAnimationController_obj::__CreateEmpty() { return new PsychAnimationController_obj; }

void *PsychAnimationController_obj::_hx_vtable = 0;

Dynamic PsychAnimationController_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PsychAnimationController_obj > _hx_result = new PsychAnimationController_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PsychAnimationController_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x33fb2b2e) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x33fb2b2e;
	} else {
		return inClassId==(int)0x41c4ee95;
	}
}

void PsychAnimationController_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_733e7133d4bf58a2_9_update)
HXDLIN(   9)		if (::hx::IsNotNull( this->_curAnim )) {
HXLINE(  10)			Float speed = this->timeScale;
HXLINE(  11)			if (this->followGlobalSpeed) {
HXLINE(  11)				speed = (speed * ::flixel::FlxG_obj::animationTimeScale);
            			}
HXLINE(  12)			this->_curAnim->update((elapsed * speed));
            		}
            		else {
HXLINE(  14)			if (::hx::IsNotNull( this->_prerotated )) {
HXLINE(  15)				this->_prerotated->set_angle(this->_sprite->angle);
            			}
            		}
            	}



::hx::ObjectPtr< PsychAnimationController_obj > PsychAnimationController_obj::__new( ::flixel::FlxSprite sprite) {
	::hx::ObjectPtr< PsychAnimationController_obj > __this = new PsychAnimationController_obj();
	__this->__construct(sprite);
	return __this;
}

::hx::ObjectPtr< PsychAnimationController_obj > PsychAnimationController_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::FlxSprite sprite) {
	PsychAnimationController_obj *__this = (PsychAnimationController_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PsychAnimationController_obj), true, "backend.animation.PsychAnimationController"));
	*(void **)__this = PsychAnimationController_obj::_hx_vtable;
	__this->__construct(sprite);
	return __this;
}

PsychAnimationController_obj::PsychAnimationController_obj()
{
}

::hx::Val PsychAnimationController_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"followGlobalSpeed") ) { return ::hx::Val( followGlobalSpeed ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PsychAnimationController_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 17:
		if (HX_FIELD_EQ(inName,"followGlobalSpeed") ) { followGlobalSpeed=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PsychAnimationController_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("followGlobalSpeed",33,f9,9a,92));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PsychAnimationController_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(PsychAnimationController_obj,followGlobalSpeed),HX_("followGlobalSpeed",33,f9,9a,92)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PsychAnimationController_obj_sStaticStorageInfo = 0;
#endif

static ::String PsychAnimationController_obj_sMemberFields[] = {
	HX_("followGlobalSpeed",33,f9,9a,92),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class PsychAnimationController_obj::__mClass;

void PsychAnimationController_obj::__register()
{
	PsychAnimationController_obj _hx_dummy;
	PsychAnimationController_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.animation.PsychAnimationController",29,4f,04,85);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PsychAnimationController_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PsychAnimationController_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PsychAnimationController_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PsychAnimationController_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace backend
} // end namespace animation
