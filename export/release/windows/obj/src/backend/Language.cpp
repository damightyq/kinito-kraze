// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_Language
#include <backend/Language.h>
#endif
#ifndef INCLUDED_backend_Mods
#include <backend/Mods.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_llua_Lua_helper
#include <llua/Lua_helper.h>
#endif
#ifndef INCLUDED_objects_AlphaCharacter
#include <objects/AlphaCharacter.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_535418947a9b1146_11_reloadPhrases,"backend.Language","reloadPhrases",0x50de3ea5,"backend.Language.reloadPhrases","backend/Language.hx",11,0xabbfcb8b)
HX_LOCAL_STACK_FRAME(_hx_pos_535418947a9b1146_58_getPhrase,"backend.Language","getPhrase",0xd3dde9d3,"backend.Language.getPhrase","backend/Language.hx",58,0xabbfcb8b)
HX_LOCAL_STACK_FRAME(_hx_pos_535418947a9b1146_79_getFileTranslation,"backend.Language","getFileTranslation",0x8fdaeebb,"backend.Language.getFileTranslation","backend/Language.hx",79,0xabbfcb8b)
HX_LOCAL_STACK_FRAME(_hx_pos_535418947a9b1146_89_formatKey,"backend.Language","formatKey",0x7b871f4c,"backend.Language.formatKey","backend/Language.hx",89,0xabbfcb8b)
HX_LOCAL_STACK_FRAME(_hx_pos_535418947a9b1146_96_addLuaCallbacks,"backend.Language","addLuaCallbacks",0x4b1d519b,"backend.Language.addLuaCallbacks","backend/Language.hx",96,0xabbfcb8b)
HX_LOCAL_STACK_FRAME(_hx_pos_535418947a9b1146_98_addLuaCallbacks,"backend.Language","addLuaCallbacks",0x4b1d519b,"backend.Language.addLuaCallbacks","backend/Language.hx",98,0xabbfcb8b)
HX_LOCAL_STACK_FRAME(_hx_pos_535418947a9b1146_102_addLuaCallbacks,"backend.Language","addLuaCallbacks",0x4b1d519b,"backend.Language.addLuaCallbacks","backend/Language.hx",102,0xabbfcb8b)
HX_LOCAL_STACK_FRAME(_hx_pos_535418947a9b1146_5_boot,"backend.Language","boot",0x2d46f60e,"backend.Language.boot","backend/Language.hx",5,0xabbfcb8b)
HX_LOCAL_STACK_FRAME(_hx_pos_535418947a9b1146_7_boot,"backend.Language","boot",0x2d46f60e,"backend.Language.boot","backend/Language.hx",7,0xabbfcb8b)
namespace backend{

void Language_obj::__construct() { }

Dynamic Language_obj::__CreateEmpty() { return new Language_obj; }

void *Language_obj::_hx_vtable = 0;

Dynamic Language_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Language_obj > _hx_result = new Language_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Language_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7feff96c;
}

::String Language_obj::defaultLangName;

 ::haxe::ds::StringMap Language_obj::phrases;

void Language_obj::reloadPhrases(){
            	HX_STACKFRAME(&_hx_pos_535418947a9b1146_11_reloadPhrases)
HXLINE(  13)		::String langFile = ::backend::ClientPrefs_obj::data->language;
HXLINE(  14)		::String path = ((HX_("data/",c5,0e,88,d4) + langFile) + HX_(".lang",1c,b5,1b,c4));
HXDLIN(  14)		::String defaultDirectory = null();
HXDLIN(  14)		bool allowDuplicates = false;
HXDLIN(  14)		if (::hx::IsNull( defaultDirectory )) {
HXLINE(  69)			defaultDirectory = HX_("assets/shared/",1e,69,1e,47);
            		}
HXLINE(  70)		defaultDirectory = ::StringTools_obj::trim(defaultDirectory);
HXLINE(  14)		if (!(::StringTools_obj::endsWith(defaultDirectory,HX_("/",2f,00,00,00)))) {
HXLINE(  14)			defaultDirectory = (defaultDirectory + HX_("/",2f,00,00,00));
            		}
HXDLIN(  14)		if (!(::StringTools_obj::startsWith(defaultDirectory,HX_("assets/",4c,2a,dc,36)))) {
HXLINE(  72)			defaultDirectory = (HX_("assets/",4c,2a,dc,36) + defaultDirectory);
            		}
HXLINE(  14)		::Array< ::String > mergedList = ::Array_obj< ::String >::__new(0);
HXDLIN(  14)		::Array< ::String > foldersToCheck = ::Array_obj< ::String >::__new(0);
HXDLIN(  14)		if (::sys::FileSystem_obj::exists((defaultDirectory + path))) {
HXLINE(  14)			foldersToCheck->push((defaultDirectory + path));
            		}
HXDLIN(  14)		bool _hx_tmp;
HXDLIN(  14)		if (::hx::IsNotNull( ::backend::Paths_obj::currentLevel )) {
HXLINE(  14)			_hx_tmp = (::backend::Paths_obj::currentLevel != defaultDirectory);
            		}
            		else {
HXLINE(  14)			_hx_tmp = false;
            		}
HXDLIN(  14)		if (_hx_tmp) {
HXLINE(  14)			::String folder = ::backend::Paths_obj::currentLevel;
HXDLIN(  14)			if (::hx::IsNull( folder )) {
HXLINE( 104)				folder = HX_("shared",a5,5e,2b,1d);
            			}
HXLINE(  14)			::String pth = (((HX_("assets/",4c,2a,dc,36) + folder) + HX_("/",2f,00,00,00)) + path);
HXDLIN(  14)			bool _hx_tmp1;
HXDLIN(  14)			if (!(foldersToCheck->contains(pth))) {
HXLINE(  14)				_hx_tmp1 = ::sys::FileSystem_obj::exists(pth);
            			}
            			else {
HXLINE(  14)				_hx_tmp1 = false;
            			}
HXDLIN(  14)			if (_hx_tmp1) {
HXLINE(  14)				foldersToCheck->push(pth);
            			}
            		}
HXDLIN(  14)		{
HXLINE(  14)			{
HXLINE(  14)				int _g = 0;
HXDLIN(  14)				::Array< ::String > _g1 = ::backend::Mods_obj::globalMods;
HXDLIN(  14)				while((_g < _g1->length)){
HXLINE(  14)					::String mod = _g1->__get(_g);
HXDLIN(  14)					_g = (_g + 1);
HXDLIN(  14)					::String key = ((mod + HX_("/",2f,00,00,00)) + path);
HXDLIN(  14)					if (::hx::IsNull( key )) {
HXLINE( 115)						key = HX_("",00,00,00,00);
            					}
HXLINE(  14)					::String folder1 = (HX_("mods/",9e,2f,58,0c) + key);
HXDLIN(  14)					bool _hx_tmp2;
HXDLIN(  14)					if (::sys::FileSystem_obj::exists(folder1)) {
HXLINE(  14)						_hx_tmp2 = !(foldersToCheck->contains(folder1));
            					}
            					else {
HXLINE(  14)						_hx_tmp2 = false;
            					}
HXDLIN(  14)					if (_hx_tmp2) {
HXLINE(  14)						foldersToCheck->push(folder1);
            					}
            				}
            			}
HXDLIN(  14)			::String key1 = path;
HXDLIN(  14)			if (::hx::IsNull( key1 )) {
HXLINE( 120)				key1 = HX_("",00,00,00,00);
            			}
HXLINE(  14)			::String folder2 = (HX_("mods/",9e,2f,58,0c) + key1);
HXDLIN(  14)			bool _hx_tmp3;
HXDLIN(  14)			if (::sys::FileSystem_obj::exists(folder2)) {
HXLINE(  14)				_hx_tmp3 = !(foldersToCheck->contains(folder2));
            			}
            			else {
HXLINE(  14)				_hx_tmp3 = false;
            			}
HXDLIN(  14)			if (_hx_tmp3) {
HXLINE(  14)				::String key2 = path;
HXDLIN(  14)				if (::hx::IsNull( key2 )) {
HXLINE( 121)					key2 = HX_("",00,00,00,00);
            				}
HXLINE(  14)				foldersToCheck->push((HX_("mods/",9e,2f,58,0c) + key2));
            			}
HXDLIN(  14)			bool _hx_tmp4;
HXDLIN(  14)			if (::hx::IsNotNull( ::backend::Mods_obj::currentModDirectory )) {
HXLINE(  14)				_hx_tmp4 = (::backend::Mods_obj::currentModDirectory.length > 0);
            			}
            			else {
HXLINE(  14)				_hx_tmp4 = false;
            			}
HXDLIN(  14)			if (_hx_tmp4) {
HXLINE(  14)				::String key3 = ((::backend::Mods_obj::currentModDirectory + HX_("/",2f,00,00,00)) + path);
HXDLIN(  14)				if (::hx::IsNull( key3 )) {
HXLINE( 126)					key3 = HX_("",00,00,00,00);
            				}
HXLINE(  14)				::String folder3 = (HX_("mods/",9e,2f,58,0c) + key3);
HXDLIN(  14)				bool _hx_tmp5;
HXDLIN(  14)				if (::sys::FileSystem_obj::exists(folder3)) {
HXLINE(  14)					_hx_tmp5 = !(foldersToCheck->contains(folder3));
            				}
            				else {
HXLINE(  14)					_hx_tmp5 = false;
            				}
HXDLIN(  14)				if (_hx_tmp5) {
HXLINE(  14)					foldersToCheck->push(folder3);
            				}
            			}
            		}
HXDLIN(  14)		::Array< ::String > paths = foldersToCheck;
HXDLIN(  14)		::String defaultPath = (defaultDirectory + path);
HXDLIN(  14)		if (paths->contains(defaultPath)) {
HXLINE(  14)			paths->remove(defaultPath);
HXDLIN(  14)			paths->insert(0,defaultPath);
            		}
HXDLIN(  14)		{
HXLINE(  14)			int _g2 = 0;
HXDLIN(  14)			while((_g2 < paths->length)){
HXLINE(  14)				::String file = paths->__get(_g2);
HXDLIN(  14)				_g2 = (_g2 + 1);
HXDLIN(  14)				::String daList = null();
HXDLIN(  14)				if (::sys::FileSystem_obj::exists(file)) {
HXLINE(  48)					daList = ::sys::io::File_obj::getContent(file);
            				}
HXLINE(  14)				::Array< ::String > list;
HXDLIN(  14)				if (::hx::IsNotNull( daList )) {
HXLINE(  14)					::Array< ::String > daList1 = ::Array_obj< ::String >::__new(0);
HXLINE(  69)					daList1 = ::StringTools_obj::trim(daList).split(HX_("\n",0a,00,00,00));
HXLINE(  14)					{
HXLINE(  14)						int _g3 = 0;
HXDLIN(  14)						int _g4 = daList1->length;
HXDLIN(  14)						while((_g3 < _g4)){
HXLINE(  14)							_g3 = (_g3 + 1);
HXDLIN(  14)							int i = (_g3 - 1);
HXDLIN(  14)							daList1[i] = ::StringTools_obj::trim(daList1->__get(i));
            						}
            					}
HXDLIN(  14)					list = daList1;
            				}
            				else {
HXLINE(  14)					list = ::Array_obj< ::String >::__new(0);
            				}
HXDLIN(  14)				{
HXLINE(  14)					int _g5 = 0;
HXDLIN(  14)					while((_g5 < list->length)){
HXLINE(  14)						::String value = list->__get(_g5);
HXDLIN(  14)						_g5 = (_g5 + 1);
HXDLIN(  14)						bool _hx_tmp6;
HXDLIN(  14)						bool _hx_tmp7;
HXDLIN(  14)						if (!(allowDuplicates)) {
HXLINE(  14)							_hx_tmp7 = !(mergedList->contains(value));
            						}
            						else {
HXLINE(  14)							_hx_tmp7 = true;
            						}
HXDLIN(  14)						if (_hx_tmp7) {
HXLINE(  14)							_hx_tmp6 = (value.length > 0);
            						}
            						else {
HXLINE(  14)							_hx_tmp6 = false;
            						}
HXDLIN(  14)						if (_hx_tmp6) {
HXLINE(  14)							mergedList->push(value);
            						}
            					}
            				}
            			}
            		}
HXDLIN(  14)		::Array< ::String > loadedText = mergedList;
HXLINE(  17)		::backend::Language_obj::phrases->clear();
HXLINE(  18)		bool hasPhrases = false;
HXLINE(  19)		{
HXLINE(  19)			int _g_current = 0;
HXDLIN(  19)			::Array< ::String > _g_array = loadedText;
HXDLIN(  19)			while((_g_current < _g_array->length)){
HXLINE(  19)				::String _g_value = _g_array->__get(_g_current);
HXDLIN(  19)				_g_current = (_g_current + 1);
HXDLIN(  19)				int _g_key = (_g_current - 1);
HXDLIN(  19)				int num = _g_key;
HXDLIN(  19)				::String phrase = _g_value;
HXLINE(  20)				{
HXLINE(  21)					phrase = ::StringTools_obj::trim(phrase);
HXLINE(  22)					bool _hx_tmp8;
HXDLIN(  22)					if ((num < 1)) {
HXLINE(  22)						_hx_tmp8 = (phrase.indexOf(HX_(":",3a,00,00,00),null()) == -1);
            					}
            					else {
HXLINE(  22)						_hx_tmp8 = false;
            					}
HXDLIN(  22)					if (_hx_tmp8) {
HXLINE(  25)						{
HXLINE(  25)							::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(  25)							( ( ::haxe::ds::StringMap)(this1) )->set(HX_("language_name",d2,ce,f6,41),::StringTools_obj::trim(phrase));
            						}
HXLINE(  26)						continue;
            					}
HXLINE(  29)					bool _hx_tmp9;
HXDLIN(  29)					if ((phrase.length >= 4)) {
HXLINE(  29)						_hx_tmp9 = ::StringTools_obj::startsWith(phrase,HX_("//",20,29,00,00));
            					}
            					else {
HXLINE(  29)						_hx_tmp9 = true;
            					}
HXDLIN(  29)					if (_hx_tmp9) {
HXLINE(  29)						continue;
            					}
HXLINE(  31)					int n = phrase.indexOf(HX_(":",3a,00,00,00),null());
HXLINE(  32)					if ((n < 0)) {
HXLINE(  32)						continue;
            					}
HXLINE(  34)					::String key4 = ::StringTools_obj::trim(phrase.substr(0,n)).toLowerCase();
HXLINE(  36)					::String value1 = phrase.substr(n,null());
HXLINE(  37)					n = value1.indexOf(HX_("\"",22,00,00,00),null());
HXLINE(  38)					if ((n < 0)) {
HXLINE(  38)						continue;
            					}
HXLINE(  41)					{
HXLINE(  41)						::Dynamic this2 = ::backend::Language_obj::phrases;
HXDLIN(  41)						( ( ::haxe::ds::StringMap)(this2) )->set(key4,::StringTools_obj::replace(value1.substring((n + 1),value1.lastIndexOf(HX_("\"",22,00,00,00),null())),HX_("\\n",92,50,00,00),HX_("\n",0a,00,00,00)));
            					}
HXLINE(  42)					hasPhrases = true;
            				}
            			}
            		}
HXLINE(  45)		if (!(hasPhrases)) {
HXLINE(  45)			::backend::ClientPrefs_obj::data->language = ::backend::ClientPrefs_obj::defaultData->language;
            		}
HXLINE(  47)		::String key5 = HX_("images/alphabet",2a,9c,b4,f5);
HXDLIN(  47)		::Dynamic this3 = ::backend::Language_obj::phrases;
HXDLIN(  47)		::String str = ( ( ::haxe::ds::StringMap)(this3) )->get_string(::StringTools_obj::trim(key5).toLowerCase());
HXDLIN(  47)		if (::hx::IsNotNull( str )) {
HXLINE(  82)			key5 = str;
            		}
HXLINE(  47)		::String alphaPath = key5;
HXLINE(  48)		if (::StringTools_obj::startsWith(alphaPath,HX_("images/",77,50,74,c1))) {
HXLINE(  48)			alphaPath = alphaPath.substr(HX_("images/",77,50,74,c1).length,null());
            		}
HXLINE(  49)		int pngPos = alphaPath.indexOf(HX_(".png",3b,2d,bd,1e),null());
HXLINE(  50)		if ((pngPos > -1)) {
HXLINE(  50)			alphaPath = alphaPath.substring(0,pngPos);
            		}
HXLINE(  51)		::objects::AlphaCharacter_obj::loadAlphabetData(alphaPath);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Language_obj,reloadPhrases,(void))

::String Language_obj::getPhrase(::String key,::String defaultPhrase,::cpp::VirtualArray values){
            	HX_GC_STACKFRAME(&_hx_pos_535418947a9b1146_58_getPhrase)
HXLINE(  61)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(  61)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN(  61)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(key,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXLINE(  62)		if (::hx::IsNull( str )) {
HXLINE(  62)			str = defaultPhrase;
            		}
HXLINE(  67)		if (::hx::IsNull( str )) {
HXLINE(  68)			str = key;
            		}
HXLINE(  70)		if (::hx::IsNotNull( values )) {
HXLINE(  71)			int _g_current = 0;
HXDLIN(  71)			::cpp::VirtualArray _g_array = values;
HXDLIN(  71)			while((_g_current < _g_array->get_length())){
HXLINE(  71)				 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN(  71)				_g_current = (_g_current + 1);
HXDLIN(  71)				int _g_key = (_g_current - 1);
HXDLIN(  71)				int num = _g_key;
HXDLIN(  71)				 ::Dynamic value = _g_value;
HXLINE(  72)				str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            			}
            		}
HXLINE(  74)		return str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Language_obj,getPhrase,return )

::String Language_obj::getFileTranslation(::String key){
            	HX_STACKFRAME(&_hx_pos_535418947a9b1146_79_getFileTranslation)
HXLINE(  81)		::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(  81)		::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key).toLowerCase());
HXLINE(  82)		if (::hx::IsNotNull( str )) {
HXLINE(  82)			key = str;
            		}
HXLINE(  84)		return key;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Language_obj,getFileTranslation,return )

::String Language_obj::formatKey(::String key){
            	HX_GC_STACKFRAME(&_hx_pos_535418947a9b1146_89_formatKey)
HXLINE(  90)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXLINE(  91)		return ::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(key,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Language_obj,formatKey,return )

void Language_obj::addLuaCallbacks( cpp::Reference<lua_State> lua){
            	HX_STACKFRAME(&_hx_pos_535418947a9b1146_96_addLuaCallbacks)
HXLINE(  97)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            			::String _hx_run(::String key,::String defaultPhrase,::cpp::VirtualArray values){
            				HX_GC_STACKFRAME(&_hx_pos_535418947a9b1146_98_addLuaCallbacks)
HXLINE(  98)				::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN(  98)				 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\/;:<>#.,'\"%?!]",85,3f,6d,6d),HX_("g",67,00,00,00));
HXDLIN(  98)				::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(hideChars->replace(::StringTools_obj::replace(key,HX_(" ",20,00,00,00),HX_("_",5f,00,00,00)),HX_("",00,00,00,00)).toLowerCase()));
HXDLIN(  98)				if (::hx::IsNull( str )) {
HXLINE(  62)					str = defaultPhrase;
            				}
HXLINE(  98)				if (::hx::IsNull( str )) {
HXLINE(  68)					str = key;
            				}
HXLINE(  98)				if (::hx::IsNotNull( values )) {
HXLINE(  98)					int _g_current = 0;
HXDLIN(  98)					::cpp::VirtualArray _g_array = values;
HXDLIN(  98)					while((_g_current < _g_array->get_length())){
HXLINE(  98)						 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN(  98)						_g_current = (_g_current + 1);
HXDLIN(  98)						int _g_key = (_g_current - 1);
HXDLIN(  98)						int num = _g_key;
HXDLIN(  98)						 ::Dynamic value = _g_value;
HXLINE(  72)						str = ::StringTools_obj::replace(str,((HX_("{",7b,00,00,00) + (num + 1)) + HX_("}",7d,00,00,00)),( (::String)(value) ));
            					}
            				}
HXLINE(  98)				return str;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(  97)			::llua::Lua_helper_obj::callbacks->set(HX_("getTranslationPhrase",54,b6,6d,ad), ::Dynamic(new _hx_Closure_0()));
HXDLIN(  97)			linc::callbacks::add_callback_function(lua,HX_("getTranslationPhrase",54,b6,6d,ad));
            		}
HXLINE( 101)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			::String _hx_run(::String key){
            				HX_STACKFRAME(&_hx_pos_535418947a9b1146_102_addLuaCallbacks)
HXLINE( 102)				::String key1 = key;
HXDLIN( 102)				::Dynamic this1 = ::backend::Language_obj::phrases;
HXDLIN( 102)				::String str = ( ( ::haxe::ds::StringMap)(this1) )->get_string(::StringTools_obj::trim(key1).toLowerCase());
HXDLIN( 102)				if (::hx::IsNotNull( str )) {
HXLINE(  82)					key1 = str;
            				}
HXLINE( 102)				return key1;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 101)			::llua::Lua_helper_obj::callbacks->set(HX_("getFileTranslation",df,73,ae,b4), ::Dynamic(new _hx_Closure_1()));
HXDLIN( 101)			linc::callbacks::add_callback_function(lua,HX_("getFileTranslation",df,73,ae,b4));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Language_obj,addLuaCallbacks,(void))


Language_obj::Language_obj()
{
}

bool Language_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"phrases") ) { outValue = ( phrases ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getPhrase") ) { outValue = getPhrase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"formatKey") ) { outValue = formatKey_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"reloadPhrases") ) { outValue = reloadPhrases_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"defaultLangName") ) { outValue = ( defaultLangName ); return true; }
		if (HX_FIELD_EQ(inName,"addLuaCallbacks") ) { outValue = addLuaCallbacks_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getFileTranslation") ) { outValue = getFileTranslation_dyn(); return true; }
	}
	return false;
}

bool Language_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"phrases") ) { phrases=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"defaultLangName") ) { defaultLangName=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Language_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Language_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &Language_obj::defaultLangName,HX_("defaultLangName",3a,f1,57,89)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Language_obj::phrases,HX_("phrases",5a,ea,a4,aa)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Language_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Language_obj::defaultLangName,"defaultLangName");
	HX_MARK_MEMBER_NAME(Language_obj::phrases,"phrases");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Language_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Language_obj::defaultLangName,"defaultLangName");
	HX_VISIT_MEMBER_NAME(Language_obj::phrases,"phrases");
};

#endif

::hx::Class Language_obj::__mClass;

static ::String Language_obj_sStaticFields[] = {
	HX_("defaultLangName",3a,f1,57,89),
	HX_("phrases",5a,ea,a4,aa),
	HX_("reloadPhrases",01,cc,80,7b),
	HX_("getPhrase",2f,99,9f,71),
	HX_("getFileTranslation",df,73,ae,b4),
	HX_("formatKey",a8,ce,48,19),
	HX_("addLuaCallbacks",f7,ed,82,4d),
	::String(null())
};

void Language_obj::__register()
{
	Language_obj _hx_dummy;
	Language_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.Language",12,3c,96,cc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Language_obj::__GetStatic;
	__mClass->mSetStaticField = &Language_obj::__SetStatic;
	__mClass->mMarkFunc = Language_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Language_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Language_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Language_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Language_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Language_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Language_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_535418947a9b1146_5_boot)
HXDLIN(   5)		defaultLangName = HX_("English (US)",f3,b7,6f,b4);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_535418947a9b1146_7_boot)
HXDLIN(   7)		phrases =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace backend
