// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ClientPrefs
#include <backend/ClientPrefs.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_SaveVariables
#include <backend/SaveVariables.h>
#endif
#ifndef INCLUDED_backend_Song
#include <backend/Song.h>
#endif
#ifndef INCLUDED_backend_StageData
#include <backend/StageData.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_psychlua_ModchartSprite
#include <psychlua/ModchartSprite.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_tjson_TJSON
#include <tjson/TJSON.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_44b57106b867eb86_41_dummy,"backend.StageData","dummy",0xff2b10c8,"backend.StageData.dummy","backend/StageData.hx",41,0x4a5af1f1)
static const Float _hx_array_data_d406ab0e_1[] = {
	(Float)0,(Float)0,
};
static const Float _hx_array_data_d406ab0e_2[] = {
	(Float)0,(Float)0,
};
static const Float _hx_array_data_d406ab0e_3[] = {
	(Float)0,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_44b57106b867eb86_65_loadDirectory,"backend.StageData","loadDirectory",0x59ce6607,"backend.StageData.loadDirectory","backend/StageData.hx",65,0x4a5af1f1)
HX_LOCAL_STACK_FRAME(_hx_pos_44b57106b867eb86_78_getStageFile,"backend.StageData","getStageFile",0x9811ca44,"backend.StageData.getStageFile","backend/StageData.hx",78,0x4a5af1f1)
HX_LOCAL_STACK_FRAME(_hx_pos_44b57106b867eb86_94_vanillaSongStage,"backend.StageData","vanillaSongStage",0x612f070e,"backend.StageData.vanillaSongStage","backend/StageData.hx",94,0x4a5af1f1)
HX_LOCAL_STACK_FRAME(_hx_pos_44b57106b867eb86_119_addObjectsToState,"backend.StageData","addObjectsToState",0xd82114c3,"backend.StageData.addObjectsToState","backend/StageData.hx",119,0x4a5af1f1)
HX_LOCAL_STACK_FRAME(_hx_pos_44b57106b867eb86_218_validateVisibility,"backend.StageData","validateVisibility",0x65643368,"backend.StageData.validateVisibility","backend/StageData.hx",218,0x4a5af1f1)
HX_LOCAL_STACK_FRAME(_hx_pos_44b57106b867eb86_64_boot,"backend.StageData","boot",0x3376b592,"backend.StageData.boot","backend/StageData.hx",64,0x4a5af1f1)
HX_LOCAL_STACK_FRAME(_hx_pos_44b57106b867eb86_117_boot,"backend.StageData","boot",0x3376b592,"backend.StageData.boot","backend/StageData.hx",117,0x4a5af1f1)
static const ::String _hx_array_data_d406ab0e_15[] = {
	HX_("gf",1f,5a,00,00),HX_("gfGroup",a0,b8,ab,b0),HX_("dad",47,36,4c,00),HX_("dadGroup",78,cb,28,42),HX_("boyfriend",6a,29,b8,e6),HX_("boyfriendGroup",75,99,09,ef),
};
namespace backend{

void StageData_obj::__construct() { }

Dynamic StageData_obj::__CreateEmpty() { return new StageData_obj; }

void *StageData_obj::_hx_vtable = 0;

Dynamic StageData_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StageData_obj > _hx_result = new StageData_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool StageData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1a8fb054;
}

 ::Dynamic StageData_obj::dummy(){
            	HX_STACKFRAME(&_hx_pos_44b57106b867eb86_41_dummy)
HXDLIN(  41)		return  ::Dynamic(::hx::Anon_obj::Create(12)
            			->setFixed(0,HX_("camera_opponent",b7,ed,08,84),::Array_obj< Float >::fromData( _hx_array_data_d406ab0e_1,2))
            			->setFixed(1,HX_("girlfriend",ba,91,48,98),::cpp::VirtualArray_obj::__new(2)->init(0,400)->init(1,130))
            			->setFixed(2,HX_("_editorMeta",31,60,20,9c), ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("boyfriend",6a,29,b8,e6),HX_("bf",c4,55,00,00))
            				->setFixed(1,HX_("gf",1f,5a,00,00),HX_("gf",1f,5a,00,00))
            				->setFixed(2,HX_("dad",47,36,4c,00),HX_("dad",47,36,4c,00))))
            			->setFixed(3,HX_("camera_girlfriend",54,80,21,bf),::Array_obj< Float >::fromData( _hx_array_data_d406ab0e_2,2))
            			->setFixed(4,HX_("boyfriend",6a,29,b8,e6),::cpp::VirtualArray_obj::__new(2)->init(0,770)->init(1,100))
            			->setFixed(5,HX_("opponent",9d,b9,b8,f8),::cpp::VirtualArray_obj::__new(2)->init(0,100)->init(1,100))
            			->setFixed(6,HX_("hide_girlfriend",57,bd,d9,f9),false)
            			->setFixed(7,HX_("directory",6d,f2,44,10),HX_("",00,00,00,00))
            			->setFixed(8,HX_("camera_speed",2d,2f,ab,11),1)
            			->setFixed(9,HX_("defaultZoom",74,9c,b7,22),((Float)0.9))
            			->setFixed(10,HX_("stageUI",92,60,ca,2d),HX_("normal",27,72,69,30))
            			->setFixed(11,HX_("camera_boyfriend",10,8c,95,41),::Array_obj< Float >::fromData( _hx_array_data_d406ab0e_3,2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(StageData_obj,dummy,return )

::String StageData_obj::forceNextDirectory;

void StageData_obj::loadDirectory( ::Dynamic SONG){
            	HX_GC_STACKFRAME(&_hx_pos_44b57106b867eb86_65_loadDirectory)
HXLINE(  66)		::String stage = HX_("",00,00,00,00);
HXLINE(  67)		if (::hx::IsNotNull( SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic) )) {
HXLINE(  68)			stage = ( (::String)(SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(  69)			if (::hx::IsNotNull( ::backend::Song_obj::loadedSongName )) {
HXLINE(  70)				::String path = ::backend::Song_obj::loadedSongName;
HXDLIN(  70)				 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN(  70)				 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN(  70)				stage = ::backend::StageData_obj::vanillaSongStage(::StringTools_obj::trim(hideChars->replace(invalidChars->replace(path,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase());
            			}
            			else {
HXLINE(  72)				stage = HX_("stage",be,6a,0b,84);
            			}
            		}
HXLINE(  74)		 ::Dynamic stageFile = ::backend::StageData_obj::getStageFile(stage);
HXLINE(  75)		::String _hx_tmp;
HXDLIN(  75)		if (::hx::IsNotNull( stageFile )) {
HXLINE(  75)			_hx_tmp = ( (::String)(stageFile->__Field(HX_("directory",6d,f2,44,10),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(  75)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN(  75)		::backend::StageData_obj::forceNextDirectory = _hx_tmp;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StageData_obj,loadDirectory,(void))

 ::Dynamic StageData_obj::getStageFile(::String stage){
            	HX_STACKFRAME(&_hx_pos_44b57106b867eb86_78_getStageFile)
HXLINE(  80)		{
HXLINE(  81)			::String path = ::backend::Paths_obj::getPath(((HX_("stages/",9a,7a,ca,2d) + stage) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),null(),true);
HXLINE(  83)			if (::sys::FileSystem_obj::exists(path)) {
HXLINE(  84)				return ::tjson::TJSON_obj::parse(::sys::io::File_obj::getContent(path),null(),null());
            			}
            		}
HXLINE(  90)		return ::backend::StageData_obj::dummy();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StageData_obj,getStageFile,return )

::String StageData_obj::vanillaSongStage(::String songName){
            	HX_STACKFRAME(&_hx_pos_44b57106b867eb86_94_vanillaSongStage)
HXLINE(  95)		::String _hx_switch_0 = songName;
            		if (  (_hx_switch_0==HX_("cocoa",09,9d,55,4a)) ||  (_hx_switch_0==HX_("eggnog",61,04,ba,f4)) ){
HXLINE( 104)			return HX_("mall",d4,3a,56,48);
HXDLIN( 104)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("high",62,37,0e,45)) ||  (_hx_switch_0==HX_("milf",d6,4c,5c,48)) ||  (_hx_switch_0==HX_("satin-panties",fe,64,00,d1)) ){
HXLINE( 102)			return HX_("limo",1f,17,b3,47);
HXDLIN( 102)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("monster",1a,54,b0,b8)) ||  (_hx_switch_0==HX_("south",0d,92,cc,80)) ||  (_hx_switch_0==HX_("spookeez",0c,7a,2b,75)) ){
HXLINE(  98)			return HX_("spooky",eb,bd,9e,c1);
HXDLIN(  98)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("blammed",96,02,00,3c)) ||  (_hx_switch_0==HX_("philly",28,77,5e,ef)) ||  (_hx_switch_0==HX_("philly-nice",22,2e,26,44)) ||  (_hx_switch_0==HX_("pico",e5,e8,57,4a)) ){
HXLINE( 100)			return HX_("philly",28,77,5e,ef);
HXDLIN( 100)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("roses",04,6c,64,ed)) ||  (_hx_switch_0==HX_("senpai",3c,df,8d,6b)) ){
HXLINE( 108)			return HX_("school",74,b8,c8,40);
HXDLIN( 108)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("guns",f3,21,6e,44)) ||  (_hx_switch_0==HX_("stress",34,24,2d,11)) ||  (_hx_switch_0==HX_("ugh",d6,21,59,00)) ){
HXLINE( 112)			return HX_("tank",ea,ba,f6,4c);
HXDLIN( 112)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("thorns",9c,bf,c7,8c)) ){
HXLINE( 110)			return HX_("schoolEvil",28,a1,f5,f7);
HXDLIN( 110)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("winter-horrorland",9d,39,f4,1e)) ){
HXLINE( 106)			return HX_("mallEvil",88,d3,e3,a7);
HXDLIN( 106)			goto _hx_goto_6;
            		}
            		_hx_goto_6:;
HXLINE( 114)		return HX_("stage",be,6a,0b,84);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StageData_obj,vanillaSongStage,return )

::Array< ::String > StageData_obj::reservedNames;

 ::haxe::ds::StringMap StageData_obj::addObjectsToState(::cpp::VirtualArray objectList, ::flixel::FlxSprite gf, ::flixel::FlxSprite dad, ::flixel::FlxSprite boyfriend, ::Dynamic group, ::Dynamic __o_ignoreFilters){
            		 ::Dynamic ignoreFilters = __o_ignoreFilters;
            		if (::hx::IsNull(__o_ignoreFilters)) ignoreFilters = false;
            	HX_GC_STACKFRAME(&_hx_pos_44b57106b867eb86_119_addObjectsToState)
HXLINE( 120)		 ::haxe::ds::StringMap addedObjects =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 121)		{
HXLINE( 121)			int _g_current = 0;
HXDLIN( 121)			::cpp::VirtualArray _g_array = objectList;
HXDLIN( 121)			while((_g_current < _g_array->get_length())){
HXLINE( 121)				 ::Dynamic _g_value = _g_array->__get(_g_current);
HXDLIN( 121)				_g_current = (_g_current + 1);
HXDLIN( 121)				int _g_key = (_g_current - 1);
HXDLIN( 121)				int num = _g_key;
HXDLIN( 121)				 ::Dynamic data = _g_value;
HXLINE( 122)				{
HXLINE( 123)					if (addedObjects->exists(( (::String)(data) ))) {
HXLINE( 123)						continue;
            					}
HXLINE( 125)					 ::Dynamic _hx_switch_0 =  ::Dynamic(data->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic));
            					if (  (_hx_switch_0==HX_("animatedSprite",08,df,a8,cb)) ||  (_hx_switch_0==HX_("sprite",05,dc,95,c3)) ||  (_hx_switch_0==HX_("square",9d,00,f2,58)) ){
HXLINE( 150)						bool _hx_tmp;
HXDLIN( 150)						if (!(( (bool)(ignoreFilters) ))) {
HXLINE( 150)							_hx_tmp = !(::backend::StageData_obj::validateVisibility(( (int)(data->__Field(HX_("filters",bb,a1,46,09),::hx::paccDynamic)) )));
            						}
            						else {
HXLINE( 150)							_hx_tmp = false;
            						}
HXDLIN( 150)						if (_hx_tmp) {
HXLINE( 150)							continue;
            						}
HXLINE( 152)						 ::psychlua::ModchartSprite spr =  ::psychlua::ModchartSprite_obj::__alloc( HX_CTX ,data->__Field(HX_("x",78,00,00,00),::hx::paccDynamic),data->__Field(HX_("y",79,00,00,00),::hx::paccDynamic));
HXLINE( 153)						spr->ID = num;
HXLINE( 154)						if (::hx::IsNotEq( data->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic),HX_("square",9d,00,f2,58) )) {
HXLINE( 156)							if (::hx::IsEq( data->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic),HX_("sprite",05,dc,95,c3) )) {
HXLINE( 157)								spr->loadGraphic(::backend::Paths_obj::image(( (::String)(data->__Field(HX_("image",5b,1f,69,bd),::hx::paccDynamic)) ),null(),null()),null(),null(),null(),null(),null());
            							}
            							else {
HXLINE( 159)								spr->set_frames(::backend::Paths_obj::getAtlas(( (::String)(data->__Field(HX_("image",5b,1f,69,bd),::hx::paccDynamic)) ),null(),null()));
            							}
HXLINE( 161)							bool _hx_tmp1;
HXDLIN( 161)							if (::hx::IsEq( data->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic),HX_("animatedSprite",08,df,a8,cb) )) {
HXLINE( 161)								_hx_tmp1 = ::hx::IsNotNull( data->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic) );
            							}
            							else {
HXLINE( 161)								_hx_tmp1 = false;
            							}
HXDLIN( 161)							if (_hx_tmp1) {
HXLINE( 163)								::Array< ::Dynamic> anims = ( (::Array< ::Dynamic>)(data->__Field(HX_("animations",ef,34,1c,83),::hx::paccDynamic)) );
HXLINE( 164)								{
HXLINE( 164)									int _g_current1 = 0;
HXDLIN( 164)									::Array< ::Dynamic> _g_array1 = anims;
HXDLIN( 164)									while((_g_current1 < _g_array1->length)){
HXLINE( 164)										 ::Dynamic _g_value1 = _g_array1->__get(_g_current1);
HXDLIN( 164)										_g_current1 = (_g_current1 + 1);
HXDLIN( 164)										int _g_key1 = (_g_current1 - 1);
HXDLIN( 164)										int key = _g_key1;
HXDLIN( 164)										 ::Dynamic anim = _g_value1;
HXLINE( 165)										{
HXLINE( 166)											bool _hx_tmp2;
HXDLIN( 166)											if (::hx::IsNotNull( anim->__Field(HX_("indices",27,47,54,e3),::hx::paccDynamic) )) {
HXLINE( 166)												_hx_tmp2 = (( (::Array< int >)(anim->__Field(HX_("indices",27,47,54,e3),::hx::paccDynamic)) )->length < 1);
            											}
            											else {
HXLINE( 166)												_hx_tmp2 = true;
            											}
HXDLIN( 166)											if (_hx_tmp2) {
HXLINE( 167)												spr->animation->addByPrefix(( (::String)(anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),( (::String)(anim->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ),anim->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic),anim->__Field(HX_("loop",64,a6,b7,47),::hx::paccDynamic),null(),null());
            											}
            											else {
HXLINE( 169)												spr->animation->addByIndices(( (::String)(anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),( (::String)(anim->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ),( (::Array< int >)(anim->__Field(HX_("indices",27,47,54,e3),::hx::paccDynamic)) ),HX_("",00,00,00,00),anim->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic),anim->__Field(HX_("loop",64,a6,b7,47),::hx::paccDynamic),null(),null());
            											}
HXLINE( 171)											if (::hx::IsNotNull( anim->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic) )) {
HXLINE( 172)												spr->addOffset(( (::String)(anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),( (Float)( ::Dynamic(anim->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic))->__GetItem(0)) ),( (Float)( ::Dynamic(anim->__Field(HX_("offsets",80,09,65,d7),::hx::paccDynamic))->__GetItem(1)) ));
            											}
HXLINE( 174)											bool _hx_tmp3;
HXDLIN( 174)											if (::hx::IsNotNull( spr->animation->_curAnim )) {
HXLINE( 174)												_hx_tmp3 = ::hx::IsEq( data->__Field(HX_("firstAnimation",b4,d0,f1,66),::hx::paccDynamic),anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic) );
            											}
            											else {
HXLINE( 174)												_hx_tmp3 = true;
            											}
HXDLIN( 174)											if (_hx_tmp3) {
HXLINE( 175)												spr->playAnim(( (::String)(anim->__Field(HX_("anim",11,86,71,40),::hx::paccDynamic)) ),true,null(),null());
            											}
            										}
            									}
            								}
            							}
HXLINE( 178)							{
HXLINE( 178)								{
HXLINE( 178)									::String varName = HX_("antialiasing",f4,16,b3,48);
HXLINE( 180)									 ::Dynamic dat = ::Reflect_obj::getProperty(data,varName);
HXLINE( 181)									if (::hx::IsNotNull( dat )) {
HXLINE( 181)										::Reflect_obj::setProperty(spr,varName,dat);
            									}
            								}
HXLINE( 178)								{
HXLINE( 178)									::String varName1 = HX_("flipX",0b,45,92,02);
HXLINE( 180)									 ::Dynamic dat1 = ::Reflect_obj::getProperty(data,varName1);
HXLINE( 181)									if (::hx::IsNotNull( dat1 )) {
HXLINE( 181)										::Reflect_obj::setProperty(spr,varName1,dat1);
            									}
            								}
HXLINE( 178)								{
HXLINE( 178)									::String varName2 = HX_("flipY",0c,45,92,02);
HXLINE( 180)									 ::Dynamic dat2 = ::Reflect_obj::getProperty(data,varName2);
HXLINE( 181)									if (::hx::IsNotNull( dat2 )) {
HXLINE( 181)										::Reflect_obj::setProperty(spr,varName2,dat2);
            									}
            								}
            							}
HXLINE( 183)							if (!(::backend::ClientPrefs_obj::data->antialiasing)) {
HXLINE( 183)								spr->set_antialiasing(false);
            							}
            						}
            						else {
HXLINE( 187)							spr->makeGraphic(1,1,-1,null(),null());
HXLINE( 188)							spr->set_antialiasing(false);
            						}
HXLINE( 191)						bool _hx_tmp4;
HXDLIN( 191)						if (::hx::IsNotNull( data->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic) )) {
HXLINE( 191)							if (::hx::IsEq(  ::Dynamic(data->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic))->__GetItem(0),((Float)1.0) )) {
HXLINE( 191)								_hx_tmp4 = ::hx::IsNotEq(  ::Dynamic(data->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic))->__GetItem(1),((Float)1.0) );
            							}
            							else {
HXLINE( 191)								_hx_tmp4 = true;
            							}
            						}
            						else {
HXLINE( 191)							_hx_tmp4 = false;
            						}
HXDLIN( 191)						if (_hx_tmp4) {
HXLINE( 193)							{
HXLINE( 193)								 ::flixel::math::FlxBasePoint this1 = spr->scale;
HXDLIN( 193)								Float y = ( (Float)( ::Dynamic(data->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic))->__GetItem(1)) );
HXDLIN( 193)								this1->set_x(( (Float)( ::Dynamic(data->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic))->__GetItem(0)) ));
HXDLIN( 193)								this1->set_y(y);
            							}
HXLINE( 194)							spr->updateHitbox();
            						}
HXLINE( 196)						{
HXLINE( 196)							 ::flixel::math::FlxBasePoint this2 = spr->scrollFactor;
HXDLIN( 196)							Float y1 = ( (Float)( ::Dynamic(data->__Field(HX_("scroll",0d,d8,64,47),::hx::paccDynamic))->__GetItem(1)) );
HXDLIN( 196)							this2->set_x(( (Float)( ::Dynamic(data->__Field(HX_("scroll",0d,d8,64,47),::hx::paccDynamic))->__GetItem(0)) ));
HXDLIN( 196)							this2->set_y(y1);
            						}
HXLINE( 197)						::String color = ( (::String)(data->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic)) );
HXDLIN( 197)						 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[\t\n\r]",ac,57,71,6b),HX_("",00,00,00,00));
HXDLIN( 197)						::String color1 = ::StringTools_obj::trim(hideChars->split(color)->join(HX_("",00,00,00,00)));
HXDLIN( 197)						if (::StringTools_obj::startsWith(color1,HX_("0x",48,2a,00,00))) {
HXLINE(  59)							color1 = color1.substring((color1.length - 6),null());
            						}
HXLINE( 197)						 ::Dynamic colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(color1);
HXDLIN( 197)						if (::hx::IsNull( colorNum )) {
HXLINE(  62)							colorNum = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString((HX_("#",23,00,00,00) + color1));
            						}
HXLINE( 197)						int _hx_tmp5;
HXDLIN( 197)						if (::hx::IsNotNull( colorNum )) {
HXLINE( 197)							_hx_tmp5 = ( (int)(colorNum) );
            						}
            						else {
HXLINE( 197)							_hx_tmp5 = -1;
            						}
HXDLIN( 197)						spr->set_color(_hx_tmp5);
HXLINE( 199)						{
HXLINE( 199)							{
HXLINE( 199)								::String varName3 = HX_("alpha",5e,a7,96,21);
HXLINE( 201)								 ::Dynamic dat3 = ::Reflect_obj::getProperty(data,varName3);
HXLINE( 202)								if (::hx::IsNotNull( dat3 )) {
HXLINE( 202)									::Reflect_obj::setProperty(spr,varName3,dat3);
            								}
            							}
HXLINE( 199)							{
HXLINE( 199)								::String varName4 = HX_("angle",d3,43,e2,22);
HXLINE( 201)								 ::Dynamic dat4 = ::Reflect_obj::getProperty(data,varName4);
HXLINE( 202)								if (::hx::IsNotNull( dat4 )) {
HXLINE( 202)									::Reflect_obj::setProperty(spr,varName4,dat4);
            								}
            							}
            						}
HXLINE( 205)						if (::hx::IsNotNull( group )) {
HXLINE( 205)							group->__Field(HX_("add",21,f2,49,00),::hx::paccDynamic)(spr);
            						}
HXLINE( 206)						addedObjects->set(( (::String)(data->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ),( ( ::flixel::FlxSprite)(spr) ));
HXLINE( 149)						goto _hx_goto_9;
            					}
            					if (  (_hx_switch_0==HX_("boyfriend",6a,29,b8,e6)) ||  (_hx_switch_0==HX_("boyfriendGroup",75,99,09,ef)) ){
HXLINE( 142)						if (::hx::IsNotNull( boyfriend )) {
HXLINE( 144)							boyfriend->ID = num;
HXLINE( 145)							if (::hx::IsNotNull( group )) {
HXLINE( 145)								group->__Field(HX_("add",21,f2,49,00),::hx::paccDynamic)(boyfriend);
            							}
HXLINE( 146)							addedObjects->set(HX_("boyfriend",6a,29,b8,e6),boyfriend);
            						}
HXLINE( 142)						goto _hx_goto_9;
            					}
            					if (  (_hx_switch_0==HX_("dad",47,36,4c,00)) ||  (_hx_switch_0==HX_("dadGroup",78,cb,28,42)) ){
HXLINE( 135)						if (::hx::IsNotNull( dad )) {
HXLINE( 137)							dad->ID = num;
HXLINE( 138)							if (::hx::IsNotNull( group )) {
HXLINE( 138)								group->__Field(HX_("add",21,f2,49,00),::hx::paccDynamic)(dad);
            							}
HXLINE( 139)							addedObjects->set(HX_("dad",47,36,4c,00),dad);
            						}
HXLINE( 135)						goto _hx_goto_9;
            					}
            					if (  (_hx_switch_0==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_0==HX_("gfGroup",a0,b8,ab,b0)) ){
HXLINE( 128)						if (::hx::IsNotNull( gf )) {
HXLINE( 130)							gf->ID = num;
HXLINE( 131)							if (::hx::IsNotNull( group )) {
HXLINE( 131)								group->__Field(HX_("add",21,f2,49,00),::hx::paccDynamic)(gf);
            							}
HXLINE( 132)							addedObjects->set(HX_("gf",1f,5a,00,00),gf);
            						}
HXLINE( 128)						goto _hx_goto_9;
            					}
            					/* default */{
HXLINE( 209)						::String err = (HX_("[Stage .JSON file] Unknown sprite type detected: ",af,98,79,68) + ::Std_obj::string( ::Dynamic(data->__Field(HX_("type",ba,f2,08,4d),::hx::paccDynamic))));
HXLINE( 210)						::haxe::Log_obj::trace(err,::hx::SourceInfo(HX_("source/backend/StageData.hx",e5,b2,1c,75),210,HX_("backend.StageData",0e,ab,06,d4),HX_("addObjectsToState",23,a2,67,39)));
HXLINE( 211)						::flixel::FlxG_obj::log->advanced(err,::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            					}
            					_hx_goto_9:;
            				}
            			}
            		}
HXLINE( 214)		return addedObjects;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(StageData_obj,addObjectsToState,return )

bool StageData_obj::validateVisibility(int filters){
            	HX_STACKFRAME(&_hx_pos_44b57106b867eb86_218_validateVisibility)
HXLINE( 219)		if (((filters & 4) == 4)) {
HXLINE( 220)			if (!(::states::PlayState_obj::isStoryMode)) {
HXLINE( 220)				return false;
            			}
            			else {
HXLINE( 221)				if (((filters & 8) == 8)) {
HXLINE( 222)					if (::states::PlayState_obj::isStoryMode) {
HXLINE( 222)						return false;
            					}
            				}
            			}
            		}
HXLINE( 224)		bool _hx_tmp;
HXDLIN( 224)		if (::backend::ClientPrefs_obj::data->lowQuality) {
HXLINE( 224)			_hx_tmp = ((filters & 1) == 1);
            		}
            		else {
HXLINE( 224)			_hx_tmp = false;
            		}
HXDLIN( 224)		if (!(_hx_tmp)) {
HXLINE( 225)			if (!(::backend::ClientPrefs_obj::data->lowQuality)) {
HXLINE( 225)				return ((filters & 2) == 2);
            			}
            			else {
HXLINE( 225)				return false;
            			}
            		}
            		else {
HXLINE( 224)			return true;
            		}
HXDLIN( 224)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StageData_obj,validateVisibility,return )


StageData_obj::StageData_obj()
{
}

bool StageData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"dummy") ) { outValue = dummy_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getStageFile") ) { outValue = getStageFile_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"loadDirectory") ) { outValue = loadDirectory_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"reservedNames") ) { outValue = ( reservedNames ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"vanillaSongStage") ) { outValue = vanillaSongStage_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"addObjectsToState") ) { outValue = addObjectsToState_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"forceNextDirectory") ) { outValue = ( forceNextDirectory ); return true; }
		if (HX_FIELD_EQ(inName,"validateVisibility") ) { outValue = validateVisibility_dyn(); return true; }
	}
	return false;
}

bool StageData_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"reservedNames") ) { reservedNames=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"forceNextDirectory") ) { forceNextDirectory=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *StageData_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo StageData_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &StageData_obj::forceNextDirectory,HX_("forceNextDirectory",0f,1e,f1,a7)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &StageData_obj::reservedNames,HX_("reservedNames",00,e8,a4,9b)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void StageData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StageData_obj::forceNextDirectory,"forceNextDirectory");
	HX_MARK_MEMBER_NAME(StageData_obj::reservedNames,"reservedNames");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StageData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StageData_obj::forceNextDirectory,"forceNextDirectory");
	HX_VISIT_MEMBER_NAME(StageData_obj::reservedNames,"reservedNames");
};

#endif

::hx::Class StageData_obj::__mClass;

static ::String StageData_obj_sStaticFields[] = {
	HX_("dummy",28,0e,bb,e1),
	HX_("forceNextDirectory",0f,1e,f1,a7),
	HX_("loadDirectory",67,c3,aa,92),
	HX_("getStageFile",e4,38,16,03),
	HX_("vanillaSongStage",ae,45,1f,d2),
	HX_("reservedNames",00,e8,a4,9b),
	HX_("addObjectsToState",23,a2,67,39),
	HX_("validateVisibility",08,5a,d9,21),
	::String(null())
};

void StageData_obj::__register()
{
	StageData_obj _hx_dummy;
	StageData_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.StageData",0e,ab,06,d4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &StageData_obj::__GetStatic;
	__mClass->mSetStaticField = &StageData_obj::__SetStatic;
	__mClass->mMarkFunc = StageData_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(StageData_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< StageData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StageData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StageData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StageData_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void StageData_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_44b57106b867eb86_64_boot)
HXDLIN(  64)		forceNextDirectory = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_44b57106b867eb86_117_boot)
HXDLIN( 117)		reservedNames = ::Array_obj< ::String >::fromData( _hx_array_data_d406ab0e_15,6);
            	}
}

} // end namespace backend
