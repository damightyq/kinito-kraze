// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_Song
#include <backend/Song.h>
#endif
#ifndef INCLUDED_backend_StageData
#include <backend/StageData.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_lime_utils_Assets
#include <lime/utils/Assets.h>
#endif
#ifndef INCLUDED_objects_Note
#include <objects/Note.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_db09ff2b98ac40f1_46_new,"backend.Song","new",0x743f8f01,"backend.Song.new","backend/Song.hx",46,0x16217dae)
HX_LOCAL_STACK_FRAME(_hx_pos_db09ff2b98ac40f1_68_convert,"backend.Song","convert",0x35f02114,"backend.Song.convert","backend/Song.hx",68,0x16217dae)
HX_LOCAL_STACK_FRAME(_hx_pos_db09ff2b98ac40f1_125_loadFromJson,"backend.Song","loadFromJson",0xc81ee237,"backend.Song.loadFromJson","backend/Song.hx",125,0x16217dae)
HX_LOCAL_STACK_FRAME(_hx_pos_db09ff2b98ac40f1_140_getChart,"backend.Song","getChart",0x4bc34627,"backend.Song.getChart","backend/Song.hx",140,0x16217dae)
HX_LOCAL_STACK_FRAME(_hx_pos_db09ff2b98ac40f1_159_parseJSON,"backend.Song","parseJSON",0x99441d3c,"backend.Song.parseJSON","backend/Song.hx",159,0x16217dae)
namespace backend{

void Song_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_db09ff2b98ac40f1_46_new)
HXLINE(  65)		this->format = HX_("psych_v1",bf,0a,17,5b);
HXLINE(  64)		this->gfVersion = HX_("gf",1f,5a,00,00);
HXLINE(  63)		this->player2 = HX_("dad",47,36,4c,00);
HXLINE(  62)		this->player1 = HX_("bf",c4,55,00,00);
HXLINE(  60)		this->speed = ((Float)1);
HXLINE(  59)		this->disableNoteRGB = false;
HXLINE(  52)		this->needsVoices = true;
            	}

Dynamic Song_obj::__CreateEmpty() { return new Song_obj; }

void *Song_obj::_hx_vtable = 0;

Dynamic Song_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Song_obj > _hx_result = new Song_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Song_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x55e30b25;
}

void Song_obj::convert( ::Dynamic songJson){
            	HX_STACKFRAME(&_hx_pos_db09ff2b98ac40f1_68_convert)
HXLINE(  69)		if (::hx::IsNull( songJson->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic) )) {
HXLINE(  71)			songJson->__SetField(HX_("gfVersion",b9,c6,7d,f3),songJson->__Field(HX_("player3",b2,09,15,8a),::hx::paccDynamic),::hx::paccDynamic);
HXLINE(  72)			if (::Reflect_obj::hasField(songJson,HX_("player3",b2,09,15,8a))) {
HXLINE(  72)				::Reflect_obj::deleteField(songJson,HX_("player3",b2,09,15,8a));
            			}
            		}
HXLINE(  75)		if (::hx::IsNull( songJson->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic) )) {
HXLINE(  77)			songJson->__SetField(HX_("events",19,4f,6a,96),::cpp::VirtualArray_obj::__new(0),::hx::paccDynamic);
HXLINE(  78)			{
HXLINE(  78)				int _g = 0;
HXDLIN(  78)				int _g1 = ( (int)( ::Dynamic(songJson->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN(  78)				while((_g < _g1)){
HXLINE(  78)					_g = (_g + 1);
HXDLIN(  78)					int secNum = (_g - 1);
HXLINE(  80)					 ::Dynamic sec =  ::Dynamic(songJson->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(secNum);
HXLINE(  82)					int i = 0;
HXLINE(  83)					::cpp::VirtualArray notes = ( (::cpp::VirtualArray)(sec->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXLINE(  84)					int len = notes->get_length();
HXLINE(  85)					while((i < len)){
HXLINE(  87)						::cpp::VirtualArray note = ( (::cpp::VirtualArray)(notes->__get(i)) );
HXLINE(  88)						if (::hx::IsLess( note->__get(1),0 )) {
HXLINE(  90)							 ::Dynamic(songJson->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic))->__Field(HX_("push",da,11,61,4a),::hx::paccDynamic)(::Array_obj< ::Dynamic>::__new(2)->init(0,note->__get(0))->init(1,::Array_obj< ::Dynamic>::__new(1)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,note->__get(2))->init(1,note->__get(3))->init(2,note->__get(4)))));
HXLINE(  91)							notes->remove(note);
HXLINE(  92)							len = notes->get_length();
            						}
            						else {
HXLINE(  94)							i = (i + 1);
            						}
            					}
            				}
            			}
            		}
HXLINE(  99)		::Array< ::Dynamic> sectionsData = ( (::Array< ::Dynamic>)(songJson->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXLINE( 100)		if (::hx::IsNull( sectionsData )) {
HXLINE( 100)			return;
            		}
HXLINE( 102)		{
HXLINE( 102)			int _g2 = 0;
HXDLIN( 102)			while((_g2 < sectionsData->length)){
HXLINE( 102)				 ::Dynamic section = sectionsData->__get(_g2);
HXDLIN( 102)				_g2 = (_g2 + 1);
HXLINE( 104)				 ::Dynamic beats = section->__Field(HX_("sectionBeats",18,52,2e,0f),::hx::paccDynamic);
HXLINE( 105)				bool _hx_tmp;
HXDLIN( 105)				if (::hx::IsNotNull( beats )) {
HXLINE( 105)					_hx_tmp = ::Math_obj::isNaN(( (Float)(beats) ));
            				}
            				else {
HXLINE( 105)					_hx_tmp = true;
            				}
HXDLIN( 105)				if (_hx_tmp) {
HXLINE( 107)					section->__SetField(HX_("sectionBeats",18,52,2e,0f),4,::hx::paccDynamic);
HXLINE( 108)					if (::Reflect_obj::hasField(section,HX_("lengthInSteps",3c,ed,41,db))) {
HXLINE( 108)						::Reflect_obj::deleteField(section,HX_("lengthInSteps",3c,ed,41,db));
            					}
            				}
HXLINE( 111)				{
HXLINE( 111)					int _g3 = 0;
HXDLIN( 111)					::cpp::VirtualArray _g4 = ( (::cpp::VirtualArray)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN( 111)					while((_g3 < _g4->get_length())){
HXLINE( 111)						 ::Dynamic note1 = _g4->__get(_g3);
HXDLIN( 111)						_g3 = (_g3 + 1);
HXLINE( 113)						bool gottaHitNote;
HXDLIN( 113)						if (::hx::IsLess( note1->__GetItem(1),4 )) {
HXLINE( 113)							gottaHitNote = ( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
            						}
            						else {
HXLINE( 113)							gottaHitNote = !(( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            						}
HXLINE( 114)						int _hx_tmp1;
HXDLIN( 114)						if (gottaHitNote) {
HXLINE( 114)							_hx_tmp1 = 0;
            						}
            						else {
HXLINE( 114)							_hx_tmp1 = 4;
            						}
HXDLIN( 114)						note1->__SetItem(1,(::hx::Mod(note1->__GetItem(1),4) + _hx_tmp1));
HXLINE( 116)						if (!(::Std_obj::isOfType(note1->__GetItem(3),::hx::ClassOf< ::String >()))) {
HXLINE( 117)							note1->__SetItem(3,::objects::Note_obj::defaultNoteTypes->__get(( (int)(note1->__GetItem(3)) )));
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Song_obj,convert,(void))

::String Song_obj::chartPath;

::String Song_obj::loadedSongName;

 ::Dynamic Song_obj::loadFromJson(::String jsonInput,::String folder){
            	HX_STACKFRAME(&_hx_pos_db09ff2b98ac40f1_125_loadFromJson)
HXLINE( 126)		if (::hx::IsNull( folder )) {
HXLINE( 126)			folder = jsonInput;
            		}
HXLINE( 127)		::states::PlayState_obj::SONG = ::backend::Song_obj::getChart(jsonInput,folder);
HXLINE( 128)		::backend::Song_obj::loadedSongName = folder;
HXLINE( 129)		::backend::Song_obj::chartPath = ::backend::Song_obj::_lastPath;
HXLINE( 132)		::backend::Song_obj::chartPath = ::StringTools_obj::replace(::backend::Song_obj::chartPath,HX_("/",2f,00,00,00),HX_("\\",5c,00,00,00));
HXLINE( 134)		::backend::StageData_obj::loadDirectory(::states::PlayState_obj::SONG);
HXLINE( 135)		return ::states::PlayState_obj::SONG;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Song_obj,loadFromJson,return )

::String Song_obj::_lastPath;

 ::Dynamic Song_obj::getChart(::String jsonInput,::String folder){
            	HX_GC_STACKFRAME(&_hx_pos_db09ff2b98ac40f1_140_getChart)
HXLINE( 141)		if (::hx::IsNull( folder )) {
HXLINE( 141)			folder = jsonInput;
            		}
HXLINE( 142)		::String rawData = null();
HXLINE( 144)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 144)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 144)		::String formattedFolder = ::StringTools_obj::trim(hideChars->replace(invalidChars->replace(folder,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
HXLINE( 145)		 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&;:<>#\\s]",07,34,b4,25),HX_("g",67,00,00,00));
HXDLIN( 145)		 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("g",67,00,00,00));
HXDLIN( 145)		::String formattedSong = ::StringTools_obj::trim(hideChars1->replace(invalidChars1->replace(jsonInput,HX_("-",2d,00,00,00)),HX_("",00,00,00,00))).toLowerCase();
HXLINE( 146)		::String folder1 = null();
HXDLIN( 146)		::backend::Song_obj::_lastPath = ::backend::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (((HX_("",00,00,00,00) + formattedFolder) + HX_("/",2f,00,00,00)) + formattedSong)) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),folder1,true);
HXLINE( 149)		if (::sys::FileSystem_obj::exists(::backend::Song_obj::_lastPath)) {
HXLINE( 150)			rawData = ::sys::io::File_obj::getContent(::backend::Song_obj::_lastPath);
            		}
            		else {
HXLINE( 153)			rawData = ::lime::utils::Assets_obj::getText(::backend::Song_obj::_lastPath);
            		}
HXLINE( 155)		if (::hx::IsNotNull( rawData )) {
HXLINE( 155)			return ::backend::Song_obj::parseJSON(rawData,jsonInput,null());
            		}
            		else {
HXLINE( 155)			return null();
            		}
HXDLIN( 155)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Song_obj,getChart,return )

 ::Dynamic Song_obj::parseJSON(::String rawData,::String nameForError,::String __o_convertTo){
            		::String convertTo = __o_convertTo;
            		if (::hx::IsNull(__o_convertTo)) convertTo = HX_("psych_v1",bf,0a,17,5b);
            	HX_GC_STACKFRAME(&_hx_pos_db09ff2b98ac40f1_159_parseJSON)
HXLINE( 160)		 ::Dynamic songJson =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,rawData)->doParse();
HXLINE( 161)		if (::Reflect_obj::hasField(songJson,HX_("song",d5,23,58,4c))) {
HXLINE( 163)			 ::Dynamic subSong = ::Reflect_obj::field(songJson,HX_("song",d5,23,58,4c));
HXLINE( 164)			bool _hx_tmp;
HXDLIN( 164)			if (::hx::IsNotNull( subSong )) {
HXLINE( 164)				_hx_tmp = ::hx::IsPointerEq( ::Type_obj::_hx_typeof(subSong),::ValueType_obj::TObject_dyn() );
            			}
            			else {
HXLINE( 164)				_hx_tmp = false;
            			}
HXDLIN( 164)			if (_hx_tmp) {
HXLINE( 165)				songJson = subSong;
            			}
            		}
HXLINE( 168)		bool _hx_tmp1;
HXDLIN( 168)		if (::hx::IsNotNull( convertTo )) {
HXLINE( 168)			_hx_tmp1 = (convertTo.length > 0);
            		}
            		else {
HXLINE( 168)			_hx_tmp1 = false;
            		}
HXDLIN( 168)		if (_hx_tmp1) {
HXLINE( 170)			::String fmt = ( (::String)(songJson->__Field(HX_("format",37,8f,8e,fd),::hx::paccDynamic)) );
HXLINE( 171)			if (::hx::IsNull( fmt )) {
HXLINE( 171)				fmt = (songJson->__SetField(HX_("format",37,8f,8e,fd),HX_("unknown",8a,23,7b,e1),::hx::paccDynamic));
            			}
HXLINE( 173)			if ((convertTo == HX_("psych_v1",bf,0a,17,5b))) {
HXLINE( 176)				if (!(::StringTools_obj::startsWith(fmt,HX_("psych_v1",bf,0a,17,5b)))) {
HXLINE( 178)					::haxe::Log_obj::trace(((((HX_("converting chart ",b3,bc,de,62) + nameForError) + HX_(" with format ",0f,a1,93,fc)) + fmt) + HX_(" to psych_v1 format...",db,cf,34,c9)),::hx::SourceInfo(HX_("source/backend/Song.hx",3a,61,1f,b3),178,HX_("backend.Song",8f,fa,b1,a5),HX_("parseJSON",db,2f,f6,cd)));
HXLINE( 179)					songJson->__SetField(HX_("format",37,8f,8e,fd),HX_("psych_v1_convert",33,b9,d0,ee),::hx::paccDynamic);
HXLINE( 180)					::backend::Song_obj::convert(songJson);
            				}
            			}
            		}
HXLINE( 184)		return songJson;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Song_obj,parseJSON,return )


Song_obj::Song_obj()
{
}

void Song_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Song);
	HX_MARK_MEMBER_NAME(song,"song");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(events,"events");
	HX_MARK_MEMBER_NAME(bpm,"bpm");
	HX_MARK_MEMBER_NAME(needsVoices,"needsVoices");
	HX_MARK_MEMBER_NAME(arrowSkin,"arrowSkin");
	HX_MARK_MEMBER_NAME(splashSkin,"splashSkin");
	HX_MARK_MEMBER_NAME(gameOverChar,"gameOverChar");
	HX_MARK_MEMBER_NAME(gameOverSound,"gameOverSound");
	HX_MARK_MEMBER_NAME(gameOverLoop,"gameOverLoop");
	HX_MARK_MEMBER_NAME(gameOverEnd,"gameOverEnd");
	HX_MARK_MEMBER_NAME(disableNoteRGB,"disableNoteRGB");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(stage,"stage");
	HX_MARK_MEMBER_NAME(player1,"player1");
	HX_MARK_MEMBER_NAME(player2,"player2");
	HX_MARK_MEMBER_NAME(gfVersion,"gfVersion");
	HX_MARK_MEMBER_NAME(format,"format");
	HX_MARK_END_CLASS();
}

void Song_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(song,"song");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(events,"events");
	HX_VISIT_MEMBER_NAME(bpm,"bpm");
	HX_VISIT_MEMBER_NAME(needsVoices,"needsVoices");
	HX_VISIT_MEMBER_NAME(arrowSkin,"arrowSkin");
	HX_VISIT_MEMBER_NAME(splashSkin,"splashSkin");
	HX_VISIT_MEMBER_NAME(gameOverChar,"gameOverChar");
	HX_VISIT_MEMBER_NAME(gameOverSound,"gameOverSound");
	HX_VISIT_MEMBER_NAME(gameOverLoop,"gameOverLoop");
	HX_VISIT_MEMBER_NAME(gameOverEnd,"gameOverEnd");
	HX_VISIT_MEMBER_NAME(disableNoteRGB,"disableNoteRGB");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(stage,"stage");
	HX_VISIT_MEMBER_NAME(player1,"player1");
	HX_VISIT_MEMBER_NAME(player2,"player2");
	HX_VISIT_MEMBER_NAME(gfVersion,"gfVersion");
	HX_VISIT_MEMBER_NAME(format,"format");
}

::hx::Val Song_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bpm") ) { return ::hx::Val( bpm ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"song") ) { return ::hx::Val( song ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		if (HX_FIELD_EQ(inName,"speed") ) { return ::hx::Val( speed ); }
		if (HX_FIELD_EQ(inName,"stage") ) { return ::hx::Val( stage ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"events") ) { return ::hx::Val( events ); }
		if (HX_FIELD_EQ(inName,"format") ) { return ::hx::Val( format ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"player1") ) { return ::hx::Val( player1 ); }
		if (HX_FIELD_EQ(inName,"player2") ) { return ::hx::Val( player2 ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"arrowSkin") ) { return ::hx::Val( arrowSkin ); }
		if (HX_FIELD_EQ(inName,"gfVersion") ) { return ::hx::Val( gfVersion ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"splashSkin") ) { return ::hx::Val( splashSkin ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"needsVoices") ) { return ::hx::Val( needsVoices ); }
		if (HX_FIELD_EQ(inName,"gameOverEnd") ) { return ::hx::Val( gameOverEnd ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"gameOverChar") ) { return ::hx::Val( gameOverChar ); }
		if (HX_FIELD_EQ(inName,"gameOverLoop") ) { return ::hx::Val( gameOverLoop ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gameOverSound") ) { return ::hx::Val( gameOverSound ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"disableNoteRGB") ) { return ::hx::Val( disableNoteRGB ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Song_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"convert") ) { outValue = convert_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getChart") ) { outValue = getChart_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"chartPath") ) { outValue = ( chartPath ); return true; }
		if (HX_FIELD_EQ(inName,"_lastPath") ) { outValue = ( _lastPath ); return true; }
		if (HX_FIELD_EQ(inName,"parseJSON") ) { outValue = parseJSON_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadFromJson") ) { outValue = loadFromJson_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"loadedSongName") ) { outValue = ( loadedSongName ); return true; }
	}
	return false;
}

::hx::Val Song_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bpm") ) { bpm=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"song") ) { song=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stage") ) { stage=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"events") ) { events=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"format") ) { format=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"player1") ) { player1=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"player2") ) { player2=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"arrowSkin") ) { arrowSkin=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gfVersion") ) { gfVersion=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"splashSkin") ) { splashSkin=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"needsVoices") ) { needsVoices=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gameOverEnd") ) { gameOverEnd=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"gameOverChar") ) { gameOverChar=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gameOverLoop") ) { gameOverLoop=inValue.Cast< ::String >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gameOverSound") ) { gameOverSound=inValue.Cast< ::String >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"disableNoteRGB") ) { disableNoteRGB=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Song_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"chartPath") ) { chartPath=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"_lastPath") ) { _lastPath=ioValue.Cast< ::String >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"loadedSongName") ) { loadedSongName=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void Song_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("song",d5,23,58,4c));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("events",19,4f,6a,96));
	outFields->push(HX_("bpm",df,be,4a,00));
	outFields->push(HX_("needsVoices",be,05,e9,0d));
	outFields->push(HX_("arrowSkin",e6,d4,f8,07));
	outFields->push(HX_("splashSkin",84,03,e1,a1));
	outFields->push(HX_("gameOverChar",5c,48,07,65));
	outFields->push(HX_("gameOverSound",89,f8,70,3c));
	outFields->push(HX_("gameOverLoop",ea,8f,ff,6a));
	outFields->push(HX_("gameOverEnd",15,2d,a9,8d));
	outFields->push(HX_("disableNoteRGB",33,ad,d1,4a));
	outFields->push(HX_("speed",87,97,69,81));
	outFields->push(HX_("stage",be,6a,0b,84));
	outFields->push(HX_("player1",b0,09,15,8a));
	outFields->push(HX_("player2",b1,09,15,8a));
	outFields->push(HX_("gfVersion",b9,c6,7d,f3));
	outFields->push(HX_("format",37,8f,8e,fd));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Song_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Song_obj,song),HX_("song",d5,23,58,4c)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Song_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(Song_obj,events),HX_("events",19,4f,6a,96)},
	{::hx::fsFloat,(int)offsetof(Song_obj,bpm),HX_("bpm",df,be,4a,00)},
	{::hx::fsBool,(int)offsetof(Song_obj,needsVoices),HX_("needsVoices",be,05,e9,0d)},
	{::hx::fsString,(int)offsetof(Song_obj,arrowSkin),HX_("arrowSkin",e6,d4,f8,07)},
	{::hx::fsString,(int)offsetof(Song_obj,splashSkin),HX_("splashSkin",84,03,e1,a1)},
	{::hx::fsString,(int)offsetof(Song_obj,gameOverChar),HX_("gameOverChar",5c,48,07,65)},
	{::hx::fsString,(int)offsetof(Song_obj,gameOverSound),HX_("gameOverSound",89,f8,70,3c)},
	{::hx::fsString,(int)offsetof(Song_obj,gameOverLoop),HX_("gameOverLoop",ea,8f,ff,6a)},
	{::hx::fsString,(int)offsetof(Song_obj,gameOverEnd),HX_("gameOverEnd",15,2d,a9,8d)},
	{::hx::fsBool,(int)offsetof(Song_obj,disableNoteRGB),HX_("disableNoteRGB",33,ad,d1,4a)},
	{::hx::fsFloat,(int)offsetof(Song_obj,speed),HX_("speed",87,97,69,81)},
	{::hx::fsString,(int)offsetof(Song_obj,stage),HX_("stage",be,6a,0b,84)},
	{::hx::fsString,(int)offsetof(Song_obj,player1),HX_("player1",b0,09,15,8a)},
	{::hx::fsString,(int)offsetof(Song_obj,player2),HX_("player2",b1,09,15,8a)},
	{::hx::fsString,(int)offsetof(Song_obj,gfVersion),HX_("gfVersion",b9,c6,7d,f3)},
	{::hx::fsString,(int)offsetof(Song_obj,format),HX_("format",37,8f,8e,fd)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Song_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &Song_obj::chartPath,HX_("chartPath",a3,75,d1,25)},
	{::hx::fsString,(void *) &Song_obj::loadedSongName,HX_("loadedSongName",e5,e1,37,f4)},
	{::hx::fsString,(void *) &Song_obj::_lastPath,HX_("_lastPath",7a,f6,30,25)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Song_obj_sMemberFields[] = {
	HX_("song",d5,23,58,4c),
	HX_("notes",41,dc,ca,9f),
	HX_("events",19,4f,6a,96),
	HX_("bpm",df,be,4a,00),
	HX_("needsVoices",be,05,e9,0d),
	HX_("arrowSkin",e6,d4,f8,07),
	HX_("splashSkin",84,03,e1,a1),
	HX_("gameOverChar",5c,48,07,65),
	HX_("gameOverSound",89,f8,70,3c),
	HX_("gameOverLoop",ea,8f,ff,6a),
	HX_("gameOverEnd",15,2d,a9,8d),
	HX_("disableNoteRGB",33,ad,d1,4a),
	HX_("speed",87,97,69,81),
	HX_("stage",be,6a,0b,84),
	HX_("player1",b0,09,15,8a),
	HX_("player2",b1,09,15,8a),
	HX_("gfVersion",b9,c6,7d,f3),
	HX_("format",37,8f,8e,fd),
	::String(null()) };

static void Song_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Song_obj::chartPath,"chartPath");
	HX_MARK_MEMBER_NAME(Song_obj::loadedSongName,"loadedSongName");
	HX_MARK_MEMBER_NAME(Song_obj::_lastPath,"_lastPath");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Song_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Song_obj::chartPath,"chartPath");
	HX_VISIT_MEMBER_NAME(Song_obj::loadedSongName,"loadedSongName");
	HX_VISIT_MEMBER_NAME(Song_obj::_lastPath,"_lastPath");
};

#endif

::hx::Class Song_obj::__mClass;

static ::String Song_obj_sStaticFields[] = {
	HX_("convert",f3,fd,c9,1a),
	HX_("chartPath",a3,75,d1,25),
	HX_("loadedSongName",e5,e1,37,f4),
	HX_("loadFromJson",f8,fc,9c,5d),
	HX_("_lastPath",7a,f6,30,25),
	HX_("getChart",68,ac,8a,a5),
	HX_("parseJSON",db,2f,f6,cd),
	::String(null())
};

void Song_obj::__register()
{
	Song_obj _hx_dummy;
	Song_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.Song",8f,fa,b1,a5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Song_obj::__GetStatic;
	__mClass->mSetStaticField = &Song_obj::__SetStatic;
	__mClass->mMarkFunc = Song_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Song_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Song_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Song_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Song_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Song_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Song_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace backend
