// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_966ecec371c23c3e
#define INCLUDED_966ecec371c23c3e
#include "discord_rpc.hpp"
#endif
#ifndef INCLUDED_backend__Discord_DiscordPresence
#include <backend/_Discord/DiscordPresence.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ec945b5c0b0daf9f_183_new,"backend._Discord.DiscordPresence","new",0x03a22912,"backend._Discord.DiscordPresence.new","backend/Discord.hx",183,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_ec945b5c0b0daf9f_188_toString,"backend._Discord.DiscordPresence","toString",0x0da7b2ba,"backend._Discord.DiscordPresence.toString","backend/Discord.hx",188,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_ec945b5c0b0daf9f_201_get_state,"backend._Discord.DiscordPresence","get_state",0x8441bc9a,"backend._Discord.DiscordPresence.get_state","backend/Discord.hx",201,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_ec945b5c0b0daf9f_206_set_state,"backend._Discord.DiscordPresence","set_state",0x6792a8a6,"backend._Discord.DiscordPresence.set_state","backend/Discord.hx",206,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_ec945b5c0b0daf9f_211_get_details,"backend._Discord.DiscordPresence","get_details",0xda92978b,"backend._Discord.DiscordPresence.get_details","backend/Discord.hx",211,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_ec945b5c0b0daf9f_216_set_details,"backend._Discord.DiscordPresence","set_details",0xe4ff9e97,"backend._Discord.DiscordPresence.set_details","backend/Discord.hx",216,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_ec945b5c0b0daf9f_221_get_smallImageKey,"backend._Discord.DiscordPresence","get_smallImageKey",0xaf86b074,"backend._Discord.DiscordPresence.get_smallImageKey","backend/Discord.hx",221,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_ec945b5c0b0daf9f_226_set_smallImageKey,"backend._Discord.DiscordPresence","set_smallImageKey",0xd2f48880,"backend._Discord.DiscordPresence.set_smallImageKey","backend/Discord.hx",226,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_ec945b5c0b0daf9f_231_get_largeImageKey,"backend._Discord.DiscordPresence","get_largeImageKey",0xbb010768,"backend._Discord.DiscordPresence.get_largeImageKey","backend/Discord.hx",231,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_ec945b5c0b0daf9f_236_set_largeImageKey,"backend._Discord.DiscordPresence","set_largeImageKey",0xde6edf74,"backend._Discord.DiscordPresence.set_largeImageKey","backend/Discord.hx",236,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_ec945b5c0b0daf9f_241_get_largeImageText,"backend._Discord.DiscordPresence","get_largeImageText",0xebd85ec4,"backend._Discord.DiscordPresence.get_largeImageText","backend/Discord.hx",241,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_ec945b5c0b0daf9f_246_set_largeImageText,"backend._Discord.DiscordPresence","set_largeImageText",0xc8879138,"backend._Discord.DiscordPresence.set_largeImageText","backend/Discord.hx",246,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_ec945b5c0b0daf9f_251_get_startTimestamp,"backend._Discord.DiscordPresence","get_startTimestamp",0x52b4c46b,"backend._Discord.DiscordPresence.get_startTimestamp","backend/Discord.hx",251,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_ec945b5c0b0daf9f_256_set_startTimestamp,"backend._Discord.DiscordPresence","set_startTimestamp",0x2f63f6df,"backend._Discord.DiscordPresence.set_startTimestamp","backend/Discord.hx",256,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_ec945b5c0b0daf9f_261_get_endTimestamp,"backend._Discord.DiscordPresence","get_endTimestamp",0x2e8e6a12,"backend._Discord.DiscordPresence.get_endTimestamp","backend/Discord.hx",261,0xbaede60d)
HX_LOCAL_STACK_FRAME(_hx_pos_ec945b5c0b0daf9f_266_set_endTimestamp,"backend._Discord.DiscordPresence","set_endTimestamp",0x84d05786,"backend._Discord.DiscordPresence.set_endTimestamp","backend/Discord.hx",266,0xbaede60d)
namespace backend{
namespace _Discord{

void DiscordPresence_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_ec945b5c0b0daf9f_183_new)
HXDLIN( 183)		this->_hx___presence = DiscordRichPresence();
            	}

Dynamic DiscordPresence_obj::__CreateEmpty() { return new DiscordPresence_obj; }

void *DiscordPresence_obj::_hx_vtable = 0;

Dynamic DiscordPresence_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DiscordPresence_obj > _hx_result = new DiscordPresence_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DiscordPresence_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x17571e4a;
}

::String DiscordPresence_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_ec945b5c0b0daf9f_188_toString)
HXLINE( 189)		 ::Dynamic value = ::String(this->_hx___presence.state);
HXDLIN( 189)		 ::flixel::util::LabelValuePair _this = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN( 189)		_this->label = HX_("state",11,76,0b,84);
HXDLIN( 189)		_this->value = value;
HXLINE( 190)		 ::Dynamic value1 = ::String(this->_hx___presence.details);
HXDLIN( 190)		 ::flixel::util::LabelValuePair _this1 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN( 190)		_this1->label = HX_("details",c2,dc,56,ab);
HXDLIN( 190)		_this1->value = value1;
HXLINE( 191)		 ::Dynamic value2 = ::String(this->_hx___presence.smallImageKey);
HXDLIN( 191)		 ::flixel::util::LabelValuePair _this2 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN( 191)		_this2->label = HX_("smallImageKey",eb,38,69,a3);
HXDLIN( 191)		_this2->value = value2;
HXLINE( 192)		 ::Dynamic value3 = ::String(this->_hx___presence.largeImageKey);
HXDLIN( 192)		 ::flixel::util::LabelValuePair _this3 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN( 192)		_this3->label = HX_("largeImageKey",df,8f,e3,ae);
HXDLIN( 192)		_this3->value = value3;
HXLINE( 193)		 ::Dynamic value4 = ::String(this->_hx___presence.largeImageText);
HXDLIN( 193)		 ::flixel::util::LabelValuePair _this4 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN( 193)		_this4->label = HX_("largeImageText",6d,3e,2d,5e);
HXDLIN( 193)		_this4->value = value4;
HXLINE( 194)		 ::Dynamic value5 = ( (int)(this->_hx___presence.startTimestamp) );
HXDLIN( 194)		 ::flixel::util::LabelValuePair _this5 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN( 194)		_this5->label = HX_("startTimestamp",14,a4,09,c5);
HXDLIN( 194)		_this5->value = value5;
HXLINE( 195)		 ::Dynamic value6 = ( (int)(this->_hx___presence.endTimestamp) );
HXDLIN( 195)		 ::flixel::util::LabelValuePair _this6 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN( 195)		_this6->label = HX_("endTimestamp",7b,dd,d0,b4);
HXDLIN( 195)		_this6->value = value6;
HXLINE( 188)		return ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(7)->init(0,_this)->init(1,_this1)->init(2,_this2)->init(3,_this3)->init(4,_this4)->init(5,_this5)->init(6,_this6));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiscordPresence_obj,toString,return )

::String DiscordPresence_obj::get_state(){
            	HX_STACKFRAME(&_hx_pos_ec945b5c0b0daf9f_201_get_state)
HXDLIN( 201)		return ::String(this->_hx___presence.state);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiscordPresence_obj,get_state,return )

::String DiscordPresence_obj::set_state(::String value){
            	HX_STACKFRAME(&_hx_pos_ec945b5c0b0daf9f_206_set_state)
HXDLIN( 206)		return ::String((this->_hx___presence.state = value.utf8_str()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DiscordPresence_obj,set_state,return )

::String DiscordPresence_obj::get_details(){
            	HX_STACKFRAME(&_hx_pos_ec945b5c0b0daf9f_211_get_details)
HXDLIN( 211)		return ::String(this->_hx___presence.details);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiscordPresence_obj,get_details,return )

::String DiscordPresence_obj::set_details(::String value){
            	HX_STACKFRAME(&_hx_pos_ec945b5c0b0daf9f_216_set_details)
HXDLIN( 216)		return ::String((this->_hx___presence.details = value.utf8_str()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DiscordPresence_obj,set_details,return )

::String DiscordPresence_obj::get_smallImageKey(){
            	HX_STACKFRAME(&_hx_pos_ec945b5c0b0daf9f_221_get_smallImageKey)
HXDLIN( 221)		return ::String(this->_hx___presence.smallImageKey);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiscordPresence_obj,get_smallImageKey,return )

::String DiscordPresence_obj::set_smallImageKey(::String value){
            	HX_STACKFRAME(&_hx_pos_ec945b5c0b0daf9f_226_set_smallImageKey)
HXDLIN( 226)		return ::String((this->_hx___presence.smallImageKey = value.utf8_str()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DiscordPresence_obj,set_smallImageKey,return )

::String DiscordPresence_obj::get_largeImageKey(){
            	HX_STACKFRAME(&_hx_pos_ec945b5c0b0daf9f_231_get_largeImageKey)
HXDLIN( 231)		return ::String(this->_hx___presence.largeImageKey);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiscordPresence_obj,get_largeImageKey,return )

::String DiscordPresence_obj::set_largeImageKey(::String value){
            	HX_STACKFRAME(&_hx_pos_ec945b5c0b0daf9f_236_set_largeImageKey)
HXDLIN( 236)		return ::String((this->_hx___presence.largeImageKey = value.utf8_str()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DiscordPresence_obj,set_largeImageKey,return )

::String DiscordPresence_obj::get_largeImageText(){
            	HX_STACKFRAME(&_hx_pos_ec945b5c0b0daf9f_241_get_largeImageText)
HXDLIN( 241)		return ::String(this->_hx___presence.largeImageText);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiscordPresence_obj,get_largeImageText,return )

::String DiscordPresence_obj::set_largeImageText(::String value){
            	HX_STACKFRAME(&_hx_pos_ec945b5c0b0daf9f_246_set_largeImageText)
HXDLIN( 246)		return ::String((this->_hx___presence.largeImageText = value.utf8_str()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DiscordPresence_obj,set_largeImageText,return )

int DiscordPresence_obj::get_startTimestamp(){
            	HX_STACKFRAME(&_hx_pos_ec945b5c0b0daf9f_251_get_startTimestamp)
HXDLIN( 251)		return ( (int)(this->_hx___presence.startTimestamp) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiscordPresence_obj,get_startTimestamp,return )

int DiscordPresence_obj::set_startTimestamp(int value){
            	HX_STACKFRAME(&_hx_pos_ec945b5c0b0daf9f_256_set_startTimestamp)
HXDLIN( 256)		return ( (int)((this->_hx___presence.startTimestamp = ( (::cpp::Int64)(value) ))) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(DiscordPresence_obj,set_startTimestamp,return )

int DiscordPresence_obj::get_endTimestamp(){
            	HX_STACKFRAME(&_hx_pos_ec945b5c0b0daf9f_261_get_endTimestamp)
HXDLIN( 261)		return ( (int)(this->_hx___presence.endTimestamp) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(DiscordPresence_obj,get_endTimestamp,return )

int DiscordPresence_obj::set_endTimestamp(int value){
            	HX_STACKFRAME(&_hx_pos_ec945b5c0b0daf9f_266_set_endTimestamp)
HXDLIN( 266)		return ( (int)((this->_hx___presence.endTimestamp = ( (::cpp::Int64)(value) ))) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(DiscordPresence_obj,set_endTimestamp,return )


::hx::ObjectPtr< DiscordPresence_obj > DiscordPresence_obj::__new() {
	::hx::ObjectPtr< DiscordPresence_obj > __this = new DiscordPresence_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< DiscordPresence_obj > DiscordPresence_obj::__alloc(::hx::Ctx *_hx_ctx) {
	DiscordPresence_obj *__this = (DiscordPresence_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DiscordPresence_obj), true, "backend._Discord.DiscordPresence"));
	*(void **)__this = DiscordPresence_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DiscordPresence_obj::DiscordPresence_obj()
{
}

void DiscordPresence_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DiscordPresence);
	HX_MARK_MEMBER_NAME(_hx___presence,"__presence");
	HX_MARK_END_CLASS();
}

void DiscordPresence_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___presence,"__presence");
}

::hx::Val DiscordPresence_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_state() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"details") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_details() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_state") ) { return ::hx::Val( get_state_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_state") ) { return ::hx::Val( set_state_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_details") ) { return ::hx::Val( get_details_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_details") ) { return ::hx::Val( set_details_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"endTimestamp") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_endTimestamp() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"smallImageKey") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_smallImageKey() ); }
		if (HX_FIELD_EQ(inName,"largeImageKey") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_largeImageKey() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"largeImageText") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_largeImageText() ); }
		if (HX_FIELD_EQ(inName,"startTimestamp") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_startTimestamp() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_endTimestamp") ) { return ::hx::Val( get_endTimestamp_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_endTimestamp") ) { return ::hx::Val( set_endTimestamp_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_smallImageKey") ) { return ::hx::Val( get_smallImageKey_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_smallImageKey") ) { return ::hx::Val( set_smallImageKey_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_largeImageKey") ) { return ::hx::Val( get_largeImageKey_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_largeImageKey") ) { return ::hx::Val( set_largeImageKey_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_largeImageText") ) { return ::hx::Val( get_largeImageText_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_largeImageText") ) { return ::hx::Val( set_largeImageText_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_startTimestamp") ) { return ::hx::Val( get_startTimestamp_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_startTimestamp") ) { return ::hx::Val( set_startTimestamp_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val DiscordPresence_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"state") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_state(inValue.Cast< ::String >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"details") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_details(inValue.Cast< ::String >()) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"endTimestamp") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_endTimestamp(inValue.Cast< int >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"smallImageKey") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_smallImageKey(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"largeImageKey") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_largeImageKey(inValue.Cast< ::String >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"largeImageText") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_largeImageText(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"startTimestamp") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_startTimestamp(inValue.Cast< int >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DiscordPresence_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("state",11,76,0b,84));
	outFields->push(HX_("details",c2,dc,56,ab));
	outFields->push(HX_("smallImageKey",eb,38,69,a3));
	outFields->push(HX_("largeImageKey",df,8f,e3,ae));
	outFields->push(HX_("largeImageText",6d,3e,2d,5e));
	outFields->push(HX_("startTimestamp",14,a4,09,c5));
	outFields->push(HX_("endTimestamp",7b,dd,d0,b4));
	outFields->push(HX_("__presence",5b,c5,0f,0a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DiscordPresence_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  DiscordRichPresence */ ,(int)offsetof(DiscordPresence_obj,_hx___presence),HX_("__presence",5b,c5,0f,0a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *DiscordPresence_obj_sStaticStorageInfo = 0;
#endif

static ::String DiscordPresence_obj_sMemberFields[] = {
	HX_("toString",ac,d0,6e,38),
	HX_("get_state",68,d2,b4,c7),
	HX_("set_state",74,be,05,ab),
	HX_("get_details",d9,3c,51,31),
	HX_("set_details",e5,43,be,3b),
	HX_("get_smallImageKey",42,44,d9,a9),
	HX_("set_smallImageKey",4e,1c,47,cd),
	HX_("get_largeImageKey",36,9b,53,b5),
	HX_("set_largeImageKey",42,73,c1,d8),
	HX_("get_largeImageText",36,1f,c7,f9),
	HX_("set_largeImageText",aa,51,76,d6),
	HX_("get_startTimestamp",dd,84,a3,60),
	HX_("set_startTimestamp",51,b7,52,3d),
	HX_("get_endTimestamp",04,ca,6f,b9),
	HX_("set_endTimestamp",78,b7,b1,0f),
	::String(null()) };

::hx::Class DiscordPresence_obj::__mClass;

void DiscordPresence_obj::__register()
{
	DiscordPresence_obj _hx_dummy;
	DiscordPresence_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend._Discord.DiscordPresence",20,f8,b7,f0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DiscordPresence_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DiscordPresence_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DiscordPresence_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DiscordPresence_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace backend
} // end namespace _Discord
