// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_backend_Native
#include <backend/Native.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_system_Display
#include <lime/system/Display.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_4139f03270a236b7_62___init__,"::backend::Native_obj","__init__",0xf533aedb,"::backend::Native_obj.__init__","backend/Native.hx",62,0xf923506c)
HX_LOCAL_STACK_FRAME(_hx_pos_65ce1260b031f049_71_registerDPIAware,"backend.Native","registerDPIAware",0xdfee5a41,"backend.Native.registerDPIAware","backend/Native.hx",71,0xf923506c)
HX_LOCAL_STACK_FRAME(_hx_pos_65ce1260b031f049_88_fixScaling,"backend.Native","fixScaling",0xd5aeab6f,"backend.Native.fixScaling","backend/Native.hx",88,0xf923506c)
HX_LOCAL_STACK_FRAME(_hx_pos_65ce1260b031f049_86_boot,"backend.Native","boot",0xbf2c1aef,"backend.Native.boot","backend/Native.hx",86,0xf923506c)

#include <windows.h>
#include <dwmapi.h>
#include <winuser.h>
#include <wingdi.h>

#define attributeDarkMode 20
#define attributeDarkModeFallback 19

#define attributeCaptionColor 34
#define attributeTextColor 35
#define attributeBorderColor 36

struct HandleData {
	DWORD pid = 0;
	HWND handle = 0;
};

BOOL CALLBACK findByPID(HWND handle, LPARAM lParam) {
	DWORD targetPID = ((HandleData*)lParam)->pid;
	DWORD curPID = 0;

	GetWindowThreadProcessId(handle, &curPID);
	if (targetPID != curPID || GetWindow(handle, GW_OWNER) != (HWND)0 || !IsWindowVisible(handle)) {
		return TRUE;
	}

	((HandleData*)lParam)->handle = handle;
	return FALSE;
}

HWND curHandle = 0;
void getHandle() {
	if (curHandle == (HWND)0) {
		HandleData data;
		data.pid = GetCurrentProcessId();
		EnumWindows(findByPID, (LPARAM)&data);
		curHandle = data.handle;
	}
}

namespace backend{

void Native_obj::__construct() { }

Dynamic Native_obj::__CreateEmpty() { return new Native_obj; }

void *Native_obj::_hx_vtable = 0;

Dynamic Native_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Native_obj > _hx_result = new Native_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Native_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x00b57403;
}

void Native_obj::__init__(){
            	HX_STACKFRAME(&_hx_pos_4139f03270a236b7_62___init__)
HXDLIN(  62)		::backend::Native_obj::registerDPIAware();
            	}


void Native_obj::registerDPIAware(){
            	HX_STACKFRAME(&_hx_pos_65ce1260b031f049_71_registerDPIAware)
HXDLIN(  71)		
			SetProcessDPIAware();	
			#ifdef DPI_AWARENESS_CONTEXT
			SetProcessDpiAwarenessContext(
				#ifdef DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2
				DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2
				#else
				DPI_AWARENESS_CONTEXT_SYSTEM_AWARE
				#endif
			);
			#endif
		;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Native_obj,registerDPIAware,(void))

bool Native_obj::fixedScaling;

void Native_obj::fixScaling(){
            	HX_STACKFRAME(&_hx_pos_65ce1260b031f049_88_fixScaling)
HXLINE(  89)		if (::backend::Native_obj::fixedScaling) {
HXLINE(  89)			return;
            		}
HXLINE(  90)		::backend::Native_obj::fixedScaling = true;
HXLINE(  93)		 ::lime::_hx_system::Display display = ::lime::_hx_system::System_obj::getDisplay(0);
HXLINE(  94)		if (::hx::IsNotNull( display )) {
HXLINE(  96)			Float dpiScale = (display->dpi / ( (Float)(96) ));
HXLINE(  97)			 ::lime::ui::Window _hx_tmp = ::lime::app::Application_obj::current->_hx___window;
HXDLIN(  97)			_hx_tmp->set_width(::Std_obj::_hx_int((( (Float)(::Main_obj::game->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic)) ) * dpiScale)));
HXLINE(  98)			 ::lime::ui::Window _hx_tmp1 = ::lime::app::Application_obj::current->_hx___window;
HXDLIN(  98)			_hx_tmp1->set_height(::Std_obj::_hx_int((( (Float)(::Main_obj::game->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic)) ) * dpiScale)));
HXLINE( 100)			 ::lime::ui::Window _hx_tmp2 = ::lime::app::Application_obj::current->_hx___window;
HXDLIN( 100)			_hx_tmp2->set_x(::Std_obj::_hx_int(((::lime::app::Application_obj::current->_hx___window->get_display()->bounds->width - ( (Float)(::lime::app::Application_obj::current->_hx___window->_hx___width) )) / ( (Float)(2) ))));
HXLINE( 101)			 ::lime::ui::Window _hx_tmp3 = ::lime::app::Application_obj::current->_hx___window;
HXDLIN( 101)			_hx_tmp3->set_y(::Std_obj::_hx_int(((::lime::app::Application_obj::current->_hx___window->get_display()->bounds->height - ( (Float)(::lime::app::Application_obj::current->_hx___window->_hx___height) )) / ( (Float)(2) ))));
            		}
HXLINE( 104)		
			getHandle();
			if (curHandle != (HWND)0) {
				HDC curHDC = GetDC(curHandle);
				RECT curRect;
				GetClientRect(curHandle, &curRect);
				FillRect(curHDC, &curRect, (HBRUSH)GetStockObject(BLACK_BRUSH));
				ReleaseDC(curHandle, curHDC);
			}
		;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Native_obj,fixScaling,(void))


Native_obj::Native_obj()
{
}

bool Native_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"fixScaling") ) { outValue = fixScaling_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fixedScaling") ) { outValue = ( fixedScaling ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"registerDPIAware") ) { outValue = registerDPIAware_dyn(); return true; }
	}
	return false;
}

bool Native_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"fixedScaling") ) { fixedScaling=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Native_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Native_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &Native_obj::fixedScaling,HX_("fixedScaling",33,73,b6,f3)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Native_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Native_obj::fixedScaling,"fixedScaling");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Native_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Native_obj::fixedScaling,"fixedScaling");
};

#endif

::hx::Class Native_obj::__mClass;

static ::String Native_obj_sStaticFields[] = {
	HX_("registerDPIAware",04,1c,38,41),
	HX_("fixedScaling",33,73,b6,f3),
	HX_("fixScaling",f2,e8,b0,24),
	::String(null())
};

void Native_obj::__register()
{
	Native_obj _hx_dummy;
	Native_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.Native",d1,42,a5,e6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Native_obj::__GetStatic;
	__mClass->mSetStaticField = &Native_obj::__SetStatic;
	__mClass->mMarkFunc = Native_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Native_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Native_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Native_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Native_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Native_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Native_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_65ce1260b031f049_86_boot)
HXDLIN(  86)		fixedScaling = false;
            	}
}

} // end namespace backend
