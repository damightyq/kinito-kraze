// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_backend_PsychCamera
#include <backend/PsychCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4c92cf3011f7042f_6_new,"backend.PsychCamera","new",0x2001d2b8,"backend.PsychCamera.new","backend/PsychCamera.hx",6,0x6bcc8b79)
HX_LOCAL_STACK_FRAME(_hx_pos_4c92cf3011f7042f_9_update,"backend.PsychCamera","update",0x74af8ab1,"backend.PsychCamera.update","backend/PsychCamera.hx",9,0x6bcc8b79)
HX_LOCAL_STACK_FRAME(_hx_pos_4c92cf3011f7042f_27_updateFollowDelta,"backend.PsychCamera","updateFollowDelta",0x64fa0596,"backend.PsychCamera.updateFollowDelta","backend/PsychCamera.hx",27,0x6bcc8b79)
HX_LOCAL_STACK_FRAME(_hx_pos_4c92cf3011f7042f_112_set_followLerp,"backend.PsychCamera","set_followLerp",0x4b5439ed,"backend.PsychCamera.set_followLerp","backend/PsychCamera.hx",112,0x6bcc8b79)
namespace backend{

void PsychCamera_obj::__construct( ::Dynamic X, ::Dynamic Y, ::Dynamic Width, ::Dynamic Height, ::Dynamic Zoom){
            	HX_STACKFRAME(&_hx_pos_4c92cf3011f7042f_6_new)
HXDLIN(   6)		super::__construct(X,Y,Width,Height,Zoom);
            	}

Dynamic PsychCamera_obj::__CreateEmpty() { return new PsychCamera_obj; }

void *PsychCamera_obj::_hx_vtable = 0;

Dynamic PsychCamera_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PsychCamera_obj > _hx_result = new PsychCamera_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool PsychCamera_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x52d5b98c) {
		if (inClassId<=(int)0x1ff7ce3b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1ff7ce3b;
		} else {
			return inClassId==(int)0x52d5b98c;
		}
	} else {
		return inClassId==(int)0x7ccf8994;
	}
}

void PsychCamera_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_4c92cf3011f7042f_9_update)
HXLINE(  11)		if (::hx::IsNotNull( this->target )) {
HXLINE(  13)			this->updateFollowDelta(elapsed);
            		}
HXLINE(  16)		this->updateScroll();
HXLINE(  17)		this->updateFlash(elapsed);
HXLINE(  18)		this->updateFade(elapsed);
HXLINE(  20)		::Array< ::Dynamic> _hx_tmp;
HXDLIN(  20)		if (this->filtersEnabled) {
HXLINE(  20)			_hx_tmp = this->filters;
            		}
            		else {
HXLINE(  20)			_hx_tmp = null();
            		}
HXDLIN(  20)		this->flashSprite->set_filters(_hx_tmp);
HXLINE(  22)		this->updateFlashSpritePosition();
HXLINE(  23)		this->updateShake(elapsed);
            	}


void PsychCamera_obj::updateFollowDelta( ::Dynamic __o_elapsed){
            		 ::Dynamic elapsed = __o_elapsed;
            		if (::hx::IsNull(__o_elapsed)) elapsed = 0;
            	HX_STACKFRAME(&_hx_pos_4c92cf3011f7042f_27_updateFollowDelta)
HXLINE(  30)		if (::hx::IsNull( this->deadzone )) {
HXLINE(  32)			this->target->getMidpoint(this->_point);
HXLINE(  33)			{
HXLINE(  33)				 ::flixel::math::FlxBasePoint this1 = this->_point;
HXDLIN(  33)				 ::flixel::math::FlxBasePoint point = this->targetOffset;
HXDLIN(  33)				{
HXLINE(  33)					Float y = point->y;
HXDLIN(  33)					this1->set_x((this1->x + point->x));
HXDLIN(  33)					this1->set_y((this1->y + y));
            				}
HXDLIN(  33)				{
HXLINE(  33)					 ::flixel::math::FlxBasePoint _this = point;
HXDLIN(  33)					if (_this->_weak) {
HXLINE(  33)						_this->put();
            					}
            				}
            			}
HXLINE(  34)			{
HXLINE(  34)				 ::flixel::math::FlxBasePoint this2 = this->_scrollTarget;
HXDLIN(  34)				Float y1 = (this->_point->y - (( (Float)(this->height) ) * ((Float)0.5)));
HXDLIN(  34)				this2->set_x((this->_point->x - (( (Float)(this->width) ) * ((Float)0.5))));
HXDLIN(  34)				this2->set_y(y1);
            			}
            		}
            		else {
HXLINE(  38)			Float edge;
HXLINE(  39)			Float targetX = (this->target->x + this->targetOffset->x);
HXLINE(  40)			Float targetY = (this->target->y + this->targetOffset->y);
HXLINE(  42)			if (::hx::IsPointerEq( this->style,::flixel::FlxCameraFollowStyle_obj::SCREEN_BY_SCREEN_dyn() )) {
HXLINE(  44)				if ((targetX >= (this->scroll->x + (( (Float)(this->width) ) - this->viewMarginX)))) {
HXLINE(  46)					this->_scrollTarget->set_x((this->_scrollTarget->x + (( (Float)(this->width) ) - (this->viewMarginX * ( (Float)(2) )))));
            				}
            				else {
HXLINE(  48)					Float _hx_tmp = (targetX + this->target->get_width());
HXDLIN(  48)					if ((_hx_tmp < (this->scroll->x + this->viewMarginX))) {
HXLINE(  50)						this->_scrollTarget->set_x((this->_scrollTarget->x - (( (Float)(this->width) ) - (this->viewMarginX * ( (Float)(2) )))));
            					}
            				}
HXLINE(  53)				if ((targetY >= (this->scroll->y + (( (Float)(this->height) ) - this->viewMarginY)))) {
HXLINE(  55)					this->_scrollTarget->set_y((this->_scrollTarget->y + (( (Float)(this->height) ) - (this->viewMarginY * ( (Float)(2) )))));
            				}
            				else {
HXLINE(  57)					Float _hx_tmp1 = (targetY + this->target->get_height());
HXDLIN(  57)					if ((_hx_tmp1 < (this->scroll->y + this->viewMarginY))) {
HXLINE(  59)						this->_scrollTarget->set_y((this->_scrollTarget->y - (( (Float)(this->height) ) - (this->viewMarginY * ( (Float)(2) )))));
            					}
            				}
HXLINE(  63)				this->bindScrollPos(this->_scrollTarget);
            			}
            			else {
HXLINE(  67)				edge = (targetX - this->deadzone->x);
HXLINE(  68)				if ((this->_scrollTarget->x > edge)) {
HXLINE(  70)					this->_scrollTarget->set_x(edge);
            				}
HXLINE(  72)				Float edge1 = (targetX + this->target->get_width());
HXDLIN(  72)				edge = ((edge1 - this->deadzone->x) - this->deadzone->width);
HXLINE(  73)				if ((this->_scrollTarget->x < edge)) {
HXLINE(  75)					this->_scrollTarget->set_x(edge);
            				}
HXLINE(  78)				edge = (targetY - this->deadzone->y);
HXLINE(  79)				if ((this->_scrollTarget->y > edge)) {
HXLINE(  81)					this->_scrollTarget->set_y(edge);
            				}
HXLINE(  83)				Float edge2 = (targetY + this->target->get_height());
HXDLIN(  83)				edge = ((edge2 - this->deadzone->y) - this->deadzone->height);
HXLINE(  84)				if ((this->_scrollTarget->y < edge)) {
HXLINE(  86)					this->_scrollTarget->set_y(edge);
            				}
            			}
HXLINE(  90)			if (::Std_obj::isOfType(this->target,::hx::ClassOf< ::flixel::FlxSprite >())) {
HXLINE(  92)				if (::hx::IsNull( this->_lastTargetPosition )) {
HXLINE(  94)					Float x = this->target->x;
HXDLIN(  94)					Float y2 = this->target->y;
HXDLIN(  94)					 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y2);
HXDLIN(  94)					point1->_inPool = false;
HXDLIN(  94)					this->_lastTargetPosition = point1;
            				}
HXLINE(  96)				this->_scrollTarget->set_x((this->_scrollTarget->x + ((this->target->x - this->_lastTargetPosition->x) * this->followLead->x)));
HXLINE(  97)				this->_scrollTarget->set_y((this->_scrollTarget->y + ((this->target->y - this->_lastTargetPosition->y) * this->followLead->y)));
HXLINE(  99)				this->_lastTargetPosition->set_x(this->target->x);
HXLINE( 100)				this->_lastTargetPosition->set_y(this->target->y);
            			}
            		}
HXLINE( 104)		Float mult = (( (Float)(1) ) - ::Math_obj::exp(((-(elapsed) * this->followLerp) / ((Float)0.016666666666666666))));
HXLINE( 105)		this->scroll->set_x((this->scroll->x + ((this->_scrollTarget->x - this->scroll->x) * mult)));
HXLINE( 106)		this->scroll->set_y((this->scroll->y + ((this->_scrollTarget->y - this->scroll->y) * mult)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PsychCamera_obj,updateFollowDelta,(void))

Float PsychCamera_obj::set_followLerp(Float value){
            	HX_STACKFRAME(&_hx_pos_4c92cf3011f7042f_112_set_followLerp)
HXDLIN( 112)		return (this->followLerp = value);
            	}



::hx::ObjectPtr< PsychCamera_obj > PsychCamera_obj::__new( ::Dynamic X, ::Dynamic Y, ::Dynamic Width, ::Dynamic Height, ::Dynamic Zoom) {
	::hx::ObjectPtr< PsychCamera_obj > __this = new PsychCamera_obj();
	__this->__construct(X,Y,Width,Height,Zoom);
	return __this;
}

::hx::ObjectPtr< PsychCamera_obj > PsychCamera_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic X, ::Dynamic Y, ::Dynamic Width, ::Dynamic Height, ::Dynamic Zoom) {
	PsychCamera_obj *__this = (PsychCamera_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PsychCamera_obj), true, "backend.PsychCamera"));
	*(void **)__this = PsychCamera_obj::_hx_vtable;
	__this->__construct(X,Y,Width,Height,Zoom);
	return __this;
}

PsychCamera_obj::PsychCamera_obj()
{
}

::hx::Val PsychCamera_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"set_followLerp") ) { return ::hx::Val( set_followLerp_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"updateFollowDelta") ) { return ::hx::Val( updateFollowDelta_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *PsychCamera_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *PsychCamera_obj_sStaticStorageInfo = 0;
#endif

static ::String PsychCamera_obj_sMemberFields[] = {
	HX_("update",09,86,05,87),
	HX_("updateFollowDelta",3e,99,0d,43),
	HX_("set_followLerp",45,4d,99,6f),
	::String(null()) };

::hx::Class PsychCamera_obj::__mClass;

void PsychCamera_obj::__register()
{
	PsychCamera_obj _hx_dummy;
	PsychCamera_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.PsychCamera",c6,56,0c,94);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PsychCamera_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PsychCamera_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PsychCamera_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PsychCamera_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace backend
