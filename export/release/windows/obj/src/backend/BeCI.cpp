// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_backend_BeCI
#include <backend/BeCI.h>
#endif
#ifndef INCLUDED_backend_MusicBeatState
#include <backend/MusicBeatState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_8405ba685bccc27c_5_round,"backend.BeCI","round",0x855a3b83,"backend.BeCI.round","backend/BeCI.hx",5,0x7d93a6da)
HX_LOCAL_STACK_FRAME(_hx_pos_8405ba685bccc27c_9_bpm,"backend.BeCI","bpm",0x90a85ad4,"backend.BeCI.bpm","backend/BeCI.hx",9,0x7d93a6da)
namespace backend{

void BeCI_obj::__construct() { }

Dynamic BeCI_obj::__CreateEmpty() { return new BeCI_obj; }

void *BeCI_obj::_hx_vtable = 0;

Dynamic BeCI_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BeCI_obj > _hx_result = new BeCI_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BeCI_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7bce9e5d;
}

Float BeCI_obj::round(Float beats){
            	HX_STACKFRAME(&_hx_pos_8405ba685bccc27c_5_round)
HXDLIN(   5)		return ((( (Float)(60) ) / ( (Float)(::states::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) )) * beats);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BeCI_obj,round,return )

Float BeCI_obj::bpm(Float beats,int bpm){
            	HX_STACKFRAME(&_hx_pos_8405ba685bccc27c_9_bpm)
HXDLIN(   9)		return ((( (Float)(60) ) / ( (Float)(bpm) )) * beats);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BeCI_obj,bpm,return )


BeCI_obj::BeCI_obj()
{
}

bool BeCI_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bpm") ) { outValue = bpm_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"round") ) { outValue = round_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *BeCI_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *BeCI_obj_sStaticStorageInfo = 0;
#endif

::hx::Class BeCI_obj::__mClass;

static ::String BeCI_obj_sStaticFields[] = {
	HX_("round",4e,f8,65,ed),
	HX_("bpm",df,be,4a,00),
	::String(null())
};

void BeCI_obj::__register()
{
	BeCI_obj _hx_dummy;
	BeCI_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.BeCI",e3,9d,6d,9a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BeCI_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BeCI_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< BeCI_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BeCI_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BeCI_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace backend
