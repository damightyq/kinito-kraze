// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_Paths
#include <backend/Paths.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIDropDownItem
#include <backend/ui/PsychUIDropDownItem.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIDropDownMenu
#include <backend/ui/PsychUIDropDownMenu.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIEventHandler
#include <backend/ui/PsychUIEventHandler.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIInputText
#include <backend/ui/PsychUIInputText.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_228a83075cfaa6af_38_new,"backend.ui.PsychUIDropDownMenu","new",0xe30997b1,"backend.ui.PsychUIDropDownMenu.new","backend/ui/PsychUIDropDownMenu.hx",38,0x0f4dd77f)
HX_DEFINE_STACK_FRAME(_hx_pos_228a83075cfaa6af_45_new,"backend.ui.PsychUIDropDownMenu","new",0xe30997b1,"backend.ui.PsychUIDropDownMenu.new","backend/ui/PsychUIDropDownMenu.hx",45,0x0f4dd77f)
HX_DEFINE_STACK_FRAME(_hx_pos_228a83075cfaa6af_5_new,"backend.ui.PsychUIDropDownMenu","new",0xe30997b1,"backend.ui.PsychUIDropDownMenu.new","backend/ui/PsychUIDropDownMenu.hx",5,0x0f4dd77f)
static const int _hx_array_data_713deb3f_5[] = {
	(int)0,
};
static const int _hx_array_data_713deb3f_6[] = {
	(int)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_228a83075cfaa6af_58_set_selectedIndex,"backend.ui.PsychUIDropDownMenu","set_selectedIndex",0xf075ed2b,"backend.ui.PsychUIDropDownMenu.set_selectedIndex","backend/ui/PsychUIDropDownMenu.hx",58,0x0f4dd77f)
HX_LOCAL_STACK_FRAME(_hx_pos_228a83075cfaa6af_68_set_selectedLabel,"backend.ui.PsychUIDropDownMenu","set_selectedLabel",0xa210600d,"backend.ui.PsychUIDropDownMenu.set_selectedLabel","backend/ui/PsychUIDropDownMenu.hx",68,0x0f4dd77f)
HX_LOCAL_STACK_FRAME(_hx_pos_228a83075cfaa6af_88_update,"backend.ui.PsychUIDropDownMenu","update",0x42706758,"backend.ui.PsychUIDropDownMenu.update","backend/ui/PsychUIDropDownMenu.hx",88,0x0f4dd77f)
HX_LOCAL_STACK_FRAME(_hx_pos_228a83075cfaa6af_119_showDropDownClickFix,"backend.ui.PsychUIDropDownMenu","showDropDownClickFix",0x7958786a,"backend.ui.PsychUIDropDownMenu.showDropDownClickFix","backend/ui/PsychUIDropDownMenu.hx",119,0x0f4dd77f)
HX_LOCAL_STACK_FRAME(_hx_pos_228a83075cfaa6af_128_showDropDown,"backend.ui.PsychUIDropDownMenu","showDropDown",0x6cff3cdd,"backend.ui.PsychUIDropDownMenu.showDropDown","backend/ui/PsychUIDropDownMenu.hx",128,0x0f4dd77f)
HX_LOCAL_STACK_FRAME(_hx_pos_228a83075cfaa6af_181_clickedOn,"backend.ui.PsychUIDropDownMenu","clickedOn",0xe7448db7,"backend.ui.PsychUIDropDownMenu.clickedOn","backend/ui/PsychUIDropDownMenu.hx",181,0x0f4dd77f)
HX_LOCAL_STACK_FRAME(_hx_pos_228a83075cfaa6af_192_addOption,"backend.ui.PsychUIDropDownMenu","addOption",0x93aea287,"backend.ui.PsychUIDropDownMenu.addOption","backend/ui/PsychUIDropDownMenu.hx",192,0x0f4dd77f)
HX_LOCAL_STACK_FRAME(_hx_pos_228a83075cfaa6af_196_addOption,"backend.ui.PsychUIDropDownMenu","addOption",0x93aea287,"backend.ui.PsychUIDropDownMenu.addOption","backend/ui/PsychUIDropDownMenu.hx",196,0x0f4dd77f)
HX_LOCAL_STACK_FRAME(_hx_pos_228a83075cfaa6af_189_addOption,"backend.ui.PsychUIDropDownMenu","addOption",0x93aea287,"backend.ui.PsychUIDropDownMenu.addOption","backend/ui/PsychUIDropDownMenu.hx",189,0x0f4dd77f)
HX_LOCAL_STACK_FRAME(_hx_pos_228a83075cfaa6af_203_set_list,"backend.ui.PsychUIDropDownMenu","set_list",0x0aac446a,"backend.ui.PsychUIDropDownMenu.set_list","backend/ui/PsychUIDropDownMenu.hx",203,0x0f4dd77f)
HX_LOCAL_STACK_FRAME(_hx_pos_228a83075cfaa6af_7_boot,"backend.ui.PsychUIDropDownMenu","boot",0xbd7423c1,"backend.ui.PsychUIDropDownMenu.boot","backend/ui/PsychUIDropDownMenu.hx",7,0x0f4dd77f)
namespace backend{
namespace ui{

void PsychUIDropDownMenu_obj::__construct(Float x,Float y,::Array< ::String > list, ::Dynamic callback, ::Dynamic __o_width){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::backend::ui::PsychUIDropDownMenu,_gthis) HXARGC(2)
            		void _hx_run(::String old,::String cur){
            			HX_GC_STACKFRAME(&_hx_pos_228a83075cfaa6af_38_new)
HXLINE(  38)			if ((old != cur)) {
HXLINE(  40)				::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN(  40)				{
HXLINE(  40)					int _g1 = 0;
HXDLIN(  40)					::Array< ::String > _g2 = _gthis->list;
HXDLIN(  40)					while((_g1 < _g2->length)){
HXLINE(  40)						::String v = _g2->__get(_g1);
HXDLIN(  40)						_g1 = (_g1 + 1);
HXDLIN(  40)						if (::StringTools_obj::startsWith(v,cur)) {
HXLINE(  40)							_g->push(v);
            						}
            					}
            				}
HXDLIN(  40)				_gthis->_curFilter = _g;
HXLINE(  41)				_gthis->showDropDown(true,0,_gthis->_curFilter);
            			}
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::backend::ui::PsychUIDropDownMenu,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_228a83075cfaa6af_45_new)
HXLINE(  46)			_gthis->showDropDownClickFix();
HXLINE(  47)			_gthis->showDropDown(false,null(),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		 ::Dynamic width = __o_width;
            		if (::hx::IsNull(__o_width)) width = 100;
            	HX_GC_STACKFRAME(&_hx_pos_228a83075cfaa6af_5_new)
HXLINE( 179)		this->broadcastDropDownEvent = true;
HXLINE(  86)		this->curScroll = 0;
HXLINE(  85)		this->_items = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  17)		this->_itemWidth = ((Float)0);
HXLINE(  14)		this->selectedLabel = null();
HXLINE(  13)		this->selectedIndex = -1;
HXLINE(   9)		this->list = ::Array_obj< ::String >::__new(0);
HXLINE(  19)		 ::backend::ui::PsychUIDropDownMenu _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  20)		super::__construct(x,y,null(),null(),null());
HXLINE(  21)		if (::hx::IsNull( list )) {
HXLINE(  21)			list = ::Array_obj< ::String >::__new(0);
            		}
HXLINE(  23)		this->_itemWidth = (( (Float)(width) ) - ( (Float)(2) ));
HXLINE(  24)		this->setGraphicSize(width,20);
HXLINE(  25)		this->updateHitbox();
HXLINE(  26)		 ::flixel::text::FlxText fh = this->textObj;
HXDLIN(  26)		fh->set_y((fh->y + 2));
HXLINE(  28)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->behindText->get_width() + 1),0,null());
HXDLIN(  28)		this->button = _hx_tmp->loadGraphic(::backend::Paths_obj::image(HX_("psych-ui/dropdown_button",b7,65,88,22),HX_("embed",d9,8d,cf,6f),null()),true,20,20,null(),null());
HXLINE(  29)		this->button->animation->add(HX_("normal",27,72,69,30),::Array_obj< int >::fromData( _hx_array_data_713deb3f_5,1),null(),false,null(),null());
HXLINE(  30)		this->button->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::fromData( _hx_array_data_713deb3f_6,1),null(),false,null(),null());
HXLINE(  31)		this->button->animation->play(HX_("normal",27,72,69,30),true,null(),null());
HXLINE(  32)		this->add(this->button);
HXLINE(  34)		this->onSelect = callback;
HXLINE(  36)		this->onChange =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE(  44)		this->unfocus =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE(  50)		{
HXLINE(  50)			int _g = 0;
HXDLIN(  50)			while((_g < list->length)){
HXLINE(  50)				::String option = list->__get(_g);
HXDLIN(  50)				_g = (_g + 1);
HXLINE(  51)				this->addOption(option);
            			}
            		}
HXLINE(  53)		this->set_selectedIndex(0);
HXLINE(  54)		this->showDropDown(false,null(),null());
            	}

Dynamic PsychUIDropDownMenu_obj::__CreateEmpty() { return new PsychUIDropDownMenu_obj; }

void *PsychUIDropDownMenu_obj::_hx_vtable = 0;

Dynamic PsychUIDropDownMenu_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PsychUIDropDownMenu_obj > _hx_result = new PsychUIDropDownMenu_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool PsychUIDropDownMenu_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x288ce903) {
			if (inClassId<=(int)0x16c0afdf) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x16c0afdf;
			} else {
				return inClassId==(int)0x288ce903;
			}
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		if (inClassId<=(int)0x7dab0655) {
			return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
		} else {
			return inClassId==(int)0x7fb5dc94;
		}
	}
}

int PsychUIDropDownMenu_obj::set_selectedIndex(int v){
            	HX_STACKFRAME(&_hx_pos_228a83075cfaa6af_58_set_selectedIndex)
HXLINE(  59)		this->selectedIndex = v;
HXLINE(  60)		bool _hx_tmp;
HXDLIN(  60)		if ((this->selectedIndex >= 0)) {
HXLINE(  60)			_hx_tmp = (this->selectedIndex >= this->list->length);
            		}
            		else {
HXLINE(  60)			_hx_tmp = true;
            		}
HXDLIN(  60)		if (_hx_tmp) {
HXLINE(  60)			this->selectedIndex = -1;
            		}
HXLINE(  62)		this->selectedLabel = this->list->__get(this->selectedIndex);
HXLINE(  63)		::String _hx_tmp1;
HXDLIN(  63)		if (::hx::IsNotNull( this->selectedLabel )) {
HXLINE(  63)			_hx_tmp1 = this->selectedLabel;
            		}
            		else {
HXLINE(  63)			_hx_tmp1 = HX_("",00,00,00,00);
            		}
HXDLIN(  63)		this->set_text(_hx_tmp1);
HXLINE(  64)		return this->selectedIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PsychUIDropDownMenu_obj,set_selectedIndex,return )

::String PsychUIDropDownMenu_obj::set_selectedLabel(::String v){
            	HX_STACKFRAME(&_hx_pos_228a83075cfaa6af_68_set_selectedLabel)
HXLINE(  69)		int id = this->list->indexOf(v,null());
HXLINE(  70)		if ((id >= 0)) {
HXLINE(  72)			this->selectedIndex = id;
HXLINE(  73)			this->selectedLabel = v;
HXLINE(  74)			this->set_text(this->selectedLabel);
            		}
            		else {
HXLINE(  78)			this->selectedIndex = -1;
HXLINE(  79)			this->selectedLabel = null();
HXLINE(  80)			this->set_text(HX_("",00,00,00,00));
            		}
HXLINE(  82)		return this->selectedLabel;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PsychUIDropDownMenu_obj,set_selectedLabel,return )

void PsychUIDropDownMenu_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_228a83075cfaa6af_88_update)
HXLINE(  89)		 ::backend::ui::PsychUIInputText lastFocus = ::backend::ui::PsychUIInputText_obj::focusOn;
HXLINE(  90)		this->super::update(elapsed);
HXLINE(  91)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE(  93)			 ::flixel::input::mouse::FlxMouse _hx_tmp = ::flixel::FlxG_obj::mouse;
HXDLIN(  93)			 ::flixel::FlxSprite _hx_tmp1 = this->button;
HXDLIN(  93)			if (_hx_tmp->overlaps(_hx_tmp1,this->get_camera())) {
HXLINE(  95)				this->button->animation->play(HX_("pressed",a2,d2,e6,39),true,null(),null());
HXLINE(  96)				if (::hx::IsInstanceNotEq( lastFocus,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(  97)					::backend::ui::PsychUIInputText_obj::set_focusOn(::hx::ObjectPtr<OBJ_>(this));
            				}
            				else {
HXLINE(  98)					if (::hx::IsInstanceEq( ::backend::ui::PsychUIInputText_obj::focusOn,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(  99)						::backend::ui::PsychUIInputText_obj::set_focusOn(null());
            					}
            				}
            			}
            		}
            		else {
HXLINE( 102)			bool _hx_tmp2;
HXDLIN( 102)			bool _hx_tmp3;
HXDLIN( 102)			 ::flixel::input::mouse::FlxMouseButton _this = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN( 102)			bool _hx_tmp4;
HXDLIN( 102)			if ((_this->current != 0)) {
HXLINE( 102)				_hx_tmp4 = (_this->current == -1);
            			}
            			else {
HXLINE( 102)				_hx_tmp4 = true;
            			}
HXDLIN( 102)			if (_hx_tmp4) {
HXLINE( 102)				_hx_tmp3 = ::hx::IsNotNull( this->button->animation->_curAnim );
            			}
            			else {
HXLINE( 102)				_hx_tmp3 = false;
            			}
HXDLIN( 102)			if (_hx_tmp3) {
HXLINE( 102)				_hx_tmp2 = (this->button->animation->_curAnim->name != HX_("normal",27,72,69,30));
            			}
            			else {
HXLINE( 102)				_hx_tmp2 = false;
            			}
HXDLIN( 102)			if (_hx_tmp2) {
HXLINE( 102)				this->button->animation->play(HX_("normal",27,72,69,30),true,null(),null());
            			}
            		}
HXLINE( 104)		if (::hx::IsInstanceNotEq( lastFocus,::backend::ui::PsychUIInputText_obj::focusOn )) {
HXLINE( 106)			this->showDropDown(::hx::IsInstanceEq( ::backend::ui::PsychUIInputText_obj::focusOn,::hx::ObjectPtr<OBJ_>(this) ),null(),null());
            		}
            		else {
HXLINE( 108)			if (::hx::IsInstanceEq( ::backend::ui::PsychUIInputText_obj::focusOn,::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 110)				int wheel = ::flixel::FlxG_obj::mouse->wheel;
HXLINE( 111)				 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 111)				if (_this1->keyManager->checkStatusUnsafe(38,_this1->status)) {
HXLINE( 111)					wheel = (wheel + 1);
            				}
HXLINE( 112)				 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 112)				if (_this2->keyManager->checkStatusUnsafe(40,_this2->status)) {
HXLINE( 112)					wheel = (wheel - 1);
            				}
HXLINE( 113)				if ((wheel != 0)) {
HXLINE( 113)					this->showDropDown(true,(this->curScroll - wheel),this->_curFilter);
            				}
            			}
            		}
            	}


void PsychUIDropDownMenu_obj::showDropDownClickFix(){
            	HX_STACKFRAME(&_hx_pos_228a83075cfaa6af_119_showDropDownClickFix)
HXDLIN( 119)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE( 121)			int _g = 0;
HXDLIN( 121)			::Array< ::Dynamic> _g1 = this->_items;
HXDLIN( 121)			while((_g < _g1->length)){
HXLINE( 121)				 ::backend::ui::PsychUIDropDownItem item = _g1->__get(_g).StaticCast<  ::backend::ui::PsychUIDropDownItem >();
HXDLIN( 121)				_g = (_g + 1);
HXLINE( 122)				bool _hx_tmp;
HXDLIN( 122)				bool _hx_tmp1;
HXDLIN( 122)				if (::hx::IsNotNull( item )) {
HXLINE( 122)					_hx_tmp1 = item->active;
            				}
            				else {
HXLINE( 122)					_hx_tmp1 = false;
            				}
HXDLIN( 122)				if (_hx_tmp1) {
HXLINE( 122)					_hx_tmp = item->visible;
            				}
            				else {
HXLINE( 122)					_hx_tmp = false;
            				}
HXDLIN( 122)				if (_hx_tmp) {
HXLINE( 123)					item->update(( (Float)(0) ));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PsychUIDropDownMenu_obj,showDropDownClickFix,(void))

void PsychUIDropDownMenu_obj::showDropDown(::hx::Null< bool >  __o_vis,::hx::Null< int >  __o_scroll,::Array< ::String > onlyAllowed){
            		bool vis = __o_vis.Default(true);
            		int scroll = __o_scroll.Default(0);
            	HX_STACKFRAME(&_hx_pos_228a83075cfaa6af_128_showDropDown)
HXLINE( 129)		if (!(vis)) {
HXLINE( 131)			this->set_text(this->selectedLabel);
HXLINE( 132)			this->_curFilter = null();
            		}
HXLINE( 135)		Float _hx_tmp;
HXDLIN( 135)		if (::hx::IsNotNull( onlyAllowed )) {
HXLINE( 135)			_hx_tmp = ( (Float)((onlyAllowed->length - 1)) );
            		}
            		else {
HXLINE( 135)			_hx_tmp = ( (Float)((this->list->length - 1)) );
            		}
HXDLIN( 135)		this->curScroll = ::Std_obj::_hx_int(::Math_obj::max(( (Float)(0) ),::Math_obj::min(_hx_tmp,( (Float)(scroll) ))));
HXLINE( 136)		if (vis) {
HXLINE( 138)			int n = 0;
HXLINE( 139)			{
HXLINE( 139)				int _g = 0;
HXDLIN( 139)				::Array< ::Dynamic> _g1 = this->_items;
HXDLIN( 139)				while((_g < _g1->length)){
HXLINE( 139)					 ::backend::ui::PsychUIDropDownItem item = _g1->__get(_g).StaticCast<  ::backend::ui::PsychUIDropDownItem >();
HXDLIN( 139)					_g = (_g + 1);
HXLINE( 141)					if (::hx::IsNotNull( onlyAllowed )) {
HXLINE( 143)						if (onlyAllowed->contains(item->label)) {
HXLINE( 145)							item->set_active(item->set_visible((n >= this->curScroll)));
HXLINE( 146)							n = (n + 1);
            						}
            						else {
HXLINE( 148)							item->set_active(item->set_visible(false));
            						}
            					}
            					else {
HXLINE( 152)						item->set_active(item->set_visible((n >= this->curScroll)));
HXLINE( 153)						n = (n + 1);
            					}
            				}
            			}
HXLINE( 157)			Float txtY = this->behindText->y;
HXDLIN( 157)			Float txtY1 = ((txtY + this->behindText->get_height()) + 1);
HXLINE( 158)			{
HXLINE( 158)				int _g_current = 0;
HXDLIN( 158)				::Array< ::Dynamic> _g_array = this->_items;
HXDLIN( 158)				while((_g_current < _g_array->length)){
HXLINE( 158)					 ::backend::ui::PsychUIDropDownItem _g_value = _g_array->__get(_g_current).StaticCast<  ::backend::ui::PsychUIDropDownItem >();
HXDLIN( 158)					_g_current = (_g_current + 1);
HXDLIN( 158)					int _g_key = (_g_current - 1);
HXDLIN( 158)					int num = _g_key;
HXDLIN( 158)					 ::backend::ui::PsychUIDropDownItem item1 = _g_value;
HXLINE( 159)					{
HXLINE( 160)						if (!(item1->visible)) {
HXLINE( 160)							continue;
            						}
HXLINE( 161)						item1->set_x(this->behindText->x);
HXLINE( 162)						item1->set_y(txtY1);
HXLINE( 163)						txtY1 = (txtY1 + item1->get_height());
HXLINE( 164)						item1->forceNextUpdate = true;
            					}
            				}
            			}
HXLINE( 166)			this->bg->scale->set_y(((txtY1 - this->behindText->y) + 2));
HXLINE( 167)			this->bg->updateHitbox();
            		}
            		else {
HXLINE( 171)			{
HXLINE( 171)				int _g2 = 0;
HXDLIN( 171)				::Array< ::Dynamic> _g3 = this->_items;
HXDLIN( 171)				while((_g2 < _g3->length)){
HXLINE( 171)					 ::backend::ui::PsychUIDropDownItem item2 = _g3->__get(_g2).StaticCast<  ::backend::ui::PsychUIDropDownItem >();
HXDLIN( 171)					_g2 = (_g2 + 1);
HXLINE( 172)					item2->set_active(item2->set_visible(false));
            				}
            			}
HXLINE( 174)			this->bg->scale->set_y(( (Float)(20) ));
HXLINE( 175)			this->bg->updateHitbox();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PsychUIDropDownMenu_obj,showDropDown,(void))

void PsychUIDropDownMenu_obj::clickedOn(int num,::String label){
            	HX_STACKFRAME(&_hx_pos_228a83075cfaa6af_181_clickedOn)
HXLINE( 182)		this->set_selectedIndex(num);
HXLINE( 183)		this->showDropDown(false,null(),null());
HXLINE( 184)		if (::hx::IsNotNull( this->onSelect )) {
HXLINE( 184)			this->onSelect(num,label);
            		}
HXLINE( 185)		if (this->broadcastDropDownEvent) {
HXLINE( 185)			::backend::ui::PsychUIEventHandler_obj::event(::backend::ui::PsychUIDropDownMenu_obj::CLICK_EVENT,::hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PsychUIDropDownMenu_obj,clickedOn,(void))

void PsychUIDropDownMenu_obj::addOption(::String option){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::backend::ui::PsychUIDropDownMenu,_gthis) HXARGC(0)
            		 ::flixel::FlxSprite _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_228a83075cfaa6af_192_addOption)
HXLINE( 192)			return  ::backend::ui::PsychUIDropDownItem_obj::__alloc( HX_CTX ,1,1,_gthis->_itemWidth);
            		}
            		HX_END_LOCAL_FUNC0(return)

            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_1, ::backend::ui::PsychUIDropDownMenu,_gthis,int,curID,::String,option) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_228a83075cfaa6af_196_addOption)
HXLINE( 196)			_gthis->clickedOn(curID,option);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_228a83075cfaa6af_189_addOption)
HXDLIN( 189)		 ::backend::ui::PsychUIDropDownMenu _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 190)		this->list->push(option);
HXLINE( 191)		int curID = (this->list->length - 1);
HXLINE( 192)		 ::backend::ui::PsychUIDropDownItem item = ( ( ::backend::ui::PsychUIDropDownItem)(this->group->recycle(::hx::ClassOf< ::backend::ui::PsychUIDropDownItem >(), ::Dynamic(new _hx_Closure_0(_gthis)),true,true).StaticCast<  ::flixel::FlxSprite >()) );
HXLINE( 193)		item->set_cameras(this->get_cameras());
HXLINE( 194)		item->set_label(option);
HXLINE( 195)		item->set_visible(item->set_active(false));
HXLINE( 196)		item->onClick =  ::Dynamic(new _hx_Closure_1(_gthis,curID,option));
HXLINE( 197)		item->forceNextUpdate = true;
HXLINE( 198)		this->_items->push(item);
HXLINE( 199)		this->insert(1,item);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PsychUIDropDownMenu_obj,addOption,(void))

::Array< ::String > PsychUIDropDownMenu_obj::set_list(::Array< ::String > v){
            	HX_STACKFRAME(&_hx_pos_228a83075cfaa6af_203_set_list)
HXLINE( 204)		::String selected = this->selectedLabel;
HXLINE( 205)		this->showDropDown(false,null(),null());
HXLINE( 207)		{
HXLINE( 207)			int _g = 0;
HXDLIN( 207)			::Array< ::Dynamic> _g1 = this->_items;
HXDLIN( 207)			while((_g < _g1->length)){
HXLINE( 207)				 ::backend::ui::PsychUIDropDownItem item = _g1->__get(_g).StaticCast<  ::backend::ui::PsychUIDropDownItem >();
HXDLIN( 207)				_g = (_g + 1);
HXLINE( 208)				item->kill();
            			}
            		}
HXLINE( 210)		this->_items = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 211)		this->list = ::Array_obj< ::String >::__new(0);
HXLINE( 212)		{
HXLINE( 212)			int _g2 = 0;
HXDLIN( 212)			while((_g2 < v->length)){
HXLINE( 212)				::String option = v->__get(_g2);
HXDLIN( 212)				_g2 = (_g2 + 1);
HXLINE( 213)				this->addOption(option);
            			}
            		}
HXLINE( 215)		if (::hx::IsNotNull( this->selectedLabel )) {
HXLINE( 215)			this->set_selectedLabel(selected);
            		}
HXLINE( 216)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PsychUIDropDownMenu_obj,set_list,return )

::String PsychUIDropDownMenu_obj::CLICK_EVENT;


::hx::ObjectPtr< PsychUIDropDownMenu_obj > PsychUIDropDownMenu_obj::__new(Float x,Float y,::Array< ::String > list, ::Dynamic callback, ::Dynamic __o_width) {
	::hx::ObjectPtr< PsychUIDropDownMenu_obj > __this = new PsychUIDropDownMenu_obj();
	__this->__construct(x,y,list,callback,__o_width);
	return __this;
}

::hx::ObjectPtr< PsychUIDropDownMenu_obj > PsychUIDropDownMenu_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y,::Array< ::String > list, ::Dynamic callback, ::Dynamic __o_width) {
	PsychUIDropDownMenu_obj *__this = (PsychUIDropDownMenu_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PsychUIDropDownMenu_obj), true, "backend.ui.PsychUIDropDownMenu"));
	*(void **)__this = PsychUIDropDownMenu_obj::_hx_vtable;
	backend::ui::PsychUIInputText_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(x,y,list,callback,__o_width);
	return __this;
}

PsychUIDropDownMenu_obj::PsychUIDropDownMenu_obj()
{
}

void PsychUIDropDownMenu_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PsychUIDropDownMenu);
	HX_MARK_MEMBER_NAME(list,"list");
	HX_MARK_MEMBER_NAME(button,"button");
	HX_MARK_MEMBER_NAME(onSelect,"onSelect");
	HX_MARK_MEMBER_NAME(selectedIndex,"selectedIndex");
	HX_MARK_MEMBER_NAME(selectedLabel,"selectedLabel");
	HX_MARK_MEMBER_NAME(_curFilter,"_curFilter");
	HX_MARK_MEMBER_NAME(_itemWidth,"_itemWidth");
	HX_MARK_MEMBER_NAME(_items,"_items");
	HX_MARK_MEMBER_NAME(curScroll,"curScroll");
	HX_MARK_MEMBER_NAME(broadcastDropDownEvent,"broadcastDropDownEvent");
	 ::backend::ui::PsychUIInputText_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PsychUIDropDownMenu_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(list,"list");
	HX_VISIT_MEMBER_NAME(button,"button");
	HX_VISIT_MEMBER_NAME(onSelect,"onSelect");
	HX_VISIT_MEMBER_NAME(selectedIndex,"selectedIndex");
	HX_VISIT_MEMBER_NAME(selectedLabel,"selectedLabel");
	HX_VISIT_MEMBER_NAME(_curFilter,"_curFilter");
	HX_VISIT_MEMBER_NAME(_itemWidth,"_itemWidth");
	HX_VISIT_MEMBER_NAME(_items,"_items");
	HX_VISIT_MEMBER_NAME(curScroll,"curScroll");
	HX_VISIT_MEMBER_NAME(broadcastDropDownEvent,"broadcastDropDownEvent");
	 ::backend::ui::PsychUIInputText_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PsychUIDropDownMenu_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { return ::hx::Val( list ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"button") ) { return ::hx::Val( button ); }
		if (HX_FIELD_EQ(inName,"_items") ) { return ::hx::Val( _items ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onSelect") ) { return ::hx::Val( onSelect ); }
		if (HX_FIELD_EQ(inName,"set_list") ) { return ::hx::Val( set_list_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"curScroll") ) { return ::hx::Val( curScroll ); }
		if (HX_FIELD_EQ(inName,"clickedOn") ) { return ::hx::Val( clickedOn_dyn() ); }
		if (HX_FIELD_EQ(inName,"addOption") ) { return ::hx::Val( addOption_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_curFilter") ) { return ::hx::Val( _curFilter ); }
		if (HX_FIELD_EQ(inName,"_itemWidth") ) { return ::hx::Val( _itemWidth ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"showDropDown") ) { return ::hx::Val( showDropDown_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectedIndex") ) { return ::hx::Val( selectedIndex ); }
		if (HX_FIELD_EQ(inName,"selectedLabel") ) { return ::hx::Val( selectedLabel ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"set_selectedIndex") ) { return ::hx::Val( set_selectedIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_selectedLabel") ) { return ::hx::Val( set_selectedLabel_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"showDropDownClickFix") ) { return ::hx::Val( showDropDownClickFix_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"broadcastDropDownEvent") ) { return ::hx::Val( broadcastDropDownEvent ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PsychUIDropDownMenu_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"CLICK_EVENT") ) { outValue = ( CLICK_EVENT ); return true; }
	}
	return false;
}

::hx::Val PsychUIDropDownMenu_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_list(inValue.Cast< ::Array< ::String > >()) );list=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"button") ) { button=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_items") ) { _items=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onSelect") ) { onSelect=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"curScroll") ) { curScroll=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_curFilter") ) { _curFilter=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_itemWidth") ) { _itemWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectedIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selectedIndex(inValue.Cast< int >()) );selectedIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectedLabel") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selectedLabel(inValue.Cast< ::String >()) );selectedLabel=inValue.Cast< ::String >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"broadcastDropDownEvent") ) { broadcastDropDownEvent=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PsychUIDropDownMenu_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"CLICK_EVENT") ) { CLICK_EVENT=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void PsychUIDropDownMenu_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("list",5e,1c,b3,47));
	outFields->push(HX_("button",f2,61,e0,d9));
	outFields->push(HX_("selectedIndex",b7,76,56,b4));
	outFields->push(HX_("selectedLabel",99,e9,f0,65));
	outFields->push(HX_("_curFilter",19,b5,64,51));
	outFields->push(HX_("_itemWidth",b4,97,f0,25));
	outFields->push(HX_("_items",41,f3,f3,bd));
	outFields->push(HX_("curScroll",ad,f1,f1,b7));
	outFields->push(HX_("broadcastDropDownEvent",68,66,1c,01));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PsychUIDropDownMenu_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PsychUIDropDownMenu_obj,list),HX_("list",5e,1c,b3,47)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PsychUIDropDownMenu_obj,button),HX_("button",f2,61,e0,d9)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PsychUIDropDownMenu_obj,onSelect),HX_("onSelect",7b,11,e0,49)},
	{::hx::fsInt,(int)offsetof(PsychUIDropDownMenu_obj,selectedIndex),HX_("selectedIndex",b7,76,56,b4)},
	{::hx::fsString,(int)offsetof(PsychUIDropDownMenu_obj,selectedLabel),HX_("selectedLabel",99,e9,f0,65)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PsychUIDropDownMenu_obj,_curFilter),HX_("_curFilter",19,b5,64,51)},
	{::hx::fsFloat,(int)offsetof(PsychUIDropDownMenu_obj,_itemWidth),HX_("_itemWidth",b4,97,f0,25)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PsychUIDropDownMenu_obj,_items),HX_("_items",41,f3,f3,bd)},
	{::hx::fsInt,(int)offsetof(PsychUIDropDownMenu_obj,curScroll),HX_("curScroll",ad,f1,f1,b7)},
	{::hx::fsBool,(int)offsetof(PsychUIDropDownMenu_obj,broadcastDropDownEvent),HX_("broadcastDropDownEvent",68,66,1c,01)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PsychUIDropDownMenu_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &PsychUIDropDownMenu_obj::CLICK_EVENT,HX_("CLICK_EVENT",63,89,c0,0d)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PsychUIDropDownMenu_obj_sMemberFields[] = {
	HX_("list",5e,1c,b3,47),
	HX_("button",f2,61,e0,d9),
	HX_("onSelect",7b,11,e0,49),
	HX_("selectedIndex",b7,76,56,b4),
	HX_("selectedLabel",99,e9,f0,65),
	HX_("_curFilter",19,b5,64,51),
	HX_("_itemWidth",b4,97,f0,25),
	HX_("set_selectedIndex",1a,5a,34,de),
	HX_("set_selectedLabel",fc,cc,ce,8f),
	HX_("_items",41,f3,f3,bd),
	HX_("curScroll",ad,f1,f1,b7),
	HX_("update",09,86,05,87),
	HX_("showDropDownClickFix",db,8a,5f,37),
	HX_("showDropDown",4e,f6,95,13),
	HX_("broadcastDropDownEvent",68,66,1c,01),
	HX_("clickedOn",a6,f3,34,37),
	HX_("addOption",76,08,9f,e3),
	HX_("set_list",5b,31,cb,75),
	::String(null()) };

static void PsychUIDropDownMenu_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PsychUIDropDownMenu_obj::CLICK_EVENT,"CLICK_EVENT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PsychUIDropDownMenu_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PsychUIDropDownMenu_obj::CLICK_EVENT,"CLICK_EVENT");
};

#endif

::hx::Class PsychUIDropDownMenu_obj::__mClass;

static ::String PsychUIDropDownMenu_obj_sStaticFields[] = {
	HX_("CLICK_EVENT",63,89,c0,0d),
	::String(null())
};

void PsychUIDropDownMenu_obj::__register()
{
	PsychUIDropDownMenu_obj _hx_dummy;
	PsychUIDropDownMenu_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.ui.PsychUIDropDownMenu",3f,eb,3d,71);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PsychUIDropDownMenu_obj::__GetStatic;
	__mClass->mSetStaticField = &PsychUIDropDownMenu_obj::__SetStatic;
	__mClass->mMarkFunc = PsychUIDropDownMenu_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PsychUIDropDownMenu_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PsychUIDropDownMenu_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PsychUIDropDownMenu_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PsychUIDropDownMenu_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PsychUIDropDownMenu_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PsychUIDropDownMenu_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PsychUIDropDownMenu_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_228a83075cfaa6af_7_boot)
HXDLIN(   7)		CLICK_EVENT = HX_("dropdown_click",5a,1a,71,4b);
            	}
}

} // end namespace backend
} // end namespace ui
