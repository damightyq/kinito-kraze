// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIEventHandler
#include <backend/ui/PsychUIEventHandler.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUISlider
#include <backend/ui/PsychUISlider.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_72b40ef24229f2a5_3_new,"backend.ui.PsychUISlider","new",0x7e70d6a2,"backend.ui.PsychUISlider.new","backend/ui/PsychUISlider.hx",3,0x7bb4c9ae)
HX_LOCAL_STACK_FRAME(_hx_pos_72b40ef24229f2a5_63_update,"backend.ui.PsychUISlider","update",0x1bf05507,"backend.ui.PsychUISlider.update","backend/ui/PsychUISlider.hx",63,0x7bb4c9ae)
HX_LOCAL_STACK_FRAME(_hx_pos_72b40ef24229f2a5_90__updatePositions,"backend.ui.PsychUISlider","_updatePositions",0x7f22bf60,"backend.ui.PsychUISlider._updatePositions","backend/ui/PsychUISlider.hx",90,0x7bb4c9ae)
HX_LOCAL_STACK_FRAME(_hx_pos_72b40ef24229f2a5_105__updateHandleX,"backend.ui.PsychUISlider","_updateHandleX",0x6c8501e6,"backend.ui.PsychUISlider._updateHandleX","backend/ui/PsychUISlider.hx",105,0x7bb4c9ae)
HX_LOCAL_STACK_FRAME(_hx_pos_72b40ef24229f2a5_108_set_decimals,"backend.ui.PsychUISlider","set_decimals",0x84c243bd,"backend.ui.PsychUISlider.set_decimals","backend/ui/PsychUISlider.hx",108,0x7bb4c9ae)
HX_LOCAL_STACK_FRAME(_hx_pos_72b40ef24229f2a5_119_set_min,"backend.ui.PsychUISlider","set_min",0xd253ba77,"backend.ui.PsychUISlider.set_min","backend/ui/PsychUISlider.hx",119,0x7bb4c9ae)
HX_LOCAL_STACK_FRAME(_hx_pos_72b40ef24229f2a5_128_set_max,"backend.ui.PsychUISlider","set_max",0xd253b389,"backend.ui.PsychUISlider.set_max","backend/ui/PsychUISlider.hx",128,0x7bb4c9ae)
HX_LOCAL_STACK_FRAME(_hx_pos_72b40ef24229f2a5_137_set_value,"backend.ui.PsychUISlider","set_value",0x03e0eb96,"backend.ui.PsychUISlider.set_value","backend/ui/PsychUISlider.hx",137,0x7bb4c9ae)
HX_LOCAL_STACK_FRAME(_hx_pos_72b40ef24229f2a5_145_set_label,"backend.ui.PsychUISlider","set_label",0x41d77a19,"backend.ui.PsychUISlider.set_label","backend/ui/PsychUISlider.hx",145,0x7bb4c9ae)
HX_LOCAL_STACK_FRAME(_hx_pos_72b40ef24229f2a5_151_get_label,"backend.ui.PsychUISlider","get_label",0x5e868e0d,"backend.ui.PsychUISlider.get_label","backend/ui/PsychUISlider.hx",151,0x7bb4c9ae)
HX_LOCAL_STACK_FRAME(_hx_pos_72b40ef24229f2a5_5_boot,"backend.ui.PsychUISlider","boot",0x1c63f7b0,"backend.ui.PsychUISlider.boot","backend/ui/PsychUISlider.hx",5,0x7bb4c9ae)
namespace backend{
namespace ui{

void PsychUISlider_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y, ::Dynamic callback,::hx::Null< Float >  __o_def,::hx::Null< Float >  __o_min,::hx::Null< Float >  __o_max,::hx::Null< Float >  __o_wid,::hx::Null< int >  __o_mainColor,::hx::Null< int >  __o_handleColor){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            		Float def = __o_def.Default(0);
            		Float min = __o_min.Default(-999);
            		Float max = __o_max.Default(999);
            		Float wid = __o_wid.Default(200);
            		int mainColor = __o_mainColor.Default(-1);
            		int handleColor = __o_handleColor.Default(-5592406);
            	HX_GC_STACKFRAME(&_hx_pos_72b40ef24229f2a5_3_new)
HXLINE(  61)		this->broadcastSliderEvent = true;
HXLINE(  60)		this->forceNextUpdate = false;
HXLINE(  59)		this->movingHandle = false;
HXLINE(  18)		this->decimals = 2;
HXLINE(  17)		this->max = ((Float)999);
HXLINE(  16)		this->min = ((Float)-999);
HXLINE(  14)		this->value = ((Float)0);
HXLINE(  21)		super::__construct(x,y,null());
HXLINE(  22)		this->onChange = callback;
HXLINE(  24)		this->bar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-1,null(),null());
HXLINE(  25)		{
HXLINE(  25)			 ::flixel::math::FlxBasePoint this1 = this->bar->scale;
HXDLIN(  25)			this1->set_x(wid);
HXDLIN(  25)			this1->set_y(( (Float)(5) ));
            		}
HXLINE(  26)		this->bar->updateHitbox();
HXLINE(  27)		this->bar->set_color(mainColor);
HXLINE(  28)		this->add(this->bar);
HXLINE(  30)		this->minText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,80,HX_("",00,00,00,00),8,null());
HXLINE(  31)		this->minText->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  32)		this->minText->set_color(mainColor);
HXLINE(  33)		this->add(this->minText);
HXLINE(  34)		this->maxText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,80,HX_("",00,00,00,00),8,null());
HXLINE(  35)		this->maxText->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  36)		this->maxText->set_color(mainColor);
HXLINE(  37)		this->add(this->maxText);
HXLINE(  38)		this->valueText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,80,HX_("",00,00,00,00),8,null());
HXLINE(  39)		this->valueText->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  40)		this->valueText->set_color(handleColor);
HXLINE(  41)		this->add(this->valueText);
HXLINE(  42)		this->labelText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,wid,HX_("",00,00,00,00),8,null());
HXLINE(  43)		this->labelText->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  44)		this->add(this->labelText);
HXLINE(  46)		this->handle =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-1,null(),null());
HXLINE(  47)		{
HXLINE(  47)			 ::flixel::math::FlxBasePoint this2 = this->handle->scale;
HXDLIN(  47)			this2->set_x(( (Float)(5) ));
HXDLIN(  47)			this2->set_y(( (Float)(15) ));
            		}
HXLINE(  48)		this->handle->updateHitbox();
HXLINE(  49)		this->handle->set_color(handleColor);
HXLINE(  50)		this->add(this->handle);
HXLINE(  52)		this->set_min(min);
HXLINE(  53)		this->set_max(max);
HXLINE(  54)		this->set_value(def);
HXLINE(  55)		this->_updatePositions();
HXLINE(  56)		this->forceNextUpdate = true;
            	}

Dynamic PsychUISlider_obj::__CreateEmpty() { return new PsychUISlider_obj; }

void *PsychUISlider_obj::_hx_vtable = 0;

Dynamic PsychUISlider_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PsychUISlider_obj > _hx_result = new PsychUISlider_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8]);
	return _hx_result;
}

bool PsychUISlider_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x288ce903) {
			if (inClassId<=(int)0x16a91bec) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x16a91bec;
			} else {
				return inClassId==(int)0x288ce903;
			}
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void PsychUISlider_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_72b40ef24229f2a5_63_update)
HXLINE(  64)		this->super::update(elapsed);
HXLINE(  66)		bool _hx_tmp;
HXDLIN(  66)		bool _hx_tmp1;
HXDLIN(  66)		 ::flixel::input::mouse::FlxMouse _this = ::flixel::FlxG_obj::mouse;
HXDLIN(  66)		bool _hx_tmp2;
HXDLIN(  66)		if ((_this->_prevX == _this->x)) {
HXLINE(  66)			_hx_tmp2 = (_this->_prevY != _this->y);
            		}
            		else {
HXLINE(  66)			_hx_tmp2 = true;
            		}
HXDLIN(  66)		if (!(_hx_tmp2)) {
HXLINE(  66)			_hx_tmp1 = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            		}
            		else {
HXLINE(  66)			_hx_tmp1 = true;
            		}
HXDLIN(  66)		if (!(_hx_tmp1)) {
HXLINE(  66)			_hx_tmp = this->forceNextUpdate;
            		}
            		else {
HXLINE(  66)			_hx_tmp = true;
            		}
HXDLIN(  66)		if (_hx_tmp) {
HXLINE(  68)			this->forceNextUpdate = false;
HXLINE(  69)			bool _hx_tmp3;
HXDLIN(  69)			if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE(  69)				 ::flixel::input::mouse::FlxMouse _hx_tmp4 = ::flixel::FlxG_obj::mouse;
HXDLIN(  69)				 ::flixel::FlxSprite _hx_tmp5 = this->bar;
HXDLIN(  69)				if (!(_hx_tmp4->overlaps(_hx_tmp5,this->get_camera()))) {
HXLINE(  69)					 ::flixel::input::mouse::FlxMouse _hx_tmp6 = ::flixel::FlxG_obj::mouse;
HXDLIN(  69)					 ::flixel::FlxSprite _hx_tmp7 = this->handle;
HXDLIN(  69)					_hx_tmp3 = _hx_tmp6->overlaps(_hx_tmp7,this->get_camera());
            				}
            				else {
HXLINE(  69)					_hx_tmp3 = true;
            				}
            			}
            			else {
HXLINE(  69)				_hx_tmp3 = false;
            			}
HXDLIN(  69)			if (_hx_tmp3) {
HXLINE(  70)				this->movingHandle = true;
            			}
HXLINE(  72)			if (this->movingHandle) {
HXLINE(  74)				 ::flixel::math::FlxBasePoint point = this->getScreenPosition(null(),this->get_camera());
HXLINE(  75)				Float lastValue = ::flixel::math::FlxMath_obj::roundDecimal(this->value,this->decimals);
HXLINE(  76)				Float _hx_tmp8 = this->min;
HXDLIN(  76)				Float _hx_tmp9 = this->max;
HXDLIN(  76)				 ::flixel::input::mouse::FlxMouse this1 = ::flixel::FlxG_obj::mouse;
HXDLIN(  76)				Float _hx_tmp10 = this1->getPositionInCameraView(this->get_camera(),null())->x;
HXDLIN(  76)				Float _hx_tmp11 = this->bar->x;
HXDLIN(  76)				Float _hx_tmp12 = this->bar->x;
HXDLIN(  76)				Float _hx_tmp13 = (_hx_tmp12 + this->bar->get_width());
HXDLIN(  76)				this->set_value(::Math_obj::max(_hx_tmp8,::Math_obj::min(_hx_tmp9,::flixel::math::FlxMath_obj::remapToRange(_hx_tmp10,_hx_tmp11,_hx_tmp13,this->min,this->max))));
HXLINE(  77)				bool _hx_tmp14;
HXDLIN(  77)				if (::hx::IsNotNull( this->onChange )) {
HXLINE(  77)					_hx_tmp14 = (lastValue != this->value);
            				}
            				else {
HXLINE(  77)					_hx_tmp14 = false;
            				}
HXDLIN(  77)				if (_hx_tmp14) {
HXLINE(  79)					 ::Dynamic _hx_tmp15 = this->onChange;
HXDLIN(  79)					_hx_tmp15(::flixel::math::FlxMath_obj::roundDecimal(this->value,this->decimals));
HXLINE(  80)					if (this->broadcastSliderEvent) {
HXLINE(  80)						::backend::ui::PsychUIEventHandler_obj::event(::backend::ui::PsychUISlider_obj::CHANGE_EVENT,::hx::ObjectPtr<OBJ_>(this));
            					}
            				}
            			}
            		}
HXLINE(  85)		 ::flixel::input::mouse::FlxMouseButton _this1 = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN(  85)		bool _hx_tmp16;
HXDLIN(  85)		if ((_this1->current != 0)) {
HXLINE(  85)			_hx_tmp16 = (_this1->current == -1);
            		}
            		else {
HXLINE(  85)			_hx_tmp16 = true;
            		}
HXDLIN(  85)		if (_hx_tmp16) {
HXLINE(  86)			this->movingHandle = false;
            		}
            	}


void PsychUISlider_obj::_updatePositions(){
            	HX_STACKFRAME(&_hx_pos_72b40ef24229f2a5_90__updatePositions)
HXLINE(  91)		 ::flixel::text::FlxText _hx_tmp = this->minText;
HXDLIN(  91)		Float _hx_tmp1 = this->bar->x;
HXDLIN(  91)		_hx_tmp->set_x((_hx_tmp1 - (this->minText->get_width() / ( (Float)(2) ))));
HXLINE(  92)		 ::flixel::text::FlxText _hx_tmp2 = this->maxText;
HXDLIN(  92)		Float _hx_tmp3 = this->bar->x;
HXDLIN(  92)		Float _hx_tmp4 = (_hx_tmp3 + this->bar->get_width());
HXDLIN(  92)		_hx_tmp2->set_x((_hx_tmp4 - (this->maxText->get_width() / ( (Float)(2) ))));
HXLINE(  93)		 ::flixel::text::FlxText _hx_tmp5 = this->valueText;
HXDLIN(  93)		Float _hx_tmp6 = this->bar->x;
HXDLIN(  93)		Float _hx_tmp7 = (_hx_tmp6 + (this->bar->get_width() / ( (Float)(2) )));
HXDLIN(  93)		_hx_tmp5->set_x((_hx_tmp7 - (this->valueText->get_width() / ( (Float)(2) ))));
HXLINE(  95)		 ::flixel::text::FlxText _hx_tmp8 = this->labelText;
HXDLIN(  95)		Float _hx_tmp9 = this->bar->x;
HXDLIN(  95)		Float _hx_tmp10 = (_hx_tmp9 + (this->bar->get_width() / ( (Float)(2) )));
HXDLIN(  95)		_hx_tmp8->set_x((_hx_tmp10 - (this->labelText->get_width() / ( (Float)(2) ))));
HXLINE(  96)		if ((this->get_label().length > 0)) {
HXLINE(  96)			this->bar->set_y((this->labelText->y + 24));
            		}
HXLINE(  98)		 ::flixel::text::FlxText _hx_tmp11 = this->minText;
HXDLIN(  98)		 ::flixel::text::FlxText _hx_tmp12 = this->maxText;
HXDLIN(  98)		_hx_tmp11->set_y(_hx_tmp12->set_y(this->valueText->set_y((this->bar->y + 12))));
HXLINE( 100)		this->_updateHandleX();
HXLINE( 101)		 ::flixel::FlxSprite _hx_tmp13 = this->handle;
HXDLIN( 101)		Float _hx_tmp14 = this->bar->y;
HXDLIN( 101)		Float _hx_tmp15 = (_hx_tmp14 + (this->bar->get_height() / ( (Float)(2) )));
HXDLIN( 101)		_hx_tmp13->set_y((_hx_tmp15 - (this->handle->get_height() / ( (Float)(2) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PsychUISlider_obj,_updatePositions,(void))

void PsychUISlider_obj::_updateHandleX(){
            	HX_STACKFRAME(&_hx_pos_72b40ef24229f2a5_105__updateHandleX)
HXDLIN( 105)		 ::flixel::FlxSprite _hx_tmp = this->handle;
HXDLIN( 105)		Float _hx_tmp1 = this->bar->x;
HXDLIN( 105)		Float _hx_tmp2 = (_hx_tmp1 - (this->handle->get_width() / ( (Float)(2) )));
HXDLIN( 105)		Float _hx_tmp3 = ::flixel::math::FlxMath_obj::roundDecimal(this->value,this->decimals);
HXDLIN( 105)		Float _hx_tmp4 = this->min;
HXDLIN( 105)		Float _hx_tmp5 = this->max;
HXDLIN( 105)		_hx_tmp->set_x((_hx_tmp2 + ::flixel::math::FlxMath_obj::remapToRange(_hx_tmp3,_hx_tmp4,_hx_tmp5,( (Float)(0) ),this->bar->get_width())));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PsychUISlider_obj,_updateHandleX,(void))

int PsychUISlider_obj::set_decimals(int v){
            	HX_STACKFRAME(&_hx_pos_72b40ef24229f2a5_108_set_decimals)
HXLINE( 109)		this->decimals = v;
HXLINE( 110)		 ::flixel::text::FlxText _hx_tmp = this->minText;
HXDLIN( 110)		_hx_tmp->set_text(::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal(this->min,this->decimals)));
HXLINE( 111)		 ::flixel::text::FlxText _hx_tmp1 = this->maxText;
HXDLIN( 111)		_hx_tmp1->set_text(::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal(this->max,this->decimals)));
HXLINE( 112)		 ::flixel::text::FlxText _hx_tmp2 = this->valueText;
HXDLIN( 112)		_hx_tmp2->set_text(::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal(this->value,this->decimals)));
HXLINE( 113)		if (::hx::IsNotNull( this->onChange )) {
HXLINE( 113)			 ::Dynamic _hx_tmp3 = this->onChange;
HXDLIN( 113)			_hx_tmp3(::flixel::math::FlxMath_obj::roundDecimal(this->value,this->decimals));
            		}
HXLINE( 114)		this->_updatePositions();
HXLINE( 115)		return this->decimals;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PsychUISlider_obj,set_decimals,return )

Float PsychUISlider_obj::set_min(Float v){
            	HX_STACKFRAME(&_hx_pos_72b40ef24229f2a5_119_set_min)
HXLINE( 120)		if ((v > this->max)) {
HXLINE( 120)			this->set_max(v);
            		}
HXLINE( 121)		this->min = v;
HXLINE( 122)		 ::flixel::text::FlxText _hx_tmp = this->minText;
HXDLIN( 122)		_hx_tmp->set_text(::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal(this->min,this->decimals)));
HXLINE( 123)		this->_updateHandleX();
HXLINE( 124)		return this->min;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PsychUISlider_obj,set_min,return )

Float PsychUISlider_obj::set_max(Float v){
            	HX_STACKFRAME(&_hx_pos_72b40ef24229f2a5_128_set_max)
HXLINE( 129)		if ((v < this->min)) {
HXLINE( 129)			this->set_min(v);
            		}
HXLINE( 130)		this->max = v;
HXLINE( 131)		 ::flixel::text::FlxText _hx_tmp = this->maxText;
HXDLIN( 131)		_hx_tmp->set_text(::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal(this->max,this->decimals)));
HXLINE( 132)		this->_updateHandleX();
HXLINE( 133)		return this->max;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PsychUISlider_obj,set_max,return )

Float PsychUISlider_obj::set_value(Float v){
            	HX_STACKFRAME(&_hx_pos_72b40ef24229f2a5_137_set_value)
HXLINE( 138)		this->value = ::Math_obj::max(this->min,::Math_obj::min(this->max,v));
HXLINE( 139)		 ::flixel::text::FlxText _hx_tmp = this->valueText;
HXDLIN( 139)		_hx_tmp->set_text(::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal(this->value,this->decimals)));
HXLINE( 140)		this->_updateHandleX();
HXLINE( 141)		return this->value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PsychUISlider_obj,set_value,return )

::String PsychUISlider_obj::set_label(::String v){
            	HX_STACKFRAME(&_hx_pos_72b40ef24229f2a5_145_set_label)
HXLINE( 146)		this->labelText->set_text(v);
HXLINE( 147)		this->_updatePositions();
HXLINE( 148)		return this->labelText->text;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PsychUISlider_obj,set_label,return )

::String PsychUISlider_obj::get_label(){
            	HX_STACKFRAME(&_hx_pos_72b40ef24229f2a5_151_get_label)
HXDLIN( 151)		return this->labelText->text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PsychUISlider_obj,get_label,return )

::String PsychUISlider_obj::CHANGE_EVENT;


::hx::ObjectPtr< PsychUISlider_obj > PsychUISlider_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y, ::Dynamic callback,::hx::Null< Float >  __o_def,::hx::Null< Float >  __o_min,::hx::Null< Float >  __o_max,::hx::Null< Float >  __o_wid,::hx::Null< int >  __o_mainColor,::hx::Null< int >  __o_handleColor) {
	::hx::ObjectPtr< PsychUISlider_obj > __this = new PsychUISlider_obj();
	__this->__construct(__o_x,__o_y,callback,__o_def,__o_min,__o_max,__o_wid,__o_mainColor,__o_handleColor);
	return __this;
}

::hx::ObjectPtr< PsychUISlider_obj > PsychUISlider_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y, ::Dynamic callback,::hx::Null< Float >  __o_def,::hx::Null< Float >  __o_min,::hx::Null< Float >  __o_max,::hx::Null< Float >  __o_wid,::hx::Null< int >  __o_mainColor,::hx::Null< int >  __o_handleColor) {
	PsychUISlider_obj *__this = (PsychUISlider_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PsychUISlider_obj), true, "backend.ui.PsychUISlider"));
	*(void **)__this = PsychUISlider_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,callback,__o_def,__o_min,__o_max,__o_wid,__o_mainColor,__o_handleColor);
	return __this;
}

PsychUISlider_obj::PsychUISlider_obj()
{
}

void PsychUISlider_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PsychUISlider);
	HX_MARK_MEMBER_NAME(bar,"bar");
	HX_MARK_MEMBER_NAME(minText,"minText");
	HX_MARK_MEMBER_NAME(maxText,"maxText");
	HX_MARK_MEMBER_NAME(valueText,"valueText");
	HX_MARK_MEMBER_NAME(handle,"handle");
	HX_MARK_MEMBER_NAME(labelText,"labelText");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(onChange,"onChange");
	HX_MARK_MEMBER_NAME(min,"min");
	HX_MARK_MEMBER_NAME(max,"max");
	HX_MARK_MEMBER_NAME(decimals,"decimals");
	HX_MARK_MEMBER_NAME(movingHandle,"movingHandle");
	HX_MARK_MEMBER_NAME(forceNextUpdate,"forceNextUpdate");
	HX_MARK_MEMBER_NAME(broadcastSliderEvent,"broadcastSliderEvent");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PsychUISlider_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bar,"bar");
	HX_VISIT_MEMBER_NAME(minText,"minText");
	HX_VISIT_MEMBER_NAME(maxText,"maxText");
	HX_VISIT_MEMBER_NAME(valueText,"valueText");
	HX_VISIT_MEMBER_NAME(handle,"handle");
	HX_VISIT_MEMBER_NAME(labelText,"labelText");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(onChange,"onChange");
	HX_VISIT_MEMBER_NAME(min,"min");
	HX_VISIT_MEMBER_NAME(max,"max");
	HX_VISIT_MEMBER_NAME(decimals,"decimals");
	HX_VISIT_MEMBER_NAME(movingHandle,"movingHandle");
	HX_VISIT_MEMBER_NAME(forceNextUpdate,"forceNextUpdate");
	HX_VISIT_MEMBER_NAME(broadcastSliderEvent,"broadcastSliderEvent");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PsychUISlider_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bar") ) { return ::hx::Val( bar ); }
		if (HX_FIELD_EQ(inName,"min") ) { return ::hx::Val( min ); }
		if (HX_FIELD_EQ(inName,"max") ) { return ::hx::Val( max ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"label") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_label() ); }
		if (HX_FIELD_EQ(inName,"value") ) { return ::hx::Val( value ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { return ::hx::Val( handle ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"minText") ) { return ::hx::Val( minText ); }
		if (HX_FIELD_EQ(inName,"maxText") ) { return ::hx::Val( maxText ); }
		if (HX_FIELD_EQ(inName,"set_min") ) { return ::hx::Val( set_min_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_max") ) { return ::hx::Val( set_max_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onChange") ) { return ::hx::Val( onChange ); }
		if (HX_FIELD_EQ(inName,"decimals") ) { return ::hx::Val( decimals ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"valueText") ) { return ::hx::Val( valueText ); }
		if (HX_FIELD_EQ(inName,"labelText") ) { return ::hx::Val( labelText ); }
		if (HX_FIELD_EQ(inName,"set_value") ) { return ::hx::Val( set_value_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_label") ) { return ::hx::Val( set_label_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_label") ) { return ::hx::Val( get_label_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"movingHandle") ) { return ::hx::Val( movingHandle ); }
		if (HX_FIELD_EQ(inName,"set_decimals") ) { return ::hx::Val( set_decimals_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_updateHandleX") ) { return ::hx::Val( _updateHandleX_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"forceNextUpdate") ) { return ::hx::Val( forceNextUpdate ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_updatePositions") ) { return ::hx::Val( _updatePositions_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"broadcastSliderEvent") ) { return ::hx::Val( broadcastSliderEvent ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PsychUISlider_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"CHANGE_EVENT") ) { outValue = ( CHANGE_EVENT ); return true; }
	}
	return false;
}

::hx::Val PsychUISlider_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bar") ) { bar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"min") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_min(inValue.Cast< Float >()) );min=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"max") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_max(inValue.Cast< Float >()) );max=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"label") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_label(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"value") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_value(inValue.Cast< Float >()) );value=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { handle=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"minText") ) { minText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxText") ) { maxText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onChange") ) { onChange=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"decimals") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_decimals(inValue.Cast< int >()) );decimals=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"valueText") ) { valueText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"labelText") ) { labelText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"movingHandle") ) { movingHandle=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"forceNextUpdate") ) { forceNextUpdate=inValue.Cast< bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"broadcastSliderEvent") ) { broadcastSliderEvent=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PsychUISlider_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"CHANGE_EVENT") ) { CHANGE_EVENT=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void PsychUISlider_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bar",d3,b1,4a,00));
	outFields->push(HX_("minText",5f,3b,03,3e));
	outFields->push(HX_("maxText",71,25,2a,cd));
	outFields->push(HX_("valueText",be,84,7e,99));
	outFields->push(HX_("handle",a8,83,fd,b7));
	outFields->push(HX_("label",f4,0d,af,6f));
	outFields->push(HX_("labelText",c1,10,52,5e));
	outFields->push(HX_("value",71,7f,b8,31));
	outFields->push(HX_("min",92,11,53,00));
	outFields->push(HX_("max",a4,0a,53,00));
	outFields->push(HX_("decimals",c2,4a,6a,12));
	outFields->push(HX_("movingHandle",d6,48,ab,41));
	outFields->push(HX_("forceNextUpdate",27,a1,d0,4c));
	outFields->push(HX_("broadcastSliderEvent",b8,dc,eb,23));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PsychUISlider_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PsychUISlider_obj,bar),HX_("bar",d3,b1,4a,00)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PsychUISlider_obj,minText),HX_("minText",5f,3b,03,3e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PsychUISlider_obj,maxText),HX_("maxText",71,25,2a,cd)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PsychUISlider_obj,valueText),HX_("valueText",be,84,7e,99)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PsychUISlider_obj,handle),HX_("handle",a8,83,fd,b7)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PsychUISlider_obj,labelText),HX_("labelText",c1,10,52,5e)},
	{::hx::fsFloat,(int)offsetof(PsychUISlider_obj,value),HX_("value",71,7f,b8,31)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PsychUISlider_obj,onChange),HX_("onChange",ef,87,1f,97)},
	{::hx::fsFloat,(int)offsetof(PsychUISlider_obj,min),HX_("min",92,11,53,00)},
	{::hx::fsFloat,(int)offsetof(PsychUISlider_obj,max),HX_("max",a4,0a,53,00)},
	{::hx::fsInt,(int)offsetof(PsychUISlider_obj,decimals),HX_("decimals",c2,4a,6a,12)},
	{::hx::fsBool,(int)offsetof(PsychUISlider_obj,movingHandle),HX_("movingHandle",d6,48,ab,41)},
	{::hx::fsBool,(int)offsetof(PsychUISlider_obj,forceNextUpdate),HX_("forceNextUpdate",27,a1,d0,4c)},
	{::hx::fsBool,(int)offsetof(PsychUISlider_obj,broadcastSliderEvent),HX_("broadcastSliderEvent",b8,dc,eb,23)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PsychUISlider_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &PsychUISlider_obj::CHANGE_EVENT,HX_("CHANGE_EVENT",ab,38,ff,8d)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PsychUISlider_obj_sMemberFields[] = {
	HX_("bar",d3,b1,4a,00),
	HX_("minText",5f,3b,03,3e),
	HX_("maxText",71,25,2a,cd),
	HX_("valueText",be,84,7e,99),
	HX_("handle",a8,83,fd,b7),
	HX_("labelText",c1,10,52,5e),
	HX_("value",71,7f,b8,31),
	HX_("onChange",ef,87,1f,97),
	HX_("min",92,11,53,00),
	HX_("max",a4,0a,53,00),
	HX_("decimals",c2,4a,6a,12),
	HX_("movingHandle",d6,48,ab,41),
	HX_("forceNextUpdate",27,a1,d0,4c),
	HX_("broadcastSliderEvent",b8,dc,eb,23),
	HX_("update",09,86,05,87),
	HX_("_updatePositions",e2,06,bc,0a),
	HX_("_updateHandleX",e8,04,96,4f),
	HX_("set_decimals",3f,22,7d,dc),
	HX_("set_min",35,6b,c9,19),
	HX_("set_max",47,64,c9,19),
	HX_("set_value",d4,c7,b2,58),
	HX_("set_label",57,56,a9,96),
	HX_("get_label",4b,6a,58,b3),
	::String(null()) };

static void PsychUISlider_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PsychUISlider_obj::CHANGE_EVENT,"CHANGE_EVENT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PsychUISlider_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PsychUISlider_obj::CHANGE_EVENT,"CHANGE_EVENT");
};

#endif

::hx::Class PsychUISlider_obj::__mClass;

static ::String PsychUISlider_obj_sStaticFields[] = {
	HX_("CHANGE_EVENT",ab,38,ff,8d),
	::String(null())
};

void PsychUISlider_obj::__register()
{
	PsychUISlider_obj _hx_dummy;
	PsychUISlider_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.ui.PsychUISlider",b0,9d,1c,e2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PsychUISlider_obj::__GetStatic;
	__mClass->mSetStaticField = &PsychUISlider_obj::__SetStatic;
	__mClass->mMarkFunc = PsychUISlider_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PsychUISlider_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PsychUISlider_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PsychUISlider_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PsychUISlider_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PsychUISlider_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PsychUISlider_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PsychUISlider_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_72b40ef24229f2a5_5_boot)
HXDLIN(   5)		CHANGE_EVENT = HX_("slider_change",0e,53,2a,e2);
            	}
}

} // end namespace backend
} // end namespace ui
