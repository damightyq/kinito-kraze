// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_backend_ui_PsychUIButton
#include <backend/ui/PsychUIButton.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIEventHandler
#include <backend/ui/PsychUIEventHandler.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_67414296dcbe5290_5_new,"backend.ui.PsychUIButton","new",0xe4752ef3,"backend.ui.PsychUIButton.new","backend/ui/PsychUIButton.hx",5,0x6af1a67d)
HX_LOCAL_STACK_FRAME(_hx_pos_67414296dcbe5290_56_update,"backend.ui.PsychUIButton","update",0xb0bd4556,"backend.ui.PsychUIButton.update","backend/ui/PsychUIButton.hx",56,0x6af1a67d)
HX_LOCAL_STACK_FRAME(_hx_pos_67414296dcbe5290_100_resize,"backend.ui.PsychUIButton","resize",0x32331941,"backend.ui.PsychUIButton.resize","backend/ui/PsychUIButton.hx",100,0x6af1a67d)
HX_LOCAL_STACK_FRAME(_hx_pos_67414296dcbe5290_109_set_label,"backend.ui.PsychUIButton","set_label",0x8bf8652a,"backend.ui.PsychUIButton.set_label","backend/ui/PsychUIButton.hx",109,0x6af1a67d)
HX_LOCAL_STACK_FRAME(_hx_pos_67414296dcbe5290_7_boot,"backend.ui.PsychUIButton","boot",0xfa2ce63f,"backend.ui.PsychUIButton.boot","backend/ui/PsychUIButton.hx",7,0x6af1a67d)
namespace backend{
namespace ui{

void PsychUIButton_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::String __o_label, ::Dynamic onClick, ::Dynamic __o_wid, ::Dynamic __o_hei){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            		::String label = __o_label;
            		if (::hx::IsNull(__o_label)) label = HX_("",00,00,00,00);
            		 ::Dynamic wid = __o_wid;
            		if (::hx::IsNull(__o_wid)) wid = 80;
            		 ::Dynamic hei = __o_hei;
            		if (::hx::IsNull(__o_hei)) hei = 20;
            	HX_GC_STACKFRAME(&_hx_pos_67414296dcbe5290_5_new)
HXLINE(  54)		this->_firstFrame = true;
HXLINE(  53)		this->broadcastButtonEvent = true;
HXLINE(  52)		this->forceCheckNext = false;
HXLINE(  51)		this->isClicked = false;
HXLINE(  27)		this->normalStyle =  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("bgAlpha",59,b7,bd,ce),( (Float)(1) ))
            			->setFixed(1,HX_("textColor",76,01,4a,e3),-16777216)
            			->setFixed(2,HX_("bgColor",5e,81,83,f7),-5592406));
HXLINE(  22)		this->hoverStyle =  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("bgAlpha",59,b7,bd,ce),( (Float)(1) ))
            			->setFixed(1,HX_("textColor",76,01,4a,e3),-16777216)
            			->setFixed(2,HX_("bgColor",5e,81,83,f7),-1));
HXLINE(  17)		this->clickStyle =  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("bgAlpha",59,b7,bd,ce),( (Float)(1) ))
            			->setFixed(1,HX_("textColor",76,01,4a,e3),-1)
            			->setFixed(2,HX_("bgColor",5e,81,83,f7),-16777216));
HXLINE(  35)		super::__construct(x,y,null());
HXLINE(  36)		this->bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-1,null(),null());
HXLINE(  37)		this->add(this->bg);
HXLINE(  38)		this->bg->set_color(-5592406);
HXLINE(  39)		this->bg->set_alpha(((Float)0.6));
HXLINE(  41)		this->text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,1,HX_("",00,00,00,00),null(),null());
HXLINE(  42)		this->text->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  43)		this->add(this->text);
HXLINE(  44)		this->resize(( (int)(wid) ),( (int)(hei) ));
HXLINE(  45)		this->set_label(label);
HXLINE(  47)		this->onClick = onClick;
HXLINE(  48)		this->forceCheckNext = true;
            	}

Dynamic PsychUIButton_obj::__CreateEmpty() { return new PsychUIButton_obj; }

void *PsychUIButton_obj::_hx_vtable = 0;

Dynamic PsychUIButton_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PsychUIButton_obj > _hx_result = new PsychUIButton_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool PsychUIButton_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3129a959) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x288ce903) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x288ce903;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x3129a959;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void PsychUIButton_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_67414296dcbe5290_56_update)
HXLINE(  57)		this->super::update(elapsed);
HXLINE(  59)		if (this->_firstFrame) {
HXLINE(  61)			this->bg->set_color(( (int)(this->normalStyle->__Field(HX_("bgColor",5e,81,83,f7),::hx::paccDynamic)) ));
HXLINE(  62)			this->bg->set_alpha(( (Float)(this->normalStyle->__Field(HX_("bgAlpha",59,b7,bd,ce),::hx::paccDynamic)) ));
HXLINE(  63)			this->text->set_color(( (int)(this->normalStyle->__Field(HX_("textColor",76,01,4a,e3),::hx::paccDynamic)) ));
HXLINE(  64)			this->_firstFrame = false;
            		}
HXLINE(  67)		bool _hx_tmp;
HXDLIN(  67)		if (this->isClicked) {
HXLINE(  67)			 ::flixel::input::mouse::FlxMouseButton _this = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN(  67)			if ((_this->current != 0)) {
HXLINE(  67)				_hx_tmp = (_this->current == -1);
            			}
            			else {
HXLINE(  67)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(  67)			_hx_tmp = false;
            		}
HXDLIN(  67)		if (_hx_tmp) {
HXLINE(  69)			this->forceCheckNext = true;
HXLINE(  70)			this->isClicked = false;
            		}
HXLINE(  73)		bool _hx_tmp1;
HXDLIN(  73)		bool _hx_tmp2;
HXDLIN(  73)		if (!(this->forceCheckNext)) {
HXLINE(  73)			 ::flixel::input::mouse::FlxMouse _this1 = ::flixel::FlxG_obj::mouse;
HXDLIN(  73)			if ((_this1->_prevX == _this1->x)) {
HXLINE(  73)				_hx_tmp2 = (_this1->_prevY != _this1->y);
            			}
            			else {
HXLINE(  73)				_hx_tmp2 = true;
            			}
            		}
            		else {
HXLINE(  73)			_hx_tmp2 = true;
            		}
HXDLIN(  73)		if (!(_hx_tmp2)) {
HXLINE(  73)			_hx_tmp1 = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            		}
            		else {
HXLINE(  73)			_hx_tmp1 = true;
            		}
HXDLIN(  73)		if (_hx_tmp1) {
HXLINE(  75)			 ::flixel::input::mouse::FlxMouse overlapped = ::flixel::FlxG_obj::mouse;
HXDLIN(  75)			 ::flixel::FlxSprite overlapped1 = this->bg;
HXDLIN(  75)			bool overlapped2 = overlapped->overlaps(overlapped1,this->get_camera());
HXLINE(  77)			this->forceCheckNext = false;
HXLINE(  79)			if (!(this->isClicked)) {
HXLINE(  81)				 ::Dynamic style;
HXDLIN(  81)				if (overlapped2) {
HXLINE(  81)					style = this->hoverStyle;
            				}
            				else {
HXLINE(  81)					style = this->normalStyle;
            				}
HXLINE(  82)				this->bg->set_color(( (int)(style->__Field(HX_("bgColor",5e,81,83,f7),::hx::paccDynamic)) ));
HXLINE(  83)				this->bg->set_alpha(( (Float)(style->__Field(HX_("bgAlpha",59,b7,bd,ce),::hx::paccDynamic)) ));
HXLINE(  84)				this->text->set_color(( (int)(style->__Field(HX_("textColor",76,01,4a,e3),::hx::paccDynamic)) ));
            			}
HXLINE(  87)			bool _hx_tmp3;
HXDLIN(  87)			if (overlapped2) {
HXLINE(  87)				_hx_tmp3 = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            			}
            			else {
HXLINE(  87)				_hx_tmp3 = false;
            			}
HXDLIN(  87)			if (_hx_tmp3) {
HXLINE(  89)				this->isClicked = true;
HXLINE(  90)				this->bg->set_color(( (int)(this->clickStyle->__Field(HX_("bgColor",5e,81,83,f7),::hx::paccDynamic)) ));
HXLINE(  91)				this->bg->set_alpha(( (Float)(this->clickStyle->__Field(HX_("bgAlpha",59,b7,bd,ce),::hx::paccDynamic)) ));
HXLINE(  92)				this->text->set_color(( (int)(this->clickStyle->__Field(HX_("textColor",76,01,4a,e3),::hx::paccDynamic)) ));
HXLINE(  93)				if (::hx::IsNotNull( this->onClick )) {
HXLINE(  93)					this->onClick();
            				}
HXLINE(  94)				if (this->broadcastButtonEvent) {
HXLINE(  94)					::backend::ui::PsychUIEventHandler_obj::event(::backend::ui::PsychUIButton_obj::CLICK_EVENT,::hx::ObjectPtr<OBJ_>(this));
            				}
            			}
            		}
            	}


void PsychUIButton_obj::resize(int width,int height){
            	HX_STACKFRAME(&_hx_pos_67414296dcbe5290_100_resize)
HXLINE( 101)		this->bg->setGraphicSize(width,height);
HXLINE( 102)		this->bg->updateHitbox();
HXLINE( 103)		this->text->set_fieldWidth(( (Float)(width) ));
HXLINE( 104)		this->text->set_x(this->bg->x);
HXLINE( 105)		 ::flixel::text::FlxText _hx_tmp = this->text;
HXDLIN( 105)		Float _hx_tmp1 = (this->bg->y + (( (Float)(height) ) / ( (Float)(2) )));
HXDLIN( 105)		_hx_tmp->set_y((_hx_tmp1 - (this->text->get_height() / ( (Float)(2) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC2(PsychUIButton_obj,resize,(void))

::String PsychUIButton_obj::set_label(::String v){
            	HX_STACKFRAME(&_hx_pos_67414296dcbe5290_109_set_label)
HXLINE( 110)		bool _hx_tmp;
HXDLIN( 110)		if (::hx::IsNotNull( this->text )) {
HXLINE( 110)			_hx_tmp = this->text->exists;
            		}
            		else {
HXLINE( 110)			_hx_tmp = false;
            		}
HXDLIN( 110)		if (_hx_tmp) {
HXLINE( 110)			this->text->set_text(v);
            		}
HXLINE( 111)		return (this->label = v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PsychUIButton_obj,set_label,return )

::String PsychUIButton_obj::CLICK_EVENT;


::hx::ObjectPtr< PsychUIButton_obj > PsychUIButton_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::String __o_label, ::Dynamic onClick, ::Dynamic __o_wid, ::Dynamic __o_hei) {
	::hx::ObjectPtr< PsychUIButton_obj > __this = new PsychUIButton_obj();
	__this->__construct(__o_x,__o_y,__o_label,onClick,__o_wid,__o_hei);
	return __this;
}

::hx::ObjectPtr< PsychUIButton_obj > PsychUIButton_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::String __o_label, ::Dynamic onClick, ::Dynamic __o_wid, ::Dynamic __o_hei) {
	PsychUIButton_obj *__this = (PsychUIButton_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PsychUIButton_obj), true, "backend.ui.PsychUIButton"));
	*(void **)__this = PsychUIButton_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_label,onClick,__o_wid,__o_hei);
	return __this;
}

PsychUIButton_obj::PsychUIButton_obj()
{
}

void PsychUIButton_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PsychUIButton);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(label,"label");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(onChangeState,"onChangeState");
	HX_MARK_MEMBER_NAME(onClick,"onClick");
	HX_MARK_MEMBER_NAME(clickStyle,"clickStyle");
	HX_MARK_MEMBER_NAME(hoverStyle,"hoverStyle");
	HX_MARK_MEMBER_NAME(normalStyle,"normalStyle");
	HX_MARK_MEMBER_NAME(isClicked,"isClicked");
	HX_MARK_MEMBER_NAME(forceCheckNext,"forceCheckNext");
	HX_MARK_MEMBER_NAME(broadcastButtonEvent,"broadcastButtonEvent");
	HX_MARK_MEMBER_NAME(_firstFrame,"_firstFrame");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PsychUIButton_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(label,"label");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(onChangeState,"onChangeState");
	HX_VISIT_MEMBER_NAME(onClick,"onClick");
	HX_VISIT_MEMBER_NAME(clickStyle,"clickStyle");
	HX_VISIT_MEMBER_NAME(hoverStyle,"hoverStyle");
	HX_VISIT_MEMBER_NAME(normalStyle,"normalStyle");
	HX_VISIT_MEMBER_NAME(isClicked,"isClicked");
	HX_VISIT_MEMBER_NAME(forceCheckNext,"forceCheckNext");
	HX_VISIT_MEMBER_NAME(broadcastButtonEvent,"broadcastButtonEvent");
	HX_VISIT_MEMBER_NAME(_firstFrame,"_firstFrame");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PsychUIButton_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( text ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"label") ) { return ::hx::Val( label ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return ::hx::Val( resize_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onClick") ) { return ::hx::Val( onClick ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isClicked") ) { return ::hx::Val( isClicked ); }
		if (HX_FIELD_EQ(inName,"set_label") ) { return ::hx::Val( set_label_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clickStyle") ) { return ::hx::Val( clickStyle ); }
		if (HX_FIELD_EQ(inName,"hoverStyle") ) { return ::hx::Val( hoverStyle ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"normalStyle") ) { return ::hx::Val( normalStyle ); }
		if (HX_FIELD_EQ(inName,"_firstFrame") ) { return ::hx::Val( _firstFrame ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onChangeState") ) { return ::hx::Val( onChangeState ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"forceCheckNext") ) { return ::hx::Val( forceCheckNext ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"broadcastButtonEvent") ) { return ::hx::Val( broadcastButtonEvent ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PsychUIButton_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"CLICK_EVENT") ) { outValue = ( CLICK_EVENT ); return true; }
	}
	return false;
}

::hx::Val PsychUIButton_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"label") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_label(inValue.Cast< ::String >()) );label=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onClick") ) { onClick=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isClicked") ) { isClicked=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clickStyle") ) { clickStyle=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hoverStyle") ) { hoverStyle=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"normalStyle") ) { normalStyle=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_firstFrame") ) { _firstFrame=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onChangeState") ) { onChangeState=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"forceCheckNext") ) { forceCheckNext=inValue.Cast< bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"broadcastButtonEvent") ) { broadcastButtonEvent=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PsychUIButton_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"CLICK_EVENT") ) { CLICK_EVENT=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void PsychUIButton_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("label",f4,0d,af,6f));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("clickStyle",c9,13,9d,c4));
	outFields->push(HX_("hoverStyle",d5,e5,1f,06));
	outFields->push(HX_("normalStyle",8a,75,4f,11));
	outFields->push(HX_("isClicked",dd,f3,2a,fe));
	outFields->push(HX_("forceCheckNext",70,66,de,08));
	outFields->push(HX_("broadcastButtonEvent",47,cb,b4,01));
	outFields->push(HX_("_firstFrame",fc,8e,eb,16));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PsychUIButton_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(PsychUIButton_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsString,(int)offsetof(PsychUIButton_obj,label),HX_("label",f4,0d,af,6f)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PsychUIButton_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PsychUIButton_obj,text),HX_("text",ad,cc,f9,4c)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PsychUIButton_obj,onChangeState),HX_("onChangeState",a2,3b,bb,0c)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PsychUIButton_obj,onClick),HX_("onClick",a9,1a,9c,de)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PsychUIButton_obj,clickStyle),HX_("clickStyle",c9,13,9d,c4)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PsychUIButton_obj,hoverStyle),HX_("hoverStyle",d5,e5,1f,06)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PsychUIButton_obj,normalStyle),HX_("normalStyle",8a,75,4f,11)},
	{::hx::fsBool,(int)offsetof(PsychUIButton_obj,isClicked),HX_("isClicked",dd,f3,2a,fe)},
	{::hx::fsBool,(int)offsetof(PsychUIButton_obj,forceCheckNext),HX_("forceCheckNext",70,66,de,08)},
	{::hx::fsBool,(int)offsetof(PsychUIButton_obj,broadcastButtonEvent),HX_("broadcastButtonEvent",47,cb,b4,01)},
	{::hx::fsBool,(int)offsetof(PsychUIButton_obj,_firstFrame),HX_("_firstFrame",fc,8e,eb,16)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PsychUIButton_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &PsychUIButton_obj::CLICK_EVENT,HX_("CLICK_EVENT",63,89,c0,0d)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PsychUIButton_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("label",f4,0d,af,6f),
	HX_("bg",c5,55,00,00),
	HX_("text",ad,cc,f9,4c),
	HX_("onChangeState",a2,3b,bb,0c),
	HX_("onClick",a9,1a,9c,de),
	HX_("clickStyle",c9,13,9d,c4),
	HX_("hoverStyle",d5,e5,1f,06),
	HX_("normalStyle",8a,75,4f,11),
	HX_("isClicked",dd,f3,2a,fe),
	HX_("forceCheckNext",70,66,de,08),
	HX_("broadcastButtonEvent",47,cb,b4,01),
	HX_("_firstFrame",fc,8e,eb,16),
	HX_("update",09,86,05,87),
	HX_("resize",f4,59,7b,08),
	HX_("set_label",57,56,a9,96),
	::String(null()) };

static void PsychUIButton_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PsychUIButton_obj::CLICK_EVENT,"CLICK_EVENT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PsychUIButton_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PsychUIButton_obj::CLICK_EVENT,"CLICK_EVENT");
};

#endif

::hx::Class PsychUIButton_obj::__mClass;

static ::String PsychUIButton_obj_sStaticFields[] = {
	HX_("CLICK_EVENT",63,89,c0,0d),
	::String(null())
};

void PsychUIButton_obj::__register()
{
	PsychUIButton_obj _hx_dummy;
	PsychUIButton_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.ui.PsychUIButton",81,39,f8,4b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PsychUIButton_obj::__GetStatic;
	__mClass->mSetStaticField = &PsychUIButton_obj::__SetStatic;
	__mClass->mMarkFunc = PsychUIButton_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PsychUIButton_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PsychUIButton_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PsychUIButton_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PsychUIButton_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PsychUIButton_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PsychUIButton_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PsychUIButton_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_67414296dcbe5290_7_boot)
HXDLIN(   7)		CLICK_EVENT = HX_("button_click",fb,26,6f,b7);
            	}
}

} // end namespace backend
} // end namespace ui
