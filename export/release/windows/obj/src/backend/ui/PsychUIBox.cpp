// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIBox
#include <backend/ui/PsychUIBox.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUIEventHandler
#include <backend/ui/PsychUIEventHandler.h>
#endif
#ifndef INCLUDED_backend_ui_PsychUITab
#include <backend/ui/PsychUITab.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_443dafccdf08a324_9_new,"backend.ui.PsychUIBox","new",0xe66a860e,"backend.ui.PsychUIBox.new","backend/ui/PsychUIBox.hx",9,0x1fa19a82)
HX_LOCAL_STACK_FRAME(_hx_pos_443dafccdf08a324_78_update,"backend.ui.PsychUIBox","update",0x2951111b,"backend.ui.PsychUIBox.update","backend/ui/PsychUIBox.hx",78,0x1fa19a82)
HX_LOCAL_STACK_FRAME(_hx_pos_443dafccdf08a324_177_set_cameras,"backend.ui.PsychUIBox","set_cameras",0x6f0204ff,"backend.ui.PsychUIBox.set_cameras","backend/ui/PsychUIBox.hx",177,0x1fa19a82)
HX_LOCAL_STACK_FRAME(_hx_pos_443dafccdf08a324_183_set_camera,"backend.ui.PsychUIBox","set_camera",0xdf34d0f4,"backend.ui.PsychUIBox.set_camera","backend/ui/PsychUIBox.hx",183,0x1fa19a82)
HX_LOCAL_STACK_FRAME(_hx_pos_443dafccdf08a324_189_draw,"backend.ui.PsychUIBox","draw",0xb0386e96,"backend.ui.PsychUIBox.draw","backend/ui/PsychUIBox.hx",189,0x1fa19a82)
HX_LOCAL_STACK_FRAME(_hx_pos_443dafccdf08a324_197_destroy,"backend.ui.PsychUIBox","destroy",0x845451a8,"backend.ui.PsychUIBox.destroy","backend/ui/PsychUIBox.hx",197,0x1fa19a82)
HX_LOCAL_STACK_FRAME(_hx_pos_443dafccdf08a324_204_addTab,"backend.ui.PsychUIBox","addTab",0x4154f5c6,"backend.ui.PsychUIBox.addTab","backend/ui/PsychUIBox.hx",204,0x1fa19a82)
HX_LOCAL_STACK_FRAME(_hx_pos_443dafccdf08a324_216_updateTabs,"backend.ui.PsychUIBox","updateTabs",0x394f1739,"backend.ui.PsychUIBox.updateTabs","backend/ui/PsychUIBox.hx",216,0x1fa19a82)
HX_LOCAL_STACK_FRAME(_hx_pos_443dafccdf08a324_228_resize,"backend.ui.PsychUIBox","resize",0xaac6e506,"backend.ui.PsychUIBox.resize","backend/ui/PsychUIBox.hx",228,0x1fa19a82)
HX_LOCAL_STACK_FRAME(_hx_pos_443dafccdf08a324_236_set_selectedTab,"backend.ui.PsychUIBox","set_selectedTab",0x1d644a0b,"backend.ui.PsychUIBox.set_selectedTab","backend/ui/PsychUIBox.hx",236,0x1fa19a82)
HX_LOCAL_STACK_FRAME(_hx_pos_443dafccdf08a324_251_set_selectedName,"backend.ui.PsychUIBox","set_selectedName",0x966541d5,"backend.ui.PsychUIBox.set_selectedName","backend/ui/PsychUIBox.hx",251,0x1fa19a82)
HX_LOCAL_STACK_FRAME(_hx_pos_443dafccdf08a324_266_set_selectedIndex,"backend.ui.PsychUIBox","set_selectedIndex",0x29c46448,"backend.ui.PsychUIBox.set_selectedIndex","backend/ui/PsychUIBox.hx",266,0x1fa19a82)
HX_LOCAL_STACK_FRAME(_hx_pos_443dafccdf08a324_274_getTab,"backend.ui.PsychUIBox","getTab",0x45731e71,"backend.ui.PsychUIBox.getTab","backend/ui/PsychUIBox.hx",274,0x1fa19a82)
HX_LOCAL_STACK_FRAME(_hx_pos_443dafccdf08a324_283_set_canMinimize,"backend.ui.PsychUIBox","set_canMinimize",0x3e75b69f,"backend.ui.PsychUIBox.set_canMinimize","backend/ui/PsychUIBox.hx",283,0x1fa19a82)
HX_LOCAL_STACK_FRAME(_hx_pos_443dafccdf08a324_289_set_isMinimized,"backend.ui.PsychUIBox","set_isMinimized",0xf473698d,"backend.ui.PsychUIBox.set_isMinimized","backend/ui/PsychUIBox.hx",289,0x1fa19a82)
HX_LOCAL_STACK_FRAME(_hx_pos_443dafccdf08a324_11_boot,"backend.ui.PsychUIBox","boot",0xaee3c6c4,"backend.ui.PsychUIBox.boot","backend/ui/PsychUIBox.hx",11,0x1fa19a82)
HX_LOCAL_STACK_FRAME(_hx_pos_443dafccdf08a324_12_boot,"backend.ui.PsychUIBox","boot",0xaee3c6c4,"backend.ui.PsychUIBox.boot","backend/ui/PsychUIBox.hx",12,0x1fa19a82)
HX_LOCAL_STACK_FRAME(_hx_pos_443dafccdf08a324_13_boot,"backend.ui.PsychUIBox","boot",0xaee3c6c4,"backend.ui.PsychUIBox.boot","backend/ui/PsychUIBox.hx",13,0x1fa19a82)
HX_LOCAL_STACK_FRAME(_hx_pos_443dafccdf08a324_14_boot,"backend.ui.PsychUIBox","boot",0xaee3c6c4,"backend.ui.PsychUIBox.boot","backend/ui/PsychUIBox.hx",14,0x1fa19a82)
namespace backend{
namespace ui{

void PsychUIBox_obj::__construct(Float x,Float y,int width,int height,::Array< ::String > tabs){
            	HX_GC_STACKFRAME(&_hx_pos_443dafccdf08a324_9_new)
HXLINE( 226)		this->_originalHeight = 0;
HXLINE( 214)		this->tabHeight = 20;
HXLINE(  76)		this->broadcastBoxEvents = true;
HXLINE(  75)		this->forceCheckNext = false;
HXLINE(  73)		this->_lastClick = ((Float)0);
HXLINE(  71)		this->_draggingBox = false;
HXLINE(  70)		this->_pressedBox = false;
HXLINE(  42)		this->minimizeOnFocusLost = false;
HXLINE(  41)		this->isMinimized = false;
HXLINE(  40)		this->canMinimize = true;
HXLINE(  39)		this->canMove = true;
HXLINE(  33)		this->unselectedStyle =  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("bgAlpha",59,b7,bd,ce),((Float)0.6))
            			->setFixed(1,HX_("textColor",76,01,4a,e3),-1)
            			->setFixed(2,HX_("bgColor",5e,81,83,f7),-16777216));
HXLINE(  28)		this->hoverStyle =  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("bgAlpha",59,b7,bd,ce),((Float)0.6))
            			->setFixed(1,HX_("textColor",76,01,4a,e3),-16777216)
            			->setFixed(2,HX_("bgColor",5e,81,83,f7),-1));
HXLINE(  23)		this->selectedStyle =  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("bgAlpha",59,b7,bd,ce),( (Float)(1) ))
            			->setFixed(1,HX_("textColor",76,01,4a,e3),-16777216)
            			->setFixed(2,HX_("bgColor",5e,81,83,f7),-1));
HXLINE(  19)		this->selectedName = null();
HXLINE(  18)		this->selectedIndex = -1;
HXLINE(  17)		this->selectedTab = null();
HXLINE(  15)		this->tabs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  46)		super::__construct(x,y,null());
HXLINE(  48)		this->bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-1,null(),null());
HXLINE(  49)		this->bg->set_color(-16777216);
HXLINE(  50)		this->bg->set_alpha(((Float)0.6));
HXLINE(  51)		this->add(this->bg);
HXLINE(  53)		if (::hx::IsNotNull( tabs )) {
HXLINE(  55)			int _g = 0;
HXDLIN(  55)			while((_g < tabs->length)){
HXLINE(  55)				::String tab = tabs->__get(_g);
HXDLIN(  55)				_g = (_g + 1);
HXLINE(  57)				 ::backend::ui::PsychUITab createdTab =  ::backend::ui::PsychUITab_obj::__alloc( HX_CTX ,tab);
HXLINE(  58)				this->tabs->push(createdTab);
HXLINE(  59)				this->add(createdTab);
            			}
            		}
HXLINE(  63)		this->resize(width,height);
HXLINE(  64)		this->set_selectedIndex(0);
HXLINE(  65)		this->forceCheckNext = true;
            	}

Dynamic PsychUIBox_obj::__CreateEmpty() { return new PsychUIBox_obj; }

void *PsychUIBox_obj::_hx_vtable = 0;

Dynamic PsychUIBox_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PsychUIBox_obj > _hx_result = new PsychUIBox_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool PsychUIBox_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x510fe044) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x288ce903) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x288ce903;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x510fe044;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void PsychUIBox_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_443dafccdf08a324_78_update)
HXLINE(  79)		this->super::update(elapsed);
HXLINE(  81)		 ::backend::ui::PsychUIBox _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  81)		_hx_tmp->_lastClick = (_hx_tmp->_lastClick + elapsed);
HXLINE(  82)		bool _hx_tmp1;
HXDLIN(  82)		bool _hx_tmp2;
HXDLIN(  82)		 ::flixel::input::mouse::FlxMouseButton _this = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN(  82)		bool _hx_tmp3;
HXDLIN(  82)		if ((_this->current != 0)) {
HXLINE(  82)			_hx_tmp3 = (_this->current == -1);
            		}
            		else {
HXLINE(  82)			_hx_tmp3 = true;
            		}
HXDLIN(  82)		if (!(_hx_tmp3)) {
HXLINE(  82)			_hx_tmp2 = this->_draggingBox;
            		}
            		else {
HXLINE(  82)			_hx_tmp2 = false;
            		}
HXDLIN(  82)		if (_hx_tmp2) {
HXLINE(  82)			_hx_tmp1 = this->canMove;
            		}
            		else {
HXLINE(  82)			_hx_tmp1 = false;
            		}
HXDLIN(  82)		if (_hx_tmp1) {
HXLINE(  84)			 ::flixel::input::mouse::FlxMouse newPoint = ::flixel::FlxG_obj::mouse;
HXDLIN(  84)			 ::flixel::math::FlxBasePoint newPoint1 = newPoint->getPositionInCameraView(this->get_camera(),null());
HXLINE(  85)			this->setPosition((this->_draggingPos->x - (this->_draggingPoint->x - newPoint1->x)),(this->_draggingPos->y - (this->_draggingPoint->y - newPoint1->y)));
            		}
            		else {
HXLINE(  89)			bool wasDragging = this->_draggingBox;
HXLINE(  90)			this->_draggingPos = null();
HXLINE(  91)			this->_draggingPoint = null();
HXLINE(  92)			this->_draggingBox = false;
HXLINE(  93)			 ::flixel::input::mouse::FlxMouseButton _this1 = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN(  93)			bool _hx_tmp4;
HXDLIN(  93)			if ((_this1->current != 0)) {
HXLINE(  93)				_hx_tmp4 = (_this1->current == -1);
            			}
            			else {
HXLINE(  93)				_hx_tmp4 = true;
            			}
HXDLIN(  93)			if (_hx_tmp4) {
HXLINE(  95)				if (this->_pressedBox) {
HXLINE(  95)					this->forceCheckNext = true;
            				}
HXLINE(  96)				this->_pressedBox = false;
            			}
HXLINE(  98)			bool _hx_tmp5;
HXDLIN(  98)			if (wasDragging) {
HXLINE(  98)				_hx_tmp5 = this->broadcastBoxEvents;
            			}
            			else {
HXLINE(  98)				_hx_tmp5 = false;
            			}
HXDLIN(  98)			if (_hx_tmp5) {
HXLINE(  98)				::backend::ui::PsychUIEventHandler_obj::event(::backend::ui::PsychUIBox_obj::DROP_EVENT,::hx::ObjectPtr<OBJ_>(this));
            			}
            		}
HXLINE( 101)		{
HXLINE( 101)			int _g = 0;
HXDLIN( 101)			::Array< ::Dynamic> _g1 = this->tabs;
HXDLIN( 101)			while((_g < _g1->length)){
HXLINE( 101)				 ::backend::ui::PsychUITab tab = _g1->__get(_g).StaticCast<  ::backend::ui::PsychUITab >();
HXDLIN( 101)				_g = (_g + 1);
HXLINE( 103)				{
HXLINE( 103)					 ::flixel::math::FlxBasePoint this1 = tab->scrollFactor;
HXDLIN( 103)					Float y = this->scrollFactor->y;
HXDLIN( 103)					this1->set_x(this->scrollFactor->x);
HXDLIN( 103)					this1->set_y(y);
            				}
HXLINE( 104)				{
HXLINE( 104)					 ::flixel::math::FlxBasePoint this2 = tab->text->scrollFactor;
HXDLIN( 104)					Float y1 = this->scrollFactor->y;
HXDLIN( 104)					this2->set_x(this->scrollFactor->x);
HXDLIN( 104)					this2->set_y(y1);
            				}
            			}
            		}
HXLINE( 107)		bool _ignoreTabUpdate = false;
HXLINE( 108)		bool _hx_tmp6;
HXDLIN( 108)		bool _hx_tmp7;
HXDLIN( 108)		bool _hx_tmp8;
HXDLIN( 108)		if (!(this->forceCheckNext)) {
HXLINE( 108)			 ::flixel::input::mouse::FlxMouse _this2 = ::flixel::FlxG_obj::mouse;
HXDLIN( 108)			if ((_this2->_prevX == _this2->x)) {
HXLINE( 108)				_hx_tmp8 = (_this2->_prevY != _this2->y);
            			}
            			else {
HXLINE( 108)				_hx_tmp8 = true;
            			}
            		}
            		else {
HXLINE( 108)			_hx_tmp8 = true;
            		}
HXDLIN( 108)		if (!(_hx_tmp8)) {
HXLINE( 108)			_hx_tmp7 = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            		}
            		else {
HXLINE( 108)			_hx_tmp7 = true;
            		}
HXDLIN( 108)		if (!(_hx_tmp7)) {
HXLINE( 108)			_hx_tmp6 = (::flixel::FlxG_obj::mouse->_leftButton->current == -1);
            		}
            		else {
HXLINE( 108)			_hx_tmp6 = true;
            		}
HXDLIN( 108)		if (_hx_tmp6) {
HXLINE( 110)			this->forceCheckNext = false;
HXLINE( 111)			{
HXLINE( 111)				int _g2 = 0;
HXDLIN( 111)				::Array< ::Dynamic> _g3 = this->tabs;
HXDLIN( 111)				while((_g2 < _g3->length)){
HXLINE( 111)					 ::backend::ui::PsychUITab tab1 = _g3->__get(_g2).StaticCast<  ::backend::ui::PsychUITab >();
HXDLIN( 111)					_g2 = (_g2 + 1);
HXLINE( 113)					 ::flixel::input::mouse::FlxMouse _hx_tmp9 = ::flixel::FlxG_obj::mouse;
HXDLIN( 113)					if (_hx_tmp9->overlaps(tab1,this->get_camera())) {
HXLINE( 115)						tab1->set_color(( (int)(this->hoverStyle->__Field(HX_("bgColor",5e,81,83,f7),::hx::paccDynamic)) ));
HXLINE( 116)						tab1->set_alpha(( (Float)(this->hoverStyle->__Field(HX_("bgAlpha",59,b7,bd,ce),::hx::paccDynamic)) ));
HXLINE( 117)						tab1->text->set_color(( (int)(this->hoverStyle->__Field(HX_("textColor",76,01,4a,e3),::hx::paccDynamic)) ));
HXLINE( 119)						if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE( 120)							this->_pressedBox = true;
            						}
HXLINE( 122)						bool _hx_tmp10;
HXDLIN( 122)						bool _hx_tmp11;
HXDLIN( 122)						bool _hx_tmp12;
HXDLIN( 122)						bool _hx_tmp13;
HXDLIN( 122)						if (!(this->_draggingBox)) {
HXLINE( 122)							_hx_tmp13 = this->canMove;
            						}
            						else {
HXLINE( 122)							_hx_tmp13 = false;
            						}
HXDLIN( 122)						if (_hx_tmp13) {
HXLINE( 122)							_hx_tmp12 = this->_pressedBox;
            						}
            						else {
HXLINE( 122)							_hx_tmp12 = false;
            						}
HXDLIN( 122)						if (_hx_tmp12) {
HXLINE( 122)							 ::flixel::input::mouse::FlxMouseButton _this3 = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN( 122)							if ((_this3->current != 1)) {
HXLINE( 122)								_hx_tmp11 = (_this3->current == 2);
            							}
            							else {
HXLINE( 122)								_hx_tmp11 = true;
            							}
            						}
            						else {
HXLINE( 122)							_hx_tmp11 = false;
            						}
HXDLIN( 122)						if (_hx_tmp11) {
HXLINE( 122)							 ::flixel::input::mouse::FlxMouse _this4 = ::flixel::FlxG_obj::mouse;
HXDLIN( 122)							if (!((::Math_obj::abs(( (Float)((_this4->screenX - _this4->_prevScreenX)) )) > 1))) {
HXLINE( 122)								 ::flixel::input::mouse::FlxMouse _this5 = ::flixel::FlxG_obj::mouse;
HXDLIN( 122)								_hx_tmp10 = (::Math_obj::abs(( (Float)((_this5->screenY - _this5->_prevScreenY)) )) > 1);
            							}
            							else {
HXLINE( 122)								_hx_tmp10 = true;
            							}
            						}
            						else {
HXLINE( 122)							_hx_tmp10 = false;
            						}
HXDLIN( 122)						if (_hx_tmp10) {
HXLINE( 124)							Float x = this->x;
HXDLIN( 124)							Float y2 = this->y;
HXDLIN( 124)							 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y2);
HXDLIN( 124)							point->_inPool = false;
HXDLIN( 124)							 ::flixel::math::FlxBasePoint point1 = point;
HXDLIN( 124)							point1->_weak = true;
HXDLIN( 124)							this->_draggingPos = point1;
HXLINE( 125)							 ::flixel::input::mouse::FlxMouse _hx_tmp14 = ::flixel::FlxG_obj::mouse;
HXDLIN( 125)							this->_draggingPoint = _hx_tmp14->getPositionInCameraView(this->get_camera(),null());
HXLINE( 126)							this->_draggingBox = true;
HXLINE( 127)							if (this->broadcastBoxEvents) {
HXLINE( 127)								::backend::ui::PsychUIEventHandler_obj::event(::backend::ui::PsychUIBox_obj::DRAG_EVENT,::hx::ObjectPtr<OBJ_>(this));
            							}
            						}
HXLINE( 130)						bool _hx_tmp15;
HXDLIN( 130)						bool _hx_tmp16;
HXDLIN( 130)						bool _hx_tmp17;
HXDLIN( 130)						bool _hx_tmp18;
HXDLIN( 130)						if ((::flixel::FlxG_obj::mouse->_leftButton->current == -1)) {
HXLINE( 130)							_hx_tmp18 = this->canMinimize;
            						}
            						else {
HXLINE( 130)							_hx_tmp18 = false;
            						}
HXDLIN( 130)						if (_hx_tmp18) {
HXLINE( 130)							_hx_tmp17 = (this->_lastClick < ((Float)0.15));
            						}
            						else {
HXLINE( 130)							_hx_tmp17 = false;
            						}
HXDLIN( 130)						if (_hx_tmp17) {
HXLINE( 130)							_hx_tmp16 = ::hx::IsInstanceEq( this->selectedTab,tab1 );
            						}
            						else {
HXLINE( 130)							_hx_tmp16 = false;
            						}
HXDLIN( 130)						if (_hx_tmp16) {
HXLINE( 130)							_hx_tmp15 = ::hx::IsInstanceEq( this->_lastTab,this->selectedTab );
            						}
            						else {
HXLINE( 130)							_hx_tmp15 = false;
            						}
HXDLIN( 130)						if (_hx_tmp15) {
HXLINE( 132)							_ignoreTabUpdate = true;
HXLINE( 133)							this->set_isMinimized(!(this->isMinimized));
HXLINE( 134)							this->_lastClick = ( (Float)(0) );
            						}
HXLINE( 138)						if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE( 140)							if (::hx::IsInstanceNotEq( this->selectedTab,tab1 )) {
HXLINE( 142)								this->set_isMinimized(false);
HXLINE( 143)								_ignoreTabUpdate = true;
            							}
HXLINE( 145)							this->_lastTab = this->selectedTab;
HXLINE( 146)							this->set_selectedTab(tab1);
HXLINE( 147)							this->_lastClick = ( (Float)(0) );
HXLINE( 148)							if (this->broadcastBoxEvents) {
HXLINE( 148)								::backend::ui::PsychUIEventHandler_obj::event(::backend::ui::PsychUIBox_obj::CLICK_EVENT,::hx::ObjectPtr<OBJ_>(this));
            							}
            						}
            						else {
HXLINE( 150)							if (::hx::IsInstanceNotEq( this->selectedTab,tab1 )) {
HXLINE( 150)								continue;
            							}
            						}
            					}
HXLINE( 153)					 ::Dynamic style;
HXDLIN( 153)					if (::hx::IsInstanceEq( this->selectedTab,tab1 )) {
HXLINE( 153)						style = this->selectedStyle;
            					}
            					else {
HXLINE( 153)						style = this->unselectedStyle;
            					}
HXLINE( 154)					tab1->set_color(( (int)(style->__Field(HX_("bgColor",5e,81,83,f7),::hx::paccDynamic)) ));
HXLINE( 155)					tab1->set_alpha(( (Float)(style->__Field(HX_("bgAlpha",59,b7,bd,ce),::hx::paccDynamic)) ));
HXLINE( 156)					tab1->text->set_color(( (int)(style->__Field(HX_("textColor",76,01,4a,e3),::hx::paccDynamic)) ));
            				}
            			}
            		}
HXLINE( 160)		if (_ignoreTabUpdate) {
HXLINE( 162)			if (this->broadcastBoxEvents) {
HXLINE( 163)				::backend::ui::PsychUIEventHandler_obj::event(::backend::ui::PsychUIBox_obj::MINIMIZE_EVENT,::hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            		else {
HXLINE( 165)			bool _hx_tmp19;
HXDLIN( 165)			if (::hx::IsNotNull( this->selectedTab )) {
HXLINE( 165)				_hx_tmp19 = !(this->isMinimized);
            			}
            			else {
HXLINE( 165)				_hx_tmp19 = false;
            			}
HXDLIN( 165)			if (_hx_tmp19) {
HXLINE( 166)				this->selectedTab->updateMenu(::hx::ObjectPtr<OBJ_>(this),elapsed);
            			}
            		}
HXLINE( 168)		bool _hx_tmp20;
HXDLIN( 168)		bool _hx_tmp21;
HXDLIN( 168)		bool _hx_tmp22;
HXDLIN( 168)		if (this->minimizeOnFocusLost) {
HXLINE( 168)			_hx_tmp22 = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            		}
            		else {
HXLINE( 168)			_hx_tmp22 = false;
            		}
HXDLIN( 168)		if (_hx_tmp22) {
HXLINE( 168)			_hx_tmp21 = !(this->isMinimized);
            		}
            		else {
HXLINE( 168)			_hx_tmp21 = false;
            		}
HXDLIN( 168)		if (_hx_tmp21) {
HXLINE( 168)			 ::flixel::input::mouse::FlxMouse _hx_tmp23 = ::flixel::FlxG_obj::mouse;
HXDLIN( 168)			 ::flixel::FlxSprite _hx_tmp24 = this->bg;
HXDLIN( 168)			_hx_tmp20 = !(_hx_tmp23->overlaps(_hx_tmp24,this->get_camera()));
            		}
            		else {
HXLINE( 168)			_hx_tmp20 = false;
            		}
HXDLIN( 168)		if (_hx_tmp20) {
HXLINE( 170)			this->set_isMinimized(true);
HXLINE( 171)			if (this->broadcastBoxEvents) {
HXLINE( 172)				::backend::ui::PsychUIEventHandler_obj::event(::backend::ui::PsychUIBox_obj::MINIMIZE_EVENT,::hx::ObjectPtr<OBJ_>(this));
            			}
            		}
            	}


::Array< ::Dynamic> PsychUIBox_obj::set_cameras(::Array< ::Dynamic> v){
            	HX_STACKFRAME(&_hx_pos_443dafccdf08a324_177_set_cameras)
HXLINE( 178)		{
HXLINE( 178)			int _g = 0;
HXDLIN( 178)			::Array< ::Dynamic> _g1 = this->tabs;
HXDLIN( 178)			while((_g < _g1->length)){
HXLINE( 178)				 ::backend::ui::PsychUITab tab = _g1->__get(_g).StaticCast<  ::backend::ui::PsychUITab >();
HXDLIN( 178)				_g = (_g + 1);
HXDLIN( 178)				tab->set_cameras(v);
            			}
            		}
HXLINE( 179)		return this->super::set_cameras(v);
            	}


 ::flixel::FlxCamera PsychUIBox_obj::set_camera( ::flixel::FlxCamera v){
            	HX_STACKFRAME(&_hx_pos_443dafccdf08a324_183_set_camera)
HXLINE( 184)		{
HXLINE( 184)			int _g = 0;
HXDLIN( 184)			::Array< ::Dynamic> _g1 = this->tabs;
HXDLIN( 184)			while((_g < _g1->length)){
HXLINE( 184)				 ::backend::ui::PsychUITab tab = _g1->__get(_g).StaticCast<  ::backend::ui::PsychUITab >();
HXDLIN( 184)				_g = (_g + 1);
HXDLIN( 184)				tab->set_camera(v);
            			}
            		}
HXLINE( 185)		return this->super::set_camera(v);
            	}


void PsychUIBox_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_443dafccdf08a324_189_draw)
HXLINE( 190)		this->super::draw();
HXLINE( 192)		bool _hx_tmp;
HXDLIN( 192)		if (::hx::IsNotNull( this->selectedTab )) {
HXLINE( 192)			_hx_tmp = !(this->isMinimized);
            		}
            		else {
HXLINE( 192)			_hx_tmp = false;
            		}
HXDLIN( 192)		if (_hx_tmp) {
HXLINE( 193)			this->selectedTab->drawMenu(::hx::ObjectPtr<OBJ_>(this));
            		}
            	}


void PsychUIBox_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_443dafccdf08a324_197_destroy)
HXLINE( 198)		this->tabs = null();
HXLINE( 199)		this->set_selectedTab(null());
HXLINE( 200)		this->super::destroy();
            	}


void PsychUIBox_obj::addTab(::String name){
            	HX_GC_STACKFRAME(&_hx_pos_443dafccdf08a324_204_addTab)
HXLINE( 205)		 ::backend::ui::PsychUITab createdTab =  ::backend::ui::PsychUITab_obj::__alloc( HX_CTX ,name);
HXLINE( 206)		this->tabs->push(createdTab);
HXLINE( 207)		this->add(createdTab);
HXLINE( 208)		this->updateTabs();
HXLINE( 210)		if (::hx::IsNull( this->selectedTab )) {
HXLINE( 211)			this->set_selectedTab(createdTab);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PsychUIBox_obj,addTab,(void))

void PsychUIBox_obj::updateTabs(){
            	HX_STACKFRAME(&_hx_pos_443dafccdf08a324_216_updateTabs)
HXLINE( 217)		Float wid = this->bg->get_width();
HXDLIN( 217)		int wid1 = ::Std_obj::_hx_int((wid / ( (Float)(this->tabs->length) )));
HXLINE( 218)		{
HXLINE( 218)			int _g_current = 0;
HXDLIN( 218)			::Array< ::Dynamic> _g_array = this->tabs;
HXDLIN( 218)			while((_g_current < _g_array->length)){
HXLINE( 218)				 ::backend::ui::PsychUITab _g_value = _g_array->__get(_g_current).StaticCast<  ::backend::ui::PsychUITab >();
HXDLIN( 218)				_g_current = (_g_current + 1);
HXDLIN( 218)				int _g_key = (_g_current - 1);
HXDLIN( 218)				int num = _g_key;
HXDLIN( 218)				 ::backend::ui::PsychUITab tab = _g_value;
HXLINE( 219)				{
HXLINE( 220)					tab->set_x((this->x + (wid1 * num)));
HXLINE( 221)					tab->resize(wid1,this->tabHeight);
HXLINE( 222)					tab->set_cameras(this->get_cameras());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PsychUIBox_obj,updateTabs,(void))

void PsychUIBox_obj::resize(int width,int height){
            	HX_STACKFRAME(&_hx_pos_443dafccdf08a324_228_resize)
HXLINE( 229)		this->_originalHeight = height;
HXLINE( 230)		this->bg->setGraphicSize(width,height);
HXLINE( 231)		this->bg->updateHitbox();
HXLINE( 232)		this->updateTabs();
            	}


HX_DEFINE_DYNAMIC_FUNC2(PsychUIBox_obj,resize,(void))

 ::backend::ui::PsychUITab PsychUIBox_obj::set_selectedTab( ::backend::ui::PsychUITab v){
            	HX_STACKFRAME(&_hx_pos_443dafccdf08a324_236_set_selectedTab)
HXLINE( 237)		if (::hx::IsNotNull( v )) {
HXLINE( 239)			this->selectedName = v->name;
HXLINE( 240)			this->selectedIndex = this->tabs->indexOf(v,null());
            		}
            		else {
HXLINE( 244)			this->selectedName = null();
HXLINE( 245)			this->selectedIndex = -1;
            		}
HXLINE( 247)		return (this->selectedTab = v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PsychUIBox_obj,set_selectedTab,return )

::String PsychUIBox_obj::set_selectedName(::String v){
            	HX_STACKFRAME(&_hx_pos_443dafccdf08a324_251_set_selectedName)
HXLINE( 252)		bool _hx_tmp;
HXDLIN( 252)		if (::hx::IsNotNull( v )) {
HXLINE( 252)			_hx_tmp = (::StringTools_obj::trim(v).length < 1);
            		}
            		else {
HXLINE( 252)			_hx_tmp = true;
            		}
HXDLIN( 252)		if (_hx_tmp) {
HXLINE( 252)			this->set_selectedTab(null());
            		}
HXLINE( 254)		{
HXLINE( 254)			int _g = 0;
HXDLIN( 254)			::Array< ::Dynamic> _g1 = this->tabs;
HXDLIN( 254)			while((_g < _g1->length)){
HXLINE( 254)				 ::backend::ui::PsychUITab tab = _g1->__get(_g).StaticCast<  ::backend::ui::PsychUITab >();
HXDLIN( 254)				_g = (_g + 1);
HXLINE( 256)				if ((tab->name == v)) {
HXLINE( 258)					this->set_selectedTab(tab);
HXLINE( 259)					return v;
            				}
            			}
            		}
HXLINE( 262)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PsychUIBox_obj,set_selectedName,return )

int PsychUIBox_obj::set_selectedIndex(int v){
            	HX_STACKFRAME(&_hx_pos_443dafccdf08a324_266_set_selectedIndex)
HXLINE( 267)		v = ::Std_obj::_hx_int(::Math_obj::max(::Math_obj::min(( (Float)(v) ),( (Float)((this->tabs->length - 1)) )),( (Float)(-1) )));
HXLINE( 268)		if ((v > -1)) {
HXLINE( 268)			this->set_selectedTab(this->tabs->__get(v).StaticCast<  ::backend::ui::PsychUITab >());
            		}
            		else {
HXLINE( 269)			this->set_selectedTab(null());
            		}
HXLINE( 270)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PsychUIBox_obj,set_selectedIndex,return )

 ::backend::ui::PsychUITab PsychUIBox_obj::getTab(::String name){
            	HX_STACKFRAME(&_hx_pos_443dafccdf08a324_274_getTab)
HXLINE( 275)		{
HXLINE( 275)			int _g = 0;
HXDLIN( 275)			::Array< ::Dynamic> _g1 = this->tabs;
HXDLIN( 275)			while((_g < _g1->length)){
HXLINE( 275)				 ::backend::ui::PsychUITab tab = _g1->__get(_g).StaticCast<  ::backend::ui::PsychUITab >();
HXDLIN( 275)				_g = (_g + 1);
HXLINE( 276)				if ((tab->name == name)) {
HXLINE( 277)					return tab;
            				}
            			}
            		}
HXLINE( 279)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PsychUIBox_obj,getTab,return )

bool PsychUIBox_obj::set_canMinimize(bool v){
            	HX_STACKFRAME(&_hx_pos_443dafccdf08a324_283_set_canMinimize)
HXLINE( 284)		this->set_isMinimized(false);
HXLINE( 285)		return (this->canMinimize = v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PsychUIBox_obj,set_canMinimize,return )

bool PsychUIBox_obj::set_isMinimized(bool v){
            	HX_STACKFRAME(&_hx_pos_443dafccdf08a324_289_set_isMinimized)
HXLINE( 290)		if (!(v)) {
HXLINE( 292)			this->bg->scale->set_y(( (Float)(this->_originalHeight) ));
HXLINE( 293)			this->bg->updateHitbox();
            		}
            		else {
HXLINE( 297)			this->bg->scale->set_y(( (Float)((this->tabHeight + 20)) ));
HXLINE( 298)			this->bg->updateHitbox();
HXLINE( 299)			this->set_selectedTab(null());
            		}
HXLINE( 301)		return (this->isMinimized = v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PsychUIBox_obj,set_isMinimized,return )

::String PsychUIBox_obj::CLICK_EVENT;

::String PsychUIBox_obj::MINIMIZE_EVENT;

::String PsychUIBox_obj::DRAG_EVENT;

::String PsychUIBox_obj::DROP_EVENT;


::hx::ObjectPtr< PsychUIBox_obj > PsychUIBox_obj::__new(Float x,Float y,int width,int height,::Array< ::String > tabs) {
	::hx::ObjectPtr< PsychUIBox_obj > __this = new PsychUIBox_obj();
	__this->__construct(x,y,width,height,tabs);
	return __this;
}

::hx::ObjectPtr< PsychUIBox_obj > PsychUIBox_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y,int width,int height,::Array< ::String > tabs) {
	PsychUIBox_obj *__this = (PsychUIBox_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PsychUIBox_obj), true, "backend.ui.PsychUIBox"));
	*(void **)__this = PsychUIBox_obj::_hx_vtable;
	__this->__construct(x,y,width,height,tabs);
	return __this;
}

PsychUIBox_obj::PsychUIBox_obj()
{
}

void PsychUIBox_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PsychUIBox);
	HX_MARK_MEMBER_NAME(tabs,"tabs");
	HX_MARK_MEMBER_NAME(selectedTab,"selectedTab");
	HX_MARK_MEMBER_NAME(selectedIndex,"selectedIndex");
	HX_MARK_MEMBER_NAME(selectedName,"selectedName");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(selectedStyle,"selectedStyle");
	HX_MARK_MEMBER_NAME(hoverStyle,"hoverStyle");
	HX_MARK_MEMBER_NAME(unselectedStyle,"unselectedStyle");
	HX_MARK_MEMBER_NAME(canMove,"canMove");
	HX_MARK_MEMBER_NAME(canMinimize,"canMinimize");
	HX_MARK_MEMBER_NAME(isMinimized,"isMinimized");
	HX_MARK_MEMBER_NAME(minimizeOnFocusLost,"minimizeOnFocusLost");
	HX_MARK_MEMBER_NAME(_draggingPos,"_draggingPos");
	HX_MARK_MEMBER_NAME(_draggingPoint,"_draggingPoint");
	HX_MARK_MEMBER_NAME(_pressedBox,"_pressedBox");
	HX_MARK_MEMBER_NAME(_draggingBox,"_draggingBox");
	HX_MARK_MEMBER_NAME(_lastTab,"_lastTab");
	HX_MARK_MEMBER_NAME(_lastClick,"_lastClick");
	HX_MARK_MEMBER_NAME(forceCheckNext,"forceCheckNext");
	HX_MARK_MEMBER_NAME(broadcastBoxEvents,"broadcastBoxEvents");
	HX_MARK_MEMBER_NAME(tabHeight,"tabHeight");
	HX_MARK_MEMBER_NAME(_originalHeight,"_originalHeight");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PsychUIBox_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tabs,"tabs");
	HX_VISIT_MEMBER_NAME(selectedTab,"selectedTab");
	HX_VISIT_MEMBER_NAME(selectedIndex,"selectedIndex");
	HX_VISIT_MEMBER_NAME(selectedName,"selectedName");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(selectedStyle,"selectedStyle");
	HX_VISIT_MEMBER_NAME(hoverStyle,"hoverStyle");
	HX_VISIT_MEMBER_NAME(unselectedStyle,"unselectedStyle");
	HX_VISIT_MEMBER_NAME(canMove,"canMove");
	HX_VISIT_MEMBER_NAME(canMinimize,"canMinimize");
	HX_VISIT_MEMBER_NAME(isMinimized,"isMinimized");
	HX_VISIT_MEMBER_NAME(minimizeOnFocusLost,"minimizeOnFocusLost");
	HX_VISIT_MEMBER_NAME(_draggingPos,"_draggingPos");
	HX_VISIT_MEMBER_NAME(_draggingPoint,"_draggingPoint");
	HX_VISIT_MEMBER_NAME(_pressedBox,"_pressedBox");
	HX_VISIT_MEMBER_NAME(_draggingBox,"_draggingBox");
	HX_VISIT_MEMBER_NAME(_lastTab,"_lastTab");
	HX_VISIT_MEMBER_NAME(_lastClick,"_lastClick");
	HX_VISIT_MEMBER_NAME(forceCheckNext,"forceCheckNext");
	HX_VISIT_MEMBER_NAME(broadcastBoxEvents,"broadcastBoxEvents");
	HX_VISIT_MEMBER_NAME(tabHeight,"tabHeight");
	HX_VISIT_MEMBER_NAME(_originalHeight,"_originalHeight");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PsychUIBox_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"tabs") ) { return ::hx::Val( tabs ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"addTab") ) { return ::hx::Val( addTab_dyn() ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return ::hx::Val( resize_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTab") ) { return ::hx::Val( getTab_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"canMove") ) { return ::hx::Val( canMove ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_lastTab") ) { return ::hx::Val( _lastTab ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tabHeight") ) { return ::hx::Val( tabHeight ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hoverStyle") ) { return ::hx::Val( hoverStyle ); }
		if (HX_FIELD_EQ(inName,"_lastClick") ) { return ::hx::Val( _lastClick ); }
		if (HX_FIELD_EQ(inName,"set_camera") ) { return ::hx::Val( set_camera_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateTabs") ) { return ::hx::Val( updateTabs_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"selectedTab") ) { return ::hx::Val( selectedTab ); }
		if (HX_FIELD_EQ(inName,"canMinimize") ) { return ::hx::Val( canMinimize ); }
		if (HX_FIELD_EQ(inName,"isMinimized") ) { return ::hx::Val( isMinimized ); }
		if (HX_FIELD_EQ(inName,"_pressedBox") ) { return ::hx::Val( _pressedBox ); }
		if (HX_FIELD_EQ(inName,"set_cameras") ) { return ::hx::Val( set_cameras_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"selectedName") ) { return ::hx::Val( selectedName ); }
		if (HX_FIELD_EQ(inName,"_draggingPos") ) { return ::hx::Val( _draggingPos ); }
		if (HX_FIELD_EQ(inName,"_draggingBox") ) { return ::hx::Val( _draggingBox ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectedIndex") ) { return ::hx::Val( selectedIndex ); }
		if (HX_FIELD_EQ(inName,"selectedStyle") ) { return ::hx::Val( selectedStyle ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_draggingPoint") ) { return ::hx::Val( _draggingPoint ); }
		if (HX_FIELD_EQ(inName,"forceCheckNext") ) { return ::hx::Val( forceCheckNext ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unselectedStyle") ) { return ::hx::Val( unselectedStyle ); }
		if (HX_FIELD_EQ(inName,"_originalHeight") ) { return ::hx::Val( _originalHeight ); }
		if (HX_FIELD_EQ(inName,"set_selectedTab") ) { return ::hx::Val( set_selectedTab_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_canMinimize") ) { return ::hx::Val( set_canMinimize_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_isMinimized") ) { return ::hx::Val( set_isMinimized_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"set_selectedName") ) { return ::hx::Val( set_selectedName_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"set_selectedIndex") ) { return ::hx::Val( set_selectedIndex_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"broadcastBoxEvents") ) { return ::hx::Val( broadcastBoxEvents ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"minimizeOnFocusLost") ) { return ::hx::Val( minimizeOnFocusLost ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PsychUIBox_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"DRAG_EVENT") ) { outValue = ( DRAG_EVENT ); return true; }
		if (HX_FIELD_EQ(inName,"DROP_EVENT") ) { outValue = ( DROP_EVENT ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"CLICK_EVENT") ) { outValue = ( CLICK_EVENT ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"MINIMIZE_EVENT") ) { outValue = ( MINIMIZE_EVENT ); return true; }
	}
	return false;
}

::hx::Val PsychUIBox_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"tabs") ) { tabs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"canMove") ) { canMove=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_lastTab") ) { _lastTab=inValue.Cast<  ::backend::ui::PsychUITab >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tabHeight") ) { tabHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hoverStyle") ) { hoverStyle=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lastClick") ) { _lastClick=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"selectedTab") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selectedTab(inValue.Cast<  ::backend::ui::PsychUITab >()) );selectedTab=inValue.Cast<  ::backend::ui::PsychUITab >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canMinimize") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_canMinimize(inValue.Cast< bool >()) );canMinimize=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isMinimized") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_isMinimized(inValue.Cast< bool >()) );isMinimized=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_pressedBox") ) { _pressedBox=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"selectedName") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selectedName(inValue.Cast< ::String >()) );selectedName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_draggingPos") ) { _draggingPos=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_draggingBox") ) { _draggingBox=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectedIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_selectedIndex(inValue.Cast< int >()) );selectedIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectedStyle") ) { selectedStyle=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_draggingPoint") ) { _draggingPoint=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"forceCheckNext") ) { forceCheckNext=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unselectedStyle") ) { unselectedStyle=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_originalHeight") ) { _originalHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"broadcastBoxEvents") ) { broadcastBoxEvents=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"minimizeOnFocusLost") ) { minimizeOnFocusLost=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PsychUIBox_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"DRAG_EVENT") ) { DRAG_EVENT=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"DROP_EVENT") ) { DROP_EVENT=ioValue.Cast< ::String >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"CLICK_EVENT") ) { CLICK_EVENT=ioValue.Cast< ::String >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"MINIMIZE_EVENT") ) { MINIMIZE_EVENT=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void PsychUIBox_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("tabs",7e,b0,f6,4c));
	outFields->push(HX_("selectedTab",ba,92,0f,30));
	outFields->push(HX_("selectedIndex",b7,76,56,b4));
	outFields->push(HX_("selectedName",46,92,99,d9));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("selectedStyle",d6,80,5f,7a));
	outFields->push(HX_("hoverStyle",d5,e5,1f,06));
	outFields->push(HX_("unselectedStyle",dd,56,d9,37));
	outFields->push(HX_("canMove",41,cb,b8,66));
	outFields->push(HX_("canMinimize",4e,ff,20,51));
	outFields->push(HX_("isMinimized",3c,b2,1e,07));
	outFields->push(HX_("minimizeOnFocusLost",3f,76,48,45));
	outFields->push(HX_("_draggingPos",06,32,db,9f));
	outFields->push(HX_("_draggingPoint",42,09,89,b2));
	outFields->push(HX_("_pressedBox",a8,41,79,86));
	outFields->push(HX_("_draggingBox",7d,92,d0,9f));
	outFields->push(HX_("_lastTab",20,fb,65,11));
	outFields->push(HX_("_lastClick",d3,25,ae,f0));
	outFields->push(HX_("forceCheckNext",70,66,de,08));
	outFields->push(HX_("broadcastBoxEvents",43,70,8f,98));
	outFields->push(HX_("tabHeight",1c,c4,98,63));
	outFields->push(HX_("_originalHeight",b7,8b,92,83));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PsychUIBox_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PsychUIBox_obj,tabs),HX_("tabs",7e,b0,f6,4c)},
	{::hx::fsObject /*  ::backend::ui::PsychUITab */ ,(int)offsetof(PsychUIBox_obj,selectedTab),HX_("selectedTab",ba,92,0f,30)},
	{::hx::fsInt,(int)offsetof(PsychUIBox_obj,selectedIndex),HX_("selectedIndex",b7,76,56,b4)},
	{::hx::fsString,(int)offsetof(PsychUIBox_obj,selectedName),HX_("selectedName",46,92,99,d9)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PsychUIBox_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PsychUIBox_obj,selectedStyle),HX_("selectedStyle",d6,80,5f,7a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PsychUIBox_obj,hoverStyle),HX_("hoverStyle",d5,e5,1f,06)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PsychUIBox_obj,unselectedStyle),HX_("unselectedStyle",dd,56,d9,37)},
	{::hx::fsBool,(int)offsetof(PsychUIBox_obj,canMove),HX_("canMove",41,cb,b8,66)},
	{::hx::fsBool,(int)offsetof(PsychUIBox_obj,canMinimize),HX_("canMinimize",4e,ff,20,51)},
	{::hx::fsBool,(int)offsetof(PsychUIBox_obj,isMinimized),HX_("isMinimized",3c,b2,1e,07)},
	{::hx::fsBool,(int)offsetof(PsychUIBox_obj,minimizeOnFocusLost),HX_("minimizeOnFocusLost",3f,76,48,45)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(PsychUIBox_obj,_draggingPos),HX_("_draggingPos",06,32,db,9f)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(PsychUIBox_obj,_draggingPoint),HX_("_draggingPoint",42,09,89,b2)},
	{::hx::fsBool,(int)offsetof(PsychUIBox_obj,_pressedBox),HX_("_pressedBox",a8,41,79,86)},
	{::hx::fsBool,(int)offsetof(PsychUIBox_obj,_draggingBox),HX_("_draggingBox",7d,92,d0,9f)},
	{::hx::fsObject /*  ::backend::ui::PsychUITab */ ,(int)offsetof(PsychUIBox_obj,_lastTab),HX_("_lastTab",20,fb,65,11)},
	{::hx::fsFloat,(int)offsetof(PsychUIBox_obj,_lastClick),HX_("_lastClick",d3,25,ae,f0)},
	{::hx::fsBool,(int)offsetof(PsychUIBox_obj,forceCheckNext),HX_("forceCheckNext",70,66,de,08)},
	{::hx::fsBool,(int)offsetof(PsychUIBox_obj,broadcastBoxEvents),HX_("broadcastBoxEvents",43,70,8f,98)},
	{::hx::fsInt,(int)offsetof(PsychUIBox_obj,tabHeight),HX_("tabHeight",1c,c4,98,63)},
	{::hx::fsInt,(int)offsetof(PsychUIBox_obj,_originalHeight),HX_("_originalHeight",b7,8b,92,83)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PsychUIBox_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &PsychUIBox_obj::CLICK_EVENT,HX_("CLICK_EVENT",63,89,c0,0d)},
	{::hx::fsString,(void *) &PsychUIBox_obj::MINIMIZE_EVENT,HX_("MINIMIZE_EVENT",d9,40,a2,77)},
	{::hx::fsString,(void *) &PsychUIBox_obj::DRAG_EVENT,HX_("DRAG_EVENT",2f,aa,f8,a2)},
	{::hx::fsString,(void *) &PsychUIBox_obj::DROP_EVENT,HX_("DROP_EVENT",aa,14,fc,39)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PsychUIBox_obj_sMemberFields[] = {
	HX_("tabs",7e,b0,f6,4c),
	HX_("selectedTab",ba,92,0f,30),
	HX_("selectedIndex",b7,76,56,b4),
	HX_("selectedName",46,92,99,d9),
	HX_("bg",c5,55,00,00),
	HX_("selectedStyle",d6,80,5f,7a),
	HX_("hoverStyle",d5,e5,1f,06),
	HX_("unselectedStyle",dd,56,d9,37),
	HX_("canMove",41,cb,b8,66),
	HX_("canMinimize",4e,ff,20,51),
	HX_("isMinimized",3c,b2,1e,07),
	HX_("minimizeOnFocusLost",3f,76,48,45),
	HX_("_draggingPos",06,32,db,9f),
	HX_("_draggingPoint",42,09,89,b2),
	HX_("_pressedBox",a8,41,79,86),
	HX_("_draggingBox",7d,92,d0,9f),
	HX_("_lastTab",20,fb,65,11),
	HX_("_lastClick",d3,25,ae,f0),
	HX_("forceCheckNext",70,66,de,08),
	HX_("broadcastBoxEvents",43,70,8f,98),
	HX_("update",09,86,05,87),
	HX_("set_cameras",51,f1,98,73),
	HX_("set_camera",e2,54,91,ab),
	HX_("draw",04,2c,70,42),
	HX_("destroy",fa,2c,86,24),
	HX_("addTab",b4,6a,09,9f),
	HX_("tabHeight",1c,c4,98,63),
	HX_("updateTabs",27,9b,ab,05),
	HX_("_originalHeight",b7,8b,92,83),
	HX_("resize",f4,59,7b,08),
	HX_("set_selectedTab",5d,c7,bc,ec),
	HX_("set_selectedName",43,6c,7a,34),
	HX_("set_selectedIndex",1a,5a,34,de),
	HX_("getTab",5f,93,27,a3),
	HX_("set_canMinimize",f1,33,ce,0d),
	HX_("set_isMinimized",df,e6,cb,c3),
	::String(null()) };

static void PsychUIBox_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PsychUIBox_obj::CLICK_EVENT,"CLICK_EVENT");
	HX_MARK_MEMBER_NAME(PsychUIBox_obj::MINIMIZE_EVENT,"MINIMIZE_EVENT");
	HX_MARK_MEMBER_NAME(PsychUIBox_obj::DRAG_EVENT,"DRAG_EVENT");
	HX_MARK_MEMBER_NAME(PsychUIBox_obj::DROP_EVENT,"DROP_EVENT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PsychUIBox_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PsychUIBox_obj::CLICK_EVENT,"CLICK_EVENT");
	HX_VISIT_MEMBER_NAME(PsychUIBox_obj::MINIMIZE_EVENT,"MINIMIZE_EVENT");
	HX_VISIT_MEMBER_NAME(PsychUIBox_obj::DRAG_EVENT,"DRAG_EVENT");
	HX_VISIT_MEMBER_NAME(PsychUIBox_obj::DROP_EVENT,"DROP_EVENT");
};

#endif

::hx::Class PsychUIBox_obj::__mClass;

static ::String PsychUIBox_obj_sStaticFields[] = {
	HX_("CLICK_EVENT",63,89,c0,0d),
	HX_("MINIMIZE_EVENT",d9,40,a2,77),
	HX_("DRAG_EVENT",2f,aa,f8,a2),
	HX_("DROP_EVENT",aa,14,fc,39),
	::String(null())
};

void PsychUIBox_obj::__register()
{
	PsychUIBox_obj _hx_dummy;
	PsychUIBox_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.ui.PsychUIBox",1c,27,57,90);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PsychUIBox_obj::__GetStatic;
	__mClass->mSetStaticField = &PsychUIBox_obj::__SetStatic;
	__mClass->mMarkFunc = PsychUIBox_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PsychUIBox_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PsychUIBox_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PsychUIBox_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PsychUIBox_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PsychUIBox_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PsychUIBox_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PsychUIBox_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_443dafccdf08a324_11_boot)
HXDLIN(  11)		CLICK_EVENT = HX_("uibox_click",00,4b,d1,13);
            	}
{
            	HX_STACKFRAME(&_hx_pos_443dafccdf08a324_12_boot)
HXDLIN(  12)		MINIMIZE_EVENT = HX_("uibox_minimize",66,73,da,2c);
            	}
{
            	HX_STACKFRAME(&_hx_pos_443dafccdf08a324_13_boot)
HXDLIN(  13)		DRAG_EVENT = HX_("uibox_drag",3c,9c,7f,44);
            	}
{
            	HX_STACKFRAME(&_hx_pos_443dafccdf08a324_14_boot)
HXDLIN(  14)		DROP_EVENT = HX_("uibox_drop",77,a8,7f,44);
            	}
}

} // end namespace backend
} // end namespace ui
