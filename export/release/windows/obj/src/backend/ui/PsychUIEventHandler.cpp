// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_backend_ui_PsychUIEventHandler
#include <backend/ui/PsychUIEventHandler.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_3fac475c293fc180_6_event,"backend.ui.PsychUIEventHandler","event",0xb8cf760b,"backend.ui.PsychUIEventHandler.event","backend/ui/PsychUIEventHandler.hx",6,0x87ee2b1f)
namespace backend{
namespace ui{

void PsychUIEventHandler_obj::__construct() { }

Dynamic PsychUIEventHandler_obj::__CreateEmpty() { return new PsychUIEventHandler_obj; }

void *PsychUIEventHandler_obj::_hx_vtable = 0;

Dynamic PsychUIEventHandler_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PsychUIEventHandler_obj > _hx_result = new PsychUIEventHandler_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PsychUIEventHandler_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7945f577;
}

void PsychUIEventHandler_obj::event(::String id, ::Dynamic sender){
            	HX_STACKFRAME(&_hx_pos_3fac475c293fc180_6_event)
HXLINE(   7)		 ::Dynamic state = ::flixel::FlxG_obj::game->_state;
HXLINE(   8)		if (::hx::IsNull( state )) {
HXLINE(   8)			return;
            		}
HXLINE(  10)		while(::hx::IsNotNull( state->__Field(HX_("subState",71,cc,2a,f9),::hx::paccDynamic) )){
HXLINE(  11)			state =  ::Dynamic(state->__Field(HX_("subState",71,cc,2a,f9),::hx::paccDynamic));
            		}
HXLINE(  13)		bool _hx_tmp;
HXDLIN(  13)		if (::hx::IsNotNull( state )) {
HXLINE(  13)			_hx_tmp = ::hx::IsNotNull( state->__Field(HX_("UIEvent",26,fd,9f,07),::hx::paccDynamic) );
            		}
            		else {
HXLINE(  13)			_hx_tmp = false;
            		}
HXDLIN(  13)		if (_hx_tmp) {
HXLINE(  14)			state->__Field(HX_("UIEvent",26,fd,9f,07),::hx::paccDynamic)(id,sender);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PsychUIEventHandler_obj,event,(void))


PsychUIEventHandler_obj::PsychUIEventHandler_obj()
{
}

bool PsychUIEventHandler_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"event") ) { outValue = event_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *PsychUIEventHandler_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *PsychUIEventHandler_obj_sStaticStorageInfo = 0;
#endif

::hx::Class PsychUIEventHandler_obj::__mClass;

static ::String PsychUIEventHandler_obj_sStaticFields[] = {
	HX_("event",1a,c8,c4,75),
	::String(null())
};

void PsychUIEventHandler_obj::__register()
{
	PsychUIEventHandler_obj _hx_dummy;
	PsychUIEventHandler_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.ui.PsychUIEventHandler",9f,13,bb,34);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PsychUIEventHandler_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PsychUIEventHandler_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< PsychUIEventHandler_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PsychUIEventHandler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PsychUIEventHandler_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace backend
} // end namespace ui
