// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_flxanimate_zip_Zip
#include <flxanimate/zip/Zip.h>
#endif
#ifndef INCLUDED_haxe_ds_List
#include <haxe/ds/List.h>
#endif
#ifndef INCLUDED_haxe_ds__List_ListNode
#include <haxe/ds/_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesInput
#include <haxe/io/BytesInput.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_zip_Reader
#include <haxe/zip/Reader.h>
#endif
#ifndef INCLUDED_lime__internal_format_Deflate
#include <lime/_internal/format/Deflate.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fce00c9f322def71_16_new,"flxanimate.zip.Zip","new",0x8f287b27,"flxanimate.zip.Zip.new","flxanimate/zip/Zip.hx",16,0x3e09482b)
HX_LOCAL_STACK_FRAME(_hx_pos_fce00c9f322def71_24_readZipDate,"flxanimate.zip.Zip","readZipDate",0x95f3d2c0,"flxanimate.zip.Zip.readZipDate","flxanimate/zip/Zip.hx",24,0x3e09482b)
HX_LOCAL_STACK_FRAME(_hx_pos_fce00c9f322def71_30_readExtraFields,"flxanimate.zip.Zip","readExtraFields",0x2f6d22ba,"flxanimate.zip.Zip.readExtraFields","flxanimate/zip/Zip.hx",30,0x3e09482b)
HX_LOCAL_STACK_FRAME(_hx_pos_fce00c9f322def71_35_readEntryHeader,"flxanimate.zip.Zip","readEntryHeader",0x0ef91130,"flxanimate.zip.Zip.readEntryHeader","flxanimate/zip/Zip.hx",35,0x3e09482b)
HX_LOCAL_STACK_FRAME(_hx_pos_fce00c9f322def71_40_read,"flxanimate.zip.Zip","read",0xb6e80eaf,"flxanimate.zip.Zip.read","flxanimate/zip/Zip.hx",40,0x3e09482b)
HX_LOCAL_STACK_FRAME(_hx_pos_fce00c9f322def71_44_readZip,"flxanimate.zip.Zip","readZip",0x3f05af72,"flxanimate.zip.Zip.readZip","flxanimate/zip/Zip.hx",44,0x3e09482b)
HX_LOCAL_STACK_FRAME(_hx_pos_fce00c9f322def71_49_unzip,"flxanimate.zip.Zip","unzip",0x145e70af,"flxanimate.zip.Zip.unzip","flxanimate/zip/Zip.hx",49,0x3e09482b)
namespace flxanimate{
namespace zip{

void Zip_obj::__construct( ::haxe::io::Input i){
            	HX_GC_STACKFRAME(&_hx_pos_fce00c9f322def71_16_new)
HXLINE(  17)		this->i = i;
HXLINE(  18)		this->reader =  ::haxe::zip::Reader_obj::__alloc( HX_CTX ,i);
            	}

Dynamic Zip_obj::__CreateEmpty() { return new Zip_obj; }

void *Zip_obj::_hx_vtable = 0;

Dynamic Zip_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Zip_obj > _hx_result = new Zip_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Zip_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x024ba087;
}

 ::Date Zip_obj::readZipDate(){
            	HX_STACKFRAME(&_hx_pos_fce00c9f322def71_24_readZipDate)
HXDLIN(  24)		return this->reader->readZipDate();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zip_obj,readZipDate,return )

 ::haxe::ds::List Zip_obj::readExtraFields(int length){
            	HX_STACKFRAME(&_hx_pos_fce00c9f322def71_30_readExtraFields)
HXDLIN(  30)		return this->reader->readExtraFields(length);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Zip_obj,readExtraFields,return )

 ::Dynamic Zip_obj::readEntryHeader(){
            	HX_STACKFRAME(&_hx_pos_fce00c9f322def71_35_readEntryHeader)
HXDLIN(  35)		return this->reader->readEntryHeader();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zip_obj,readEntryHeader,return )

 ::haxe::ds::List Zip_obj::read(){
            	HX_STACKFRAME(&_hx_pos_fce00c9f322def71_40_read)
HXDLIN(  40)		return this->reader->read();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Zip_obj,read,return )

 ::haxe::ds::List Zip_obj::readZip( ::haxe::io::Bytes i){
            	HX_GC_STACKFRAME(&_hx_pos_fce00c9f322def71_44_readZip)
HXLINE(  45)		 ::haxe::zip::Reader r =  ::haxe::zip::Reader_obj::__alloc( HX_CTX , ::haxe::io::BytesInput_obj::__alloc( HX_CTX ,i,null(),null()));
HXLINE(  46)		return r->read();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Zip_obj,readZip,return )

 ::haxe::ds::List Zip_obj::unzip( ::haxe::ds::List f){
            	HX_STACKFRAME(&_hx_pos_fce00c9f322def71_49_unzip)
HXLINE(  50)		{
HXLINE(  50)			 ::haxe::ds::_List::ListNode _g_head = f->h;
HXDLIN(  50)			while(::hx::IsNotNull( _g_head )){
HXLINE(  50)				 ::Dynamic val = _g_head->item;
HXDLIN(  50)				_g_head = _g_head->next;
HXDLIN(  50)				 ::Dynamic list = val;
HXLINE(  52)				if (( (bool)(list->__Field(HX_("compressed",81,4c,da,67),::hx::paccDynamic)) )) {
HXLINE(  63)					list->__SetField(HX_("data",2a,56,63,42),::lime::_internal::format::Deflate_obj::decompress(( ( ::haxe::io::Bytes)(list->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic)) )),::hx::paccDynamic);
HXLINE(  65)					list->__SetField(HX_("compressed",81,4c,da,67),false,::hx::paccDynamic);
HXLINE(  66)					list->__SetField(HX_("dataSize",0b,80,c7,8b),list->__Field(HX_("fileSize",5d,89,97,65),::hx::paccDynamic),::hx::paccDynamic);
            				}
            			}
            		}
HXLINE(  69)		return f;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Zip_obj,unzip,return )


::hx::ObjectPtr< Zip_obj > Zip_obj::__new( ::haxe::io::Input i) {
	::hx::ObjectPtr< Zip_obj > __this = new Zip_obj();
	__this->__construct(i);
	return __this;
}

::hx::ObjectPtr< Zip_obj > Zip_obj::__alloc(::hx::Ctx *_hx_ctx, ::haxe::io::Input i) {
	Zip_obj *__this = (Zip_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Zip_obj), true, "flxanimate.zip.Zip"));
	*(void **)__this = Zip_obj::_hx_vtable;
	__this->__construct(i);
	return __this;
}

Zip_obj::Zip_obj()
{
}

void Zip_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Zip);
	HX_MARK_MEMBER_NAME(i,"i");
	HX_MARK_MEMBER_NAME(reader,"reader");
	HX_MARK_END_CLASS();
}

void Zip_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(i,"i");
	HX_VISIT_MEMBER_NAME(reader,"reader");
}

::hx::Val Zip_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { return ::hx::Val( i ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { return ::hx::Val( read_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"reader") ) { return ::hx::Val( reader ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"readZipDate") ) { return ::hx::Val( readZipDate_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"readExtraFields") ) { return ::hx::Val( readExtraFields_dyn() ); }
		if (HX_FIELD_EQ(inName,"readEntryHeader") ) { return ::hx::Val( readEntryHeader_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Zip_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"unzip") ) { outValue = unzip_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"readZip") ) { outValue = readZip_dyn(); return true; }
	}
	return false;
}

::hx::Val Zip_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { i=inValue.Cast<  ::haxe::io::Input >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"reader") ) { reader=inValue.Cast<  ::haxe::zip::Reader >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Zip_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("i",69,00,00,00));
	outFields->push(HX_("reader",43,a5,91,fc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Zip_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::io::Input */ ,(int)offsetof(Zip_obj,i),HX_("i",69,00,00,00)},
	{::hx::fsObject /*  ::haxe::zip::Reader */ ,(int)offsetof(Zip_obj,reader),HX_("reader",43,a5,91,fc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Zip_obj_sStaticStorageInfo = 0;
#endif

static ::String Zip_obj_sMemberFields[] = {
	HX_("i",69,00,00,00),
	HX_("reader",43,a5,91,fc),
	HX_("readZipDate",f9,88,bc,c9),
	HX_("readExtraFields",73,e9,9f,a6),
	HX_("readEntryHeader",e9,d7,2b,86),
	HX_("read",56,4b,a7,4b),
	::String(null()) };

::hx::Class Zip_obj::__mClass;

static ::String Zip_obj_sStaticFields[] = {
	HX_("readZip",2b,95,d6,02),
	HX_("unzip",28,46,f4,a6),
	::String(null())
};

void Zip_obj::__register()
{
	Zip_obj _hx_dummy;
	Zip_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.zip.Zip",b5,5b,1c,84);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Zip_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Zip_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Zip_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Zip_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Zip_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Zip_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flxanimate
} // end namespace zip
