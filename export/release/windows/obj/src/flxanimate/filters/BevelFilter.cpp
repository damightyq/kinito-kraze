// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flxanimate_filters_BevelFilter
#include <flxanimate/filters/BevelFilter.h>
#endif
#ifndef INCLUDED_flxanimate_filters__BevelFilter_BevelShader
#include <flxanimate/filters/_BevelFilter/BevelShader.h>
#endif
#ifndef INCLUDED_flxanimate_filters__BevelFilter_CombineShader
#include <flxanimate/filters/_BevelFilter/CombineShader.h>
#endif
#ifndef INCLUDED_flxanimate_filters__BevelFilter_FullCombineShader
#include <flxanimate/filters/_BevelFilter/FullCombineShader.h>
#endif
#ifndef INCLUDED_flxanimate_filters__BevelFilter_InnerCombineShader
#include <flxanimate/filters/_BevelFilter/InnerCombineShader.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Int
#include <openfl/display/ShaderParameter_Int.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilterShader
#include <openfl/filters/BitmapFilterShader.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_openfl_filters__BitmapFilterType_BitmapFilterType_Impl_
#include <openfl/filters/_BitmapFilterType/BitmapFilterType_Impl_.h>
#endif
#ifndef INCLUDED_openfl_filters__GlowFilter_BlurAlphaShader
#include <openfl/filters/_GlowFilter/BlurAlphaShader.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b504f1b291c3a690_288_new,"flxanimate.filters.BevelFilter","new",0x06ca1bf2,"flxanimate.filters.BevelFilter.new","flxanimate/filters/BevelFilter.hx",288,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_315_clone,"flxanimate.filters.BevelFilter","clone",0x91b0e76f,"flxanimate.filters.BevelFilter.clone","flxanimate/filters/BevelFilter.hx",315,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_321___initShader,"flxanimate.filters.BevelFilter","__initShader",0x505a47a3,"flxanimate.filters.BevelFilter.__initShader","flxanimate/filters/BevelFilter.hx",321,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_377___updateSize,"flxanimate.filters.BevelFilter","__updateSize",0x33fcb8b8,"flxanimate.filters.BevelFilter.__updateSize","flxanimate/filters/BevelFilter.hx",377,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_388___calculateNumShaderPasses,"flxanimate.filters.BevelFilter","__calculateNumShaderPasses",0xcfacfaf2,"flxanimate.filters.BevelFilter.__calculateNumShaderPasses","flxanimate/filters/BevelFilter.hx",388,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_396_get_angle,"flxanimate.filters.BevelFilter","get_angle",0x2a89e53c,"flxanimate.filters.BevelFilter.get_angle","flxanimate/filters/BevelFilter.hx",396,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_400_set_angle,"flxanimate.filters.BevelFilter","set_angle",0x0ddad148,"flxanimate.filters.BevelFilter.set_angle","flxanimate/filters/BevelFilter.hx",400,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_412_get_blurX,"flxanimate.filters.BevelFilter","get_blurX",0xbca8b13a,"flxanimate.filters.BevelFilter.get_blurX","flxanimate/filters/BevelFilter.hx",412,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_416_set_blurX,"flxanimate.filters.BevelFilter","set_blurX",0x9ff99d46,"flxanimate.filters.BevelFilter.set_blurX","flxanimate/filters/BevelFilter.hx",416,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_428_get_blurY,"flxanimate.filters.BevelFilter","get_blurY",0xbca8b13b,"flxanimate.filters.BevelFilter.get_blurY","flxanimate/filters/BevelFilter.hx",428,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_432_set_blurY,"flxanimate.filters.BevelFilter","set_blurY",0x9ff99d47,"flxanimate.filters.BevelFilter.set_blurY","flxanimate/filters/BevelFilter.hx",432,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_444_get_distance,"flxanimate.filters.BevelFilter","get_distance",0x1773f96c,"flxanimate.filters.BevelFilter.get_distance","flxanimate/filters/BevelFilter.hx",444,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_448_set_distance,"flxanimate.filters.BevelFilter","set_distance",0x2c6d1ce0,"flxanimate.filters.BevelFilter.set_distance","flxanimate/filters/BevelFilter.hx",448,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_460_get_highlightAlpha,"flxanimate.filters.BevelFilter","get_highlightAlpha",0x22c22e01,"flxanimate.filters.BevelFilter.get_highlightAlpha","flxanimate/filters/BevelFilter.hx",460,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_464_set_highlightAlpha,"flxanimate.filters.BevelFilter","set_highlightAlpha",0xff716075,"flxanimate.filters.BevelFilter.set_highlightAlpha","flxanimate/filters/BevelFilter.hx",464,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_471_get_highlightColor,"flxanimate.filters.BevelFilter","get_highlightColor",0x4b87f806,"flxanimate.filters.BevelFilter.get_highlightColor","flxanimate/filters/BevelFilter.hx",471,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_475_set_highlightColor,"flxanimate.filters.BevelFilter","set_highlightColor",0x28372a7a,"flxanimate.filters.BevelFilter.set_highlightColor","flxanimate/filters/BevelFilter.hx",475,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_482_get_knockout,"flxanimate.filters.BevelFilter","get_knockout",0x1b201031,"flxanimate.filters.BevelFilter.get_knockout","flxanimate/filters/BevelFilter.hx",482,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_486_set_knockout,"flxanimate.filters.BevelFilter","set_knockout",0x301933a5,"flxanimate.filters.BevelFilter.set_knockout","flxanimate/filters/BevelFilter.hx",486,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_493_get_quality,"flxanimate.filters.BevelFilter","get_quality",0x3e2d9268,"flxanimate.filters.BevelFilter.get_quality","flxanimate/filters/BevelFilter.hx",493,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_497_set_quality,"flxanimate.filters.BevelFilter","set_quality",0x489a9974,"flxanimate.filters.BevelFilter.set_quality","flxanimate/filters/BevelFilter.hx",497,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_504_get_shadowAlpha,"flxanimate.filters.BevelFilter","get_shadowAlpha",0x6546d987,"flxanimate.filters.BevelFilter.get_shadowAlpha","flxanimate/filters/BevelFilter.hx",504,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_508_set_shadowAlpha,"flxanimate.filters.BevelFilter","set_shadowAlpha",0x61125693,"flxanimate.filters.BevelFilter.set_shadowAlpha","flxanimate/filters/BevelFilter.hx",508,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_515_get_shadowColor,"flxanimate.filters.BevelFilter","get_shadowColor",0x8e0ca38c,"flxanimate.filters.BevelFilter.get_shadowColor","flxanimate/filters/BevelFilter.hx",515,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_519_set_shadowColor,"flxanimate.filters.BevelFilter","set_shadowColor",0x89d82098,"flxanimate.filters.BevelFilter.set_shadowColor","flxanimate/filters/BevelFilter.hx",519,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_526_get_strength,"flxanimate.filters.BevelFilter","get_strength",0x3a0938b8,"flxanimate.filters.BevelFilter.get_strength","flxanimate/filters/BevelFilter.hx",526,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_530_set_strength,"flxanimate.filters.BevelFilter","set_strength",0x4f025c2c,"flxanimate.filters.BevelFilter.set_strength","flxanimate/filters/BevelFilter.hx",530,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_537_get_type,"flxanimate.filters.BevelFilter","get_type",0xbeb83171,"flxanimate.filters.BevelFilter.get_type","flxanimate/filters/BevelFilter.hx",537,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_541_set_type,"flxanimate.filters.BevelFilter","set_type",0x6d158ae5,"flxanimate.filters.BevelFilter.set_type","flxanimate/filters/BevelFilter.hx",541,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_63_boot,"flxanimate.filters.BevelFilter","boot",0xe2275860,"flxanimate.filters.BevelFilter.boot","flxanimate/filters/BevelFilter.hx",63,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_64_boot,"flxanimate.filters.BevelFilter","boot",0xe2275860,"flxanimate.filters.BevelFilter.boot","flxanimate/filters/BevelFilter.hx",64,0xf3eb9040)
HX_LOCAL_STACK_FRAME(_hx_pos_b504f1b291c3a690_65_boot,"flxanimate.filters.BevelFilter","boot",0xe2275860,"flxanimate.filters.BevelFilter.boot","flxanimate/filters/BevelFilter.hx",65,0xf3eb9040)
namespace flxanimate{
namespace filters{

void BevelFilter_obj::__construct(::hx::Null< Float >  __o_distance,::hx::Null< Float >  __o_angle,::hx::Null< int >  __o_highlightColor,::hx::Null< Float >  __o_highlightAlpha,::hx::Null< int >  __o_shadowColor,::hx::Null< Float >  __o_shadowAlpha,::hx::Null< Float >  __o_blurX,::hx::Null< Float >  __o_blurY,::hx::Null< Float >  __o_strength,::hx::Null< int >  __o_quality,::String __o_type,::hx::Null< bool >  __o_knockout){
            		Float distance = __o_distance.Default(4);
            		Float angle = __o_angle.Default(45);
            		int highlightColor = __o_highlightColor.Default(16777215);
            		Float highlightAlpha = __o_highlightAlpha.Default(1);
            		int shadowColor = __o_shadowColor.Default(0);
            		Float shadowAlpha = __o_shadowAlpha.Default(1);
            		Float blurX = __o_blurX.Default(4);
            		Float blurY = __o_blurY.Default(4);
            		Float strength = __o_strength.Default(1);
            		int quality = __o_quality.Default(1);
            		::String type = __o_type;
            		if (::hx::IsNull(__o_type)) type = HX_("inner",96,31,1c,be);
            		bool knockout = __o_knockout.Default(false);
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_288_new)
HXLINE( 289)		super::__construct();
HXLINE( 291)		this->_hx___offsetX = ( (Float)(0) );
HXLINE( 292)		this->_hx___offsetY = ( (Float)(0) );
HXLINE( 294)		this->_hx___distance = distance;
HXLINE( 295)		this->_hx___angle = angle;
HXLINE( 296)		this->_hx___highlightColor = highlightColor;
HXLINE( 297)		this->_hx___highlightAlpha = highlightAlpha;
HXLINE( 298)		this->_hx___shadowColor = shadowColor;
HXLINE( 299)		this->_hx___shadowAlpha = shadowAlpha;
HXLINE( 300)		this->_hx___blurX = blurX;
HXLINE( 301)		this->_hx___blurY = blurY;
HXLINE( 302)		this->_hx___strength = strength;
HXLINE( 303)		this->_hx___quality = quality;
HXLINE( 304)		this->_hx___type = type;
HXLINE( 305)		this->_hx___knockout = knockout;
HXLINE( 307)		this->_hx___updateSize();
HXLINE( 309)		this->_hx___needSecondBitmapData = true;
HXLINE( 310)		this->_hx___preserveObject = true;
HXLINE( 311)		this->_hx___renderDirty = true;
            	}

Dynamic BevelFilter_obj::__CreateEmpty() { return new BevelFilter_obj; }

void *BevelFilter_obj::_hx_vtable = 0;

Dynamic BevelFilter_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BevelFilter_obj > _hx_result = new BevelFilter_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11]);
	return _hx_result;
}

bool BevelFilter_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x26de6bd2) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x26de6bd2;
	} else {
		return inClassId==(int)0x7a9caf86;
	}
}

 ::openfl::filters::BitmapFilter BevelFilter_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_b504f1b291c3a690_315_clone)
HXDLIN( 315)		return  ::flxanimate::filters::BevelFilter_obj::__alloc( HX_CTX ,this->_hx___distance,this->_hx___angle,this->_hx___highlightColor,this->_hx___highlightAlpha,this->_hx___shadowColor,this->_hx___shadowAlpha,this->_hx___blurX,this->_hx___blurY,this->_hx___strength,this->_hx___quality,this->_hx___type,this->_hx___knockout);
            	}


 ::openfl::display::Shader BevelFilter_obj::_hx___initShader( ::openfl::display::DisplayObjectRenderer renderer,int pass, ::openfl::display::BitmapData sourceBitmapData){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_321___initShader)
HXLINE( 323)		if ((pass < (this->_hx___horizontalPasses + this->_hx___verticalPasses))) {
HXLINE( 325)			 ::openfl::filters::_GlowFilter::BlurAlphaShader shader = ::openfl::filters::GlowFilter_obj::_hx___blurAlphaShader;
HXLINE( 326)			if ((pass < this->_hx___horizontalPasses)) {
HXLINE( 328)				Float scale = (::Math_obj::pow(((Float)0.5),( (Float)((pass >> 1)) )) * ((Float)0.5));
HXLINE( 329)				shader->uRadius->value[0] = (this->get_blurX() * scale);
HXLINE( 330)				shader->uRadius->value[1] = ( (Float)(0) );
            			}
            			else {
HXLINE( 334)				Float scale1 = (::Math_obj::pow(((Float)0.5),( (Float)(((pass - this->_hx___horizontalPasses) >> 1)) )) * ((Float)0.5));
HXLINE( 335)				shader->uRadius->value[0] = ( (Float)(0) );
HXLINE( 336)				shader->uRadius->value[1] = (this->get_blurY() * scale1);
            			}
HXLINE( 338)			shader->uColor->value[3] = ( (Float)(1) );
HXLINE( 340)			shader->uStrength->value[0] = ((Float)1.0);
HXLINE( 341)			return shader;
            		}
HXLINE( 344)		 ::flxanimate::filters::_BevelFilter::BevelShader shader1;
HXDLIN( 344)		 ::Dynamic _hx_switch_0 = ::openfl::filters::_BitmapFilterType::BitmapFilterType_Impl__obj::fromString(this->_hx___type);
            		if (  (_hx_switch_0==0) ){
HXLINE( 344)			shader1 = ::flxanimate::filters::BevelFilter_obj::_hx___fullCombineShader;
HXDLIN( 344)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==1) ){
HXLINE( 344)			shader1 = ::flxanimate::filters::BevelFilter_obj::_hx___innerCombineShader;
HXDLIN( 344)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==2) ){
HXLINE( 344)			shader1 = ::flxanimate::filters::BevelFilter_obj::_hx___combineShader;
HXDLIN( 344)			goto _hx_goto_2;
            		}
            		/* default */{
HXLINE( 344)			shader1 = null();
            		}
            		_hx_goto_2:;
HXLINE( 352)		if (::hx::IsNotNull( shader1 )) {
HXLINE( 354)			shader1->sourceBitmap->input = sourceBitmapData;
HXLINE( 355)			shader1->uColorH->value[0] = (( (Float)(((this->get_highlightColor() >> 16) & 255)) ) / ( (Float)(255) ));
HXLINE( 356)			shader1->uColorH->value[1] = (( (Float)(((this->get_highlightColor() >> 8) & 255)) ) / ( (Float)(255) ));
HXLINE( 357)			shader1->uColorH->value[2] = (( (Float)((this->get_highlightColor() & 255)) ) / ( (Float)(255) ));
HXLINE( 358)			shader1->uColorH->value[3] = this->get_highlightAlpha();
HXLINE( 360)			shader1->uColorS->value[0] = (( (Float)(((this->get_shadowColor() >> 16) & 255)) ) / ( (Float)(255) ));
HXLINE( 361)			shader1->uColorS->value[1] = (( (Float)(((this->get_shadowColor() >> 8) & 255)) ) / ( (Float)(255) ));
HXLINE( 362)			shader1->uColorS->value[2] = (( (Float)((this->get_shadowColor() & 255)) ) / ( (Float)(255) ));
HXLINE( 363)			shader1->uColorS->value[3] = this->get_shadowAlpha();
HXLINE( 364)			shader1->uStrength->value[0] = this->_hx___strength;
HXLINE( 366)			int _hx_tmp;
HXDLIN( 366)			if (this->_hx___knockout) {
HXLINE( 366)				_hx_tmp = 1;
            			}
            			else {
HXLINE( 366)				_hx_tmp = 0;
            			}
HXDLIN( 366)			shader1->knockout->value[0] = _hx_tmp;
HXLINE( 367)			shader1->offset->value[0] = this->_hx___offsetX;
HXLINE( 368)			shader1->offset->value[1] = this->_hx___offsetY;
            		}
HXLINE( 371)		return shader1;
            	}


void BevelFilter_obj::_hx___updateSize(){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_377___updateSize)
HXLINE( 378)		this->_hx___offsetX = ( (Float)(::Std_obj::_hx_int((this->_hx___distance * ::Math_obj::cos(((this->_hx___angle * ::Math_obj::PI) / ( (Float)(180) )))))) );
HXLINE( 379)		this->_hx___offsetY = ( (Float)(::Std_obj::_hx_int((this->_hx___distance * ::Math_obj::sin(((this->_hx___angle * ::Math_obj::PI) / ( (Float)(180) )))))) );
HXLINE( 380)		int _hx_tmp;
HXDLIN( 380)		if (::hx::IsNotEq( ::openfl::filters::_BitmapFilterType::BitmapFilterType_Impl__obj::fromString(this->get_type()),1 )) {
HXLINE( 380)			_hx_tmp = ::Math_obj::ceil((::Math_obj::abs(this->_hx___offsetY) + this->_hx___blurY));
            		}
            		else {
HXLINE( 380)			_hx_tmp = 0;
            		}
HXDLIN( 380)		this->_hx___topExtension = _hx_tmp;
HXLINE( 381)		this->_hx___bottomExtension = this->_hx___topExtension;
HXLINE( 382)		int _hx_tmp1;
HXDLIN( 382)		if (::hx::IsNotEq( ::openfl::filters::_BitmapFilterType::BitmapFilterType_Impl__obj::fromString(this->get_type()),1 )) {
HXLINE( 382)			_hx_tmp1 = ::Math_obj::ceil((::Math_obj::abs(this->_hx___offsetX) + this->_hx___blurX));
            		}
            		else {
HXLINE( 382)			_hx_tmp1 = 0;
            		}
HXDLIN( 382)		this->_hx___leftExtension = _hx_tmp1;
HXLINE( 383)		this->_hx___rightExtension = this->_hx___leftExtension;
HXLINE( 384)		this->_hx___calculateNumShaderPasses();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BevelFilter_obj,_hx___updateSize,(void))

void BevelFilter_obj::_hx___calculateNumShaderPasses(){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_388___calculateNumShaderPasses)
HXLINE( 389)		int _hx_tmp;
HXDLIN( 389)		if ((this->_hx___blurX <= 0)) {
HXLINE( 389)			_hx_tmp = 0;
            		}
            		else {
HXLINE( 389)			_hx_tmp = (::Math_obj::round((this->_hx___blurX * (( (Float)(this->_hx___quality) ) / ( (Float)(4) )))) + 1);
            		}
HXDLIN( 389)		this->_hx___horizontalPasses = _hx_tmp;
HXLINE( 390)		int _hx_tmp1;
HXDLIN( 390)		if ((this->_hx___blurY <= 0)) {
HXLINE( 390)			_hx_tmp1 = 0;
            		}
            		else {
HXLINE( 390)			_hx_tmp1 = (::Math_obj::round((this->_hx___blurY * (( (Float)(this->_hx___quality) ) / ( (Float)(4) )))) + 1);
            		}
HXDLIN( 390)		this->_hx___verticalPasses = _hx_tmp1;
HXLINE( 391)		this->_hx___numShaderPasses = ((this->_hx___horizontalPasses + this->_hx___verticalPasses) + 1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BevelFilter_obj,_hx___calculateNumShaderPasses,(void))

Float BevelFilter_obj::get_angle(){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_396_get_angle)
HXDLIN( 396)		return this->_hx___angle;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BevelFilter_obj,get_angle,return )

Float BevelFilter_obj::set_angle(Float value){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_400_set_angle)
HXLINE( 401)		if ((value != this->_hx___angle)) {
HXLINE( 403)			this->_hx___angle = value;
HXLINE( 404)			this->_hx___renderDirty = true;
HXLINE( 405)			this->_hx___updateSize();
            		}
HXLINE( 407)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BevelFilter_obj,set_angle,return )

Float BevelFilter_obj::get_blurX(){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_412_get_blurX)
HXDLIN( 412)		return this->_hx___blurX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BevelFilter_obj,get_blurX,return )

Float BevelFilter_obj::set_blurX(Float value){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_416_set_blurX)
HXLINE( 417)		if ((value != this->_hx___blurX)) {
HXLINE( 419)			this->_hx___blurX = value;
HXLINE( 420)			this->_hx___renderDirty = true;
HXLINE( 421)			this->_hx___updateSize();
            		}
HXLINE( 423)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BevelFilter_obj,set_blurX,return )

Float BevelFilter_obj::get_blurY(){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_428_get_blurY)
HXDLIN( 428)		return this->_hx___blurY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BevelFilter_obj,get_blurY,return )

Float BevelFilter_obj::set_blurY(Float value){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_432_set_blurY)
HXLINE( 433)		if ((value != this->_hx___blurY)) {
HXLINE( 435)			this->_hx___blurY = value;
HXLINE( 436)			this->_hx___renderDirty = true;
HXLINE( 437)			this->_hx___updateSize();
            		}
HXLINE( 439)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BevelFilter_obj,set_blurY,return )

Float BevelFilter_obj::get_distance(){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_444_get_distance)
HXDLIN( 444)		return this->_hx___distance;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BevelFilter_obj,get_distance,return )

Float BevelFilter_obj::set_distance(Float value){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_448_set_distance)
HXLINE( 449)		if ((value != this->_hx___distance)) {
HXLINE( 451)			this->_hx___distance = value;
HXLINE( 452)			this->_hx___renderDirty = true;
HXLINE( 453)			this->_hx___updateSize();
            		}
HXLINE( 455)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BevelFilter_obj,set_distance,return )

Float BevelFilter_obj::get_highlightAlpha(){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_460_get_highlightAlpha)
HXDLIN( 460)		return this->_hx___highlightAlpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BevelFilter_obj,get_highlightAlpha,return )

Float BevelFilter_obj::set_highlightAlpha(Float value){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_464_set_highlightAlpha)
HXLINE( 465)		if ((value != this->_hx___highlightAlpha)) {
HXLINE( 465)			this->_hx___renderDirty = true;
            		}
HXLINE( 466)		return (this->_hx___highlightAlpha = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BevelFilter_obj,set_highlightAlpha,return )

int BevelFilter_obj::get_highlightColor(){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_471_get_highlightColor)
HXDLIN( 471)		return this->_hx___highlightColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BevelFilter_obj,get_highlightColor,return )

int BevelFilter_obj::set_highlightColor(int value){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_475_set_highlightColor)
HXLINE( 476)		if ((value != this->_hx___highlightColor)) {
HXLINE( 476)			this->_hx___renderDirty = true;
            		}
HXLINE( 477)		return (this->_hx___highlightColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BevelFilter_obj,set_highlightColor,return )

bool BevelFilter_obj::get_knockout(){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_482_get_knockout)
HXDLIN( 482)		return this->_hx___knockout;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BevelFilter_obj,get_knockout,return )

bool BevelFilter_obj::set_knockout(bool value){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_486_set_knockout)
HXLINE( 487)		if ((value != this->_hx___knockout)) {
HXLINE( 487)			this->_hx___renderDirty = true;
            		}
HXLINE( 488)		return (this->_hx___knockout = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BevelFilter_obj,set_knockout,return )

int BevelFilter_obj::get_quality(){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_493_get_quality)
HXDLIN( 493)		return this->_hx___quality;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BevelFilter_obj,get_quality,return )

int BevelFilter_obj::set_quality(int value){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_497_set_quality)
HXLINE( 498)		if ((value != this->_hx___quality)) {
HXLINE( 498)			this->_hx___renderDirty = true;
            		}
HXLINE( 499)		return (this->_hx___quality = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BevelFilter_obj,set_quality,return )

Float BevelFilter_obj::get_shadowAlpha(){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_504_get_shadowAlpha)
HXDLIN( 504)		return this->_hx___shadowAlpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BevelFilter_obj,get_shadowAlpha,return )

Float BevelFilter_obj::set_shadowAlpha(Float value){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_508_set_shadowAlpha)
HXLINE( 509)		if ((value != this->_hx___shadowAlpha)) {
HXLINE( 509)			this->_hx___renderDirty = true;
            		}
HXLINE( 510)		return (this->_hx___shadowAlpha = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BevelFilter_obj,set_shadowAlpha,return )

int BevelFilter_obj::get_shadowColor(){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_515_get_shadowColor)
HXDLIN( 515)		return this->_hx___shadowColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BevelFilter_obj,get_shadowColor,return )

int BevelFilter_obj::set_shadowColor(int value){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_519_set_shadowColor)
HXLINE( 520)		if ((value != this->_hx___shadowColor)) {
HXLINE( 520)			this->_hx___renderDirty = true;
            		}
HXLINE( 521)		return (this->_hx___shadowColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BevelFilter_obj,set_shadowColor,return )

Float BevelFilter_obj::get_strength(){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_526_get_strength)
HXDLIN( 526)		return this->_hx___strength;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BevelFilter_obj,get_strength,return )

Float BevelFilter_obj::set_strength(Float value){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_530_set_strength)
HXLINE( 531)		if ((value != this->_hx___strength)) {
HXLINE( 531)			this->_hx___renderDirty = true;
            		}
HXLINE( 532)		return (this->_hx___strength = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BevelFilter_obj,set_strength,return )

::String BevelFilter_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_537_get_type)
HXDLIN( 537)		return this->_hx___type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BevelFilter_obj,get_type,return )

::String BevelFilter_obj::set_type(::String value){
            	HX_STACKFRAME(&_hx_pos_b504f1b291c3a690_541_set_type)
HXLINE( 542)		if ((value != this->_hx___type)) {
HXLINE( 544)			this->_hx___type = value;
HXLINE( 545)			this->_hx___renderDirty = true;
HXLINE( 546)			this->_hx___updateSize();
            		}
HXLINE( 548)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BevelFilter_obj,set_type,return )

 ::flxanimate::filters::_BevelFilter::FullCombineShader BevelFilter_obj::_hx___fullCombineShader;

 ::flxanimate::filters::_BevelFilter::InnerCombineShader BevelFilter_obj::_hx___innerCombineShader;

 ::flxanimate::filters::_BevelFilter::CombineShader BevelFilter_obj::_hx___combineShader;


::hx::ObjectPtr< BevelFilter_obj > BevelFilter_obj::__new(::hx::Null< Float >  __o_distance,::hx::Null< Float >  __o_angle,::hx::Null< int >  __o_highlightColor,::hx::Null< Float >  __o_highlightAlpha,::hx::Null< int >  __o_shadowColor,::hx::Null< Float >  __o_shadowAlpha,::hx::Null< Float >  __o_blurX,::hx::Null< Float >  __o_blurY,::hx::Null< Float >  __o_strength,::hx::Null< int >  __o_quality,::String __o_type,::hx::Null< bool >  __o_knockout) {
	::hx::ObjectPtr< BevelFilter_obj > __this = new BevelFilter_obj();
	__this->__construct(__o_distance,__o_angle,__o_highlightColor,__o_highlightAlpha,__o_shadowColor,__o_shadowAlpha,__o_blurX,__o_blurY,__o_strength,__o_quality,__o_type,__o_knockout);
	return __this;
}

::hx::ObjectPtr< BevelFilter_obj > BevelFilter_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_distance,::hx::Null< Float >  __o_angle,::hx::Null< int >  __o_highlightColor,::hx::Null< Float >  __o_highlightAlpha,::hx::Null< int >  __o_shadowColor,::hx::Null< Float >  __o_shadowAlpha,::hx::Null< Float >  __o_blurX,::hx::Null< Float >  __o_blurY,::hx::Null< Float >  __o_strength,::hx::Null< int >  __o_quality,::String __o_type,::hx::Null< bool >  __o_knockout) {
	BevelFilter_obj *__this = (BevelFilter_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BevelFilter_obj), true, "flxanimate.filters.BevelFilter"));
	*(void **)__this = BevelFilter_obj::_hx_vtable;
	__this->__construct(__o_distance,__o_angle,__o_highlightColor,__o_highlightAlpha,__o_shadowColor,__o_shadowAlpha,__o_blurX,__o_blurY,__o_strength,__o_quality,__o_type,__o_knockout);
	return __this;
}

BevelFilter_obj::BevelFilter_obj()
{
}

void BevelFilter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BevelFilter);
	HX_MARK_MEMBER_NAME(_hx___angle,"__angle");
	HX_MARK_MEMBER_NAME(_hx___blurX,"__blurX");
	HX_MARK_MEMBER_NAME(_hx___blurY,"__blurY");
	HX_MARK_MEMBER_NAME(_hx___distance,"__distance");
	HX_MARK_MEMBER_NAME(_hx___highlightAlpha,"__highlightAlpha");
	HX_MARK_MEMBER_NAME(_hx___highlightColor,"__highlightColor");
	HX_MARK_MEMBER_NAME(_hx___knockout,"__knockout");
	HX_MARK_MEMBER_NAME(_hx___quality,"__quality");
	HX_MARK_MEMBER_NAME(_hx___shadowAlpha,"__shadowAlpha");
	HX_MARK_MEMBER_NAME(_hx___shadowColor,"__shadowColor");
	HX_MARK_MEMBER_NAME(_hx___strength,"__strength");
	HX_MARK_MEMBER_NAME(_hx___type,"__type");
	HX_MARK_MEMBER_NAME(_hx___horizontalPasses,"__horizontalPasses");
	HX_MARK_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_MARK_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_MARK_MEMBER_NAME(_hx___verticalPasses,"__verticalPasses");
	 ::openfl::filters::BitmapFilter_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BevelFilter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___angle,"__angle");
	HX_VISIT_MEMBER_NAME(_hx___blurX,"__blurX");
	HX_VISIT_MEMBER_NAME(_hx___blurY,"__blurY");
	HX_VISIT_MEMBER_NAME(_hx___distance,"__distance");
	HX_VISIT_MEMBER_NAME(_hx___highlightAlpha,"__highlightAlpha");
	HX_VISIT_MEMBER_NAME(_hx___highlightColor,"__highlightColor");
	HX_VISIT_MEMBER_NAME(_hx___knockout,"__knockout");
	HX_VISIT_MEMBER_NAME(_hx___quality,"__quality");
	HX_VISIT_MEMBER_NAME(_hx___shadowAlpha,"__shadowAlpha");
	HX_VISIT_MEMBER_NAME(_hx___shadowColor,"__shadowColor");
	HX_VISIT_MEMBER_NAME(_hx___strength,"__strength");
	HX_VISIT_MEMBER_NAME(_hx___type,"__type");
	HX_VISIT_MEMBER_NAME(_hx___horizontalPasses,"__horizontalPasses");
	HX_VISIT_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_VISIT_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_VISIT_MEMBER_NAME(_hx___verticalPasses,"__verticalPasses");
	 ::openfl::filters::BitmapFilter_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val BevelFilter_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_type() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"angle") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_angle() ); }
		if (HX_FIELD_EQ(inName,"blurX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_blurX() ); }
		if (HX_FIELD_EQ(inName,"blurY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_blurY() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__type") ) { return ::hx::Val( _hx___type ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_quality() ); }
		if (HX_FIELD_EQ(inName,"__angle") ) { return ::hx::Val( _hx___angle ); }
		if (HX_FIELD_EQ(inName,"__blurX") ) { return ::hx::Val( _hx___blurX ); }
		if (HX_FIELD_EQ(inName,"__blurY") ) { return ::hx::Val( _hx___blurY ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_distance() ); }
		if (HX_FIELD_EQ(inName,"knockout") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_knockout() ); }
		if (HX_FIELD_EQ(inName,"strength") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_strength() ); }
		if (HX_FIELD_EQ(inName,"get_type") ) { return ::hx::Val( get_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return ::hx::Val( set_type_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__quality") ) { return ::hx::Val( _hx___quality ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { return ::hx::Val( _hx___offsetX ); }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { return ::hx::Val( _hx___offsetY ); }
		if (HX_FIELD_EQ(inName,"get_angle") ) { return ::hx::Val( get_angle_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_angle") ) { return ::hx::Val( set_angle_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_blurX") ) { return ::hx::Val( get_blurX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blurX") ) { return ::hx::Val( set_blurX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_blurY") ) { return ::hx::Val( get_blurY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blurY") ) { return ::hx::Val( set_blurY_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__distance") ) { return ::hx::Val( _hx___distance ); }
		if (HX_FIELD_EQ(inName,"__knockout") ) { return ::hx::Val( _hx___knockout ); }
		if (HX_FIELD_EQ(inName,"__strength") ) { return ::hx::Val( _hx___strength ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"shadowAlpha") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_shadowAlpha() ); }
		if (HX_FIELD_EQ(inName,"shadowColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_shadowColor() ); }
		if (HX_FIELD_EQ(inName,"get_quality") ) { return ::hx::Val( get_quality_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_quality") ) { return ::hx::Val( set_quality_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initShader") ) { return ::hx::Val( _hx___initShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateSize") ) { return ::hx::Val( _hx___updateSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_distance") ) { return ::hx::Val( get_distance_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_distance") ) { return ::hx::Val( set_distance_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_knockout") ) { return ::hx::Val( get_knockout_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_knockout") ) { return ::hx::Val( set_knockout_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_strength") ) { return ::hx::Val( get_strength_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_strength") ) { return ::hx::Val( set_strength_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__shadowAlpha") ) { return ::hx::Val( _hx___shadowAlpha ); }
		if (HX_FIELD_EQ(inName,"__shadowColor") ) { return ::hx::Val( _hx___shadowColor ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"highlightAlpha") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_highlightAlpha() ); }
		if (HX_FIELD_EQ(inName,"highlightColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_highlightColor() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_shadowAlpha") ) { return ::hx::Val( get_shadowAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_shadowAlpha") ) { return ::hx::Val( set_shadowAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_shadowColor") ) { return ::hx::Val( get_shadowColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_shadowColor") ) { return ::hx::Val( set_shadowColor_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__highlightAlpha") ) { return ::hx::Val( _hx___highlightAlpha ); }
		if (HX_FIELD_EQ(inName,"__highlightColor") ) { return ::hx::Val( _hx___highlightColor ); }
		if (HX_FIELD_EQ(inName,"__verticalPasses") ) { return ::hx::Val( _hx___verticalPasses ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__horizontalPasses") ) { return ::hx::Val( _hx___horizontalPasses ); }
		if (HX_FIELD_EQ(inName,"get_highlightAlpha") ) { return ::hx::Val( get_highlightAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_highlightAlpha") ) { return ::hx::Val( set_highlightAlpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_highlightColor") ) { return ::hx::Val( get_highlightColor_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_highlightColor") ) { return ::hx::Val( set_highlightColor_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__calculateNumShaderPasses") ) { return ::hx::Val( _hx___calculateNumShaderPasses_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BevelFilter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"__combineShader") ) { outValue = ( _hx___combineShader ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__fullCombineShader") ) { outValue = ( _hx___fullCombineShader ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__innerCombineShader") ) { outValue = ( _hx___innerCombineShader ); return true; }
	}
	return false;
}

::hx::Val BevelFilter_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_type(inValue.Cast< ::String >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"angle") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_angle(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"blurX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_blurX(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"blurY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_blurY(inValue.Cast< Float >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__type") ) { _hx___type=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_quality(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__angle") ) { _hx___angle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__blurX") ) { _hx___blurX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__blurY") ) { _hx___blurY=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_distance(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"knockout") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_knockout(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"strength") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_strength(inValue.Cast< Float >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__quality") ) { _hx___quality=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { _hx___offsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { _hx___offsetY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__distance") ) { _hx___distance=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__knockout") ) { _hx___knockout=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__strength") ) { _hx___strength=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"shadowAlpha") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_shadowAlpha(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"shadowColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_shadowColor(inValue.Cast< int >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__shadowAlpha") ) { _hx___shadowAlpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__shadowColor") ) { _hx___shadowColor=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"highlightAlpha") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_highlightAlpha(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"highlightColor") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_highlightColor(inValue.Cast< int >()) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__highlightAlpha") ) { _hx___highlightAlpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__highlightColor") ) { _hx___highlightColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__verticalPasses") ) { _hx___verticalPasses=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__horizontalPasses") ) { _hx___horizontalPasses=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BevelFilter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"__combineShader") ) { _hx___combineShader=ioValue.Cast<  ::flxanimate::filters::_BevelFilter::CombineShader >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__fullCombineShader") ) { _hx___fullCombineShader=ioValue.Cast<  ::flxanimate::filters::_BevelFilter::FullCombineShader >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__innerCombineShader") ) { _hx___innerCombineShader=ioValue.Cast<  ::flxanimate::filters::_BevelFilter::InnerCombineShader >(); return true; }
	}
	return false;
}

void BevelFilter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("angle",d3,43,e2,22));
	outFields->push(HX_("blurX",d1,0f,01,b5));
	outFields->push(HX_("blurY",d2,0f,01,b5));
	outFields->push(HX_("distance",35,93,f9,6b));
	outFields->push(HX_("highlightAlpha",8a,c4,5a,23));
	outFields->push(HX_("highlightColor",8f,8e,20,4c));
	outFields->push(HX_("knockout",fa,a9,a5,6f));
	outFields->push(HX_("quality",bf,04,4c,44));
	outFields->push(HX_("shadowAlpha",5e,c3,62,98));
	outFields->push(HX_("shadowColor",63,8d,28,c1));
	outFields->push(HX_("strength",81,d2,8e,8e));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("__angle",b3,9c,40,8d));
	outFields->push(HX_("__blurX",b1,68,5f,1f));
	outFields->push(HX_("__blurY",b2,68,5f,1f));
	outFields->push(HX_("__distance",55,06,32,0f));
	outFields->push(HX_("__highlightAlpha",aa,4f,9a,57));
	outFields->push(HX_("__highlightColor",af,19,60,80));
	outFields->push(HX_("__knockout",1a,1d,de,12));
	outFields->push(HX_("__quality",9f,55,9a,c5));
	outFields->push(HX_("__shadowAlpha",3e,04,db,e0));
	outFields->push(HX_("__shadowColor",43,ce,a0,09));
	outFields->push(HX_("__strength",a1,45,c7,31));
	outFields->push(HX_("__type",da,55,01,fc));
	outFields->push(HX_("__horizontalPasses",a3,9a,5d,02));
	outFields->push(HX_("__offsetX",45,5a,b3,58));
	outFields->push(HX_("__offsetY",46,5a,b3,58));
	outFields->push(HX_("__verticalPasses",b5,4b,f5,ec));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BevelFilter_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(BevelFilter_obj,_hx___angle),HX_("__angle",b3,9c,40,8d)},
	{::hx::fsFloat,(int)offsetof(BevelFilter_obj,_hx___blurX),HX_("__blurX",b1,68,5f,1f)},
	{::hx::fsFloat,(int)offsetof(BevelFilter_obj,_hx___blurY),HX_("__blurY",b2,68,5f,1f)},
	{::hx::fsFloat,(int)offsetof(BevelFilter_obj,_hx___distance),HX_("__distance",55,06,32,0f)},
	{::hx::fsFloat,(int)offsetof(BevelFilter_obj,_hx___highlightAlpha),HX_("__highlightAlpha",aa,4f,9a,57)},
	{::hx::fsInt,(int)offsetof(BevelFilter_obj,_hx___highlightColor),HX_("__highlightColor",af,19,60,80)},
	{::hx::fsBool,(int)offsetof(BevelFilter_obj,_hx___knockout),HX_("__knockout",1a,1d,de,12)},
	{::hx::fsInt,(int)offsetof(BevelFilter_obj,_hx___quality),HX_("__quality",9f,55,9a,c5)},
	{::hx::fsFloat,(int)offsetof(BevelFilter_obj,_hx___shadowAlpha),HX_("__shadowAlpha",3e,04,db,e0)},
	{::hx::fsInt,(int)offsetof(BevelFilter_obj,_hx___shadowColor),HX_("__shadowColor",43,ce,a0,09)},
	{::hx::fsFloat,(int)offsetof(BevelFilter_obj,_hx___strength),HX_("__strength",a1,45,c7,31)},
	{::hx::fsString,(int)offsetof(BevelFilter_obj,_hx___type),HX_("__type",da,55,01,fc)},
	{::hx::fsInt,(int)offsetof(BevelFilter_obj,_hx___horizontalPasses),HX_("__horizontalPasses",a3,9a,5d,02)},
	{::hx::fsFloat,(int)offsetof(BevelFilter_obj,_hx___offsetX),HX_("__offsetX",45,5a,b3,58)},
	{::hx::fsFloat,(int)offsetof(BevelFilter_obj,_hx___offsetY),HX_("__offsetY",46,5a,b3,58)},
	{::hx::fsInt,(int)offsetof(BevelFilter_obj,_hx___verticalPasses),HX_("__verticalPasses",b5,4b,f5,ec)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo BevelFilter_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::flxanimate::filters::_BevelFilter::FullCombineShader */ ,(void *) &BevelFilter_obj::_hx___fullCombineShader,HX_("__fullCombineShader",d5,48,54,f5)},
	{::hx::fsObject /*  ::flxanimate::filters::_BevelFilter::InnerCombineShader */ ,(void *) &BevelFilter_obj::_hx___innerCombineShader,HX_("__innerCombineShader",ae,ba,10,cf)},
	{::hx::fsObject /*  ::flxanimate::filters::_BevelFilter::CombineShader */ ,(void *) &BevelFilter_obj::_hx___combineShader,HX_("__combineShader",e4,ff,b6,50)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String BevelFilter_obj_sMemberFields[] = {
	HX_("__angle",b3,9c,40,8d),
	HX_("__blurX",b1,68,5f,1f),
	HX_("__blurY",b2,68,5f,1f),
	HX_("__distance",55,06,32,0f),
	HX_("__highlightAlpha",aa,4f,9a,57),
	HX_("__highlightColor",af,19,60,80),
	HX_("__knockout",1a,1d,de,12),
	HX_("__quality",9f,55,9a,c5),
	HX_("__shadowAlpha",3e,04,db,e0),
	HX_("__shadowColor",43,ce,a0,09),
	HX_("__strength",a1,45,c7,31),
	HX_("__type",da,55,01,fc),
	HX_("__horizontalPasses",a3,9a,5d,02),
	HX_("__offsetX",45,5a,b3,58),
	HX_("__offsetY",46,5a,b3,58),
	HX_("__verticalPasses",b5,4b,f5,ec),
	HX_("clone",5d,13,63,48),
	HX_("__initShader",75,95,f9,59),
	HX_("__updateSize",8a,06,9c,3d),
	HX_("__calculateNumShaderPasses",44,14,02,b7),
	HX_("get_angle",2a,a0,8b,66),
	HX_("set_angle",36,8c,dc,49),
	HX_("get_blurX",28,6c,aa,f8),
	HX_("set_blurX",34,58,fb,db),
	HX_("get_blurY",29,6c,aa,f8),
	HX_("set_blurY",35,58,fb,db),
	HX_("get_distance",3e,47,13,21),
	HX_("set_distance",b2,6a,0c,36),
	HX_("get_highlightAlpha",53,a5,f4,be),
	HX_("set_highlightAlpha",c7,d7,a3,9b),
	HX_("get_highlightColor",58,6f,ba,e7),
	HX_("set_highlightColor",cc,a1,69,c4),
	HX_("get_knockout",03,5e,bf,24),
	HX_("set_knockout",77,81,b8,39),
	HX_("get_quality",d6,64,46,ca),
	HX_("set_quality",e2,6b,b3,d4),
	HX_("get_shadowAlpha",f5,7a,44,59),
	HX_("set_shadowAlpha",01,f8,0f,55),
	HX_("get_shadowColor",fa,44,0a,82),
	HX_("set_shadowColor",06,c2,d5,7d),
	HX_("get_strength",8a,86,a8,43),
	HX_("set_strength",fe,a9,a1,58),
	HX_("get_type",43,ae,c3,cc),
	HX_("set_type",b7,07,21,7b),
	::String(null()) };

static void BevelFilter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BevelFilter_obj::_hx___fullCombineShader,"__fullCombineShader");
	HX_MARK_MEMBER_NAME(BevelFilter_obj::_hx___innerCombineShader,"__innerCombineShader");
	HX_MARK_MEMBER_NAME(BevelFilter_obj::_hx___combineShader,"__combineShader");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BevelFilter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BevelFilter_obj::_hx___fullCombineShader,"__fullCombineShader");
	HX_VISIT_MEMBER_NAME(BevelFilter_obj::_hx___innerCombineShader,"__innerCombineShader");
	HX_VISIT_MEMBER_NAME(BevelFilter_obj::_hx___combineShader,"__combineShader");
};

#endif

::hx::Class BevelFilter_obj::__mClass;

static ::String BevelFilter_obj_sStaticFields[] = {
	HX_("__fullCombineShader",d5,48,54,f5),
	HX_("__innerCombineShader",ae,ba,10,cf),
	HX_("__combineShader",e4,ff,b6,50),
	::String(null())
};

void BevelFilter_obj::__register()
{
	BevelFilter_obj _hx_dummy;
	BevelFilter_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.filters.BevelFilter",00,fb,74,0a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BevelFilter_obj::__GetStatic;
	__mClass->mSetStaticField = &BevelFilter_obj::__SetStatic;
	__mClass->mMarkFunc = BevelFilter_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BevelFilter_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BevelFilter_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BevelFilter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BevelFilter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BevelFilter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BevelFilter_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BevelFilter_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_b504f1b291c3a690_63_boot)
HXDLIN(  63)		_hx___fullCombineShader =  ::flxanimate::filters::_BevelFilter::FullCombineShader_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_b504f1b291c3a690_64_boot)
HXDLIN(  64)		_hx___innerCombineShader =  ::flxanimate::filters::_BevelFilter::InnerCombineShader_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_b504f1b291c3a690_65_boot)
HXDLIN(  65)		_hx___combineShader =  ::flxanimate::filters::_BevelFilter::CombineShader_obj::__alloc( HX_CTX );
            	}
}

} // end namespace flxanimate
} // end namespace filters
