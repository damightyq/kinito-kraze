// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_flxanimate_filters__BevelFilter_BevelShader
#include <flxanimate/filters/_BevelFilter/BevelShader.h>
#endif
#ifndef INCLUDED_flxanimate_filters__BevelFilter_FullCombineShader
#include <flxanimate/filters/_BevelFilter/FullCombineShader.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilterShader
#include <openfl/filters/BitmapFilterShader.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_92f60814d97055ad_624_new,"flxanimate.filters._BevelFilter.FullCombineShader","new",0xa65bfebe,"flxanimate.filters._BevelFilter.FullCombineShader.new","flxanimate/filters/BevelFilter.hx",624,0xf3eb9040)
namespace flxanimate{
namespace filters{
namespace _BevelFilter{

void FullCombineShader_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_92f60814d97055ad_624_new)
HXLINE( 182)		if (::hx::IsNull( this->_hx___glFragmentSource )) {
HXLINE( 184)			this->_hx___glFragmentSource = HX_("\r\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\r\n\t\tuniform vec4 uColorH;\r\n\t\tuniform vec4 uColorS;\r\n\t\tuniform float uStrength;\r\n\t\tuniform int knockout;\r\n\t\tuniform sampler2D sourceBitmap;\r\n\t\tvarying vec4 textureCoords;\r\n\t\n\r\n\r\n\t\tvoid main(void) {\r\n\r\n\t\t\tgl_FragColor = texture2D (openfl_Texture, openfl_TextureCoordv);\n\r\n\t\tfloat HA = texture2D(openfl_Texture, textureCoords.zw).a * uStrength;\r\n\t\tfloat SA = texture2D(openfl_Texture, textureCoords.xy).a * uStrength;\r\n\r\n\t\tfloat a = SA;\r\n\r\n\r\n\t\tSA -= HA;\r\n\t\tHA -= a;\r\n\r\n\t\tSA = clamp(SA, 0., 1.);\r\n\t\tHA = clamp(HA, 0., 1.);\r\n\r\n\r\n\t\tvec4 bevel = ((uColorS * SA) + (uColorH * HA));\r\n\r\n\t\tvec4 src = texture2D(sourceBitmap, openfl_TextureCoordv);\r\n\t\n\r\n\r\n\t\t\tif (knockout == 0)\r\n\t\t\t\tgl_FragColor = src + bevel;\r\n\t\t\telse\r\n\t\t\t\tgl_FragColor = bevel;\r\n\t\t}\r\n\t",be,c9,aa,04);
            		}
HXLINE( 174)		if (::hx::IsNull( this->_hx___glVertexSource )) {
HXLINE( 176)			this->_hx___glVertexSource = HX_("attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\r\n\t\tuniform vec2 offset;\r\n\t\tvarying vec4 textureCoords;\r\n\t\n\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\ntextureCoords = vec4(openfl_TextureCoord - offset / openfl_TextureSize, openfl_TextureCoord + offset / openfl_TextureSize);\n\n\n\t\t}",66,aa,6f,a6);
            		}
HXLINE( 625)		super::__construct();
HXLINE( 608)		this->_hx___isGenerated = true;
HXDLIN( 608)		this->_hx___initGL();
            	}

Dynamic FullCombineShader_obj::__CreateEmpty() { return new FullCombineShader_obj; }

void *FullCombineShader_obj::_hx_vtable = 0;

Dynamic FullCombineShader_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FullCombineShader_obj > _hx_result = new FullCombineShader_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FullCombineShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x22d20f42) {
		if (inClassId<=(int)0x02778b94) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x02778b94;
		} else {
			return inClassId==(int)0x22d20f42;
		}
	} else {
		return inClassId==(int)0x253b4db3 || inClassId==(int)0x78d8d737;
	}
}


::hx::ObjectPtr< FullCombineShader_obj > FullCombineShader_obj::__new() {
	::hx::ObjectPtr< FullCombineShader_obj > __this = new FullCombineShader_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< FullCombineShader_obj > FullCombineShader_obj::__alloc(::hx::Ctx *_hx_ctx) {
	FullCombineShader_obj *__this = (FullCombineShader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FullCombineShader_obj), true, "flxanimate.filters._BevelFilter.FullCombineShader"));
	*(void **)__this = FullCombineShader_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FullCombineShader_obj::FullCombineShader_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FullCombineShader_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FullCombineShader_obj_sStaticStorageInfo = 0;
#endif

::hx::Class FullCombineShader_obj::__mClass;

void FullCombineShader_obj::__register()
{
	FullCombineShader_obj _hx_dummy;
	FullCombineShader_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.filters._BevelFilter.FullCombineShader",cc,87,92,48);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< FullCombineShader_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FullCombineShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FullCombineShader_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flxanimate
} // end namespace filters
} // end namespace _BevelFilter
