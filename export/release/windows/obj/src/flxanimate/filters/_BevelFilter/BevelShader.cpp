// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_flxanimate_filters__BevelFilter_BevelShader
#include <flxanimate/filters/_BevelFilter/BevelShader.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Int
#include <openfl/display/ShaderParameter_Int.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilterShader
#include <openfl/filters/BitmapFilterShader.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b66b193ad562e05a_591_new,"flxanimate.filters._BevelFilter.BevelShader","new",0xb62eb3c8,"flxanimate.filters._BevelFilter.BevelShader.new","flxanimate/filters/BevelFilter.hx",591,0xf3eb9040)
static const Float _hx_array_data_51cf6fd6_1[] = {
	(Float)0,(Float)0,(Float)0,(Float)0,
};
static const Float _hx_array_data_51cf6fd6_2[] = {
	(Float)0,(Float)0,(Float)0,(Float)0,
};
static const Float _hx_array_data_51cf6fd6_3[] = {
	(Float)0,
};
static const Float _hx_array_data_51cf6fd6_4[] = {
	(Float)0,(Float)0,
};
static const int _hx_array_data_51cf6fd6_5[] = {
	(int)0,
};
namespace flxanimate{
namespace filters{
namespace _BevelFilter{

void BevelShader_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_b66b193ad562e05a_591_new)
HXLINE( 182)		if (::hx::IsNull( this->_hx___glFragmentSource )) {
HXLINE( 184)			this->_hx___glFragmentSource = HX_("varying vec2 openfl_TextureCoordv;\n\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\r\n\t\tuniform vec4 uColorH;\r\n\t\tuniform vec4 uColorS;\r\n\t\tuniform float uStrength;\r\n\t\tuniform int knockout;\r\n\t\tuniform sampler2D sourceBitmap;\r\n\t\tvarying vec4 textureCoords;\r\n\t\n\n\t\tvoid main(void) {\n\n\t\t\tgl_FragColor = texture2D (openfl_Texture, openfl_TextureCoordv);\n\r\n\t\tfloat HA = texture2D(openfl_Texture, textureCoords.zw).a * uStrength;\r\n\t\tfloat SA = texture2D(openfl_Texture, textureCoords.xy).a * uStrength;\r\n\r\n\t\tfloat a = SA;\r\n\r\n\r\n\t\tSA -= HA;\r\n\t\tHA -= a;\r\n\r\n\t\tSA = clamp(SA, 0., 1.);\r\n\t\tHA = clamp(HA, 0., 1.);\r\n\r\n\r\n\t\tvec4 bevel = ((uColorS * SA) + (uColorH * HA));\r\n\r\n\t\tvec4 src = texture2D(sourceBitmap, openfl_TextureCoordv);\r\n\t\n\n\t\t}",a3,b4,5e,13);
            		}
HXLINE( 174)		if (::hx::IsNull( this->_hx___glVertexSource )) {
HXLINE( 176)			this->_hx___glVertexSource = HX_("attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\r\n\t\tuniform vec2 offset;\r\n\t\tvarying vec4 textureCoords;\r\n\t\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\ntextureCoords = vec4(openfl_TextureCoord - offset / openfl_TextureSize, openfl_TextureCoord + offset / openfl_TextureSize);\n\n\t\t}",50,12,a5,74);
            		}
HXLINE( 592)		super::__construct(null());
HXLINE( 595)		this->uColorH->value = ::Array_obj< Float >::fromData( _hx_array_data_51cf6fd6_1,4);
HXLINE( 596)		this->uColorS->value = ::Array_obj< Float >::fromData( _hx_array_data_51cf6fd6_2,4);
HXLINE( 597)		this->uStrength->value = ::Array_obj< Float >::fromData( _hx_array_data_51cf6fd6_3,1);
HXLINE( 598)		this->offset->value = ::Array_obj< Float >::fromData( _hx_array_data_51cf6fd6_4,2);
HXLINE( 599)		this->knockout->value = ::Array_obj< int >::fromData( _hx_array_data_51cf6fd6_5,1);
HXLINE( 556)		this->_hx___isGenerated = true;
HXDLIN( 556)		this->_hx___initGL();
            	}

Dynamic BevelShader_obj::__CreateEmpty() { return new BevelShader_obj; }

void *BevelShader_obj::_hx_vtable = 0;

Dynamic BevelShader_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BevelShader_obj > _hx_result = new BevelShader_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BevelShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x253b4db3) {
		if (inClassId<=(int)0x02778b94) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x02778b94;
		} else {
			return inClassId==(int)0x253b4db3;
		}
	} else {
		return inClassId==(int)0x78d8d737;
	}
}


::hx::ObjectPtr< BevelShader_obj > BevelShader_obj::__new() {
	::hx::ObjectPtr< BevelShader_obj > __this = new BevelShader_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BevelShader_obj > BevelShader_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BevelShader_obj *__this = (BevelShader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BevelShader_obj), true, "flxanimate.filters._BevelFilter.BevelShader"));
	*(void **)__this = BevelShader_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BevelShader_obj::BevelShader_obj()
{
}

void BevelShader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BevelShader);
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(uColorH,"uColorH");
	HX_MARK_MEMBER_NAME(uColorS,"uColorS");
	HX_MARK_MEMBER_NAME(uStrength,"uStrength");
	HX_MARK_MEMBER_NAME(knockout,"knockout");
	HX_MARK_MEMBER_NAME(sourceBitmap,"sourceBitmap");
	 ::openfl::filters::BitmapFilterShader_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BevelShader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(uColorH,"uColorH");
	HX_VISIT_MEMBER_NAME(uColorS,"uColorS");
	HX_VISIT_MEMBER_NAME(uStrength,"uStrength");
	HX_VISIT_MEMBER_NAME(knockout,"knockout");
	HX_VISIT_MEMBER_NAME(sourceBitmap,"sourceBitmap");
	 ::openfl::filters::BitmapFilterShader_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val BevelShader_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { return ::hx::Val( offset ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"uColorH") ) { return ::hx::Val( uColorH ); }
		if (HX_FIELD_EQ(inName,"uColorS") ) { return ::hx::Val( uColorS ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"knockout") ) { return ::hx::Val( knockout ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"uStrength") ) { return ::hx::Val( uStrength ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sourceBitmap") ) { return ::hx::Val( sourceBitmap ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BevelShader_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"uColorH") ) { uColorH=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uColorS") ) { uColorS=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"knockout") ) { knockout=inValue.Cast<  ::openfl::display::ShaderParameter_Int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"uStrength") ) { uStrength=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sourceBitmap") ) { sourceBitmap=inValue.Cast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BevelShader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("offset",93,97,3f,60));
	outFields->push(HX_("uColorH",da,7f,6a,fc));
	outFields->push(HX_("uColorS",e5,7f,6a,fc));
	outFields->push(HX_("uStrength",16,8c,95,d0));
	outFields->push(HX_("knockout",fa,a9,a5,6f));
	outFields->push(HX_("sourceBitmap",2a,cb,12,e7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BevelShader_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(BevelShader_obj,offset),HX_("offset",93,97,3f,60)},
	{::hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(BevelShader_obj,uColorH),HX_("uColorH",da,7f,6a,fc)},
	{::hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(BevelShader_obj,uColorS),HX_("uColorS",e5,7f,6a,fc)},
	{::hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(BevelShader_obj,uStrength),HX_("uStrength",16,8c,95,d0)},
	{::hx::fsObject /*  ::openfl::display::ShaderParameter_Int */ ,(int)offsetof(BevelShader_obj,knockout),HX_("knockout",fa,a9,a5,6f)},
	{::hx::fsObject /*  ::openfl::display::ShaderInput_openfl_display_BitmapData */ ,(int)offsetof(BevelShader_obj,sourceBitmap),HX_("sourceBitmap",2a,cb,12,e7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BevelShader_obj_sStaticStorageInfo = 0;
#endif

static ::String BevelShader_obj_sMemberFields[] = {
	HX_("offset",93,97,3f,60),
	HX_("uColorH",da,7f,6a,fc),
	HX_("uColorS",e5,7f,6a,fc),
	HX_("uStrength",16,8c,95,d0),
	HX_("knockout",fa,a9,a5,6f),
	HX_("sourceBitmap",2a,cb,12,e7),
	::String(null()) };

::hx::Class BevelShader_obj::__mClass;

void BevelShader_obj::__register()
{
	BevelShader_obj _hx_dummy;
	BevelShader_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.filters._BevelFilter.BevelShader",d6,6f,cf,51);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BevelShader_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BevelShader_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BevelShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BevelShader_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flxanimate
} // end namespace filters
} // end namespace _BevelFilter
