// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_flxanimate_filters__GradientGlowFilter_FullCombineShader
#include <flxanimate/filters/_GradientGlowFilter/FullCombineShader.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilterShader
#include <openfl/filters/BitmapFilterShader.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c11abc6d72abc535_694_new,"flxanimate.filters._GradientGlowFilter.FullCombineShader","new",0x056f379b,"flxanimate.filters._GradientGlowFilter.FullCombineShader.new","flxanimate/filters/GradientGlowFilter.hx",694,0xfcfc5615)
static const Float _hx_array_data_e4c6ce29_1[] = {
	(Float)0,(Float)0,
};
namespace flxanimate{
namespace filters{
namespace _GradientGlowFilter{

void FullCombineShader_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_c11abc6d72abc535_694_new)
HXLINE( 182)		if (::hx::IsNull( this->_hx___glFragmentSource )) {
HXLINE( 184)			this->_hx___glFragmentSource = HX_("\r\n\t\tuniform sampler2D openfl_Texture;\r\n\t\tuniform sampler2D sourceBitmap;\r\n\t\tvarying vec4 textureCoords;\r\n\r\n\t\tvoid main(void) {\r\n\t\t\tvec4 src = texture2D(sourceBitmap, textureCoords.xy);\r\n\t\t\tvec4 glow = texture2D(openfl_Texture, textureCoords.zw);\r\n\r\n\t\t\tgl_FragColor = vec4((src.rgb * (1.0 - glow.a)) + glow.rgb, clamp(src.a + glow.a, 0., 1.));\r\n\t\t}\r\n\t",2f,5b,e3,68);
            		}
HXLINE( 174)		if (::hx::IsNull( this->_hx___glVertexSource )) {
HXLINE( 176)			this->_hx___glVertexSource = HX_("attribute vec4 openfl_Position;\r\n\t\tattribute vec2 openfl_TextureCoord;\r\n\t\tuniform mat4 openfl_Matrix;\r\n\t\tuniform vec2 openfl_TextureSize;\r\n\t\tuniform vec2 offset;\r\n\t\tvarying vec4 textureCoords;\r\n\r\n\t\tvoid main(void) {\r\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\r\n\t\t\ttextureCoords = vec4(openfl_TextureCoord, openfl_TextureCoord - offset / openfl_TextureSize);\r\n\t\t}\r\n\t",ad,11,89,b1);
            		}
HXLINE( 695)		super::__construct(null());
HXLINE( 697)		this->offset->value = ::Array_obj< Float >::fromData( _hx_array_data_e4c6ce29_1,2);
HXLINE( 667)		this->_hx___isGenerated = true;
HXDLIN( 667)		this->_hx___initGL();
            	}

Dynamic FullCombineShader_obj::__CreateEmpty() { return new FullCombineShader_obj; }

void *FullCombineShader_obj::_hx_vtable = 0;

Dynamic FullCombineShader_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FullCombineShader_obj > _hx_result = new FullCombineShader_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FullCombineShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x30fd4005) {
		if (inClassId<=(int)0x253b4db3) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x253b4db3;
		} else {
			return inClassId==(int)0x30fd4005;
		}
	} else {
		return inClassId==(int)0x78d8d737;
	}
}


::hx::ObjectPtr< FullCombineShader_obj > FullCombineShader_obj::__new() {
	::hx::ObjectPtr< FullCombineShader_obj > __this = new FullCombineShader_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< FullCombineShader_obj > FullCombineShader_obj::__alloc(::hx::Ctx *_hx_ctx) {
	FullCombineShader_obj *__this = (FullCombineShader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FullCombineShader_obj), true, "flxanimate.filters._GradientGlowFilter.FullCombineShader"));
	*(void **)__this = FullCombineShader_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FullCombineShader_obj::FullCombineShader_obj()
{
}

void FullCombineShader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FullCombineShader);
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(sourceBitmap,"sourceBitmap");
	 ::openfl::filters::BitmapFilterShader_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FullCombineShader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(sourceBitmap,"sourceBitmap");
	 ::openfl::filters::BitmapFilterShader_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FullCombineShader_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { return ::hx::Val( offset ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sourceBitmap") ) { return ::hx::Val( sourceBitmap ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FullCombineShader_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sourceBitmap") ) { sourceBitmap=inValue.Cast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FullCombineShader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("offset",93,97,3f,60));
	outFields->push(HX_("sourceBitmap",2a,cb,12,e7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FullCombineShader_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(FullCombineShader_obj,offset),HX_("offset",93,97,3f,60)},
	{::hx::fsObject /*  ::openfl::display::ShaderInput_openfl_display_BitmapData */ ,(int)offsetof(FullCombineShader_obj,sourceBitmap),HX_("sourceBitmap",2a,cb,12,e7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FullCombineShader_obj_sStaticStorageInfo = 0;
#endif

static ::String FullCombineShader_obj_sMemberFields[] = {
	HX_("offset",93,97,3f,60),
	HX_("sourceBitmap",2a,cb,12,e7),
	::String(null()) };

::hx::Class FullCombineShader_obj::__mClass;

void FullCombineShader_obj::__register()
{
	FullCombineShader_obj _hx_dummy;
	FullCombineShader_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.filters._GradientGlowFilter.FullCombineShader",29,ce,c6,e4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FullCombineShader_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FullCombineShader_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FullCombineShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FullCombineShader_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flxanimate
} // end namespace filters
} // end namespace _GradientGlowFilter
