// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_flxanimate_filters__GradientGlowFilter_ColorRatioShader
#include <flxanimate/filters/_GradientGlowFilter/ColorRatioShader.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilterShader
#include <openfl/filters/BitmapFilterShader.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_962dd5579ceed1ba_658_new,"flxanimate.filters._GradientGlowFilter.ColorRatioShader","new",0xbbe733ab,"flxanimate.filters._GradientGlowFilter.ColorRatioShader.new","flxanimate/filters/GradientGlowFilter.hx",658,0xfcfc5615)
namespace flxanimate{
namespace filters{
namespace _GradientGlowFilter{

void ColorRatioShader_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_962dd5579ceed1ba_658_new)
HXLINE( 182)		if (::hx::IsNull( this->_hx___glFragmentSource )) {
HXLINE( 184)			this->_hx___glFragmentSource = HX_("\r\n\tvarying vec2 openfl_TextureCoordv;\r\n\r\n\tuniform sampler2D openfl_Texture;\r\n\tuniform vec2 openfl_TextureSize;\r\n\tuniform sampler2D colorGradient;\r\n\r\n\r\n\tvoid main()\r\n\t{\r\n\t\tvec4 texel = texture2D(openfl_Texture,openfl_TextureCoordv);\r\n\t\tvec4 gradient = texture2D(colorGradient, vec2(texel.a, 0.));\r\n\t\tgl_FragColor = gradient;\r\n\t}\r\n\t",02,f4,39,a3);
            		}
HXLINE( 174)		if (::hx::IsNull( this->_hx___glVertexSource )) {
HXLINE( 176)			this->_hx___glVertexSource = HX_("attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\n\t\t}",36,88,23,1e);
            		}
HXLINE( 659)		super::__construct(null());
HXLINE( 640)		this->_hx___isGenerated = true;
HXDLIN( 640)		this->_hx___initGL();
            	}

Dynamic ColorRatioShader_obj::__CreateEmpty() { return new ColorRatioShader_obj; }

void *ColorRatioShader_obj::_hx_vtable = 0;

Dynamic ColorRatioShader_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ColorRatioShader_obj > _hx_result = new ColorRatioShader_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ColorRatioShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x253b4db3) {
		if (inClassId<=(int)0x1404c315) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1404c315;
		} else {
			return inClassId==(int)0x253b4db3;
		}
	} else {
		return inClassId==(int)0x78d8d737;
	}
}


::hx::ObjectPtr< ColorRatioShader_obj > ColorRatioShader_obj::__new() {
	::hx::ObjectPtr< ColorRatioShader_obj > __this = new ColorRatioShader_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ColorRatioShader_obj > ColorRatioShader_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ColorRatioShader_obj *__this = (ColorRatioShader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ColorRatioShader_obj), true, "flxanimate.filters._GradientGlowFilter.ColorRatioShader"));
	*(void **)__this = ColorRatioShader_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ColorRatioShader_obj::ColorRatioShader_obj()
{
}

void ColorRatioShader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ColorRatioShader);
	HX_MARK_MEMBER_NAME(colorGradient,"colorGradient");
	 ::openfl::filters::BitmapFilterShader_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ColorRatioShader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(colorGradient,"colorGradient");
	 ::openfl::filters::BitmapFilterShader_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ColorRatioShader_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"colorGradient") ) { return ::hx::Val( colorGradient ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ColorRatioShader_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"colorGradient") ) { colorGradient=inValue.Cast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ColorRatioShader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("colorGradient",73,02,02,2d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ColorRatioShader_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::ShaderInput_openfl_display_BitmapData */ ,(int)offsetof(ColorRatioShader_obj,colorGradient),HX_("colorGradient",73,02,02,2d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ColorRatioShader_obj_sStaticStorageInfo = 0;
#endif

static ::String ColorRatioShader_obj_sMemberFields[] = {
	HX_("colorGradient",73,02,02,2d),
	::String(null()) };

::hx::Class ColorRatioShader_obj::__mClass;

void ColorRatioShader_obj::__register()
{
	ColorRatioShader_obj _hx_dummy;
	ColorRatioShader_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.filters._GradientGlowFilter.ColorRatioShader",39,82,6b,a2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ColorRatioShader_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ColorRatioShader_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColorRatioShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColorRatioShader_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flxanimate
} // end namespace filters
} // end namespace _GradientGlowFilter
