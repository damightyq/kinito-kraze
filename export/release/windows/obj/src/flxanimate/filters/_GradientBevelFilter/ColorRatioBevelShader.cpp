// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_flxanimate_filters__GradientBevelFilter_ColorRatioBevelShader
#include <flxanimate/filters/_GradientBevelFilter/ColorRatioBevelShader.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilterShader
#include <openfl/filters/BitmapFilterShader.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_91b1343ec2c0d397_682_new,"flxanimate.filters._GradientBevelFilter.ColorRatioBevelShader","new",0x6280c9b0,"flxanimate.filters._GradientBevelFilter.ColorRatioBevelShader.new","flxanimate/filters/GradientBevelFilter.hx",682,0xd2761650)
static const Float _hx_array_data_531671be_1[] = {
	(Float)0,
};
static const Float _hx_array_data_531671be_2[] = {
	(Float)0,(Float)0,
};
namespace flxanimate{
namespace filters{
namespace _GradientBevelFilter{

void ColorRatioBevelShader_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_91b1343ec2c0d397_682_new)
HXLINE( 182)		if (::hx::IsNull( this->_hx___glFragmentSource )) {
HXLINE( 184)			this->_hx___glFragmentSource = HX_("\r\n\t\tuniform sampler2D openfl_Texture;\r\n\t\tuniform vec2 openfl_TextureSize;\r\n\r\n\t\tuniform sampler2D colorGradient;\r\n\t\tuniform float uStrength;\r\n\t\tvarying vec4 textureCoords;\r\n\r\n\t\tvoid main(void)\r\n\t\t{\r\n\t\t\tfloat HA = texture2D(openfl_Texture, textureCoords.zw).a * uStrength;\r\n\t\t\tfloat SA = texture2D(openfl_Texture, textureCoords.xy).a * uStrength;\r\n\r\n\t\t\tfloat a = SA;\r\n\r\n\r\n\t\t\tSA -= HA;\r\n\t\t\tHA -= a;\r\n\r\n\t\t\tSA = clamp(SA, 0., 1.);\r\n\t\t\tHA = clamp(HA, 0., 1.);\r\n\r\n\t\t\tfloat hf = (128. / 255.);\r\n\t\t\tvec4 bevel = (texture(colorGradient, vec2((1. - SA) * hf, 0.)) + texture(colorGradient, vec2(hf + HA * hf, 0.)));\r\n\r\n\t\t\tgl_FragColor = bevel;\r\n\t\t}\r\n\t",4e,f2,b7,2f);
            		}
HXLINE( 174)		if (::hx::IsNull( this->_hx___glVertexSource )) {
HXLINE( 176)			this->_hx___glVertexSource = HX_("attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\r\n\t\tuniform vec2 offset;\r\n\t\tvarying vec4 textureCoords;\r\n\t\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\ntextureCoords = vec4(openfl_TextureCoord - offset / openfl_TextureSize, openfl_TextureCoord + offset / openfl_TextureSize);\n\n\t\t}",50,12,a5,74);
            		}
HXLINE( 683)		super::__construct(null());
HXLINE( 686)		this->uStrength->value = ::Array_obj< Float >::fromData( _hx_array_data_531671be_1,1);
HXLINE( 687)		this->offset->value = ::Array_obj< Float >::fromData( _hx_array_data_531671be_2,2);
HXLINE( 645)		this->_hx___isGenerated = true;
HXDLIN( 645)		this->_hx___initGL();
            	}

Dynamic ColorRatioBevelShader_obj::__CreateEmpty() { return new ColorRatioBevelShader_obj; }

void *ColorRatioBevelShader_obj::_hx_vtable = 0;

Dynamic ColorRatioBevelShader_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ColorRatioBevelShader_obj > _hx_result = new ColorRatioBevelShader_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ColorRatioBevelShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x71ab7628) {
		if (inClassId<=(int)0x253b4db3) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x253b4db3;
		} else {
			return inClassId==(int)0x71ab7628;
		}
	} else {
		return inClassId==(int)0x78d8d737;
	}
}


::hx::ObjectPtr< ColorRatioBevelShader_obj > ColorRatioBevelShader_obj::__new() {
	::hx::ObjectPtr< ColorRatioBevelShader_obj > __this = new ColorRatioBevelShader_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ColorRatioBevelShader_obj > ColorRatioBevelShader_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ColorRatioBevelShader_obj *__this = (ColorRatioBevelShader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ColorRatioBevelShader_obj), true, "flxanimate.filters._GradientBevelFilter.ColorRatioBevelShader"));
	*(void **)__this = ColorRatioBevelShader_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ColorRatioBevelShader_obj::ColorRatioBevelShader_obj()
{
}

void ColorRatioBevelShader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ColorRatioBevelShader);
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(colorGradient,"colorGradient");
	HX_MARK_MEMBER_NAME(uStrength,"uStrength");
	 ::openfl::filters::BitmapFilterShader_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ColorRatioBevelShader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(colorGradient,"colorGradient");
	HX_VISIT_MEMBER_NAME(uStrength,"uStrength");
	 ::openfl::filters::BitmapFilterShader_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ColorRatioBevelShader_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { return ::hx::Val( offset ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"uStrength") ) { return ::hx::Val( uStrength ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"colorGradient") ) { return ::hx::Val( colorGradient ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ColorRatioBevelShader_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"uStrength") ) { uStrength=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"colorGradient") ) { colorGradient=inValue.Cast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ColorRatioBevelShader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("offset",93,97,3f,60));
	outFields->push(HX_("colorGradient",73,02,02,2d));
	outFields->push(HX_("uStrength",16,8c,95,d0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ColorRatioBevelShader_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(ColorRatioBevelShader_obj,offset),HX_("offset",93,97,3f,60)},
	{::hx::fsObject /*  ::openfl::display::ShaderInput_openfl_display_BitmapData */ ,(int)offsetof(ColorRatioBevelShader_obj,colorGradient),HX_("colorGradient",73,02,02,2d)},
	{::hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(ColorRatioBevelShader_obj,uStrength),HX_("uStrength",16,8c,95,d0)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ColorRatioBevelShader_obj_sStaticStorageInfo = 0;
#endif

static ::String ColorRatioBevelShader_obj_sMemberFields[] = {
	HX_("offset",93,97,3f,60),
	HX_("colorGradient",73,02,02,2d),
	HX_("uStrength",16,8c,95,d0),
	::String(null()) };

::hx::Class ColorRatioBevelShader_obj::__mClass;

void ColorRatioBevelShader_obj::__register()
{
	ColorRatioBevelShader_obj _hx_dummy;
	ColorRatioBevelShader_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.filters._GradientBevelFilter.ColorRatioBevelShader",be,71,16,53);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ColorRatioBevelShader_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ColorRatioBevelShader_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColorRatioBevelShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColorRatioBevelShader_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flxanimate
} // end namespace filters
} // end namespace _GradientBevelFilter
