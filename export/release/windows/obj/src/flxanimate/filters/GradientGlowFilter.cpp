// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flxanimate_filters_GradientGlowFilter
#include <flxanimate/filters/GradientGlowFilter.h>
#endif
#ifndef INCLUDED_flxanimate_filters__GradientGlowFilter_ColorRatioShader
#include <flxanimate/filters/_GradientGlowFilter/ColorRatioShader.h>
#endif
#ifndef INCLUDED_flxanimate_filters__GradientGlowFilter_FullCombineShader
#include <flxanimate/filters/_GradientGlowFilter/FullCombineShader.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilterShader
#include <openfl/filters/BitmapFilterShader.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_openfl_filters__DropShadowFilter_HideShader
#include <openfl/filters/_DropShadowFilter/HideShader.h>
#endif
#ifndef INCLUDED_openfl_filters__GlowFilter_BlurAlphaShader
#include <openfl/filters/_GlowFilter/BlurAlphaShader.h>
#endif
#ifndef INCLUDED_openfl_filters__GlowFilter_CombineKnockoutShader
#include <openfl/filters/_GlowFilter/CombineKnockoutShader.h>
#endif
#ifndef INCLUDED_openfl_filters__GlowFilter_CombineShader
#include <openfl/filters/_GlowFilter/CombineShader.h>
#endif
#ifndef INCLUDED_openfl_filters__GlowFilter_InnerCombineKnockoutShader
#include <openfl/filters/_GlowFilter/InnerCombineKnockoutShader.h>
#endif
#ifndef INCLUDED_openfl_filters__GlowFilter_InnerCombineShader
#include <openfl/filters/_GlowFilter/InnerCombineShader.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_275_new,"flxanimate.filters.GradientGlowFilter","new",0x3b65bf39,"flxanimate.filters.GradientGlowFilter.new","flxanimate/filters/GradientGlowFilter.hx",275,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_310_clone,"flxanimate.filters.GradientGlowFilter","clone",0xdef12a76,"flxanimate.filters.GradientGlowFilter.clone","flxanimate/filters/GradientGlowFilter.hx",310,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_315___initShader,"flxanimate.filters.GradientGlowFilter","__initShader",0xef59837c,"flxanimate.filters.GradientGlowFilter.__initShader","flxanimate/filters/GradientGlowFilter.hx",315,0xfcfc5615)
static const Float _hx_array_data_4c7daec7_4[] = {
	(Float)1,(Float)1,(Float)1,(Float)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_406___updateSize,"flxanimate.filters.GradientGlowFilter","__updateSize",0xd2fbf491,"flxanimate.filters.GradientGlowFilter.__updateSize","flxanimate/filters/GradientGlowFilter.hx",406,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_417___calculateNumShaderPasses,"flxanimate.filters.GradientGlowFilter","__calculateNumShaderPasses",0x5607e08b,"flxanimate.filters.GradientGlowFilter.__calculateNumShaderPasses","flxanimate/filters/GradientGlowFilter.hx",417,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_424___setColorBitmap,"flxanimate.filters.GradientGlowFilter","__setColorBitmap",0x1def65d7,"flxanimate.filters.GradientGlowFilter.__setColorBitmap","flxanimate/filters/GradientGlowFilter.hx",424,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_476_get_alphas,"flxanimate.filters.GradientGlowFilter","get_alphas",0x4dadc965,"flxanimate.filters.GradientGlowFilter.get_alphas","flxanimate/filters/GradientGlowFilter.hx",476,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_480_set_alphas,"flxanimate.filters.GradientGlowFilter","set_alphas",0x512b67d9,"flxanimate.filters.GradientGlowFilter.set_alphas","flxanimate/filters/GradientGlowFilter.hx",480,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_492_get_angle,"flxanimate.filters.GradientGlowFilter","get_angle",0xf875b7c3,"flxanimate.filters.GradientGlowFilter.get_angle","flxanimate/filters/GradientGlowFilter.hx",492,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_496_set_angle,"flxanimate.filters.GradientGlowFilter","set_angle",0xdbc6a3cf,"flxanimate.filters.GradientGlowFilter.set_angle","flxanimate/filters/GradientGlowFilter.hx",496,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_508_get_blurX,"flxanimate.filters.GradientGlowFilter","get_blurX",0x8a9483c1,"flxanimate.filters.GradientGlowFilter.get_blurX","flxanimate/filters/GradientGlowFilter.hx",508,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_512_set_blurX,"flxanimate.filters.GradientGlowFilter","set_blurX",0x6de56fcd,"flxanimate.filters.GradientGlowFilter.set_blurX","flxanimate/filters/GradientGlowFilter.hx",512,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_524_get_blurY,"flxanimate.filters.GradientGlowFilter","get_blurY",0x8a9483c2,"flxanimate.filters.GradientGlowFilter.get_blurY","flxanimate/filters/GradientGlowFilter.hx",524,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_528_set_blurY,"flxanimate.filters.GradientGlowFilter","set_blurY",0x6de56fce,"flxanimate.filters.GradientGlowFilter.set_blurY","flxanimate/filters/GradientGlowFilter.hx",528,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_540_get_colors,"flxanimate.filters.GradientGlowFilter","get_colors",0xd1f8c3c0,"flxanimate.filters.GradientGlowFilter.get_colors","flxanimate/filters/GradientGlowFilter.hx",540,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_544_set_colors,"flxanimate.filters.GradientGlowFilter","set_colors",0xd5766234,"flxanimate.filters.GradientGlowFilter.set_colors","flxanimate/filters/GradientGlowFilter.hx",544,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_556_get_distance,"flxanimate.filters.GradientGlowFilter","get_distance",0xb6733545,"flxanimate.filters.GradientGlowFilter.get_distance","flxanimate/filters/GradientGlowFilter.hx",556,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_560_set_distance,"flxanimate.filters.GradientGlowFilter","set_distance",0xcb6c58b9,"flxanimate.filters.GradientGlowFilter.set_distance","flxanimate/filters/GradientGlowFilter.hx",560,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_572_get_knockout,"flxanimate.filters.GradientGlowFilter","get_knockout",0xba1f4c0a,"flxanimate.filters.GradientGlowFilter.get_knockout","flxanimate/filters/GradientGlowFilter.hx",572,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_576_set_knockout,"flxanimate.filters.GradientGlowFilter","set_knockout",0xcf186f7e,"flxanimate.filters.GradientGlowFilter.set_knockout","flxanimate/filters/GradientGlowFilter.hx",576,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_583_get_quality,"flxanimate.filters.GradientGlowFilter","get_quality",0x3c9854af,"flxanimate.filters.GradientGlowFilter.get_quality","flxanimate/filters/GradientGlowFilter.hx",583,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_587_set_quality,"flxanimate.filters.GradientGlowFilter","set_quality",0x47055bbb,"flxanimate.filters.GradientGlowFilter.set_quality","flxanimate/filters/GradientGlowFilter.hx",587,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_594_get_ratios,"flxanimate.filters.GradientGlowFilter","get_ratios",0xc6fc3318,"flxanimate.filters.GradientGlowFilter.get_ratios","flxanimate/filters/GradientGlowFilter.hx",594,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_598_set_ratios,"flxanimate.filters.GradientGlowFilter","set_ratios",0xca79d18c,"flxanimate.filters.GradientGlowFilter.set_ratios","flxanimate/filters/GradientGlowFilter.hx",598,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_610_get_strength,"flxanimate.filters.GradientGlowFilter","get_strength",0xd9087491,"flxanimate.filters.GradientGlowFilter.get_strength","flxanimate/filters/GradientGlowFilter.hx",610,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_614_set_strength,"flxanimate.filters.GradientGlowFilter","set_strength",0xee019805,"flxanimate.filters.GradientGlowFilter.set_strength","flxanimate/filters/GradientGlowFilter.hx",614,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_621_get_type,"flxanimate.filters.GradientGlowFilter","get_type",0x87644cca,"flxanimate.filters.GradientGlowFilter.get_type","flxanimate/filters/GradientGlowFilter.hx",621,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_625_set_type,"flxanimate.filters.GradientGlowFilter","set_type",0x35c1a63e,"flxanimate.filters.GradientGlowFilter.set_type","flxanimate/filters/GradientGlowFilter.hx",625,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_54_boot,"flxanimate.filters.GradientGlowFilter","boot",0xb5ba9339,"flxanimate.filters.GradientGlowFilter.boot","flxanimate/filters/GradientGlowFilter.hx",54,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_55_boot,"flxanimate.filters.GradientGlowFilter","boot",0xb5ba9339,"flxanimate.filters.GradientGlowFilter.boot","flxanimate/filters/GradientGlowFilter.hx",55,0xfcfc5615)
HX_LOCAL_STACK_FRAME(_hx_pos_25fa1c831a7caa8d_56_boot,"flxanimate.filters.GradientGlowFilter","boot",0xb5ba9339,"flxanimate.filters.GradientGlowFilter.boot","flxanimate/filters/GradientGlowFilter.hx",56,0xfcfc5615)
namespace flxanimate{
namespace filters{

void GradientGlowFilter_obj::__construct(::hx::Null< Float >  __o_distance,::hx::Null< Float >  __o_angle,::Array< int > colors,::Array< Float > alphas,::Array< int > ratios,::hx::Null< Float >  __o_blurX,::hx::Null< Float >  __o_blurY,::hx::Null< Float >  __o_strength,::hx::Null< int >  __o_quality,::String __o_type,::hx::Null< bool >  __o_knockout){
            		Float distance = __o_distance.Default(4);
            		Float angle = __o_angle.Default(45);
            		Float blurX = __o_blurX.Default(4);
            		Float blurY = __o_blurY.Default(4);
            		Float strength = __o_strength.Default(1);
            		int quality = __o_quality.Default(1);
            		::String type = __o_type;
            		if (::hx::IsNull(__o_type)) type = HX_("inner",96,31,1c,be);
            		bool knockout = __o_knockout.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_275_new)
HXLINE( 276)		super::__construct();
HXLINE( 278)		this->_hx___offsetX = ( (Float)(0) );
HXLINE( 279)		this->_hx___offsetY = ( (Float)(0) );
HXLINE( 281)		this->_hx___angle = angle;
HXLINE( 282)		this->_hx___distance = distance;
HXLINE( 283)		this->_hx___angle = angle;
HXLINE( 284)		this->_hx___colors = colors;
HXLINE( 285)		this->_hx___alphas = alphas;
HXLINE( 286)		this->_hx___ratios = ratios;
HXLINE( 287)		this->_hx___blurX = blurX;
HXLINE( 288)		this->_hx___blurY = blurY;
HXLINE( 289)		this->_hx___strength = strength;
HXLINE( 290)		this->_hx___quality = quality;
HXLINE( 291)		this->_hx___type = type;
HXLINE( 292)		this->_hx___knockout = knockout;
HXLINE( 293)		this->_hx___colorFadeArr =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,0);
HXLINE( 295)		this->_hx___updateSize();
HXLINE( 296)		this->_hx___setColorBitmap();
HXLINE( 298)		this->_hx___needSecondBitmapData = true;
HXLINE( 299)		this->_hx___preserveObject = true;
HXLINE( 300)		this->_hx___renderDirty = true;
            	}

Dynamic GradientGlowFilter_obj::__CreateEmpty() { return new GradientGlowFilter_obj; }

void *GradientGlowFilter_obj::_hx_vtable = 0;

Dynamic GradientGlowFilter_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GradientGlowFilter_obj > _hx_result = new GradientGlowFilter_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10]);
	return _hx_result;
}

bool GradientGlowFilter_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x21e4fa1d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x21e4fa1d;
	} else {
		return inClassId==(int)0x26de6bd2;
	}
}

 ::openfl::filters::BitmapFilter GradientGlowFilter_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_310_clone)
HXDLIN( 310)		return  ::flxanimate::filters::GradientGlowFilter_obj::__alloc( HX_CTX ,this->_hx___distance,this->_hx___angle,this->_hx___colors,this->_hx___alphas,this->_hx___ratios,this->_hx___blurX,this->_hx___blurY,this->_hx___strength,this->_hx___quality,this->_hx___type,this->_hx___knockout);
            	}


 ::openfl::display::Shader GradientGlowFilter_obj::_hx___initShader( ::openfl::display::DisplayObjectRenderer renderer,int pass, ::openfl::display::BitmapData sourceBitmapData){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_315___initShader)
HXLINE( 316)		int blurPass = pass;
HXLINE( 317)		int numBlurPasses = (this->_hx___horizontalPasses + this->_hx___verticalPasses);
HXLINE( 319)		if ((blurPass < numBlurPasses)) {
HXLINE( 321)			 ::openfl::filters::_GlowFilter::BlurAlphaShader shader = ::openfl::filters::GlowFilter_obj::_hx___blurAlphaShader;
HXLINE( 322)			if ((blurPass < this->_hx___horizontalPasses)) {
HXLINE( 324)				Float scale = (::Math_obj::pow(((Float)0.5),( (Float)((blurPass >> 1)) )) * ((Float)0.5));
HXLINE( 325)				shader->uRadius->value[0] = (this->get_blurX() * scale);
HXLINE( 326)				shader->uRadius->value[1] = ( (Float)(0) );
            			}
            			else {
HXLINE( 330)				Float scale1 = (::Math_obj::pow(((Float)0.5),( (Float)(((blurPass - this->_hx___horizontalPasses) >> 1)) )) * ((Float)0.5));
HXLINE( 331)				shader->uRadius->value[0] = ( (Float)(0) );
HXLINE( 332)				shader->uRadius->value[1] = (this->get_blurY() * scale1);
            			}
HXLINE( 334)			shader->uColor->value = ::Array_obj< Float >::fromData( _hx_array_data_4c7daec7_4,4);
HXLINE( 335)			Float _hx_tmp;
HXDLIN( 335)			if ((blurPass == (numBlurPasses - 1))) {
HXLINE( 335)				_hx_tmp = this->_hx___strength;
            			}
            			else {
HXLINE( 335)				_hx_tmp = ((Float)1.0);
            			}
HXDLIN( 335)			shader->uStrength->value[0] = _hx_tmp;
HXLINE( 337)			return shader;
            		}
HXLINE( 340)		if ((pass == numBlurPasses)) {
HXLINE( 342)			 ::flxanimate::filters::_GradientGlowFilter::ColorRatioShader shader1 = ::flxanimate::filters::GradientGlowFilter_obj::_hx___colorRatioShader;
HXLINE( 343)			::flxanimate::filters::GradientGlowFilter_obj::_hx___colorFadeBmp->setPixels(::flxanimate::filters::GradientGlowFilter_obj::_hx___colorFadeBmp->rect,this->_hx___colorFadeArr);
HXLINE( 344)			shader1->colorGradient->input = ::flxanimate::filters::GradientGlowFilter_obj::_hx___colorFadeBmp;
HXLINE( 346)			return shader1;
            		}
HXLINE( 348)		::String _hx_switch_0 = this->get_type();
            		if (  (_hx_switch_0==HX_("full",8f,e9,c4,43)) ){
HXLINE( 384)			if (this->_hx___knockout) {
HXLINE( 386)				 ::openfl::filters::_DropShadowFilter::HideShader shader2 = ::openfl::filters::DropShadowFilter_obj::_hx___hideShader;
HXLINE( 387)				shader2->sourceBitmap->input = sourceBitmapData;
HXLINE( 388)				shader2->offset->value[0] = this->_hx___offsetX;
HXLINE( 389)				shader2->offset->value[1] = this->_hx___offsetY;
HXLINE( 390)				return shader2;
            			}
HXLINE( 393)			 ::flxanimate::filters::_GradientGlowFilter::FullCombineShader shader3 = ::flxanimate::filters::GradientGlowFilter_obj::_hx___fullCombineShader;
HXLINE( 394)			shader3->sourceBitmap->input = sourceBitmapData;
HXLINE( 395)			shader3->offset->value[0] = this->_hx___offsetX;
HXLINE( 396)			shader3->offset->value[1] = this->_hx___offsetY;
HXLINE( 397)			return shader3;
HXLINE( 383)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("inner",96,31,1c,be)) ){
HXLINE( 368)			if (this->_hx___knockout) {
HXLINE( 370)				 ::openfl::filters::_GlowFilter::InnerCombineKnockoutShader shader4 = ::openfl::filters::GlowFilter_obj::_hx___innerCombineKnockoutShader;
HXLINE( 371)				shader4->sourceBitmap->input = sourceBitmapData;
HXLINE( 372)				shader4->offset->value[0] = this->_hx___offsetX;
HXLINE( 373)				shader4->offset->value[1] = this->_hx___offsetY;
HXLINE( 374)				return shader4;
            			}
HXLINE( 376)			 ::openfl::filters::_GlowFilter::InnerCombineShader shader5 = ::openfl::filters::GlowFilter_obj::_hx___innerCombineShader;
HXLINE( 377)			shader5->sourceBitmap->input = sourceBitmapData;
HXLINE( 378)			shader5->offset->value[0] = this->_hx___offsetX;
HXLINE( 379)			shader5->offset->value[1] = this->_hx___offsetY;
HXLINE( 380)			return shader5;
HXLINE( 367)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("outer",7b,b8,28,37)) ){
HXLINE( 352)			if (this->_hx___knockout) {
HXLINE( 354)				 ::openfl::filters::_GlowFilter::CombineKnockoutShader shader6 = ::openfl::filters::GlowFilter_obj::_hx___combineKnockoutShader;
HXLINE( 355)				shader6->sourceBitmap->input = sourceBitmapData;
HXLINE( 356)				shader6->offset->value[0] = this->_hx___offsetX;
HXLINE( 357)				shader6->offset->value[1] = this->_hx___offsetY;
HXLINE( 358)				return shader6;
            			}
HXLINE( 360)			 ::openfl::filters::_GlowFilter::CombineShader shader7 = ::openfl::filters::GlowFilter_obj::_hx___combineShader;
HXLINE( 361)			shader7->sourceBitmap->input = sourceBitmapData;
HXLINE( 362)			shader7->offset->value[0] = this->_hx___offsetX;
HXLINE( 363)			shader7->offset->value[1] = this->_hx___offsetY;
HXLINE( 364)			return shader7;
HXLINE( 351)			goto _hx_goto_2;
            		}
            		_hx_goto_2:;
HXLINE( 401)		return null();
            	}


void GradientGlowFilter_obj::_hx___updateSize(){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_406___updateSize)
HXLINE( 407)		this->_hx___offsetX = ( (Float)(::Std_obj::_hx_int((this->_hx___distance * ::Math_obj::cos(((this->_hx___angle * ::Math_obj::PI) / ( (Float)(180) )))))) );
HXLINE( 408)		this->_hx___offsetY = ( (Float)(::Std_obj::_hx_int((this->_hx___distance * ::Math_obj::sin(((this->_hx___angle * ::Math_obj::PI) / ( (Float)(180) )))))) );
HXLINE( 409)		Float _hx_tmp;
HXDLIN( 409)		if ((this->_hx___offsetY < 0)) {
HXLINE( 409)			_hx_tmp = -(this->_hx___offsetY);
            		}
            		else {
HXLINE( 409)			_hx_tmp = ( (Float)(0) );
            		}
HXDLIN( 409)		this->_hx___topExtension = ::Math_obj::ceil((_hx_tmp + this->_hx___blurY));
HXLINE( 410)		Float _hx_tmp1;
HXDLIN( 410)		if ((this->_hx___offsetY > 0)) {
HXLINE( 410)			_hx_tmp1 = this->_hx___offsetY;
            		}
            		else {
HXLINE( 410)			_hx_tmp1 = ( (Float)(0) );
            		}
HXDLIN( 410)		this->_hx___bottomExtension = ::Math_obj::ceil((_hx_tmp1 + this->_hx___blurY));
HXLINE( 411)		Float _hx_tmp2;
HXDLIN( 411)		if ((this->_hx___offsetX < 0)) {
HXLINE( 411)			_hx_tmp2 = -(this->_hx___offsetX);
            		}
            		else {
HXLINE( 411)			_hx_tmp2 = ( (Float)(0) );
            		}
HXDLIN( 411)		this->_hx___leftExtension = ::Math_obj::ceil((_hx_tmp2 + this->_hx___blurX));
HXLINE( 412)		Float _hx_tmp3;
HXDLIN( 412)		if ((this->_hx___offsetX > 0)) {
HXLINE( 412)			_hx_tmp3 = this->_hx___offsetX;
            		}
            		else {
HXLINE( 412)			_hx_tmp3 = ( (Float)(0) );
            		}
HXDLIN( 412)		this->_hx___rightExtension = ::Math_obj::ceil((_hx_tmp3 + this->_hx___blurX));
HXLINE( 413)		this->_hx___calculateNumShaderPasses();
            	}


HX_DEFINE_DYNAMIC_FUNC0(GradientGlowFilter_obj,_hx___updateSize,(void))

void GradientGlowFilter_obj::_hx___calculateNumShaderPasses(){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_417___calculateNumShaderPasses)
HXLINE( 418)		int _hx_tmp;
HXDLIN( 418)		if ((this->_hx___blurX <= 0)) {
HXLINE( 418)			_hx_tmp = 0;
            		}
            		else {
HXLINE( 418)			_hx_tmp = (::Math_obj::round((this->_hx___blurX * (( (Float)(this->_hx___quality) ) / ( (Float)(4) )))) + 1);
            		}
HXDLIN( 418)		this->_hx___horizontalPasses = _hx_tmp;
HXLINE( 419)		int _hx_tmp1;
HXDLIN( 419)		if ((this->_hx___blurY <= 0)) {
HXLINE( 419)			_hx_tmp1 = 0;
            		}
            		else {
HXLINE( 419)			_hx_tmp1 = (::Math_obj::round((this->_hx___blurY * (( (Float)(this->_hx___quality) ) / ( (Float)(4) )))) + 1);
            		}
HXDLIN( 419)		this->_hx___verticalPasses = _hx_tmp1;
HXLINE( 420)		this->_hx___numShaderPasses = ((this->_hx___horizontalPasses + this->_hx___verticalPasses) + 2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GradientGlowFilter_obj,_hx___calculateNumShaderPasses,(void))

void GradientGlowFilter_obj::_hx___setColorBitmap(){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_424___setColorBitmap)
HXLINE( 425)		this->_hx___colorFadeArr->clear();
HXLINE( 426)		if ((this->_hx___colors->length < 0)) {
HXLINE( 426)			return;
            		}
HXLINE( 428)		int _rat = 0;
HXLINE( 430)		{
HXLINE( 430)			int _g = 0;
HXDLIN( 430)			while((_g < 255)){
HXLINE( 430)				_g = (_g + 1);
HXDLIN( 430)				int i = (_g - 1);
HXLINE( 432)				int preRatio = this->_hx___ratios->__get(_rat);
HXLINE( 435)				int currentRatio;
HXDLIN( 435)				if (((this->_hx___ratios->length - 1) < (_rat + 1))) {
HXLINE( 435)					currentRatio = 255;
            				}
            				else {
HXLINE( 435)					currentRatio = this->_hx___ratios->__get((_rat + 1));
            				}
HXLINE( 437)				if ((currentRatio < i)) {
HXLINE( 439)					_rat = (_rat + 1);
HXLINE( 440)					preRatio = this->_hx___ratios->__get(_rat);
HXLINE( 441)					if (((this->_hx___ratios->length - 1) < (_rat + 1))) {
HXLINE( 441)						currentRatio = 255;
            					}
            					else {
HXLINE( 441)						currentRatio = this->_hx___ratios->__get((_rat + 1));
            					}
            				}
HXLINE( 443)				Float preAlpha;
HXDLIN( 443)				if (((this->_hx___alphas->length - 1) > _rat)) {
HXLINE( 443)					preAlpha = this->_hx___alphas->__get(_rat);
            				}
            				else {
HXLINE( 443)					preAlpha = ((Float)1.);
            				}
HXLINE( 444)				Float postAlpha;
HXDLIN( 444)				if (((this->_hx___alphas->length - 1) > (_rat + 1))) {
HXLINE( 444)					postAlpha = this->_hx___alphas->__get((_rat + 1));
            				}
            				else {
HXLINE( 444)					postAlpha = ((Float)1.);
            				}
HXLINE( 446)				int preColor = this->_hx___colors->__get(_rat);
HXLINE( 448)				int postColor;
HXDLIN( 448)				if (((this->_hx___colors->length - 1) < (_rat + 1))) {
HXLINE( 448)					postColor = preColor;
            				}
            				else {
HXLINE( 448)					postColor = this->_hx___colors->__get((_rat + 1));
            				}
HXLINE( 450)				bool _hx_tmp;
HXDLIN( 450)				if ((_rat == 0)) {
HXLINE( 450)					_hx_tmp = (preRatio > i);
            				}
            				else {
HXLINE( 450)					_hx_tmp = false;
            				}
HXDLIN( 450)				if (_hx_tmp) {
HXLINE( 452)					{
HXLINE( 452)						 ::openfl::utils::ByteArrayData this1 = this->_hx___colorFadeArr;
HXDLIN( 452)						this1->writeInt((::Std_obj::_hx_int((preAlpha * ( (Float)(255) ))) | preColor));
            					}
HXLINE( 453)					continue;
            				}
HXLINE( 455)				int preA = (::Std_obj::_hx_int((preAlpha * ( (Float)(255) ))) & 255);
HXLINE( 456)				int preR = ((preColor >> 16) & 255);
HXLINE( 457)				int preG = ((preColor >> 8) & 255);
HXLINE( 458)				int preB = (preColor & 255);
HXLINE( 460)				int postA = (::Std_obj::_hx_int((postAlpha * ( (Float)(255) ))) & 255);
HXLINE( 461)				int postR = ((postColor >> 16) & 255);
HXLINE( 462)				int postG = ((postColor >> 8) & 255);
HXLINE( 463)				int postB = (postColor & 255);
HXLINE( 465)				Float progr = (( (Float)((i - preRatio)) ) / ( (Float)((currentRatio - preRatio)) ));
HXLINE( 466)				Float q = (( (Float)(1) ) - progr);
HXLINE( 468)				{
HXLINE( 468)					 ::openfl::utils::ByteArrayData this2 = this->_hx___colorFadeArr;
HXDLIN( 468)					int value = (::Std_obj::_hx_int(((( (Float)(preA) ) * q) + (( (Float)(postA) ) * progr))) << 24);
HXDLIN( 468)					int value1 = (value | (::Std_obj::_hx_int(((( (Float)(preR) ) * q) + (( (Float)(postR) ) * progr))) << 16));
HXDLIN( 468)					int value2 = (value1 | (::Std_obj::_hx_int(((( (Float)(preG) ) * q) + (( (Float)(postG) ) * progr))) << 8));
HXDLIN( 468)					this2->writeInt((value2 | ::Std_obj::_hx_int(((( (Float)(preB) ) * q) + (( (Float)(postB) ) * progr)))));
            				}
            			}
            		}
HXLINE( 471)		this->_hx___colorFadeArr->position = 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GradientGlowFilter_obj,_hx___setColorBitmap,(void))

::Array< Float > GradientGlowFilter_obj::get_alphas(){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_476_get_alphas)
HXDLIN( 476)		return this->_hx___alphas;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GradientGlowFilter_obj,get_alphas,return )

::Array< Float > GradientGlowFilter_obj::set_alphas(::Array< Float > value){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_480_set_alphas)
HXLINE( 481)		if (::hx::IsPointerNotEq( value,this->_hx___alphas )) {
HXLINE( 483)			this->_hx___alphas = value;
HXLINE( 484)			this->_hx___renderDirty = true;
HXLINE( 485)			this->_hx___setColorBitmap();
            		}
HXLINE( 487)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GradientGlowFilter_obj,set_alphas,return )

Float GradientGlowFilter_obj::get_angle(){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_492_get_angle)
HXDLIN( 492)		return this->_hx___angle;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GradientGlowFilter_obj,get_angle,return )

Float GradientGlowFilter_obj::set_angle(Float value){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_496_set_angle)
HXLINE( 497)		if ((value != this->_hx___angle)) {
HXLINE( 499)			this->_hx___angle = value;
HXLINE( 500)			this->_hx___renderDirty = true;
HXLINE( 501)			this->_hx___updateSize();
            		}
HXLINE( 503)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GradientGlowFilter_obj,set_angle,return )

Float GradientGlowFilter_obj::get_blurX(){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_508_get_blurX)
HXDLIN( 508)		return this->_hx___blurX;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GradientGlowFilter_obj,get_blurX,return )

Float GradientGlowFilter_obj::set_blurX(Float value){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_512_set_blurX)
HXLINE( 513)		if ((value != this->_hx___blurX)) {
HXLINE( 515)			this->_hx___blurX = value;
HXLINE( 516)			this->_hx___renderDirty = true;
HXLINE( 517)			this->_hx___updateSize();
            		}
HXLINE( 519)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GradientGlowFilter_obj,set_blurX,return )

Float GradientGlowFilter_obj::get_blurY(){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_524_get_blurY)
HXDLIN( 524)		return this->_hx___blurY;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GradientGlowFilter_obj,get_blurY,return )

Float GradientGlowFilter_obj::set_blurY(Float value){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_528_set_blurY)
HXLINE( 529)		if ((value != this->_hx___blurY)) {
HXLINE( 531)			this->_hx___blurY = value;
HXLINE( 532)			this->_hx___renderDirty = true;
HXLINE( 533)			this->_hx___updateSize();
            		}
HXLINE( 535)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GradientGlowFilter_obj,set_blurY,return )

::Array< int > GradientGlowFilter_obj::get_colors(){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_540_get_colors)
HXDLIN( 540)		return this->_hx___colors;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GradientGlowFilter_obj,get_colors,return )

::Array< int > GradientGlowFilter_obj::set_colors(::Array< int > value){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_544_set_colors)
HXLINE( 545)		if (::hx::IsPointerNotEq( value,this->_hx___colors )) {
HXLINE( 547)			this->_hx___colors = value;
HXLINE( 548)			this->_hx___renderDirty = true;
HXLINE( 549)			this->_hx___setColorBitmap();
            		}
HXLINE( 551)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GradientGlowFilter_obj,set_colors,return )

Float GradientGlowFilter_obj::get_distance(){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_556_get_distance)
HXDLIN( 556)		return this->_hx___distance;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GradientGlowFilter_obj,get_distance,return )

Float GradientGlowFilter_obj::set_distance(Float value){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_560_set_distance)
HXLINE( 561)		if ((value != this->_hx___distance)) {
HXLINE( 563)			this->_hx___distance = value;
HXLINE( 564)			this->_hx___renderDirty = true;
HXLINE( 565)			this->_hx___updateSize();
            		}
HXLINE( 567)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GradientGlowFilter_obj,set_distance,return )

bool GradientGlowFilter_obj::get_knockout(){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_572_get_knockout)
HXDLIN( 572)		return this->_hx___knockout;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GradientGlowFilter_obj,get_knockout,return )

bool GradientGlowFilter_obj::set_knockout(bool value){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_576_set_knockout)
HXLINE( 577)		if ((value != this->_hx___knockout)) {
HXLINE( 577)			this->_hx___renderDirty = true;
            		}
HXLINE( 578)		return (this->_hx___knockout = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GradientGlowFilter_obj,set_knockout,return )

int GradientGlowFilter_obj::get_quality(){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_583_get_quality)
HXDLIN( 583)		return this->_hx___quality;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GradientGlowFilter_obj,get_quality,return )

int GradientGlowFilter_obj::set_quality(int value){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_587_set_quality)
HXLINE( 588)		if ((value != this->_hx___quality)) {
HXLINE( 588)			this->_hx___renderDirty = true;
            		}
HXLINE( 589)		return (this->_hx___quality = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GradientGlowFilter_obj,set_quality,return )

::Array< int > GradientGlowFilter_obj::get_ratios(){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_594_get_ratios)
HXDLIN( 594)		return this->_hx___ratios;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GradientGlowFilter_obj,get_ratios,return )

::Array< int > GradientGlowFilter_obj::set_ratios(::Array< int > value){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_598_set_ratios)
HXLINE( 599)		if (::hx::IsPointerNotEq( value,this->_hx___ratios )) {
HXLINE( 601)			this->_hx___ratios = value;
HXLINE( 602)			this->_hx___renderDirty = true;
HXLINE( 603)			this->_hx___setColorBitmap();
            		}
HXLINE( 605)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GradientGlowFilter_obj,set_ratios,return )

Float GradientGlowFilter_obj::get_strength(){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_610_get_strength)
HXDLIN( 610)		return this->_hx___strength;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GradientGlowFilter_obj,get_strength,return )

Float GradientGlowFilter_obj::set_strength(Float value){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_614_set_strength)
HXLINE( 615)		if ((value != this->_hx___strength)) {
HXLINE( 615)			this->_hx___renderDirty = true;
            		}
HXLINE( 616)		return (this->_hx___strength = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GradientGlowFilter_obj,set_strength,return )

::String GradientGlowFilter_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_621_get_type)
HXDLIN( 621)		return this->_hx___type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GradientGlowFilter_obj,get_type,return )

::String GradientGlowFilter_obj::set_type(::String value){
            	HX_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_625_set_type)
HXLINE( 626)		if ((value != this->_hx___type)) {
HXLINE( 628)			this->_hx___type = value;
HXLINE( 629)			this->_hx___renderDirty = true;
HXLINE( 630)			this->_hx___updateSize();
            		}
HXLINE( 632)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GradientGlowFilter_obj,set_type,return )

 ::flxanimate::filters::_GradientGlowFilter::ColorRatioShader GradientGlowFilter_obj::_hx___colorRatioShader;

 ::flxanimate::filters::_GradientGlowFilter::FullCombineShader GradientGlowFilter_obj::_hx___fullCombineShader;

 ::openfl::display::BitmapData GradientGlowFilter_obj::_hx___colorFadeBmp;


::hx::ObjectPtr< GradientGlowFilter_obj > GradientGlowFilter_obj::__new(::hx::Null< Float >  __o_distance,::hx::Null< Float >  __o_angle,::Array< int > colors,::Array< Float > alphas,::Array< int > ratios,::hx::Null< Float >  __o_blurX,::hx::Null< Float >  __o_blurY,::hx::Null< Float >  __o_strength,::hx::Null< int >  __o_quality,::String __o_type,::hx::Null< bool >  __o_knockout) {
	::hx::ObjectPtr< GradientGlowFilter_obj > __this = new GradientGlowFilter_obj();
	__this->__construct(__o_distance,__o_angle,colors,alphas,ratios,__o_blurX,__o_blurY,__o_strength,__o_quality,__o_type,__o_knockout);
	return __this;
}

::hx::ObjectPtr< GradientGlowFilter_obj > GradientGlowFilter_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_distance,::hx::Null< Float >  __o_angle,::Array< int > colors,::Array< Float > alphas,::Array< int > ratios,::hx::Null< Float >  __o_blurX,::hx::Null< Float >  __o_blurY,::hx::Null< Float >  __o_strength,::hx::Null< int >  __o_quality,::String __o_type,::hx::Null< bool >  __o_knockout) {
	GradientGlowFilter_obj *__this = (GradientGlowFilter_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GradientGlowFilter_obj), true, "flxanimate.filters.GradientGlowFilter"));
	*(void **)__this = GradientGlowFilter_obj::_hx_vtable;
	__this->__construct(__o_distance,__o_angle,colors,alphas,ratios,__o_blurX,__o_blurY,__o_strength,__o_quality,__o_type,__o_knockout);
	return __this;
}

GradientGlowFilter_obj::GradientGlowFilter_obj()
{
}

void GradientGlowFilter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GradientGlowFilter);
	HX_MARK_MEMBER_NAME(_hx___alphas,"__alphas");
	HX_MARK_MEMBER_NAME(_hx___angle,"__angle");
	HX_MARK_MEMBER_NAME(_hx___blurX,"__blurX");
	HX_MARK_MEMBER_NAME(_hx___horizontalPasses,"__horizontalPasses");
	HX_MARK_MEMBER_NAME(_hx___blurY,"__blurY");
	HX_MARK_MEMBER_NAME(_hx___verticalPasses,"__verticalPasses");
	HX_MARK_MEMBER_NAME(_hx___colors,"__colors");
	HX_MARK_MEMBER_NAME(_hx___distance,"__distance");
	HX_MARK_MEMBER_NAME(_hx___knockout,"__knockout");
	HX_MARK_MEMBER_NAME(_hx___quality,"__quality");
	HX_MARK_MEMBER_NAME(_hx___ratios,"__ratios");
	HX_MARK_MEMBER_NAME(_hx___strength,"__strength");
	HX_MARK_MEMBER_NAME(_hx___type,"__type");
	HX_MARK_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_MARK_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_MARK_MEMBER_NAME(_hx___colorFadeArr,"__colorFadeArr");
	 ::openfl::filters::BitmapFilter_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GradientGlowFilter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___alphas,"__alphas");
	HX_VISIT_MEMBER_NAME(_hx___angle,"__angle");
	HX_VISIT_MEMBER_NAME(_hx___blurX,"__blurX");
	HX_VISIT_MEMBER_NAME(_hx___horizontalPasses,"__horizontalPasses");
	HX_VISIT_MEMBER_NAME(_hx___blurY,"__blurY");
	HX_VISIT_MEMBER_NAME(_hx___verticalPasses,"__verticalPasses");
	HX_VISIT_MEMBER_NAME(_hx___colors,"__colors");
	HX_VISIT_MEMBER_NAME(_hx___distance,"__distance");
	HX_VISIT_MEMBER_NAME(_hx___knockout,"__knockout");
	HX_VISIT_MEMBER_NAME(_hx___quality,"__quality");
	HX_VISIT_MEMBER_NAME(_hx___ratios,"__ratios");
	HX_VISIT_MEMBER_NAME(_hx___strength,"__strength");
	HX_VISIT_MEMBER_NAME(_hx___type,"__type");
	HX_VISIT_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_VISIT_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_VISIT_MEMBER_NAME(_hx___colorFadeArr,"__colorFadeArr");
	 ::openfl::filters::BitmapFilter_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val GradientGlowFilter_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_type() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"angle") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_angle() ); }
		if (HX_FIELD_EQ(inName,"blurX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_blurX() ); }
		if (HX_FIELD_EQ(inName,"blurY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_blurY() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"alphas") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_alphas() ); }
		if (HX_FIELD_EQ(inName,"colors") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_colors() ); }
		if (HX_FIELD_EQ(inName,"ratios") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_ratios() ); }
		if (HX_FIELD_EQ(inName,"__type") ) { return ::hx::Val( _hx___type ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_quality() ); }
		if (HX_FIELD_EQ(inName,"__angle") ) { return ::hx::Val( _hx___angle ); }
		if (HX_FIELD_EQ(inName,"__blurX") ) { return ::hx::Val( _hx___blurX ); }
		if (HX_FIELD_EQ(inName,"__blurY") ) { return ::hx::Val( _hx___blurY ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_distance() ); }
		if (HX_FIELD_EQ(inName,"knockout") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_knockout() ); }
		if (HX_FIELD_EQ(inName,"strength") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_strength() ); }
		if (HX_FIELD_EQ(inName,"__alphas") ) { return ::hx::Val( _hx___alphas ); }
		if (HX_FIELD_EQ(inName,"__colors") ) { return ::hx::Val( _hx___colors ); }
		if (HX_FIELD_EQ(inName,"__ratios") ) { return ::hx::Val( _hx___ratios ); }
		if (HX_FIELD_EQ(inName,"get_type") ) { return ::hx::Val( get_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return ::hx::Val( set_type_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__quality") ) { return ::hx::Val( _hx___quality ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { return ::hx::Val( _hx___offsetX ); }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { return ::hx::Val( _hx___offsetY ); }
		if (HX_FIELD_EQ(inName,"get_angle") ) { return ::hx::Val( get_angle_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_angle") ) { return ::hx::Val( set_angle_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_blurX") ) { return ::hx::Val( get_blurX_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blurX") ) { return ::hx::Val( set_blurX_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_blurY") ) { return ::hx::Val( get_blurY_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blurY") ) { return ::hx::Val( set_blurY_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__distance") ) { return ::hx::Val( _hx___distance ); }
		if (HX_FIELD_EQ(inName,"__knockout") ) { return ::hx::Val( _hx___knockout ); }
		if (HX_FIELD_EQ(inName,"__strength") ) { return ::hx::Val( _hx___strength ); }
		if (HX_FIELD_EQ(inName,"get_alphas") ) { return ::hx::Val( get_alphas_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alphas") ) { return ::hx::Val( set_alphas_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_colors") ) { return ::hx::Val( get_colors_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_colors") ) { return ::hx::Val( set_colors_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_ratios") ) { return ::hx::Val( get_ratios_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_ratios") ) { return ::hx::Val( set_ratios_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_quality") ) { return ::hx::Val( get_quality_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_quality") ) { return ::hx::Val( set_quality_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initShader") ) { return ::hx::Val( _hx___initShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"__updateSize") ) { return ::hx::Val( _hx___updateSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_distance") ) { return ::hx::Val( get_distance_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_distance") ) { return ::hx::Val( set_distance_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_knockout") ) { return ::hx::Val( get_knockout_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_knockout") ) { return ::hx::Val( set_knockout_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_strength") ) { return ::hx::Val( get_strength_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_strength") ) { return ::hx::Val( set_strength_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__colorFadeArr") ) { return ::hx::Val( _hx___colorFadeArr ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__verticalPasses") ) { return ::hx::Val( _hx___verticalPasses ); }
		if (HX_FIELD_EQ(inName,"__setColorBitmap") ) { return ::hx::Val( _hx___setColorBitmap_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__horizontalPasses") ) { return ::hx::Val( _hx___horizontalPasses ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__calculateNumShaderPasses") ) { return ::hx::Val( _hx___calculateNumShaderPasses_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool GradientGlowFilter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"__colorFadeBmp") ) { outValue = ( _hx___colorFadeBmp ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__colorRatioShader") ) { outValue = ( _hx___colorRatioShader ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__fullCombineShader") ) { outValue = ( _hx___fullCombineShader ); return true; }
	}
	return false;
}

::hx::Val GradientGlowFilter_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_type(inValue.Cast< ::String >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"angle") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_angle(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"blurX") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_blurX(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"blurY") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_blurY(inValue.Cast< Float >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"alphas") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_alphas(inValue.Cast< ::Array< Float > >()) ); }
		if (HX_FIELD_EQ(inName,"colors") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_colors(inValue.Cast< ::Array< int > >()) ); }
		if (HX_FIELD_EQ(inName,"ratios") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_ratios(inValue.Cast< ::Array< int > >()) ); }
		if (HX_FIELD_EQ(inName,"__type") ) { _hx___type=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_quality(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"__angle") ) { _hx___angle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__blurX") ) { _hx___blurX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__blurY") ) { _hx___blurY=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_distance(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"knockout") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_knockout(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"strength") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_strength(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"__alphas") ) { _hx___alphas=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__colors") ) { _hx___colors=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__ratios") ) { _hx___ratios=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__quality") ) { _hx___quality=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { _hx___offsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { _hx___offsetY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__distance") ) { _hx___distance=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__knockout") ) { _hx___knockout=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__strength") ) { _hx___strength=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__colorFadeArr") ) { _hx___colorFadeArr=inValue.Cast<  ::openfl::utils::ByteArrayData >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__verticalPasses") ) { _hx___verticalPasses=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__horizontalPasses") ) { _hx___horizontalPasses=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool GradientGlowFilter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"__colorFadeBmp") ) { _hx___colorFadeBmp=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__colorRatioShader") ) { _hx___colorRatioShader=ioValue.Cast<  ::flxanimate::filters::_GradientGlowFilter::ColorRatioShader >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__fullCombineShader") ) { _hx___fullCombineShader=ioValue.Cast<  ::flxanimate::filters::_GradientGlowFilter::FullCombineShader >(); return true; }
	}
	return false;
}

void GradientGlowFilter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("alphas",55,cb,3b,42));
	outFields->push(HX_("angle",d3,43,e2,22));
	outFields->push(HX_("blurX",d1,0f,01,b5));
	outFields->push(HX_("blurY",d2,0f,01,b5));
	outFields->push(HX_("colors",b0,c5,86,c6));
	outFields->push(HX_("distance",35,93,f9,6b));
	outFields->push(HX_("knockout",fa,a9,a5,6f));
	outFields->push(HX_("quality",bf,04,4c,44));
	outFields->push(HX_("ratios",08,35,8a,bb));
	outFields->push(HX_("strength",81,d2,8e,8e));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("__alphas",75,36,6b,ea));
	outFields->push(HX_("__angle",b3,9c,40,8d));
	outFields->push(HX_("__blurX",b1,68,5f,1f));
	outFields->push(HX_("__horizontalPasses",a3,9a,5d,02));
	outFields->push(HX_("__blurY",b2,68,5f,1f));
	outFields->push(HX_("__verticalPasses",b5,4b,f5,ec));
	outFields->push(HX_("__colors",d0,30,b6,6e));
	outFields->push(HX_("__distance",55,06,32,0f));
	outFields->push(HX_("__knockout",1a,1d,de,12));
	outFields->push(HX_("__quality",9f,55,9a,c5));
	outFields->push(HX_("__ratios",28,a0,b9,63));
	outFields->push(HX_("__strength",a1,45,c7,31));
	outFields->push(HX_("__type",da,55,01,fc));
	outFields->push(HX_("__offsetX",45,5a,b3,58));
	outFields->push(HX_("__offsetY",46,5a,b3,58));
	outFields->push(HX_("__colorFadeArr",42,12,49,7b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GradientGlowFilter_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(GradientGlowFilter_obj,_hx___alphas),HX_("__alphas",75,36,6b,ea)},
	{::hx::fsFloat,(int)offsetof(GradientGlowFilter_obj,_hx___angle),HX_("__angle",b3,9c,40,8d)},
	{::hx::fsFloat,(int)offsetof(GradientGlowFilter_obj,_hx___blurX),HX_("__blurX",b1,68,5f,1f)},
	{::hx::fsInt,(int)offsetof(GradientGlowFilter_obj,_hx___horizontalPasses),HX_("__horizontalPasses",a3,9a,5d,02)},
	{::hx::fsFloat,(int)offsetof(GradientGlowFilter_obj,_hx___blurY),HX_("__blurY",b2,68,5f,1f)},
	{::hx::fsInt,(int)offsetof(GradientGlowFilter_obj,_hx___verticalPasses),HX_("__verticalPasses",b5,4b,f5,ec)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(GradientGlowFilter_obj,_hx___colors),HX_("__colors",d0,30,b6,6e)},
	{::hx::fsFloat,(int)offsetof(GradientGlowFilter_obj,_hx___distance),HX_("__distance",55,06,32,0f)},
	{::hx::fsBool,(int)offsetof(GradientGlowFilter_obj,_hx___knockout),HX_("__knockout",1a,1d,de,12)},
	{::hx::fsInt,(int)offsetof(GradientGlowFilter_obj,_hx___quality),HX_("__quality",9f,55,9a,c5)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(GradientGlowFilter_obj,_hx___ratios),HX_("__ratios",28,a0,b9,63)},
	{::hx::fsFloat,(int)offsetof(GradientGlowFilter_obj,_hx___strength),HX_("__strength",a1,45,c7,31)},
	{::hx::fsString,(int)offsetof(GradientGlowFilter_obj,_hx___type),HX_("__type",da,55,01,fc)},
	{::hx::fsFloat,(int)offsetof(GradientGlowFilter_obj,_hx___offsetX),HX_("__offsetX",45,5a,b3,58)},
	{::hx::fsFloat,(int)offsetof(GradientGlowFilter_obj,_hx___offsetY),HX_("__offsetY",46,5a,b3,58)},
	{::hx::fsObject /*  ::openfl::utils::ByteArrayData */ ,(int)offsetof(GradientGlowFilter_obj,_hx___colorFadeArr),HX_("__colorFadeArr",42,12,49,7b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo GradientGlowFilter_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::flxanimate::filters::_GradientGlowFilter::ColorRatioShader */ ,(void *) &GradientGlowFilter_obj::_hx___colorRatioShader,HX_("__colorRatioShader",0d,01,2d,3b)},
	{::hx::fsObject /*  ::flxanimate::filters::_GradientGlowFilter::FullCombineShader */ ,(void *) &GradientGlowFilter_obj::_hx___fullCombineShader,HX_("__fullCombineShader",d5,48,54,f5)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(void *) &GradientGlowFilter_obj::_hx___colorFadeBmp,HX_("__colorFadeBmp",26,d0,49,7b)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String GradientGlowFilter_obj_sMemberFields[] = {
	HX_("__alphas",75,36,6b,ea),
	HX_("__angle",b3,9c,40,8d),
	HX_("__blurX",b1,68,5f,1f),
	HX_("__horizontalPasses",a3,9a,5d,02),
	HX_("__blurY",b2,68,5f,1f),
	HX_("__verticalPasses",b5,4b,f5,ec),
	HX_("__colors",d0,30,b6,6e),
	HX_("__distance",55,06,32,0f),
	HX_("__knockout",1a,1d,de,12),
	HX_("__quality",9f,55,9a,c5),
	HX_("__ratios",28,a0,b9,63),
	HX_("__strength",a1,45,c7,31),
	HX_("__type",da,55,01,fc),
	HX_("__offsetX",45,5a,b3,58),
	HX_("__offsetY",46,5a,b3,58),
	HX_("__colorFadeArr",42,12,49,7b),
	HX_("clone",5d,13,63,48),
	HX_("__initShader",75,95,f9,59),
	HX_("__updateSize",8a,06,9c,3d),
	HX_("__calculateNumShaderPasses",44,14,02,b7),
	HX_("__setColorBitmap",50,68,32,87),
	HX_("get_alphas",1e,3b,c3,32),
	HX_("set_alphas",92,d9,40,36),
	HX_("get_angle",2a,a0,8b,66),
	HX_("set_angle",36,8c,dc,49),
	HX_("get_blurX",28,6c,aa,f8),
	HX_("set_blurX",34,58,fb,db),
	HX_("get_blurY",29,6c,aa,f8),
	HX_("set_blurY",35,58,fb,db),
	HX_("get_colors",79,35,0e,b7),
	HX_("set_colors",ed,d3,8b,ba),
	HX_("get_distance",3e,47,13,21),
	HX_("set_distance",b2,6a,0c,36),
	HX_("get_knockout",03,5e,bf,24),
	HX_("set_knockout",77,81,b8,39),
	HX_("get_quality",d6,64,46,ca),
	HX_("set_quality",e2,6b,b3,d4),
	HX_("get_ratios",d1,a4,11,ac),
	HX_("set_ratios",45,43,8f,af),
	HX_("get_strength",8a,86,a8,43),
	HX_("set_strength",fe,a9,a1,58),
	HX_("get_type",43,ae,c3,cc),
	HX_("set_type",b7,07,21,7b),
	::String(null()) };

static void GradientGlowFilter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GradientGlowFilter_obj::_hx___colorRatioShader,"__colorRatioShader");
	HX_MARK_MEMBER_NAME(GradientGlowFilter_obj::_hx___fullCombineShader,"__fullCombineShader");
	HX_MARK_MEMBER_NAME(GradientGlowFilter_obj::_hx___colorFadeBmp,"__colorFadeBmp");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GradientGlowFilter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GradientGlowFilter_obj::_hx___colorRatioShader,"__colorRatioShader");
	HX_VISIT_MEMBER_NAME(GradientGlowFilter_obj::_hx___fullCombineShader,"__fullCombineShader");
	HX_VISIT_MEMBER_NAME(GradientGlowFilter_obj::_hx___colorFadeBmp,"__colorFadeBmp");
};

#endif

::hx::Class GradientGlowFilter_obj::__mClass;

static ::String GradientGlowFilter_obj_sStaticFields[] = {
	HX_("__colorRatioShader",0d,01,2d,3b),
	HX_("__fullCombineShader",d5,48,54,f5),
	HX_("__colorFadeBmp",26,d0,49,7b),
	::String(null())
};

void GradientGlowFilter_obj::__register()
{
	GradientGlowFilter_obj _hx_dummy;
	GradientGlowFilter_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.filters.GradientGlowFilter",c7,ae,7d,4c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GradientGlowFilter_obj::__GetStatic;
	__mClass->mSetStaticField = &GradientGlowFilter_obj::__SetStatic;
	__mClass->mMarkFunc = GradientGlowFilter_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(GradientGlowFilter_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GradientGlowFilter_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GradientGlowFilter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GradientGlowFilter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GradientGlowFilter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GradientGlowFilter_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GradientGlowFilter_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_54_boot)
HXDLIN(  54)		_hx___colorRatioShader =  ::flxanimate::filters::_GradientGlowFilter::ColorRatioShader_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_55_boot)
HXDLIN(  55)		_hx___fullCombineShader =  ::flxanimate::filters::_GradientGlowFilter::FullCombineShader_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_25fa1c831a7caa8d_56_boot)
HXDLIN(  56)		_hx___colorFadeBmp =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,255,1,null(),0);
            	}
}

} // end namespace flxanimate
} // end namespace filters
