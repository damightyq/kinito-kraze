// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flxanimate_geom_FlxMatrix3D
#include <flxanimate/geom/FlxMatrix3D.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_87b8090ad13866b4_15_new,"flxanimate.geom.FlxMatrix3D","new",0x2c632f43,"flxanimate.geom.FlxMatrix3D.new","flxanimate/geom/FlxMatrix3D.hx",15,0x91f5eded)
HX_LOCAL_STACK_FRAME(_hx_pos_87b8090ad13866b4_18_concat2D,"flxanimate.geom.FlxMatrix3D","concat2D",0x6f326c23,"flxanimate.geom.FlxMatrix3D.concat2D","flxanimate/geom/FlxMatrix3D.hx",18,0x91f5eded)
HX_LOCAL_STACK_FRAME(_hx_pos_87b8090ad13866b4_41_toString,"flxanimate.geom.FlxMatrix3D","toString",0x44ed9ae9,"flxanimate.geom.FlxMatrix3D.toString","flxanimate/geom/FlxMatrix3D.hx",41,0x91f5eded)
HX_LOCAL_STACK_FRAME(_hx_pos_87b8090ad13866b4_45_toMatrix,"flxanimate.geom.FlxMatrix3D","toMatrix",0xef85a859,"flxanimate.geom.FlxMatrix3D.toMatrix","flxanimate/geom/FlxMatrix3D.hx",45,0x91f5eded)
HX_LOCAL_STACK_FRAME(_hx_pos_87b8090ad13866b4_54_clone,"flxanimate.geom.FlxMatrix3D","clone",0x1e323100,"flxanimate.geom.FlxMatrix3D.clone","flxanimate/geom/FlxMatrix3D.hx",54,0x91f5eded)
HX_LOCAL_STACK_FRAME(_hx_pos_87b8090ad13866b4_50_fromMatrix,"flxanimate.geom.FlxMatrix3D","fromMatrix",0x407fcec8,"flxanimate.geom.FlxMatrix3D.fromMatrix","flxanimate/geom/FlxMatrix3D.hx",50,0x91f5eded)
namespace flxanimate{
namespace geom{

void FlxMatrix3D_obj::__construct( ::openfl::_Vector::FloatVector v){
            	HX_STACKFRAME(&_hx_pos_87b8090ad13866b4_15_new)
HXDLIN(  15)		super::__construct(v);
            	}

Dynamic FlxMatrix3D_obj::__CreateEmpty() { return new FlxMatrix3D_obj; }

void *FlxMatrix3D_obj::_hx_vtable = 0;

Dynamic FlxMatrix3D_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxMatrix3D_obj > _hx_result = new FlxMatrix3D_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FlxMatrix3D_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x45c06ede) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x45c06ede;
	} else {
		return inClassId==(int)0x7fe41419;
	}
}

void FlxMatrix3D_obj::concat2D( ::openfl::geom::Matrix m){
            	HX_STACKFRAME(&_hx_pos_87b8090ad13866b4_18_concat2D)
HXLINE(  19)		Float a = this->rawData->get(0);
HXLINE(  20)		Float b = this->rawData->get(1);
HXLINE(  21)		Float c = this->rawData->get(4);
HXLINE(  22)		Float d = this->rawData->get(5);
HXLINE(  23)		Float tx = this->rawData->get(12);
HXLINE(  24)		Float ty = this->rawData->get(13);
HXLINE(  26)		Float a1 = ((a * m->a) + (b * m->c));
HXLINE(  27)		b = ((a * m->b) + (b * m->d));
HXLINE(  28)		a = a1;
HXLINE(  30)		Float c1 = ((c * m->a) + (d * m->c));
HXLINE(  31)		d = ((c * m->b) + (d * m->d));
HXLINE(  32)		c = c1;
HXLINE(  34)		Float tx1 = (((tx * m->a) + (ty * m->c)) + m->tx);
HXLINE(  35)		ty = (((tx * m->b) + (ty * m->d)) + m->ty);
HXLINE(  36)		tx = tx1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxMatrix3D_obj,concat2D,(void))

::String FlxMatrix3D_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_87b8090ad13866b4_41_toString)
HXDLIN(  41)		::Dynamic this1 = this->rawData;
HXDLIN(  41)		if (::hx::IsNotNull( this1 )) {
HXDLIN(  41)			return ( ( ::openfl::_Vector::FloatVector)(this1) )->toString();
            		}
            		else {
HXDLIN(  41)			return null();
            		}
HXDLIN(  41)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMatrix3D_obj,toString,return )

 ::flixel::math::FlxMatrix FlxMatrix3D_obj::toMatrix(){
            	HX_GC_STACKFRAME(&_hx_pos_87b8090ad13866b4_45_toMatrix)
HXDLIN(  45)		Float _hx_tmp = this->rawData->get(0);
HXDLIN(  45)		Float _hx_tmp1 = this->rawData->get(1);
HXDLIN(  45)		Float _hx_tmp2 = this->rawData->get(4);
HXDLIN(  45)		Float _hx_tmp3 = this->rawData->get(5);
HXDLIN(  45)		Float _hx_tmp4 = this->rawData->get(12);
HXDLIN(  45)		return  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,this->rawData->get(13));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxMatrix3D_obj,toMatrix,return )

 ::openfl::geom::Matrix3D FlxMatrix3D_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_87b8090ad13866b4_54_clone)
HXDLIN(  54)		return  ::flxanimate::geom::FlxMatrix3D_obj::__alloc( HX_CTX ,( ( ::openfl::_Vector::FloatVector)(this->rawData->copy()) ));
            	}


 ::flxanimate::geom::FlxMatrix3D FlxMatrix3D_obj::fromMatrix( ::flixel::math::FlxMatrix m){
            	HX_GC_STACKFRAME(&_hx_pos_87b8090ad13866b4_50_fromMatrix)
HXDLIN(  50)		int length = null();
HXDLIN(  50)		bool fixed = null();
HXDLIN(  50)		return  ::flxanimate::geom::FlxMatrix3D_obj::__alloc( HX_CTX , ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,::Array_obj< Float >::__new(16)->init(0,m->a)->init(1,m->b)->init(2,((Float)0.0))->init(3,m->c)->init(4,m->d)->init(5,((Float)1.0))->init(6,((Float)0.0))->init(7,((Float)0.0))->init(8,((Float)0.0))->init(9,((Float)0.0))->init(10,((Float)1.0))->init(11,m->tx)->init(12,m->ty)->init(13,((Float)0.0))->init(14,((Float)0.0))->init(15,((Float)1.0)),true));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxMatrix3D_obj,fromMatrix,return )


::hx::ObjectPtr< FlxMatrix3D_obj > FlxMatrix3D_obj::__new( ::openfl::_Vector::FloatVector v) {
	::hx::ObjectPtr< FlxMatrix3D_obj > __this = new FlxMatrix3D_obj();
	__this->__construct(v);
	return __this;
}

::hx::ObjectPtr< FlxMatrix3D_obj > FlxMatrix3D_obj::__alloc(::hx::Ctx *_hx_ctx, ::openfl::_Vector::FloatVector v) {
	FlxMatrix3D_obj *__this = (FlxMatrix3D_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxMatrix3D_obj), true, "flxanimate.geom.FlxMatrix3D"));
	*(void **)__this = FlxMatrix3D_obj::_hx_vtable;
	__this->__construct(v);
	return __this;
}

FlxMatrix3D_obj::FlxMatrix3D_obj()
{
}

::hx::Val FlxMatrix3D_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"concat2D") ) { return ::hx::Val( concat2D_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"toMatrix") ) { return ::hx::Val( toMatrix_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxMatrix3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"fromMatrix") ) { outValue = fromMatrix_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxMatrix3D_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FlxMatrix3D_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxMatrix3D_obj_sMemberFields[] = {
	HX_("concat2D",e6,a1,b3,62),
	HX_("toString",ac,d0,6e,38),
	HX_("toMatrix",1c,de,06,e3),
	HX_("clone",5d,13,63,48),
	::String(null()) };

::hx::Class FlxMatrix3D_obj::__mClass;

static ::String FlxMatrix3D_obj_sStaticFields[] = {
	HX_("fromMatrix",4b,3b,0c,ff),
	::String(null())
};

void FlxMatrix3D_obj::__register()
{
	FlxMatrix3D_obj _hx_dummy;
	FlxMatrix3D_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.geom.FlxMatrix3D",d1,d1,2b,06);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxMatrix3D_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxMatrix3D_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxMatrix3D_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxMatrix3D_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxMatrix3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxMatrix3D_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flxanimate
} // end namespace geom
