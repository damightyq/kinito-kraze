// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxElement
#include <flxanimate/animate/FlxElement.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxKeyFrame
#include <flxanimate/animate/FlxKeyFrame.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxLayer
#include <flxanimate/animate/FlxLayer.h>
#endif
#ifndef INCLUDED_flxanimate_data_AnimationData
#include <flxanimate/data/AnimationData.h>
#endif
#ifndef INCLUDED_flxanimate_data_ColorEffect
#include <flxanimate/data/ColorEffect.h>
#endif
#ifndef INCLUDED_flxanimate_data__AnimationData_Frame_Impl_
#include <flxanimate/data/_AnimationData/Frame_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_effects_FlxColorEffect
#include <flxanimate/effects/FlxColorEffect.h>
#endif
#ifndef INCLUDED_flxanimate_interfaces_IFilterable
#include <flxanimate/interfaces/IFilterable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_03816aded6b39d0f_16_new,"flxanimate.animate.FlxKeyFrame","new",0xcf066ca6,"flxanimate.animate.FlxKeyFrame.new","flxanimate/animate/FlxKeyFrame.hx",16,0x5d48d20c)
HX_LOCAL_STACK_FRAME(_hx_pos_03816aded6b39d0f_71_set_duration,"flxanimate.animate.FlxKeyFrame","set_duration",0x9f1791cb,"flxanimate.animate.FlxKeyFrame.set_duration","flxanimate/animate/FlxKeyFrame.hx",71,0x5d48d20c)
HX_LOCAL_STACK_FRAME(_hx_pos_03816aded6b39d0f_83_set_filters,"flxanimate.animate.FlxKeyFrame","set_filters",0x345f5b24,"flxanimate.animate.FlxKeyFrame.set_filters","flxanimate/animate/FlxKeyFrame.hx",83,0x5d48d20c)
HX_LOCAL_STACK_FRAME(_hx_pos_03816aded6b39d0f_96_getFrameIndices,"flxanimate.animate.FlxKeyFrame","getFrameIndices",0x17984976,"flxanimate.animate.FlxKeyFrame.getFrameIndices","flxanimate/animate/FlxKeyFrame.hx",96,0x5d48d20c)
HX_LOCAL_STACK_FRAME(_hx_pos_03816aded6b39d0f_100_update,"flxanimate.animate.FlxKeyFrame","update",0xbf215983,"flxanimate.animate.FlxKeyFrame.update","flxanimate/animate/FlxKeyFrame.hx",100,0x5d48d20c)
HX_LOCAL_STACK_FRAME(_hx_pos_03816aded6b39d0f_114_updateRender,"flxanimate.animate.FlxKeyFrame","updateRender",0xc563bd39,"flxanimate.animate.FlxKeyFrame.updateRender","flxanimate/animate/FlxKeyFrame.hx",114,0x5d48d20c)
HX_LOCAL_STACK_FRAME(_hx_pos_03816aded6b39d0f_125_add,"flxanimate.animate.FlxKeyFrame","add",0xcefc8e67,"flxanimate.animate.FlxKeyFrame.add","flxanimate/animate/FlxKeyFrame.hx",125,0x5d48d20c)
HX_LOCAL_STACK_FRAME(_hx_pos_03816aded6b39d0f_151_get,"flxanimate.animate.FlxKeyFrame","get",0xcf011cdc,"flxanimate.animate.FlxKeyFrame.get","flxanimate/animate/FlxKeyFrame.hx",151,0x5d48d20c)
HX_LOCAL_STACK_FRAME(_hx_pos_03816aded6b39d0f_155_getList,"flxanimate.animate.FlxKeyFrame","getList",0xfa73035a,"flxanimate.animate.FlxKeyFrame.getList","flxanimate/animate/FlxKeyFrame.hx",155,0x5d48d20c)
HX_LOCAL_STACK_FRAME(_hx_pos_03816aded6b39d0f_158_remove,"flxanimate.animate.FlxKeyFrame","remove",0x3ca46fbe,"flxanimate.animate.FlxKeyFrame.remove","flxanimate/animate/FlxKeyFrame.hx",158,0x5d48d20c)
HX_LOCAL_STACK_FRAME(_hx_pos_03816aded6b39d0f_180_fireCallbacks,"flxanimate.animate.FlxKeyFrame","fireCallbacks",0xf294c83e,"flxanimate.animate.FlxKeyFrame.fireCallbacks","flxanimate/animate/FlxKeyFrame.hx",180,0x5d48d20c)
HX_LOCAL_STACK_FRAME(_hx_pos_03816aded6b39d0f_190_removeCallbacks,"flxanimate.animate.FlxKeyFrame","removeCallbacks",0x58ad7b70,"flxanimate.animate.FlxKeyFrame.removeCallbacks","flxanimate/animate/FlxKeyFrame.hx",190,0x5d48d20c)
HX_LOCAL_STACK_FRAME(_hx_pos_03816aded6b39d0f_193_clone,"flxanimate.animate.FlxKeyFrame","clone",0x1e29cd23,"flxanimate.animate.FlxKeyFrame.clone","flxanimate/animate/FlxKeyFrame.hx",193,0x5d48d20c)
HX_LOCAL_STACK_FRAME(_hx_pos_03816aded6b39d0f_200_destroy,"flxanimate.animate.FlxKeyFrame","destroy",0x04c36440,"flxanimate.animate.FlxKeyFrame.destroy","flxanimate/animate/FlxKeyFrame.hx",200,0x5d48d20c)
HX_LOCAL_STACK_FRAME(_hx_pos_03816aded6b39d0f_215_toString,"flxanimate.animate.FlxKeyFrame","toString",0x8dc1f6a6,"flxanimate.animate.FlxKeyFrame.toString","flxanimate/animate/FlxKeyFrame.hx",215,0x5d48d20c)
HX_LOCAL_STACK_FRAME(_hx_pos_03816aded6b39d0f_218_set_colorEffect,"flxanimate.animate.FlxKeyFrame","set_colorEffect",0x48480e3d,"flxanimate.animate.FlxKeyFrame.set_colorEffect","flxanimate/animate/FlxKeyFrame.hx",218,0x5d48d20c)
HX_LOCAL_STACK_FRAME(_hx_pos_03816aded6b39d0f_230_set_index,"flxanimate.animate.FlxKeyFrame","set_index",0x387cf83b,"flxanimate.animate.FlxKeyFrame.set_index","flxanimate/animate/FlxKeyFrame.hx",230,0x5d48d20c)
HX_LOCAL_STACK_FRAME(_hx_pos_03816aded6b39d0f_240_set_name,"flxanimate.animate.FlxKeyFrame","set_name",0xcc6aad42,"flxanimate.animate.FlxKeyFrame.set_name","flxanimate/animate/FlxKeyFrame.hx",240,0x5d48d20c)
HX_LOCAL_STACK_FRAME(_hx_pos_03816aded6b39d0f_250_set_classicTween,"flxanimate.animate.FlxKeyFrame","set_classicTween",0x0a9190f0,"flxanimate.animate.FlxKeyFrame.set_classicTween","flxanimate/animate/FlxKeyFrame.hx",250,0x5d48d20c)
HX_LOCAL_STACK_FRAME(_hx_pos_03816aded6b39d0f_259_fromJSON,"flxanimate.animate.FlxKeyFrame","fromJSON",0xf96ed28c,"flxanimate.animate.FlxKeyFrame.fromJSON","flxanimate/animate/FlxKeyFrame.hx",259,0x5d48d20c)
namespace flxanimate{
namespace animate{

void FlxKeyFrame_obj::__construct(int index, ::Dynamic __o_duration,::Array< ::Dynamic> elements, ::flxanimate::effects::FlxColorEffect colorEffect,::String name){
            		 ::Dynamic duration = __o_duration;
            		if (::hx::IsNull(__o_duration)) duration = 1;
            	HX_GC_STACKFRAME(&_hx_pos_03816aded6b39d0f_16_new)
HXLINE(  57)		this->_curFrame = 0;
HXLINE(  53)		this->clTMat =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  51)		this->_ff = -1;
HXLINE(  45)		this->_renderDirty = false;
HXLINE(  60)		this->set_index(index);
HXLINE(  61)		this->set_duration(( (int)(duration) ));
HXLINE(  63)		this->set_name(name);
HXLINE(  64)		::Array< ::Dynamic> _hx_tmp;
HXDLIN(  64)		if (::hx::IsNull( elements )) {
HXLINE(  64)			_hx_tmp = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXLINE(  64)			_hx_tmp = elements;
            		}
HXDLIN(  64)		this->_elements = _hx_tmp;
HXLINE(  65)		this->set_colorEffect(colorEffect);
HXLINE(  66)		this->callbacks = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  67)		this->_bitmapMatrix =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}

Dynamic FlxKeyFrame_obj::__CreateEmpty() { return new FlxKeyFrame_obj; }

void *FlxKeyFrame_obj::_hx_vtable = 0;

Dynamic FlxKeyFrame_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxKeyFrame_obj > _hx_result = new FlxKeyFrame_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool FlxKeyFrame_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6a124bae;
}

int FlxKeyFrame_obj::set_duration(int duration){
            	HX_STACKFRAME(&_hx_pos_03816aded6b39d0f_71_set_duration)
HXLINE(  72)		 ::Dynamic Max = null();
HXDLIN(  72)		Float lowerBound;
HXDLIN(  72)		if ((duration < 1)) {
HXLINE(  72)			lowerBound = ( (Float)(1) );
            		}
            		else {
HXLINE(  72)			lowerBound = ( (Float)(duration) );
            		}
HXDLIN(  72)		Float difference;
HXDLIN(  72)		bool difference1;
HXDLIN(  72)		if (::hx::IsNotNull( Max )) {
HXLINE(  72)			difference1 = ::hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE(  72)			difference1 = false;
            		}
HXDLIN(  72)		if (difference1) {
HXLINE(  72)			difference = ( (Float)(Max) );
            		}
            		else {
HXLINE(  72)			difference = lowerBound;
            		}
HXDLIN(  72)		int difference2 = ( (int)((( (Float)(this->duration) ) - difference)) );
HXLINE(  73)		 ::Dynamic Max1 = null();
HXDLIN(  73)		Float lowerBound1;
HXDLIN(  73)		if ((duration < 1)) {
HXLINE(  73)			lowerBound1 = ( (Float)(1) );
            		}
            		else {
HXLINE(  73)			lowerBound1 = ( (Float)(duration) );
            		}
HXDLIN(  73)		Float _hx_tmp;
HXDLIN(  73)		bool _hx_tmp1;
HXDLIN(  73)		if (::hx::IsNotNull( Max1 )) {
HXLINE(  73)			_hx_tmp1 = ::hx::IsGreater( lowerBound1,Max1 );
            		}
            		else {
HXLINE(  73)			_hx_tmp1 = false;
            		}
HXDLIN(  73)		if (_hx_tmp1) {
HXLINE(  73)			_hx_tmp = ( (Float)(Max1) );
            		}
            		else {
HXLINE(  73)			_hx_tmp = lowerBound1;
            		}
HXDLIN(  73)		this->duration = ( (int)(_hx_tmp) );
HXLINE(  74)		if (::hx::IsNotNull( this->_parent )) {
HXLINE(  76)			 ::flxanimate::animate::FlxKeyFrame frame = this->_parent->get((this->index + duration));
HXLINE(  77)			if (::hx::IsNotNull( frame )) {
HXLINE(  78)				frame->set_index((frame->index - difference2));
            			}
            		}
HXLINE(  80)		return duration;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxKeyFrame_obj,set_duration,return )

::Array< ::Dynamic> FlxKeyFrame_obj::set_filters(::Array< ::Dynamic> value){
            	HX_STACKFRAME(&_hx_pos_03816aded6b39d0f_83_set_filters)
HXLINE(  84)		this->_renderDirty = true;
HXLINE(  85)		bool _hx_tmp;
HXDLIN(  85)		if (::hx::IsNotNull( value )) {
HXLINE(  85)			_hx_tmp = (value->length > 0);
            		}
            		else {
HXLINE(  85)			_hx_tmp = false;
            		}
HXDLIN(  85)		if (_hx_tmp) {
HXLINE(  86)			this->_cacheAsBitmap = true;
            		}
HXLINE(  87)		return (this->filters = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxKeyFrame_obj,set_filters,return )

::Array< int > FlxKeyFrame_obj::getFrameIndices(){
            	HX_STACKFRAME(&_hx_pos_03816aded6b39d0f_96_getFrameIndices)
HXDLIN(  96)		::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN(  96)		{
HXDLIN(  96)			int _g1 = this->index;
HXDLIN(  96)			int _g2 = (this->index + this->duration);
HXDLIN(  96)			while((_g1 < _g2)){
HXDLIN(  96)				_g1 = (_g1 + 1);
HXDLIN(  96)				int i = (_g1 - 1);
HXDLIN(  96)				_g->push(i);
            			}
            		}
HXDLIN(  96)		return _g;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxKeyFrame_obj,getFrameIndices,return )

void FlxKeyFrame_obj::update(int frame){
            	HX_STACKFRAME(&_hx_pos_03816aded6b39d0f_100_update)
HXLINE( 101)		bool _hx_tmp;
HXDLIN( 101)		bool _hx_tmp1;
HXDLIN( 101)		if (::hx::IsNotNull( this->filters )) {
HXLINE( 101)			_hx_tmp1 = (this->filters->length == 0);
            		}
            		else {
HXLINE( 101)			_hx_tmp1 = true;
            		}
HXDLIN( 101)		if (!(_hx_tmp1)) {
HXLINE( 101)			_hx_tmp = this->_renderDirty;
            		}
            		else {
HXLINE( 101)			_hx_tmp = true;
            		}
HXDLIN( 101)		if (_hx_tmp) {
HXLINE( 101)			return;
            		}
HXLINE( 103)		{
HXLINE( 103)			int _g = 0;
HXDLIN( 103)			::Array< ::Dynamic> _g1 = this->filters;
HXDLIN( 103)			while((_g < _g1->length)){
HXLINE( 103)				 ::openfl::filters::BitmapFilter filter = _g1->__get(_g).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN( 103)				_g = (_g + 1);
HXLINE( 106)				if (filter->_hx___renderDirty) {
HXLINE( 108)					this->_renderDirty = true;
HXLINE( 109)					return;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxKeyFrame_obj,update,(void))

void FlxKeyFrame_obj::updateRender(Float elapsed,int curFrame, ::haxe::ds::StringMap dictionary, ::Dynamic __o_swfRender){
            		 ::Dynamic swfRender = __o_swfRender;
            		if (::hx::IsNull(__o_swfRender)) swfRender = false;
            	HX_STACKFRAME(&_hx_pos_03816aded6b39d0f_114_updateRender)
HXLINE( 115)		int curFrame1 = (curFrame - this->index);
HXLINE( 117)		this->update(curFrame1);
HXLINE( 119)		{
HXLINE( 119)			int _g = 0;
HXDLIN( 119)			::Array< ::Dynamic> _g1 = this->_elements;
HXDLIN( 119)			while((_g < _g1->length)){
HXLINE( 119)				 ::flxanimate::animate::FlxElement element = _g1->__get(_g).StaticCast<  ::flxanimate::animate::FlxElement >();
HXDLIN( 119)				_g = (_g + 1);
HXLINE( 121)				element->updateRender(elapsed,curFrame1,dictionary,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxKeyFrame_obj,updateRender,(void))

 ::Dynamic FlxKeyFrame_obj::add( ::Dynamic element){
            	HX_STACKFRAME(&_hx_pos_03816aded6b39d0f_125_add)
HXLINE( 126)		if (::Std_obj::isOfType(element,::hx::ClassOf< ::flxanimate::animate::FlxElement >())) {
HXLINE( 128)			 ::flxanimate::animate::FlxElement element1 = ( ( ::flxanimate::animate::FlxElement)(element) );
HXLINE( 129)			if (::hx::IsNull( element1 )) {
HXLINE( 131)				::flixel::FlxG_obj::log->advanced(HX_("this element is null!",ea,b4,c8,22),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
HXLINE( 132)				return null();
            			}
HXLINE( 134)			element1->_parent = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 135)			this->_elements->push(element1);
            		}
            		else {
HXLINE( 139)			if (::hx::IsNull( element )) {
HXLINE( 141)				::flixel::FlxG_obj::log->advanced(HX_("this callback is null!",7d,42,17,8e),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
HXLINE( 142)				return null();
            			}
HXLINE( 144)			this->callbacks->push(element);
            		}
HXLINE( 147)		return element;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxKeyFrame_obj,add,return )

 ::flxanimate::animate::FlxElement FlxKeyFrame_obj::get(int element){
            	HX_STACKFRAME(&_hx_pos_03816aded6b39d0f_151_get)
HXDLIN( 151)		return this->_elements->__get(element).StaticCast<  ::flxanimate::animate::FlxElement >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxKeyFrame_obj,get,return )

::Array< ::Dynamic> FlxKeyFrame_obj::getList(){
            	HX_STACKFRAME(&_hx_pos_03816aded6b39d0f_155_getList)
HXDLIN( 155)		return this->_elements;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxKeyFrame_obj,getList,return )

 ::Dynamic FlxKeyFrame_obj::remove( ::Dynamic element){
            	HX_STACKFRAME(&_hx_pos_03816aded6b39d0f_158_remove)
HXLINE( 159)		if (::hx::IsNull( element )) {
HXLINE( 159)			return null();
            		}
HXLINE( 161)		if (::Std_obj::isOfType(element,::hx::ClassOf< ::flxanimate::animate::FlxElement >())) {
HXLINE( 163)			bool _hx_tmp;
HXDLIN( 163)			if (::hx::IsNotNull( element )) {
HXLINE( 163)				_hx_tmp = !(this->_elements->remove(element));
            			}
            			else {
HXLINE( 163)				_hx_tmp = true;
            			}
HXDLIN( 163)			if (_hx_tmp) {
HXLINE( 165)				::flixel::FlxG_obj::log->advanced(HX_("this element doesn't exist!",0e,f1,35,1e),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
HXLINE( 166)				return null();
            			}
            		}
            		else {
HXLINE( 171)			bool _hx_tmp1;
HXDLIN( 171)			if (::hx::IsNotNull( element )) {
HXLINE( 171)				_hx_tmp1 = !(this->callbacks->remove(element));
            			}
            			else {
HXLINE( 171)				_hx_tmp1 = true;
            			}
HXDLIN( 171)			if (_hx_tmp1) {
HXLINE( 173)				::flixel::FlxG_obj::log->advanced(HX_("this callback doesn't exist!",e1,6e,3f,2b),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
HXLINE( 174)				return null();
            			}
            		}
HXLINE( 177)		return element;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxKeyFrame_obj,remove,return )

void FlxKeyFrame_obj::fireCallbacks(){
            	HX_STACKFRAME(&_hx_pos_03816aded6b39d0f_180_fireCallbacks)
HXLINE( 181)		int i = 0;
HXLINE( 182)		while((i < this->callbacks->get_length())){
HXLINE( 184)			this->callbacks->__get(i)();
HXLINE( 185)			i = (i + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxKeyFrame_obj,fireCallbacks,(void))

void FlxKeyFrame_obj::removeCallbacks(){
            	HX_STACKFRAME(&_hx_pos_03816aded6b39d0f_190_removeCallbacks)
HXDLIN( 190)		this->callbacks = ::cpp::VirtualArray_obj::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxKeyFrame_obj,removeCallbacks,(void))

 ::flxanimate::animate::FlxKeyFrame FlxKeyFrame_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_03816aded6b39d0f_193_clone)
HXLINE( 194)		 ::flxanimate::animate::FlxKeyFrame keyframe =  ::flxanimate::animate::FlxKeyFrame_obj::__alloc( HX_CTX ,this->duration,null(),this->_elements,this->colorEffect,this->name);
HXLINE( 195)		keyframe->callbacks = this->callbacks;
HXLINE( 196)		return keyframe;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxKeyFrame_obj,clone,return )

void FlxKeyFrame_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_03816aded6b39d0f_200_destroy)
HXLINE( 201)		this->_parent = null();
HXLINE( 202)		this->set_name(null());
HXLINE( 203)		this->set_index(0);
HXLINE( 204)		this->set_duration(0);
HXLINE( 205)		this->callbacks = null();
HXLINE( 206)		this->set_colorEffect(null());
HXLINE( 207)		{
HXLINE( 207)			int _g = 0;
HXDLIN( 207)			::Array< ::Dynamic> _g1 = this->_elements;
HXDLIN( 207)			while((_g < _g1->length)){
HXLINE( 207)				 ::flxanimate::animate::FlxElement element = _g1->__get(_g).StaticCast<  ::flxanimate::animate::FlxElement >();
HXDLIN( 207)				_g = (_g + 1);
HXLINE( 209)				element->destroy();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxKeyFrame_obj,destroy,(void))

::String FlxKeyFrame_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_03816aded6b39d0f_215_toString)
HXDLIN( 215)		return ((((HX_("{index: ",1d,0b,fc,5b) + this->index) + HX_(", duration: ",6e,fe,63,48)) + this->duration) + HX_("}",7d,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxKeyFrame_obj,toString,return )

 ::flxanimate::effects::FlxColorEffect FlxKeyFrame_obj::set_colorEffect( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_03816aded6b39d0f_218_set_colorEffect)
HXLINE( 219)		if (::hx::IsNull( value )) {
HXLINE( 220)			value = ::flxanimate::data::ColorEffect_obj::None_dyn();
            		}
HXLINE( 221)		if (::Std_obj::isOfType(value,::hx::ClassOf< ::flxanimate::data::ColorEffect >())) {
HXLINE( 222)			this->colorEffect = ::flxanimate::data::AnimationData_obj::parseColorEffect(value);
            		}
            		else {
HXLINE( 224)			this->colorEffect = ( ( ::flxanimate::effects::FlxColorEffect)(value) );
            		}
HXLINE( 226)		return this->colorEffect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxKeyFrame_obj,set_colorEffect,return )

int FlxKeyFrame_obj::set_index(int i){
            	HX_STACKFRAME(&_hx_pos_03816aded6b39d0f_230_set_index)
HXLINE( 231)		this->index = i;
HXLINE( 232)		if (::hx::IsNotNull( this->_parent )) {
HXLINE( 234)			this->_parent->remove(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 235)			this->_parent->add(::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 237)		return this->index;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxKeyFrame_obj,set_index,return )

::String FlxKeyFrame_obj::set_name(::String name){
            	HX_STACKFRAME(&_hx_pos_03816aded6b39d0f_240_set_name)
HXLINE( 241)		if (::hx::IsNotNull( this->_parent )) {
HXLINE( 243)			if (::hx::IsInstanceEq( this->_parent->_labels->get(this->name),::hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 244)				this->_parent->_labels->remove(this->name);
            			}
HXLINE( 245)			this->_parent->_labels->set(name,::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 247)		return (this->name = name);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxKeyFrame_obj,set_name,return )

bool FlxKeyFrame_obj::set_classicTween(bool value){
            	HX_STACKFRAME(&_hx_pos_03816aded6b39d0f_250_set_classicTween)
HXLINE( 251)		this->classicTween = value;
HXLINE( 253)		if (::hx::IsNotNull( this->_parent )) {
HXLINE( 254)			 ::flxanimate::animate::FlxKeyFrame _hx_tmp;
HXDLIN( 254)			if (!(this->classicTween)) {
HXLINE( 254)				_hx_tmp = null();
            			}
            			else {
HXLINE( 254)				_hx_tmp = this->_parent->_keyframes->__get((this->_parent->_keyframes->indexOf(::hx::ObjectPtr<OBJ_>(this),null()) + 1)).StaticCast<  ::flxanimate::animate::FlxKeyFrame >();
            			}
HXDLIN( 254)			this->_tFrame = _hx_tmp;
            		}
HXLINE( 256)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxKeyFrame_obj,set_classicTween,return )

 ::flxanimate::animate::FlxKeyFrame FlxKeyFrame_obj::fromJSON( ::Dynamic frame){
            	HX_GC_STACKFRAME(&_hx_pos_03816aded6b39d0f_259_fromJSON)
HXLINE( 260)		if (::hx::IsNull( frame )) {
HXLINE( 260)			return null();
            		}
HXLINE( 262)		int keyframe = ::flxanimate::data::_AnimationData::Frame_Impl__obj::get_I(frame);
HXDLIN( 262)		int keyframe1 = ::flxanimate::data::_AnimationData::Frame_Impl__obj::get_DU(frame);
HXDLIN( 262)		 ::flxanimate::animate::FlxKeyFrame keyframe2 =  ::flxanimate::animate::FlxKeyFrame_obj::__alloc( HX_CTX ,keyframe,keyframe1,null(),null(),::flxanimate::data::_AnimationData::Frame_Impl__obj::get_N(frame));
HXLINE( 263)		keyframe2->set_colorEffect(::flxanimate::data::AnimationData_obj::fromColorJson(::flxanimate::data::_AnimationData::Frame_Impl__obj::get_C(frame)));
HXLINE( 265)		if (::hx::IsNotNull( ::flxanimate::data::_AnimationData::Frame_Impl__obj::get_E(frame) )) {
HXLINE( 267)			int _g = 0;
HXDLIN( 267)			::Array< ::Dynamic> _g1 = ::flxanimate::data::_AnimationData::Frame_Impl__obj::get_E(frame);
HXDLIN( 267)			while((_g < _g1->length)){
HXLINE( 267)				 ::Dynamic element = _g1->__get(_g);
HXDLIN( 267)				_g = (_g + 1);
HXLINE( 269)				keyframe2->add(::flxanimate::animate::FlxElement_obj::fromJSON(element));
            			}
            		}
HXLINE( 272)		keyframe2->set_filters(::flxanimate::data::AnimationData_obj::fromFilterJson(::flxanimate::data::_AnimationData::Frame_Impl__obj::get_F(frame)));
HXLINE( 274)		return keyframe2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxKeyFrame_obj,fromJSON,return )


::hx::ObjectPtr< FlxKeyFrame_obj > FlxKeyFrame_obj::__new(int index, ::Dynamic __o_duration,::Array< ::Dynamic> elements, ::flxanimate::effects::FlxColorEffect colorEffect,::String name) {
	::hx::ObjectPtr< FlxKeyFrame_obj > __this = new FlxKeyFrame_obj();
	__this->__construct(index,__o_duration,elements,colorEffect,name);
	return __this;
}

::hx::ObjectPtr< FlxKeyFrame_obj > FlxKeyFrame_obj::__alloc(::hx::Ctx *_hx_ctx,int index, ::Dynamic __o_duration,::Array< ::Dynamic> elements, ::flxanimate::effects::FlxColorEffect colorEffect,::String name) {
	FlxKeyFrame_obj *__this = (FlxKeyFrame_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxKeyFrame_obj), true, "flxanimate.animate.FlxKeyFrame"));
	*(void **)__this = FlxKeyFrame_obj::_hx_vtable;
	__this->__construct(index,__o_duration,elements,colorEffect,name);
	return __this;
}

FlxKeyFrame_obj::FlxKeyFrame_obj()
{
}

void FlxKeyFrame_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxKeyFrame);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(_filterFrame,"_filterFrame");
	HX_MARK_MEMBER_NAME(classicTween,"classicTween");
	HX_MARK_MEMBER_NAME(_tFrame,"_tFrame");
	HX_MARK_MEMBER_NAME(_bitmapMatrix,"_bitmapMatrix");
	HX_MARK_MEMBER_NAME(callbacks,"callbacks");
	HX_MARK_MEMBER_NAME(_parent,"_parent");
	HX_MARK_MEMBER_NAME(index,"index");
	HX_MARK_MEMBER_NAME(duration,"duration");
	HX_MARK_MEMBER_NAME(colorEffect,"colorEffect");
	HX_MARK_MEMBER_NAME(_elements,"_elements");
	HX_MARK_MEMBER_NAME(_renderDirty,"_renderDirty");
	HX_MARK_MEMBER_NAME(_cacheAsBitmap,"_cacheAsBitmap");
	HX_MARK_MEMBER_NAME(_ff,"_ff");
	HX_MARK_MEMBER_NAME(clTMat,"clTMat");
	HX_MARK_MEMBER_NAME(filters,"filters");
	HX_MARK_MEMBER_NAME(_curFrame,"_curFrame");
	HX_MARK_END_CLASS();
}

void FlxKeyFrame_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(_filterFrame,"_filterFrame");
	HX_VISIT_MEMBER_NAME(classicTween,"classicTween");
	HX_VISIT_MEMBER_NAME(_tFrame,"_tFrame");
	HX_VISIT_MEMBER_NAME(_bitmapMatrix,"_bitmapMatrix");
	HX_VISIT_MEMBER_NAME(callbacks,"callbacks");
	HX_VISIT_MEMBER_NAME(_parent,"_parent");
	HX_VISIT_MEMBER_NAME(index,"index");
	HX_VISIT_MEMBER_NAME(duration,"duration");
	HX_VISIT_MEMBER_NAME(colorEffect,"colorEffect");
	HX_VISIT_MEMBER_NAME(_elements,"_elements");
	HX_VISIT_MEMBER_NAME(_renderDirty,"_renderDirty");
	HX_VISIT_MEMBER_NAME(_cacheAsBitmap,"_cacheAsBitmap");
	HX_VISIT_MEMBER_NAME(_ff,"_ff");
	HX_VISIT_MEMBER_NAME(clTMat,"clTMat");
	HX_VISIT_MEMBER_NAME(filters,"filters");
	HX_VISIT_MEMBER_NAME(_curFrame,"_curFrame");
}

::hx::Val FlxKeyFrame_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_ff") ) { return ::hx::Val( _ff ); }
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { return ::hx::Val( index ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"clTMat") ) { return ::hx::Val( clTMat ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return ::hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_tFrame") ) { return ::hx::Val( _tFrame ); }
		if (HX_FIELD_EQ(inName,"_parent") ) { return ::hx::Val( _parent ); }
		if (HX_FIELD_EQ(inName,"filters") ) { return ::hx::Val( filters ); }
		if (HX_FIELD_EQ(inName,"getList") ) { return ::hx::Val( getList_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { return ::hx::Val( duration ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_name") ) { return ::hx::Val( set_name_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"callbacks") ) { return ::hx::Val( callbacks ); }
		if (HX_FIELD_EQ(inName,"_elements") ) { return ::hx::Val( _elements ); }
		if (HX_FIELD_EQ(inName,"_curFrame") ) { return ::hx::Val( _curFrame ); }
		if (HX_FIELD_EQ(inName,"set_index") ) { return ::hx::Val( set_index_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"colorEffect") ) { return ::hx::Val( colorEffect ); }
		if (HX_FIELD_EQ(inName,"set_filters") ) { return ::hx::Val( set_filters_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_filterFrame") ) { return ::hx::Val( _filterFrame ); }
		if (HX_FIELD_EQ(inName,"classicTween") ) { return ::hx::Val( classicTween ); }
		if (HX_FIELD_EQ(inName,"_renderDirty") ) { return ::hx::Val( _renderDirty ); }
		if (HX_FIELD_EQ(inName,"set_duration") ) { return ::hx::Val( set_duration_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateRender") ) { return ::hx::Val( updateRender_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_bitmapMatrix") ) { return ::hx::Val( _bitmapMatrix ); }
		if (HX_FIELD_EQ(inName,"fireCallbacks") ) { return ::hx::Val( fireCallbacks_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_cacheAsBitmap") ) { return ::hx::Val( _cacheAsBitmap ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getFrameIndices") ) { return ::hx::Val( getFrameIndices_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeCallbacks") ) { return ::hx::Val( removeCallbacks_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_colorEffect") ) { return ::hx::Val( set_colorEffect_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"set_classicTween") ) { return ::hx::Val( set_classicTween_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxKeyFrame_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromJSON") ) { outValue = fromJSON_dyn(); return true; }
	}
	return false;
}

::hx::Val FlxKeyFrame_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_ff") ) { _ff=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_name(inValue.Cast< ::String >()) );name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_index(inValue.Cast< int >()) );index=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"clTMat") ) { clTMat=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_tFrame") ) { _tFrame=inValue.Cast<  ::flxanimate::animate::FlxKeyFrame >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_parent") ) { _parent=inValue.Cast<  ::flxanimate::animate::FlxLayer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"filters") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_filters(inValue.Cast< ::Array< ::Dynamic> >()) );filters=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_duration(inValue.Cast< int >()) );duration=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"callbacks") ) { callbacks=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_elements") ) { _elements=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_curFrame") ) { _curFrame=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"colorEffect") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_colorEffect(inValue.Cast<  ::flxanimate::effects::FlxColorEffect >()) );colorEffect=inValue.Cast<  ::flxanimate::effects::FlxColorEffect >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_filterFrame") ) { _filterFrame=inValue.Cast<  ::flixel::graphics::frames::FlxFrame >(); return inValue; }
		if (HX_FIELD_EQ(inName,"classicTween") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_classicTween(inValue.Cast< bool >()) );classicTween=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_renderDirty") ) { _renderDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_bitmapMatrix") ) { _bitmapMatrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_cacheAsBitmap") ) { _cacheAsBitmap=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxKeyFrame_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("_filterFrame",56,7b,3f,1c));
	outFields->push(HX_("classicTween",f9,06,70,6b));
	outFields->push(HX_("_tFrame",b8,d4,8d,69));
	outFields->push(HX_("_bitmapMatrix",6f,6a,56,a9));
	outFields->push(HX_("callbacks",0e,f3,bf,a6));
	outFields->push(HX_("_parent",c9,16,f5,5b));
	outFields->push(HX_("index",12,9b,14,be));
	outFields->push(HX_("duration",54,0f,8e,14));
	outFields->push(HX_("colorEffect",54,ec,cb,1a));
	outFields->push(HX_("_elements",96,2d,5a,cb));
	outFields->push(HX_("_renderDirty",dd,2a,8b,0b));
	outFields->push(HX_("_cacheAsBitmap",24,73,61,a8));
	outFields->push(HX_("_ff",5f,6f,48,00));
	outFields->push(HX_("clTMat",d5,0d,5c,fc));
	outFields->push(HX_("filters",bb,a1,46,09));
	outFields->push(HX_("_curFrame",ec,69,c7,95));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxKeyFrame_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(FlxKeyFrame_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsObject /*  ::flixel::graphics::frames::FlxFrame */ ,(int)offsetof(FlxKeyFrame_obj,_filterFrame),HX_("_filterFrame",56,7b,3f,1c)},
	{::hx::fsBool,(int)offsetof(FlxKeyFrame_obj,classicTween),HX_("classicTween",f9,06,70,6b)},
	{::hx::fsObject /*  ::flxanimate::animate::FlxKeyFrame */ ,(int)offsetof(FlxKeyFrame_obj,_tFrame),HX_("_tFrame",b8,d4,8d,69)},
	{::hx::fsObject /*  ::flixel::math::FlxMatrix */ ,(int)offsetof(FlxKeyFrame_obj,_bitmapMatrix),HX_("_bitmapMatrix",6f,6a,56,a9)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(FlxKeyFrame_obj,callbacks),HX_("callbacks",0e,f3,bf,a6)},
	{::hx::fsObject /*  ::flxanimate::animate::FlxLayer */ ,(int)offsetof(FlxKeyFrame_obj,_parent),HX_("_parent",c9,16,f5,5b)},
	{::hx::fsInt,(int)offsetof(FlxKeyFrame_obj,index),HX_("index",12,9b,14,be)},
	{::hx::fsInt,(int)offsetof(FlxKeyFrame_obj,duration),HX_("duration",54,0f,8e,14)},
	{::hx::fsObject /*  ::flxanimate::effects::FlxColorEffect */ ,(int)offsetof(FlxKeyFrame_obj,colorEffect),HX_("colorEffect",54,ec,cb,1a)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxKeyFrame_obj,_elements),HX_("_elements",96,2d,5a,cb)},
	{::hx::fsBool,(int)offsetof(FlxKeyFrame_obj,_renderDirty),HX_("_renderDirty",dd,2a,8b,0b)},
	{::hx::fsBool,(int)offsetof(FlxKeyFrame_obj,_cacheAsBitmap),HX_("_cacheAsBitmap",24,73,61,a8)},
	{::hx::fsInt,(int)offsetof(FlxKeyFrame_obj,_ff),HX_("_ff",5f,6f,48,00)},
	{::hx::fsObject /*  ::flixel::math::FlxMatrix */ ,(int)offsetof(FlxKeyFrame_obj,clTMat),HX_("clTMat",d5,0d,5c,fc)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxKeyFrame_obj,filters),HX_("filters",bb,a1,46,09)},
	{::hx::fsInt,(int)offsetof(FlxKeyFrame_obj,_curFrame),HX_("_curFrame",ec,69,c7,95)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxKeyFrame_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxKeyFrame_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("_filterFrame",56,7b,3f,1c),
	HX_("classicTween",f9,06,70,6b),
	HX_("_tFrame",b8,d4,8d,69),
	HX_("_bitmapMatrix",6f,6a,56,a9),
	HX_("callbacks",0e,f3,bf,a6),
	HX_("_parent",c9,16,f5,5b),
	HX_("index",12,9b,14,be),
	HX_("duration",54,0f,8e,14),
	HX_("colorEffect",54,ec,cb,1a),
	HX_("_elements",96,2d,5a,cb),
	HX_("_renderDirty",dd,2a,8b,0b),
	HX_("_cacheAsBitmap",24,73,61,a8),
	HX_("_ff",5f,6f,48,00),
	HX_("clTMat",d5,0d,5c,fc),
	HX_("filters",bb,a1,46,09),
	HX_("_curFrame",ec,69,c7,95),
	HX_("set_duration",d1,e6,a0,de),
	HX_("set_filters",de,08,ae,99),
	HX_("getFrameIndices",30,5c,c9,a6),
	HX_("update",09,86,05,87),
	HX_("updateRender",3f,12,ed,04),
	HX_("add",21,f2,49,00),
	HX_("get",96,80,4e,00),
	HX_("getList",14,cc,35,1a),
	HX_("remove",44,9c,88,04),
	HX_("fireCallbacks",78,d8,35,4b),
	HX_("removeCallbacks",2a,8e,de,e7),
	HX_("clone",5d,13,63,48),
	HX_("destroy",fa,2c,86,24),
	HX_("toString",ac,d0,6e,38),
	HX_("set_colorEffect",f7,20,79,d7),
	HX_("set_index",75,e3,0e,e5),
	HX_("set_name",48,87,17,77),
	HX_("set_classicTween",f6,e0,50,c6),
	::String(null()) };

::hx::Class FlxKeyFrame_obj::__mClass;

static ::String FlxKeyFrame_obj_sStaticFields[] = {
	HX_("fromJSON",92,ac,1b,a4),
	::String(null())
};

void FlxKeyFrame_obj::__register()
{
	FlxKeyFrame_obj _hx_dummy;
	FlxKeyFrame_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.animate.FlxKeyFrame",b4,e1,25,ed);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxKeyFrame_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxKeyFrame_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxKeyFrame_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxKeyFrame_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxKeyFrame_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxKeyFrame_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flxanimate
} // end namespace animate
