// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxElement
#include <flxanimate/animate/FlxElement.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxKeyFrame
#include <flxanimate/animate/FlxKeyFrame.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxLayer
#include <flxanimate/animate/FlxLayer.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxSymbol
#include <flxanimate/animate/FlxSymbol.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxTimeline
#include <flxanimate/animate/FlxTimeline.h>
#endif
#ifndef INCLUDED_flxanimate_animate_SymbolParameters
#include <flxanimate/animate/SymbolParameters.h>
#endif
#ifndef INCLUDED_flxanimate_interfaces_IFilterable
#include <flxanimate/interfaces/IFilterable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_16_new,"flxanimate.animate.FlxSymbol","new",0x3f8d5570,"flxanimate.animate.FlxSymbol.new","flxanimate/animate/FlxSymbol.hx",16,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_80_hideLayer,"flxanimate.animate.FlxSymbol","hideLayer",0xfb21eebf,"flxanimate.animate.FlxSymbol.hideLayer","flxanimate/animate/FlxSymbol.hx",80,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_88_showLayer,"flxanimate.animate.FlxSymbol","showLayer",0xce2798a4,"flxanimate.animate.FlxSymbol.showLayer","flxanimate/animate/FlxSymbol.hx",88,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_97_addCallbackTo,"flxanimate.animate.FlxSymbol","addCallbackTo",0x27966131,"flxanimate.animate.FlxSymbol.addCallbackTo","flxanimate/animate/FlxSymbol.hx",97,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_113_getCallbackFrom,"flxanimate.animate.FlxSymbol","getCallbackFrom",0x96326495,"flxanimate.animate.FlxSymbol.getCallbackFrom","flxanimate/animate/FlxSymbol.hx",113,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_129_removeCallbackFrom,"flxanimate.animate.FlxSymbol","removeCallbackFrom",0xf2d01d23,"flxanimate.animate.FlxSymbol.removeCallbackFrom","flxanimate/animate/FlxSymbol.hx",129,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_144_removeAllCallbacksFrom,"flxanimate.animate.FlxSymbol","removeAllCallbacksFrom",0x4f5aff0b,"flxanimate.animate.FlxSymbol.removeAllCallbacksFrom","flxanimate/animate/FlxSymbol.hx",144,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_154_destroy,"flxanimate.animate.FlxSymbol","destroy",0x75cf7a0a,"flxanimate.animate.FlxSymbol.destroy","flxanimate/animate/FlxSymbol.hx",154,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_160_getNextToFrameLabel,"flxanimate.animate.FlxSymbol","getNextToFrameLabel",0x8ded733b,"flxanimate.animate.FlxSymbol.getNextToFrameLabel","flxanimate/animate/FlxSymbol.hx",160,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_178_getFrameLabel,"flxanimate.animate.FlxSymbol","getFrameLabel",0x2b6017cd,"flxanimate.animate.FlxSymbol.getFrameLabel","flxanimate/animate/FlxSymbol.hx",178,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_204_updateRender,"flxanimate.animate.FlxSymbol","updateRender",0x4b826b2f,"flxanimate.animate.FlxSymbol.updateRender","flxanimate/animate/FlxSymbol.hx",204,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_213_getElement,"flxanimate.animate.FlxSymbol","getElement",0x280e71b6,"flxanimate.animate.FlxSymbol.getElement","flxanimate/animate/FlxSymbol.hx",213,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_261_getFrameLabels,"flxanimate.animate.FlxSymbol","getFrameLabels",0xc8b4bc06,"flxanimate.animate.FlxSymbol.getFrameLabels","flxanimate/animate/FlxSymbol.hx",261,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_239_getFrameLabels,"flxanimate.animate.FlxSymbol","getFrameLabels",0xc8b4bc06,"flxanimate.animate.FlxSymbol.getFrameLabels","flxanimate/animate/FlxSymbol.hx",239,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_270_getFrameLabelNames,"flxanimate.animate.FlxSymbol","getFrameLabelNames",0xeec780bb,"flxanimate.animate.FlxSymbol.getFrameLabelNames","flxanimate/animate/FlxSymbol.hx",270,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_288_getElementByName,"flxanimate.animate.FlxSymbol","getElementByName",0x731e3e18,"flxanimate.animate.FlxSymbol.getElementByName","flxanimate/animate/FlxSymbol.hx",288,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_337_getElementIndex,"flxanimate.animate.FlxSymbol","getElementIndex",0x4f2da57c,"flxanimate.animate.FlxSymbol.getElementIndex","flxanimate/animate/FlxSymbol.hx",337,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_365_swapElements,"flxanimate.animate.FlxSymbol","swapElements",0x3a42c0da,"flxanimate.animate.FlxSymbol.swapElements","flxanimate/animate/FlxSymbol.hx",365,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_380_fireCallbacks,"flxanimate.animate.FlxSymbol","fireCallbacks",0xc74e5188,"flxanimate.animate.FlxSymbol.fireCallbacks","flxanimate/animate/FlxSymbol.hx",380,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_400_get_length,"flxanimate.animate.FlxSymbol","get_length",0x61e7419f,"flxanimate.animate.FlxSymbol.get_length","flxanimate/animate/FlxSymbol.hx",400,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_404_get_layers,"flxanimate.animate.FlxSymbol","get_layers",0x1b90c23b,"flxanimate.animate.FlxSymbol.get_layers","flxanimate/animate/FlxSymbol.hx",404,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_408_get_curFrame,"flxanimate.animate.FlxSymbol","get_curFrame",0x49e07f86,"flxanimate.animate.FlxSymbol.get_curFrame","flxanimate/animate/FlxSymbol.hx",408,0xa6c60c02)
HX_LOCAL_STACK_FRAME(_hx_pos_5a4b2296ba2373e2_412_set_curFrame,"flxanimate.animate.FlxSymbol","set_curFrame",0x5ed9a2fa,"flxanimate.animate.FlxSymbol.set_curFrame","flxanimate/animate/FlxSymbol.hx",412,0xa6c60c02)
namespace flxanimate{
namespace animate{

void FlxSymbol_obj::__construct(::String name, ::flxanimate::animate::FlxTimeline timeline){
            	HX_GC_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_16_new)
HXLINE(  27)		this->_sprites = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  25)		this->activeCount = 0;
HXLINE(  23)		this->_checking = false;
HXLINE(  19)		this->filterPool =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
HXLINE(  65)		this->layers = ::Array_obj< ::String >::__new(0);
HXLINE(  66)		this->set_curFrame(0);
HXLINE(  67)		this->timeline = timeline;
HXLINE(  68)		timeline->_parent = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  70)		this->name = name;
HXLINE(  72)		this->activeCount = 0;
            	}

Dynamic FlxSymbol_obj::__CreateEmpty() { return new FlxSymbol_obj; }

void *FlxSymbol_obj::_hx_vtable = 0;

Dynamic FlxSymbol_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxSymbol_obj > _hx_result = new FlxSymbol_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxSymbol_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4ab655c0;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flxanimate_animate_FlxSymbol__hx_flixel_util_IFlxDestroyable= {
	( void (::hx::Object::*)())&::flxanimate::animate::FlxSymbol_obj::destroy,
};

void *FlxSymbol_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flxanimate_animate_FlxSymbol__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void FlxSymbol_obj::hideLayer(::String layer){
            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_80_hideLayer)
HXDLIN(  80)		this->timeline->hide(layer);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSymbol_obj,hideLayer,(void))

void FlxSymbol_obj::showLayer(::String layer){
            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_88_showLayer)
HXDLIN(  88)		this->timeline->show(layer);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSymbol_obj,showLayer,(void))

bool FlxSymbol_obj::addCallbackTo(::String label, ::Dynamic callback, ::Dynamic layer){
            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_97_addCallbackTo)
HXLINE(  98)		 ::flxanimate::animate::FlxKeyFrame label1 = this->getFrameLabel(label,layer);
HXLINE(  99)		if (::hx::IsNull( label1 )) {
HXLINE( 101)			return false;
            		}
HXLINE( 104)		if ((label1->callbacks->indexOf(callback,null()) != -1)) {
HXLINE( 106)			::flixel::FlxG_obj::log->advanced(HX_("this callback already exists!",e4,8f,bf,fc),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
HXLINE( 107)			return false;
            		}
HXLINE( 109)		label1->callbacks->push(callback);
HXLINE( 110)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxSymbol_obj,addCallbackTo,return )

 ::Dynamic FlxSymbol_obj::getCallbackFrom(::String label, ::Dynamic callback, ::Dynamic layer){
            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_113_getCallbackFrom)
HXLINE( 114)		 ::flxanimate::animate::FlxKeyFrame label1 = this->getFrameLabel(this->name,layer);
HXLINE( 115)		if (::hx::IsNull( label1 )) {
HXLINE( 117)			return null();
            		}
HXLINE( 119)		::cpp::VirtualArray label2 = label1->callbacks;
HXDLIN( 119)		 ::Dynamic c;
HXDLIN( 119)		if (::Std_obj::isOfType(callback,::hx::ClassOf< int >())) {
HXLINE( 119)			c = callback;
            		}
            		else {
HXLINE( 119)			c = label1->callbacks->indexOf(callback,null());
            		}
HXDLIN( 119)		 ::Dynamic c1 = label2->__get(( (int)(c) ));
HXLINE( 120)		return c1;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxSymbol_obj,getCallbackFrom,return )

bool FlxSymbol_obj::removeCallbackFrom(::String label, ::Dynamic callback, ::Dynamic layer){
            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_129_removeCallbackFrom)
HXLINE( 130)		 ::flxanimate::animate::FlxKeyFrame label1 = this->getFrameLabel(this->name,layer);
HXLINE( 131)		if (::hx::IsNull( label1 )) {
HXLINE( 133)			return false;
            		}
HXLINE( 135)		 ::Dynamic callback1;
HXDLIN( 135)		if (::Std_obj::isOfType(callback,::hx::ClassOf< int >())) {
HXLINE( 135)			callback1 = label1->callbacks->__get(( (int)(callback) ));
            		}
            		else {
HXLINE( 135)			callback1 = callback;
            		}
HXLINE( 136)		if ((label1->callbacks->indexOf(callback1,null()) == -1)) {
HXLINE( 138)			::flixel::FlxG_obj::log->advanced(HX_("this callback doesn't exist!",e1,6e,3f,2b),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            		}
HXLINE( 140)		label1->callbacks->remove(callback1);
HXLINE( 141)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxSymbol_obj,removeCallbackFrom,return )

bool FlxSymbol_obj::removeAllCallbacksFrom(::String label, ::Dynamic layer){
            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_144_removeAllCallbacksFrom)
HXLINE( 145)		 ::flxanimate::animate::FlxKeyFrame label1 = this->getFrameLabel(label,layer);
HXLINE( 146)		if (::hx::IsNull( label1 )) {
HXLINE( 148)			return false;
            		}
HXLINE( 150)		label1->removeCallbacks();
HXLINE( 151)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxSymbol_obj,removeAllCallbacksFrom,return )

void FlxSymbol_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_154_destroy)
HXLINE( 155)		this->name = HX_("",00,00,00,00);
HXLINE( 157)		this->timeline->destroy();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSymbol_obj,destroy,(void))

 ::flxanimate::animate::FlxKeyFrame FlxSymbol_obj::getNextToFrameLabel(::String label, ::Dynamic layer){
            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_160_getNextToFrameLabel)
HXLINE( 161)		if (::hx::IsNull( layer )) {
HXLINE( 161)			layer = 0;
            		}
HXLINE( 162)		 ::flxanimate::animate::FlxKeyFrame label1 = this->getFrameLabel(label,layer);
HXLINE( 163)		if (::hx::IsNull( label1 )) {
HXLINE( 163)			return null();
            		}
HXLINE( 165)		 ::flxanimate::animate::FlxLayer layer1 = this->timeline->get(layer);
HXLINE( 166)		int j = layer1->_keyframes->indexOf(label1,null());
HXLINE( 167)		while(true){
HXLINE( 167)			j = (j + 1);
HXDLIN( 167)			if (!(((j - 1) < layer1->_keyframes->length))) {
HXLINE( 167)				goto _hx_goto_8;
            			}
HXLINE( 169)			::String name = layer1->_keyframes->__get(j).StaticCast<  ::flxanimate::animate::FlxKeyFrame >()->name;
HXLINE( 171)			bool _hx_tmp;
HXDLIN( 171)			if (::hx::IsNotNull( name )) {
HXLINE( 171)				_hx_tmp = (name != label1->name);
            			}
            			else {
HXLINE( 171)				_hx_tmp = false;
            			}
HXDLIN( 171)			if (_hx_tmp) {
HXLINE( 172)				return layer1->_keyframes->__get(j).StaticCast<  ::flxanimate::animate::FlxKeyFrame >();
            			}
            		}
            		_hx_goto_8:;
HXLINE( 175)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxSymbol_obj,getNextToFrameLabel,return )

 ::flxanimate::animate::FlxKeyFrame FlxSymbol_obj::getFrameLabel(::String name, ::Dynamic layer){
            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_178_getFrameLabel)
HXLINE( 179)		 ::flxanimate::animate::FlxKeyFrame frame = null();
HXLINE( 180)		::Array< ::Dynamic> layers;
HXDLIN( 180)		if (::hx::IsNull( layer )) {
HXLINE( 180)			layers = this->timeline->getList();
            		}
            		else {
HXLINE( 180)			layers = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->timeline->get(layer));
            		}
HXLINE( 182)		{
HXLINE( 182)			int _g = 0;
HXDLIN( 182)			while((_g < layers->length)){
HXLINE( 182)				 ::flxanimate::animate::FlxLayer layer1 = layers->__get(_g).StaticCast<  ::flxanimate::animate::FlxLayer >();
HXDLIN( 182)				_g = (_g + 1);
HXLINE( 184)				if (::hx::IsNull( layer1 )) {
HXLINE( 184)					continue;
            				}
HXLINE( 186)				 ::flxanimate::animate::FlxKeyFrame fr = layer1->get(name);
HXLINE( 187)				if (::hx::IsNotNull( fr )) {
HXLINE( 189)					frame = fr;
HXLINE( 190)					goto _hx_goto_10;
            				}
            			}
            			_hx_goto_10:;
            		}
HXLINE( 194)		if (::hx::IsNull( frame )) {
HXLINE( 196)			::flixel::FlxG_obj::log->advanced(((HX_("The frame label \"",f4,cf,00,2a) + name) + HX_("\" does not exist! maybe you misspelled it?",dd,3e,3a,77)),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            		}
HXLINE( 199)		return frame;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxSymbol_obj,getFrameLabel,return )

void FlxSymbol_obj::updateRender(Float elapsed,int curFrame, ::haxe::ds::StringMap dictionary, ::Dynamic __o_swfRender){
            		 ::Dynamic swfRender = __o_swfRender;
            		if (::hx::IsNull(__o_swfRender)) swfRender = false;
            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_204_updateRender)
HXDLIN( 204)		this->timeline->updateRender(elapsed,curFrame,dictionary,swfRender);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxSymbol_obj,updateRender,(void))

 ::flxanimate::animate::FlxElement FlxSymbol_obj::getElement(int index, ::Dynamic frame){
            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_213_getElement)
HXLINE( 214)		if (::hx::IsNull( frame )) {
HXLINE( 215)			frame = this->get_curFrame();
            		}
HXLINE( 216)		{
HXLINE( 216)			int _g = 0;
HXDLIN( 216)			::Array< ::Dynamic> _g1 = this->timeline->getList();
HXDLIN( 216)			while((_g < _g1->length)){
HXLINE( 216)				 ::flxanimate::animate::FlxLayer layer = _g1->__get(_g).StaticCast<  ::flxanimate::animate::FlxLayer >();
HXDLIN( 216)				_g = (_g + 1);
HXLINE( 218)				 ::flxanimate::animate::FlxKeyFrame keyframe = layer->get(frame);
HXLINE( 220)				if (::hx::IsNull( keyframe )) {
HXLINE( 220)					continue;
            				}
HXLINE( 222)				::Array< ::Dynamic> elements = keyframe->getList();
HXLINE( 224)				if ((index > (elements->length - 1))) {
HXLINE( 226)					index = (index - (elements->length - 1));
HXLINE( 227)					continue;
            				}
HXLINE( 230)				return elements->__get(index).StaticCast<  ::flxanimate::animate::FlxElement >();
            			}
            		}
HXLINE( 232)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxSymbol_obj,getElement,return )

::Array< ::Dynamic> FlxSymbol_obj::getFrameLabels( ::Dynamic layer){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run( ::flxanimate::animate::FlxKeyFrame a, ::flxanimate::animate::FlxKeyFrame b){
            			HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_261_getFrameLabels)
HXLINE( 261)			return (a->index - b->index);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_239_getFrameLabels)
HXLINE( 240)		::Array< ::Dynamic> array = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 241)		::Array< ::Dynamic> labels = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 242)		if (::hx::IsNull( layer )) {
HXLINE( 244)			int _g = 0;
HXDLIN( 244)			::Array< ::Dynamic> _g1 = this->timeline->getList();
HXDLIN( 244)			while((_g < _g1->length)){
HXLINE( 244)				 ::flxanimate::animate::FlxLayer layer1 = _g1->__get(_g).StaticCast<  ::flxanimate::animate::FlxLayer >();
HXDLIN( 244)				_g = (_g + 1);
HXLINE( 247)				{
HXLINE( 247)					 ::Dynamic label = layer1->_labels->iterator();
HXDLIN( 247)					while(( (bool)(label->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 247)						 ::flxanimate::animate::FlxKeyFrame label1 = ( ( ::flxanimate::animate::FlxKeyFrame)(label->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 249)						labels->push(label1);
            					}
            				}
            			}
            		}
            		else {
HXLINE( 256)			 ::Dynamic label2 = this->timeline->get(layer)->_labels->iterator();
HXDLIN( 256)			while(( (bool)(label2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 256)				 ::flxanimate::animate::FlxKeyFrame label3 = ( ( ::flxanimate::animate::FlxKeyFrame)(label2->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 258)				labels->push(label3);
            			}
            		}
HXLINE( 261)		labels->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE( 262)		{
HXLINE( 262)			int _g2 = 0;
HXDLIN( 262)			while((_g2 < labels->length)){
HXLINE( 262)				 ::flxanimate::animate::FlxKeyFrame label4 = labels->__get(_g2).StaticCast<  ::flxanimate::animate::FlxKeyFrame >();
HXDLIN( 262)				_g2 = (_g2 + 1);
HXLINE( 264)				array->push(label4);
            			}
            		}
HXLINE( 267)		return array;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSymbol_obj,getFrameLabels,return )

::Array< ::String > FlxSymbol_obj::getFrameLabelNames( ::Dynamic layer){
            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_270_getFrameLabelNames)
HXLINE( 271)		::Array< ::Dynamic> labels = this->getFrameLabels(layer);
HXLINE( 272)		::Array< ::String > array = ::Array_obj< ::String >::__new(0);
HXLINE( 273)		{
HXLINE( 273)			int _g = 0;
HXDLIN( 273)			while((_g < labels->length)){
HXLINE( 273)				 ::flxanimate::animate::FlxKeyFrame label = labels->__get(_g).StaticCast<  ::flxanimate::animate::FlxKeyFrame >();
HXDLIN( 273)				_g = (_g + 1);
HXLINE( 275)				array->push(label->name);
            			}
            		}
HXLINE( 278)		return array;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSymbol_obj,getFrameLabelNames,return )

 ::flxanimate::animate::FlxElement FlxSymbol_obj::getElementByName(::String name, ::Dynamic frame, ::Dynamic layer){
            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_288_getElementByName)
HXLINE( 289)		if (::hx::IsNull( frame )) {
HXLINE( 290)			frame = this->get_curFrame();
            		}
HXLINE( 292)		if (::hx::IsNotNull( layer )) {
HXLINE( 294)			 ::flxanimate::animate::FlxKeyFrame keyframe = this->timeline->get(layer)->get(frame);
HXLINE( 296)			if (::hx::IsNull( keyframe )) {
HXLINE( 296)				return null();
            			}
HXLINE( 298)			{
HXLINE( 298)				int _g = 0;
HXDLIN( 298)				::Array< ::Dynamic> _g1 = keyframe->getList();
HXDLIN( 298)				while((_g < _g1->length)){
HXLINE( 298)					 ::flxanimate::animate::FlxElement element = _g1->__get(_g).StaticCast<  ::flxanimate::animate::FlxElement >();
HXDLIN( 298)					_g = (_g + 1);
HXLINE( 300)					if (::hx::IsNull( element->symbol )) {
HXLINE( 301)						continue;
            					}
HXLINE( 303)					bool _hx_tmp;
HXDLIN( 303)					if ((element->symbol->name != name)) {
HXLINE( 303)						_hx_tmp = (element->symbol->instance == name);
            					}
            					else {
HXLINE( 303)						_hx_tmp = true;
            					}
HXDLIN( 303)					if (_hx_tmp) {
HXLINE( 304)						return element;
            					}
            					else {
HXLINE( 306)						continue;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 311)			int _g2 = 0;
HXDLIN( 311)			::Array< ::Dynamic> _g3 = this->timeline->getList();
HXDLIN( 311)			while((_g2 < _g3->length)){
HXLINE( 311)				 ::flxanimate::animate::FlxLayer layer1 = _g3->__get(_g2).StaticCast<  ::flxanimate::animate::FlxLayer >();
HXDLIN( 311)				_g2 = (_g2 + 1);
HXLINE( 313)				 ::flxanimate::animate::FlxKeyFrame keyframe1 = layer1->get(frame);
HXLINE( 315)				if (::hx::IsNull( keyframe1 )) {
HXLINE( 315)					continue;
            				}
HXLINE( 317)				{
HXLINE( 317)					int _g4 = 0;
HXDLIN( 317)					::Array< ::Dynamic> _g5 = keyframe1->getList();
HXDLIN( 317)					while((_g4 < _g5->length)){
HXLINE( 317)						 ::flxanimate::animate::FlxElement element1 = _g5->__get(_g4).StaticCast<  ::flxanimate::animate::FlxElement >();
HXDLIN( 317)						_g4 = (_g4 + 1);
HXLINE( 319)						if (::hx::IsNull( element1->symbol )) {
HXLINE( 320)							continue;
            						}
HXLINE( 322)						bool _hx_tmp1;
HXDLIN( 322)						if ((element1->symbol->name != name)) {
HXLINE( 322)							_hx_tmp1 = (element1->symbol->instance == name);
            						}
            						else {
HXLINE( 322)							_hx_tmp1 = true;
            						}
HXDLIN( 322)						if (_hx_tmp1) {
HXLINE( 323)							return element1;
            						}
            						else {
HXLINE( 325)							continue;
            						}
            					}
            				}
            			}
            		}
HXLINE( 329)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxSymbol_obj,getElementByName,return )

int FlxSymbol_obj::getElementIndex( ::flxanimate::animate::FlxElement element, ::Dynamic frame){
            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_337_getElementIndex)
HXLINE( 338)		if (::hx::IsNull( frame )) {
HXLINE( 339)			frame = this->get_curFrame();
            		}
HXLINE( 341)		int list = 0;
HXLINE( 342)		{
HXLINE( 342)			int _g = 0;
HXDLIN( 342)			::Array< ::Dynamic> _g1 = this->timeline->getList();
HXDLIN( 342)			while((_g < _g1->length)){
HXLINE( 342)				 ::flxanimate::animate::FlxLayer layer = _g1->__get(_g).StaticCast<  ::flxanimate::animate::FlxLayer >();
HXDLIN( 342)				_g = (_g + 1);
HXLINE( 344)				 ::flxanimate::animate::FlxKeyFrame keyframe = layer->get(frame);
HXLINE( 346)				if (::hx::IsNull( keyframe )) {
HXLINE( 346)					continue;
            				}
HXLINE( 348)				{
HXLINE( 348)					int _g2 = 0;
HXDLIN( 348)					::Array< ::Dynamic> _g3 = keyframe->getList();
HXDLIN( 348)					while((_g2 < _g3->length)){
HXLINE( 348)						 ::flxanimate::animate::FlxElement e = _g3->__get(_g2).StaticCast<  ::flxanimate::animate::FlxElement >();
HXDLIN( 348)						_g2 = (_g2 + 1);
HXLINE( 350)						if (::hx::IsInstanceEq( element,e )) {
HXLINE( 351)							return list;
            						}
HXLINE( 353)						list = (list + 1);
            					}
            				}
            			}
            		}
HXLINE( 356)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxSymbol_obj,getElementIndex,return )

void FlxSymbol_obj::swapElements( ::flxanimate::animate::FlxElement oldElement, ::flxanimate::animate::FlxElement newElement, ::Dynamic frame){
            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_365_swapElements)
HXLINE( 366)		if (::hx::IsNull( frame )) {
HXLINE( 367)			frame = this->get_curFrame();
            		}
HXLINE( 369)		int index = this->getElementIndex(oldElement,null());
HXLINE( 371)		if ((index == -1)) {
HXLINE( 373)			::flixel::FlxG_obj::log->advanced(HX_("oldElement doesnt exist in this symbol!",43,e4,8c,7b),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
HXLINE( 374)			return;
            		}
HXLINE( 376)		 ::flxanimate::animate::FlxElement oldElement1 = this->getElement(index,null());
HXLINE( 377)		oldElement1 = newElement;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxSymbol_obj,swapElements,(void))

void FlxSymbol_obj::fireCallbacks( ::Dynamic frame){
            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_380_fireCallbacks)
HXLINE( 381)		if (::hx::IsNull( frame )) {
HXLINE( 382)			frame = this->_curFrame;
            		}
HXLINE( 384)		{
HXLINE( 384)			int _g = 0;
HXDLIN( 384)			::Array< ::Dynamic> _g1 = this->timeline->getList();
HXDLIN( 384)			while((_g < _g1->length)){
HXLINE( 384)				 ::flxanimate::animate::FlxLayer layer = _g1->__get(_g).StaticCast<  ::flxanimate::animate::FlxLayer >();
HXDLIN( 384)				_g = (_g + 1);
HXLINE( 386)				{
HXLINE( 386)					 ::Dynamic label = layer->_labels->iterator();
HXDLIN( 386)					while(( (bool)(label->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 386)						 ::flxanimate::animate::FlxKeyFrame label1 = ( ( ::flxanimate::animate::FlxKeyFrame)(label->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 388)						if (::hx::IsNotEq( label1->index,frame )) {
HXLINE( 389)							continue;
            						}
HXLINE( 391)						label1->fireCallbacks();
            					}
            				}
            			}
            		}
HXLINE( 394)		if (::hx::IsNotNull( this->onCallback )) {
HXLINE( 395)			this->onCallback();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSymbol_obj,fireCallbacks,(void))

int FlxSymbol_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_400_get_length)
HXDLIN( 400)		return this->timeline->get_totalFrames();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSymbol_obj,get_length,return )

::Array< ::String > FlxSymbol_obj::get_layers(){
            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_404_get_layers)
HXDLIN( 404)		return this->timeline->getListNames();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSymbol_obj,get_layers,return )

int FlxSymbol_obj::get_curFrame(){
            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_408_get_curFrame)
HXDLIN( 408)		return this->_curFrame;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxSymbol_obj,get_curFrame,return )

int FlxSymbol_obj::set_curFrame(int value){
            	HX_STACKFRAME(&_hx_pos_5a4b2296ba2373e2_412_set_curFrame)
HXDLIN( 412)		return (this->_curFrame = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxSymbol_obj,set_curFrame,return )


::hx::ObjectPtr< FlxSymbol_obj > FlxSymbol_obj::__new(::String name, ::flxanimate::animate::FlxTimeline timeline) {
	::hx::ObjectPtr< FlxSymbol_obj > __this = new FlxSymbol_obj();
	__this->__construct(name,timeline);
	return __this;
}

::hx::ObjectPtr< FlxSymbol_obj > FlxSymbol_obj::__alloc(::hx::Ctx *_hx_ctx,::String name, ::flxanimate::animate::FlxTimeline timeline) {
	FlxSymbol_obj *__this = (FlxSymbol_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxSymbol_obj), true, "flxanimate.animate.FlxSymbol"));
	*(void **)__this = FlxSymbol_obj::_hx_vtable;
	__this->__construct(name,timeline);
	return __this;
}

FlxSymbol_obj::FlxSymbol_obj()
{
}

void FlxSymbol_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxSymbol);
	HX_MARK_MEMBER_NAME(filterPool,"filterPool");
	HX_MARK_MEMBER_NAME(_sprite,"_sprite");
	HX_MARK_MEMBER_NAME(_checking,"_checking");
	HX_MARK_MEMBER_NAME(activeCount,"activeCount");
	HX_MARK_MEMBER_NAME(_sprites,"_sprites");
	HX_MARK_MEMBER_NAME(timeline,"timeline");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(labels,"labels");
	HX_MARK_MEMBER_NAME(onCallback,"onCallback");
	HX_MARK_MEMBER_NAME(layers,"layers");
	HX_MARK_MEMBER_NAME(_curFrame,"_curFrame");
	HX_MARK_MEMBER_NAME(_tick,"_tick");
	HX_MARK_END_CLASS();
}

void FlxSymbol_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(filterPool,"filterPool");
	HX_VISIT_MEMBER_NAME(_sprite,"_sprite");
	HX_VISIT_MEMBER_NAME(_checking,"_checking");
	HX_VISIT_MEMBER_NAME(activeCount,"activeCount");
	HX_VISIT_MEMBER_NAME(_sprites,"_sprites");
	HX_VISIT_MEMBER_NAME(timeline,"timeline");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(labels,"labels");
	HX_VISIT_MEMBER_NAME(onCallback,"onCallback");
	HX_VISIT_MEMBER_NAME(layers,"layers");
	HX_VISIT_MEMBER_NAME(_curFrame,"_curFrame");
	HX_VISIT_MEMBER_NAME(_tick,"_tick");
}

::hx::Val FlxSymbol_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_tick") ) { return ::hx::Val( _tick ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_length() : length ); }
		if (HX_FIELD_EQ(inName,"labels") ) { return ::hx::Val( labels ); }
		if (HX_FIELD_EQ(inName,"layers") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_layers() : layers ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_sprite") ) { return ::hx::Val( _sprite ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_sprites") ) { return ::hx::Val( _sprites ); }
		if (HX_FIELD_EQ(inName,"timeline") ) { return ::hx::Val( timeline ); }
		if (HX_FIELD_EQ(inName,"curFrame") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_curFrame() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_checking") ) { return ::hx::Val( _checking ); }
		if (HX_FIELD_EQ(inName,"_curFrame") ) { return ::hx::Val( _curFrame ); }
		if (HX_FIELD_EQ(inName,"hideLayer") ) { return ::hx::Val( hideLayer_dyn() ); }
		if (HX_FIELD_EQ(inName,"showLayer") ) { return ::hx::Val( showLayer_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"filterPool") ) { return ::hx::Val( filterPool ); }
		if (HX_FIELD_EQ(inName,"onCallback") ) { return ::hx::Val( onCallback ); }
		if (HX_FIELD_EQ(inName,"getElement") ) { return ::hx::Val( getElement_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_layers") ) { return ::hx::Val( get_layers_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"activeCount") ) { return ::hx::Val( activeCount ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"updateRender") ) { return ::hx::Val( updateRender_dyn() ); }
		if (HX_FIELD_EQ(inName,"swapElements") ) { return ::hx::Val( swapElements_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_curFrame") ) { return ::hx::Val( get_curFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_curFrame") ) { return ::hx::Val( set_curFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"addCallbackTo") ) { return ::hx::Val( addCallbackTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFrameLabel") ) { return ::hx::Val( getFrameLabel_dyn() ); }
		if (HX_FIELD_EQ(inName,"fireCallbacks") ) { return ::hx::Val( fireCallbacks_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getFrameLabels") ) { return ::hx::Val( getFrameLabels_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getCallbackFrom") ) { return ::hx::Val( getCallbackFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"getElementIndex") ) { return ::hx::Val( getElementIndex_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getElementByName") ) { return ::hx::Val( getElementByName_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"removeCallbackFrom") ) { return ::hx::Val( removeCallbackFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFrameLabelNames") ) { return ::hx::Val( getFrameLabelNames_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getNextToFrameLabel") ) { return ::hx::Val( getNextToFrameLabel_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"removeAllCallbacksFrom") ) { return ::hx::Val( removeAllCallbacksFrom_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxSymbol_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_tick") ) { _tick=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"labels") ) { labels=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"layers") ) { layers=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_sprite") ) { _sprite=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_sprites") ) { _sprites=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeline") ) { timeline=inValue.Cast<  ::flxanimate::animate::FlxTimeline >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curFrame") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_curFrame(inValue.Cast< int >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_checking") ) { _checking=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_curFrame") ) { _curFrame=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"filterPool") ) { filterPool=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onCallback") ) { onCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"activeCount") ) { activeCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxSymbol_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("filterPool",b4,08,a1,56));
	outFields->push(HX_("_sprite",a4,ed,0c,32));
	outFields->push(HX_("_checking",79,18,91,f4));
	outFields->push(HX_("activeCount",29,45,a8,a6));
	outFields->push(HX_("_sprites",4f,02,43,99));
	outFields->push(HX_("timeline",81,6e,3b,fd));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("labels",ff,27,7d,49));
	outFields->push(HX_("layers",82,15,b1,58));
	outFields->push(HX_("curFrame",8d,72,31,4e));
	outFields->push(HX_("_curFrame",ec,69,c7,95));
	outFields->push(HX_("_tick",3c,df,0d,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxSymbol_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::ObjectMap */ ,(int)offsetof(FlxSymbol_obj,filterPool),HX_("filterPool",b4,08,a1,56)},
	{::hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(FlxSymbol_obj,_sprite),HX_("_sprite",a4,ed,0c,32)},
	{::hx::fsBool,(int)offsetof(FlxSymbol_obj,_checking),HX_("_checking",79,18,91,f4)},
	{::hx::fsInt,(int)offsetof(FlxSymbol_obj,activeCount),HX_("activeCount",29,45,a8,a6)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxSymbol_obj,_sprites),HX_("_sprites",4f,02,43,99)},
	{::hx::fsObject /*  ::flxanimate::animate::FlxTimeline */ ,(int)offsetof(FlxSymbol_obj,timeline),HX_("timeline",81,6e,3b,fd)},
	{::hx::fsInt,(int)offsetof(FlxSymbol_obj,length),HX_("length",e6,94,07,9f)},
	{::hx::fsString,(int)offsetof(FlxSymbol_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxSymbol_obj,labels),HX_("labels",ff,27,7d,49)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxSymbol_obj,onCallback),HX_("onCallback",04,6e,bd,5c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(FlxSymbol_obj,layers),HX_("layers",82,15,b1,58)},
	{::hx::fsInt,(int)offsetof(FlxSymbol_obj,_curFrame),HX_("_curFrame",ec,69,c7,95)},
	{::hx::fsFloat,(int)offsetof(FlxSymbol_obj,_tick),HX_("_tick",3c,df,0d,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxSymbol_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxSymbol_obj_sMemberFields[] = {
	HX_("filterPool",b4,08,a1,56),
	HX_("_sprite",a4,ed,0c,32),
	HX_("_checking",79,18,91,f4),
	HX_("activeCount",29,45,a8,a6),
	HX_("_sprites",4f,02,43,99),
	HX_("timeline",81,6e,3b,fd),
	HX_("length",e6,94,07,9f),
	HX_("name",4b,72,ff,48),
	HX_("labels",ff,27,7d,49),
	HX_("onCallback",04,6e,bd,5c),
	HX_("layers",82,15,b1,58),
	HX_("_curFrame",ec,69,c7,95),
	HX_("_tick",3c,df,0d,00),
	HX_("hideLayer",af,3d,1f,cb),
	HX_("showLayer",94,e7,24,9e),
	HX_("addCallbackTo",21,e8,7d,ab),
	HX_("getCallbackFrom",85,87,3d,88),
	HX_("removeCallbackFrom",33,70,89,b1),
	HX_("removeAllCallbacksFrom",1b,1a,23,d7),
	HX_("destroy",fa,2c,86,24),
	HX_("getNextToFrameLabel",2b,ce,5c,b1),
	HX_("getFrameLabel",bd,9e,47,af),
	HX_("updateRender",3f,12,ed,04),
	HX_("getElement",c6,34,b6,55),
	HX_("getFrameLabels",16,47,63,af),
	HX_("getFrameLabelNames",cb,d3,80,ad),
	HX_("getElementByName",28,ad,d1,4a),
	HX_("getElementIndex",6c,c8,38,41),
	HX_("swapElements",ea,67,ad,f3),
	HX_("fireCallbacks",78,d8,35,4b),
	HX_("get_length",af,04,8f,8f),
	HX_("get_layers",4b,85,38,49),
	HX_("get_curFrame",96,26,4b,03),
	HX_("set_curFrame",0a,4a,44,18),
	::String(null()) };

::hx::Class FlxSymbol_obj::__mClass;

void FlxSymbol_obj::__register()
{
	FlxSymbol_obj _hx_dummy;
	FlxSymbol_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.animate.FlxSymbol",7e,1d,82,8c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxSymbol_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxSymbol_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxSymbol_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxSymbol_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flxanimate
} // end namespace animate
