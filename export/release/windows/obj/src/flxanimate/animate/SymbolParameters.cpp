// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxElement
#include <flxanimate/animate/FlxElement.h>
#endif
#ifndef INCLUDED_flxanimate_animate_SymbolParameters
#include <flxanimate/animate/SymbolParameters.h>
#endif
#ifndef INCLUDED_flxanimate_data_AnimationData
#include <flxanimate/data/AnimationData.h>
#endif
#ifndef INCLUDED_flxanimate_data_ColorEffect
#include <flxanimate/data/ColorEffect.h>
#endif
#ifndef INCLUDED_flxanimate_data_Loop
#include <flxanimate/data/Loop.h>
#endif
#ifndef INCLUDED_flxanimate_data_SymbolT
#include <flxanimate/data/SymbolT.h>
#endif
#ifndef INCLUDED_flxanimate_effects_FlxColorEffect
#include <flxanimate/effects/FlxColorEffect.h>
#endif
#ifndef INCLUDED_flxanimate_interfaces_IFilterable
#include <flxanimate/interfaces/IFilterable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a5b45c946faf294d_33_new,"flxanimate.animate.SymbolParameters","new",0xd89b2680,"flxanimate.animate.SymbolParameters.new","flxanimate/animate/SymbolParameters.hx",33,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_149_destroy,"flxanimate.animate.SymbolParameters","destroy",0x0f03131a,"flxanimate.animate.SymbolParameters.destroy","flxanimate/animate/SymbolParameters.hx",149,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_171_set_type,"flxanimate.animate.SymbolParameters","set_type",0xbded7d97,"flxanimate.animate.SymbolParameters.set_type","flxanimate/animate/SymbolParameters.hx",171,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_189_update,"flxanimate.animate.SymbolParameters","update",0xc29ec3e9,"flxanimate.animate.SymbolParameters.update","flxanimate/animate/SymbolParameters.hx",189,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_211_set_loop,"flxanimate.animate.SymbolParameters","set_loop",0xb89c3141,"flxanimate.animate.SymbolParameters.set_loop","flxanimate/animate/SymbolParameters.hx",211,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_224_set_firstFrame,"flxanimate.animate.SymbolParameters","set_firstFrame",0xf051507a,"flxanimate.animate.SymbolParameters.set_firstFrame","flxanimate/animate/SymbolParameters.hx",224,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_235_reset,"flxanimate.animate.SymbolParameters","reset",0xe02967ef,"flxanimate.animate.SymbolParameters.reset","flxanimate/animate/SymbolParameters.hx",235,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_247_get__colorEffect,"flxanimate.animate.SymbolParameters","get__colorEffect",0x5c79dcbe,"flxanimate.animate.SymbolParameters.get__colorEffect","flxanimate/animate/SymbolParameters.hx",247,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_251_set_colorEffect,"flxanimate.animate.SymbolParameters","set_colorEffect",0xe0792717,"flxanimate.animate.SymbolParameters.set_colorEffect","flxanimate/animate/SymbolParameters.hx",251,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_269_set_filters,"flxanimate.animate.SymbolParameters","set_filters",0x08687efe,"flxanimate.animate.SymbolParameters.set_filters","flxanimate/animate/SymbolParameters.hx",269,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_305_set_blendMode,"flxanimate.animate.SymbolParameters","set_blendMode",0x7d7dd857,"flxanimate.animate.SymbolParameters.set_blendMode","flxanimate/animate/SymbolParameters.hx",305,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_321_get_cacheAsBitmap,"flxanimate.animate.SymbolParameters","get_cacheAsBitmap",0xbe255c5a,"flxanimate.animate.SymbolParameters.get_cacheAsBitmap","flxanimate/animate/SymbolParameters.hx",321,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_331_updateBitmaps,"flxanimate.animate.SymbolParameters","updateBitmaps",0x2fcc84bb,"flxanimate.animate.SymbolParameters.updateBitmaps","flxanimate/animate/SymbolParameters.hx",331,0xb2eaa92e)
HX_LOCAL_STACK_FRAME(_hx_pos_a5b45c946faf294d_380_set_cacheAsBitmap,"flxanimate.animate.SymbolParameters","set_cacheAsBitmap",0xe1933466,"flxanimate.animate.SymbolParameters.set_cacheAsBitmap","flxanimate/animate/SymbolParameters.hx",380,0xb2eaa92e)
namespace flxanimate{
namespace animate{

void SymbolParameters_obj::__construct(::String name,::String __o_instance, ::flxanimate::data::SymbolT __o_type, ::flxanimate::data::Loop __o_loop){
            		::String instance = __o_instance;
            		if (::hx::IsNull(__o_instance)) instance = HX_("",00,00,00,00);
            		 ::flxanimate::data::SymbolT type = __o_type;
            		if (::hx::IsNull(__o_type)) type = ::flxanimate::data::SymbolT_obj::Graphic_dyn();
            		 ::flxanimate::data::Loop loop = __o_loop;
            		if (::hx::IsNull(__o_loop)) loop = ::flxanimate::data::Loop_obj::Loop_dyn();
            	HX_GC_STACKFRAME(&_hx_pos_a5b45c946faf294d_33_new)
HXLINE( 122)		this->_needSecondBmp = false;
HXLINE( 108)		this->_renderDirty = false;
HXLINE( 103)		this->_cacheAsBitmap = false;
HXLINE(  99)		this->blendMode = 10;
HXLINE(  91)		this->_curFrame = 0;
HXLINE(  83)		this->firstFrame = 0;
HXLINE( 135)		this->name = name;
HXLINE( 136)		this->instance = instance;
HXLINE( 137)		this->set_type(type);
HXLINE( 138)		this->set_loop(loop);
HXLINE( 139)		this->set_firstFrame(0);
HXLINE( 140)		this->transformationPoint =  ::flixel::math::FlxBasePoint_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ));
HXLINE( 141)		this->set_colorEffect(::flxanimate::data::ColorEffect_obj::None_dyn());
HXLINE( 142)		this->_curFrame = 0;
HXLINE( 143)		this->set_filters(null());
HXLINE( 144)		this->cacheAsBitmapMatrix =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 145)		this->_filterMatrix =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}

Dynamic SymbolParameters_obj::__CreateEmpty() { return new SymbolParameters_obj; }

void *SymbolParameters_obj::_hx_vtable = 0;

Dynamic SymbolParameters_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SymbolParameters_obj > _hx_result = new SymbolParameters_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool SymbolParameters_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x26325a8c;
}

static ::flxanimate::interfaces::IFilterable_obj _hx_flxanimate_animate_SymbolParameters__hx_flxanimate_interfaces_IFilterable= {
	( void (::hx::Object::*)( ::openfl::geom::Rectangle))&::flxanimate::animate::SymbolParameters_obj::updateBitmaps,
};

void *SymbolParameters_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x94486852: return &_hx_flxanimate_animate_SymbolParameters__hx_flxanimate_interfaces_IFilterable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void SymbolParameters_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_149_destroy)
HXLINE( 150)		this->instance = null();
HXLINE( 151)		this->set_type(null());
HXLINE( 152)		this->reverse = false;
HXLINE( 153)		this->set_firstFrame(0);
HXLINE( 154)		this->name = null();
HXLINE( 155)		this->set_colorEffect(null());
HXLINE( 156)		this->transformationPoint = null();
HXLINE( 158)		if (::hx::IsNotNull( this->_filterFrame )) {
HXLINE( 159)			::flixel::FlxG_obj::bitmap->remove(this->_filterFrame->parent);
            		}
HXLINE( 161)		this->_filterFrame = ( ( ::flixel::graphics::frames::FlxFrame)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_filterFrame)) );
HXLINE( 162)		this->_filterCamera = ( ( ::flixel::FlxCamera)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_filterCamera)) );
HXLINE( 163)		this->_filterMatrix = null();
HXLINE( 164)		 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _hx_tmp = ::flixel::FlxG_obj::bitmap;
HXDLIN( 164)		 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _this = ::flixel::FlxG_obj::bitmap;
HXDLIN( 164)		::String key = ::flixel::FlxG_obj::bitmap->findKeyForBitmap(this->_bmp1);
HXDLIN( 164)		_hx_tmp->remove(( ( ::flixel::graphics::FlxGraphic)(_this->_cache->get(key)) ));
HXLINE( 165)		this->_bmp1 = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_bmp1);
HXLINE( 166)		 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::bitmap;
HXDLIN( 166)		 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _this1 = ::flixel::FlxG_obj::bitmap;
HXDLIN( 166)		::String key1 = ::flixel::FlxG_obj::bitmap->findKeyForBitmap(this->_bmp2);
HXDLIN( 166)		_hx_tmp1->remove(( ( ::flixel::graphics::FlxGraphic)(_this1->_cache->get(key1)) ));
HXLINE( 167)		this->_bmp2 = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_bmp2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SymbolParameters_obj,destroy,(void))

 ::flxanimate::data::SymbolT SymbolParameters_obj::set_type( ::flxanimate::data::SymbolT type){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_171_set_type)
HXLINE( 172)		this->type = type;
HXLINE( 173)		 ::flxanimate::data::Loop _hx_tmp;
HXDLIN( 173)		if (::hx::IsNull( type )) {
HXLINE( 173)			_hx_tmp = null();
            		}
            		else {
HXLINE( 173)			_hx_tmp = ::flxanimate::data::Loop_obj::Loop_dyn();
            		}
HXDLIN( 173)		this->set_loop(_hx_tmp);
HXLINE( 175)		if (::hx::IsPointerEq( type,::flxanimate::data::SymbolT_obj::Graphic_dyn() )) {
HXLINE( 177)			this->set_filters(null());
HXLINE( 178)			this->set_blendMode(10);
HXLINE( 179)			::flixel::util::FlxDestroyUtil_obj::destroy(this->_filterFrame);
HXLINE( 180)			this->set_cacheAsBitmap(false);
            		}
HXLINE( 183)		return type;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SymbolParameters_obj,set_type,return )

void SymbolParameters_obj::update(int frame){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_189_update)
HXLINE( 190)		if ((this->_curFrame != frame)) {
HXLINE( 192)			this->_renderDirty = true;
HXLINE( 193)			this->_curFrame = frame;
            		}
HXLINE( 197)		bool _hx_tmp;
HXDLIN( 197)		if (::hx::IsNotNull( this->colorEffect )) {
HXLINE( 197)			_hx_tmp = this->colorEffect->renderDirty;
            		}
            		else {
HXLINE( 197)			_hx_tmp = false;
            		}
HXDLIN( 197)		if (_hx_tmp) {
HXLINE( 198)			this->colorEffect->process();
            		}
HXLINE( 200)		bool _hx_tmp1;
HXDLIN( 200)		bool _hx_tmp2;
HXDLIN( 200)		if (::hx::IsNotNull( this->filters )) {
HXLINE( 200)			_hx_tmp2 = (this->filters->length == 0);
            		}
            		else {
HXLINE( 200)			_hx_tmp2 = true;
            		}
HXDLIN( 200)		if (!(_hx_tmp2)) {
HXLINE( 200)			_hx_tmp1 = this->_renderDirty;
            		}
            		else {
HXLINE( 200)			_hx_tmp1 = true;
            		}
HXDLIN( 200)		if (_hx_tmp1) {
HXLINE( 200)			return;
            		}
HXLINE( 203)		{
HXLINE( 203)			int _g = 0;
HXDLIN( 203)			::Array< ::Dynamic> _g1 = this->filters;
HXDLIN( 203)			while((_g < _g1->length)){
HXLINE( 203)				 ::openfl::filters::BitmapFilter filter = _g1->__get(_g).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN( 203)				_g = (_g + 1);
HXLINE( 205)				if (filter->_hx___renderDirty) {
HXLINE( 206)					this->_renderDirty = true;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SymbolParameters_obj,update,(void))

 ::flxanimate::data::Loop SymbolParameters_obj::set_loop( ::flxanimate::data::Loop loop){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_211_set_loop)
HXLINE( 212)		if (::hx::IsNull( this->type )) {
HXLINE( 212)			return (this->loop = null());
            		}
HXLINE( 213)		 ::flxanimate::data::Loop _hx_tmp;
HXDLIN( 213)		switch((int)(this->type->_hx_getIndex())){
            			case (int)1: {
HXLINE( 213)				_hx_tmp = ::flxanimate::data::Loop_obj::Loop_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 213)				_hx_tmp = ::flxanimate::data::Loop_obj::SingleFrame_dyn();
            			}
            			break;
            			default:{
HXLINE( 213)				_hx_tmp = loop;
            			}
            		}
HXDLIN( 213)		this->loop = _hx_tmp;
HXLINE( 220)		return loop;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SymbolParameters_obj,set_loop,return )

int SymbolParameters_obj::set_firstFrame(int value){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_224_set_firstFrame)
HXLINE( 225)		bool _hx_tmp;
HXDLIN( 225)		if (::hx::IsPointerEq( this->type,::flxanimate::data::SymbolT_obj::Graphic_dyn() )) {
HXLINE( 225)			_hx_tmp = (this->firstFrame != value);
            		}
            		else {
HXLINE( 225)			_hx_tmp = false;
            		}
HXDLIN( 225)		if (_hx_tmp) {
HXLINE( 227)			this->firstFrame = value;
HXLINE( 228)			this->_renderDirty = true;
            		}
HXLINE( 231)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SymbolParameters_obj,set_firstFrame,return )

void SymbolParameters_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_235_reset)
HXLINE( 236)		this->name = null();
HXLINE( 237)		this->set_type(::flxanimate::data::SymbolT_obj::Graphic_dyn());
HXLINE( 238)		this->set_loop(::flxanimate::data::Loop_obj::Loop_dyn());
HXLINE( 239)		this->instance = HX_("",00,00,00,00);
HXLINE( 240)		this->set_firstFrame(0);
HXLINE( 241)		{
HXLINE( 241)			 ::flixel::math::FlxBasePoint this1 = this->transformationPoint;
HXDLIN( 241)			this1->set_x(( (Float)(0) ));
HXDLIN( 241)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 242)		this->set_colorEffect(::flxanimate::data::ColorEffect_obj::None_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC0(SymbolParameters_obj,reset,(void))

 ::openfl::geom::ColorTransform SymbolParameters_obj::get__colorEffect(){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_247_get__colorEffect)
HXDLIN( 247)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SymbolParameters_obj,get__colorEffect,return )

 ::flxanimate::effects::FlxColorEffect SymbolParameters_obj::set_colorEffect( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_251_set_colorEffect)
HXLINE( 252)		if (this->get_cacheAsBitmap()) {
HXLINE( 253)			this->_renderDirty = true;
            		}
HXLINE( 255)		if (::hx::IsNull( value )) {
HXLINE( 256)			value = ::flxanimate::data::ColorEffect_obj::None_dyn();
            		}
HXLINE( 258)		if (::Std_obj::isOfType(value,::hx::ClassOf< ::flxanimate::data::ColorEffect >())) {
HXLINE( 260)			this->colorEffect = ::flxanimate::data::AnimationData_obj::parseColorEffect(value);
            		}
            		else {
HXLINE( 263)			this->colorEffect = ( ( ::flxanimate::effects::FlxColorEffect)(value) );
            		}
HXLINE( 265)		return this->colorEffect;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SymbolParameters_obj,set_colorEffect,return )

::Array< ::Dynamic> SymbolParameters_obj::set_filters(::Array< ::Dynamic> filters){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_269_set_filters)
HXLINE( 270)		if (::hx::IsPointerEq( this->type,::flxanimate::data::SymbolT_obj::Graphic_dyn() )) {
HXLINE( 270)			return null();
            		}
HXLINE( 272)		if (::hx::IsPointerEq( filters,this->filters )) {
HXLINE( 272)			return filters;
            		}
HXLINE( 274)		this->_needSecondBmp = false;
HXLINE( 275)		bool _hx_tmp;
HXDLIN( 275)		if (::hx::IsNotNull( filters )) {
HXLINE( 275)			_hx_tmp = (filters->length > 0);
            		}
            		else {
HXLINE( 275)			_hx_tmp = false;
            		}
HXDLIN( 275)		if (_hx_tmp) {
HXLINE( 277)			this->_renderDirty = true;
HXLINE( 280)			{
HXLINE( 280)				int _g = 0;
HXDLIN( 280)				while((_g < filters->length)){
HXLINE( 280)					 ::openfl::filters::BitmapFilter filter = filters->__get(_g).StaticCast<  ::openfl::filters::BitmapFilter >();
HXDLIN( 280)					_g = (_g + 1);
HXLINE( 282)					if (filter->_hx___preserveObject) {
HXLINE( 283)						this->_needSecondBmp = true;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 288)			if (this->_cacheAsBitmap) {
HXLINE( 289)				this->_renderDirty = true;
            			}
            			else {
HXLINE( 290)				if (::hx::IsNotNull( this->_filterFrame )) {
HXLINE( 292)					::flixel::FlxG_obj::bitmap->remove(this->_filterFrame->parent);
HXLINE( 293)					this->_filterFrame = ( ( ::flixel::graphics::frames::FlxFrame)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_filterFrame)) );
HXLINE( 294)					 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::bitmap;
HXDLIN( 294)					 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _this = ::flixel::FlxG_obj::bitmap;
HXDLIN( 294)					::String key = ::flixel::FlxG_obj::bitmap->findKeyForBitmap(this->_bmp1);
HXDLIN( 294)					_hx_tmp1->remove(( ( ::flixel::graphics::FlxGraphic)(_this->_cache->get(key)) ));
HXLINE( 295)					this->_bmp1 = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_bmp1);
HXLINE( 296)					 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::bitmap;
HXDLIN( 296)					 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _this1 = ::flixel::FlxG_obj::bitmap;
HXDLIN( 296)					::String key1 = ::flixel::FlxG_obj::bitmap->findKeyForBitmap(this->_bmp2);
HXDLIN( 296)					_hx_tmp2->remove(( ( ::flixel::graphics::FlxGraphic)(_this1->_cache->get(key1)) ));
HXLINE( 297)					this->_bmp2 = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_bmp2);
            				}
            			}
            		}
HXLINE( 301)		return (this->filters = filters);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SymbolParameters_obj,set_filters,return )

 ::Dynamic SymbolParameters_obj::set_blendMode( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_305_set_blendMode)
HXLINE( 306)		if (::hx::IsNull( value )) {
HXLINE( 307)			value = 10;
            		}
HXLINE( 309)		if (::hx::IsPointerEq( this->type,::flxanimate::data::SymbolT_obj::Graphic_dyn() )) {
HXLINE( 309)			return (this->blendMode = 10);
            		}
HXLINE( 311)		if (::hx::IsNotEq( this->blendMode,value )) {
HXLINE( 313)			this->blendMode = value;
HXLINE( 314)			bool _hx_tmp;
HXDLIN( 314)			if (::hx::IsNotEq( this->blendMode,10 )) {
HXLINE( 314)				_hx_tmp = ::hx::IsNull( this->_filterFrame );
            			}
            			else {
HXLINE( 314)				_hx_tmp = false;
            			}
HXDLIN( 314)			if (_hx_tmp) {
HXLINE( 315)				this->_renderDirty = true;
            			}
            		}
HXLINE( 317)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SymbolParameters_obj,set_blendMode,return )

bool SymbolParameters_obj::get_cacheAsBitmap(){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_321_get_cacheAsBitmap)
HXLINE( 322)		if (::hx::IsPointerEq( this->type,::flxanimate::data::SymbolT_obj::Graphic_dyn() )) {
HXLINE( 322)			return false;
            		}
HXLINE( 325)		bool _hx_tmp;
HXDLIN( 325)		bool _hx_tmp1;
HXDLIN( 325)		if (::hx::IsNotNull( this->filters )) {
HXLINE( 325)			_hx_tmp1 = (this->filters->length > 0);
            		}
            		else {
HXLINE( 325)			_hx_tmp1 = false;
            		}
HXDLIN( 325)		if (!(_hx_tmp1)) {
HXLINE( 325)			_hx_tmp = ::hx::IsNotEq( this->blendMode,10 );
            		}
            		else {
HXLINE( 325)			_hx_tmp = true;
            		}
HXDLIN( 325)		if (_hx_tmp) {
HXLINE( 325)			return true;
            		}
HXLINE( 327)		return this->_cacheAsBitmap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SymbolParameters_obj,get_cacheAsBitmap,return )

void SymbolParameters_obj::updateBitmaps( ::openfl::geom::Rectangle rect){
            	HX_GC_STACKFRAME(&_hx_pos_a5b45c946faf294d_331_updateBitmaps)
HXLINE( 332)		bool _hx_tmp;
HXDLIN( 332)		if (::hx::IsNotNull( this->_filterFrame )) {
HXLINE( 332)			if (!((rect->width > this->_filterFrame->parent->bitmap->width))) {
HXLINE( 332)				_hx_tmp = (rect->height > this->_filterFrame->parent->bitmap->height);
            			}
            			else {
HXLINE( 332)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 332)			_hx_tmp = true;
            		}
HXDLIN( 332)		if (_hx_tmp) {
HXLINE( 334)			Float wid;
HXDLIN( 334)			bool wid1;
HXDLIN( 334)			if (::hx::IsNotNull( this->_filterFrame )) {
HXLINE( 334)				wid1 = (rect->width > this->_filterFrame->parent->width);
            			}
            			else {
HXLINE( 334)				wid1 = true;
            			}
HXDLIN( 334)			if (wid1) {
HXLINE( 334)				wid = (rect->width * ((Float)1.25));
            			}
            			else {
HXLINE( 334)				wid = ( (Float)(this->_filterFrame->parent->width) );
            			}
HXLINE( 335)			Float hei;
HXDLIN( 335)			bool hei1;
HXDLIN( 335)			if (::hx::IsNotNull( this->_filterFrame )) {
HXLINE( 335)				hei1 = (rect->height > this->_filterFrame->parent->height);
            			}
            			else {
HXLINE( 335)				hei1 = true;
            			}
HXDLIN( 335)			if (hei1) {
HXLINE( 335)				hei = (rect->height * ((Float)1.25));
            			}
            			else {
HXLINE( 335)				hei = ( (Float)(this->_filterFrame->parent->height) );
            			}
HXLINE( 336)			if (::hx::IsNotNull( this->_filterFrame )) {
HXLINE( 338)				this->_filterFrame->parent->destroy();
HXLINE( 339)				 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::bitmap;
HXDLIN( 339)				 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _this = ::flixel::FlxG_obj::bitmap;
HXDLIN( 339)				::String key = ::flixel::FlxG_obj::bitmap->findKeyForBitmap(this->_bmp1);
HXDLIN( 339)				_hx_tmp1->remove(( ( ::flixel::graphics::FlxGraphic)(_this->_cache->get(key)) ));
HXLINE( 340)				if (this->_needSecondBmp) {
HXLINE( 341)					 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::bitmap;
HXDLIN( 341)					 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _this1 = ::flixel::FlxG_obj::bitmap;
HXDLIN( 341)					::String key1 = ::flixel::FlxG_obj::bitmap->findKeyForBitmap(this->_bmp2);
HXDLIN( 341)					_hx_tmp2->remove(( ( ::flixel::graphics::FlxGraphic)(_this1->_cache->get(key1)) ));
            				}
            			}
            			else {
HXLINE( 346)				this->_filterFrame =  ::flixel::graphics::frames::FlxFrame_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
            			}
HXLINE( 349)			 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::bitmap;
HXDLIN( 349)			this->_filterFrame->parent = _hx_tmp3->add( ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::Math_obj::ceil(wid),::Math_obj::ceil(hei),null(),0),null(),null());
HXLINE( 350)			this->_bmp1 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::Math_obj::ceil(wid),::Math_obj::ceil(hei),null(),0);
HXLINE( 351)			::flixel::graphics::FlxGraphic_obj::fromBitmapData(this->_bmp1,null(),null(),null());
HXLINE( 352)			if (this->_needSecondBmp) {
HXLINE( 354)				this->_bmp2 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::Math_obj::ceil(wid),::Math_obj::ceil(hei),null(),0);
HXLINE( 355)				::flixel::graphics::FlxGraphic_obj::fromBitmapData(this->_bmp2,null(),null(),null());
            			}
HXLINE( 358)			 ::flixel::graphics::frames::FlxFrame _hx_tmp4 = this->_filterFrame;
HXDLIN( 358)			_hx_tmp4->set_frame( ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,wid,hei));
HXLINE( 359)			{
HXLINE( 359)				 ::flixel::math::FlxBasePoint this1 = this->_filterFrame->sourceSize;
HXDLIN( 359)				Float y = rect->height;
HXDLIN( 359)				this1->set_x(rect->width);
HXDLIN( 359)				this1->set_y(y);
            			}
HXLINE( 361)			this->_filterFrame->cacheFrameMatrix();
            		}
            		else {
HXLINE( 365)			this->_bmp1->fillRect(this->_bmp1->rect,0);
HXLINE( 366)			this->_filterFrame->parent->bitmap->fillRect(this->_filterFrame->parent->bitmap->rect,0);
HXLINE( 367)			if (this->_needSecondBmp) {
HXLINE( 368)				this->_bmp2->fillRect(this->_bmp2->rect,0);
            			}
            			else {
HXLINE( 369)				if (::hx::IsNotNull( this->_bmp2 )) {
HXLINE( 371)					 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _hx_tmp5 = ::flixel::FlxG_obj::bitmap;
HXDLIN( 371)					 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _this2 = ::flixel::FlxG_obj::bitmap;
HXDLIN( 371)					::String key2 = ::flixel::FlxG_obj::bitmap->findKeyForBitmap(this->_bmp2);
HXDLIN( 371)					_hx_tmp5->remove(( ( ::flixel::graphics::FlxGraphic)(_this2->_cache->get(key2)) ));
HXLINE( 372)					this->_bmp2 = null();
            				}
            			}
            		}
HXLINE( 377)		this->_needSecondBmp = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SymbolParameters_obj,updateBitmaps,(void))

bool SymbolParameters_obj::set_cacheAsBitmap(bool value){
            	HX_STACKFRAME(&_hx_pos_a5b45c946faf294d_380_set_cacheAsBitmap)
HXLINE( 381)		if (::hx::IsPointerEq( this->type,::flxanimate::data::SymbolT_obj::Graphic_dyn() )) {
HXLINE( 381)			return false;
            		}
HXLINE( 383)		if (value) {
HXLINE( 383)			this->_renderDirty = true;
            		}
HXLINE( 385)		return (this->_cacheAsBitmap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SymbolParameters_obj,set_cacheAsBitmap,return )


::hx::ObjectPtr< SymbolParameters_obj > SymbolParameters_obj::__new(::String name,::String __o_instance, ::flxanimate::data::SymbolT __o_type, ::flxanimate::data::Loop __o_loop) {
	::hx::ObjectPtr< SymbolParameters_obj > __this = new SymbolParameters_obj();
	__this->__construct(name,__o_instance,__o_type,__o_loop);
	return __this;
}

::hx::ObjectPtr< SymbolParameters_obj > SymbolParameters_obj::__alloc(::hx::Ctx *_hx_ctx,::String name,::String __o_instance, ::flxanimate::data::SymbolT __o_type, ::flxanimate::data::Loop __o_loop) {
	SymbolParameters_obj *__this = (SymbolParameters_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SymbolParameters_obj), true, "flxanimate.animate.SymbolParameters"));
	*(void **)__this = SymbolParameters_obj::_hx_vtable;
	__this->__construct(name,__o_instance,__o_type,__o_loop);
	return __this;
}

SymbolParameters_obj::SymbolParameters_obj()
{
}

void SymbolParameters_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SymbolParameters);
	HX_MARK_MEMBER_NAME(_filterCamera,"_filterCamera");
	HX_MARK_MEMBER_NAME(_parent,"_parent");
	HX_MARK_MEMBER_NAME(_filterFrame,"_filterFrame");
	HX_MARK_MEMBER_NAME(_bmp1,"_bmp1");
	HX_MARK_MEMBER_NAME(_bmp2,"_bmp2");
	HX_MARK_MEMBER_NAME(_filterMatrix,"_filterMatrix");
	HX_MARK_MEMBER_NAME(instance,"instance");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(loop,"loop");
	HX_MARK_MEMBER_NAME(reverse,"reverse");
	HX_MARK_MEMBER_NAME(firstFrame,"firstFrame");
	HX_MARK_MEMBER_NAME(_curFrame,"_curFrame");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(colorEffect,"colorEffect");
	HX_MARK_MEMBER_NAME(blendMode,"blendMode");
	HX_MARK_MEMBER_NAME(_cacheAsBitmap,"_cacheAsBitmap");
	HX_MARK_MEMBER_NAME(_renderDirty,"_renderDirty");
	HX_MARK_MEMBER_NAME(_colorEffect,"_colorEffect");
	HX_MARK_MEMBER_NAME(transformationPoint,"transformationPoint");
	HX_MARK_MEMBER_NAME(filters,"filters");
	HX_MARK_MEMBER_NAME(cacheAsBitmapMatrix,"cacheAsBitmapMatrix");
	HX_MARK_MEMBER_NAME(_needSecondBmp,"_needSecondBmp");
	HX_MARK_END_CLASS();
}

void SymbolParameters_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_filterCamera,"_filterCamera");
	HX_VISIT_MEMBER_NAME(_parent,"_parent");
	HX_VISIT_MEMBER_NAME(_filterFrame,"_filterFrame");
	HX_VISIT_MEMBER_NAME(_bmp1,"_bmp1");
	HX_VISIT_MEMBER_NAME(_bmp2,"_bmp2");
	HX_VISIT_MEMBER_NAME(_filterMatrix,"_filterMatrix");
	HX_VISIT_MEMBER_NAME(instance,"instance");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(loop,"loop");
	HX_VISIT_MEMBER_NAME(reverse,"reverse");
	HX_VISIT_MEMBER_NAME(firstFrame,"firstFrame");
	HX_VISIT_MEMBER_NAME(_curFrame,"_curFrame");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(colorEffect,"colorEffect");
	HX_VISIT_MEMBER_NAME(blendMode,"blendMode");
	HX_VISIT_MEMBER_NAME(_cacheAsBitmap,"_cacheAsBitmap");
	HX_VISIT_MEMBER_NAME(_renderDirty,"_renderDirty");
	HX_VISIT_MEMBER_NAME(_colorEffect,"_colorEffect");
	HX_VISIT_MEMBER_NAME(transformationPoint,"transformationPoint");
	HX_VISIT_MEMBER_NAME(filters,"filters");
	HX_VISIT_MEMBER_NAME(cacheAsBitmapMatrix,"cacheAsBitmapMatrix");
	HX_VISIT_MEMBER_NAME(_needSecondBmp,"_needSecondBmp");
}

::hx::Val SymbolParameters_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"loop") ) { return ::hx::Val( loop ); }
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_bmp1") ) { return ::hx::Val( _bmp1 ); }
		if (HX_FIELD_EQ(inName,"_bmp2") ) { return ::hx::Val( _bmp2 ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return ::hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_parent") ) { return ::hx::Val( _parent ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return ::hx::Val( reverse ); }
		if (HX_FIELD_EQ(inName,"filters") ) { return ::hx::Val( filters ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { return ::hx::Val( instance ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return ::hx::Val( set_type_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_loop") ) { return ::hx::Val( set_loop_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_curFrame") ) { return ::hx::Val( _curFrame ); }
		if (HX_FIELD_EQ(inName,"blendMode") ) { return ::hx::Val( blendMode ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"firstFrame") ) { return ::hx::Val( firstFrame ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"colorEffect") ) { return ::hx::Val( colorEffect ); }
		if (HX_FIELD_EQ(inName,"set_filters") ) { return ::hx::Val( set_filters_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_filterFrame") ) { return ::hx::Val( _filterFrame ); }
		if (HX_FIELD_EQ(inName,"_renderDirty") ) { return ::hx::Val( _renderDirty ); }
		if (HX_FIELD_EQ(inName,"_colorEffect") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get__colorEffect() : _colorEffect ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_filterCamera") ) { return ::hx::Val( _filterCamera ); }
		if (HX_FIELD_EQ(inName,"_filterMatrix") ) { return ::hx::Val( _filterMatrix ); }
		if (HX_FIELD_EQ(inName,"cacheAsBitmap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_cacheAsBitmap() ); }
		if (HX_FIELD_EQ(inName,"set_blendMode") ) { return ::hx::Val( set_blendMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateBitmaps") ) { return ::hx::Val( updateBitmaps_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_cacheAsBitmap") ) { return ::hx::Val( _cacheAsBitmap ); }
		if (HX_FIELD_EQ(inName,"_needSecondBmp") ) { return ::hx::Val( _needSecondBmp ); }
		if (HX_FIELD_EQ(inName,"set_firstFrame") ) { return ::hx::Val( set_firstFrame_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"set_colorEffect") ) { return ::hx::Val( set_colorEffect_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get__colorEffect") ) { return ::hx::Val( get__colorEffect_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_cacheAsBitmap") ) { return ::hx::Val( get_cacheAsBitmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_cacheAsBitmap") ) { return ::hx::Val( set_cacheAsBitmap_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"transformationPoint") ) { return ::hx::Val( transformationPoint ); }
		if (HX_FIELD_EQ(inName,"cacheAsBitmapMatrix") ) { return ::hx::Val( cacheAsBitmapMatrix ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SymbolParameters_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_type(inValue.Cast<  ::flxanimate::data::SymbolT >()) );type=inValue.Cast<  ::flxanimate::data::SymbolT >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loop") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_loop(inValue.Cast<  ::flxanimate::data::Loop >()) );loop=inValue.Cast<  ::flxanimate::data::Loop >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_bmp1") ) { _bmp1=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_bmp2") ) { _bmp2=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_parent") ) { _parent=inValue.Cast<  ::flxanimate::animate::FlxElement >(); return inValue; }
		if (HX_FIELD_EQ(inName,"reverse") ) { reverse=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"filters") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_filters(inValue.Cast< ::Array< ::Dynamic> >()) );filters=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_curFrame") ) { _curFrame=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blendMode") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_blendMode(inValue.Cast<  ::Dynamic >()) );blendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"firstFrame") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_firstFrame(inValue.Cast< int >()) );firstFrame=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"colorEffect") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_colorEffect(inValue.Cast<  ::flxanimate::effects::FlxColorEffect >()) );colorEffect=inValue.Cast<  ::flxanimate::effects::FlxColorEffect >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_filterFrame") ) { _filterFrame=inValue.Cast<  ::flixel::graphics::frames::FlxFrame >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_renderDirty") ) { _renderDirty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_colorEffect") ) { _colorEffect=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_filterCamera") ) { _filterCamera=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_filterMatrix") ) { _filterMatrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cacheAsBitmap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_cacheAsBitmap(inValue.Cast< bool >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_cacheAsBitmap") ) { _cacheAsBitmap=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_needSecondBmp") ) { _needSecondBmp=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"transformationPoint") ) { transformationPoint=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cacheAsBitmapMatrix") ) { cacheAsBitmapMatrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SymbolParameters_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_filterCamera",5c,07,53,a6));
	outFields->push(HX_("_parent",c9,16,f5,5b));
	outFields->push(HX_("_filterFrame",56,7b,3f,1c));
	outFields->push(HX_("_bmp1",2b,1c,2b,f4));
	outFields->push(HX_("_bmp2",2c,1c,2b,f4));
	outFields->push(HX_("_filterMatrix",f8,f6,8e,aa));
	outFields->push(HX_("instance",95,1f,e1,59));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("loop",64,a6,b7,47));
	outFields->push(HX_("reverse",22,39,fc,1a));
	outFields->push(HX_("firstFrame",dd,c1,61,44));
	outFields->push(HX_("_curFrame",ec,69,c7,95));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("colorEffect",54,ec,cb,1a));
	outFields->push(HX_("blendMode",54,e4,37,0c));
	outFields->push(HX_("cacheAsBitmap",e3,82,0f,6a));
	outFields->push(HX_("_cacheAsBitmap",24,73,61,a8));
	outFields->push(HX_("_renderDirty",dd,2a,8b,0b));
	outFields->push(HX_("_colorEffect",55,9a,d5,80));
	outFields->push(HX_("transformationPoint",c7,cd,1b,d6));
	outFields->push(HX_("filters",bb,a1,46,09));
	outFields->push(HX_("cacheAsBitmapMatrix",84,f9,81,95));
	outFields->push(HX_("_needSecondBmp",3c,e6,5a,20));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SymbolParameters_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(SymbolParameters_obj,_filterCamera),HX_("_filterCamera",5c,07,53,a6)},
	{::hx::fsObject /*  ::flxanimate::animate::FlxElement */ ,(int)offsetof(SymbolParameters_obj,_parent),HX_("_parent",c9,16,f5,5b)},
	{::hx::fsObject /*  ::flixel::graphics::frames::FlxFrame */ ,(int)offsetof(SymbolParameters_obj,_filterFrame),HX_("_filterFrame",56,7b,3f,1c)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(SymbolParameters_obj,_bmp1),HX_("_bmp1",2b,1c,2b,f4)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(SymbolParameters_obj,_bmp2),HX_("_bmp2",2c,1c,2b,f4)},
	{::hx::fsObject /*  ::flixel::math::FlxMatrix */ ,(int)offsetof(SymbolParameters_obj,_filterMatrix),HX_("_filterMatrix",f8,f6,8e,aa)},
	{::hx::fsString,(int)offsetof(SymbolParameters_obj,instance),HX_("instance",95,1f,e1,59)},
	{::hx::fsObject /*  ::flxanimate::data::SymbolT */ ,(int)offsetof(SymbolParameters_obj,type),HX_("type",ba,f2,08,4d)},
	{::hx::fsObject /*  ::flxanimate::data::Loop */ ,(int)offsetof(SymbolParameters_obj,loop),HX_("loop",64,a6,b7,47)},
	{::hx::fsBool,(int)offsetof(SymbolParameters_obj,reverse),HX_("reverse",22,39,fc,1a)},
	{::hx::fsInt,(int)offsetof(SymbolParameters_obj,firstFrame),HX_("firstFrame",dd,c1,61,44)},
	{::hx::fsInt,(int)offsetof(SymbolParameters_obj,_curFrame),HX_("_curFrame",ec,69,c7,95)},
	{::hx::fsString,(int)offsetof(SymbolParameters_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsObject /*  ::flxanimate::effects::FlxColorEffect */ ,(int)offsetof(SymbolParameters_obj,colorEffect),HX_("colorEffect",54,ec,cb,1a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SymbolParameters_obj,blendMode),HX_("blendMode",54,e4,37,0c)},
	{::hx::fsBool,(int)offsetof(SymbolParameters_obj,_cacheAsBitmap),HX_("_cacheAsBitmap",24,73,61,a8)},
	{::hx::fsBool,(int)offsetof(SymbolParameters_obj,_renderDirty),HX_("_renderDirty",dd,2a,8b,0b)},
	{::hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(int)offsetof(SymbolParameters_obj,_colorEffect),HX_("_colorEffect",55,9a,d5,80)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(SymbolParameters_obj,transformationPoint),HX_("transformationPoint",c7,cd,1b,d6)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(SymbolParameters_obj,filters),HX_("filters",bb,a1,46,09)},
	{::hx::fsObject /*  ::flixel::math::FlxMatrix */ ,(int)offsetof(SymbolParameters_obj,cacheAsBitmapMatrix),HX_("cacheAsBitmapMatrix",84,f9,81,95)},
	{::hx::fsBool,(int)offsetof(SymbolParameters_obj,_needSecondBmp),HX_("_needSecondBmp",3c,e6,5a,20)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SymbolParameters_obj_sStaticStorageInfo = 0;
#endif

static ::String SymbolParameters_obj_sMemberFields[] = {
	HX_("_filterCamera",5c,07,53,a6),
	HX_("_parent",c9,16,f5,5b),
	HX_("_filterFrame",56,7b,3f,1c),
	HX_("_bmp1",2b,1c,2b,f4),
	HX_("_bmp2",2c,1c,2b,f4),
	HX_("_filterMatrix",f8,f6,8e,aa),
	HX_("instance",95,1f,e1,59),
	HX_("type",ba,f2,08,4d),
	HX_("loop",64,a6,b7,47),
	HX_("reverse",22,39,fc,1a),
	HX_("firstFrame",dd,c1,61,44),
	HX_("_curFrame",ec,69,c7,95),
	HX_("name",4b,72,ff,48),
	HX_("colorEffect",54,ec,cb,1a),
	HX_("blendMode",54,e4,37,0c),
	HX_("_cacheAsBitmap",24,73,61,a8),
	HX_("_renderDirty",dd,2a,8b,0b),
	HX_("_colorEffect",55,9a,d5,80),
	HX_("transformationPoint",c7,cd,1b,d6),
	HX_("filters",bb,a1,46,09),
	HX_("cacheAsBitmapMatrix",84,f9,81,95),
	HX_("_needSecondBmp",3c,e6,5a,20),
	HX_("destroy",fa,2c,86,24),
	HX_("set_type",b7,07,21,7b),
	HX_("update",09,86,05,87),
	HX_("set_loop",61,bb,cf,75),
	HX_("set_firstFrame",9a,32,77,da),
	HX_("reset",cf,49,c8,e6),
	HX_("get__colorEffect",de,86,74,85),
	HX_("set_colorEffect",f7,20,79,d7),
	HX_("set_filters",de,08,ae,99),
	HX_("set_blendMode",37,9a,a1,12),
	HX_("get_cacheAsBitmap",3a,8e,7f,70),
	HX_("updateBitmaps",9b,46,f0,c4),
	HX_("set_cacheAsBitmap",46,66,ed,93),
	::String(null()) };

::hx::Class SymbolParameters_obj::__mClass;

void SymbolParameters_obj::__register()
{
	SymbolParameters_obj _hx_dummy;
	SymbolParameters_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.animate.SymbolParameters",8e,26,ee,2d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SymbolParameters_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SymbolParameters_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SymbolParameters_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SymbolParameters_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flxanimate
} // end namespace animate
