// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxElement
#include <flxanimate/animate/FlxElement.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxKeyFrame
#include <flxanimate/animate/FlxKeyFrame.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxSymbol
#include <flxanimate/animate/FlxSymbol.h>
#endif
#ifndef INCLUDED_flxanimate_animate_SymbolParameters
#include <flxanimate/animate/SymbolParameters.h>
#endif
#ifndef INCLUDED_flxanimate_data_AnimationData
#include <flxanimate/data/AnimationData.h>
#endif
#ifndef INCLUDED_flxanimate_data_ColorEffect
#include <flxanimate/data/ColorEffect.h>
#endif
#ifndef INCLUDED_flxanimate_data_Loop
#include <flxanimate/data/Loop.h>
#endif
#ifndef INCLUDED_flxanimate_data_SymbolT
#include <flxanimate/data/SymbolT.h>
#endif
#ifndef INCLUDED_flxanimate_data__AnimationData_AtlasSymbolInstance_Impl_
#include <flxanimate/data/_AnimationData/AtlasSymbolInstance_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_data__AnimationData_Bitmap_Impl_
#include <flxanimate/data/_AnimationData/Bitmap_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_data__AnimationData_Element_Impl_
#include <flxanimate/data/_AnimationData/Element_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_data__AnimationData_StageInstance_Impl_
#include <flxanimate/data/_AnimationData/StageInstance_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_data__AnimationData_SymbolInstance_Impl_
#include <flxanimate/data/_AnimationData/SymbolInstance_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_effects_FlxColorEffect
#include <flxanimate/effects/FlxColorEffect.h>
#endif
#ifndef INCLUDED_flxanimate_interfaces_IFilterable
#include <flxanimate/interfaces/IFilterable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ccccc715a6f42a53_15_new,"flxanimate.animate.FlxElement","new",0xba70e5c8,"flxanimate.animate.FlxElement.new","flxanimate/animate/FlxElement.hx",15,0x615c8866)
HX_LOCAL_STACK_FRAME(_hx_pos_ccccc715a6f42a53_64_toString,"flxanimate.animate.FlxElement","toString",0xc8e32244,"flxanimate.animate.FlxElement.toString","flxanimate/animate/FlxElement.hx",64,0x615c8866)
HX_LOCAL_STACK_FRAME(_hx_pos_ccccc715a6f42a53_67_destroy,"flxanimate.animate.FlxElement","destroy",0xfcfe1662,"flxanimate.animate.FlxElement.destroy","flxanimate/animate/FlxElement.hx",67,0x615c8866)
HX_LOCAL_STACK_FRAME(_hx_pos_ccccc715a6f42a53_77_set_bitmap,"flxanimate.animate.FlxElement","set_bitmap",0xb86f05c4,"flxanimate.animate.FlxElement.set_bitmap","flxanimate/animate/FlxElement.hx",77,0x615c8866)
HX_LOCAL_STACK_FRAME(_hx_pos_ccccc715a6f42a53_84_set_matrix,"flxanimate.animate.FlxElement","set_matrix",0x832b2c16,"flxanimate.animate.FlxElement.set_matrix","flxanimate/animate/FlxElement.hx",84,0x615c8866)
HX_LOCAL_STACK_FRAME(_hx_pos_ccccc715a6f42a53_91_updateRender,"flxanimate.animate.FlxElement","updateRender",0xd9460fd7,"flxanimate.animate.FlxElement.updateRender","flxanimate/animate/FlxElement.hx",91,0x615c8866)
HX_LOCAL_STACK_FRAME(_hx_pos_ccccc715a6f42a53_121_fromJSON,"flxanimate.animate.FlxElement","fromJSON",0x348ffe2a,"flxanimate.animate.FlxElement.fromJSON","flxanimate/animate/FlxElement.hx",121,0x615c8866)
HX_LOCAL_STACK_FRAME(_hx_pos_ccccc715a6f42a53_166_fromJSON,"flxanimate.animate.FlxElement","fromJSON",0x348ffe2a,"flxanimate.animate.FlxElement.fromJSON","flxanimate/animate/FlxElement.hx",166,0x615c8866)
namespace flxanimate{
namespace animate{

void FlxElement_obj::__construct(::String bitmap, ::flxanimate::animate::SymbolParameters symbol, ::flixel::math::FlxMatrix matrix){
            	HX_GC_STACKFRAME(&_hx_pos_ccccc715a6f42a53_15_new)
HXLINE(  38)		this->_color =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  35)		this->_matrix =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  22)		this->symbol = null();
HXLINE(  53)		super::__construct(null(),null(),null(),null());
HXLINE(  54)		this->set_bitmap(bitmap);
HXLINE(  55)		this->symbol = symbol;
HXLINE(  56)		if (::hx::IsNotNull( symbol )) {
HXLINE(  57)			symbol->_parent = ::hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE(  58)		 ::flixel::math::FlxMatrix _hx_tmp;
HXDLIN(  58)		if (::hx::IsNull( matrix )) {
HXLINE(  58)			_hx_tmp =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(  58)			_hx_tmp = matrix;
            		}
HXDLIN(  58)		this->set_matrix(_hx_tmp);
            	}

Dynamic FlxElement_obj::__CreateEmpty() { return new FlxElement_obj; }

void *FlxElement_obj::_hx_vtable = 0;

Dynamic FlxElement_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxElement_obj > _hx_result = new FlxElement_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool FlxElement_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7ccf8994) {
		if (inClassId<=(int)0x080da354) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x080da354;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	} else {
		return inClassId==(int)0x7dab0655;
	}
}

static ::flixel::util::IFlxDestroyable_obj _hx_flxanimate_animate_FlxElement__hx_flixel_util_IFlxDestroyable= {
	( void (::hx::Object::*)())&::flxanimate::animate::FlxElement_obj::destroy,
};

void *FlxElement_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flxanimate_animate_FlxElement__hx_flixel_util_IFlxDestroyable;
	}
	return super::_hx_getInterface(inHash);
}

::String FlxElement_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_ccccc715a6f42a53_64_toString)
HXDLIN(  64)		::String _hx_tmp = ((HX_("{matrix: ",a2,ae,f0,c0) + ::Std_obj::string(this->matrix)) + HX_(", bitmap: ",c9,16,1d,c3));
HXDLIN(  64)		return ((_hx_tmp + this->bitmap) + HX_("}",7d,00,00,00));
            	}


void FlxElement_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_ccccc715a6f42a53_67_destroy)
HXLINE(  68)		this->super::destroy();
HXLINE(  69)		this->_parent = null();
HXLINE(  70)		if (::hx::IsNotNull( this->symbol )) {
HXLINE(  71)			this->symbol->destroy();
            		}
HXLINE(  72)		this->set_bitmap(null());
HXLINE(  73)		this->set_matrix(null());
            	}


::String FlxElement_obj::set_bitmap(::String value){
            	HX_STACKFRAME(&_hx_pos_ccccc715a6f42a53_77_set_bitmap)
HXLINE(  78)		bool _hx_tmp;
HXDLIN(  78)		bool _hx_tmp1;
HXDLIN(  78)		if ((value != this->bitmap)) {
HXLINE(  78)			_hx_tmp1 = ::hx::IsNotNull( this->symbol );
            		}
            		else {
HXLINE(  78)			_hx_tmp1 = false;
            		}
HXDLIN(  78)		if (_hx_tmp1) {
HXLINE(  78)			_hx_tmp = this->symbol->get_cacheAsBitmap();
            		}
            		else {
HXLINE(  78)			_hx_tmp = false;
            		}
HXDLIN(  78)		if (_hx_tmp) {
HXLINE(  79)			this->symbol->_renderDirty = true;
            		}
HXLINE(  81)		return (this->bitmap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxElement_obj,set_bitmap,return )

 ::flixel::math::FlxMatrix FlxElement_obj::set_matrix( ::flixel::math::FlxMatrix value){
            	HX_STACKFRAME(&_hx_pos_ccccc715a6f42a53_84_set_matrix)
HXLINE(  85)		if (::hx::IsNull( value )) {
HXLINE(  85)			this->matrix->identity();
            		}
            		else {
HXLINE(  85)			this->matrix = value;
            		}
HXLINE(  87)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxElement_obj,set_matrix,return )

void FlxElement_obj::updateRender(Float elapsed,int curFrame, ::haxe::ds::StringMap dictionary, ::Dynamic __o_swfRender){
            		 ::Dynamic swfRender = __o_swfRender;
            		if (::hx::IsNull(__o_swfRender)) swfRender = false;
            	HX_STACKFRAME(&_hx_pos_ccccc715a6f42a53_91_updateRender)
HXLINE(  92)		this->update(elapsed);
HXLINE(  94)		bool _hx_tmp;
HXDLIN(  94)		if (::hx::IsNotNull( this->symbol )) {
HXLINE(  94)			_hx_tmp = dictionary->exists(this->symbol->name);
            		}
            		else {
HXLINE(  94)			_hx_tmp = false;
            		}
HXDLIN(  94)		if (_hx_tmp) {
HXLINE(  96)			int length = ( ( ::flxanimate::animate::FlxSymbol)(dictionary->get(this->symbol->name)) )->get_length();
HXLINE(  97)			int curFF = (curFrame + this->symbol->firstFrame);
HXLINE(  99)			switch((int)(this->symbol->loop->_hx_getIndex())){
            				case (int)0: {
HXLINE( 101)					curFF = ::hx::Mod(curFF,length);
            				}
            				break;
            				case (int)1: {
HXLINE( 102)					 ::Dynamic Max = (length - 1);
HXDLIN( 102)					Float lowerBound;
HXDLIN( 102)					if ((curFF < 0)) {
HXLINE( 102)						lowerBound = ( (Float)(0) );
            					}
            					else {
HXLINE( 102)						lowerBound = ( (Float)(curFF) );
            					}
HXDLIN( 102)					Float curFF1;
HXDLIN( 102)					bool curFF2;
HXDLIN( 102)					if (::hx::IsNotNull( Max )) {
HXLINE( 102)						curFF2 = ::hx::IsGreater( lowerBound,Max );
            					}
            					else {
HXLINE( 102)						curFF2 = false;
            					}
HXDLIN( 102)					if (curFF2) {
HXLINE( 102)						curFF1 = ( (Float)(Max) );
            					}
            					else {
HXLINE( 102)						curFF1 = lowerBound;
            					}
HXDLIN( 102)					curFF = ( (int)(curFF1) );
            				}
            				break;
            				default:{
HXLINE( 103)					curFF = this->symbol->firstFrame;
            				}
            			}
HXLINE( 106)			if (::hx::IsPointerEq( this->symbol->type,::flxanimate::data::SymbolT_obj::MovieClip_dyn() )) {
HXLINE( 107)				curFF = 0;
            			}
HXLINE( 110)			this->symbol->update(curFF);
HXLINE( 112)			bool _hx_tmp1;
HXDLIN( 112)			bool _hx_tmp2;
HXDLIN( 112)			if (this->symbol->_renderDirty) {
HXLINE( 112)				_hx_tmp2 = ::hx::IsNotNull( this->_parent );
            			}
            			else {
HXLINE( 112)				_hx_tmp2 = false;
            			}
HXDLIN( 112)			if (_hx_tmp2) {
HXLINE( 112)				_hx_tmp1 = this->_parent->_cacheAsBitmap;
            			}
            			else {
HXLINE( 112)				_hx_tmp1 = false;
            			}
HXDLIN( 112)			if (_hx_tmp1) {
HXLINE( 114)				this->symbol->_renderDirty = false;
HXLINE( 115)				this->_parent->_renderDirty = true;
            			}
HXLINE( 117)			( ( ::flxanimate::animate::FlxSymbol)(dictionary->get(this->symbol->name)) )->updateRender(elapsed,curFF,dictionary,swfRender);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxElement_obj,updateRender,(void))

 ::flxanimate::animate::FlxElement FlxElement_obj::fromJSON( ::Dynamic element){
            	HX_GC_STACKFRAME(&_hx_pos_ccccc715a6f42a53_121_fromJSON)
HXLINE( 123)		bool symbol = ::hx::IsNotNull( ::flxanimate::data::_AnimationData::StageInstance_Impl__obj::get_SI(element) );
HXLINE( 124)		 ::flxanimate::animate::SymbolParameters params = null();
HXLINE( 125)		if (symbol) {
HXLINE( 127)			params =  ::flxanimate::animate::SymbolParameters_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 128)			params->instance = ::flxanimate::data::_AnimationData::SymbolInstance_Impl__obj::get_IN(::flxanimate::data::_AnimationData::StageInstance_Impl__obj::get_SI(element));
HXLINE( 129)			 ::flxanimate::data::SymbolT _hx_tmp;
HXDLIN( 129)			::String _hx_switch_0 = ::flxanimate::data::_AnimationData::SymbolInstance_Impl__obj::get_ST(::flxanimate::data::_AnimationData::StageInstance_Impl__obj::get_SI(element));
            			if (  (_hx_switch_0==HX_("B",42,00,00,00)) ||  (_hx_switch_0==HX_("button",f2,61,e0,d9)) ){
HXLINE( 129)				_hx_tmp = ::flxanimate::data::SymbolT_obj::Button_dyn();
HXDLIN( 129)				goto _hx_goto_6;
            			}
            			if (  (_hx_switch_0==HX_("MC",56,43,00,00)) ||  (_hx_switch_0==HX_("movieclip",80,d6,41,2d)) ){
HXLINE( 129)				_hx_tmp = ::flxanimate::data::SymbolT_obj::MovieClip_dyn();
HXDLIN( 129)				goto _hx_goto_6;
            			}
            			/* default */{
HXLINE( 129)				_hx_tmp = ::flxanimate::data::SymbolT_obj::Graphic_dyn();
            			}
            			_hx_goto_6:;
HXDLIN( 129)			params->set_type(_hx_tmp);
HXLINE( 135)			if ((params->instance.indexOf(HX_("_bl",e9,6b,48,00),null()) != -1)) {
HXLINE( 137)				int _bl = params->instance.indexOf(HX_("_bl",e9,6b,48,00),null());
HXLINE( 139)				if ((_bl != -1)) {
HXLINE( 140)					_bl = (_bl + 3);
            				}
HXLINE( 142)				int end = params->instance.indexOf(HX_("_",5f,00,00,00),_bl);
HXLINE( 143)				params->set_blendMode(::Std_obj::parseInt(params->instance.substring(_bl,end)));
HXLINE( 145)				params->instance = params->instance.substring((end + 1),null());
            			}
HXLINE( 148)			::String lp;
HXDLIN( 148)			if (::hx::IsNull( ::flxanimate::data::_AnimationData::SymbolInstance_Impl__obj::get_LP(::flxanimate::data::_AnimationData::StageInstance_Impl__obj::get_SI(element)) )) {
HXLINE( 148)				lp = HX_("LP",84,42,00,00);
            			}
            			else {
HXLINE( 148)				lp = ::flxanimate::data::_AnimationData::SymbolInstance_Impl__obj::get_LP(::flxanimate::data::_AnimationData::StageInstance_Impl__obj::get_SI(element)).split(HX_("R",52,00,00,00))->__get(0);
            			}
HXLINE( 149)			 ::flxanimate::data::Loop _hx_tmp1;
HXDLIN( 149)			::String _hx_switch_1 = lp;
            			if (  (_hx_switch_1==HX_("PO",ff,45,00,00)) ||  (_hx_switch_1==HX_("playonce",75,b5,ec,4e)) ){
HXLINE( 149)				_hx_tmp1 = ::flxanimate::data::Loop_obj::PlayOnce_dyn();
HXDLIN( 149)				goto _hx_goto_7;
            			}
            			if (  (_hx_switch_1==HX_("SF",93,48,00,00)) ||  (_hx_switch_1==HX_("singleframe",a5,64,19,5d)) ){
HXLINE( 149)				_hx_tmp1 = ::flxanimate::data::Loop_obj::SingleFrame_dyn();
HXDLIN( 149)				goto _hx_goto_7;
            			}
            			/* default */{
HXLINE( 149)				_hx_tmp1 = ::flxanimate::data::Loop_obj::Loop_dyn();
            			}
            			_hx_goto_7:;
HXDLIN( 149)			params->set_loop(_hx_tmp1);
HXLINE( 155)			bool _hx_tmp2;
HXDLIN( 155)			if (::hx::IsNull( ::flxanimate::data::_AnimationData::SymbolInstance_Impl__obj::get_LP(::flxanimate::data::_AnimationData::StageInstance_Impl__obj::get_SI(element)) )) {
HXLINE( 155)				_hx_tmp2 = false;
            			}
            			else {
HXLINE( 155)				_hx_tmp2 = (::flxanimate::data::_AnimationData::SymbolInstance_Impl__obj::get_LP(::flxanimate::data::_AnimationData::StageInstance_Impl__obj::get_SI(element)).indexOf(HX_("R",52,00,00,00),null()) != -1);
            			}
HXDLIN( 155)			params->reverse = _hx_tmp2;
HXLINE( 156)			 ::Dynamic tmp = ::flxanimate::data::_AnimationData::SymbolInstance_Impl__obj::get_FF(::flxanimate::data::_AnimationData::StageInstance_Impl__obj::get_SI(element));
HXDLIN( 156)			int _hx_tmp3;
HXDLIN( 156)			if (::hx::IsNotNull( tmp )) {
HXLINE( 156)				_hx_tmp3 = ( (int)(tmp) );
            			}
            			else {
HXLINE( 156)				_hx_tmp3 = 0;
            			}
HXDLIN( 156)			params->set_firstFrame(_hx_tmp3);
HXLINE( 157)			params->set_colorEffect(::flxanimate::data::AnimationData_obj::fromColorJson(::flxanimate::data::_AnimationData::SymbolInstance_Impl__obj::get_C(::flxanimate::data::_AnimationData::StageInstance_Impl__obj::get_SI(element))));
HXLINE( 158)			params->name = ::flxanimate::data::_AnimationData::SymbolInstance_Impl__obj::get_SN(::flxanimate::data::_AnimationData::StageInstance_Impl__obj::get_SI(element));
HXLINE( 159)			Float x = ( (Float)(::flxanimate::data::_AnimationData::SymbolInstance_Impl__obj::get_TRP(::flxanimate::data::_AnimationData::StageInstance_Impl__obj::get_SI(element))->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN( 159)			Float y = ( (Float)(::flxanimate::data::_AnimationData::SymbolInstance_Impl__obj::get_TRP(::flxanimate::data::_AnimationData::StageInstance_Impl__obj::get_SI(element))->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN( 159)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 159)			point->_inPool = false;
HXDLIN( 159)			 ::flixel::math::FlxBasePoint point1 = point;
HXDLIN( 159)			point1->_weak = true;
HXDLIN( 159)			params->transformationPoint = point1;
HXLINE( 160)			params->set_filters(::flxanimate::data::AnimationData_obj::fromFilterJson(::flxanimate::data::_AnimationData::SymbolInstance_Impl__obj::get_F(::flxanimate::data::_AnimationData::StageInstance_Impl__obj::get_SI(element))));
            		}
HXLINE( 163)		 ::Dynamic m3d;
HXDLIN( 163)		if (symbol) {
HXLINE( 163)			m3d = ::flxanimate::data::_AnimationData::SymbolInstance_Impl__obj::get_M3D(::flxanimate::data::_AnimationData::StageInstance_Impl__obj::get_SI(element));
            		}
            		else {
HXLINE( 163)			m3d = ::flxanimate::data::_AnimationData::AtlasSymbolInstance_Impl__obj::get_M3D(::flxanimate::data::_AnimationData::Element_Impl__obj::get_ASI(element));
            		}
HXLINE( 164)		::Array< ::String > array = ::Reflect_obj::fields(m3d);
HXLINE( 165)		if (!(::Std_obj::isOfType(m3d,::hx::ArrayBase::__mClass))) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			int _hx_run(::String a,::String b){
            				HX_GC_STACKFRAME(&_hx_pos_ccccc715a6f42a53_166_fromJSON)
HXLINE( 166)				 ::Dynamic _hx_tmp = ::Std_obj::parseInt(a.substring(1,null()));
HXDLIN( 166)				return (( (int)(_hx_tmp) ) - ( (int)(::Std_obj::parseInt(b.substring(1,null()))) ));
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 166)			array->sort( ::Dynamic(new _hx_Closure_0()));
            		}
HXLINE( 167)		::Array< Float > m;
HXDLIN( 167)		if (::Std_obj::isOfType(m3d,::hx::ArrayBase::__mClass)) {
HXLINE( 167)			m = ( (::Array< Float >)(m3d) );
            		}
            		else {
HXLINE( 167)			::Array< Float > _g = ::Array_obj< Float >::__new(0);
HXDLIN( 167)			{
HXLINE( 167)				int _g1 = 0;
HXDLIN( 167)				while((_g1 < array->length)){
HXLINE( 167)					::String field = array->__get(_g1);
HXDLIN( 167)					_g1 = (_g1 + 1);
HXDLIN( 167)					_g->push(::Reflect_obj::field(m3d,field));
            				}
            			}
HXDLIN( 167)			m = _g;
            		}
HXLINE( 169)		bool _hx_tmp4;
HXDLIN( 169)		if (!(symbol)) {
HXLINE( 169)			_hx_tmp4 = ::hx::IsNull( m3d );
            		}
            		else {
HXLINE( 169)			_hx_tmp4 = false;
            		}
HXDLIN( 169)		if (_hx_tmp4) {
HXLINE( 171)			m[0] = (m[5] = ( (Float)(1) ));
HXLINE( 172)			m[1] = (m[4] = (m[12] = (m[13] = ( (Float)(0) ))));
            		}
HXLINE( 175)		 ::Dynamic pos;
HXDLIN( 175)		if (symbol) {
HXLINE( 175)			pos = ::flxanimate::data::_AnimationData::Bitmap_Impl__obj::get_POS(::flxanimate::data::_AnimationData::SymbolInstance_Impl__obj::get_bitmap(::flxanimate::data::_AnimationData::StageInstance_Impl__obj::get_SI(element)));
            		}
            		else {
HXLINE( 175)			pos = ::flxanimate::data::_AnimationData::Bitmap_Impl__obj::get_POS(::flxanimate::data::_AnimationData::Element_Impl__obj::get_ASI(element));
            		}
HXLINE( 176)		if (::hx::IsNull( pos )) {
HXLINE( 177)			pos =  ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("x",78,00,00,00),( (Float)(0) ))
            				->setFixed(1,HX_("y",79,00,00,00),( (Float)(0) )));
            		}
HXLINE( 178)		::String _hx_tmp5;
HXDLIN( 178)		if (symbol) {
HXLINE( 178)			_hx_tmp5 = ::flxanimate::data::_AnimationData::Bitmap_Impl__obj::get_N(::flxanimate::data::_AnimationData::SymbolInstance_Impl__obj::get_bitmap(::flxanimate::data::_AnimationData::StageInstance_Impl__obj::get_SI(element)));
            		}
            		else {
HXLINE( 178)			_hx_tmp5 = ::flxanimate::data::_AnimationData::Bitmap_Impl__obj::get_N(::flxanimate::data::_AnimationData::Element_Impl__obj::get_ASI(element));
            		}
HXDLIN( 178)		return  ::flxanimate::animate::FlxElement_obj::__alloc( HX_CTX ,_hx_tmp5,params, ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,m->__get(0),m->__get(1),m->__get(4),m->__get(5),(m->__get(12) + pos->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)),(m->__get(13) + pos->__Field(HX_("y",79,00,00,00),::hx::paccDynamic))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxElement_obj,fromJSON,return )


::hx::ObjectPtr< FlxElement_obj > FlxElement_obj::__new(::String bitmap, ::flxanimate::animate::SymbolParameters symbol, ::flixel::math::FlxMatrix matrix) {
	::hx::ObjectPtr< FlxElement_obj > __this = new FlxElement_obj();
	__this->__construct(bitmap,symbol,matrix);
	return __this;
}

::hx::ObjectPtr< FlxElement_obj > FlxElement_obj::__alloc(::hx::Ctx *_hx_ctx,::String bitmap, ::flxanimate::animate::SymbolParameters symbol, ::flixel::math::FlxMatrix matrix) {
	FlxElement_obj *__this = (FlxElement_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxElement_obj), true, "flxanimate.animate.FlxElement"));
	*(void **)__this = FlxElement_obj::_hx_vtable;
	__this->__construct(bitmap,symbol,matrix);
	return __this;
}

FlxElement_obj::FlxElement_obj()
{
}

void FlxElement_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxElement);
	HX_MARK_MEMBER_NAME(_parent,"_parent");
	HX_MARK_MEMBER_NAME(symbol,"symbol");
	HX_MARK_MEMBER_NAME(bitmap,"bitmap");
	HX_MARK_MEMBER_NAME(matrix,"matrix");
	HX_MARK_MEMBER_NAME(_matrix,"_matrix");
	HX_MARK_MEMBER_NAME(_color,"_color");
	HX_MARK_MEMBER_NAME(_scrollF,"_scrollF");
	 ::flixel::FlxObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxElement_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_parent,"_parent");
	HX_VISIT_MEMBER_NAME(symbol,"symbol");
	HX_VISIT_MEMBER_NAME(bitmap,"bitmap");
	HX_VISIT_MEMBER_NAME(matrix,"matrix");
	HX_VISIT_MEMBER_NAME(_matrix,"_matrix");
	HX_VISIT_MEMBER_NAME(_color,"_color");
	HX_VISIT_MEMBER_NAME(_scrollF,"_scrollF");
	 ::flixel::FlxObject_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxElement_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"symbol") ) { return ::hx::Val( symbol ); }
		if (HX_FIELD_EQ(inName,"bitmap") ) { return ::hx::Val( bitmap ); }
		if (HX_FIELD_EQ(inName,"matrix") ) { return ::hx::Val( matrix ); }
		if (HX_FIELD_EQ(inName,"_color") ) { return ::hx::Val( _color ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_parent") ) { return ::hx::Val( _parent ); }
		if (HX_FIELD_EQ(inName,"_matrix") ) { return ::hx::Val( _matrix ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_scrollF") ) { return ::hx::Val( _scrollF ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"set_bitmap") ) { return ::hx::Val( set_bitmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_matrix") ) { return ::hx::Val( set_matrix_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"updateRender") ) { return ::hx::Val( updateRender_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxElement_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromJSON") ) { outValue = fromJSON_dyn(); return true; }
	}
	return false;
}

::hx::Val FlxElement_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"symbol") ) { symbol=inValue.Cast<  ::flxanimate::animate::SymbolParameters >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bitmap") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_bitmap(inValue.Cast< ::String >()) );bitmap=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"matrix") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_matrix(inValue.Cast<  ::flixel::math::FlxMatrix >()) );matrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_color") ) { _color=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_parent") ) { _parent=inValue.Cast<  ::flxanimate::animate::FlxKeyFrame >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_matrix") ) { _matrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_scrollF") ) { _scrollF=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxElement_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_parent",c9,16,f5,5b));
	outFields->push(HX_("symbol",58,af,dd,ee));
	outFields->push(HX_("bitmap",ef,0f,0c,f1));
	outFields->push(HX_("matrix",41,36,c8,bb));
	outFields->push(HX_("_matrix",e0,47,3f,2a));
	outFields->push(HX_("_color",a4,b8,43,46));
	outFields->push(HX_("_scrollF",1a,8d,90,6a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxElement_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flxanimate::animate::FlxKeyFrame */ ,(int)offsetof(FlxElement_obj,_parent),HX_("_parent",c9,16,f5,5b)},
	{::hx::fsObject /*  ::flxanimate::animate::SymbolParameters */ ,(int)offsetof(FlxElement_obj,symbol),HX_("symbol",58,af,dd,ee)},
	{::hx::fsString,(int)offsetof(FlxElement_obj,bitmap),HX_("bitmap",ef,0f,0c,f1)},
	{::hx::fsObject /*  ::flixel::math::FlxMatrix */ ,(int)offsetof(FlxElement_obj,matrix),HX_("matrix",41,36,c8,bb)},
	{::hx::fsObject /*  ::flixel::math::FlxMatrix */ ,(int)offsetof(FlxElement_obj,_matrix),HX_("_matrix",e0,47,3f,2a)},
	{::hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(int)offsetof(FlxElement_obj,_color),HX_("_color",a4,b8,43,46)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxElement_obj,_scrollF),HX_("_scrollF",1a,8d,90,6a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxElement_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxElement_obj_sMemberFields[] = {
	HX_("_parent",c9,16,f5,5b),
	HX_("symbol",58,af,dd,ee),
	HX_("bitmap",ef,0f,0c,f1),
	HX_("matrix",41,36,c8,bb),
	HX_("_matrix",e0,47,3f,2a),
	HX_("_color",a4,b8,43,46),
	HX_("_scrollF",1a,8d,90,6a),
	HX_("toString",ac,d0,6e,38),
	HX_("destroy",fa,2c,86,24),
	HX_("set_bitmap",2c,1e,11,e5),
	HX_("set_matrix",7e,44,cd,af),
	HX_("updateRender",3f,12,ed,04),
	::String(null()) };

::hx::Class FlxElement_obj::__mClass;

static ::String FlxElement_obj_sStaticFields[] = {
	HX_("fromJSON",92,ac,1b,a4),
	::String(null())
};

void FlxElement_obj::__register()
{
	FlxElement_obj _hx_dummy;
	FlxElement_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.animate.FlxElement",d6,a1,90,58);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxElement_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxElement_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxElement_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxElement_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxElement_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxElement_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flxanimate
} // end namespace animate
