// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal1
#include <flixel/util/_FlxSignal/FlxSignal1.h>
#endif
#ifndef INCLUDED_flxanimate_FlxAnimate
#include <flxanimate/FlxAnimate.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxAnim
#include <flxanimate/animate/FlxAnim.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxElement
#include <flxanimate/animate/FlxElement.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxKeyFrame
#include <flxanimate/animate/FlxKeyFrame.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxLayer
#include <flxanimate/animate/FlxLayer.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxMetaData
#include <flxanimate/animate/FlxMetaData.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxSymbol
#include <flxanimate/animate/FlxSymbol.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxTimeline
#include <flxanimate/animate/FlxTimeline.h>
#endif
#ifndef INCLUDED_flxanimate_animate_SymbolParameters
#include <flxanimate/animate/SymbolParameters.h>
#endif
#ifndef INCLUDED_flxanimate_data_Loop
#include <flxanimate/data/Loop.h>
#endif
#ifndef INCLUDED_flxanimate_data_SymbolT
#include <flxanimate/data/SymbolT.h>
#endif
#ifndef INCLUDED_flxanimate_data__AnimationData_AnimAtlas_Impl_
#include <flxanimate/data/_AnimationData/AnimAtlas_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_data__AnimationData_Animation_Impl_
#include <flxanimate/data/_AnimationData/Animation_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_data__AnimationData_MetaData_Impl_
#include <flxanimate/data/_AnimationData/MetaData_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_data__AnimationData_SymbolData_Impl_
#include <flxanimate/data/_AnimationData/SymbolData_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_data__AnimationData_SymbolDictionary_Impl_
#include <flxanimate/data/_AnimationData/SymbolDictionary_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_effects_FlxColorEffect
#include <flxanimate/effects/FlxColorEffect.h>
#endif
#ifndef INCLUDED_flxanimate_interfaces_IFilterable
#include <flxanimate/interfaces/IFilterable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_31_new,"flxanimate.animate.FlxAnim","new",0x0970c729,"flxanimate.animate.FlxAnim.new","flxanimate/animate/FlxAnim.hx",31,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_155__loadAtlas,"flxanimate.animate.FlxAnim","_loadAtlas",0x9260795d,"flxanimate.animate.FlxAnim._loadAtlas","flxanimate/animate/FlxAnim.hx",155,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_180_play,"flxanimate.animate.FlxAnim","play",0x3a95270b,"flxanimate.animate.FlxAnim.play","flxanimate/animate/FlxAnim.hx",180,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_222_playElement,"flxanimate.animate.FlxAnim","playElement",0x6a3e76f1,"flxanimate.animate.FlxAnim.playElement","flxanimate/animate/FlxAnim.hx",222,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_248_pause,"flxanimate.animate.FlxAnim","pause",0x00b6d1ff,"flxanimate.animate.FlxAnim.pause","flxanimate/animate/FlxAnim.hx",248,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_255_stop,"flxanimate.animate.FlxAnim","stop",0x3c96e919,"flxanimate.animate.FlxAnim.stop","flxanimate/animate/FlxAnim.hx",255,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_261_finish,"flxanimate.animate.FlxAnim","finish",0x363bed2a,"flxanimate.animate.FlxAnim.finish","flxanimate/animate/FlxAnim.hx",261,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_273_resume,"flxanimate.animate.FlxAnim","resume",0xb8411684,"flxanimate.animate.FlxAnim.resume","flxanimate/animate/FlxAnim.hx",273,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_277_setSymbols,"flxanimate.animate.FlxAnim","setSymbols",0x5aa446f0,"flxanimate.animate.FlxAnim.setSymbols","flxanimate/animate/FlxAnim.hx",277,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_290_update,"flxanimate.animate.FlxAnim","update",0x36c232e0,"flxanimate.animate.FlxAnim.update","flxanimate/animate/FlxAnim.hx",290,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_317_get_finished,"flxanimate.animate.FlxAnim","get_finished",0xc734af92,"flxanimate.animate.FlxAnim.get_finished","flxanimate/animate/FlxAnim.hx",317,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_321_get_curFrame,"flxanimate.animate.FlxAnim","get_curFrame",0x80578ead,"flxanimate.animate.FlxAnim.get_curFrame","flxanimate/animate/FlxAnim.hx",321,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_324_set_curFrame,"flxanimate.animate.FlxAnim","set_curFrame",0x9550b221,"flxanimate.animate.FlxAnim.set_curFrame","flxanimate/animate/FlxAnim.hx",324,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_350_addBySymbol,"flxanimate.animate.FlxAnim","addBySymbol",0x01519399,"flxanimate.animate.FlxAnim.addBySymbol","flxanimate/animate/FlxAnim.hx",350,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_371_startsWith,"flxanimate.animate.FlxAnim","startsWith",0xee7924ce,"flxanimate.animate.FlxAnim.startsWith","flxanimate/animate/FlxAnim.hx",371,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_384_addByAnimIndices,"flxanimate.animate.FlxAnim","addByAnimIndices",0x8c8e4d35,"flxanimate.animate.FlxAnim.addByAnimIndices","flxanimate/animate/FlxAnim.hx",384,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_396_addByFrameLabel,"flxanimate.animate.FlxAnim","addByFrameLabel",0xe416db48,"flxanimate.animate.FlxAnim.addByFrameLabel","flxanimate/animate/FlxAnim.hx",396,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_402_addBySymbolIndices,"flxanimate.animate.FlxAnim","addBySymbolIndices",0x1222708e,"flxanimate.animate.FlxAnim.addBySymbolIndices","flxanimate/animate/FlxAnim.hx",402,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_435_set_framerate,"flxanimate.animate.FlxAnim","set_framerate",0x42844779,"flxanimate.animate.FlxAnim.set_framerate","flxanimate/animate/FlxAnim.hx",435,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_449_addByCustomTimeline,"flxanimate.animate.FlxAnim","addByCustomTimeline",0xee0bd893,"flxanimate.animate.FlxAnim.addByCustomTimeline","flxanimate/animate/FlxAnim.hx",449,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_457_get_length,"flxanimate.animate.FlxAnim","get_length",0x84386906,"flxanimate.animate.FlxAnim.get_length","flxanimate/animate/FlxAnim.hx",457,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_462_getFrameLabel,"flxanimate.animate.FlxAnim","getFrameLabel",0x9d164ac6,"flxanimate.animate.FlxAnim.getFrameLabel","flxanimate/animate/FlxAnim.hx",462,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_467_toString,"flxanimate.animate.FlxAnim","toString",0xd251a143,"flxanimate.animate.FlxAnim.toString","flxanimate/animate/FlxAnim.hx",467,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_477_goToFrameLabel,"flxanimate.animate.FlxAnim","goToFrameLabel",0x76019201,"flxanimate.animate.FlxAnim.goToFrameLabel","flxanimate/animate/FlxAnim.hx",477,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_495_getNextToFrameLabel,"flxanimate.animate.FlxAnim","getNextToFrameLabel",0xcfb5a6f4,"flxanimate.animate.FlxAnim.getNextToFrameLabel","flxanimate/animate/FlxAnim.hx",495,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_504_addCallbackTo,"flxanimate.animate.FlxAnim","addCallbackTo",0x994c942a,"flxanimate.animate.FlxAnim.addCallbackTo","flxanimate/animate/FlxAnim.hx",504,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_509_removeCallbackFrom,"flxanimate.animate.FlxAnim","removeCallbackFrom",0xf441838a,"flxanimate.animate.FlxAnim.removeCallbackFrom","flxanimate/animate/FlxAnim.hx",509,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_514_removeAllCallbacksFrom,"flxanimate.animate.FlxAnim","removeAllCallbacksFrom",0x8abd24f2,"flxanimate.animate.FlxAnim.removeAllCallbacksFrom","flxanimate/animate/FlxAnim.hx",514,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_519_getFrameLabels,"flxanimate.animate.FlxAnim","getFrameLabels",0xd66b22ed,"flxanimate.animate.FlxAnim.getFrameLabels","flxanimate/animate/FlxAnim.hx",519,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_524_get_loopType,"flxanimate.animate.FlxAnim","get_loopType",0x719ce35e,"flxanimate.animate.FlxAnim.get_loopType","flxanimate/animate/FlxAnim.hx",524,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_529_set_loopType,"flxanimate.animate.FlxAnim","set_loopType",0x869606d2,"flxanimate.animate.FlxAnim.set_loopType","flxanimate/animate/FlxAnim.hx",529,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_533_get_symbolType,"flxanimate.animate.FlxAnim","get_symbolType",0xc103be52,"flxanimate.animate.FlxAnim.get_symbolType","flxanimate/animate/FlxAnim.hx",533,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_537_set_symbolType,"flxanimate.animate.FlxAnim","set_symbolType",0xe123a6c6,"flxanimate.animate.FlxAnim.set_symbolType","flxanimate/animate/FlxAnim.hx",537,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_541_get_reversed,"flxanimate.animate.FlxAnim","get_reversed",0xb3dbe122,"flxanimate.animate.FlxAnim.get_reversed","flxanimate/animate/FlxAnim.hx",541,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_545_set_reversed,"flxanimate.animate.FlxAnim","set_reversed",0xc8d50496,"flxanimate.animate.FlxAnim.set_reversed","flxanimate/animate/FlxAnim.hx",545,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_550_getByName,"flxanimate.animate.FlxAnim","getByName",0x97386881,"flxanimate.animate.FlxAnim.getByName","flxanimate/animate/FlxAnim.hx",550,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_554_getByInstance,"flxanimate.animate.FlxAnim","getByInstance",0xce7068cb,"flxanimate.animate.FlxAnim.getByInstance","flxanimate/animate/FlxAnim.hx",554,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_583_get_curSymbol,"flxanimate.animate.FlxAnim","get_curSymbol",0x0e9d48d8,"flxanimate.animate.FlxAnim.get_curSymbol","flxanimate/animate/FlxAnim.hx",583,0x524d8fe9)
HX_LOCAL_STACK_FRAME(_hx_pos_131a2bb3c37f0df9_587_destroy,"flxanimate.animate.FlxAnim","destroy",0x39e0bc43,"flxanimate.animate.FlxAnim.destroy","flxanimate/animate/FlxAnim.hx",587,0x524d8fe9)
namespace flxanimate{
namespace animate{

void FlxAnim_obj::__construct( ::flxanimate::FlxAnimate parent, ::Dynamic coolParsed){
            	HX_GC_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_31_new)
HXLINE( 124)		this->timeScale = ((Float)1.0);
HXLINE( 110)		this->animsMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  93)		this->onFrame =  ::flixel::util::_FlxSignal::FlxSignal1_obj::__alloc( HX_CTX );
HXLINE(  87)		this->onComplete =  ::flixel::util::_FlxSignal::FlxSignal0_obj::__alloc( HX_CTX );
HXLINE(  77)		this->buttonMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  75)		this->swfRender = false;
HXLINE( 148)		this->_tick = ( (Float)(0) );
HXLINE( 149)		this->_parent = parent;
HXLINE( 150)		this->isPlaying = false;
HXLINE( 151)		if (::hx::IsNotNull( coolParsed )) {
HXLINE( 151)			this->_loadAtlas(coolParsed);
            		}
            	}

Dynamic FlxAnim_obj::__CreateEmpty() { return new FlxAnim_obj; }

void *FlxAnim_obj::_hx_vtable = 0;

Dynamic FlxAnim_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxAnim_obj > _hx_result = new FlxAnim_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxAnim_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x62c763b1;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flxanimate_animate_FlxAnim__hx_flixel_util_IFlxDestroyable= {
	( void (::hx::Object::*)())&::flxanimate::animate::FlxAnim_obj::destroy,
};

void *FlxAnim_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flxanimate_animate_FlxAnim__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void FlxAnim_obj::_loadAtlas( ::Dynamic animationFile){
            	HX_GC_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_155__loadAtlas)
HXLINE( 156)		this->symbolDictionary =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 157)		this->stageInstance = null();
HXLINE( 159)		if (::hx::IsNull( animationFile )) {
HXLINE( 159)			return;
            		}
HXLINE( 160)		this->setSymbols(animationFile);
HXLINE( 162)		 ::flxanimate::animate::FlxElement _hx_tmp;
HXDLIN( 162)		if (::hx::IsNotNull( ::flxanimate::data::_AnimationData::Animation_Impl__obj::get_STI(::flxanimate::data::_AnimationData::AnimAtlas_Impl__obj::get_AN(animationFile)) )) {
HXLINE( 162)			_hx_tmp = ::flxanimate::animate::FlxElement_obj::fromJSON(::flxanimate::data::_AnimationData::Animation_Impl__obj::get_STI(::flxanimate::data::_AnimationData::AnimAtlas_Impl__obj::get_AN(animationFile)));
            		}
            		else {
HXLINE( 162)			_hx_tmp =  ::flxanimate::animate::FlxElement_obj::__alloc( HX_CTX ,null(), ::flxanimate::animate::SymbolParameters_obj::__alloc( HX_CTX ,::flxanimate::data::_AnimationData::SymbolData_Impl__obj::get_SN(::flxanimate::data::_AnimationData::AnimAtlas_Impl__obj::get_AN(animationFile)),null(),null(),null()),null());
            		}
HXDLIN( 162)		this->stageInstance = _hx_tmp;
HXLINE( 164)		this->curInstance = this->stageInstance;
HXLINE( 166)		this->set_curFrame(this->stageInstance->symbol->firstFrame);
HXLINE( 168)		{
HXLINE( 168)			 ::flixel::math::FlxBasePoint this1 = this->_parent->origin;
HXDLIN( 168)			 ::flixel::math::FlxBasePoint p = this->stageInstance->symbol->transformationPoint;
HXDLIN( 168)			{
HXLINE( 168)				Float y = p->y;
HXDLIN( 168)				this1->set_x(p->x);
HXDLIN( 168)				this1->set_y(y);
            			}
HXDLIN( 168)			{
HXLINE( 168)				 ::flixel::math::FlxBasePoint _this = p;
HXDLIN( 168)				if (_this->_weak) {
HXLINE( 168)					_this->put();
            				}
            			}
            		}
HXLINE( 169)		::String _hx_tmp1 = ::flxanimate::data::_AnimationData::Animation_Impl__obj::get_N(::flxanimate::data::_AnimationData::AnimAtlas_Impl__obj::get_AN(animationFile));
HXDLIN( 169)		this->metadata =  ::flxanimate::animate::FlxMetaData_obj::__alloc( HX_CTX ,_hx_tmp1,::flxanimate::data::_AnimationData::MetaData_Impl__obj::get_FRT(::flxanimate::data::_AnimationData::AnimAtlas_Impl__obj::get_MD(animationFile)));
HXLINE( 170)		this->set_framerate(this->metadata->frameRate);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnim_obj,_loadAtlas,(void))

void FlxAnim_obj::play(::String __o_Name, ::Dynamic __o_Force, ::Dynamic __o_Reverse, ::Dynamic __o_Frame){
            		::String Name = __o_Name;
            		if (::hx::IsNull(__o_Name)) Name = HX_("",00,00,00,00);
            		 ::Dynamic Force = __o_Force;
            		if (::hx::IsNull(__o_Force)) Force = false;
            		 ::Dynamic Reverse = __o_Reverse;
            		if (::hx::IsNull(__o_Reverse)) Reverse = false;
            		 ::Dynamic Frame = __o_Frame;
            		if (::hx::IsNull(__o_Frame)) Frame = 0;
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_180_play)
HXLINE( 181)		this->pause();
HXLINE( 183)		if (!(( (bool)(Force) ))) {
HXLINE( 183)			Force = this->get_finished();
            		}
            		else {
HXLINE( 183)			Force = true;
            		}
HXLINE( 185)		if ((Name != HX_("",00,00,00,00))) {
HXLINE( 187)			if (!(this->animsMap->exists(Name))) {
HXLINE( 189)				if ((Name == this->metadata->name)) {
HXLINE( 190)					this->curInstance = this->stageInstance;
            				}
            				else {
HXLINE( 191)					if (this->symbolDictionary->exists(Name)) {
HXLINE( 193)						this->curInstance->symbol->reset();
HXLINE( 194)						this->curInstance->symbol->name = Name;
            					}
            					else {
HXLINE( 197)						::flixel::FlxG_obj::log->advanced(((HX_("There's no animation called ",b8,74,24,4f) + Name) + HX_("!",21,00,00,00)),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            					}
            				}
            			}
            			else {
HXLINE( 201)				 ::Dynamic curThing = this->animsMap->get(Name);
HXLINE( 204)				Float _hx_tmp;
HXDLIN( 204)				if (::hx::IsEq( curThing->__Field(HX_("frameRate",ad,11,25,39),::hx::paccDynamic),0 )) {
HXLINE( 204)					_hx_tmp = this->metadata->frameRate;
            				}
            				else {
HXLINE( 204)					_hx_tmp = ( (Float)(curThing->__Field(HX_("frameRate",ad,11,25,39),::hx::paccDynamic)) );
            				}
HXDLIN( 204)				this->set_framerate(_hx_tmp);
HXLINE( 206)				if (!(( (bool)(Force) ))) {
HXLINE( 206)					Force = ::hx::IsInstanceNotEq( this->curInstance,curThing->__Field(HX_("instance",95,1f,e1,59),::hx::paccDynamic) );
            				}
            				else {
HXLINE( 206)					Force = true;
            				}
HXLINE( 208)				this->curInstance = ( ( ::flxanimate::animate::FlxElement)(curThing->__Field(HX_("instance",95,1f,e1,59),::hx::paccDynamic)) );
            			}
            		}
HXLINE( 213)		if (( (bool)(Force) )) {
HXLINE( 214)			int _hx_tmp1;
HXDLIN( 214)			if (( (bool)(Reverse) )) {
HXLINE( 214)				_hx_tmp1 = (( (int)(Frame) ) - this->get_length());
            			}
            			else {
HXLINE( 214)				_hx_tmp1 = ( (int)(Frame) );
            			}
HXDLIN( 214)			this->set_curFrame(_hx_tmp1);
            		}
HXLINE( 216)		this->set_reversed(( (bool)(Reverse) ));
HXLINE( 218)		this->resume();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxAnim_obj,play,(void))

void FlxAnim_obj::playElement( ::flxanimate::animate::FlxElement element, ::Dynamic __o_Force, ::Dynamic __o_Reverse, ::Dynamic __o_Frame){
            		 ::Dynamic Force = __o_Force;
            		if (::hx::IsNull(__o_Force)) Force = false;
            		 ::Dynamic Reverse = __o_Reverse;
            		if (::hx::IsNull(__o_Reverse)) Reverse = false;
            		 ::Dynamic Frame = __o_Frame;
            		if (::hx::IsNull(__o_Frame)) Frame = 0;
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_222_playElement)
HXLINE( 223)		bool _hx_tmp;
HXDLIN( 223)		if (!(this->get_finished())) {
HXLINE( 223)			_hx_tmp = ::hx::IsInstanceNotEq( this->curInstance,element );
            		}
            		else {
HXLINE( 223)			_hx_tmp = true;
            		}
HXDLIN( 223)		if (_hx_tmp) {
HXLINE( 224)			Force = true;
            		}
HXLINE( 226)		bool _hx_tmp1;
HXDLIN( 226)		if (::hx::IsInstanceEq( this->curInstance,element )) {
HXLINE( 226)			_hx_tmp1 = !(( (bool)(Force) ));
            		}
            		else {
HXLINE( 226)			_hx_tmp1 = false;
            		}
HXDLIN( 226)		if (_hx_tmp1) {
HXLINE( 226)			return;
            		}
HXLINE( 228)		this->pause();
HXLINE( 230)		if (::hx::IsNotNull( element )) {
HXLINE( 231)			this->curInstance = element;
            		}
            		else {
HXLINE( 234)			this->curInstance = this->stageInstance;
            		}
HXLINE( 237)		if (( (bool)(Force) )) {
HXLINE( 238)			int _hx_tmp2;
HXDLIN( 238)			if (!(( (bool)(Reverse) ))) {
HXLINE( 238)				_hx_tmp2 = ( (int)(Frame) );
            			}
            			else {
HXLINE( 238)				_hx_tmp2 = ((this->get_length() - 1) - ( (int)(Frame) ));
            			}
HXDLIN( 238)			this->set_curFrame(_hx_tmp2);
            		}
HXLINE( 240)		this->resume();
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxAnim_obj,playElement,(void))

void FlxAnim_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_248_pause)
HXDLIN( 248)		this->isPlaying = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnim_obj,pause,(void))

void FlxAnim_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_255_stop)
HXLINE( 256)		this->pause();
HXLINE( 257)		this->set_curFrame(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnim_obj,stop,(void))

void FlxAnim_obj::finish(){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_261_finish)
HXLINE( 262)		this->stop();
HXLINE( 264)		if (!(this->get_reversed())) {
HXLINE( 265)			this->set_curFrame((this->get_length() - 1));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnim_obj,finish,(void))

void FlxAnim_obj::resume(){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_273_resume)
HXDLIN( 273)		this->isPlaying = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnim_obj,resume,(void))

void FlxAnim_obj::setSymbols( ::Dynamic Anim){
            	HX_GC_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_277_setSymbols)
HXLINE( 278)		{
HXLINE( 278)			::Dynamic this1 = this->symbolDictionary;
HXDLIN( 278)			::String key = ::flxanimate::data::_AnimationData::SymbolData_Impl__obj::get_SN(::flxanimate::data::_AnimationData::AnimAtlas_Impl__obj::get_AN(Anim));
HXDLIN( 278)			::String value = ::haxe::io::Path_obj::withoutDirectory(::flxanimate::data::_AnimationData::SymbolData_Impl__obj::get_SN(::flxanimate::data::_AnimationData::AnimAtlas_Impl__obj::get_AN(Anim)));
HXDLIN( 278)			( ( ::haxe::ds::StringMap)(this1) )->set(key, ::flxanimate::animate::FlxSymbol_obj::__alloc( HX_CTX ,value,::flxanimate::animate::FlxTimeline_obj::fromJSON(::flxanimate::data::_AnimationData::SymbolData_Impl__obj::get_TL(::flxanimate::data::_AnimationData::AnimAtlas_Impl__obj::get_AN(Anim)))));
            		}
HXLINE( 280)		if (::hx::IsNotNull( ::flxanimate::data::_AnimationData::AnimAtlas_Impl__obj::get_SD(Anim) )) {
HXLINE( 282)			int _g = 0;
HXDLIN( 282)			::Array< ::Dynamic> _g1 = ::flxanimate::data::_AnimationData::SymbolDictionary_Impl__obj::get_S(::flxanimate::data::_AnimationData::AnimAtlas_Impl__obj::get_SD(Anim));
HXDLIN( 282)			while((_g < _g1->length)){
HXLINE( 282)				 ::Dynamic symbol = _g1->__get(_g);
HXDLIN( 282)				_g = (_g + 1);
HXLINE( 284)				{
HXLINE( 284)					::Dynamic this2 = this->symbolDictionary;
HXDLIN( 284)					::String key1 = ::flxanimate::data::_AnimationData::SymbolData_Impl__obj::get_SN(symbol);
HXDLIN( 284)					::String value1 = ::haxe::io::Path_obj::withoutDirectory(::flxanimate::data::_AnimationData::SymbolData_Impl__obj::get_SN(symbol));
HXDLIN( 284)					( ( ::haxe::ds::StringMap)(this2) )->set(key1, ::flxanimate::animate::FlxSymbol_obj::__alloc( HX_CTX ,value1,::flxanimate::animate::FlxTimeline_obj::fromJSON(::flxanimate::data::_AnimationData::SymbolData_Impl__obj::get_TL(symbol))));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnim_obj,setSymbols,(void))

void FlxAnim_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_290_update)
HXLINE( 291)		if (::hx::IsNotNull( this->curInstance )) {
HXLINE( 292)			 ::flxanimate::animate::FlxElement _hx_tmp = this->curInstance;
HXDLIN( 292)			Float _hx_tmp1 = ((elapsed * this->timeScale) * ::flixel::FlxG_obj::animationTimeScale);
HXDLIN( 292)			int _hx_tmp2 = this->get_curFrame();
HXDLIN( 292)			_hx_tmp->updateRender(_hx_tmp1,_hx_tmp2,this->symbolDictionary,this->swfRender);
            		}
HXLINE( 293)		bool _hx_tmp3;
HXDLIN( 293)		bool _hx_tmp4;
HXDLIN( 293)		if ((this->frameDelay != 0)) {
HXLINE( 293)			_hx_tmp4 = !(this->isPlaying);
            		}
            		else {
HXLINE( 293)			_hx_tmp4 = true;
            		}
HXDLIN( 293)		if (!(_hx_tmp4)) {
HXLINE( 293)			_hx_tmp3 = this->get_finished();
            		}
            		else {
HXLINE( 293)			_hx_tmp3 = true;
            		}
HXDLIN( 293)		if (_hx_tmp3) {
HXLINE( 293)			return;
            		}
HXLINE( 295)		 ::flxanimate::animate::FlxAnim _hx_tmp5 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 295)		_hx_tmp5->_tick = (_hx_tmp5->_tick + elapsed);
HXLINE( 297)		while((this->_tick > this->frameDelay)){
HXLINE( 299)			if (this->get_reversed()) {
HXLINE( 299)				this->set_curFrame((this->get_curFrame() - 1));
            			}
            			else {
HXLINE( 299)				this->set_curFrame((this->get_curFrame() + 1));
            			}
HXLINE( 300)			this->get_curSymbol()->fireCallbacks(null());
HXLINE( 301)			 ::Dynamic _hx_tmp6 = this->onFrame->dispatch;
HXDLIN( 301)			_hx_tmp6(this->get_curFrame());
HXLINE( 303)			 ::flxanimate::animate::FlxAnim _hx_tmp7 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 303)			_hx_tmp7->_tick = (_hx_tmp7->_tick - this->frameDelay);
            		}
HXLINE( 307)		bool _hx_tmp8;
HXDLIN( 307)		if (::hx::IsPointerNotEq( this->get_loopType(),::flxanimate::data::Loop_obj::SingleFrame_dyn() )) {
HXLINE( 307)			int _hx_tmp9 = this->get_curFrame();
HXDLIN( 307)			int _hx_tmp10;
HXDLIN( 307)			if (this->get_reversed()) {
HXLINE( 307)				_hx_tmp10 = 0;
            			}
            			else {
HXLINE( 307)				_hx_tmp10 = (this->get_length() - 1);
            			}
HXDLIN( 307)			_hx_tmp8 = (_hx_tmp9 == _hx_tmp10);
            		}
            		else {
HXLINE( 307)			_hx_tmp8 = false;
            		}
HXDLIN( 307)		if (_hx_tmp8) {
HXLINE( 309)			if (::hx::IsPointerEq( this->get_loopType(),::flxanimate::data::Loop_obj::PlayOnce_dyn() )) {
HXLINE( 310)				this->pause();
            			}
HXLINE( 312)			this->onComplete->dispatch();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnim_obj,update,(void))

bool FlxAnim_obj::get_finished(){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_317_get_finished)
HXDLIN( 317)		if (::hx::IsPointerEq( this->get_loopType(),::flxanimate::data::Loop_obj::PlayOnce_dyn() )) {
HXDLIN( 317)			bool _hx_tmp;
HXDLIN( 317)			if (this->get_reversed()) {
HXDLIN( 317)				_hx_tmp = (this->get_curFrame() == 0);
            			}
            			else {
HXDLIN( 317)				_hx_tmp = false;
            			}
HXDLIN( 317)			if (!(_hx_tmp)) {
HXDLIN( 317)				if (!(this->get_reversed())) {
HXDLIN( 317)					int _hx_tmp1 = this->get_curFrame();
HXDLIN( 317)					return (_hx_tmp1 >= (this->get_length() - 1));
            				}
            				else {
HXDLIN( 317)					return false;
            				}
            			}
            			else {
HXDLIN( 317)				return true;
            			}
            		}
            		else {
HXDLIN( 317)			return false;
            		}
HXDLIN( 317)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnim_obj,get_finished,return )

int FlxAnim_obj::get_curFrame(){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_321_get_curFrame)
HXDLIN( 321)		if (::hx::IsNotNull( this->get_curSymbol() )) {
HXDLIN( 321)			return this->get_curSymbol()->get_curFrame();
            		}
            		else {
HXDLIN( 321)			return 0;
            		}
HXDLIN( 321)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnim_obj,get_curFrame,return )

int FlxAnim_obj::set_curFrame(int Value){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_324_set_curFrame)
HXLINE( 325)		if (::hx::IsNull( this->get_curSymbol() )) {
HXLINE( 326)			return 0;
            		}
HXLINE( 328)		 ::flxanimate::animate::FlxSymbol _hx_tmp = this->get_curSymbol();
HXDLIN( 328)		int _hx_tmp1;
HXDLIN( 328)		switch((int)(this->get_loopType()->_hx_getIndex())){
            			case (int)0: {
HXLINE( 330)				if ((Value < 0)) {
HXLINE( 328)					_hx_tmp1 = (this->get_curSymbol()->get_length() - 1);
            				}
            				else {
HXLINE( 328)					_hx_tmp1 = ::hx::Mod(Value,this->get_curSymbol()->get_length());
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 331)				 ::Dynamic Max = (this->get_curSymbol()->get_length() - 1);
HXDLIN( 331)				Float lowerBound;
HXDLIN( 331)				if ((Value < 0)) {
HXLINE( 331)					lowerBound = ( (Float)(0) );
            				}
            				else {
HXLINE( 331)					lowerBound = ( (Float)(Value) );
            				}
HXDLIN( 331)				Float _hx_tmp2;
HXDLIN( 331)				bool _hx_tmp3;
HXDLIN( 331)				if (::hx::IsNotNull( Max )) {
HXLINE( 331)					_hx_tmp3 = ::hx::IsGreater( lowerBound,Max );
            				}
            				else {
HXLINE( 331)					_hx_tmp3 = false;
            				}
HXDLIN( 331)				if (_hx_tmp3) {
HXLINE( 331)					_hx_tmp2 = ( (Float)(Max) );
            				}
            				else {
HXLINE( 331)					_hx_tmp2 = lowerBound;
            				}
HXLINE( 328)				_hx_tmp1 = ( (int)(_hx_tmp2) );
            			}
            			break;
            			default:{
HXLINE( 328)				_hx_tmp1 = Value;
            			}
            		}
HXDLIN( 328)		_hx_tmp->set_curFrame(_hx_tmp1);
HXLINE( 335)		bool _hx_tmp4;
HXDLIN( 335)		if (::hx::IsPointerEq( this->get_symbolType(),::flxanimate::data::SymbolT_obj::MovieClip_dyn() )) {
HXLINE( 335)			_hx_tmp4 = !(this->swfRender);
            		}
            		else {
HXLINE( 335)			_hx_tmp4 = false;
            		}
HXDLIN( 335)		if (_hx_tmp4) {
HXLINE( 336)			this->get_curSymbol()->set_curFrame(0);
            		}
HXLINE( 339)		return this->get_curSymbol()->get_curFrame();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnim_obj,set_curFrame,return )

void FlxAnim_obj::addBySymbol(::String Name,::String SymbolName,::hx::Null< Float >  __o_FrameRate,::hx::Null< bool >  __o_Looped,::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y){
            		Float FrameRate = __o_FrameRate.Default(0);
            		bool Looped = __o_Looped.Default(true);
            		Float X = __o_X.Default(0);
            		Float Y = __o_Y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_350_addBySymbol)
HXLINE( 351)		if (::hx::IsNull( this->symbolDictionary )) {
HXLINE( 353)			return;
            		}
HXLINE( 355)		 ::flxanimate::data::Loop params;
HXDLIN( 355)		if (Looped) {
HXLINE( 355)			params = ::flxanimate::data::Loop_obj::Loop_dyn();
            		}
            		else {
HXLINE( 355)			params = ::flxanimate::data::Loop_obj::PlayOnce_dyn();
            		}
HXDLIN( 355)		 ::flxanimate::animate::SymbolParameters params1 =  ::flxanimate::animate::SymbolParameters_obj::__alloc( HX_CTX ,null(),null(),null(),params);
HXDLIN( 355)		 ::flxanimate::animate::FlxElement params2 =  ::flxanimate::animate::FlxElement_obj::__alloc( HX_CTX ,null(),params1, ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,1,0,0,1,X,Y));
HXLINE( 356)		{
HXLINE( 356)			 ::Dynamic name = this->symbolDictionary->keys();
HXDLIN( 356)			while(( (bool)(name->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 356)				::String name1 = ( (::String)(name->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 358)				if (this->startsWith(name1,SymbolName)) {
HXLINE( 360)					params2->symbol->name = name1;
HXLINE( 361)					goto _hx_goto_15;
            				}
            			}
            			_hx_goto_15:;
            		}
HXLINE( 364)		if (::hx::IsNotNull( params2->symbol->name )) {
HXLINE( 365)			this->animsMap->set(Name, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("frameRate",ad,11,25,39),FrameRate)
            				->setFixed(1,HX_("instance",95,1f,e1,59),params2)));
            		}
            		else {
HXLINE( 367)			::flixel::FlxG_obj::log->advanced(((HX_("No symbol was found with the name ",6a,c6,d0,65) + SymbolName) + HX_("!",21,00,00,00)),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxAnim_obj,addBySymbol,(void))

bool FlxAnim_obj::startsWith(::String reference,::String string){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_371_startsWith)
HXDLIN( 371)		if (::StringTools_obj::endsWith(string,HX_("\\",5c,00,00,00))) {
HXLINE( 372)			return (reference == string.substring(0,(string.length - 1)));
            		}
            		else {
HXLINE( 374)			return ::StringTools_obj::startsWith(reference,string);
            		}
HXLINE( 371)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxAnim_obj,startsWith,return )

void FlxAnim_obj::addByAnimIndices(::String Name,::Array< int > Indices,::hx::Null< Float >  __o_FrameRate){
            		Float FrameRate = __o_FrameRate.Default(0);
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_384_addByAnimIndices)
HXDLIN( 384)		this->addBySymbolIndices(Name,this->stageInstance->symbol->name,Indices,FrameRate,::hx::IsPointerEq( this->stageInstance->symbol->loop,::flxanimate::data::Loop_obj::Loop_dyn() ),0,0);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxAnim_obj,addByAnimIndices,(void))

void FlxAnim_obj::addByFrameLabel(::String Name,::String FrameLabel,::hx::Null< Float >  __o_FrameRate,::hx::Null< bool >  __o_Looped,::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y){
            		Float FrameRate = __o_FrameRate.Default(0);
            		bool Looped = __o_Looped.Default(true);
            		Float X = __o_X.Default(0);
            		Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_396_addByFrameLabel)
HXLINE( 397)		 ::flxanimate::animate::FlxKeyFrame keyFrame = this->getFrameLabel(FrameLabel,null());
HXLINE( 398)		::String _hx_tmp = this->stageInstance->symbol->name;
HXDLIN( 398)		this->addBySymbolIndices(Name,_hx_tmp,keyFrame->getFrameIndices(),FrameRate,Looped,X,Y);
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxAnim_obj,addByFrameLabel,(void))

void FlxAnim_obj::addBySymbolIndices(::String Name,::String SymbolName,::Array< int > Indices,::hx::Null< Float >  __o_FrameRate,::hx::Null< bool >  __o_Looped,::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y){
            		Float FrameRate = __o_FrameRate.Default(0);
            		bool Looped = __o_Looped.Default(true);
            		Float X = __o_X.Default(0);
            		Float Y = __o_Y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_402_addBySymbolIndices)
HXLINE( 403)		if (::hx::IsNull( this->symbolDictionary )) {
HXLINE( 405)			return;
            		}
HXLINE( 407)		if (!(this->symbolDictionary->exists(SymbolName))) {
HXLINE( 409)			::flixel::FlxG_obj::log->advanced(((HX_("",00,00,00,00) + SymbolName) + HX_(" does not exist as a symbol! maybe you misspelled it?",04,cc,90,14)),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
HXLINE( 410)			return;
            		}
HXLINE( 412)		 ::flxanimate::data::Loop params;
HXDLIN( 412)		if (Looped) {
HXLINE( 412)			params = ::flxanimate::data::Loop_obj::Loop_dyn();
            		}
            		else {
HXLINE( 412)			params = ::flxanimate::data::Loop_obj::PlayOnce_dyn();
            		}
HXDLIN( 412)		 ::flxanimate::animate::SymbolParameters params1 =  ::flxanimate::animate::SymbolParameters_obj::__alloc( HX_CTX ,null(),null(),null(),params);
HXDLIN( 412)		 ::flxanimate::animate::FlxElement params2 =  ::flxanimate::animate::FlxElement_obj::__alloc( HX_CTX ,null(),params1, ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,1,0,0,1,X,Y));
HXLINE( 413)		 ::flxanimate::animate::FlxTimeline timeline =  ::flxanimate::animate::FlxTimeline_obj::__alloc( HX_CTX ,null());
HXLINE( 414)		timeline->add(null(),HX_("Layer 1",02,9c,92,0f));
HXLINE( 416)		{
HXLINE( 416)			int _g = 0;
HXDLIN( 416)			int _g1 = Indices->length;
HXDLIN( 416)			while((_g < _g1)){
HXLINE( 416)				_g = (_g + 1);
HXDLIN( 416)				int index = (_g - 1);
HXLINE( 418)				int i = Indices->__get(index);
HXLINE( 419)				 ::flxanimate::animate::FlxKeyFrame keyframe =  ::flxanimate::animate::FlxKeyFrame_obj::__alloc( HX_CTX ,index,null(),null(),null(),null());
HXLINE( 421)				 ::flxanimate::animate::SymbolParameters params3 =  ::flxanimate::animate::SymbolParameters_obj::__alloc( HX_CTX ,SymbolName,null(),null(),params2->symbol->loop);
HXLINE( 422)				params3->set_firstFrame(i);
HXLINE( 423)				keyframe->add( ::flxanimate::animate::FlxElement_obj::__alloc( HX_CTX ,null(),params3,null()));
HXLINE( 424)				timeline->get(0)->add(keyframe);
            			}
            		}
HXLINE( 426)		 ::flxanimate::animate::FlxSymbol symbol =  ::flxanimate::animate::FlxSymbol_obj::__alloc( HX_CTX ,Name,timeline);
HXLINE( 427)		params2->symbol->name = symbol->name;
HXLINE( 429)		this->symbolDictionary->set(symbol->name,symbol);
HXLINE( 431)		this->animsMap->set(Name, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("frameRate",ad,11,25,39),FrameRate)
            			->setFixed(1,HX_("instance",95,1f,e1,59),params2)));
            	}


HX_DEFINE_DYNAMIC_FUNC7(FlxAnim_obj,addBySymbolIndices,(void))

Float FlxAnim_obj::set_framerate(Float value){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_435_set_framerate)
HXLINE( 436)		this->frameDelay = (( (Float)(1) ) / value);
HXLINE( 437)		return (this->framerate = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnim_obj,set_framerate,return )

void FlxAnim_obj::addByCustomTimeline(::String Name, ::flxanimate::animate::FlxTimeline Timeline,::hx::Null< Float >  __o_FrameRate,::hx::Null< bool >  __o_Looped){
            		Float FrameRate = __o_FrameRate.Default(0);
            		bool Looped = __o_Looped.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_449_addByCustomTimeline)
HXLINE( 450)		{
HXLINE( 450)			::Dynamic this1 = this->symbolDictionary;
HXDLIN( 450)			( ( ::haxe::ds::StringMap)(this1) )->set(Name, ::flxanimate::animate::FlxSymbol_obj::__alloc( HX_CTX ,::haxe::io::Path_obj::withoutDirectory(Name),Timeline));
            		}
HXLINE( 451)		 ::flxanimate::data::Loop params;
HXDLIN( 451)		if (Looped) {
HXLINE( 451)			params = ::flxanimate::data::Loop_obj::Loop_dyn();
            		}
            		else {
HXLINE( 451)			params = ::flxanimate::data::Loop_obj::PlayOnce_dyn();
            		}
HXDLIN( 451)		 ::flxanimate::animate::FlxElement params1 =  ::flxanimate::animate::FlxElement_obj::__alloc( HX_CTX ,null(), ::flxanimate::animate::SymbolParameters_obj::__alloc( HX_CTX ,null(),null(),null(),params),null());
HXLINE( 452)		this->animsMap->set(Name, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("frameRate",ad,11,25,39),FrameRate)
            			->setFixed(1,HX_("instance",95,1f,e1,59),params1)));
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxAnim_obj,addByCustomTimeline,(void))

int FlxAnim_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_457_get_length)
HXDLIN( 457)		return this->get_curSymbol()->get_length();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnim_obj,get_length,return )

 ::flxanimate::animate::FlxKeyFrame FlxAnim_obj::getFrameLabel(::String name, ::Dynamic layer){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_462_getFrameLabel)
HXDLIN( 462)		return this->get_curSymbol()->getFrameLabel(name,layer);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxAnim_obj,getFrameLabel,return )

::String FlxAnim_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_467_toString)
HXLINE( 468)		 ::Dynamic value = this->symbolDictionary;
HXDLIN( 468)		 ::flixel::util::LabelValuePair _this = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN( 468)		_this->label = HX_("symbolDictionary",0e,e5,dd,19);
HXDLIN( 468)		_this->value = value;
HXLINE( 469)		 ::Dynamic value1 = this->framerate;
HXDLIN( 469)		 ::flixel::util::LabelValuePair _this1 = ::flixel::util::LabelValuePair_obj::_pool->get().StaticCast<  ::flixel::util::LabelValuePair >();
HXDLIN( 469)		_this1->label = HX_("framerate",8d,e5,4b,4e);
HXDLIN( 469)		_this1->value = value1;
HXLINE( 467)		return ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(2)->init(0,_this)->init(1,_this1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnim_obj,toString,return )

void FlxAnim_obj::goToFrameLabel(::String name, ::Dynamic layer){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_477_goToFrameLabel)
HXLINE( 478)		this->pause();
HXLINE( 480)		 ::flxanimate::animate::FlxKeyFrame label = this->getFrameLabel(name,layer);
HXLINE( 482)		if (::hx::IsNotNull( label )) {
HXLINE( 483)			this->set_curFrame(label->index);
            		}
HXLINE( 485)		this->resume();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxAnim_obj,goToFrameLabel,(void))

::String FlxAnim_obj::getNextToFrameLabel(::String name){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_495_getNextToFrameLabel)
HXDLIN( 495)		return this->get_curSymbol()->getNextToFrameLabel(name,null())->name;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnim_obj,getNextToFrameLabel,return )

bool FlxAnim_obj::addCallbackTo(::String label, ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_504_addCallbackTo)
HXDLIN( 504)		return this->get_curSymbol()->addCallbackTo(label,callback,null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxAnim_obj,addCallbackTo,return )

bool FlxAnim_obj::removeCallbackFrom(::String label, ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_509_removeCallbackFrom)
HXDLIN( 509)		return this->get_curSymbol()->removeCallbackFrom(label,callback,null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxAnim_obj,removeCallbackFrom,return )

bool FlxAnim_obj::removeAllCallbacksFrom(::String label){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_514_removeAllCallbacksFrom)
HXDLIN( 514)		return this->get_curSymbol()->removeAllCallbacksFrom(label,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnim_obj,removeAllCallbacksFrom,return )

::Array< ::Dynamic> FlxAnim_obj::getFrameLabels( ::Dynamic layer){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_519_getFrameLabels)
HXDLIN( 519)		return this->get_curSymbol()->getFrameLabels(layer);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnim_obj,getFrameLabels,return )

 ::flxanimate::data::Loop FlxAnim_obj::get_loopType(){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_524_get_loopType)
HXDLIN( 524)		return this->curInstance->symbol->loop;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnim_obj,get_loopType,return )

 ::flxanimate::data::Loop FlxAnim_obj::set_loopType( ::flxanimate::data::Loop type){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_529_set_loopType)
HXDLIN( 529)		return this->curInstance->symbol->set_loop(type);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnim_obj,set_loopType,return )

 ::flxanimate::data::SymbolT FlxAnim_obj::get_symbolType(){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_533_get_symbolType)
HXDLIN( 533)		return this->curInstance->symbol->type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnim_obj,get_symbolType,return )

 ::flxanimate::data::SymbolT FlxAnim_obj::set_symbolType( ::flxanimate::data::SymbolT type){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_537_set_symbolType)
HXDLIN( 537)		return this->curInstance->symbol->set_type(type);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnim_obj,set_symbolType,return )

bool FlxAnim_obj::get_reversed(){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_541_get_reversed)
HXDLIN( 541)		return this->curInstance->symbol->reverse;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnim_obj,get_reversed,return )

bool FlxAnim_obj::set_reversed(bool value){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_545_set_reversed)
HXDLIN( 545)		return (this->curInstance->symbol->reverse = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnim_obj,set_reversed,return )

 ::Dynamic FlxAnim_obj::getByName(::String name){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_550_getByName)
HXDLIN( 550)		return this->animsMap->get(name);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxAnim_obj,getByName,return )

 ::flxanimate::animate::FlxSymbol FlxAnim_obj::getByInstance(::String instance, ::Dynamic frame, ::Dynamic layer){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_554_getByInstance)
HXLINE( 555)		if (::hx::IsNull( frame )) {
HXLINE( 555)			frame = this->get_curFrame();
            		}
HXLINE( 557)		 ::flxanimate::animate::FlxSymbol symbol = null();
HXLINE( 559)		::Array< ::Dynamic> layers;
HXDLIN( 559)		if (::hx::IsNull( layer )) {
HXLINE( 559)			layers = this->get_curSymbol()->timeline->getList();
            		}
            		else {
HXLINE( 559)			layers = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->get_curSymbol()->timeline->get(layer));
            		}
HXLINE( 560)		{
HXLINE( 560)			int _g = 0;
HXDLIN( 560)			while((_g < layers->length)){
HXLINE( 560)				 ::flxanimate::animate::FlxLayer layer1 = layers->__get(_g).StaticCast<  ::flxanimate::animate::FlxLayer >();
HXDLIN( 560)				_g = (_g + 1);
HXLINE( 562)				if (::hx::IsNull( layer1 )) {
HXLINE( 562)					continue;
            				}
HXLINE( 563)				 ::flxanimate::animate::FlxKeyFrame elements = layer1->get(frame);
HXLINE( 565)				if (::hx::IsNull( elements )) {
HXLINE( 565)					continue;
            				}
HXLINE( 567)				{
HXLINE( 567)					int _g1 = 0;
HXDLIN( 567)					::Array< ::Dynamic> _g2 = elements->getList();
HXDLIN( 567)					while((_g1 < _g2->length)){
HXLINE( 567)						 ::flxanimate::animate::FlxElement element = _g2->__get(_g1).StaticCast<  ::flxanimate::animate::FlxElement >();
HXDLIN( 567)						_g1 = (_g1 + 1);
HXLINE( 569)						if (::hx::IsNull( element->symbol )) {
HXLINE( 569)							continue;
            						}
HXLINE( 570)						bool _hx_tmp;
HXDLIN( 570)						if ((element->symbol->instance != HX_("",00,00,00,00))) {
HXLINE( 570)							_hx_tmp = (element->symbol->instance == instance);
            						}
            						else {
HXLINE( 570)							_hx_tmp = false;
            						}
HXDLIN( 570)						if (_hx_tmp) {
HXLINE( 572)							return ( ( ::flxanimate::animate::FlxSymbol)(this->symbolDictionary->get(element->symbol->name)) );
            						}
            					}
            				}
            			}
            		}
HXLINE( 577)		::flixel::FlxG_obj::log->advanced(HX_("This instance doesn't exist! Have you checked if the layer exists or the instance isn't misspelled?",3b,93,c4,e9),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
HXLINE( 578)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxAnim_obj,getByInstance,return )

 ::flxanimate::animate::FlxSymbol FlxAnim_obj::get_curSymbol(){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_583_get_curSymbol)
HXDLIN( 583)		if (::hx::IsNotNull( this->symbolDictionary )) {
HXDLIN( 583)			return ( ( ::flxanimate::animate::FlxSymbol)(this->symbolDictionary->get(this->curInstance->symbol->name)) );
            		}
            		else {
HXDLIN( 583)			return null();
            		}
HXDLIN( 583)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnim_obj,get_curSymbol,return )

void FlxAnim_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_131a2bb3c37f0df9_587_destroy)
HXLINE( 588)		this->isPlaying = false;
HXLINE( 589)		this->set_curFrame(0);
HXLINE( 590)		this->set_framerate(( (Float)(0) ));
HXLINE( 591)		this->_tick = ( (Float)(0) );
HXLINE( 592)		this->buttonMap = null();
HXLINE( 593)		this->animsMap = null();
HXLINE( 594)		this->curInstance->destroy();
HXLINE( 595)		this->curInstance = null();
HXLINE( 596)		this->stageInstance->destroy();
HXLINE( 597)		this->stageInstance = null();
HXLINE( 598)		this->metadata->destroy();
HXLINE( 599)		this->metadata = null();
HXLINE( 600)		this->swfRender = false;
HXLINE( 601)		this->_parent = null();
HXLINE( 602)		{
HXLINE( 602)			 ::Dynamic symbol = this->symbolDictionary->iterator();
HXDLIN( 602)			while(( (bool)(symbol->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 602)				 ::flxanimate::animate::FlxSymbol symbol1 = ( ( ::flxanimate::animate::FlxSymbol)(symbol->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 604)				symbol1->destroy();
            			}
            		}
HXLINE( 606)		this->symbolDictionary = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxAnim_obj,destroy,(void))


::hx::ObjectPtr< FlxAnim_obj > FlxAnim_obj::__new( ::flxanimate::FlxAnimate parent, ::Dynamic coolParsed) {
	::hx::ObjectPtr< FlxAnim_obj > __this = new FlxAnim_obj();
	__this->__construct(parent,coolParsed);
	return __this;
}

::hx::ObjectPtr< FlxAnim_obj > FlxAnim_obj::__alloc(::hx::Ctx *_hx_ctx, ::flxanimate::FlxAnimate parent, ::Dynamic coolParsed) {
	FlxAnim_obj *__this = (FlxAnim_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxAnim_obj), true, "flxanimate.animate.FlxAnim"));
	*(void **)__this = FlxAnim_obj::_hx_vtable;
	__this->__construct(parent,coolParsed);
	return __this;
}

FlxAnim_obj::FlxAnim_obj()
{
}

void FlxAnim_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxAnim);
	HX_MARK_MEMBER_NAME(stageInstance,"stageInstance");
	HX_MARK_MEMBER_NAME(curInstance,"curInstance");
	HX_MARK_MEMBER_NAME(metadata,"metadata");
	HX_MARK_MEMBER_NAME(curSymbol,"curSymbol");
	HX_MARK_MEMBER_NAME(finished,"finished");
	HX_MARK_MEMBER_NAME(symbolDictionary,"symbolDictionary");
	HX_MARK_MEMBER_NAME(swfRender,"swfRender");
	HX_MARK_MEMBER_NAME(buttonMap,"buttonMap");
	HX_MARK_MEMBER_NAME(isPlaying,"isPlaying");
	HX_MARK_MEMBER_NAME(onComplete,"onComplete");
	HX_MARK_MEMBER_NAME(onFrame,"onFrame");
	HX_MARK_MEMBER_NAME(framerate,"framerate");
	HX_MARK_MEMBER_NAME(frameDelay,"frameDelay");
	HX_MARK_MEMBER_NAME(animsMap,"animsMap");
	HX_MARK_MEMBER_NAME(timeScale,"timeScale");
	HX_MARK_MEMBER_NAME(_parent,"_parent");
	HX_MARK_MEMBER_NAME(_tick,"_tick");
	HX_MARK_END_CLASS();
}

void FlxAnim_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(stageInstance,"stageInstance");
	HX_VISIT_MEMBER_NAME(curInstance,"curInstance");
	HX_VISIT_MEMBER_NAME(metadata,"metadata");
	HX_VISIT_MEMBER_NAME(curSymbol,"curSymbol");
	HX_VISIT_MEMBER_NAME(finished,"finished");
	HX_VISIT_MEMBER_NAME(symbolDictionary,"symbolDictionary");
	HX_VISIT_MEMBER_NAME(swfRender,"swfRender");
	HX_VISIT_MEMBER_NAME(buttonMap,"buttonMap");
	HX_VISIT_MEMBER_NAME(isPlaying,"isPlaying");
	HX_VISIT_MEMBER_NAME(onComplete,"onComplete");
	HX_VISIT_MEMBER_NAME(onFrame,"onFrame");
	HX_VISIT_MEMBER_NAME(framerate,"framerate");
	HX_VISIT_MEMBER_NAME(frameDelay,"frameDelay");
	HX_VISIT_MEMBER_NAME(animsMap,"animsMap");
	HX_VISIT_MEMBER_NAME(timeScale,"timeScale");
	HX_VISIT_MEMBER_NAME(_parent,"_parent");
	HX_VISIT_MEMBER_NAME(_tick,"_tick");
}

::hx::Val FlxAnim_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"play") ) { return ::hx::Val( play_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return ::hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_tick") ) { return ::hx::Val( _tick ); }
		if (HX_FIELD_EQ(inName,"pause") ) { return ::hx::Val( pause_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"finish") ) { return ::hx::Val( finish_dyn() ); }
		if (HX_FIELD_EQ(inName,"resume") ) { return ::hx::Val( resume_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onFrame") ) { return ::hx::Val( onFrame ); }
		if (HX_FIELD_EQ(inName,"_parent") ) { return ::hx::Val( _parent ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"metadata") ) { return ::hx::Val( metadata ); }
		if (HX_FIELD_EQ(inName,"finished") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_finished() : finished ); }
		if (HX_FIELD_EQ(inName,"reversed") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_reversed() ); }
		if (HX_FIELD_EQ(inName,"curFrame") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_curFrame() ); }
		if (HX_FIELD_EQ(inName,"animsMap") ) { return ::hx::Val( animsMap ); }
		if (HX_FIELD_EQ(inName,"loopType") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_loopType() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"curSymbol") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_curSymbol() : curSymbol ); }
		if (HX_FIELD_EQ(inName,"swfRender") ) { return ::hx::Val( swfRender ); }
		if (HX_FIELD_EQ(inName,"buttonMap") ) { return ::hx::Val( buttonMap ); }
		if (HX_FIELD_EQ(inName,"isPlaying") ) { return ::hx::Val( isPlaying ); }
		if (HX_FIELD_EQ(inName,"framerate") ) { return ::hx::Val( framerate ); }
		if (HX_FIELD_EQ(inName,"timeScale") ) { return ::hx::Val( timeScale ); }
		if (HX_FIELD_EQ(inName,"getByName") ) { return ::hx::Val( getByName_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onComplete") ) { return ::hx::Val( onComplete ); }
		if (HX_FIELD_EQ(inName,"frameDelay") ) { return ::hx::Val( frameDelay ); }
		if (HX_FIELD_EQ(inName,"symbolType") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_symbolType() ); }
		if (HX_FIELD_EQ(inName,"_loadAtlas") ) { return ::hx::Val( _loadAtlas_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSymbols") ) { return ::hx::Val( setSymbols_dyn() ); }
		if (HX_FIELD_EQ(inName,"startsWith") ) { return ::hx::Val( startsWith_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curInstance") ) { return ::hx::Val( curInstance ); }
		if (HX_FIELD_EQ(inName,"playElement") ) { return ::hx::Val( playElement_dyn() ); }
		if (HX_FIELD_EQ(inName,"addBySymbol") ) { return ::hx::Val( addBySymbol_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_finished") ) { return ::hx::Val( get_finished_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_curFrame") ) { return ::hx::Val( get_curFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_curFrame") ) { return ::hx::Val( set_curFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_loopType") ) { return ::hx::Val( get_loopType_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_loopType") ) { return ::hx::Val( set_loopType_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_reversed") ) { return ::hx::Val( get_reversed_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_reversed") ) { return ::hx::Val( set_reversed_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stageInstance") ) { return ::hx::Val( stageInstance ); }
		if (HX_FIELD_EQ(inName,"set_framerate") ) { return ::hx::Val( set_framerate_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFrameLabel") ) { return ::hx::Val( getFrameLabel_dyn() ); }
		if (HX_FIELD_EQ(inName,"addCallbackTo") ) { return ::hx::Val( addCallbackTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"getByInstance") ) { return ::hx::Val( getByInstance_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_curSymbol") ) { return ::hx::Val( get_curSymbol_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"goToFrameLabel") ) { return ::hx::Val( goToFrameLabel_dyn() ); }
		if (HX_FIELD_EQ(inName,"getFrameLabels") ) { return ::hx::Val( getFrameLabels_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_symbolType") ) { return ::hx::Val( get_symbolType_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_symbolType") ) { return ::hx::Val( set_symbolType_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"addByFrameLabel") ) { return ::hx::Val( addByFrameLabel_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"symbolDictionary") ) { return ::hx::Val( symbolDictionary ); }
		if (HX_FIELD_EQ(inName,"addByAnimIndices") ) { return ::hx::Val( addByAnimIndices_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"addBySymbolIndices") ) { return ::hx::Val( addBySymbolIndices_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeCallbackFrom") ) { return ::hx::Val( removeCallbackFrom_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"addByCustomTimeline") ) { return ::hx::Val( addByCustomTimeline_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNextToFrameLabel") ) { return ::hx::Val( getNextToFrameLabel_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"removeAllCallbacksFrom") ) { return ::hx::Val( removeAllCallbacksFrom_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxAnim_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_tick") ) { _tick=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onFrame") ) { onFrame=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal1 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_parent") ) { _parent=inValue.Cast<  ::flxanimate::FlxAnimate >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"metadata") ) { metadata=inValue.Cast<  ::flxanimate::animate::FlxMetaData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"finished") ) { finished=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"reversed") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_reversed(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"curFrame") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_curFrame(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"animsMap") ) { animsMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loopType") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_loopType(inValue.Cast<  ::flxanimate::data::Loop >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"curSymbol") ) { curSymbol=inValue.Cast<  ::flxanimate::animate::FlxSymbol >(); return inValue; }
		if (HX_FIELD_EQ(inName,"swfRender") ) { swfRender=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buttonMap") ) { buttonMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isPlaying") ) { isPlaying=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"framerate") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_framerate(inValue.Cast< Float >()) );framerate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeScale") ) { timeScale=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onComplete") ) { onComplete=inValue.Cast<  ::flixel::util::_FlxSignal::FlxSignal0 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frameDelay") ) { frameDelay=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"symbolType") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_symbolType(inValue.Cast<  ::flxanimate::data::SymbolT >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curInstance") ) { curInstance=inValue.Cast<  ::flxanimate::animate::FlxElement >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stageInstance") ) { stageInstance=inValue.Cast<  ::flxanimate::animate::FlxElement >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"symbolDictionary") ) { symbolDictionary=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxAnim_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("stageInstance",73,34,44,bf));
	outFields->push(HX_("curInstance",35,e1,1f,db));
	outFields->push(HX_("metadata",6f,e7,19,40));
	outFields->push(HX_("curSymbol",f8,c8,6a,5f));
	outFields->push(HX_("finished",72,93,0e,95));
	outFields->push(HX_("reversed",02,c5,b5,81));
	outFields->push(HX_("symbolDictionary",0e,e5,dd,19));
	outFields->push(HX_("swfRender",38,68,30,24));
	outFields->push(HX_("buttonMap",ca,a3,02,50));
	outFields->push(HX_("isPlaying",a4,8c,16,8e));
	outFields->push(HX_("onComplete",f8,d4,7e,5d));
	outFields->push(HX_("onFrame",8e,16,c1,9c));
	outFields->push(HX_("framerate",8d,e5,4b,4e));
	outFields->push(HX_("frameDelay",16,0c,4d,ba));
	outFields->push(HX_("curFrame",8d,72,31,4e));
	outFields->push(HX_("animsMap",7a,ae,ba,94));
	outFields->push(HX_("loopType",3e,c7,76,3f));
	outFields->push(HX_("timeScale",3d,a3,bf,2d));
	outFields->push(HX_("symbolType",32,5a,06,24));
	outFields->push(HX_("_parent",c9,16,f5,5b));
	outFields->push(HX_("_tick",3c,df,0d,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxAnim_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flxanimate::animate::FlxElement */ ,(int)offsetof(FlxAnim_obj,stageInstance),HX_("stageInstance",73,34,44,bf)},
	{::hx::fsObject /*  ::flxanimate::animate::FlxElement */ ,(int)offsetof(FlxAnim_obj,curInstance),HX_("curInstance",35,e1,1f,db)},
	{::hx::fsObject /*  ::flxanimate::animate::FlxMetaData */ ,(int)offsetof(FlxAnim_obj,metadata),HX_("metadata",6f,e7,19,40)},
	{::hx::fsObject /*  ::flxanimate::animate::FlxSymbol */ ,(int)offsetof(FlxAnim_obj,curSymbol),HX_("curSymbol",f8,c8,6a,5f)},
	{::hx::fsBool,(int)offsetof(FlxAnim_obj,finished),HX_("finished",72,93,0e,95)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxAnim_obj,symbolDictionary),HX_("symbolDictionary",0e,e5,dd,19)},
	{::hx::fsBool,(int)offsetof(FlxAnim_obj,swfRender),HX_("swfRender",38,68,30,24)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxAnim_obj,buttonMap),HX_("buttonMap",ca,a3,02,50)},
	{::hx::fsBool,(int)offsetof(FlxAnim_obj,isPlaying),HX_("isPlaying",a4,8c,16,8e)},
	{::hx::fsObject /*  ::flixel::util::_FlxSignal::FlxSignal0 */ ,(int)offsetof(FlxAnim_obj,onComplete),HX_("onComplete",f8,d4,7e,5d)},
	{::hx::fsObject /*  ::flixel::util::_FlxSignal::FlxSignal1 */ ,(int)offsetof(FlxAnim_obj,onFrame),HX_("onFrame",8e,16,c1,9c)},
	{::hx::fsFloat,(int)offsetof(FlxAnim_obj,framerate),HX_("framerate",8d,e5,4b,4e)},
	{::hx::fsFloat,(int)offsetof(FlxAnim_obj,frameDelay),HX_("frameDelay",16,0c,4d,ba)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxAnim_obj,animsMap),HX_("animsMap",7a,ae,ba,94)},
	{::hx::fsFloat,(int)offsetof(FlxAnim_obj,timeScale),HX_("timeScale",3d,a3,bf,2d)},
	{::hx::fsObject /*  ::flxanimate::FlxAnimate */ ,(int)offsetof(FlxAnim_obj,_parent),HX_("_parent",c9,16,f5,5b)},
	{::hx::fsFloat,(int)offsetof(FlxAnim_obj,_tick),HX_("_tick",3c,df,0d,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxAnim_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxAnim_obj_sMemberFields[] = {
	HX_("stageInstance",73,34,44,bf),
	HX_("curInstance",35,e1,1f,db),
	HX_("metadata",6f,e7,19,40),
	HX_("curSymbol",f8,c8,6a,5f),
	HX_("finished",72,93,0e,95),
	HX_("symbolDictionary",0e,e5,dd,19),
	HX_("swfRender",38,68,30,24),
	HX_("buttonMap",ca,a3,02,50),
	HX_("isPlaying",a4,8c,16,8e),
	HX_("onComplete",f8,d4,7e,5d),
	HX_("onFrame",8e,16,c1,9c),
	HX_("framerate",8d,e5,4b,4e),
	HX_("frameDelay",16,0c,4d,ba),
	HX_("animsMap",7a,ae,ba,94),
	HX_("timeScale",3d,a3,bf,2d),
	HX_("_parent",c9,16,f5,5b),
	HX_("_tick",3c,df,0d,00),
	HX_("_loadAtlas",06,15,b7,9d),
	HX_("play",f4,2d,5a,4a),
	HX_("playElement",28,0f,b0,4a),
	HX_("pause",f6,d6,57,bd),
	HX_("stop",02,f0,5b,4c),
	HX_("finish",53,40,7f,86),
	HX_("resume",ad,69,84,08),
	HX_("setSymbols",99,e2,fa,65),
	HX_("update",09,86,05,87),
	HX_("get_finished",7b,47,28,4a),
	HX_("get_curFrame",96,26,4b,03),
	HX_("set_curFrame",0a,4a,44,18),
	HX_("addBySymbol",d0,2b,c3,e1),
	HX_("startsWith",77,c0,cf,f9),
	HX_("addByAnimIndices",9e,8d,f6,ae),
	HX_("addByFrameLabel",ff,5a,3e,e4),
	HX_("addBySymbolIndices",37,5d,6a,cf),
	HX_("set_framerate",70,9b,b5,54),
	HX_("addByCustomTimeline",ca,ff,b2,cf),
	HX_("get_length",af,04,8f,8f),
	HX_("getFrameLabel",bd,9e,47,af),
	HX_("toString",ac,d0,6e,38),
	HX_("goToFrameLabel",2a,b6,f9,4e),
	HX_("getNextToFrameLabel",2b,ce,5c,b1),
	HX_("addCallbackTo",21,e8,7d,ab),
	HX_("removeCallbackFrom",33,70,89,b1),
	HX_("removeAllCallbacksFrom",1b,1a,23,d7),
	HX_("getFrameLabels",16,47,63,af),
	HX_("get_loopType",47,7b,90,f4),
	HX_("set_loopType",bb,9e,89,09),
	HX_("get_symbolType",7b,e2,fb,99),
	HX_("set_symbolType",ef,ca,1b,ba),
	HX_("get_reversed",0b,79,cf,36),
	HX_("set_reversed",7f,9c,c8,4b),
	HX_("getByName",f8,b4,a4,8a),
	HX_("getByInstance",c2,bc,a1,e0),
	HX_("get_curSymbol",cf,9c,ce,20),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

::hx::Class FlxAnim_obj::__mClass;

void FlxAnim_obj::__register()
{
	FlxAnim_obj _hx_dummy;
	FlxAnim_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.animate.FlxAnim",b7,fe,89,4c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxAnim_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxAnim_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxAnim_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxAnim_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flxanimate
} // end namespace animate
