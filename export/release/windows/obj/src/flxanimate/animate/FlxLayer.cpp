// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxElement
#include <flxanimate/animate/FlxElement.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxKeyFrame
#include <flxanimate/animate/FlxKeyFrame.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxLayer
#include <flxanimate/animate/FlxLayer.h>
#endif
#ifndef INCLUDED_flxanimate_animate_FlxTimeline
#include <flxanimate/animate/FlxTimeline.h>
#endif
#ifndef INCLUDED_flxanimate_data_LayerType
#include <flxanimate/data/LayerType.h>
#endif
#ifndef INCLUDED_flxanimate_data__AnimationData_Layers_Impl_
#include <flxanimate/data/_AnimationData/Layers_Impl_.h>
#endif
#ifndef INCLUDED_flxanimate_effects_FlxColorEffect
#include <flxanimate/effects/FlxColorEffect.h>
#endif
#ifndef INCLUDED_flxanimate_interfaces_IFilterable
#include <flxanimate/interfaces/IFilterable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4774fa9426d84557_23_new,"flxanimate.animate.FlxLayer","new",0xc5824cdd,"flxanimate.animate.FlxLayer.new","flxanimate/animate/FlxLayer.hx",23,0x016bcf71)
HX_LOCAL_STACK_FRAME(_hx_pos_4774fa9426d84557_88_hide,"flxanimate.animate.FlxLayer","hide",0x088ca5a5,"flxanimate.animate.FlxLayer.hide","flxanimate/animate/FlxLayer.hx",88,0x016bcf71)
HX_LOCAL_STACK_FRAME(_hx_pos_4774fa9426d84557_92_show,"flxanimate.animate.FlxLayer","show",0x0fd145e0,"flxanimate.animate.FlxLayer.show","flxanimate/animate/FlxLayer.hx",92,0x016bcf71)
HX_LOCAL_STACK_FRAME(_hx_pos_4774fa9426d84557_95_destroy,"flxanimate.animate.FlxLayer","destroy",0xc1b92bf7,"flxanimate.animate.FlxLayer.destroy","flxanimate/animate/FlxLayer.hx",95,0x016bcf71)
HX_LOCAL_STACK_FRAME(_hx_pos_4774fa9426d84557_117_updateRender,"flxanimate.animate.FlxLayer","updateRender",0x206b9e22,"flxanimate.animate.FlxLayer.updateRender","flxanimate/animate/FlxLayer.hx",117,0x016bcf71)
HX_LOCAL_STACK_FRAME(_hx_pos_4774fa9426d84557_158_get,"flxanimate.animate.FlxLayer","get",0xc57cfd13,"flxanimate.animate.FlxLayer.get","flxanimate/animate/FlxLayer.hx",158,0x016bcf71)
HX_LOCAL_STACK_FRAME(_hx_pos_4774fa9426d84557_162__get,"flxanimate.animate.FlxLayer","_get",0x0298367a,"flxanimate.animate.FlxLayer._get","flxanimate/animate/FlxLayer.hx",162,0x016bcf71)
HX_LOCAL_STACK_FRAME(_hx_pos_4774fa9426d84557_202_add,"flxanimate.animate.FlxLayer","add",0xc5786e9e,"flxanimate.animate.FlxLayer.add","flxanimate/animate/FlxLayer.hx",202,0x016bcf71)
HX_LOCAL_STACK_FRAME(_hx_pos_4774fa9426d84557_236_remove,"flxanimate.animate.FlxLayer","remove",0x792f4be7,"flxanimate.animate.FlxLayer.remove","flxanimate/animate/FlxLayer.hx",236,0x016bcf71)
HX_LOCAL_STACK_FRAME(_hx_pos_4774fa9426d84557_252_rename,"flxanimate.animate.FlxLayer","rename",0x79cddb21,"flxanimate.animate.FlxLayer.rename","flxanimate/animate/FlxLayer.hx",252,0x016bcf71)
HX_LOCAL_STACK_FRAME(_hx_pos_4774fa9426d84557_268_set__parent,"flxanimate.animate.FlxLayer","set__parent",0x7e473f69,"flxanimate.animate.FlxLayer.set__parent","flxanimate/animate/FlxLayer.hx",268,0x016bcf71)
HX_LOCAL_STACK_FRAME(_hx_pos_4774fa9426d84557_274_get_length,"flxanimate.animate.FlxLayer","get_length",0x4909c1d2,"flxanimate.animate.FlxLayer.get_length","flxanimate/animate/FlxLayer.hx",274,0x016bcf71)
HX_LOCAL_STACK_FRAME(_hx_pos_4774fa9426d84557_279_set_type,"flxanimate.animate.FlxLayer","set_type",0x6a8d261a,"flxanimate.animate.FlxLayer.set_type","flxanimate/animate/FlxLayer.hx",279,0x016bcf71)
HX_LOCAL_STACK_FRAME(_hx_pos_4774fa9426d84557_293__setCurFrame,"flxanimate.animate.FlxLayer","_setCurFrame",0x001a7633,"flxanimate.animate.FlxLayer._setCurFrame","flxanimate/animate/FlxLayer.hx",293,0x016bcf71)
HX_LOCAL_STACK_FRAME(_hx_pos_4774fa9426d84557_343_updateBitmaps,"flxanimate.animate.FlxLayer","updateBitmaps",0xb82c2158,"flxanimate.animate.FlxLayer.updateBitmaps","flxanimate/animate/FlxLayer.hx",343,0x016bcf71)
HX_LOCAL_STACK_FRAME(_hx_pos_4774fa9426d84557_378_fromJSON,"flxanimate.animate.FlxLayer","fromJSON",0x9387caf5,"flxanimate.animate.FlxLayer.fromJSON","flxanimate/animate/FlxLayer.hx",378,0x016bcf71)
namespace flxanimate{
namespace animate{

void FlxLayer_obj::__construct(::String name,::Array< ::Dynamic> keyframes){
            	HX_GC_STACKFRAME(&_hx_pos_4774fa9426d84557_23_new)
HXLINE(  67)		this->_clipper = null();
HXLINE(  64)		this->_correctClip = false;
HXLINE(  47)		this->_renderable = true;
HXLINE(  76)		super::__construct(null(),null(),null(),null());
HXLINE(  77)		this->name = name;
HXLINE(  78)		this->set_type(::flxanimate::data::LayerType_obj::Normal_dyn());
HXLINE(  79)		::Array< ::Dynamic> _hx_tmp;
HXDLIN(  79)		if (::hx::IsNotNull( keyframes )) {
HXLINE(  79)			_hx_tmp = keyframes;
            		}
            		else {
HXLINE(  79)			_hx_tmp = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXDLIN(  79)		this->_keyframes = _hx_tmp;
HXLINE(  80)		this->set_visible(true);
HXLINE(  81)		this->_labels =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  82)		this->_mcMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  83)		this->_filterMatrix =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            	}

Dynamic FlxLayer_obj::__CreateEmpty() { return new FlxLayer_obj; }

void *FlxLayer_obj::_hx_vtable = 0;

Dynamic FlxLayer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxLayer_obj > _hx_result = new FlxLayer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxLayer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7ccf8994) {
		if (inClassId<=(int)0x588c9031) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x588c9031;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	} else {
		return inClassId==(int)0x7dab0655;
	}
}

static ::flxanimate::interfaces::IFilterable_obj _hx_flxanimate_animate_FlxLayer__hx_flxanimate_interfaces_IFilterable= {
	( void (::hx::Object::*)( ::openfl::geom::Rectangle))&::flxanimate::animate::FlxLayer_obj::updateBitmaps,
};

void *FlxLayer_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x94486852: return &_hx_flxanimate_animate_FlxLayer__hx_flxanimate_interfaces_IFilterable;
	}
	return super::_hx_getInterface(inHash);
}

void FlxLayer_obj::hide(){
            	HX_STACKFRAME(&_hx_pos_4774fa9426d84557_88_hide)
HXDLIN(  88)		this->set_visible(false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxLayer_obj,hide,(void))

void FlxLayer_obj::show(){
            	HX_STACKFRAME(&_hx_pos_4774fa9426d84557_92_show)
HXDLIN(  92)		this->set_visible(true);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxLayer_obj,show,(void))

void FlxLayer_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_4774fa9426d84557_95_destroy)
HXLINE(  96)		this->super::destroy();
HXLINE(  97)		if (::hx::IsNotNull( this->_filterFrame )) {
HXLINE(  99)			::flixel::FlxG_obj::bitmap->remove(this->_filterFrame->parent);
            		}
HXLINE( 101)		this->_filterFrame = ( ( ::flixel::graphics::frames::FlxFrame)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_filterFrame)) );
HXLINE( 102)		this->_filterCamera = ( ( ::flixel::FlxCamera)(::flixel::util::FlxDestroyUtil_obj::destroy(this->_filterCamera)) );
HXLINE( 103)		this->_filterMatrix = null();
HXLINE( 104)		 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _hx_tmp = ::flixel::FlxG_obj::bitmap;
HXDLIN( 104)		 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _this = ::flixel::FlxG_obj::bitmap;
HXDLIN( 104)		::String key = ::flixel::FlxG_obj::bitmap->findKeyForBitmap(this->_bmp1);
HXDLIN( 104)		_hx_tmp->remove(( ( ::flixel::graphics::FlxGraphic)(_this->_cache->get(key)) ));
HXLINE( 105)		this->_bmp1 = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_bmp1);
HXLINE( 106)		 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::bitmap;
HXDLIN( 106)		 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _this1 = ::flixel::FlxG_obj::bitmap;
HXDLIN( 106)		::String key1 = ::flixel::FlxG_obj::bitmap->findKeyForBitmap(this->_bmp2);
HXDLIN( 106)		_hx_tmp1->remove(( ( ::flixel::graphics::FlxGraphic)(_this1->_cache->get(key1)) ));
HXLINE( 107)		this->_bmp2 = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_bmp2);
HXLINE( 109)		{
HXLINE( 109)			int _g = 0;
HXDLIN( 109)			::Array< ::Dynamic> _g1 = this->_keyframes;
HXDLIN( 109)			while((_g < _g1->length)){
HXLINE( 109)				 ::flxanimate::animate::FlxKeyFrame keyframe = _g1->__get(_g).StaticCast<  ::flxanimate::animate::FlxKeyFrame >();
HXDLIN( 109)				_g = (_g + 1);
HXLINE( 111)				keyframe->destroy();
            			}
            		}
HXLINE( 113)		this->_keyframes = null();
            	}


void FlxLayer_obj::updateRender(Float elapsed,int curFrame, ::haxe::ds::StringMap dictionary, ::Dynamic __o_swfRender){
            		 ::Dynamic swfRender = __o_swfRender;
            		if (::hx::IsNull(__o_swfRender)) swfRender = false;
            	HX_STACKFRAME(&_hx_pos_4774fa9426d84557_117_updateRender)
HXLINE( 118)		this->update(elapsed);
HXLINE( 119)		 ::flxanimate::animate::FlxKeyFrame _prevFrame = this->_currFrame;
HXLINE( 120)		this->_setCurFrame(curFrame);
HXLINE( 121)		bool _hx_tmp;
HXDLIN( 121)		if (::hx::IsNull( this->_clipper )) {
HXLINE( 121)			_hx_tmp = (::Type_obj::enumConstructor(this->type) == HX_("Clipped",df,2f,19,d0));
            		}
            		else {
HXLINE( 121)			_hx_tmp = false;
            		}
HXDLIN( 121)		if (_hx_tmp) {
HXLINE( 123)			if (::hx::IsNotNull( this->_parent )) {
HXLINE( 125)				 ::flxanimate::animate::FlxTimeline l = this->_parent;
HXDLIN( 125)				 ::flxanimate::animate::FlxLayer l1 = l->get(::Type_obj::enumParameters(this->type)->__get(0));
HXLINE( 126)				if (::hx::IsNotNull( l1 )) {
HXLINE( 128)					l1->_correctClip = true;
HXLINE( 130)					this->_clipper = l1;
            				}
            			}
            		}
            		else {
HXLINE( 134)			if (::hx::IsNotNull( this->_clipper )) {
HXLINE( 136)				if (this->_clipper->_currFrame->_renderDirty) {
HXLINE( 138)					this->_currFrame->_renderDirty = true;
            				}
            			}
            		}
HXLINE( 142)		if (::hx::IsNotNull( this->_currFrame )) {
HXLINE( 144)			if (this->_correctClip) {
HXLINE( 145)				this->_currFrame->_cacheAsBitmap = true;
            			}
HXLINE( 146)			if (::hx::IsInstanceNotEq( _prevFrame,this->_currFrame )) {
HXLINE( 148)				this->_currFrame->_renderDirty = true;
HXLINE( 149)				_prevFrame = this->_currFrame;
            			}
HXLINE( 151)			this->_currFrame->updateRender(elapsed,curFrame,dictionary,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxLayer_obj,updateRender,(void))

 ::flxanimate::animate::FlxKeyFrame FlxLayer_obj::get( ::Dynamic frame){
            	HX_STACKFRAME(&_hx_pos_4774fa9426d84557_158_get)
HXDLIN( 158)		return this->_get(frame,false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxLayer_obj,get,return )

 ::flxanimate::animate::FlxKeyFrame FlxLayer_obj::_get( ::Dynamic frame,::hx::Null< bool >  __o__animateRendering){
            		bool _animateRendering = __o__animateRendering.Default(true);
            	HX_STACKFRAME(&_hx_pos_4774fa9426d84557_162__get)
HXLINE( 163)		bool _hx_tmp;
HXDLIN( 163)		if (_animateRendering) {
HXLINE( 163)			_hx_tmp = (::Type_obj::enumConstructor(this->type) == HX_("Clipped",df,2f,19,d0));
            		}
            		else {
HXLINE( 163)			_hx_tmp = false;
            		}
HXDLIN( 163)		if (_hx_tmp) {
HXLINE( 165)			::Array< ::Dynamic> layers = this->_parent->getList();
HXLINE( 166)			 ::flxanimate::animate::FlxLayer layer = layers->__get((layers->indexOf(::hx::ObjectPtr<OBJ_>(this),null()) - 1)).StaticCast<  ::flxanimate::animate::FlxLayer >();
HXLINE( 167)			bool _hx_tmp1;
HXDLIN( 167)			bool _hx_tmp2;
HXDLIN( 167)			if (::hx::IsNotNull( this->_parent )) {
HXLINE( 167)				_hx_tmp2 = ::hx::IsNotNull( layer );
            			}
            			else {
HXLINE( 167)				_hx_tmp2 = false;
            			}
HXDLIN( 167)			if (_hx_tmp2) {
HXLINE( 167)				_hx_tmp1 = (::Type_obj::enumConstructor(layer->type) == HX_("Clipper",ed,2f,19,d0));
            			}
            			else {
HXLINE( 167)				_hx_tmp1 = false;
            			}
HXDLIN( 167)			if (_hx_tmp1) {
HXLINE( 169)				layer->_renderable = false;
            			}
            		}
HXLINE( 172)		int index = 0;
HXLINE( 173)		if (::Std_obj::isOfType(frame,::hx::ClassOf< ::String >())) {
HXLINE( 175)			if (!(this->_labels->exists(( (::String)(frame) )))) {
HXLINE( 175)				return null();
            			}
HXLINE( 177)			 ::flxanimate::animate::FlxKeyFrame label = ( ( ::flxanimate::animate::FlxKeyFrame)(this->_labels->get(( (::String)(frame) ))) );
HXLINE( 179)			return label;
            		}
            		else {
HXLINE( 183)			index = ( (int)(frame) );
HXLINE( 184)			bool _hx_tmp3;
HXDLIN( 184)			if ((index >= 0)) {
HXLINE( 184)				_hx_tmp3 = (index == ::Math_obj::NaN);
            			}
            			else {
HXLINE( 184)				_hx_tmp3 = true;
            			}
HXDLIN( 184)			if (_hx_tmp3) {
HXLINE( 185)				index = 0;
            			}
HXLINE( 186)			if ((index > this->get_length())) {
HXLINE( 186)				return null();
            			}
            		}
HXLINE( 189)		{
HXLINE( 189)			int _g = 0;
HXDLIN( 189)			::Array< ::Dynamic> _g1 = this->_keyframes;
HXDLIN( 189)			while((_g < _g1->length)){
HXLINE( 189)				 ::flxanimate::animate::FlxKeyFrame keyframe = _g1->__get(_g).StaticCast<  ::flxanimate::animate::FlxKeyFrame >();
HXDLIN( 189)				_g = (_g + 1);
HXLINE( 191)				if (((keyframe->index + keyframe->duration) > index)) {
HXLINE( 193)					return keyframe;
            				}
            			}
            		}
HXLINE( 198)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxLayer_obj,_get,return )

 ::flxanimate::animate::FlxKeyFrame FlxLayer_obj::add( ::flxanimate::animate::FlxKeyFrame keyFrame){
            	HX_GC_STACKFRAME(&_hx_pos_4774fa9426d84557_202_add)
HXLINE( 203)		if (::hx::IsNull( keyFrame )) {
HXLINE( 203)			return null();
            		}
HXLINE( 204)		int index = keyFrame->index;
HXLINE( 205)		if (::hx::IsNotNull( keyFrame->name )) {
HXLINE( 206)			this->_labels->set(keyFrame->name,keyFrame);
            		}
HXLINE( 208)		 ::Dynamic Max = (this->get_length() - 1);
HXDLIN( 208)		Float lowerBound;
HXDLIN( 208)		if ((index < 0)) {
HXLINE( 208)			lowerBound = ( (Float)(0) );
            		}
            		else {
HXLINE( 208)			lowerBound = ( (Float)(index) );
            		}
HXDLIN( 208)		Float keyframe;
HXDLIN( 208)		bool keyframe1;
HXDLIN( 208)		if (::hx::IsNotNull( Max )) {
HXLINE( 208)			keyframe1 = ::hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE( 208)			keyframe1 = false;
            		}
HXDLIN( 208)		if (keyframe1) {
HXLINE( 208)			keyframe = ( (Float)(Max) );
            		}
            		else {
HXLINE( 208)			keyframe = lowerBound;
            		}
HXDLIN( 208)		 ::flxanimate::animate::FlxKeyFrame keyframe2 = this->get(keyframe);
HXLINE( 209)		if ((this->get_length() == 0)) {
HXLINE( 211)			keyframe2 =  ::flxanimate::animate::FlxKeyFrame_obj::__alloc( HX_CTX ,0,1,null(),null(),null());
HXLINE( 212)			this->_keyframes->push(keyframe2);
            		}
HXLINE( 214)		int difference = ( (int)(::Math_obj::abs(( (Float)((index - keyframe2->index)) ))) );
HXLINE( 216)		if ((index == keyframe2->index)) {
HXLINE( 218)			keyFrame->set_duration((keyFrame->duration + (keyframe2->duration - 1)));
HXLINE( 220)			::Array< ::Dynamic> _hx_tmp = this->_keyframes;
HXDLIN( 220)			_hx_tmp->insert(this->_keyframes->indexOf(keyframe2,null()),keyFrame);
HXLINE( 221)			this->_keyframes->remove(keyframe2);
HXLINE( 222)			keyframe2->destroy();
            		}
            		else {
HXLINE( 226)			int dur = keyframe2->duration;
HXLINE( 227)			keyframe2->set_duration((keyframe2->duration + (difference - dur)));
HXLINE( 228)			Float Value = ( (Float)(((dur - difference) - 1)) );
HXDLIN( 228)			 ::Dynamic Max1 = null();
HXDLIN( 228)			Float lowerBound1;
HXDLIN( 228)			if ((Value < 0)) {
HXLINE( 228)				lowerBound1 = ( (Float)(0) );
            			}
            			else {
HXLINE( 228)				lowerBound1 = Value;
            			}
HXDLIN( 228)			Float _hx_tmp1;
HXDLIN( 228)			bool _hx_tmp2;
HXDLIN( 228)			if (::hx::IsNotNull( Max1 )) {
HXLINE( 228)				_hx_tmp2 = ::hx::IsGreater( lowerBound1,Max1 );
            			}
            			else {
HXLINE( 228)				_hx_tmp2 = false;
            			}
HXDLIN( 228)			if (_hx_tmp2) {
HXLINE( 228)				_hx_tmp1 = ( (Float)(Max1) );
            			}
            			else {
HXLINE( 228)				_hx_tmp1 = lowerBound1;
            			}
HXDLIN( 228)			keyFrame->set_duration((keyFrame->duration + ( (int)(_hx_tmp1) )));
HXLINE( 229)			::Array< ::Dynamic> _hx_tmp3 = this->_keyframes;
HXDLIN( 229)			_hx_tmp3->insert((this->_keyframes->indexOf(keyframe2,null()) + 1),keyFrame);
            		}
HXLINE( 232)		keyFrame->_parent = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 233)		return keyFrame;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxLayer_obj,add,return )

 ::Dynamic FlxLayer_obj::remove( ::Dynamic frame){
            	HX_STACKFRAME(&_hx_pos_4774fa9426d84557_236_remove)
HXLINE( 237)		if (::Std_obj::isOfType(frame,::hx::ClassOf< ::flxanimate::animate::FlxKeyFrame >())) {
HXLINE( 239)			this->_keyframes->remove(frame);
HXLINE( 240)			return frame;
            		}
HXLINE( 242)		int index = ( (int)(frame) );
HXLINE( 243)		if ((this->get_length() > index)) {
HXLINE( 245)			 ::flxanimate::animate::FlxKeyFrame keyframe = this->get(index);
HXLINE( 246)			if ((keyframe->duration > 1)) {
HXLINE( 246)				keyframe->set_duration((keyframe->duration - 1));
            			}
            			else {
HXLINE( 246)				this->_keyframes->remove(keyframe);
            			}
HXLINE( 247)			return keyframe;
            		}
HXLINE( 249)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxLayer_obj,remove,return )

void FlxLayer_obj::rename(::String __o_name){
            		::String name = __o_name;
            		if (::hx::IsNull(__o_name)) name = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_4774fa9426d84557_252_rename)
HXLINE( 253)		this->_correctClip = false;
HXLINE( 255)		bool _hx_tmp;
HXDLIN( 255)		bool _hx_tmp1;
HXDLIN( 255)		bool _hx_tmp2;
HXDLIN( 255)		if ((name != HX_("",00,00,00,00))) {
HXLINE( 255)			_hx_tmp2 = ::hx::IsNotNull( name );
            		}
            		else {
HXLINE( 255)			_hx_tmp2 = false;
            		}
HXDLIN( 255)		if (_hx_tmp2) {
HXLINE( 255)			_hx_tmp1 = (this->name != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 255)			_hx_tmp1 = false;
            		}
HXDLIN( 255)		if (_hx_tmp1) {
HXLINE( 255)			_hx_tmp = ::hx::IsNotNull( this->name );
            		}
            		else {
HXLINE( 255)			_hx_tmp = false;
            		}
HXDLIN( 255)		if (_hx_tmp) {
HXLINE( 257)			int name1;
HXDLIN( 257)			if (::hx::IsNotNull( this->_parent )) {
HXLINE( 257)				name1 = this->_parent->getList()->length;
            			}
            			else {
HXLINE( 257)				name1 = 1;
            			}
HXDLIN( 257)			name = (HX_("Layer ",4f,89,45,8d) + name1);
            		}
HXLINE( 259)		bool _hx_tmp3;
HXDLIN( 259)		if (::hx::IsNotNull( this->_parent )) {
HXLINE( 259)			_hx_tmp3 = ::hx::IsNotNull( this->_parent->get(name) );
            		}
            		else {
HXLINE( 259)			_hx_tmp3 = false;
            		}
HXDLIN( 259)		if (_hx_tmp3) {
HXLINE( 261)			name = (name + HX_(" copy",d5,4b,97,ae));
            		}
HXLINE( 264)		bool _hx_tmp4;
HXDLIN( 264)		if ((name != HX_("",00,00,00,00))) {
HXLINE( 264)			_hx_tmp4 = ::hx::IsNotNull( name );
            		}
            		else {
HXLINE( 264)			_hx_tmp4 = false;
            		}
HXDLIN( 264)		if (_hx_tmp4) {
HXLINE( 265)			this->name = name;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxLayer_obj,rename,(void))

 ::flxanimate::animate::FlxTimeline FlxLayer_obj::set__parent( ::flxanimate::animate::FlxTimeline par){
            	HX_STACKFRAME(&_hx_pos_4774fa9426d84557_268_set__parent)
HXLINE( 269)		this->_parent = par;
HXLINE( 270)		this->rename(null());
HXLINE( 271)		return par;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxLayer_obj,set__parent,return )

int FlxLayer_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_4774fa9426d84557_274_get_length)
HXLINE( 275)		 ::flxanimate::animate::FlxKeyFrame keyframe = this->_keyframes->__get((this->_keyframes->length - 1)).StaticCast<  ::flxanimate::animate::FlxKeyFrame >();
HXLINE( 276)		if (::hx::IsNotNull( keyframe )) {
HXLINE( 276)			return (keyframe->index + keyframe->duration);
            		}
            		else {
HXLINE( 276)			return 0;
            		}
HXDLIN( 276)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxLayer_obj,get_length,return )

 ::flxanimate::data::LayerType FlxLayer_obj::set_type( ::flxanimate::data::LayerType value){
            	HX_STACKFRAME(&_hx_pos_4774fa9426d84557_279_set_type)
HXLINE( 280)		bool _hx_tmp;
HXDLIN( 280)		if (::hx::IsNotNull( this->type )) {
HXLINE( 280)			_hx_tmp = (::Type_obj::enumConstructor(this->type) == HX_("Clipped",df,2f,19,d0));
            		}
            		else {
HXLINE( 280)			_hx_tmp = false;
            		}
HXDLIN( 280)		if (_hx_tmp) {
HXLINE( 282)			::Array< ::Dynamic> layers = this->_parent->getList();
HXLINE( 283)			 ::flxanimate::animate::FlxLayer layer = layers->__get((layers->indexOf(::hx::ObjectPtr<OBJ_>(this),null()) - 1)).StaticCast<  ::flxanimate::animate::FlxLayer >();
HXLINE( 284)			bool _hx_tmp1;
HXDLIN( 284)			bool _hx_tmp2;
HXDLIN( 284)			if (::hx::IsNotNull( this->_parent )) {
HXLINE( 284)				_hx_tmp2 = ::hx::IsNotNull( layer );
            			}
            			else {
HXLINE( 284)				_hx_tmp2 = false;
            			}
HXDLIN( 284)			if (_hx_tmp2) {
HXLINE( 284)				_hx_tmp1 = (::Type_obj::enumConstructor(layer->type) == HX_("Clipper",ed,2f,19,d0));
            			}
            			else {
HXLINE( 284)				_hx_tmp1 = false;
            			}
HXDLIN( 284)			if (_hx_tmp1) {
HXLINE( 286)				layer->_renderable = true;
            			}
            		}
HXLINE( 289)		return (this->type = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxLayer_obj,set_type,return )

void FlxLayer_obj::_setCurFrame(int frame){
            	HX_STACKFRAME(&_hx_pos_4774fa9426d84557_293__setCurFrame)
HXLINE( 295)		bool _hx_tmp;
HXDLIN( 295)		if ((this->get_length() != 0)) {
HXLINE( 295)			_hx_tmp = (frame > this->get_length());
            		}
            		else {
HXLINE( 295)			_hx_tmp = true;
            		}
HXDLIN( 295)		if (_hx_tmp) {
HXLINE( 297)			this->_currFrame = null();
HXLINE( 298)			return;
            		}
HXLINE( 301)		if (::hx::IsNotNull( this->_currFrame )) {
HXLINE( 303)			bool _hx_tmp1;
HXDLIN( 303)			if ((frame >= this->_currFrame->index)) {
HXLINE( 303)				_hx_tmp1 = (frame < this->_currFrame->duration);
            			}
            			else {
HXLINE( 303)				_hx_tmp1 = false;
            			}
HXDLIN( 303)			if (_hx_tmp1) {
HXLINE( 303)				return;
            			}
HXLINE( 305)			int i = this->_keyframes->indexOf(this->_currFrame,null());
HXLINE( 307)			 ::flxanimate::animate::FlxKeyFrame prevFrame = this->_currFrame;
HXLINE( 309)			if ((frame >= (this->_currFrame->index + this->_currFrame->duration))) {
HXLINE( 311)				 ::flxanimate::animate::FlxKeyFrame keyframe = this->_keyframes->__get(i).StaticCast<  ::flxanimate::animate::FlxKeyFrame >();
HXLINE( 312)				while((frame >= (keyframe->index + keyframe->duration))){
HXLINE( 314)					i = (i + 1);
HXDLIN( 314)					keyframe = this->_keyframes->__get((i - 1)).StaticCast<  ::flxanimate::animate::FlxKeyFrame >();
HXLINE( 315)					if (::hx::IsNull( keyframe )) {
HXLINE( 316)						goto _hx_goto_15;
            					}
            				}
            				_hx_goto_15:;
HXLINE( 319)				this->_currFrame = keyframe;
            			}
            			else {
HXLINE( 321)				if ((frame < this->_currFrame->index)) {
HXLINE( 323)					 ::flxanimate::animate::FlxKeyFrame keyframe1 = this->_keyframes->__get(i).StaticCast<  ::flxanimate::animate::FlxKeyFrame >();
HXLINE( 324)					while((frame < keyframe1->index)){
HXLINE( 326)						i = (i - 1);
HXDLIN( 326)						keyframe1 = this->_keyframes->__get((i + 1)).StaticCast<  ::flxanimate::animate::FlxKeyFrame >();
HXLINE( 327)						if (::hx::IsNull( keyframe1 )) {
HXLINE( 328)							goto _hx_goto_16;
            						}
            					}
            					_hx_goto_16:;
HXLINE( 331)					this->_currFrame = keyframe1;
            				}
            			}
HXLINE( 333)			if (::hx::IsNotNull( this->onFrameUpdate )) {
HXLINE( 334)				this->onFrameUpdate(prevFrame,this->_currFrame);
            			}
            		}
            		else {
HXLINE( 337)			this->_currFrame = this->get(frame);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxLayer_obj,_setCurFrame,(void))

void FlxLayer_obj::updateBitmaps( ::openfl::geom::Rectangle rect){
            	HX_GC_STACKFRAME(&_hx_pos_4774fa9426d84557_343_updateBitmaps)
HXDLIN( 343)		bool _hx_tmp;
HXDLIN( 343)		if (::hx::IsNotNull( this->_filterFrame )) {
HXDLIN( 343)			if (!((rect->width > this->_filterFrame->parent->bitmap->width))) {
HXDLIN( 343)				_hx_tmp = (rect->height > this->_filterFrame->parent->bitmap->height);
            			}
            			else {
HXDLIN( 343)				_hx_tmp = true;
            			}
            		}
            		else {
HXDLIN( 343)			_hx_tmp = true;
            		}
HXDLIN( 343)		if (_hx_tmp) {
HXLINE( 345)			Float wid;
HXDLIN( 345)			bool wid1;
HXDLIN( 345)			if (::hx::IsNotNull( this->_filterFrame )) {
HXLINE( 345)				wid1 = (rect->width > this->_filterFrame->parent->width);
            			}
            			else {
HXLINE( 345)				wid1 = true;
            			}
HXDLIN( 345)			if (wid1) {
HXLINE( 345)				wid = (rect->width * ((Float)1.25));
            			}
            			else {
HXLINE( 345)				wid = ( (Float)(this->_filterFrame->parent->width) );
            			}
HXLINE( 346)			Float hei;
HXDLIN( 346)			bool hei1;
HXDLIN( 346)			if (::hx::IsNotNull( this->_filterFrame )) {
HXLINE( 346)				hei1 = (rect->height > this->_filterFrame->parent->height);
            			}
            			else {
HXLINE( 346)				hei1 = true;
            			}
HXDLIN( 346)			if (hei1) {
HXLINE( 346)				hei = (rect->height * ((Float)1.25));
            			}
            			else {
HXLINE( 346)				hei = ( (Float)(this->_filterFrame->parent->height) );
            			}
HXLINE( 347)			if (::hx::IsNotNull( this->_filterFrame )) {
HXLINE( 349)				this->_filterFrame->parent->destroy();
HXLINE( 350)				 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::bitmap;
HXDLIN( 350)				 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _this = ::flixel::FlxG_obj::bitmap;
HXDLIN( 350)				::String key = ::flixel::FlxG_obj::bitmap->findKeyForBitmap(this->_bmp1);
HXDLIN( 350)				_hx_tmp1->remove(( ( ::flixel::graphics::FlxGraphic)(_this->_cache->get(key)) ));
HXLINE( 351)				 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::bitmap;
HXDLIN( 351)				 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _this1 = ::flixel::FlxG_obj::bitmap;
HXDLIN( 351)				::String key1 = ::flixel::FlxG_obj::bitmap->findKeyForBitmap(this->_bmp2);
HXDLIN( 351)				_hx_tmp2->remove(( ( ::flixel::graphics::FlxGraphic)(_this1->_cache->get(key1)) ));
            			}
            			else {
HXLINE( 356)				this->_filterFrame =  ::flixel::graphics::frames::FlxFrame_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
            			}
HXLINE( 358)			 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::bitmap;
HXDLIN( 358)			this->_filterFrame->parent = _hx_tmp3->add( ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::Math_obj::ceil(wid),::Math_obj::ceil(hei),null(),0),true,null());
HXLINE( 359)			this->_bmp1 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::Math_obj::ceil(wid),::Math_obj::ceil(hei),null(),0);
HXLINE( 360)			::flixel::graphics::FlxGraphic_obj::fromBitmapData(this->_bmp1,true,null(),null());
HXLINE( 361)			this->_bmp2 =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::Math_obj::ceil(wid),::Math_obj::ceil(hei),null(),0);
HXLINE( 362)			::flixel::graphics::FlxGraphic_obj::fromBitmapData(this->_bmp2,true,null(),null());
HXLINE( 363)			 ::flixel::graphics::frames::FlxFrame _hx_tmp4 = this->_filterFrame;
HXDLIN( 363)			_hx_tmp4->set_frame( ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,wid,hei));
HXLINE( 364)			{
HXLINE( 364)				 ::flixel::math::FlxBasePoint this1 = this->_filterFrame->sourceSize;
HXDLIN( 364)				Float y = rect->height;
HXDLIN( 364)				this1->set_x(rect->width);
HXDLIN( 364)				this1->set_y(y);
            			}
HXLINE( 366)			this->_filterFrame->cacheFrameMatrix();
            		}
            		else {
HXLINE( 370)			this->_bmp1->fillRect(this->_bmp1->rect,0);
HXLINE( 371)			this->_filterFrame->parent->bitmap->fillRect(this->_filterFrame->parent->bitmap->rect,0);
HXLINE( 372)			this->_bmp2->fillRect(this->_bmp2->rect,0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxLayer_obj,updateBitmaps,(void))

 ::flxanimate::animate::FlxLayer FlxLayer_obj::fromJSON( ::Dynamic layer){
            	HX_GC_STACKFRAME(&_hx_pos_4774fa9426d84557_378_fromJSON)
HXLINE( 379)		if (::hx::IsNull( layer )) {
HXLINE( 379)			return null();
            		}
HXLINE( 381)		 ::flxanimate::animate::FlxLayer l =  ::flxanimate::animate::FlxLayer_obj::__alloc( HX_CTX ,::flxanimate::data::_AnimationData::Layers_Impl__obj::get_LN(layer),null());
HXLINE( 382)		bool _hx_tmp;
HXDLIN( 382)		if (::hx::IsNull( ::flxanimate::data::_AnimationData::Layers_Impl__obj::get_LT(layer) )) {
HXLINE( 382)			_hx_tmp = ::hx::IsNotNull( ::flxanimate::data::_AnimationData::Layers_Impl__obj::get_Clpb(layer) );
            		}
            		else {
HXLINE( 382)			_hx_tmp = true;
            		}
HXDLIN( 382)		if (_hx_tmp) {
HXLINE( 384)			 ::flxanimate::data::LayerType _hx_tmp1;
HXDLIN( 384)			if (::hx::IsNotNull( ::flxanimate::data::_AnimationData::Layers_Impl__obj::get_LT(layer) )) {
HXLINE( 384)				_hx_tmp1 = ::flxanimate::data::LayerType_obj::Clipper_dyn();
            			}
            			else {
HXLINE( 384)				_hx_tmp1 = ::flxanimate::data::LayerType_obj::Clipped(::flxanimate::data::_AnimationData::Layers_Impl__obj::get_Clpb(layer));
            			}
HXDLIN( 384)			l->set_type(_hx_tmp1);
            		}
HXLINE( 386)		if (::hx::IsNotNull( ::flxanimate::data::_AnimationData::Layers_Impl__obj::get_FR(layer) )) {
HXLINE( 388)			int _g = 0;
HXDLIN( 388)			::Array< ::Dynamic> _g1 = ::flxanimate::data::_AnimationData::Layers_Impl__obj::get_FR(layer);
HXDLIN( 388)			while((_g < _g1->length)){
HXLINE( 388)				 ::Dynamic frame = _g1->__get(_g);
HXDLIN( 388)				_g = (_g + 1);
HXLINE( 390)				l->add(::flxanimate::animate::FlxKeyFrame_obj::fromJSON(frame));
            			}
            		}
HXLINE( 394)		return l;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxLayer_obj,fromJSON,return )


::hx::ObjectPtr< FlxLayer_obj > FlxLayer_obj::__new(::String name,::Array< ::Dynamic> keyframes) {
	::hx::ObjectPtr< FlxLayer_obj > __this = new FlxLayer_obj();
	__this->__construct(name,keyframes);
	return __this;
}

::hx::ObjectPtr< FlxLayer_obj > FlxLayer_obj::__alloc(::hx::Ctx *_hx_ctx,::String name,::Array< ::Dynamic> keyframes) {
	FlxLayer_obj *__this = (FlxLayer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxLayer_obj), true, "flxanimate.animate.FlxLayer"));
	*(void **)__this = FlxLayer_obj::_hx_vtable;
	__this->__construct(name,keyframes);
	return __this;
}

FlxLayer_obj::FlxLayer_obj()
{
}

void FlxLayer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxLayer);
	HX_MARK_MEMBER_NAME(_filterCamera,"_filterCamera");
	HX_MARK_MEMBER_NAME(onFrameUpdate,"onFrameUpdate");
	HX_MARK_MEMBER_NAME(_mcMap,"_mcMap");
	HX_MARK_MEMBER_NAME(_filterFrame,"_filterFrame");
	HX_MARK_MEMBER_NAME(_bmp1,"_bmp1");
	HX_MARK_MEMBER_NAME(_bmp2,"_bmp2");
	HX_MARK_MEMBER_NAME(_filterMatrix,"_filterMatrix");
	HX_MARK_MEMBER_NAME(_renderable,"_renderable");
	HX_MARK_MEMBER_NAME(_parent,"_parent");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(_labels,"_labels");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(_keyframes,"_keyframes");
	HX_MARK_MEMBER_NAME(_correctClip,"_correctClip");
	HX_MARK_MEMBER_NAME(_clipper,"_clipper");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(_currFrame,"_currFrame");
	 ::flixel::FlxObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxLayer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_filterCamera,"_filterCamera");
	HX_VISIT_MEMBER_NAME(onFrameUpdate,"onFrameUpdate");
	HX_VISIT_MEMBER_NAME(_mcMap,"_mcMap");
	HX_VISIT_MEMBER_NAME(_filterFrame,"_filterFrame");
	HX_VISIT_MEMBER_NAME(_bmp1,"_bmp1");
	HX_VISIT_MEMBER_NAME(_bmp2,"_bmp2");
	HX_VISIT_MEMBER_NAME(_filterMatrix,"_filterMatrix");
	HX_VISIT_MEMBER_NAME(_renderable,"_renderable");
	HX_VISIT_MEMBER_NAME(_parent,"_parent");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(_labels,"_labels");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(_keyframes,"_keyframes");
	HX_VISIT_MEMBER_NAME(_correctClip,"_correctClip");
	HX_VISIT_MEMBER_NAME(_clipper,"_clipper");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(_currFrame,"_currFrame");
	 ::flixel::FlxObject_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxLayer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"hide") ) { return ::hx::Val( hide_dyn() ); }
		if (HX_FIELD_EQ(inName,"show") ) { return ::hx::Val( show_dyn() ); }
		if (HX_FIELD_EQ(inName,"_get") ) { return ::hx::Val( _get_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_bmp1") ) { return ::hx::Val( _bmp1 ); }
		if (HX_FIELD_EQ(inName,"_bmp2") ) { return ::hx::Val( _bmp2 ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_mcMap") ) { return ::hx::Val( _mcMap ); }
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_length() : length ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return ::hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"rename") ) { return ::hx::Val( rename_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_parent") ) { return ::hx::Val( _parent ); }
		if (HX_FIELD_EQ(inName,"_labels") ) { return ::hx::Val( _labels ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_clipper") ) { return ::hx::Val( _clipper ); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return ::hx::Val( set_type_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_keyframes") ) { return ::hx::Val( _keyframes ); }
		if (HX_FIELD_EQ(inName,"_currFrame") ) { return ::hx::Val( _currFrame ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_renderable") ) { return ::hx::Val( _renderable ); }
		if (HX_FIELD_EQ(inName,"set__parent") ) { return ::hx::Val( set__parent_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_filterFrame") ) { return ::hx::Val( _filterFrame ); }
		if (HX_FIELD_EQ(inName,"_correctClip") ) { return ::hx::Val( _correctClip ); }
		if (HX_FIELD_EQ(inName,"updateRender") ) { return ::hx::Val( updateRender_dyn() ); }
		if (HX_FIELD_EQ(inName,"_setCurFrame") ) { return ::hx::Val( _setCurFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_filterCamera") ) { return ::hx::Val( _filterCamera ); }
		if (HX_FIELD_EQ(inName,"onFrameUpdate") ) { return ::hx::Val( onFrameUpdate ); }
		if (HX_FIELD_EQ(inName,"_filterMatrix") ) { return ::hx::Val( _filterMatrix ); }
		if (HX_FIELD_EQ(inName,"updateBitmaps") ) { return ::hx::Val( updateBitmaps_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxLayer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromJSON") ) { outValue = fromJSON_dyn(); return true; }
	}
	return false;
}

::hx::Val FlxLayer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_type(inValue.Cast<  ::flxanimate::data::LayerType >()) );type=inValue.Cast<  ::flxanimate::data::LayerType >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_bmp1") ) { _bmp1=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_bmp2") ) { _bmp2=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_mcMap") ) { _mcMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_parent") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set__parent(inValue.Cast<  ::flxanimate::animate::FlxTimeline >()) );_parent=inValue.Cast<  ::flxanimate::animate::FlxTimeline >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_labels") ) { _labels=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_clipper") ) { _clipper=inValue.Cast<  ::flxanimate::animate::FlxLayer >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_keyframes") ) { _keyframes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_currFrame") ) { _currFrame=inValue.Cast<  ::flxanimate::animate::FlxKeyFrame >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_renderable") ) { _renderable=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_filterFrame") ) { _filterFrame=inValue.Cast<  ::flixel::graphics::frames::FlxFrame >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_correctClip") ) { _correctClip=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_filterCamera") ) { _filterCamera=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onFrameUpdate") ) { onFrameUpdate=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_filterMatrix") ) { _filterMatrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxLayer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_filterCamera",5c,07,53,a6));
	outFields->push(HX_("_mcMap",27,64,3f,00));
	outFields->push(HX_("_filterFrame",56,7b,3f,1c));
	outFields->push(HX_("_bmp1",2b,1c,2b,f4));
	outFields->push(HX_("_bmp2",2c,1c,2b,f4));
	outFields->push(HX_("_filterMatrix",f8,f6,8e,aa));
	outFields->push(HX_("_renderable",0f,09,23,c5));
	outFields->push(HX_("_parent",c9,16,f5,5b));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("_labels",9e,39,f4,b7));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("_keyframes",46,36,9b,6b));
	outFields->push(HX_("_correctClip",5b,2e,b2,f8));
	outFields->push(HX_("_clipper",8e,61,80,3c));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("_currFrame",9c,2b,fb,c5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxLayer_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(FlxLayer_obj,_filterCamera),HX_("_filterCamera",5c,07,53,a6)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxLayer_obj,onFrameUpdate),HX_("onFrameUpdate",37,6f,37,c8)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxLayer_obj,_mcMap),HX_("_mcMap",27,64,3f,00)},
	{::hx::fsObject /*  ::flixel::graphics::frames::FlxFrame */ ,(int)offsetof(FlxLayer_obj,_filterFrame),HX_("_filterFrame",56,7b,3f,1c)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(FlxLayer_obj,_bmp1),HX_("_bmp1",2b,1c,2b,f4)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(FlxLayer_obj,_bmp2),HX_("_bmp2",2c,1c,2b,f4)},
	{::hx::fsObject /*  ::flixel::math::FlxMatrix */ ,(int)offsetof(FlxLayer_obj,_filterMatrix),HX_("_filterMatrix",f8,f6,8e,aa)},
	{::hx::fsBool,(int)offsetof(FlxLayer_obj,_renderable),HX_("_renderable",0f,09,23,c5)},
	{::hx::fsObject /*  ::flxanimate::animate::FlxTimeline */ ,(int)offsetof(FlxLayer_obj,_parent),HX_("_parent",c9,16,f5,5b)},
	{::hx::fsString,(int)offsetof(FlxLayer_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FlxLayer_obj,_labels),HX_("_labels",9e,39,f4,b7)},
	{::hx::fsObject /*  ::flxanimate::data::LayerType */ ,(int)offsetof(FlxLayer_obj,type),HX_("type",ba,f2,08,4d)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxLayer_obj,_keyframes),HX_("_keyframes",46,36,9b,6b)},
	{::hx::fsBool,(int)offsetof(FlxLayer_obj,_correctClip),HX_("_correctClip",5b,2e,b2,f8)},
	{::hx::fsObject /*  ::flxanimate::animate::FlxLayer */ ,(int)offsetof(FlxLayer_obj,_clipper),HX_("_clipper",8e,61,80,3c)},
	{::hx::fsInt,(int)offsetof(FlxLayer_obj,length),HX_("length",e6,94,07,9f)},
	{::hx::fsObject /*  ::flxanimate::animate::FlxKeyFrame */ ,(int)offsetof(FlxLayer_obj,_currFrame),HX_("_currFrame",9c,2b,fb,c5)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxLayer_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxLayer_obj_sMemberFields[] = {
	HX_("_filterCamera",5c,07,53,a6),
	HX_("onFrameUpdate",37,6f,37,c8),
	HX_("_mcMap",27,64,3f,00),
	HX_("_filterFrame",56,7b,3f,1c),
	HX_("_bmp1",2b,1c,2b,f4),
	HX_("_bmp2",2c,1c,2b,f4),
	HX_("_filterMatrix",f8,f6,8e,aa),
	HX_("_renderable",0f,09,23,c5),
	HX_("_parent",c9,16,f5,5b),
	HX_("name",4b,72,ff,48),
	HX_("_labels",9e,39,f4,b7),
	HX_("type",ba,f2,08,4d),
	HX_("_keyframes",46,36,9b,6b),
	HX_("_correctClip",5b,2e,b2,f8),
	HX_("_clipper",8e,61,80,3c),
	HX_("length",e6,94,07,9f),
	HX_("_currFrame",9c,2b,fb,c5),
	HX_("hide",c2,34,0e,45),
	HX_("show",fd,d4,52,4c),
	HX_("destroy",fa,2c,86,24),
	HX_("updateRender",3f,12,ed,04),
	HX_("get",96,80,4e,00),
	HX_("_get",97,c5,19,3f),
	HX_("add",21,f2,49,00),
	HX_("remove",44,9c,88,04),
	HX_("rename",7e,2b,27,05),
	HX_("set__parent",ec,7d,5c,ec),
	HX_("get_length",af,04,8f,8f),
	HX_("set_type",b7,07,21,7b),
	HX_("_setCurFrame",50,ea,9b,e4),
	HX_("updateBitmaps",9b,46,f0,c4),
	::String(null()) };

::hx::Class FlxLayer_obj::__mClass;

static ::String FlxLayer_obj_sStaticFields[] = {
	HX_("fromJSON",92,ac,1b,a4),
	::String(null())
};

void FlxLayer_obj::__register()
{
	FlxLayer_obj _hx_dummy;
	FlxLayer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.animate.FlxLayer",6b,9a,11,f9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxLayer_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxLayer_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxLayer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxLayer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxLayer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxLayer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flxanimate
} // end namespace animate
