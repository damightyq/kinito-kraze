// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flxanimate_format_PropertyList
#include <flxanimate/format/PropertyList.h>
#endif
#ifndef INCLUDED_flxanimate_frames_FlxAnimateFrames
#include <flxanimate/frames/FlxAnimateFrames.h>
#endif
#ifndef INCLUDED_haxe_ds_List
#include <haxe/ds/List.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_AttribAccess_Impl_
#include <haxe/xml/_Access/AttribAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_HasAttribAccess_Impl_
#include <haxe/xml/_Access/HasAttribAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_NodeListAccess_Impl_
#include <haxe/xml/_Access/NodeListAccess_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_24_new,"flxanimate.frames.FlxAnimateFrames","new",0x9b6c2230,"flxanimate.frames.FlxAnimateFrames.new","flxanimate/frames/FlxAnimateFrames.hx",24,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_42_fromTextureAtlas,"flxanimate.frames.FlxAnimateFrames","fromTextureAtlas",0x13062f2a,"flxanimate.frames.FlxAnimateFrames.fromTextureAtlas","flxanimate/frames/FlxAnimateFrames.hx",42,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_91_fromSpriteMap,"flxanimate.frames.FlxAnimateFrames","fromSpriteMap",0x47ac6a9d,"flxanimate.frames.FlxAnimateFrames.fromSpriteMap","flxanimate/frames/FlxAnimateFrames.hx",91,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_152_fromSparrow,"flxanimate.frames.FlxAnimateFrames","fromSparrow",0x6d634192,"flxanimate.frames.FlxAnimateFrames.fromSparrow","flxanimate/frames/FlxAnimateFrames.hx",152,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_184_fromSparrowDirect,"flxanimate.frames.FlxAnimateFrames","fromSparrowDirect",0xb5067a5b,"flxanimate.frames.FlxAnimateFrames.fromSparrowDirect","flxanimate/frames/FlxAnimateFrames.hx",184,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_233_fromJson,"flxanimate.frames.FlxAnimateFrames","fromJson",0xe4912ce2,"flxanimate.frames.FlxAnimateFrames.fromJson","flxanimate/frames/FlxAnimateFrames.hx",233,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_254_fromSequence,"flxanimate.frames.FlxAnimateFrames","fromSequence",0x975aedfb,"flxanimate.frames.FlxAnimateFrames.fromSequence","flxanimate/frames/FlxAnimateFrames.hx",254,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_283_fromEdgeAnimate,"flxanimate.frames.FlxAnimateFrames","fromEdgeAnimate",0x4e4cac6a,"flxanimate.frames.FlxAnimateFrames.fromEdgeAnimate","flxanimate/frames/FlxAnimateFrames.hx",283,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_294_fromStarling,"flxanimate.frames.FlxAnimateFrames","fromStarling",0xebd01c82,"flxanimate.frames.FlxAnimateFrames.fromStarling","flxanimate/frames/FlxAnimateFrames.hx",294,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_305_fromCocos2D,"flxanimate.frames.FlxAnimateFrames","fromCocos2D",0x92828b33,"flxanimate.frames.FlxAnimateFrames.fromCocos2D","flxanimate/frames/FlxAnimateFrames.hx",305,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_363_fromEaselJS,"flxanimate.frames.FlxAnimateFrames","fromEaselJS",0x7c76568d,"flxanimate.frames.FlxAnimateFrames.fromEaselJS","flxanimate/frames/FlxAnimateFrames.hx",363,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_404_sliceFrame,"flxanimate.frames.FlxAnimateFrames","sliceFrame",0xcc86c2ab,"flxanimate.frames.FlxAnimateFrames.sliceFrame","flxanimate/frames/FlxAnimateFrames.hx",404,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_418_findImage,"flxanimate.frames.FlxAnimateFrames","findImage",0xbd7bde32,"flxanimate.frames.FlxAnimateFrames.findImage","flxanimate/frames/FlxAnimateFrames.hx",418,0x11169520)
HX_LOCAL_STACK_FRAME(_hx_pos_0a2ec04d5fc2238b_29_boot,"flxanimate.frames.FlxAnimateFrames","boot",0x5b4ac862,"flxanimate.frames.FlxAnimateFrames.boot","flxanimate/frames/FlxAnimateFrames.hx",29,0x11169520)
namespace flxanimate{
namespace frames{

void FlxAnimateFrames_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_24_new)
HXLINE(  25)		super::__construct(null(),null());
HXLINE(  26)		this->parents = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic FlxAnimateFrames_obj::__CreateEmpty() { return new FlxAnimateFrames_obj; }

void *FlxAnimateFrames_obj::_hx_vtable = 0;

Dynamic FlxAnimateFrames_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxAnimateFrames_obj > _hx_result = new FlxAnimateFrames_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxAnimateFrames_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x42bbdcd2) {
		if (inClassId<=(int)0x1ee6bdec) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1ee6bdec;
		} else {
			return inClassId==(int)0x42bbdcd2;
		}
	} else {
		return inClassId==(int)0x7907b929;
	}
}

 ::Dynamic FlxAnimateFrames_obj::data;

 ::haxe::ds::List FlxAnimateFrames_obj::zip;

 ::flxanimate::frames::FlxAnimateFrames FlxAnimateFrames_obj::fromTextureAtlas(::String Path){
            	HX_GC_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_42_fromTextureAtlas)
HXLINE(  43)		 ::flxanimate::frames::FlxAnimateFrames frames =  ::flxanimate::frames::FlxAnimateFrames_obj::__alloc( HX_CTX );
HXLINE(  45)		::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN(  45)		{
HXLINE(  45)			int _g1 = 0;
HXDLIN(  45)			::Array< ::String > _g2 = ::openfl::utils::Assets_obj::list(HX_("TEXT",ad,94,ba,37));
HXDLIN(  45)			while((_g1 < _g2->length)){
HXLINE(  45)				::String v = _g2->__get(_g1);
HXDLIN(  45)				_g1 = (_g1 + 1);
HXDLIN(  45)				if (::StringTools_obj::startsWith(v,((HX_("",00,00,00,00) + Path) + HX_("/sprite",74,a9,06,66)))) {
HXLINE(  45)					_g->push(v);
            				}
            			}
            		}
HXDLIN(  45)		::Array< ::String > texts = _g;
HXLINE(  47)		::Array< ::String > texts1 = ::Array_obj< ::String >::__new(0);
HXLINE(  48)		bool isDone = false;
HXLINE(  50)		if (::openfl::utils::Assets_obj::exists(((HX_("",00,00,00,00) + Path) + HX_("/spritemap.json",ae,2e,a7,76)),null())) {
HXLINE(  52)			texts1->push(((HX_("",00,00,00,00) + Path) + HX_("/spritemap.json",ae,2e,a7,76)));
HXLINE(  53)			isDone = true;
            		}
HXLINE(  56)		int i = 1;
HXLINE(  57)		while(!(isDone)){
HXLINE(  59)			if (::openfl::utils::Assets_obj::exists(((((HX_("",00,00,00,00) + Path) + HX_("/spritemap",a8,c1,c8,a3)) + i) + HX_(".json",56,f1,d6,c2)),null())) {
HXLINE(  60)				texts1->push(((((HX_("",00,00,00,00) + Path) + HX_("/spritemap",a8,c1,c8,a3)) + i) + HX_(".json",56,f1,d6,c2)));
            			}
            			else {
HXLINE(  62)				isDone = true;
            			}
HXLINE(  64)			i = (i + 1);
            		}
HXLINE(  67)		{
HXLINE(  67)			int _g3 = 0;
HXDLIN(  67)			while((_g3 < texts1->length)){
HXLINE(  67)				::String text = texts1->__get(_g3);
HXDLIN(  67)				_g3 = (_g3 + 1);
HXLINE(  69)				 ::flixel::graphics::frames::FlxAtlasFrames spritemapFrames = ::flxanimate::frames::FlxAnimateFrames_obj::fromSpriteMap(text,null());
HXLINE(  71)				if (::hx::IsNotNull( spritemapFrames )) {
HXLINE(  72)					frames->addAtlas(spritemapFrames,null());
            				}
            			}
            		}
HXLINE(  75)		if (::hx::IsPointerEq( frames->frames,::Array_obj< ::Dynamic>::__new(0) )) {
HXLINE(  77)			::flixel::FlxG_obj::log->advanced(HX_("the Frames parsing couldn't parse any of the frames, it's completely empty! \n Maybe you misspelled the Path?",ff,0a,77,40),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
HXLINE(  78)			return null();
            		}
HXLINE(  81)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxAnimateFrames_obj,fromTextureAtlas,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAnimateFrames_obj::fromSpriteMap( ::Dynamic Path, ::Dynamic Image){
            	HX_GC_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_91_fromSpriteMap)
HXLINE(  92)		if (::hx::IsNull( Path )) {
HXLINE(  93)			return null();
            		}
HXLINE(  95)		 ::Dynamic json = null();
HXLINE(  97)		if (::Std_obj::isOfType(Path,::hx::ClassOf< ::String >())) {
HXLINE(  99)			::String str = ::hx::TCast< ::String >::cast(Path).split(HX_("\\",5c,00,00,00))->join(HX_("/",2f,00,00,00));
HXLINE( 100)			::String text;
HXDLIN( 100)			if ((str.indexOf(HX_("/",2f,00,00,00),null()) != -1)) {
HXLINE( 100)				text = ::openfl::utils::Assets_obj::getText(str);
            			}
            			else {
HXLINE( 100)				text = str;
            			}
HXLINE( 101)			json =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,text.split(::String::fromCharCode(65279))->join(HX_("",00,00,00,00)))->doParse();
            		}
            		else {
HXLINE( 104)			json = Path;
            		}
HXLINE( 106)		if (::hx::IsNull( json )) {
HXLINE( 107)			return null();
            		}
HXLINE( 109)		::String f = ::haxe::io::Path_obj::addTrailingSlash(::haxe::io::Path_obj::directory(( (::String)(Path) )));
HXDLIN( 109)		 ::Dynamic f1 = ::flxanimate::frames::FlxAnimateFrames_obj::findImage(Image,( (::String)((f +  ::Dynamic(json->__Field(HX_("meta",c5,4a,59,48),::hx::paccDynamic))->__Field(HX_("image",5b,1f,69,bd),::hx::paccDynamic))) ));
HXLINE( 111)		if (::hx::IsEq( f1->__Field(HX_("crash",e7,bf,4f,4c),::hx::paccDynamic),true )) {
HXLINE( 112)			return null();
            		}
            		else {
HXLINE( 113)			if (::hx::IsNotNull( f1->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic) )) {
HXLINE( 114)				return ( ( ::flixel::graphics::frames::FlxAtlasFrames)(f1->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic)) );
            			}
            		}
HXLINE( 116)		 ::flixel::graphics::frames::FlxAtlasFrames frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__alloc( HX_CTX ,( ( ::flixel::graphics::FlxGraphic)(f1->__Field(HX_("graphic",a8,5a,07,74),::hx::paccDynamic)) ),null());
HXLINE( 118)		{
HXLINE( 118)			int _g = 0;
HXDLIN( 118)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)( ::Dynamic(json->__Field(HX_("ATLAS",2b,85,cb,a4),::hx::paccDynamic))->__Field(HX_("SPRITES",ae,7c,5e,df),::hx::paccDynamic)) );
HXDLIN( 118)			while((_g < _g1->length)){
HXLINE( 118)				 ::Dynamic sprite = _g1->__get(_g);
HXDLIN( 118)				_g = (_g + 1);
HXLINE( 120)				 ::Dynamic limb = sprite->__Field(HX_("SPRITE",05,88,18,76),::hx::paccDynamic);
HXLINE( 121)				Float X = ( (Float)(limb->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXDLIN( 121)				Float Y = ( (Float)(limb->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXDLIN( 121)				Float Width = ( (Float)(limb->__Field(HX_("w",77,00,00,00),::hx::paccDynamic)) );
HXDLIN( 121)				Float Height = ( (Float)(limb->__Field(HX_("h",68,00,00,00),::hx::paccDynamic)) );
HXDLIN( 121)				 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 121)				_this->x = X;
HXDLIN( 121)				_this->y = Y;
HXDLIN( 121)				_this->width = Width;
HXDLIN( 121)				_this->height = Height;
HXDLIN( 121)				 ::flixel::math::FlxRect rect = _this;
HXDLIN( 121)				rect->_inPool = false;
HXDLIN( 121)				 ::flixel::math::FlxRect rect1 = rect;
HXLINE( 122)				if (( (bool)(limb->__Field(HX_("rotated",a9,49,1d,f1),::hx::paccDynamic)) )) {
HXLINE( 123)					Float Height1 = rect1->width;
HXDLIN( 123)					rect1->width = rect1->height;
HXDLIN( 123)					rect1->height = Height1;
            				}
HXLINE( 125)				::flxanimate::frames::FlxAnimateFrames_obj::sliceFrame(( (::String)(limb->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ),( (bool)(limb->__Field(HX_("rotated",a9,49,1d,f1),::hx::paccDynamic)) ),rect1,null(),null(),frames);
            			}
            		}
HXLINE( 128)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnimateFrames_obj,fromSpriteMap,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAnimateFrames_obj::fromSparrow( ::Dynamic Path, ::Dynamic Image){
            	HX_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_152_fromSparrow)
HXLINE( 153)		bool _hx_tmp;
HXDLIN( 153)		if (::Std_obj::isOfType(Path,::hx::ClassOf< ::String >())) {
HXLINE( 153)			_hx_tmp = !(::openfl::utils::Assets_obj::exists(( (::String)(Path) ),null()));
            		}
            		else {
HXLINE( 153)			_hx_tmp = false;
            		}
HXDLIN( 153)		if (_hx_tmp) {
HXLINE( 154)			return null();
            		}
HXLINE( 156)		 ::Xml data;
HXDLIN( 156)		if (::Std_obj::isOfType(Path,::hx::ClassOf< ::String >())) {
HXLINE( 156)			data = ::Xml_obj::parse(::openfl::utils::Assets_obj::getText(( (::String)(Path) )))->firstElement();
            		}
            		else {
HXLINE( 156)			data = ( ( ::Xml)(Path->__Field(HX_("firstElement",6c,c4,9c,2f),::hx::paccDynamic)()) );
            		}
HXLINE( 157)		::String f = ::haxe::io::Path_obj::addTrailingSlash(::haxe::io::Path_obj::directory(( (::String)(Path) )));
HXDLIN( 157)		 ::Dynamic f1 = ::flxanimate::frames::FlxAnimateFrames_obj::findImage(Image,(f + data->get(HX_("imagePath",a0,7a,86,2c))));
HXLINE( 159)		if (::hx::IsEq( f1->__Field(HX_("crash",e7,bf,4f,4c),::hx::paccDynamic),true )) {
HXLINE( 160)			return null();
            		}
            		else {
HXLINE( 161)			if (::hx::IsNotNull( f1->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic) )) {
HXLINE( 162)				return ( ( ::flixel::graphics::frames::FlxAtlasFrames)(f1->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic)) );
            			}
            		}
HXLINE( 164)		{
HXLINE( 164)			 ::Dynamic node = data->elements();
HXDLIN( 164)			while(( (bool)(node->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 164)				 ::Xml node1 = ( ( ::Xml)(node->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 166)				if (node1->exists(HX_("w",77,00,00,00))) {
HXLINE( 168)					node1->set(HX_("width",06,b6,62,ca),node1->get(HX_("w",77,00,00,00)));
HXLINE( 169)					node1->remove(HX_("w",77,00,00,00));
            				}
HXLINE( 171)				if (node1->exists(HX_("h",68,00,00,00))) {
HXLINE( 173)					node1->set(HX_("height",e7,07,4c,02),node1->get(HX_("h",68,00,00,00)));
HXLINE( 174)					node1->remove(HX_("h",68,00,00,00));
            				}
            			}
            		}
HXLINE( 178)		return ::flxanimate::frames::FlxAnimateFrames_obj::fromSparrowDirect(( ( ::flixel::graphics::FlxGraphic)(f1->__Field(HX_("graphic",a8,5a,07,74),::hx::paccDynamic)) ),data);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnimateFrames_obj,fromSparrow,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAnimateFrames_obj::fromSparrowDirect( ::flixel::graphics::FlxGraphic source, ::Xml xml){
            	HX_GC_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_184_fromSparrowDirect)
HXLINE( 185)		 ::flixel::graphics::frames::FlxAtlasFrames frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__alloc( HX_CTX ,source,null());
HXLINE( 187)		bool _hx_tmp;
HXDLIN( 187)		if ((xml->nodeType != ::Xml_obj::Document)) {
HXLINE( 187)			_hx_tmp = (xml->nodeType != ::Xml_obj::Element);
            		}
            		else {
HXLINE( 187)			_hx_tmp = false;
            		}
HXDLIN( 187)		if (_hx_tmp) {
HXLINE( 187)			HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(xml->nodeType)));
            		}
HXDLIN( 187)		 ::Xml data = xml;
HXLINE( 189)		{
HXLINE( 189)			int _g = 0;
HXDLIN( 189)			::Array< ::Dynamic> _g1 = ::haxe::xml::_Access::NodeListAccess_Impl__obj::resolve(data,HX_("SubTexture",5b,7b,fb,11));
HXDLIN( 189)			while((_g < _g1->length)){
HXLINE( 189)				 ::Xml texture = _g1->__get(_g).StaticCast<  ::Xml >();
HXDLIN( 189)				_g = (_g + 1);
HXLINE( 191)				::String name = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("name",4b,72,ff,48));
HXLINE( 192)				bool trimmed = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(texture,HX_("frameX",8b,af,85,ac));
HXLINE( 193)				bool rotated;
HXDLIN( 193)				if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(texture,HX_("rotated",a9,49,1d,f1))) {
HXLINE( 193)					rotated = (::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("rotated",a9,49,1d,f1)) == HX_("true",4e,a7,03,4d));
            				}
            				else {
HXLINE( 193)					rotated = false;
            				}
HXLINE( 194)				bool flipX;
HXDLIN( 194)				if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(texture,HX_("flipX",0b,45,92,02))) {
HXLINE( 194)					flipX = (::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("flipX",0b,45,92,02)) == HX_("true",4e,a7,03,4d));
            				}
            				else {
HXLINE( 194)					flipX = false;
            				}
HXLINE( 195)				bool flipY;
HXDLIN( 195)				if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(texture,HX_("flipY",0c,45,92,02))) {
HXLINE( 195)					flipY = (::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("flipY",0c,45,92,02)) == HX_("true",4e,a7,03,4d));
            				}
            				else {
HXLINE( 195)					flipY = false;
            				}
HXLINE( 196)				Float pivotX;
HXDLIN( 196)				if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(texture,HX_("pivotX",56,1f,5f,8b))) {
HXLINE( 196)					pivotX = ::Std_obj::parseFloat(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("pivotX",56,1f,5f,8b)));
            				}
            				else {
HXLINE( 196)					pivotX = ( (Float)(0) );
            				}
HXLINE( 197)				Float pivotY;
HXDLIN( 197)				if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(texture,HX_("pivotY",57,1f,5f,8b))) {
HXLINE( 197)					pivotY = ::Std_obj::parseFloat(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("pivotY",57,1f,5f,8b)));
            				}
            				else {
HXLINE( 197)					pivotY = ( (Float)(0) );
            				}
HXLINE( 198)				Float X = ::Std_obj::parseFloat(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("x",78,00,00,00)));
HXDLIN( 198)				Float Y = ::Std_obj::parseFloat(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("y",79,00,00,00)));
HXDLIN( 198)				Float Width = ::Std_obj::parseFloat(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("width",06,b6,62,ca)));
HXDLIN( 198)				Float Height = ::Std_obj::parseFloat(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("height",e7,07,4c,02)));
HXDLIN( 198)				 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 198)				_this->x = X;
HXDLIN( 198)				_this->y = Y;
HXDLIN( 198)				_this->width = Width;
HXDLIN( 198)				_this->height = Height;
HXDLIN( 198)				 ::flixel::math::FlxRect rect = _this;
HXDLIN( 198)				rect->_inPool = false;
HXDLIN( 198)				 ::flixel::math::FlxRect rect1 = rect;
HXLINE( 201)				 ::openfl::geom::Rectangle size;
HXDLIN( 201)				if (trimmed) {
HXLINE( 203)					 ::Dynamic size1 = ::Std_obj::parseInt(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("frameX",8b,af,85,ac)));
HXDLIN( 203)					 ::Dynamic size2 = ::Std_obj::parseInt(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("frameY",8c,af,85,ac)));
HXDLIN( 203)					 ::Dynamic size3 = ::Std_obj::parseInt(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("frameWidth",99,ea,88,ad)));
HXLINE( 201)					size =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,size1,size2,size3,::Std_obj::parseInt(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(texture,HX_("frameHeight",f4,d3,93,e0))));
            				}
            				else {
HXLINE( 201)					size =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,rect1->width,rect1->height);
            				}
HXLINE( 211)				int angle;
HXDLIN( 211)				if (rotated) {
HXLINE( 211)					angle = -90;
            				}
            				else {
HXLINE( 211)					angle = 0;
            				}
HXLINE( 213)				Float x = -(size->get_left());
HXDLIN( 213)				Float y = -(size->get_top());
HXDLIN( 213)				 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 213)				point->_inPool = false;
HXDLIN( 213)				 ::flixel::math::FlxBasePoint offset = point;
HXLINE( 214)				Float x1 = size->width;
HXDLIN( 214)				Float y1 = size->height;
HXDLIN( 214)				 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x1,y1);
HXDLIN( 214)				point1->_inPool = false;
HXDLIN( 214)				 ::flixel::math::FlxBasePoint sourceSize = point1;
HXLINE( 216)				{
HXLINE( 216)					offset->set_x((offset->x - pivotX));
HXDLIN( 216)					offset->set_y((offset->y - pivotY));
            				}
HXLINE( 217)				bool _hx_tmp1;
HXDLIN( 217)				if (rotated) {
HXLINE( 217)					_hx_tmp1 = !(trimmed);
            				}
            				else {
HXLINE( 217)					_hx_tmp1 = false;
            				}
HXDLIN( 217)				if (_hx_tmp1) {
HXLINE( 218)					Float y2 = size->width;
HXDLIN( 218)					sourceSize->set_x(size->height);
HXDLIN( 218)					sourceSize->set_y(y2);
            				}
HXLINE( 220)				frames->addAtlasFrame(rect1,sourceSize,offset,name,angle,flipX,flipY,null());
            			}
            		}
HXLINE( 223)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnimateFrames_obj,fromSparrowDirect,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAnimateFrames_obj::fromJson( ::Dynamic Path, ::Dynamic Image){
            	HX_GC_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_233_fromJson)
HXLINE( 234)		bool _hx_tmp;
HXDLIN( 234)		if (::Std_obj::isOfType(Path,::hx::ClassOf< ::String >())) {
HXLINE( 234)			_hx_tmp = !(::openfl::utils::Assets_obj::exists(( (::String)(Path) ),null()));
            		}
            		else {
HXLINE( 234)			_hx_tmp = false;
            		}
HXDLIN( 234)		if (_hx_tmp) {
HXLINE( 235)			return null();
            		}
HXLINE( 236)		 ::Dynamic data;
HXDLIN( 236)		if (::Std_obj::isOfType(Path,::hx::ClassOf< ::String >())) {
HXLINE( 236)			data =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getText(( (::String)(Path) )))->doParse();
            		}
            		else {
HXLINE( 236)			data = Path;
            		}
HXLINE( 238)		::String f = ::haxe::io::Path_obj::addTrailingSlash(::haxe::io::Path_obj::directory(( (::String)(Path) )));
HXDLIN( 238)		 ::Dynamic f1 = ::flxanimate::frames::FlxAnimateFrames_obj::findImage(Image,( (::String)((f +  ::Dynamic(data->__Field(HX_("meta",c5,4a,59,48),::hx::paccDynamic))->__Field(HX_("image",5b,1f,69,bd),::hx::paccDynamic))) ));
HXLINE( 240)		if (::hx::IsEq( f1->__Field(HX_("crash",e7,bf,4f,4c),::hx::paccDynamic),true )) {
HXLINE( 241)			return null();
            		}
            		else {
HXLINE( 242)			if (::hx::IsNotNull( f1->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic) )) {
HXLINE( 243)				return ( ( ::flixel::graphics::frames::FlxAtlasFrames)(f1->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic)) );
            			}
            		}
HXLINE( 245)		return ::flixel::graphics::frames::FlxAtlasFrames_obj::fromTexturePackerJson(Image,data,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnimateFrames_obj,fromJson,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAnimateFrames_obj::fromSequence(::String Path,::String __o_ext){
            		::String ext = __o_ext;
            		if (::hx::IsNull(__o_ext)) ext = HX_("png",a9,5c,55,00);
            	HX_GC_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_254_fromSequence)
HXLINE( 255)		int i = 1;
HXLINE( 257)		::Array< ::Dynamic> imgs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 258)		while(::openfl::utils::Assets_obj::exists(((Path + ::Std_obj::string((10000 + i)).substring(1,null())) + (HX_(".",2e,00,00,00) + ext)),null())){
HXLINE( 260)			 ::flixel::_hx_system::frontEnds::BitmapFrontEnd _hx_tmp = ::flixel::FlxG_obj::bitmap;
HXDLIN( 260)			imgs->push(_hx_tmp->add(((Path + ::Std_obj::string((10000 + i)).substring(1,null())) + (HX_(".",2e,00,00,00) + ext)),null(),null()));
HXLINE( 261)			i = (i + 1);
            		}
HXLINE( 264)		 ::flixel::graphics::frames::FlxAtlasFrames frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 265)		{
HXLINE( 265)			int _g = 0;
HXDLIN( 265)			while((_g < imgs->length)){
HXLINE( 265)				 ::flixel::graphics::FlxGraphic img = imgs->__get(_g).StaticCast<  ::flixel::graphics::FlxGraphic >();
HXDLIN( 265)				_g = (_g + 1);
HXLINE( 267)				 ::flixel::graphics::frames::FlxFrame frame = img->get_imageFrame()->get_frame();
HXLINE( 268)				::String _hx_tmp1 = ::haxe::io::Path_obj::withoutDirectory(Path);
HXDLIN( 268)				frame->name = (_hx_tmp1 + ::Std_obj::string((10000 + imgs->indexOf(img,null()))).substring(1,null()));
HXLINE( 269)				frames->pushFrame(frame,null());
            			}
            		}
HXLINE( 272)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnimateFrames_obj,fromSequence,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAnimateFrames_obj::fromEdgeAnimate(::String Path, ::Dynamic Image){
            	HX_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_283_fromEdgeAnimate)
HXDLIN( 283)		return ::flxanimate::frames::FlxAnimateFrames_obj::fromJson(Path,Image);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnimateFrames_obj,fromEdgeAnimate,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAnimateFrames_obj::fromStarling( ::Dynamic Path, ::Dynamic Image){
            	HX_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_294_fromStarling)
HXDLIN( 294)		return ::flxanimate::frames::FlxAnimateFrames_obj::fromSparrow(Path,Image);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnimateFrames_obj,fromStarling,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxAnimateFrames_obj::fromCocos2D(::String Path, ::Dynamic Image){
            	HX_GC_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_305_fromCocos2D)
HXLINE( 306)		if (!(::openfl::utils::Assets_obj::exists(Path,null()))) {
HXLINE( 307)			return null();
            		}
HXLINE( 308)		 ::Dynamic data = ::flxanimate::format::PropertyList_obj::parse(::openfl::utils::Assets_obj::getText(Path));
HXLINE( 310)		::String f = ::haxe::io::Path_obj::addTrailingSlash(::haxe::io::Path_obj::directory(Path));
HXDLIN( 310)		 ::Dynamic f1 = ::flxanimate::frames::FlxAnimateFrames_obj::findImage(Image,(f + ::Std_obj::string( ::Dynamic( ::Dynamic( ::Dynamic(data->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic))->__Field(HX_("target",51,f3,ec,86),::hx::paccDynamic))->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)))));
HXLINE( 312)		if (::hx::IsEq( f1->__Field(HX_("crash",e7,bf,4f,4c),::hx::paccDynamic),true )) {
HXLINE( 313)			return null();
            		}
            		else {
HXLINE( 314)			if (::hx::IsNotNull( f1->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic) )) {
HXLINE( 315)				return ( ( ::flixel::graphics::frames::FlxAtlasFrames)(f1->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic)) );
            			}
            		}
HXLINE( 317)		 ::flixel::graphics::frames::FlxAtlasFrames frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__alloc( HX_CTX ,( ( ::flixel::graphics::FlxGraphic)(f1->__Field(HX_("graphic",a8,5a,07,74),::hx::paccDynamic)) ),null());
HXLINE( 319)		bool ver2 = ::hx::IsEq(  ::Dynamic(data->__Field(HX_("metadata",6f,e7,19,40),::hx::paccDynamic))->__Field(HX_("format",37,8f,8e,fd),::hx::paccDynamic),2 );
HXLINE( 321)		{
HXLINE( 321)			int _g = 0;
HXDLIN( 321)			::Array< ::String > _g1 = ::Reflect_obj::fields( ::Dynamic(data->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic)));
HXDLIN( 321)			while((_g < _g1->length)){
HXLINE( 321)				::String name = _g1->__get(_g);
HXDLIN( 321)				_g = (_g + 1);
HXLINE( 323)				 ::Dynamic data1 = ::Reflect_obj::field( ::Dynamic(data->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic)),name);
HXLINE( 325)				::Array< ::String > frame = ( (::Array< ::String >)(data1->__Field(HX_("textureRect",9f,4b,26,02),::hx::paccDynamic)) );
HXLINE( 326)				::Array< ::String > source = ( (::Array< ::String >)(data1->__Field(HX_("spriteSourceSize",a1,7f,c1,03),::hx::paccDynamic)) );
HXLINE( 327)				::Array< ::String > offset = ( (::Array< ::String >)(data1->__Field(HX_("spriteOffset",78,39,22,f8),::hx::paccDynamic)) );
HXLINE( 328)				bool rotated = ( (bool)(data1->__Field(HX_("textureRotated",0e,4a,de,12),::hx::paccDynamic)) );
HXLINE( 330)				if (ver2) {
HXLINE( 332)					frame = ( (::Array< ::String >)(data1->__Field(HX_("frame",2d,78,83,06),::hx::paccDynamic)) );
HXLINE( 333)					source = ( (::Array< ::String >)(data1->__Field(HX_("sourceSize",3c,87,b7,74),::hx::paccDynamic)) );
HXLINE( 334)					offset = ( (::Array< ::String >)(data1->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic)) );
HXLINE( 335)					rotated = ( (bool)(data1->__Field(HX_("rotated",a9,49,1d,f1),::hx::paccDynamic)) );
            				}
HXLINE( 338)				Float X = ::Std_obj::parseFloat(frame->__get(0));
HXDLIN( 338)				Float Y = ::Std_obj::parseFloat(frame->__get(1));
HXDLIN( 338)				Float Width = ::Std_obj::parseFloat(frame->__get(2));
HXDLIN( 338)				Float Height = ::Std_obj::parseFloat(frame->__get(3));
HXDLIN( 338)				 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 338)				_this->x = X;
HXDLIN( 338)				_this->y = Y;
HXDLIN( 338)				_this->width = Width;
HXDLIN( 338)				_this->height = Height;
HXDLIN( 338)				 ::flixel::math::FlxRect rect = _this;
HXDLIN( 338)				rect->_inPool = false;
HXDLIN( 338)				 ::flixel::math::FlxRect dimensions = rect;
HXLINE( 340)				Float x = ::Std_obj::parseFloat(source->__get(0));
HXDLIN( 340)				Float y = ::Std_obj::parseFloat(source->__get(1));
HXDLIN( 340)				 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 340)				point->_inPool = false;
HXDLIN( 340)				 ::flixel::math::FlxBasePoint sourceSize = point;
HXLINE( 342)				Float x1 = ::Std_obj::parseFloat(offset->__get(0));
HXDLIN( 342)				Float y1 = ::Std_obj::parseFloat(offset->__get(1));
HXDLIN( 342)				 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x1,y1);
HXDLIN( 342)				point1->_inPool = false;
HXDLIN( 342)				 ::flixel::math::FlxBasePoint offset1 = point1;
HXLINE( 344)				if (rotated) {
HXLINE( 346)					{
HXLINE( 346)						Float Height1 = dimensions->width;
HXDLIN( 346)						dimensions->width = dimensions->height;
HXDLIN( 346)						dimensions->height = Height1;
            					}
HXLINE( 347)					{
HXLINE( 347)						Float y2 = sourceSize->y;
HXDLIN( 347)						sourceSize->set_x(sourceSize->x);
HXDLIN( 347)						sourceSize->set_y(y2);
            					}
            				}
HXLINE( 350)				::flxanimate::frames::FlxAnimateFrames_obj::sliceFrame(name,rotated,dimensions,sourceSize,offset1,frames);
            			}
            		}
HXLINE( 353)		return frames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnimateFrames_obj,fromCocos2D,return )

 ::flxanimate::frames::FlxAnimateFrames FlxAnimateFrames_obj::fromEaselJS(::String Path, ::Dynamic Image){
            	HX_GC_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_363_fromEaselJS)
HXLINE( 364)		 ::flxanimate::frames::FlxAnimateFrames hugeFrames =  ::flxanimate::frames::FlxAnimateFrames_obj::__alloc( HX_CTX );
HXLINE( 365)		::Array< ::String > separatedJS = ::openfl::utils::Assets_obj::getText(Path).split(HX_("\n",0a,00,00,00));
HXLINE( 366)		::Array< ::String > lines = ::Array_obj< ::String >::__new(0);
HXLINE( 367)		{
HXLINE( 367)			int _g = 0;
HXDLIN( 367)			while((_g < separatedJS->length)){
HXLINE( 367)				::String line = separatedJS->__get(_g);
HXDLIN( 367)				_g = (_g + 1);
HXLINE( 369)				if ((line.indexOf(HX_("new createjs.SpriteSheet({",64,ba,60,3b),null()) != -1)) {
HXLINE( 370)					lines->push(line);
            				}
            			}
            		}
HXLINE( 372)		::Array< ::String > names = ::Array_obj< ::String >::__new(0);
HXLINE( 373)		::Array< ::Dynamic> jsons = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 374)		{
HXLINE( 374)			int _g1 = 0;
HXDLIN( 374)			while((_g1 < lines->length)){
HXLINE( 374)				::String line1 = lines->__get(_g1);
HXDLIN( 374)				_g1 = (_g1 + 1);
HXLINE( 376)				names->push(::StringTools_obj::replace(line1.split(HX_(".",2e,00,00,00))->__get(0),HX_("_",5f,00,00,00),HX_(" ",20,00,00,00)));
HXLINE( 377)				::String curJson = ::StringTools_obj::replace(::StringTools_obj::replace(line1.split(HX_("(",28,00,00,00))->__get(1),HX_(")",29,00,00,00),HX_("",00,00,00,00)),HX_(";",3b,00,00,00),HX_("",00,00,00,00));
HXLINE( 378)				 ::Dynamic parsedJson =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX , ::EReg_obj::__alloc( HX_CTX ,HX_("({|,\\s*)(\\S+)(\\s*:)",7e,35,70,6b),HX_("g",67,00,00,00))->replace(curJson,HX_("$1\"$2\"$3",4e,85,69,74)))->doParse();
HXLINE( 379)				jsons->push(parsedJson);
            			}
            		}
HXLINE( 381)		::String prevName = HX_("",00,00,00,00);
HXLINE( 382)		::Array< ::String > imagePath = Path.split(HX_("/",2f,00,00,00));
HXLINE( 383)		imagePath->pop();
HXLINE( 384)		{
HXLINE( 384)			int _g2 = 0;
HXDLIN( 384)			int _g3 = names->length;
HXDLIN( 384)			while((_g2 < _g3)){
HXLINE( 384)				_g2 = (_g2 + 1);
HXDLIN( 384)				int i = (_g2 - 1);
HXLINE( 386)				int times = 0;
HXLINE( 387)				::String name = names->__get(i);
HXLINE( 388)				 ::Dynamic json = jsons->__get(i);
HXLINE( 389)				 ::flixel::_hx_system::frontEnds::BitmapFrontEnd bitmap = ::flixel::FlxG_obj::bitmap;
HXDLIN( 389)				::String bitmap1;
HXDLIN( 389)				if (::hx::IsNull( Image )) {
HXLINE( 389)					::String bitmap2 = ((HX_("",00,00,00,00) + imagePath->join(HX_("/",2f,00,00,00))) + HX_("/",2f,00,00,00));
HXDLIN( 389)					bitmap1 = (bitmap2 +  ::Dynamic(json->__Field(HX_("images",b8,50,92,fe),::hx::paccDynamic))->__GetItem(0));
            				}
            				else {
HXLINE( 389)					bitmap1 = ( (::String)(Image) );
            				}
HXDLIN( 389)				 ::flixel::graphics::FlxGraphic bitmap3 = bitmap->add(::openfl::utils::Assets_obj::getBitmapData(bitmap1,null()),null(),null());
HXLINE( 390)				 ::flixel::graphics::frames::FlxAtlasFrames frames =  ::flixel::graphics::frames::FlxAtlasFrames_obj::__alloc( HX_CTX ,bitmap3,null());
HXLINE( 391)				int initialFrame_0 = ( (int)( ::Dynamic(json->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic))->__GetItem(0)->__GetItem(5)) );
HXDLIN( 391)				int initialFrame_1 = ( (int)( ::Dynamic(json->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic))->__GetItem(0)->__GetItem(6)) );
HXLINE( 392)				{
HXLINE( 392)					int _g4 = 0;
HXDLIN( 392)					::Array< ::Dynamic> _g5 = ( (::Array< ::Dynamic>)(json->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic)) );
HXDLIN( 392)					while((_g4 < _g5->length)){
HXLINE( 392)						::Array< int > frame = _g5->__get(_g4).StaticCast< ::Array< int > >();
HXDLIN( 392)						_g4 = (_g4 + 1);
HXLINE( 394)						::String _hx_tmp = (name + ::Std_obj::string((10000 + times)).substring(1,null()));
HXDLIN( 394)						 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get().StaticCast<  ::flixel::math::FlxRect >();
HXDLIN( 394)						_this->x = ( (Float)(frame->__get(0)) );
HXDLIN( 394)						_this->y = ( (Float)(frame->__get(1)) );
HXDLIN( 394)						_this->width = ( (Float)(frame->__get(2)) );
HXDLIN( 394)						_this->height = ( (Float)(frame->__get(3)) );
HXDLIN( 394)						 ::flixel::math::FlxRect rect = _this;
HXDLIN( 394)						rect->_inPool = false;
HXLINE( 395)						 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >();
HXDLIN( 395)						 ::flixel::math::FlxBasePoint point1 = point->set((frame->__get(5) - initialFrame_0),(frame->__get(6) - initialFrame_1));
HXDLIN( 395)						point1->_inPool = false;
HXLINE( 394)						::flxanimate::frames::FlxAnimateFrames_obj::sliceFrame(_hx_tmp,false,rect,null(),point1,frames);
HXLINE( 396)						times = (times + 1);
            					}
            				}
HXLINE( 398)				hugeFrames->addAtlas(frames,null());
            			}
            		}
HXLINE( 400)		return hugeFrames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnimateFrames_obj,fromEaselJS,return )

void FlxAnimateFrames_obj::sliceFrame(::String name,bool rotated, ::flixel::math::FlxRect dimensions, ::flixel::math::FlxBasePoint sourceSize, ::flixel::math::FlxBasePoint offset, ::flixel::graphics::frames::FlxAtlasFrames Frames){
            	HX_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_404_sliceFrame)
HXLINE( 405)		if (rotated) {
HXLINE( 406)			Float Height = dimensions->width;
HXDLIN( 406)			dimensions->width = dimensions->height;
HXDLIN( 406)			dimensions->height = Height;
            		}
HXLINE( 408)		 ::flixel::math::FlxBasePoint _hx_tmp;
HXDLIN( 408)		if (::hx::IsNotNull( sourceSize )) {
HXLINE( 408)			_hx_tmp = sourceSize;
            		}
            		else {
HXLINE( 408)			Float x = dimensions->x;
HXDLIN( 408)			Float y = dimensions->y;
HXDLIN( 408)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 408)			point->_inPool = false;
HXDLIN( 408)			_hx_tmp = point;
            		}
HXLINE( 409)		 ::flixel::math::FlxBasePoint _hx_tmp1;
HXDLIN( 409)		if (::hx::IsNotNull( offset )) {
HXLINE( 409)			offset->set_x((offset->x * ( (Float)(-1) )));
HXDLIN( 409)			offset->set_y((offset->y * ( (Float)(-1) )));
HXDLIN( 409)			_hx_tmp1 = offset;
            		}
            		else {
HXLINE( 409)			 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 409)			point1->_inPool = false;
HXDLIN( 409)			_hx_tmp1 = point1;
            		}
HXDLIN( 409)		int _hx_tmp2;
HXDLIN( 409)		if (rotated) {
HXLINE( 409)			_hx_tmp2 = -90;
            		}
            		else {
HXLINE( 409)			_hx_tmp2 = 0;
            		}
HXLINE( 408)		Frames->addAtlasFrame(dimensions,_hx_tmp,_hx_tmp1,name,_hx_tmp2,null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(FlxAnimateFrames_obj,sliceFrame,(void))

 ::Dynamic FlxAnimateFrames_obj::findImage( ::Dynamic Image,::String Path){
            	HX_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_418_findImage)
HXLINE( 419)		if (::hx::IsNull( Image )) {
HXLINE( 421)			if (::hx::IsNotNull( Path )) {
HXLINE( 422)				Image = Path;
            			}
            			else {
HXLINE( 424)				return  ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("crash",e7,bf,4f,4c),true));
            			}
            		}
HXLINE( 426)		 ::flixel::graphics::FlxGraphic graphic = ::flixel::FlxG_obj::bitmap->add(Image,null(),null());
HXLINE( 427)		if (::hx::IsNull( graphic )) {
HXLINE( 428)			return  ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("crash",e7,bf,4f,4c),true));
            		}
HXLINE( 431)		 ::flixel::graphics::frames::FlxAtlasFrames frames = ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(graphic,null());
HXLINE( 433)		return  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("frames",a6,af,85,ac),frames)
            			->setFixed(1,HX_("crash",e7,bf,4f,4c),false)
            			->setFixed(2,HX_("graphic",a8,5a,07,74),graphic));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxAnimateFrames_obj,findImage,return )


::hx::ObjectPtr< FlxAnimateFrames_obj > FlxAnimateFrames_obj::__new() {
	::hx::ObjectPtr< FlxAnimateFrames_obj > __this = new FlxAnimateFrames_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< FlxAnimateFrames_obj > FlxAnimateFrames_obj::__alloc(::hx::Ctx *_hx_ctx) {
	FlxAnimateFrames_obj *__this = (FlxAnimateFrames_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxAnimateFrames_obj), true, "flxanimate.frames.FlxAnimateFrames"));
	*(void **)__this = FlxAnimateFrames_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxAnimateFrames_obj::FlxAnimateFrames_obj()
{
}

void FlxAnimateFrames_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxAnimateFrames);
	HX_MARK_MEMBER_NAME(parents,"parents");
	 ::flixel::graphics::frames::FlxAtlasFrames_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxAnimateFrames_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(parents,"parents");
	 ::flixel::graphics::frames::FlxAtlasFrames_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxAnimateFrames_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"parents") ) { return ::hx::Val( parents ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxAnimateFrames_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"zip") ) { outValue = ( zip ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { outValue = ( data ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromJson") ) { outValue = fromJson_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"findImage") ) { outValue = findImage_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sliceFrame") ) { outValue = sliceFrame_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromSparrow") ) { outValue = fromSparrow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromCocos2D") ) { outValue = fromCocos2D_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromEaselJS") ) { outValue = fromEaselJS_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromSequence") ) { outValue = fromSequence_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromStarling") ) { outValue = fromStarling_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromSpriteMap") ) { outValue = fromSpriteMap_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"fromEdgeAnimate") ) { outValue = fromEdgeAnimate_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fromTextureAtlas") ) { outValue = fromTextureAtlas_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"fromSparrowDirect") ) { outValue = fromSparrowDirect_dyn(); return true; }
	}
	return false;
}

::hx::Val FlxAnimateFrames_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"parents") ) { parents=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxAnimateFrames_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"zip") ) { zip=ioValue.Cast<  ::haxe::ds::List >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void FlxAnimateFrames_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("parents",09,80,c6,e0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxAnimateFrames_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxAnimateFrames_obj,parents),HX_("parents",09,80,c6,e0)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FlxAnimateFrames_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &FlxAnimateFrames_obj::data,HX_("data",2a,56,63,42)},
	{::hx::fsObject /*  ::haxe::ds::List */ ,(void *) &FlxAnimateFrames_obj::zip,HX_("zip",e1,ee,5c,00)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxAnimateFrames_obj_sMemberFields[] = {
	HX_("parents",09,80,c6,e0),
	::String(null()) };

static void FlxAnimateFrames_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxAnimateFrames_obj::data,"data");
	HX_MARK_MEMBER_NAME(FlxAnimateFrames_obj::zip,"zip");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxAnimateFrames_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxAnimateFrames_obj::data,"data");
	HX_VISIT_MEMBER_NAME(FlxAnimateFrames_obj::zip,"zip");
};

#endif

::hx::Class FlxAnimateFrames_obj::__mClass;

static ::String FlxAnimateFrames_obj_sStaticFields[] = {
	HX_("data",2a,56,63,42),
	HX_("zip",e1,ee,5c,00),
	HX_("fromTextureAtlas",fa,62,e9,b8),
	HX_("fromSpriteMap",cd,b4,ed,c9),
	HX_("fromSparrow",c2,9f,ec,33),
	HX_("fromSparrowDirect",8b,9c,f0,35),
	HX_("fromJson",b2,10,34,a4),
	HX_("fromSequence",cb,f9,03,89),
	HX_("fromEdgeAnimate",9a,e2,18,db),
	HX_("fromStarling",52,28,79,dd),
	HX_("fromCocos2D",63,e9,0b,59),
	HX_("fromEaselJS",bd,b4,ff,42),
	HX_("sliceFrame",7b,3a,86,e5),
	HX_("findImage",62,50,60,ac),
	::String(null())
};

void FlxAnimateFrames_obj::__register()
{
	FlxAnimateFrames_obj _hx_dummy;
	FlxAnimateFrames_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.frames.FlxAnimateFrames",3e,8a,4b,fc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxAnimateFrames_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxAnimateFrames_obj::__SetStatic;
	__mClass->mMarkFunc = FlxAnimateFrames_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxAnimateFrames_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxAnimateFrames_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxAnimateFrames_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxAnimateFrames_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxAnimateFrames_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxAnimateFrames_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxAnimateFrames_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0a2ec04d5fc2238b_29_boot)
HXDLIN(  29)		data = null();
            	}
}

} // end namespace flxanimate
} // end namespace frames
