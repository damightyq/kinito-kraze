// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flxanimate_motion_AdjustColor
#include <flxanimate/motion/AdjustColor.h>
#endif
#ifndef INCLUDED_flxanimate_motion_ColorMatrix
#include <flxanimate/motion/ColorMatrix.h>
#endif
#ifndef INCLUDED_flxanimate_motion_DynamicMatrix
#include <flxanimate/motion/DynamicMatrix.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_eb03259862327cc7_57_new,"flxanimate.motion.AdjustColor","new",0x1fcf9f0d,"flxanimate.motion.AdjustColor.new","flxanimate/motion/AdjustColor.hx",57,0x2f87ab23)
HX_LOCAL_STACK_FRAME(_hx_pos_eb03259862327cc7_60_set_brightness,"flxanimate.motion.AdjustColor","set_brightness",0x607f0501,"flxanimate.motion.AdjustColor.set_brightness","flxanimate/motion/AdjustColor.hx",60,0x2f87ab23)
HX_LOCAL_STACK_FRAME(_hx_pos_eb03259862327cc7_70_set_contrast,"flxanimate.motion.AdjustColor","set_contrast",0x79b23832,"flxanimate.motion.AdjustColor.set_contrast","flxanimate/motion/AdjustColor.hx",70,0x2f87ab23)
HX_LOCAL_STACK_FRAME(_hx_pos_eb03259862327cc7_85_set_saturation,"flxanimate.motion.AdjustColor","set_saturation",0xf1af4b02,"flxanimate.motion.AdjustColor.set_saturation","flxanimate/motion/AdjustColor.hx",85,0x2f87ab23)
HX_LOCAL_STACK_FRAME(_hx_pos_eb03259862327cc7_104_set_hue,"flxanimate.motion.AdjustColor","set_hue",0x3a92d388,"flxanimate.motion.AdjustColor.set_hue","flxanimate/motion/AdjustColor.hx",104,0x2f87ab23)
HX_LOCAL_STACK_FRAME(_hx_pos_eb03259862327cc7_123_allValuesAreSet,"flxanimate.motion.AdjustColor","allValuesAreSet",0x8afc201e,"flxanimate.motion.AdjustColor.allValuesAreSet","flxanimate/motion/AdjustColor.hx",123,0x2f87ab23)
HX_LOCAL_STACK_FRAME(_hx_pos_eb03259862327cc7_132_calculateFinalFlatArray,"flxanimate.motion.AdjustColor","calculateFinalFlatArray",0xcdcc37fd,"flxanimate.motion.AdjustColor.calculateFinalFlatArray","flxanimate/motion/AdjustColor.hx",132,0x2f87ab23)
HX_LOCAL_STACK_FRAME(_hx_pos_eb03259862327cc7_142_calculateFinalMatrix,"flxanimate.motion.AdjustColor","calculateFinalMatrix",0xa06db544,"flxanimate.motion.AdjustColor.calculateFinalMatrix","flxanimate/motion/AdjustColor.hx",142,0x2f87ab23)
HX_LOCAL_STACK_FRAME(_hx_pos_eb03259862327cc7_12_boot,"flxanimate.motion.AdjustColor","boot",0xadf48ce5,"flxanimate.motion.AdjustColor.boot","flxanimate/motion/AdjustColor.hx",12,0x2f87ab23)
static const Float _hx_array_data_b75e149b_9[] = {
	(Float)0,0.01,0.02,0.04,0.05,0.06,0.07,0.08,0.1,0.11,0.12,0.14,0.15,0.16,0.17,0.18,0.20,0.21,0.22,0.24,0.25,0.27,0.28,0.30,0.32,0.34,0.36,0.38,0.40,0.42,0.44,0.46,0.48,0.5,0.53,0.56,0.59,0.62,0.65,0.68,0.71,0.74,0.77,0.80,0.83,0.86,0.89,0.92,0.95,0.98,1.0,1.06,1.12,1.18,1.24,1.30,1.36,1.42,1.48,1.54,1.60,1.66,1.72,1.78,1.84,1.90,1.96,2.0,2.12,2.25,2.37,2.50,2.62,2.75,2.87,3.0,3.2,3.4,3.6,3.8,4.0,4.3,4.7,4.9,5.0,5.5,6.0,6.5,6.8,7.0,7.3,7.5,7.8,8.0,8.4,8.7,9.0,9.4,9.6,9.8,10.0,
};
namespace flxanimate{
namespace motion{

void AdjustColor_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_eb03259862327cc7_57_new)
            	}

Dynamic AdjustColor_obj::__CreateEmpty() { return new AdjustColor_obj; }

void *AdjustColor_obj::_hx_vtable = 0;

Dynamic AdjustColor_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AdjustColor_obj > _hx_result = new AdjustColor_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AdjustColor_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4ce41d2f;
}

Float AdjustColor_obj::set_brightness(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_eb03259862327cc7_60_set_brightness)
HXLINE(  61)		if (::hx::IsNull( this->m_brightnessMatrix )) {
HXLINE(  62)			this->m_brightnessMatrix =  ::flxanimate::motion::ColorMatrix_obj::__alloc( HX_CTX );
            		}
HXLINE(  64)		this->m_brightnessMatrix->setBrightnessMatrix((value * ( (Float)(2) )));
HXLINE(  66)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdjustColor_obj,set_brightness,return )

Float AdjustColor_obj::set_contrast(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_eb03259862327cc7_70_set_contrast)
HXLINE(  72)		Float deNormVal = value;
HXLINE(  74)		Float deNormVal1;
HXDLIN(  74)		if ((value > 0)) {
HXLINE(  74)			deNormVal1 = ::flxanimate::motion::AdjustColor_obj::s_arrayOfDeltaIndex->__get(::Std_obj::_hx_int(value));
            		}
            		else {
HXLINE(  74)			deNormVal1 = (value / ( (Float)(100) ));
            		}
HXDLIN(  74)		deNormVal = ((deNormVal1 * ( (Float)(127) )) + 127);
HXLINE(  76)		if (::hx::IsNull( this->m_contrastMatrix )) {
HXLINE(  77)			this->m_contrastMatrix =  ::flxanimate::motion::ColorMatrix_obj::__alloc( HX_CTX );
            		}
HXLINE(  79)		this->m_contrastMatrix->setContrastMatrix(deNormVal);
HXLINE(  81)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdjustColor_obj,set_contrast,return )

Float AdjustColor_obj::set_saturation(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_eb03259862327cc7_85_set_saturation)
HXLINE(  87)		Float deNormVal = value;
HXLINE(  89)		if ((value > 0)) {
HXLINE(  90)			deNormVal = (((Float)1.0) + ((( (Float)(3) ) * value) / ( (Float)(100) )));
            		}
            		else {
HXLINE(  92)			deNormVal = ((value / ( (Float)(100) )) + 1);
            		}
HXLINE(  94)		if (::hx::IsNull( this->m_saturationMatrix )) {
HXLINE(  96)			this->m_saturationMatrix =  ::flxanimate::motion::ColorMatrix_obj::__alloc( HX_CTX );
            		}
HXLINE(  98)		this->m_saturationMatrix->setSaturationMatrix(deNormVal);
HXLINE( 100)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdjustColor_obj,set_saturation,return )

Float AdjustColor_obj::set_hue(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_eb03259862327cc7_104_set_hue)
HXLINE( 107)		if (::hx::IsNull( this->m_hueMatrix )) {
HXLINE( 109)			this->m_hueMatrix =  ::flxanimate::motion::ColorMatrix_obj::__alloc( HX_CTX );
            		}
HXLINE( 112)		if ((value != 0)) {
HXLINE( 113)			this->m_hueMatrix->setHueMatrix(((value * ::Math_obj::PI) / ((Float)180.0)));
            		}
HXLINE( 115)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AdjustColor_obj,set_hue,return )

bool AdjustColor_obj::allValuesAreSet(){
            	HX_STACKFRAME(&_hx_pos_eb03259862327cc7_123_allValuesAreSet)
HXDLIN( 123)		bool _hx_tmp;
HXDLIN( 123)		bool _hx_tmp1;
HXDLIN( 123)		if (::hx::IsNotNull( this->m_brightnessMatrix )) {
HXDLIN( 123)			_hx_tmp1 = ::hx::IsNotNull( this->m_contrastMatrix );
            		}
            		else {
HXDLIN( 123)			_hx_tmp1 = false;
            		}
HXDLIN( 123)		if (_hx_tmp1) {
HXDLIN( 123)			_hx_tmp = ::hx::IsNotNull( this->m_saturationMatrix );
            		}
            		else {
HXDLIN( 123)			_hx_tmp = false;
            		}
HXDLIN( 123)		if (_hx_tmp) {
HXDLIN( 123)			return ::hx::IsNotNull( this->m_hueMatrix );
            		}
            		else {
HXDLIN( 123)			return false;
            		}
HXDLIN( 123)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdjustColor_obj,allValuesAreSet,return )

::Array< Float > AdjustColor_obj::calculateFinalFlatArray(){
            	HX_STACKFRAME(&_hx_pos_eb03259862327cc7_132_calculateFinalFlatArray)
HXLINE( 133)		if (this->calculateFinalMatrix()) {
HXLINE( 135)			return this->m_finalMatrix->getFlatArray();
            		}
HXLINE( 138)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdjustColor_obj,calculateFinalFlatArray,return )

bool AdjustColor_obj::calculateFinalMatrix(){
            	HX_GC_STACKFRAME(&_hx_pos_eb03259862327cc7_142_calculateFinalMatrix)
HXLINE( 143)		if (!(this->allValuesAreSet())) {
HXLINE( 144)			return false;
            		}
HXLINE( 146)		if (::hx::IsNull( this->m_finalMatrix )) {
HXLINE( 147)			this->m_finalMatrix =  ::flxanimate::motion::ColorMatrix_obj::__alloc( HX_CTX );
            		}
            		else {
HXLINE( 149)			this->m_finalMatrix->loadIdentity();
            		}
HXLINE( 151)		this->m_finalMatrix->multiply(this->m_brightnessMatrix,null());
HXLINE( 152)		this->m_finalMatrix->multiply(this->m_contrastMatrix,null());
HXLINE( 153)		this->m_finalMatrix->multiply(this->m_saturationMatrix,null());
HXLINE( 154)		this->m_finalMatrix->multiply(this->m_hueMatrix,null());
HXLINE( 156)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AdjustColor_obj,calculateFinalMatrix,return )

::Array< Float > AdjustColor_obj::s_arrayOfDeltaIndex;


::hx::ObjectPtr< AdjustColor_obj > AdjustColor_obj::__new() {
	::hx::ObjectPtr< AdjustColor_obj > __this = new AdjustColor_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< AdjustColor_obj > AdjustColor_obj::__alloc(::hx::Ctx *_hx_ctx) {
	AdjustColor_obj *__this = (AdjustColor_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AdjustColor_obj), true, "flxanimate.motion.AdjustColor"));
	*(void **)__this = AdjustColor_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

AdjustColor_obj::AdjustColor_obj()
{
}

void AdjustColor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AdjustColor);
	HX_MARK_MEMBER_NAME(m_brightnessMatrix,"m_brightnessMatrix");
	HX_MARK_MEMBER_NAME(m_contrastMatrix,"m_contrastMatrix");
	HX_MARK_MEMBER_NAME(m_saturationMatrix,"m_saturationMatrix");
	HX_MARK_MEMBER_NAME(m_hueMatrix,"m_hueMatrix");
	HX_MARK_MEMBER_NAME(m_finalMatrix,"m_finalMatrix");
	HX_MARK_MEMBER_NAME(brightness,"brightness");
	HX_MARK_MEMBER_NAME(contrast,"contrast");
	HX_MARK_MEMBER_NAME(saturation,"saturation");
	HX_MARK_MEMBER_NAME(hue,"hue");
	HX_MARK_END_CLASS();
}

void AdjustColor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_brightnessMatrix,"m_brightnessMatrix");
	HX_VISIT_MEMBER_NAME(m_contrastMatrix,"m_contrastMatrix");
	HX_VISIT_MEMBER_NAME(m_saturationMatrix,"m_saturationMatrix");
	HX_VISIT_MEMBER_NAME(m_hueMatrix,"m_hueMatrix");
	HX_VISIT_MEMBER_NAME(m_finalMatrix,"m_finalMatrix");
	HX_VISIT_MEMBER_NAME(brightness,"brightness");
	HX_VISIT_MEMBER_NAME(contrast,"contrast");
	HX_VISIT_MEMBER_NAME(saturation,"saturation");
	HX_VISIT_MEMBER_NAME(hue,"hue");
}

::hx::Val AdjustColor_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"hue") ) { return ::hx::Val( hue ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"set_hue") ) { return ::hx::Val( set_hue_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contrast") ) { return ::hx::Val( contrast ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"brightness") ) { return ::hx::Val( brightness ); }
		if (HX_FIELD_EQ(inName,"saturation") ) { return ::hx::Val( saturation ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"m_hueMatrix") ) { return ::hx::Val( m_hueMatrix ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_contrast") ) { return ::hx::Val( set_contrast_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"m_finalMatrix") ) { return ::hx::Val( m_finalMatrix ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"set_brightness") ) { return ::hx::Val( set_brightness_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_saturation") ) { return ::hx::Val( set_saturation_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"allValuesAreSet") ) { return ::hx::Val( allValuesAreSet_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"m_contrastMatrix") ) { return ::hx::Val( m_contrastMatrix ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"m_brightnessMatrix") ) { return ::hx::Val( m_brightnessMatrix ); }
		if (HX_FIELD_EQ(inName,"m_saturationMatrix") ) { return ::hx::Val( m_saturationMatrix ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"calculateFinalMatrix") ) { return ::hx::Val( calculateFinalMatrix_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"calculateFinalFlatArray") ) { return ::hx::Val( calculateFinalFlatArray_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool AdjustColor_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"s_arrayOfDeltaIndex") ) { outValue = ( s_arrayOfDeltaIndex ); return true; }
	}
	return false;
}

::hx::Val AdjustColor_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"hue") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_hue(inValue.Cast< Float >()) );hue=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contrast") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_contrast(inValue.Cast< Float >()) );contrast=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"brightness") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_brightness(inValue.Cast< Float >()) );brightness=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"saturation") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_saturation(inValue.Cast< Float >()) );saturation=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"m_hueMatrix") ) { m_hueMatrix=inValue.Cast<  ::flxanimate::motion::ColorMatrix >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"m_finalMatrix") ) { m_finalMatrix=inValue.Cast<  ::flxanimate::motion::ColorMatrix >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"m_contrastMatrix") ) { m_contrastMatrix=inValue.Cast<  ::flxanimate::motion::ColorMatrix >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"m_brightnessMatrix") ) { m_brightnessMatrix=inValue.Cast<  ::flxanimate::motion::ColorMatrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_saturationMatrix") ) { m_saturationMatrix=inValue.Cast<  ::flxanimate::motion::ColorMatrix >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool AdjustColor_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"s_arrayOfDeltaIndex") ) { s_arrayOfDeltaIndex=ioValue.Cast< ::Array< Float > >(); return true; }
	}
	return false;
}

void AdjustColor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("m_brightnessMatrix",44,8e,03,33));
	outFields->push(HX_("m_contrastMatrix",b5,0f,cb,4d));
	outFields->push(HX_("m_saturationMatrix",05,cb,41,d0));
	outFields->push(HX_("m_hueMatrix",87,7b,cb,68));
	outFields->push(HX_("m_finalMatrix",45,24,6c,1b));
	outFields->push(HX_("brightness",d1,8d,71,65));
	outFields->push(HX_("contrast",02,ed,b1,37));
	outFields->push(HX_("saturation",d2,d3,a1,f6));
	outFields->push(HX_("hue",b8,50,4f,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AdjustColor_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flxanimate::motion::ColorMatrix */ ,(int)offsetof(AdjustColor_obj,m_brightnessMatrix),HX_("m_brightnessMatrix",44,8e,03,33)},
	{::hx::fsObject /*  ::flxanimate::motion::ColorMatrix */ ,(int)offsetof(AdjustColor_obj,m_contrastMatrix),HX_("m_contrastMatrix",b5,0f,cb,4d)},
	{::hx::fsObject /*  ::flxanimate::motion::ColorMatrix */ ,(int)offsetof(AdjustColor_obj,m_saturationMatrix),HX_("m_saturationMatrix",05,cb,41,d0)},
	{::hx::fsObject /*  ::flxanimate::motion::ColorMatrix */ ,(int)offsetof(AdjustColor_obj,m_hueMatrix),HX_("m_hueMatrix",87,7b,cb,68)},
	{::hx::fsObject /*  ::flxanimate::motion::ColorMatrix */ ,(int)offsetof(AdjustColor_obj,m_finalMatrix),HX_("m_finalMatrix",45,24,6c,1b)},
	{::hx::fsFloat,(int)offsetof(AdjustColor_obj,brightness),HX_("brightness",d1,8d,71,65)},
	{::hx::fsFloat,(int)offsetof(AdjustColor_obj,contrast),HX_("contrast",02,ed,b1,37)},
	{::hx::fsFloat,(int)offsetof(AdjustColor_obj,saturation),HX_("saturation",d2,d3,a1,f6)},
	{::hx::fsFloat,(int)offsetof(AdjustColor_obj,hue),HX_("hue",b8,50,4f,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo AdjustColor_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(void *) &AdjustColor_obj::s_arrayOfDeltaIndex,HX_("s_arrayOfDeltaIndex",1e,81,19,80)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String AdjustColor_obj_sMemberFields[] = {
	HX_("m_brightnessMatrix",44,8e,03,33),
	HX_("m_contrastMatrix",b5,0f,cb,4d),
	HX_("m_saturationMatrix",05,cb,41,d0),
	HX_("m_hueMatrix",87,7b,cb,68),
	HX_("m_finalMatrix",45,24,6c,1b),
	HX_("brightness",d1,8d,71,65),
	HX_("contrast",02,ed,b1,37),
	HX_("saturation",d2,d3,a1,f6),
	HX_("hue",b8,50,4f,00),
	HX_("set_brightness",8e,fe,86,fb),
	HX_("set_contrast",7f,c4,c4,01),
	HX_("set_saturation",8f,44,b7,8c),
	HX_("set_hue",5b,aa,c5,19),
	HX_("allValuesAreSet",f1,81,ee,96),
	HX_("calculateFinalFlatArray",d0,24,81,71),
	HX_("calculateFinalMatrix",91,d6,88,02),
	::String(null()) };

static void AdjustColor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AdjustColor_obj::s_arrayOfDeltaIndex,"s_arrayOfDeltaIndex");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AdjustColor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AdjustColor_obj::s_arrayOfDeltaIndex,"s_arrayOfDeltaIndex");
};

#endif

::hx::Class AdjustColor_obj::__mClass;

static ::String AdjustColor_obj_sStaticFields[] = {
	HX_("s_arrayOfDeltaIndex",1e,81,19,80),
	::String(null())
};

void AdjustColor_obj::__register()
{
	AdjustColor_obj _hx_dummy;
	AdjustColor_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.motion.AdjustColor",9b,14,5e,b7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AdjustColor_obj::__GetStatic;
	__mClass->mSetStaticField = &AdjustColor_obj::__SetStatic;
	__mClass->mMarkFunc = AdjustColor_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(AdjustColor_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AdjustColor_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AdjustColor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AdjustColor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AdjustColor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AdjustColor_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void AdjustColor_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_eb03259862327cc7_12_boot)
HXDLIN(  12)		s_arrayOfDeltaIndex = ::Array_obj< Float >::fromData( _hx_array_data_b75e149b_9,101);
            	}
}

} // end namespace flxanimate
} // end namespace motion
