// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flxanimate_motion_DynamicMatrix
#include <flxanimate/motion/DynamicMatrix.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cf0e468baa9144f2_33_new,"flxanimate.motion.DynamicMatrix","new",0xc6ea7999,"flxanimate.motion.DynamicMatrix.new","flxanimate/motion/DynamicMatrix.hx",33,0x55f72e17)
HX_LOCAL_STACK_FRAME(_hx_pos_cf0e468baa9144f2_36_create,"flxanimate.motion.DynamicMatrix","create",0x51f58763,"flxanimate.motion.DynamicMatrix.create","flxanimate/motion/DynamicMatrix.hx",36,0x55f72e17)
HX_LOCAL_STACK_FRAME(_hx_pos_cf0e468baa9144f2_58_getWidth,"flxanimate.motion.DynamicMatrix","getWidth",0xde360db7,"flxanimate.motion.DynamicMatrix.getWidth","flxanimate/motion/DynamicMatrix.hx",58,0x55f72e17)
HX_LOCAL_STACK_FRAME(_hx_pos_cf0e468baa9144f2_66_getHeight,"flxanimate.motion.DynamicMatrix","getHeight",0x47656b16,"flxanimate.motion.DynamicMatrix.getHeight","flxanimate/motion/DynamicMatrix.hx",66,0x55f72e17)
HX_LOCAL_STACK_FRAME(_hx_pos_cf0e468baa9144f2_69_getValue,"flxanimate.motion.DynamicMatrix","getValue",0x458bd722,"flxanimate.motion.DynamicMatrix.getValue","flxanimate/motion/DynamicMatrix.hx",69,0x55f72e17)
HX_LOCAL_STACK_FRAME(_hx_pos_cf0e468baa9144f2_84_setValue,"flxanimate.motion.DynamicMatrix","setValue",0xf3e93096,"flxanimate.motion.DynamicMatrix.setValue","flxanimate/motion/DynamicMatrix.hx",84,0x55f72e17)
HX_LOCAL_STACK_FRAME(_hx_pos_cf0e468baa9144f2_93_loadIdentity,"flxanimate.motion.DynamicMatrix","loadIdentity",0x22f9192b,"flxanimate.motion.DynamicMatrix.loadIdentity","flxanimate/motion/DynamicMatrix.hx",93,0x55f72e17)
HX_LOCAL_STACK_FRAME(_hx_pos_cf0e468baa9144f2_109_loadZeros,"flxanimate.motion.DynamicMatrix","loadZeros",0x65f65a3e,"flxanimate.motion.DynamicMatrix.loadZeros","flxanimate/motion/DynamicMatrix.hx",109,0x55f72e17)
HX_LOCAL_STACK_FRAME(_hx_pos_cf0e468baa9144f2_128_multiply,"flxanimate.motion.DynamicMatrix","multiply",0x4e892a4b,"flxanimate.motion.DynamicMatrix.multiply","flxanimate/motion/DynamicMatrix.hx",128,0x55f72e17)
HX_LOCAL_STACK_FRAME(_hx_pos_cf0e468baa9144f2_180_multiplyNumber,"flxanimate.motion.DynamicMatrix","multiplyNumber",0xe59d6f74,"flxanimate.motion.DynamicMatrix.multiplyNumber","flxanimate/motion/DynamicMatrix.hx",180,0x55f72e17)
HX_LOCAL_STACK_FRAME(_hx_pos_cf0e468baa9144f2_205_add,"flxanimate.motion.DynamicMatrix","add",0xc6e09b5a,"flxanimate.motion.DynamicMatrix.add","flxanimate/motion/DynamicMatrix.hx",205,0x55f72e17)
HX_LOCAL_STACK_FRAME(_hx_pos_cf0e468baa9144f2_16_boot,"flxanimate.motion.DynamicMatrix","boot",0x3e58ecd9,"flxanimate.motion.DynamicMatrix.boot","flxanimate/motion/DynamicMatrix.hx",16,0x55f72e17)
HX_LOCAL_STACK_FRAME(_hx_pos_cf0e468baa9144f2_20_boot,"flxanimate.motion.DynamicMatrix","boot",0x3e58ecd9,"flxanimate.motion.DynamicMatrix.boot","flxanimate/motion/DynamicMatrix.hx",20,0x55f72e17)
namespace flxanimate{
namespace motion{

void DynamicMatrix_obj::__construct(int width,int height){
            	HX_STACKFRAME(&_hx_pos_cf0e468baa9144f2_33_new)
HXDLIN(  33)		this->create(width,height);
            	}

Dynamic DynamicMatrix_obj::__CreateEmpty() { return new DynamicMatrix_obj; }

void *DynamicMatrix_obj::_hx_vtable = 0;

Dynamic DynamicMatrix_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DynamicMatrix_obj > _hx_result = new DynamicMatrix_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool DynamicMatrix_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x79460ebb;
}

void DynamicMatrix_obj::create(int width,int height){
            	HX_GC_STACKFRAME(&_hx_pos_cf0e468baa9144f2_36_create)
HXLINE(  37)		bool _hx_tmp;
HXDLIN(  37)		if ((width > 0)) {
HXLINE(  37)			_hx_tmp = (height <= 0);
            		}
            		else {
HXLINE(  37)			_hx_tmp = true;
            		}
HXDLIN(  37)		if (_hx_tmp) {
HXLINE(  37)			return;
            		}
HXLINE(  38)		this->m_width = width;
HXLINE(  39)		this->m_height = height;
HXLINE(  40)		::Array< ::Dynamic> array = null();
HXDLIN(  40)		this->m_matrix =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,height,true,array,true);
HXLINE(  41)		{
HXLINE(  41)			int _g = 0;
HXDLIN(  41)			int _g1 = height;
HXDLIN(  41)			while((_g < _g1)){
HXLINE(  41)				_g = (_g + 1);
HXDLIN(  41)				int i = (_g - 1);
HXLINE(  43)				{
HXLINE(  43)					::Dynamic this1 = this->m_matrix;
HXDLIN(  43)					::Array< Float > array1 = null();
HXDLIN(  43)					( ( ::openfl::_Vector::ObjectVector)(this1) )->set(i, ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,width,true,array1,true)).StaticCast<  ::openfl::_Vector::FloatVector >();
            				}
HXLINE(  44)				{
HXLINE(  44)					int _g2 = 0;
HXDLIN(  44)					int _g3 = width;
HXDLIN(  44)					while((_g2 < _g3)){
HXLINE(  44)						_g2 = (_g2 + 1);
HXDLIN(  44)						int j = (_g2 - 1);
HXLINE(  46)						this->m_matrix->get(i).StaticCast<  ::openfl::_Vector::FloatVector >()->set(j,( (Float)(0) ));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DynamicMatrix_obj,create,(void))

int DynamicMatrix_obj::getWidth(){
            	HX_STACKFRAME(&_hx_pos_cf0e468baa9144f2_58_getWidth)
HXDLIN(  58)		return this->m_width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DynamicMatrix_obj,getWidth,return )

int DynamicMatrix_obj::getHeight(){
            	HX_STACKFRAME(&_hx_pos_cf0e468baa9144f2_66_getHeight)
HXDLIN(  66)		return this->m_height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DynamicMatrix_obj,getHeight,return )

Float DynamicMatrix_obj::getValue(int row,int col){
            	HX_STACKFRAME(&_hx_pos_cf0e468baa9144f2_69_getValue)
HXLINE(  70)		Float value = ( (Float)(0) );
HXLINE(  72)		value = this->m_matrix->get(row).StaticCast<  ::openfl::_Vector::FloatVector >()->get(col);
HXLINE(  74)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DynamicMatrix_obj,getValue,return )

void DynamicMatrix_obj::setValue(int row,int col,Float value){
            	HX_STACKFRAME(&_hx_pos_cf0e468baa9144f2_84_setValue)
HXDLIN(  84)		bool _hx_tmp;
HXDLIN(  84)		bool _hx_tmp1;
HXDLIN(  84)		bool _hx_tmp2;
HXDLIN(  84)		if ((row >= 0)) {
HXDLIN(  84)			_hx_tmp2 = (row < this->m_height);
            		}
            		else {
HXDLIN(  84)			_hx_tmp2 = false;
            		}
HXDLIN(  84)		if (_hx_tmp2) {
HXDLIN(  84)			_hx_tmp1 = (col >= 0);
            		}
            		else {
HXDLIN(  84)			_hx_tmp1 = false;
            		}
HXDLIN(  84)		if (_hx_tmp1) {
HXDLIN(  84)			_hx_tmp = (col <= this->m_width);
            		}
            		else {
HXDLIN(  84)			_hx_tmp = false;
            		}
HXDLIN(  84)		if (_hx_tmp) {
HXLINE(  85)			this->m_matrix->get(row).StaticCast<  ::openfl::_Vector::FloatVector >()->set(col,value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(DynamicMatrix_obj,setValue,(void))

void DynamicMatrix_obj::loadIdentity(){
            	HX_STACKFRAME(&_hx_pos_cf0e468baa9144f2_93_loadIdentity)
HXDLIN(  93)		if (::hx::IsNotNull( this->m_matrix )) {
HXLINE(  95)			int _g = 0;
HXDLIN(  95)			int _g1 = this->m_height;
HXDLIN(  95)			while((_g < _g1)){
HXLINE(  95)				_g = (_g + 1);
HXDLIN(  95)				int i = (_g - 1);
HXLINE(  97)				{
HXLINE(  97)					int _g2 = 0;
HXDLIN(  97)					int _g3 = this->m_width;
HXDLIN(  97)					while((_g2 < _g3)){
HXLINE(  97)						_g2 = (_g2 + 1);
HXDLIN(  97)						int j = (_g2 - 1);
HXLINE(  99)						{
HXLINE(  99)							::Dynamic this1 = this->m_matrix->get(i).StaticCast<  ::openfl::_Vector::FloatVector >();
HXDLIN(  99)							int _hx_tmp;
HXDLIN(  99)							if ((i == j)) {
HXLINE(  99)								_hx_tmp = 1;
            							}
            							else {
HXLINE(  99)								_hx_tmp = 0;
            							}
HXDLIN(  99)							( ( ::openfl::_Vector::FloatVector)(this1) )->set(j,( (Float)(_hx_tmp) ));
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DynamicMatrix_obj,loadIdentity,(void))

void DynamicMatrix_obj::loadZeros(){
            	HX_STACKFRAME(&_hx_pos_cf0e468baa9144f2_109_loadZeros)
HXDLIN( 109)		if (::hx::IsNotNull( this->m_matrix )) {
HXLINE( 110)			this->multiplyNumber(( (Float)(0) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DynamicMatrix_obj,loadZeros,(void))

bool DynamicMatrix_obj::multiply( ::flxanimate::motion::DynamicMatrix inMatrix,::hx::Null< int >  __o_order){
            		int order = __o_order.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_cf0e468baa9144f2_128_multiply)
HXLINE( 129)		bool _hx_tmp;
HXDLIN( 129)		if (::hx::IsNotNull( this->m_matrix )) {
HXLINE( 129)			_hx_tmp = ::hx::IsNull( inMatrix );
            		}
            		else {
HXLINE( 129)			_hx_tmp = true;
            		}
HXDLIN( 129)		if (_hx_tmp) {
HXLINE( 130)			return false;
            		}
HXLINE( 132)		int inHeight = inMatrix->getHeight();
HXLINE( 133)		int inWidth = inMatrix->getWidth();
HXLINE( 135)		int width;
HXDLIN( 135)		if ((order == ::flxanimate::motion::DynamicMatrix_obj::MATRIX_ORDER_APPEND)) {
HXLINE( 135)			width = inWidth;
            		}
            		else {
HXLINE( 135)			width = inMatrix->getWidth();
            		}
HXLINE( 136)		int height;
HXDLIN( 136)		if ((order == ::flxanimate::motion::DynamicMatrix_obj::MATRIX_ORDER_APPEND)) {
HXLINE( 136)			height = inHeight;
            		}
            		else {
HXLINE( 136)			height = this->m_height;
            		}
HXLINE( 138)		if ((width != height)) {
HXLINE( 139)			return false;
            		}
HXLINE( 141)		 ::flxanimate::motion::DynamicMatrix result =  ::flxanimate::motion::DynamicMatrix_obj::__alloc( HX_CTX ,width,height);
HXLINE( 142)		{
HXLINE( 142)			int _g = 0;
HXDLIN( 142)			int _g1 = height;
HXDLIN( 142)			while((_g < _g1)){
HXLINE( 142)				_g = (_g + 1);
HXDLIN( 142)				int i = (_g - 1);
HXLINE( 144)				{
HXLINE( 144)					int _g2 = 0;
HXDLIN( 144)					int _g3 = width;
HXDLIN( 144)					while((_g2 < _g3)){
HXLINE( 144)						_g2 = (_g2 + 1);
HXDLIN( 144)						int j = (_g2 - 1);
HXLINE( 146)						Float total = ( (Float)(0) );
HXLINE( 147)						int k = 0;
HXDLIN( 147)						int m = 0;
HXLINE( 148)						while(true){
HXLINE( 148)							bool _hx_tmp1;
HXDLIN( 148)							if ((k < ::Math_obj::max(( (Float)(this->m_height) ),( (Float)(inHeight) )))) {
HXLINE( 148)								_hx_tmp1 = (m < ::Math_obj::max(( (Float)(this->m_width) ),( (Float)(inWidth) )));
            							}
            							else {
HXLINE( 148)								_hx_tmp1 = false;
            							}
HXDLIN( 148)							if (!(_hx_tmp1)) {
HXLINE( 148)								goto _hx_goto_14;
            							}
HXLINE( 150)							Float total1 = inMatrix->getValue(k,j);
HXDLIN( 150)							total = (total + (total1 * this->m_matrix->get(i).StaticCast<  ::openfl::_Vector::FloatVector >()->get(m)));
HXLINE( 151)							k = (k + 1);
HXLINE( 152)							m = (m + 1);
            						}
            						_hx_goto_14:;
HXLINE( 154)						result->setValue(i,j,total);
            					}
            				}
            			}
            		}
HXLINE( 158)		this->m_matrix = null();
HXLINE( 160)		this->create(width,height);
HXLINE( 162)		{
HXLINE( 162)			int _g4 = 0;
HXDLIN( 162)			int _g5 = inHeight;
HXDLIN( 162)			while((_g4 < _g5)){
HXLINE( 162)				_g4 = (_g4 + 1);
HXDLIN( 162)				int i1 = (_g4 - 1);
HXLINE( 164)				{
HXLINE( 164)					int _g6 = 0;
HXDLIN( 164)					int _g7 = this->m_width;
HXDLIN( 164)					while((_g6 < _g7)){
HXLINE( 164)						_g6 = (_g6 + 1);
HXDLIN( 164)						int j1 = (_g6 - 1);
HXLINE( 166)						{
HXLINE( 166)							::Dynamic this1 = this->m_matrix->get(i1).StaticCast<  ::openfl::_Vector::FloatVector >();
HXDLIN( 166)							( ( ::openfl::_Vector::FloatVector)(this1) )->set(j1,result->getValue(i1,j1));
            						}
            					}
            				}
            			}
            		}
HXLINE( 169)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DynamicMatrix_obj,multiply,return )

bool DynamicMatrix_obj::multiplyNumber(Float value){
            	HX_STACKFRAME(&_hx_pos_cf0e468baa9144f2_180_multiplyNumber)
HXLINE( 181)		if (::hx::IsNull( this->m_matrix )) {
HXLINE( 182)			return false;
            		}
HXLINE( 184)		{
HXLINE( 184)			int _g = 0;
HXDLIN( 184)			int _g1 = this->m_height;
HXDLIN( 184)			while((_g < _g1)){
HXLINE( 184)				_g = (_g + 1);
HXDLIN( 184)				int i = (_g - 1);
HXLINE( 186)				{
HXLINE( 186)					int _g2 = 0;
HXDLIN( 186)					int _g3 = this->m_width;
HXDLIN( 186)					while((_g2 < _g3)){
HXLINE( 186)						_g2 = (_g2 + 1);
HXDLIN( 186)						int j = (_g2 - 1);
HXLINE( 188)						{
HXLINE( 188)							int _g4 = j;
HXDLIN( 188)							 ::openfl::_Vector::FloatVector _g5 = this->m_matrix->get(i).StaticCast<  ::openfl::_Vector::FloatVector >();
HXDLIN( 188)							_g5->set(_g4,(_g5->get(_g4) * value));
            						}
            					}
            				}
            			}
            		}
HXLINE( 192)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DynamicMatrix_obj,multiplyNumber,return )

bool DynamicMatrix_obj::add( ::flxanimate::motion::DynamicMatrix inMatrix){
            	HX_STACKFRAME(&_hx_pos_cf0e468baa9144f2_205_add)
HXLINE( 206)		bool _hx_tmp;
HXDLIN( 206)		if (::hx::IsNotNull( this->m_matrix )) {
HXLINE( 206)			_hx_tmp = ::hx::IsNull( inMatrix );
            		}
            		else {
HXLINE( 206)			_hx_tmp = true;
            		}
HXDLIN( 206)		if (_hx_tmp) {
HXLINE( 207)			return false;
            		}
HXLINE( 209)		int inHeight = inMatrix->getHeight();
HXLINE( 210)		int inWidth = inMatrix->getWidth();
HXLINE( 211)		bool _hx_tmp1;
HXDLIN( 211)		if ((this->m_width == inWidth)) {
HXLINE( 211)			_hx_tmp1 = (inHeight != this->m_height);
            		}
            		else {
HXLINE( 211)			_hx_tmp1 = true;
            		}
HXDLIN( 211)		if (_hx_tmp1) {
HXLINE( 212)			return false;
            		}
HXLINE( 214)		{
HXLINE( 214)			int _g = 0;
HXDLIN( 214)			int _g1 = this->m_height;
HXDLIN( 214)			while((_g < _g1)){
HXLINE( 214)				_g = (_g + 1);
HXDLIN( 214)				int i = (_g - 1);
HXLINE( 216)				{
HXLINE( 216)					int _g2 = 0;
HXDLIN( 216)					int _g3 = this->m_width;
HXDLIN( 216)					while((_g2 < _g3)){
HXLINE( 216)						_g2 = (_g2 + 1);
HXDLIN( 216)						int j = (_g2 - 1);
HXLINE( 218)						{
HXLINE( 218)							int _g4 = j;
HXDLIN( 218)							 ::openfl::_Vector::FloatVector _g5 = this->m_matrix->get(i).StaticCast<  ::openfl::_Vector::FloatVector >();
HXDLIN( 218)							{
HXLINE( 218)								Float value = _g5->get(_g4);
HXDLIN( 218)								_g5->set(_g4,(value + inMatrix->getValue(i,j)));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 222)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DynamicMatrix_obj,add,return )

int DynamicMatrix_obj::MATRIX_ORDER_PREPEND;

int DynamicMatrix_obj::MATRIX_ORDER_APPEND;


::hx::ObjectPtr< DynamicMatrix_obj > DynamicMatrix_obj::__new(int width,int height) {
	::hx::ObjectPtr< DynamicMatrix_obj > __this = new DynamicMatrix_obj();
	__this->__construct(width,height);
	return __this;
}

::hx::ObjectPtr< DynamicMatrix_obj > DynamicMatrix_obj::__alloc(::hx::Ctx *_hx_ctx,int width,int height) {
	DynamicMatrix_obj *__this = (DynamicMatrix_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DynamicMatrix_obj), true, "flxanimate.motion.DynamicMatrix"));
	*(void **)__this = DynamicMatrix_obj::_hx_vtable;
	__this->__construct(width,height);
	return __this;
}

DynamicMatrix_obj::DynamicMatrix_obj()
{
}

void DynamicMatrix_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DynamicMatrix);
	HX_MARK_MEMBER_NAME(m_width,"m_width");
	HX_MARK_MEMBER_NAME(m_height,"m_height");
	HX_MARK_MEMBER_NAME(m_matrix,"m_matrix");
	HX_MARK_END_CLASS();
}

void DynamicMatrix_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(m_width,"m_width");
	HX_VISIT_MEMBER_NAME(m_height,"m_height");
	HX_VISIT_MEMBER_NAME(m_matrix,"m_matrix");
}

::hx::Val DynamicMatrix_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"m_width") ) { return ::hx::Val( m_width ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"m_height") ) { return ::hx::Val( m_height ); }
		if (HX_FIELD_EQ(inName,"m_matrix") ) { return ::hx::Val( m_matrix ); }
		if (HX_FIELD_EQ(inName,"getWidth") ) { return ::hx::Val( getWidth_dyn() ); }
		if (HX_FIELD_EQ(inName,"getValue") ) { return ::hx::Val( getValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"setValue") ) { return ::hx::Val( setValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"multiply") ) { return ::hx::Val( multiply_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getHeight") ) { return ::hx::Val( getHeight_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadZeros") ) { return ::hx::Val( loadZeros_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadIdentity") ) { return ::hx::Val( loadIdentity_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"multiplyNumber") ) { return ::hx::Val( multiplyNumber_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool DynamicMatrix_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"MATRIX_ORDER_APPEND") ) { outValue = ( MATRIX_ORDER_APPEND ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"MATRIX_ORDER_PREPEND") ) { outValue = ( MATRIX_ORDER_PREPEND ); return true; }
	}
	return false;
}

::hx::Val DynamicMatrix_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"m_width") ) { m_width=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"m_height") ) { m_height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m_matrix") ) { m_matrix=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DynamicMatrix_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"MATRIX_ORDER_APPEND") ) { MATRIX_ORDER_APPEND=ioValue.Cast< int >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"MATRIX_ORDER_PREPEND") ) { MATRIX_ORDER_PREPEND=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void DynamicMatrix_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("m_width",74,8d,ed,7a));
	outFields->push(HX_("m_height",b9,b0,3d,cb));
	outFields->push(HX_("m_matrix",13,df,b9,84));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DynamicMatrix_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(DynamicMatrix_obj,m_width),HX_("m_width",74,8d,ed,7a)},
	{::hx::fsInt,(int)offsetof(DynamicMatrix_obj,m_height),HX_("m_height",b9,b0,3d,cb)},
	{::hx::fsObject /*  ::openfl::_Vector::ObjectVector */ ,(int)offsetof(DynamicMatrix_obj,m_matrix),HX_("m_matrix",13,df,b9,84)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo DynamicMatrix_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &DynamicMatrix_obj::MATRIX_ORDER_PREPEND,HX_("MATRIX_ORDER_PREPEND",1f,ed,a6,78)},
	{::hx::fsInt,(void *) &DynamicMatrix_obj::MATRIX_ORDER_APPEND,HX_("MATRIX_ORDER_APPEND",c9,1c,a1,c2)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String DynamicMatrix_obj_sMemberFields[] = {
	HX_("m_width",74,8d,ed,7a),
	HX_("m_height",b9,b0,3d,cb),
	HX_("m_matrix",13,df,b9,84),
	HX_("create",fc,66,0f,7c),
	HX_("getWidth",90,c5,39,2a),
	HX_("getHeight",1d,91,a2,7e),
	HX_("getValue",fb,8e,8f,91),
	HX_("setValue",6f,e8,ec,3f),
	HX_("loadIdentity",84,31,98,72),
	HX_("loadZeros",45,80,33,9d),
	HX_("multiply",24,e2,8c,9a),
	HX_("multiplyNumber",0d,10,76,ad),
	HX_("add",21,f2,49,00),
	::String(null()) };

static void DynamicMatrix_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DynamicMatrix_obj::MATRIX_ORDER_PREPEND,"MATRIX_ORDER_PREPEND");
	HX_MARK_MEMBER_NAME(DynamicMatrix_obj::MATRIX_ORDER_APPEND,"MATRIX_ORDER_APPEND");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DynamicMatrix_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DynamicMatrix_obj::MATRIX_ORDER_PREPEND,"MATRIX_ORDER_PREPEND");
	HX_VISIT_MEMBER_NAME(DynamicMatrix_obj::MATRIX_ORDER_APPEND,"MATRIX_ORDER_APPEND");
};

#endif

::hx::Class DynamicMatrix_obj::__mClass;

static ::String DynamicMatrix_obj_sStaticFields[] = {
	HX_("MATRIX_ORDER_PREPEND",1f,ed,a6,78),
	HX_("MATRIX_ORDER_APPEND",c9,1c,a1,c2),
	::String(null())
};

void DynamicMatrix_obj::__register()
{
	DynamicMatrix_obj _hx_dummy;
	DynamicMatrix_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.motion.DynamicMatrix",27,b9,bd,ef);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DynamicMatrix_obj::__GetStatic;
	__mClass->mSetStaticField = &DynamicMatrix_obj::__SetStatic;
	__mClass->mMarkFunc = DynamicMatrix_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(DynamicMatrix_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DynamicMatrix_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DynamicMatrix_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DynamicMatrix_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DynamicMatrix_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DynamicMatrix_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DynamicMatrix_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_cf0e468baa9144f2_16_boot)
HXDLIN(  16)		MATRIX_ORDER_PREPEND = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_cf0e468baa9144f2_20_boot)
HXDLIN(  20)		MATRIX_ORDER_APPEND = 1;
            	}
}

} // end namespace flxanimate
} // end namespace motion
