// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flxanimate_effects_FlxBrightness
#include <flxanimate/effects/FlxBrightness.h>
#endif
#ifndef INCLUDED_flxanimate_effects_FlxColorEffect
#include <flxanimate/effects/FlxColorEffect.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a265cf83130bb21a_8_new,"flxanimate.effects.FlxBrightness","new",0x1d0815ca,"flxanimate.effects.FlxBrightness.new","flxanimate/effects/FlxBrightness.hx",8,0x8d423de8)
HX_LOCAL_STACK_FRAME(_hx_pos_a265cf83130bb21a_15_process,"flxanimate.effects.FlxBrightness","process",0x267ee4d9,"flxanimate.effects.FlxBrightness.process","flxanimate/effects/FlxBrightness.hx",15,0x8d423de8)
HX_LOCAL_STACK_FRAME(_hx_pos_a265cf83130bb21a_23_set_brightness,"flxanimate.effects.FlxBrightness","set_brightness",0x45223d64,"flxanimate.effects.FlxBrightness.set_brightness","flxanimate/effects/FlxBrightness.hx",23,0x8d423de8)
namespace flxanimate{
namespace effects{

void FlxBrightness_obj::__construct(Float brightness){
            	HX_STACKFRAME(&_hx_pos_a265cf83130bb21a_8_new)
HXLINE(   9)		this->set_brightness(brightness);
HXLINE(  12)		super::__construct();
            	}

Dynamic FlxBrightness_obj::__CreateEmpty() { return new FlxBrightness_obj; }

void *FlxBrightness_obj::_hx_vtable = 0;

Dynamic FlxBrightness_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxBrightness_obj > _hx_result = new FlxBrightness_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FlxBrightness_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24f30b38) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x24f30b38;
	} else {
		return inClassId==(int)0x4fae23f1;
	}
}

void FlxBrightness_obj::process(){
            	HX_STACKFRAME(&_hx_pos_a265cf83130bb21a_15_process)
HXLINE(  16)		this->c_Transform->redMultiplier = (this->c_Transform->greenMultiplier = (this->c_Transform->blueMultiplier = (( (Float)(1) ) - ::Math_obj::abs(this->brightness))));
HXLINE(  18)		if ((this->brightness >= 0)) {
HXLINE(  19)			this->c_Transform->redOffset = (this->c_Transform->greenOffset = (this->c_Transform->blueOffset = (( (Float)(255) ) * this->brightness)));
            		}
            	}


Float FlxBrightness_obj::set_brightness(Float value){
            	HX_STACKFRAME(&_hx_pos_a265cf83130bb21a_23_set_brightness)
HXLINE(  24)		if ((this->brightness != value)) {
HXLINE(  24)			this->renderDirty = true;
            		}
HXLINE(  26)		return (this->brightness = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBrightness_obj,set_brightness,return )


::hx::ObjectPtr< FlxBrightness_obj > FlxBrightness_obj::__new(Float brightness) {
	::hx::ObjectPtr< FlxBrightness_obj > __this = new FlxBrightness_obj();
	__this->__construct(brightness);
	return __this;
}

::hx::ObjectPtr< FlxBrightness_obj > FlxBrightness_obj::__alloc(::hx::Ctx *_hx_ctx,Float brightness) {
	FlxBrightness_obj *__this = (FlxBrightness_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxBrightness_obj), true, "flxanimate.effects.FlxBrightness"));
	*(void **)__this = FlxBrightness_obj::_hx_vtable;
	__this->__construct(brightness);
	return __this;
}

FlxBrightness_obj::FlxBrightness_obj()
{
}

::hx::Val FlxBrightness_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"process") ) { return ::hx::Val( process_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"brightness") ) { return ::hx::Val( brightness ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"set_brightness") ) { return ::hx::Val( set_brightness_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxBrightness_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"brightness") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_brightness(inValue.Cast< Float >()) );brightness=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxBrightness_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("brightness",d1,8d,71,65));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxBrightness_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(FlxBrightness_obj,brightness),HX_("brightness",d1,8d,71,65)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxBrightness_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxBrightness_obj_sMemberFields[] = {
	HX_("brightness",d1,8d,71,65),
	HX_("process",6f,a2,4a,f1),
	HX_("set_brightness",8e,fe,86,fb),
	::String(null()) };

::hx::Class FlxBrightness_obj::__mClass;

void FlxBrightness_obj::__register()
{
	FlxBrightness_obj _hx_dummy;
	FlxBrightness_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flxanimate.effects.FlxBrightness",d8,28,0b,b7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxBrightness_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxBrightness_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxBrightness_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxBrightness_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flxanimate
} // end namespace effects
